db_id,question,query,filtered_database_schema,database_schema,correct_tables,correct_columns,all_tables
retail_complains,What was the review context from Jacksonville on 2017/7/22?,SELECT t1.reviews FROM reviews as t1 inner JOIN district as t2 ON t1.district_id = t2.district_id WHERE t2.city = 'Jacksonville' AND t1.date = '2017-07-22',"CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

","CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

","reviews, district","reviews.reviews, reviews.district_id, district.district_id, district.city, reviews.date","state, callcenterlogs, client, district, events, reviews"
image_and_language,What colour is the van that can be spotted in image no. 1?,SELECT t4.att_class FROM img_obj as t1 inner JOIN OBJ_CLasSES as t2 ON t1.OBJ_CLasS_ID = t2.OBJ_CLasS_ID inner JOIN img_obj_ATT as t3 ON t1.img_id = t3.img_id inner JOIN att_classES as t4 ON t3.att_class_ID = t4.att_class_ID WHERE t2.OBJ_CLasS = 'van' AND t1.img_id = 1 GROUP BY t4.att_class,"CREATE TABLE `img_obj` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `img_obj`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `OBJ_CLasSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLasSES`:
0, awning
1, goggles
2, dot

CREATE TABLE `img_obj_ATT` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `img_obj_ATT`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `att_classES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `att_classES`:
0, building s
1, indoors
2, cluttered

","CREATE TABLE `ATT_CLASSES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `ATT_CLASSES`:
0, building s
1, indoors
2, cluttered

CREATE TABLE `OBJ_CLASSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLASSES`:
0, awning
1, goggles
2, dot

CREATE TABLE `IMG_OBJ` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `IMG_OBJ`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `IMG_OBJ_ATT` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_OBJ_ATT`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `PRED_CLASSES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `PRED_CLASSES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `IMG_REL` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_REL`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

","img_obj, OBJ_CLasSES, img_obj_ATT, att_classES","att_classES.att_class, img_obj.OBJ_CLasS_ID, OBJ_CLasSES.OBJ_CLasS_ID, img_obj.img_id, img_obj_ATT.img_id, img_obj_ATT.att_class_ID, att_classES.att_class_ID, OBJ_CLasSES.OBJ_CLasS","ATT_CLASSES, OBJ_CLASSES, IMG_OBJ, IMG_OBJ_ATT, PRED_CLASSES, IMG_REL"
simpson_episodes,Please list the name of crew that were born before 1970.,"SELECT name FROM person WHERE substr(birthdate, 1, 4) < '1970';","CREATE TABLE `person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

",person,"name, birthdate","Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
beer_factory,What is the percentage of 5 star ratings River City brand root beer get?,SELECT cast(COUNT(case when t2.starrating = 5 then 1 else null end) as real) * 100 / COUNT(t2.starrating) FROM rootbeerbrand as t1 inner JOIN rootbeerreview as t2 ON t1.brandid = t2.brandid WHERE t1.brandname = 'River City',"CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

CREATE TABLE `rootbeerreview` (
  CustomerID INTEGER PRIMARY KEY REFERENCES customers(CustomerID),
  BrandID INTEGER PRIMARY KEY REFERENCES rootbeerbrand(BrandID),
  StarRating INTEGER,
  ReviewDate DATE,
  Review TEXT
);
Sample rows from `rootbeerreview`:
101811, 10012, 5, 2013-07-15, None
101811, 10014, 1, 2013-07-08, None
101811, 10015, 3, 2013-07-25, None

","CREATE TABLE `customers` (
  CustomerID INTEGER,
  First TEXT,
  Last TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER,
  Email TEXT,
  PhoneNumber TEXT,
  FirstPurchaseDate DATE,
  SubscribedToEmailList TEXT,
  Gender TEXT
);
Sample rows from `customers`:
101811, Kenneth, Walton, 6715 Commonwealth Dr, Sacramento, CA, 94256, walton.k76@fastmail.com, (916) 918-1561, 2013-05-30, FALSE, M
103508, Madeleine, Jones, 3603 Leola Way, Sacramento, CA, 94258, j_madeleine@gmail.com, (916) 186-9423, 2013-02-06, FALSE, F
104939, Damen, Wheeler, 6740 Branwood Way, Orangevale, CA, 95662, dwheeler@outlook.com, (916) 164-1156, 2013-04-11, FALSE, M

CREATE TABLE `geolocation` (
  LocationID INTEGER REFERENCES location(LocationID),
  Latitude REAL,
  Longitude REAL
);
Sample rows from `geolocation`:
0, 0.0, 0.0
1, 38.566129, -121.426432
2, 38.559615, -121.42243

CREATE TABLE `location` (
  LocationID INTEGER REFERENCES geolocation(LocationID),
  LocationName TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER
);
Sample rows from `location`:
0, LOST, None, None, None, None
1, Sac State American River Courtyard, 6000 J St, Sacramento, CA, 95819
2, Sac State Union, 6000 J St, Sacramento, CA, 95819

CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

CREATE TABLE `rootbeerreview` (
  CustomerID INTEGER PRIMARY KEY REFERENCES customers(CustomerID),
  BrandID INTEGER PRIMARY KEY REFERENCES rootbeerbrand(BrandID),
  StarRating INTEGER,
  ReviewDate DATE,
  Review TEXT
);
Sample rows from `rootbeerreview`:
101811, 10012, 5, 2013-07-15, None
101811, 10014, 1, 2013-07-08, None
101811, 10015, 3, 2013-07-25, None

CREATE TABLE `transaction` (
  TransactionID INTEGER,
  CreditCardNumber INTEGER,
  CustomerID INTEGER REFERENCES customers(CustomerID),
  TransactionDate DATE,
  CreditCardType TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  RootBeerID INTEGER REFERENCES rootbeer(RootBeerID),
  PurchasePrice REAL
);
Sample rows from `transaction`:
100000, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105661, 3.0
100001, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105798, 3.0
100002, 6011583832864739, 864896, 2014-07-07, Discover, 2, 102514, 3.0

","rootbeerbrand, rootbeerreview","rootbeerreview.starrating, rootbeerbrand.brandid, rootbeerreview.brandid, rootbeerbrand.brandname","customers, geolocation, location, rootbeerbrand, rootbeer, rootbeerreview, transaction"
cars,What is the fastest car made by Japan?,SELECT t1.car_name FROM data as t1 inner JOIN production as t2 ON t1.id = t2.id inner JOIN country as t3 ON t3.origin = t2.country WHERE t3.country = 'Japan' ORDER BY t1.horsepower DESC LIMIT 1,"CREATE TABLE `data` (
  ID INTEGER REFERENCES price(ID),
  mpg REAL,
  cylinders INTEGER,
  displacement REAL,
  horsepower INTEGER,
  weight INTEGER,
  acceleration REAL,
  model INTEGER,
  car_name TEXT
);
Sample rows from `data`:
1, 18.0, 8, 307.0, 130, 3504, 12.0, 70, chevrolet chevelle malibu
2, 15.0, 8, 350.0, 165, 3693, 11.5, 70, buick skylark 320
3, 18.0, 8, 318.0, 150, 3436, 11.0, 70, plymouth satellite

CREATE TABLE `production` (
  ID INTEGER PRIMARY KEY REFERENCES price(ID) REFERENCES data(ID),
  model_year INTEGER PRIMARY KEY,
  country INTEGER REFERENCES country(origin)
);
Sample rows from `production`:
1, 1970, 1
1, 1971, 1
2, 1970, 1

CREATE TABLE `country` (
  origin INTEGER,
  country TEXT
);
Sample rows from `country`:
1, USA
2, Europe
3, Japan

","CREATE TABLE `country` (
  origin INTEGER,
  country TEXT
);
Sample rows from `country`:
1, USA
2, Europe
3, Japan

CREATE TABLE `price` (
  ID INTEGER,
  price REAL
);
Sample rows from `price`:
1, 25561.59078
2, 24221.42273
3, 27240.84373

CREATE TABLE `data` (
  ID INTEGER REFERENCES price(ID),
  mpg REAL,
  cylinders INTEGER,
  displacement REAL,
  horsepower INTEGER,
  weight INTEGER,
  acceleration REAL,
  model INTEGER,
  car_name TEXT
);
Sample rows from `data`:
1, 18.0, 8, 307.0, 130, 3504, 12.0, 70, chevrolet chevelle malibu
2, 15.0, 8, 350.0, 165, 3693, 11.5, 70, buick skylark 320
3, 18.0, 8, 318.0, 150, 3436, 11.0, 70, plymouth satellite

CREATE TABLE `production` (
  ID INTEGER PRIMARY KEY REFERENCES price(ID) REFERENCES data(ID),
  model_year INTEGER PRIMARY KEY,
  country INTEGER REFERENCES country(origin)
);
Sample rows from `production`:
1, 1970, 1
1, 1971, 1
2, 1970, 1

","data, production, country","data.car_name, data.id, production.id, country.origin, production.country, country.country, data.horsepower","country, price, data, production"
authors,What is the title and journal homepage of the latest published paper?,"SELECT t1.title, t2.homepage FROM paper as t1 inner JOIN journal as t2 ON t1.journalid = t2.id ORDER BY t1.year DESC LIMIT 1","CREATE TABLE `paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

","CREATE TABLE `Author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `Author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

CREATE TABLE `Conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

CREATE TABLE `Journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `Paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `Paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `PaperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `PaperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

","paper, journal","paper.title, journal.homepage, paper.journalid, journal.id, paper.year","Author, Conference, Journal, Paper, PaperAuthor"
movie,How much longer in percentage is the screen time of the most important character in Batman than the least important one?,"SELECT (MAX(cast(substr(t2.screentime, 3, 2) as real)) - MIN(cast(substr(t2.screentime, 3, 2) as real))) * 100 / MIN(cast(substr(t2.screentime, 3, 2) as real)) FROM movie as t1 inner JOIN characters as t2 ON t1.movieid = t2.movieid WHERE t1.title = 'Batman'","CREATE TABLE `movie` (
  MovieID INTEGER,
  Title TEXT,
  MPAA Rating TEXT,
  Budget INTEGER,
  Gross INTEGER,
  Release Date TEXT,
  Genre TEXT,
  Runtime INTEGER,
  Rating REAL,
  Rating Count INTEGER,
  Summary TEXT
);
Sample rows from `movie`:
1, Look Who's Talking, PG-13, 7500000, 296000000, 1989-10-12, Romance, 93, 5.9, 73638, After a single, career-minded woman is left on her own to give birth to the child of a married man, she finds a new romantic chance in a cab driver. Meanwhile, the point-of-view of the newborn boy is narrated through voice-over.
2, Driving Miss Daisy, PG, 7500000, 145793296, 1989-12-13, Comedy, 99, 7.4, 91075, An old Jewish woman and her African-American chauffeur in the American South have a relationship that grows and improves over the years.
3, Turner & Hooch, PG, 13000000, 71079915, 1989-07-28, Crime, 100, 7.2, 91415, Det. Scott Turner (Tom Hanks) is an uptight, by-the-book police officer. When his friend Amos Reed (John McIntire), the proprietor of a junkyard, is killed, Turner reluctantly inherits the man's dog. Turner adjusts to life with the dog to help solve a murder case.

CREATE TABLE `characters` (
  MovieID INTEGER PRIMARY KEY REFERENCES movie(MovieID),
  ActorID INTEGER PRIMARY KEY REFERENCES actor(ActorID),
  Character Name TEXT,
  creditOrder INTEGER,
  pay TEXT,
  screentime TEXT
);
Sample rows from `characters`:
1, 1, James, 1, None, None
1, 2, Mollie, 2, None, None
1, 3, Rosie, 3, None, None

","CREATE TABLE `actor` (
  ActorID INTEGER,
  Name TEXT,
  Date of Birth DATE,
  Birth City TEXT,
  Birth Country TEXT,
  Height (Inches) INTEGER,
  Biography TEXT,
  Gender TEXT,
  Ethnicity TEXT,
  NetWorth TEXT
);
Sample rows from `actor`:
1, John Travolta, 1954-02-18, Englewood, USA, 74, John Joseph Travolta was born in Englewood, New Jersey, one of six children of Helen Travolta (n�e Helen Cecilia Burke) and Salvatore/Samuel J. Travolta. His father was of Italian descent and his mother was of Irish ancestry. His father owned a tire repair shop called Travolta Tires in Hillsdale, NJ. Travolta started acting appearing in a local ..., Male, White, $250,000,000.00
2, Kirstie Alley, 1951-01-12, Wichita, USA, 67, None, Female, White, $40,000,000.00
3, Olympia Dukakis, 1931-06-20, Lowell, USA, 63, Long a vital, respected lady of the classic and contemporary stage this grand lady did not become a household name and sought-after film actress until age 56 when she turned in a glorious, Oscar-winning perf as Cher's sardonic mother in the romantic comedy Moonstruck (1987). Since then movie (and TV) fans have discovered what the East coast ..., Female, White, $6,000,000.00

CREATE TABLE `movie` (
  MovieID INTEGER,
  Title TEXT,
  MPAA Rating TEXT,
  Budget INTEGER,
  Gross INTEGER,
  Release Date TEXT,
  Genre TEXT,
  Runtime INTEGER,
  Rating REAL,
  Rating Count INTEGER,
  Summary TEXT
);
Sample rows from `movie`:
1, Look Who's Talking, PG-13, 7500000, 296000000, 1989-10-12, Romance, 93, 5.9, 73638, After a single, career-minded woman is left on her own to give birth to the child of a married man, she finds a new romantic chance in a cab driver. Meanwhile, the point-of-view of the newborn boy is narrated through voice-over.
2, Driving Miss Daisy, PG, 7500000, 145793296, 1989-12-13, Comedy, 99, 7.4, 91075, An old Jewish woman and her African-American chauffeur in the American South have a relationship that grows and improves over the years.
3, Turner & Hooch, PG, 13000000, 71079915, 1989-07-28, Crime, 100, 7.2, 91415, Det. Scott Turner (Tom Hanks) is an uptight, by-the-book police officer. When his friend Amos Reed (John McIntire), the proprietor of a junkyard, is killed, Turner reluctantly inherits the man's dog. Turner adjusts to life with the dog to help solve a murder case.

CREATE TABLE `characters` (
  MovieID INTEGER PRIMARY KEY REFERENCES movie(MovieID),
  ActorID INTEGER PRIMARY KEY REFERENCES actor(ActorID),
  Character Name TEXT,
  creditOrder INTEGER,
  pay TEXT,
  screentime TEXT
);
Sample rows from `characters`:
1, 1, James, 1, None, None
1, 2, Mollie, 2, None, None
1, 3, Rosie, 3, None, None

","movie, characters","characters.screentime, movie.movieid, characters.movieid, movie.title","actor, movie, characters"
retail_complains,What is the average age of Norwalk clients?,SELECT cast(SUM(t1.age) as real) / COUNT(t1.age) as average FROM client as t1 inner JOIN district as t2 ON t1.district_id = t2.district_id WHERE t2.city = 'Norwalk',"CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

","CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

","client, district","client.age, client.district_id, district.district_id, district.city","state, callcenterlogs, client, district, events, reviews"
app_store,What is the lowest sentiment polarity score of the Basketball Stars app for people who dislikes the app pretty much and how many downloads does it have?,"SELECT MIN(t2.sentiment_polarity), t1.installs FROM playstore as t1 inner JOIN user_reviews as t2 ON t1.app = t2.app WHERE t1.app = 'Basketball Stars'","CREATE TABLE `playstore` (
  App TEXT,
  Category TEXT,
  Rating REAL,
  Reviews INTEGER,
  Size TEXT,
  Installs TEXT,
  Type TEXT,
  Price TEXT,
  Content Rating TEXT,
  Genres TEXT
);
Sample rows from `playstore`:
Photo Editor & Candy Camera & Grid & ScrapBook, ART_AND_DESIGN, 4.1, 159, 19M, 10,000+, Free, 0, Everyone, Art & Design
Coloring book moana, ART_AND_DESIGN, 3.9, 967, 14M, 500,000+, Free, 0, Everyone, Art & Design;Pretend Play
U Launcher Lite – FREE Live Cool Themes, Hide Apps, ART_AND_DESIGN, 4.7, 87510, 8.7M, 5,000,000+, Free, 0, Everyone, Art & Design

CREATE TABLE `user_reviews` (
  App TEXT REFERENCES playstore(App),
  Translated_Review TEXT,
  Sentiment TEXT,
  Sentiment_Polarity TEXT,
  Sentiment_Subjectivity TEXT
);
Sample rows from `user_reviews`:
10 Best Foods for You, I like eat delicious food. That's I'm cooking food myself, case ""10 Best Foods"" helps lot, also ""Best Before (Shelf Life)"", Positive, 1.0, 0.5333333333333333
10 Best Foods for You, This help eating healthy exercise regular basis, Positive, 0.25, 0.28846153846153844
10 Best Foods for You, nan, nan, nan, nan

","CREATE TABLE `playstore` (
  App TEXT,
  Category TEXT,
  Rating REAL,
  Reviews INTEGER,
  Size TEXT,
  Installs TEXT,
  Type TEXT,
  Price TEXT,
  Content Rating TEXT,
  Genres TEXT
);
Sample rows from `playstore`:
Photo Editor & Candy Camera & Grid & ScrapBook, ART_AND_DESIGN, 4.1, 159, 19M, 10,000+, Free, 0, Everyone, Art & Design
Coloring book moana, ART_AND_DESIGN, 3.9, 967, 14M, 500,000+, Free, 0, Everyone, Art & Design;Pretend Play
U Launcher Lite – FREE Live Cool Themes, Hide Apps, ART_AND_DESIGN, 4.7, 87510, 8.7M, 5,000,000+, Free, 0, Everyone, Art & Design

CREATE TABLE `user_reviews` (
  App TEXT REFERENCES playstore(App),
  Translated_Review TEXT,
  Sentiment TEXT,
  Sentiment_Polarity TEXT,
  Sentiment_Subjectivity TEXT
);
Sample rows from `user_reviews`:
10 Best Foods for You, I like eat delicious food. That's I'm cooking food myself, case ""10 Best Foods"" helps lot, also ""Best Before (Shelf Life)"", Positive, 1.0, 0.5333333333333333
10 Best Foods for You, This help eating healthy exercise regular basis, Positive, 0.25, 0.28846153846153844
10 Best Foods for You, nan, nan, nan, nan

","playstore, user_reviews","user_reviews.sentiment_polarity, playstore.installs, playstore.app, user_reviews.app","playstore, user_reviews"
cs_semester,What is the difficulty of the course in which a student with level of intellengence of 5 got an A grade?,SELECT t3.diff FROM student as t1 inner JOIN registration as t2 ON t1.student_id = t2.student_id inner JOIN course as t3 ON t2.course_id = t3.course_id WHERE t2.grade = 'A' AND t1.intelligence = 5,"CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

","CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

CREATE TABLE `prof` (
  prof_id INTEGER,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  popularity INTEGER,
  teachingability INTEGER,
  graduate_from TEXT
);
Sample rows from `prof`:
1, Male, Nathaniel, Pigford, npigford0@hku.hk, 3, 5, University of Washington
2, Male, Zhihua, Zhou, zzhihua@hku.hk, 2, 1, Beijing Polytechnic University
3, Male, Ogdon, Zywicki, ozywicki2@hku.hk, 2, 2, University of Boston

CREATE TABLE `RA` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `RA`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

","student, registration, course","course.diff, student.student_id, registration.student_id, registration.course_id, course.course_id, registration.grade, student.intelligence","course, prof, RA, registration, student"
authors,"Write down the conference full name of ""ICWE"" and it's homepage address.","SELECT fullname, homepage FROM conference WHERE shortname = 'ICWE'","CREATE TABLE `conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

","CREATE TABLE `Author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `Author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

CREATE TABLE `Conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

CREATE TABLE `Journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `Paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `Paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `PaperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `PaperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

",conference,"fullname, homepage, shortname","Author, Conference, Journal, Paper, PaperAuthor"
shipping,What is the model year of the truck used in shipment id 1003?,SELECT t1.model_year FROM truck as t1 inner JOIN shipment as t2 ON t1.truck_id = t2.truck_id WHERE t2.ship_id = '1003',"CREATE TABLE `truck` (
  truck_id INTEGER,
  make TEXT,
  model_year INTEGER
);
Sample rows from `truck`:
1, Peterbilt, 2005
2, Mack, 2006
3, Peterbilt, 2007

CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

","CREATE TABLE `city` (
  city_id INTEGER,
  city_name TEXT,
  state TEXT,
  population INTEGER,
  area REAL
);
Sample rows from `city`:
100, Union City, New Jersey, 67088, 1.3
101, Huntington Park, California, 61348, 3.0
102, Passaic, New Jersey, 67861, 3.1

CREATE TABLE `customer` (
  cust_id INTEGER,
  cust_name TEXT,
  annual_revenue INTEGER,
  cust_type TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip REAL,
  phone TEXT
);
Sample rows from `customer`:
193, Advanced Fabricators, 39588651, manufacturer, 5141 Summit Boulevard, West Palm Beach, FL, 33415.0, (561) 683-3535
304, Pard's Trailer Sales, 17158109, wholesaler, 5910 South 300 West, Salt Lake City, UT, 84107.0, (801) 262-4864
314, Saar Enterprises, Inc., 47403613, retailer, 11687 192nd Street, Council Bluffs, IA, 51503.0, (712) 366-4929

CREATE TABLE `driver` (
  driver_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip_code INTEGER,
  phone TEXT
);
Sample rows from `driver`:
20, Sue, Newell, 268 Richmond Ave, Memphis, TN, 38106, (901) 774-6569
21, Andrea, Simons, 3574 Oak Limb Cv, Memphis, TN, 38135, (901) 384-0984
22, Roger, McHaney, 1839 S Orleans St, Memphis, TN, 38106, (901) 948-1043

CREATE TABLE `truck` (
  truck_id INTEGER,
  make TEXT,
  model_year INTEGER
);
Sample rows from `truck`:
1, Peterbilt, 2005
2, Mack, 2006
3, Peterbilt, 2007

CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

","truck, shipment","truck.model_year, truck.truck_id, shipment.truck_id, shipment.ship_id","city, customer, driver, truck, shipment"
image_and_language,What is the caption for the prediction class id 12?,SELECT pred_class FROM pred_classES WHERE pred_class_ID = 12,"CREATE TABLE `pred_classES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `pred_classES`:
0, playing on
1, looking a
2, to left of

","CREATE TABLE `ATT_CLASSES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `ATT_CLASSES`:
0, building s
1, indoors
2, cluttered

CREATE TABLE `OBJ_CLASSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLASSES`:
0, awning
1, goggles
2, dot

CREATE TABLE `IMG_OBJ` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `IMG_OBJ`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `IMG_OBJ_ATT` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_OBJ_ATT`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `PRED_CLASSES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `PRED_CLASSES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `IMG_REL` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_REL`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

",pred_classES,"pred_class, pred_class_ID","ATT_CLASSES, OBJ_CLASSES, IMG_OBJ, IMG_OBJ_ATT, PRED_CLASSES, IMG_REL"
retail_complains,"How many stars did ""Eagle Capital"" received from Little Rock on 2013/4/4?",SELECT COUNT(t1.stars) FROM reviews as t1 inner JOIN district as t2 ON t1.district_id = t2.district_id WHERE t1.product = 'Eagle Capital' AND t2.city = 'Little Rock' AND t1.date = '2013-04-04',"CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

","CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

","reviews, district","reviews.stars, reviews.district_id, district.district_id, reviews.product, district.city, reviews.date","state, callcenterlogs, client, district, events, reviews"
bike_share_1,What is the name of the station that is less used by customers who borrow bikes from? Indicate when was the station installed.,"SELECT t1.start_station_name, t2.installation_date FROM trip as t1 inner JOIN station as t2 ON t2.name = t1.start_station_name WHERE t1.subscription_type = 'Customer' GROUP BY t1.start_station_name ORDER BY COUNT(t1.subscription_type) LIMIT 1","CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);
Sample rows from `trip`:
4069, 174, 8/29/2013 9:08, 2nd at South Park, 64, 8/29/2013 9:11, 2nd at South Park, 64, 288, Subscriber, 94114
4073, 1067, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:42, San Francisco Caltrain 2 (330 Townsend), 69, 321, Subscriber, 94703
4074, 1131, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:43, San Francisco Caltrain 2 (330 Townsend), 69, 317, Subscriber, 94115

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat REAL,
  long REAL,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);
Sample rows from `station`:
2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013
3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013
4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013

","CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat REAL,
  long REAL,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);
Sample rows from `station`:
2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013
3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013
4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013

CREATE TABLE `status` (
  station_id INTEGER,
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);
Sample rows from `status`:
2, 2, 25, 2013/08/29 12:06:01
2, 2, 25, 2013/08/29 12:07:01
2, 2, 25, 2013/08/29 12:08:01

CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);
Sample rows from `trip`:
4069, 174, 8/29/2013 9:08, 2nd at South Park, 64, 8/29/2013 9:11, 2nd at South Park, 64, 288, Subscriber, 94114
4073, 1067, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:42, San Francisco Caltrain 2 (330 Townsend), 69, 321, Subscriber, 94703
4074, 1131, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:43, San Francisco Caltrain 2 (330 Townsend), 69, 317, Subscriber, 94115

CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches REAL,
  mean_sea_level_pressure_inches REAL,
  min_sea_level_pressure_inches REAL,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches TEXT,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code TEXT
);
Sample rows from `weather`:
8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107
8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30.0, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107
8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30.0, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107

","trip, station","trip.start_station_name, station.installation_date, station.name, trip.subscription_type","station, status, trip, weather"
authors,"What is the average number of papers published in the journal ""Molecular Brain"" every year from 2008 to 2011?",SELECT cast(COUNT(t2.id) as real) / COUNT(DISTINCT t2.year) FROM journal as t1 inner JOIN paper as t2 ON t1.id = t2.journalid WHERE t1.fullname = 'Molecular Brain' AND t2.year BETWEEN 2008 AND 2011,"CREATE TABLE `journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

","CREATE TABLE `Author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `Author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

CREATE TABLE `Conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

CREATE TABLE `Journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `Paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `Paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `PaperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `PaperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

","journal, paper","paper.id, paper.year, journal.id, paper.journalid, journal.fullname","Author, Conference, Journal, Paper, PaperAuthor"
retail_world,Which of the American customers have experienced a delay in the shipment and how long was the longest?,"SELECT t1.companyname, timestampdiff(day, t2.shippeddate, t2.requireddate) FROM customers as t1 inner JOIN orders as t2 ON t1.customerid = t2.customerid WHERE t1.country = 'USA' AND timestampdiff(day, t2.shippeddate, t2.requireddate) < 0","CREATE TABLE `customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

","customers, orders","customers.companyname, orders.shippeddate, orders.requireddate, customers.customerid, orders.customerid, customers.country","sqlite_sequence, Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails"
university,Provide the ranking criteria and scores in 2005 that were received by Harvard University.,"SELECT t1.criteria_name, t2.score FROM ranking_criteria as t1 inner JOIN university_ranking_year as t2 ON t1.id = t2.ranking_criteria_id inner JOIN university as t3 ON t3.id = t2.university_id WHERE t3.university_name = 'Harvard University' AND t2.year = 2005","CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

","CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

CREATE TABLE `ranking_system` (
  id INTEGER,
  system_name TEXT
);
Sample rows from `ranking_system`:
1, Times Higher Education World University Ranking
2, Shanghai Ranking
3, Center for World University Rankings

CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

","ranking_criteria, university_ranking_year, university","ranking_criteria.criteria_name, university_ranking_year.score, ranking_criteria.id, university_ranking_year.ranking_criteria_id, university.id, university_ranking_year.university_id, university.university_name, university_ranking_year.year","country, ranking_system, ranking_criteria, university, university_ranking_year, university_year"
movielens,Please list down ID of movies acted by top 5 actors based on actor rating.,SELECT t2.movieid FROM actors as t1 inner JOIN movies2actors as t2 ON t1.actorid = t2.actorid GROUP BY t2.actorid ORDER BY AVG(t1.a_quality) DESC LIMIT 5,"CREATE TABLE `actors` (
  actorid INTEGER,
  a_gender TEXT,
  a_quality INTEGER
);
Sample rows from `actors`:
4, M, 4
16, M, 0
28, M, 4

CREATE TABLE `movies2actors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  actorid INTEGER PRIMARY KEY REFERENCES actors(None),
  cast_num INTEGER
);
Sample rows from `movies2actors`:
1672580, 981535, 0
1672946, 1094968, 0
1673647, 149985, 0

","CREATE TABLE `users` (
  userid INTEGER,
  age TEXT,
  u_gender TEXT,
  occupation TEXT
);
Sample rows from `users`:
1, 1, F, 2
2, 56, M, 3
3, 25, M, 2

CREATE TABLE `directors` (
  directorid INTEGER,
  d_quality INTEGER PRIMARY KEY,
  avg_revenue INTEGER PRIMARY KEY
);
Sample rows from `directors`:
67, 4, 1
92, 2, 3
284, 4, 0

CREATE TABLE `actors` (
  actorid INTEGER,
  a_gender TEXT,
  a_quality INTEGER
);
Sample rows from `actors`:
4, M, 4
16, M, 0
28, M, 4

CREATE TABLE `movies` (
  movieid INTEGER,
  year INTEGER,
  isEnglish TEXT,
  country TEXT,
  runningtime INTEGER
);
Sample rows from `movies`:
1672052, 3, T, other, 2
1672111, 4, T, other, 2
1672580, 4, T, USA, 3

CREATE TABLE `movies2actors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  actorid INTEGER PRIMARY KEY REFERENCES actors(None),
  cast_num INTEGER
);
Sample rows from `movies2actors`:
1672580, 981535, 0
1672946, 1094968, 0
1673647, 149985, 0

CREATE TABLE `movies2directors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  directorid INTEGER PRIMARY KEY REFERENCES directors(None),
  genre TEXT
);
Sample rows from `movies2directors`:
1672111, 54934, Action
1672946, 188940, Action
1679461, 179783, Action

CREATE TABLE `u2base` (
  userid INTEGER PRIMARY KEY REFERENCES users(None),
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  rating TEXT
);
Sample rows from `u2base`:
2, 1964242, 1
2, 2219779, 1
3, 1856939, 1

","actors, movies2actors","movies2actors.movieid, actors.actorid, movies2actors.actorid, actors.a_quality","users, directors, actors, movies, movies2actors, movies2directors, u2base"
olympics,How many 20 years old athletes were there in the 1984 Summer Olympic Games?,SELECT COUNT(t2.person_id) FROM games as t1 inner JOIN games_competitor as t2 ON t1.id = t2.games_id WHERE t1.games_name = '1984 Summer' AND t2.age = 20,"CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

","CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `medal` (
  id INTEGER,
  medal_name TEXT
);
Sample rows from `medal`:
1, Gold
2, Silver
3, Bronze

CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `sport` (
  id INTEGER,
  sport_name TEXT
);
Sample rows from `sport`:
1, Aeronautics
2, Alpine Skiing
3, Alpinism

CREATE TABLE `event` (
  id INTEGER,
  sport_id INTEGER REFERENCES sport(id),
  event_name TEXT
);
Sample rows from `event`:
1, 9, Basketball Men's Basketball
2, 33, Judo Men's Extra-Lightweight
3, 25, Football Men's Football

CREATE TABLE `competitor_event` (
  event_id INTEGER REFERENCES event(id),
  competitor_id INTEGER REFERENCES games_competitor(id),
  medal_id INTEGER REFERENCES medal(id)
);
Sample rows from `competitor_event`:
1, 1, 4
2, 2, 4
3, 3, 4

","games, games_competitor","games_competitor.person_id, games.id, games_competitor.games_id, games.games_name, games_competitor.age","city, games, games_city, medal, noc_region, person, games_competitor, person_region, sport, event, competitor_event"
movie,Please list the names of the actors who played a role in the movie Batman.,SELECT t3.name FROM movie as t1 inner JOIN characters as t2 ON t1.movieid = t2.movieid inner JOIN actor as t3 ON t3.actorid = t2.actorid WHERE t1.title = 'Batman',"CREATE TABLE `movie` (
  MovieID INTEGER,
  Title TEXT,
  MPAA Rating TEXT,
  Budget INTEGER,
  Gross INTEGER,
  Release Date TEXT,
  Genre TEXT,
  Runtime INTEGER,
  Rating REAL,
  Rating Count INTEGER,
  Summary TEXT
);
Sample rows from `movie`:
1, Look Who's Talking, PG-13, 7500000, 296000000, 1989-10-12, Romance, 93, 5.9, 73638, After a single, career-minded woman is left on her own to give birth to the child of a married man, she finds a new romantic chance in a cab driver. Meanwhile, the point-of-view of the newborn boy is narrated through voice-over.
2, Driving Miss Daisy, PG, 7500000, 145793296, 1989-12-13, Comedy, 99, 7.4, 91075, An old Jewish woman and her African-American chauffeur in the American South have a relationship that grows and improves over the years.
3, Turner & Hooch, PG, 13000000, 71079915, 1989-07-28, Crime, 100, 7.2, 91415, Det. Scott Turner (Tom Hanks) is an uptight, by-the-book police officer. When his friend Amos Reed (John McIntire), the proprietor of a junkyard, is killed, Turner reluctantly inherits the man's dog. Turner adjusts to life with the dog to help solve a murder case.

CREATE TABLE `characters` (
  MovieID INTEGER PRIMARY KEY REFERENCES movie(MovieID),
  ActorID INTEGER PRIMARY KEY REFERENCES actor(ActorID),
  Character Name TEXT,
  creditOrder INTEGER,
  pay TEXT,
  screentime TEXT
);
Sample rows from `characters`:
1, 1, James, 1, None, None
1, 2, Mollie, 2, None, None
1, 3, Rosie, 3, None, None

CREATE TABLE `actor` (
  ActorID INTEGER,
  Name TEXT,
  Date of Birth DATE,
  Birth City TEXT,
  Birth Country TEXT,
  Height (Inches) INTEGER,
  Biography TEXT,
  Gender TEXT,
  Ethnicity TEXT,
  NetWorth TEXT
);
Sample rows from `actor`:
1, John Travolta, 1954-02-18, Englewood, USA, 74, John Joseph Travolta was born in Englewood, New Jersey, one of six children of Helen Travolta (n�e Helen Cecilia Burke) and Salvatore/Samuel J. Travolta. His father was of Italian descent and his mother was of Irish ancestry. His father owned a tire repair shop called Travolta Tires in Hillsdale, NJ. Travolta started acting appearing in a local ..., Male, White, $250,000,000.00
2, Kirstie Alley, 1951-01-12, Wichita, USA, 67, None, Female, White, $40,000,000.00
3, Olympia Dukakis, 1931-06-20, Lowell, USA, 63, Long a vital, respected lady of the classic and contemporary stage this grand lady did not become a household name and sought-after film actress until age 56 when she turned in a glorious, Oscar-winning perf as Cher's sardonic mother in the romantic comedy Moonstruck (1987). Since then movie (and TV) fans have discovered what the East coast ..., Female, White, $6,000,000.00

","CREATE TABLE `actor` (
  ActorID INTEGER,
  Name TEXT,
  Date of Birth DATE,
  Birth City TEXT,
  Birth Country TEXT,
  Height (Inches) INTEGER,
  Biography TEXT,
  Gender TEXT,
  Ethnicity TEXT,
  NetWorth TEXT
);
Sample rows from `actor`:
1, John Travolta, 1954-02-18, Englewood, USA, 74, John Joseph Travolta was born in Englewood, New Jersey, one of six children of Helen Travolta (n�e Helen Cecilia Burke) and Salvatore/Samuel J. Travolta. His father was of Italian descent and his mother was of Irish ancestry. His father owned a tire repair shop called Travolta Tires in Hillsdale, NJ. Travolta started acting appearing in a local ..., Male, White, $250,000,000.00
2, Kirstie Alley, 1951-01-12, Wichita, USA, 67, None, Female, White, $40,000,000.00
3, Olympia Dukakis, 1931-06-20, Lowell, USA, 63, Long a vital, respected lady of the classic and contemporary stage this grand lady did not become a household name and sought-after film actress until age 56 when she turned in a glorious, Oscar-winning perf as Cher's sardonic mother in the romantic comedy Moonstruck (1987). Since then movie (and TV) fans have discovered what the East coast ..., Female, White, $6,000,000.00

CREATE TABLE `movie` (
  MovieID INTEGER,
  Title TEXT,
  MPAA Rating TEXT,
  Budget INTEGER,
  Gross INTEGER,
  Release Date TEXT,
  Genre TEXT,
  Runtime INTEGER,
  Rating REAL,
  Rating Count INTEGER,
  Summary TEXT
);
Sample rows from `movie`:
1, Look Who's Talking, PG-13, 7500000, 296000000, 1989-10-12, Romance, 93, 5.9, 73638, After a single, career-minded woman is left on her own to give birth to the child of a married man, she finds a new romantic chance in a cab driver. Meanwhile, the point-of-view of the newborn boy is narrated through voice-over.
2, Driving Miss Daisy, PG, 7500000, 145793296, 1989-12-13, Comedy, 99, 7.4, 91075, An old Jewish woman and her African-American chauffeur in the American South have a relationship that grows and improves over the years.
3, Turner & Hooch, PG, 13000000, 71079915, 1989-07-28, Crime, 100, 7.2, 91415, Det. Scott Turner (Tom Hanks) is an uptight, by-the-book police officer. When his friend Amos Reed (John McIntire), the proprietor of a junkyard, is killed, Turner reluctantly inherits the man's dog. Turner adjusts to life with the dog to help solve a murder case.

CREATE TABLE `characters` (
  MovieID INTEGER PRIMARY KEY REFERENCES movie(MovieID),
  ActorID INTEGER PRIMARY KEY REFERENCES actor(ActorID),
  Character Name TEXT,
  creditOrder INTEGER,
  pay TEXT,
  screentime TEXT
);
Sample rows from `characters`:
1, 1, James, 1, None, None
1, 2, Mollie, 2, None, None
1, 3, Rosie, 3, None, None

","movie, characters, actor","actor.name, movie.movieid, characters.movieid, actor.actorid, characters.actorid, movie.title","actor, movie, characters"
olympics,Which region is the majority of the athletes from?,SELECT t2.region_name FROM person_region as t1 inner JOIN noc_region as t2 ON t1.region_id = t2.id GROUP BY t2.region_name ORDER BY COUNT(t1.person_id) DESC LIMIT 1,"CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

","CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `medal` (
  id INTEGER,
  medal_name TEXT
);
Sample rows from `medal`:
1, Gold
2, Silver
3, Bronze

CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `sport` (
  id INTEGER,
  sport_name TEXT
);
Sample rows from `sport`:
1, Aeronautics
2, Alpine Skiing
3, Alpinism

CREATE TABLE `event` (
  id INTEGER,
  sport_id INTEGER REFERENCES sport(id),
  event_name TEXT
);
Sample rows from `event`:
1, 9, Basketball Men's Basketball
2, 33, Judo Men's Extra-Lightweight
3, 25, Football Men's Football

CREATE TABLE `competitor_event` (
  event_id INTEGER REFERENCES event(id),
  competitor_id INTEGER REFERENCES games_competitor(id),
  medal_id INTEGER REFERENCES medal(id)
);
Sample rows from `competitor_event`:
1, 1, 4
2, 2, 4
3, 3, 4

","person_region, noc_region","noc_region.region_name, person_region.region_id, noc_region.id, person_region.person_id","city, games, games_city, medal, noc_region, person, games_competitor, person_region, sport, event, competitor_event"
student_loan,Mention the status of payment of student 299.,SELECT bool FROM no_payment_due WHERE name = 'student299',"CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

",no_payment_due,"bool, name","bool, person, disabled, enlist, filed_for_bankrupcy, longest_absense_from_school, male, no_payment_due, unemployed, enrolled"
codebase_comments,What is the github address of the repository that contains files used by solution ID12?,SELECT t1.url FROM repo as t1 inner JOIN solution as t2 ON t1.id = t2.repoid WHERE t2.id = 12,"CREATE TABLE `repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

CREATE TABLE `solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Method, 10860640
MethodParameter, 17514858
Repo, 156550

CREATE TABLE `Method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `Method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

CREATE TABLE `MethodParameter` (
  Id INTEGER,
  MethodId TEXT,
  Type TEXT,
  Name TEXT
);
Sample rows from `MethodParameter`:
1, 1, System.String, data
2, 2, System.Int32, i
3, 2, System.Int32, declstartpos

CREATE TABLE `Repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `Repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

CREATE TABLE `Solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `Solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

","repo, solution","repo.url, repo.id, solution.repoid, solution.id","sqlite_sequence, Method, MethodParameter, Repo, Solution"
chicago_crime,Which community area has the highest number of crimes reported on the street?,SELECT t1.community_area_no FROM community_area as t1 inner JOIN crime as t2 ON t2.community_area_no = t1.community_area_no WHERE t2.location_description = 'STREET' GROUP BY t1.community_area_no ORDER BY COUNT(t2.location_description) DESC LIMIT 1,"CREATE TABLE `community_area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `community_area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","CREATE TABLE `Community_Area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `Community_Area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `District` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `District`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `FBI_Code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `FBI_Code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `IUCR` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `IUCR`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `Neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `Neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `Ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `Ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `Crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `Crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","community_area, crime","community_area.community_area_no, crime.community_area_no, crime.location_description","Community_Area, District, FBI_Code, IUCR, Neighborhood, Ward, Crime"
coinmarketcap,Name the coin and date of transactions with the greatest decline in percent change in 1 hour.,"SELECT t1.name, t2.date FROM coins as t1 inner JOIN historical as t2 ON t1.id = t2.coin_id WHERE t2.percent_change_1h = ( SELECT MIN(percent_change_1h) FROM historical )","CREATE TABLE `coins` (
  id INTEGER,
  name TEXT,
  slug TEXT,
  symbol TEXT,
  status TEXT,
  category TEXT,
  description TEXT,
  subreddit TEXT,
  notice TEXT,
  tags TEXT,
  tag_names TEXT,
  website TEXT,
  platform_id INTEGER,
  date_added TEXT,
  date_launched TEXT
);
Sample rows from `coins`:
1, Bitcoin, bitcoin, BTC, active, coin, ## **What Is Bitcoin (BTC)?**\n\nBitcoin is a decentralized cryptocurrency originally described in a 2008 [whitepaper](https://coinmarketcap.com/alexandria/glossary/whitepaper) by a person, or group of people, using the alias [Satoshi Nakamoto](https://co, bitcoin, None, mineable, pow, sha-256, store-of-value, state-channels, coinbase-ventures-portfolio, three-arrows-capital-portfolio, polychain-capital-portfolio, binance-labs-portfolio, arrington-xrp-capital, blockchain-capital-portfolio, boostvc-portfolio, cms-holdings-, Mineable, PoW, SHA-256, Store of Value, State channels, Coinbase Ventures Portfolio, Three Arrows Capital Portfolio, Polychain Capital Portfolio, Binance Labs Portfolio, Arrington XRP capital, Blockchain Capital Portfolio, BoostVC Portfolio, CMS Holdings , https://bitcoin.org/, None, 2013-04-28T00:00:00.000Z, None
2, Litecoin, litecoin, LTC, active, coin, ## What Is Litecoin (LTC)?\n\nLitecoin (LTC) is a cryptocurrency that was designed to provide fast, secure and low-cost payments by leveraging the unique properties of [blockchain](https://coinmarketcap.com/alexandria/glossary/blockchain) technology. \n\n, litecoin, None, mineable, pow, scrypt, medium-of-exchange, binance-chain, Mineable, PoW, Scrypt, Medium of Exchange, Binance Chain, https://litecoin.org/, None, 2013-04-28T00:00:00.000Z, None
3, Namecoin, namecoin, NMC, active, coin, Namecoin (NMC) is a cryptocurrency . Users are able to generate NMC through the process of mining. Namecoin has a current supply of 14,736,400. The last known price of Namecoin is 2.14833562 USD and is up 0.40 over the last 24 hours. It is currently tradi, namecoin, None, mineable, pow, sha-256, platform, Mineable, PoW, SHA-256, Platform, https://www.namecoin.org/, None, 2013-04-28T00:00:00.000Z, None

CREATE TABLE `historical` (
  date DATE,
  coin_id INTEGER,
  cmc_rank INTEGER,
  market_cap REAL,
  price REAL,
  open REAL,
  high REAL,
  low REAL,
  close REAL,
  time_high TEXT,
  time_low TEXT,
  volume_24h REAL,
  percent_change_1h REAL,
  percent_change_24h REAL,
  percent_change_7d REAL,
  circulating_supply REAL,
  total_supply REAL,
  max_supply REAL,
  num_market_pairs INTEGER
);
Sample rows from `historical`:
2013-04-28, 1, 1, 1488566971.9558687, 134.210021972656, None, None, None, None, None, None, 0.0, 0.639231, None, None, 11091325.0, 11091325.0, 21000000.0, None
2013-04-28, 2, 2, 74637021.56790735, 4.34840488433838, None, None, None, None, None, None, 0.0, 0.799273, None, None, 17164230.0, 17164230.0, 84000000.0, None
2013-04-28, 5, 3, 7250186.647688276, 0.386524856090546, None, None, None, None, None, None, 0.0, -0.934763, None, None, 18757362.0, 18757362.0, None, None

","CREATE TABLE `coins` (
  id INTEGER,
  name TEXT,
  slug TEXT,
  symbol TEXT,
  status TEXT,
  category TEXT,
  description TEXT,
  subreddit TEXT,
  notice TEXT,
  tags TEXT,
  tag_names TEXT,
  website TEXT,
  platform_id INTEGER,
  date_added TEXT,
  date_launched TEXT
);
Sample rows from `coins`:
1, Bitcoin, bitcoin, BTC, active, coin, ## **What Is Bitcoin (BTC)?**\n\nBitcoin is a decentralized cryptocurrency originally described in a 2008 [whitepaper](https://coinmarketcap.com/alexandria/glossary/whitepaper) by a person, or group of people, using the alias [Satoshi Nakamoto](https://co, bitcoin, None, mineable, pow, sha-256, store-of-value, state-channels, coinbase-ventures-portfolio, three-arrows-capital-portfolio, polychain-capital-portfolio, binance-labs-portfolio, arrington-xrp-capital, blockchain-capital-portfolio, boostvc-portfolio, cms-holdings-, Mineable, PoW, SHA-256, Store of Value, State channels, Coinbase Ventures Portfolio, Three Arrows Capital Portfolio, Polychain Capital Portfolio, Binance Labs Portfolio, Arrington XRP capital, Blockchain Capital Portfolio, BoostVC Portfolio, CMS Holdings , https://bitcoin.org/, None, 2013-04-28T00:00:00.000Z, None
2, Litecoin, litecoin, LTC, active, coin, ## What Is Litecoin (LTC)?\n\nLitecoin (LTC) is a cryptocurrency that was designed to provide fast, secure and low-cost payments by leveraging the unique properties of [blockchain](https://coinmarketcap.com/alexandria/glossary/blockchain) technology. \n\n, litecoin, None, mineable, pow, scrypt, medium-of-exchange, binance-chain, Mineable, PoW, Scrypt, Medium of Exchange, Binance Chain, https://litecoin.org/, None, 2013-04-28T00:00:00.000Z, None
3, Namecoin, namecoin, NMC, active, coin, Namecoin (NMC) is a cryptocurrency . Users are able to generate NMC through the process of mining. Namecoin has a current supply of 14,736,400. The last known price of Namecoin is 2.14833562 USD and is up 0.40 over the last 24 hours. It is currently tradi, namecoin, None, mineable, pow, sha-256, platform, Mineable, PoW, SHA-256, Platform, https://www.namecoin.org/, None, 2013-04-28T00:00:00.000Z, None

CREATE TABLE `historical` (
  date DATE,
  coin_id INTEGER,
  cmc_rank INTEGER,
  market_cap REAL,
  price REAL,
  open REAL,
  high REAL,
  low REAL,
  close REAL,
  time_high TEXT,
  time_low TEXT,
  volume_24h REAL,
  percent_change_1h REAL,
  percent_change_24h REAL,
  percent_change_7d REAL,
  circulating_supply REAL,
  total_supply REAL,
  max_supply REAL,
  num_market_pairs INTEGER
);
Sample rows from `historical`:
2013-04-28, 1, 1, 1488566971.9558687, 134.210021972656, None, None, None, None, None, None, 0.0, 0.639231, None, None, 11091325.0, 11091325.0, 21000000.0, None
2013-04-28, 2, 2, 74637021.56790735, 4.34840488433838, None, None, None, None, None, None, 0.0, 0.799273, None, None, 17164230.0, 17164230.0, 84000000.0, None
2013-04-28, 5, 3, 7250186.647688276, 0.386524856090546, None, None, None, None, None, None, 0.0, -0.934763, None, None, 18757362.0, 18757362.0, None, None

","coins, historical","coins.name, historical.date, coins.id, historical.coin_id, historical.percent_change_1h, percent_change_1h","coins, historical"
image_and_language,List all the ids of the images that have a self-relation relationship.,SELECT DISTINCT img_id FROM img_rel WHERE obj1_sample_id = obj2_sample_id,"CREATE TABLE `img_rel` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `img_rel`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

","CREATE TABLE `ATT_CLASSES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `ATT_CLASSES`:
0, building s
1, indoors
2, cluttered

CREATE TABLE `OBJ_CLASSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLASSES`:
0, awning
1, goggles
2, dot

CREATE TABLE `IMG_OBJ` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `IMG_OBJ`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `IMG_OBJ_ATT` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_OBJ_ATT`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `PRED_CLASSES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `PRED_CLASSES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `IMG_REL` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_REL`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

",img_rel,"img_id, obj1_sample_id, obj2_sample_id","ATT_CLASSES, OBJ_CLASSES, IMG_OBJ, IMG_OBJ_ATT, PRED_CLASSES, IMG_REL"
movie,"In romantic movies, how many of them starred by John Travolta?",SELECT COUNT(*) FROM movie as t1 inner JOIN characters as t2 ON t1.movieid = t2.movieid inner JOIN actor as t3 ON t3.actorid = t2.actorid WHERE t1.genre = 'Romance' AND t3.name = 'John Travolta',"CREATE TABLE `movie` (
  MovieID INTEGER,
  Title TEXT,
  MPAA Rating TEXT,
  Budget INTEGER,
  Gross INTEGER,
  Release Date TEXT,
  Genre TEXT,
  Runtime INTEGER,
  Rating REAL,
  Rating Count INTEGER,
  Summary TEXT
);
Sample rows from `movie`:
1, Look Who's Talking, PG-13, 7500000, 296000000, 1989-10-12, Romance, 93, 5.9, 73638, After a single, career-minded woman is left on her own to give birth to the child of a married man, she finds a new romantic chance in a cab driver. Meanwhile, the point-of-view of the newborn boy is narrated through voice-over.
2, Driving Miss Daisy, PG, 7500000, 145793296, 1989-12-13, Comedy, 99, 7.4, 91075, An old Jewish woman and her African-American chauffeur in the American South have a relationship that grows and improves over the years.
3, Turner & Hooch, PG, 13000000, 71079915, 1989-07-28, Crime, 100, 7.2, 91415, Det. Scott Turner (Tom Hanks) is an uptight, by-the-book police officer. When his friend Amos Reed (John McIntire), the proprietor of a junkyard, is killed, Turner reluctantly inherits the man's dog. Turner adjusts to life with the dog to help solve a murder case.

CREATE TABLE `characters` (
  MovieID INTEGER PRIMARY KEY REFERENCES movie(MovieID),
  ActorID INTEGER PRIMARY KEY REFERENCES actor(ActorID),
  Character Name TEXT,
  creditOrder INTEGER,
  pay TEXT,
  screentime TEXT
);
Sample rows from `characters`:
1, 1, James, 1, None, None
1, 2, Mollie, 2, None, None
1, 3, Rosie, 3, None, None

CREATE TABLE `actor` (
  ActorID INTEGER,
  Name TEXT,
  Date of Birth DATE,
  Birth City TEXT,
  Birth Country TEXT,
  Height (Inches) INTEGER,
  Biography TEXT,
  Gender TEXT,
  Ethnicity TEXT,
  NetWorth TEXT
);
Sample rows from `actor`:
1, John Travolta, 1954-02-18, Englewood, USA, 74, John Joseph Travolta was born in Englewood, New Jersey, one of six children of Helen Travolta (n�e Helen Cecilia Burke) and Salvatore/Samuel J. Travolta. His father was of Italian descent and his mother was of Irish ancestry. His father owned a tire repair shop called Travolta Tires in Hillsdale, NJ. Travolta started acting appearing in a local ..., Male, White, $250,000,000.00
2, Kirstie Alley, 1951-01-12, Wichita, USA, 67, None, Female, White, $40,000,000.00
3, Olympia Dukakis, 1931-06-20, Lowell, USA, 63, Long a vital, respected lady of the classic and contemporary stage this grand lady did not become a household name and sought-after film actress until age 56 when she turned in a glorious, Oscar-winning perf as Cher's sardonic mother in the romantic comedy Moonstruck (1987). Since then movie (and TV) fans have discovered what the East coast ..., Female, White, $6,000,000.00

","CREATE TABLE `actor` (
  ActorID INTEGER,
  Name TEXT,
  Date of Birth DATE,
  Birth City TEXT,
  Birth Country TEXT,
  Height (Inches) INTEGER,
  Biography TEXT,
  Gender TEXT,
  Ethnicity TEXT,
  NetWorth TEXT
);
Sample rows from `actor`:
1, John Travolta, 1954-02-18, Englewood, USA, 74, John Joseph Travolta was born in Englewood, New Jersey, one of six children of Helen Travolta (n�e Helen Cecilia Burke) and Salvatore/Samuel J. Travolta. His father was of Italian descent and his mother was of Irish ancestry. His father owned a tire repair shop called Travolta Tires in Hillsdale, NJ. Travolta started acting appearing in a local ..., Male, White, $250,000,000.00
2, Kirstie Alley, 1951-01-12, Wichita, USA, 67, None, Female, White, $40,000,000.00
3, Olympia Dukakis, 1931-06-20, Lowell, USA, 63, Long a vital, respected lady of the classic and contemporary stage this grand lady did not become a household name and sought-after film actress until age 56 when she turned in a glorious, Oscar-winning perf as Cher's sardonic mother in the romantic comedy Moonstruck (1987). Since then movie (and TV) fans have discovered what the East coast ..., Female, White, $6,000,000.00

CREATE TABLE `movie` (
  MovieID INTEGER,
  Title TEXT,
  MPAA Rating TEXT,
  Budget INTEGER,
  Gross INTEGER,
  Release Date TEXT,
  Genre TEXT,
  Runtime INTEGER,
  Rating REAL,
  Rating Count INTEGER,
  Summary TEXT
);
Sample rows from `movie`:
1, Look Who's Talking, PG-13, 7500000, 296000000, 1989-10-12, Romance, 93, 5.9, 73638, After a single, career-minded woman is left on her own to give birth to the child of a married man, she finds a new romantic chance in a cab driver. Meanwhile, the point-of-view of the newborn boy is narrated through voice-over.
2, Driving Miss Daisy, PG, 7500000, 145793296, 1989-12-13, Comedy, 99, 7.4, 91075, An old Jewish woman and her African-American chauffeur in the American South have a relationship that grows and improves over the years.
3, Turner & Hooch, PG, 13000000, 71079915, 1989-07-28, Crime, 100, 7.2, 91415, Det. Scott Turner (Tom Hanks) is an uptight, by-the-book police officer. When his friend Amos Reed (John McIntire), the proprietor of a junkyard, is killed, Turner reluctantly inherits the man's dog. Turner adjusts to life with the dog to help solve a murder case.

CREATE TABLE `characters` (
  MovieID INTEGER PRIMARY KEY REFERENCES movie(MovieID),
  ActorID INTEGER PRIMARY KEY REFERENCES actor(ActorID),
  Character Name TEXT,
  creditOrder INTEGER,
  pay TEXT,
  screentime TEXT
);
Sample rows from `characters`:
1, 1, James, 1, None, None
1, 2, Mollie, 2, None, None
1, 3, Rosie, 3, None, None

","movie, characters, actor","movie.movieid, characters.movieid, actor.actorid, characters.actorid, movie.genre, actor.name","actor, movie, characters"
sales_in_weather,What was the temperature range of station no.1 on 2012/1/1?,SELECT tmax - tmin as temrange FROM weather WHERE station_nbr = 1 AND `date` = '2012-01-01',"CREATE TABLE `weather` (
  station_nbr INTEGER PRIMARY KEY,
  date DATE PRIMARY KEY,
  tmax INTEGER,
  tmin INTEGER,
  tavg INTEGER,
  depart INTEGER,
  dewpoint INTEGER,
  wetbulb INTEGER,
  heat INTEGER,
  cool INTEGER,
  sunrise TEXT,
  sunset TEXT,
  codesum TEXT,
  snowfall REAL,
  preciptotal REAL,
  stnpressure REAL,
  sealevel REAL,
  resultspeed REAL,
  resultdir INTEGER,
  avgspeed REAL
);
Sample rows from `weather`:
1, 2012-01-01, 52, 31, 42, None, 36, 40, 23, 0, None, None, RA FZFG BR, None, 0.05, 29.78, 29.92, 3.6, 20, 4.6
1, 2012-01-02, 50, 31, 41, None, 26, 35, 24, 0, None, None,  , None, 0.01, 29.44, 29.62, 9.8, 24, 10.3
1, 2012-01-03, 32, 11, 22, None, 4, 18, 43, 0, None, None,  , None, 0.0, 29.67, 29.87, 10.8, 31, 11.6

","CREATE TABLE `sales_in_weather` (
  date DATE PRIMARY KEY,
  store_nbr INTEGER PRIMARY KEY,
  item_nbr INTEGER PRIMARY KEY,
  units INTEGER
);
Sample rows from `sales_in_weather`:
2012-01-01, 1, 1, 0
2012-01-01, 1, 2, 0
2012-01-01, 1, 3, 0

CREATE TABLE `weather` (
  station_nbr INTEGER PRIMARY KEY,
  date DATE PRIMARY KEY,
  tmax INTEGER,
  tmin INTEGER,
  tavg INTEGER,
  depart INTEGER,
  dewpoint INTEGER,
  wetbulb INTEGER,
  heat INTEGER,
  cool INTEGER,
  sunrise TEXT,
  sunset TEXT,
  codesum TEXT,
  snowfall REAL,
  preciptotal REAL,
  stnpressure REAL,
  sealevel REAL,
  resultspeed REAL,
  resultdir INTEGER,
  avgspeed REAL
);
Sample rows from `weather`:
1, 2012-01-01, 52, 31, 42, None, 36, 40, 23, 0, None, None, RA FZFG BR, None, 0.05, 29.78, 29.92, 3.6, 20, 4.6
1, 2012-01-02, 50, 31, 41, None, 26, 35, 24, 0, None, None,  , None, 0.01, 29.44, 29.62, 9.8, 24, 10.3
1, 2012-01-03, 32, 11, 22, None, 4, 18, 43, 0, None, None,  , None, 0.0, 29.67, 29.87, 10.8, 31, 11.6

CREATE TABLE `relation` (
  store_nbr INTEGER REFERENCES sales_in_weather(store_nbr),
  station_nbr INTEGER REFERENCES weather(station_nbr)
);
Sample rows from `relation`:
1, 1
2, 14
3, 7

",weather,"tmax, tmin, station_nbr, date","sales_in_weather, weather, relation"
chicago_crime,What is the district address associated with the case JB107731?,SELECT t1.address FROM district as t1 inner JOIN crime as t2 ON t2.district_no = t1.district_no WHERE t2.case_number = 'JB107731',"CREATE TABLE `district` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `district`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","CREATE TABLE `Community_Area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `Community_Area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `District` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `District`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `FBI_Code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `FBI_Code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `IUCR` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `IUCR`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `Neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `Neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `Ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `Ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `Crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `Crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","district, crime","district.address, crime.district_no, district.district_no, crime.case_number","Community_Area, District, FBI_Code, IUCR, Neighborhood, Ward, Crime"
public_review_platform,"Write down the any five of ID and name of category that starts with alphabet ""P"".","SELECT category_id, category_name FROM categories WHERE category_name LIKE 'P%' LIMIT 5","CREATE TABLE `categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

",categories,"category_id, category_name","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
codebase_comments,"What is the linearized sequenced of API calls of the method whose solution path is ""mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln""?",SELECT t2.apicalls FROM solution as t1 inner JOIN method as t2 ON t1.id = t2.solutionid WHERE t1.path = 'mauriciodeamorim_tdd.encontro2Tdd.Encontro2.sln',"CREATE TABLE `solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

CREATE TABLE `method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Method, 10860640
MethodParameter, 17514858
Repo, 156550

CREATE TABLE `Method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `Method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

CREATE TABLE `MethodParameter` (
  Id INTEGER,
  MethodId TEXT,
  Type TEXT,
  Name TEXT
);
Sample rows from `MethodParameter`:
1, 1, System.String, data
2, 2, System.Int32, i
3, 2, System.Int32, declstartpos

CREATE TABLE `Repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `Repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

CREATE TABLE `Solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `Solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

","solution, method","method.apicalls, solution.id, method.solutionid, solution.path","sqlite_sequence, Method, MethodParameter, Repo, Solution"
computer_student,Which professor teaches the highest number of professional or master/graduate courses?,SELECT t2.p_id FROM course as t1 inner JOIN taughtby as t2 ON t1.course_id = t2.course_id WHERE t1.courselevel = 'Level_500' GROUP BY t2.p_id ORDER BY COUNT(t2.course_id) DESC LIMIT 1,"CREATE TABLE `course` (
  course_id INTEGER,
  courseLevel TEXT
);
Sample rows from `course`:
0, Level_500
1, Level_500
2, Level_500

CREATE TABLE `taughtby` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `taughtby`:
0, 40
1, 40
2, 180

","CREATE TABLE `course` (
  course_id INTEGER,
  courseLevel TEXT
);
Sample rows from `course`:
0, Level_500
1, Level_500
2, Level_500

CREATE TABLE `person` (
  p_id INTEGER,
  professor INTEGER,
  student INTEGER,
  hasPosition TEXT,
  inPhase TEXT,
  yearsInProgram TEXT
);
Sample rows from `person`:
3, 0, 1, 0, 0, 0
4, 0, 1, 0, 0, 0
5, 1, 0, Faculty, 0, 0

CREATE TABLE `advisedBy` (
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id),
  p_id_dummy INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `advisedBy`:
96, 5
118, 5
183, 5

CREATE TABLE `taughtBy` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `taughtBy`:
0, 40
1, 40
2, 180

","course, taughtby","taughtby.p_id, course.course_id, taughtby.course_id, course.courselevel","course, person, advisedBy, taughtBy"
movies_4,What is the average number of crews for a movie?,"SELECT cast(SUM(cd) as real) / COUNT(movie_id) FROM ( SELECT movie_id, COUNT(person_id) as cd FROM movie_crew GROUP BY movie_id )","CREATE TABLE `movie_crew` (
  movie_id INTEGER REFERENCES movie(movie_id),
  person_id INTEGER REFERENCES person(person_id),
  department_id INTEGER REFERENCES department(department_id),
  job TEXT
);
Sample rows from `movie_crew`:
285, 120, 1, Director of Photography
285, 1704, 2, Director
285, 770, 3, Producer

","CREATE TABLE `country` (
  country_id INTEGER,
  country_iso_code TEXT,
  country_name TEXT
);
Sample rows from `country`:
128, AE, United Arab Emirates
129, AF, Afghanistan
130, AO, Angola

CREATE TABLE `department` (
  department_id INTEGER,
  department_name TEXT
);
Sample rows from `department`:
1, Camera
2, Directing
3, Production

CREATE TABLE `gender` (
  gender_id INTEGER,
  gender TEXT
);
Sample rows from `gender`:
0, Unspecified
1, Female
2, Male

CREATE TABLE `genre` (
  genre_id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
12, Adventure
14, Fantasy
16, Animation

CREATE TABLE `keyword` (
  keyword_id INTEGER,
  keyword_name TEXT
);
Sample rows from `keyword`:
30, individual
65, holiday
74, germany

CREATE TABLE `language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `language`:
24574, en, English
24575, sv, svenska
24576, de, Deutsch

CREATE TABLE `language_role` (
  role_id INTEGER,
  language_role TEXT
);
Sample rows from `language_role`:
1, Original
2, Spoken

CREATE TABLE `movie` (
  movie_id INTEGER,
  title TEXT,
  budget INTEGER,
  homepage TEXT,
  overview TEXT,
  popularity REAL,
  release_date DATE,
  revenue INTEGER,
  runtime INTEGER,
  movie_status TEXT,
  tagline TEXT,
  vote_average REAL,
  vote_count INTEGER
);
Sample rows from `movie`:
5, Four Rooms, 4000000, , It's Ted the Bellhop's first night on the job...and the hotel's very unusual guests are about to place him in some outrageous predicaments. It seems that this evening's room service is serving up one unbelievable happening after another., 22.87623, 1995-12-09, 4300000, 98, Released, Twelve outrageous guests. Four scandalous requests. And one lone bellhop, in his first day on the job, who's in for the wildest New year's Eve of his life., 6.5, 530
11, Star Wars, 11000000, http://www.starwars.com/films/star-wars-episode-iv-a-new-hope, Princess Leia is captured and held hostage by the evil Imperial forces in their effort to take over the galactic Empire. Venturesome Luke Skywalker and dashing captain Han Solo team together with the loveable robot duo R2-D2 and C-3PO to rescue the beauti, 126.393695, 1977-05-25, 775398007, 121, Released, A long time ago in a galaxy far, far away..., 8.1, 6624
12, Finding Nemo, 94000000, http://movies.disney.com/finding-nemo, Nemo, an adventurous young clownfish, is unexpectedly taken from his Great Barrier Reef home to a dentist's office aquarium. It's up to his worrisome father Marlin and a friendly but forgetful fish Dory to bring Nemo home -- meeting vegetarian sharks, sur, 85.688789, 2003-05-30, 940335536, 100, Released, There are 3.7 trillion fish in the ocean, they're looking for one., 7.6, 6122

CREATE TABLE `movie_genres` (
  movie_id INTEGER REFERENCES movie(movie_id),
  genre_id INTEGER REFERENCES genre(genre_id)
);
Sample rows from `movie_genres`:
5, 35
5, 80
11, 12

CREATE TABLE `movie_languages` (
  movie_id INTEGER REFERENCES movie(movie_id),
  language_id INTEGER REFERENCES language(language_id),
  language_role_id INTEGER REFERENCES language_role(role_id)
);
Sample rows from `movie_languages`:
5, 24574, 2
11, 24574, 2
12, 24574, 2

CREATE TABLE `person` (
  person_id INTEGER,
  person_name TEXT
);
Sample rows from `person`:
1, George Lucas
2, Mark Hamill
3, Harrison Ford

CREATE TABLE `movie_crew` (
  movie_id INTEGER REFERENCES movie(movie_id),
  person_id INTEGER REFERENCES person(person_id),
  department_id INTEGER REFERENCES department(department_id),
  job TEXT
);
Sample rows from `movie_crew`:
285, 120, 1, Director of Photography
285, 1704, 2, Director
285, 770, 3, Producer

CREATE TABLE `production_company` (
  company_id INTEGER,
  company_name TEXT
);
Sample rows from `production_company`:
1, Lucasfilm
2, Walt Disney Pictures
3, Pixar Animation Studios

CREATE TABLE `production_country` (
  movie_id INTEGER REFERENCES movie(movie_id),
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `production_country`:
5, 214
11, 214
12, 214

CREATE TABLE `movie_cast` (
  movie_id INTEGER REFERENCES movie(movie_id),
  person_id INTEGER REFERENCES person(person_id),
  character_name TEXT,
  gender_id INTEGER REFERENCES gender(gender_id),
  cast_order INTEGER
);
Sample rows from `movie_cast`:
285, 85, Captain Jack Sparrow, 2, 0
285, 114, Will Turner, 2, 1
285, 116, Elizabeth Swann, 1, 2

CREATE TABLE `movie_keywords` (
  movie_id INTEGER REFERENCES movie(None),
  keyword_id INTEGER REFERENCES keyword(None)
);
Sample rows from `movie_keywords`:
5, 612
5, 613
5, 616

CREATE TABLE `movie_company` (
  movie_id INTEGER REFERENCES movie(None),
  company_id INTEGER REFERENCES production_company(None)
);
Sample rows from `movie_company`:
5, 14
5, 59
11, 1

",movie_crew,"movie_id, person_id","country, department, gender, genre, keyword, language, language_role, movie, movie_genres, movie_languages, person, movie_crew, production_company, production_country, movie_cast, movie_keywords, movie_company"
movielens,"Among the users who gave a rating of 5, how many of them are male?",SELECT COUNT(t1.userid) FROm u2base as t1 inner JOIN users as t2 ON t1.userid = t2.userid WHERE t1.rating = 5 AND t2.u_gender = 'm',"CREATE TABLE `u2base` (
  userid INTEGER PRIMARY KEY REFERENCES users(None),
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  rating TEXT
);
Sample rows from `u2base`:
2, 1964242, 1
2, 2219779, 1
3, 1856939, 1

CREATE TABLE `users` (
  userid INTEGER,
  age TEXT,
  u_gender TEXT,
  occupation TEXT
);
Sample rows from `users`:
1, 1, F, 2
2, 56, M, 3
3, 25, M, 2

","CREATE TABLE `users` (
  userid INTEGER,
  age TEXT,
  u_gender TEXT,
  occupation TEXT
);
Sample rows from `users`:
1, 1, F, 2
2, 56, M, 3
3, 25, M, 2

CREATE TABLE `directors` (
  directorid INTEGER,
  d_quality INTEGER PRIMARY KEY,
  avg_revenue INTEGER PRIMARY KEY
);
Sample rows from `directors`:
67, 4, 1
92, 2, 3
284, 4, 0

CREATE TABLE `actors` (
  actorid INTEGER,
  a_gender TEXT,
  a_quality INTEGER
);
Sample rows from `actors`:
4, M, 4
16, M, 0
28, M, 4

CREATE TABLE `movies` (
  movieid INTEGER,
  year INTEGER,
  isEnglish TEXT,
  country TEXT,
  runningtime INTEGER
);
Sample rows from `movies`:
1672052, 3, T, other, 2
1672111, 4, T, other, 2
1672580, 4, T, USA, 3

CREATE TABLE `movies2actors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  actorid INTEGER PRIMARY KEY REFERENCES actors(None),
  cast_num INTEGER
);
Sample rows from `movies2actors`:
1672580, 981535, 0
1672946, 1094968, 0
1673647, 149985, 0

CREATE TABLE `movies2directors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  directorid INTEGER PRIMARY KEY REFERENCES directors(None),
  genre TEXT
);
Sample rows from `movies2directors`:
1672111, 54934, Action
1672946, 188940, Action
1679461, 179783, Action

CREATE TABLE `u2base` (
  userid INTEGER PRIMARY KEY REFERENCES users(None),
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  rating TEXT
);
Sample rows from `u2base`:
2, 1964242, 1
2, 2219779, 1
3, 1856939, 1

","u2base, users","u2base.userid, users.userid, u2base.rating, users.u_gender","users, directors, actors, movies, movies2actors, movies2directors, u2base"
sales_in_weather,What was the total unit sold for item 10 when the average temperature was below the median temperature?,SELECT SUM(t5.units) FROM weather as t4 inner JOIN sales_in_weather as t5 ON t4.`date` = t5.`date` inner JOIN relation as t6 ON t5.store_nbr = t6.store_nbr WHERE t5.item_nbr = 10 AND t4.tavg < ( SELECT AVG(t1.tavg) FROM weather as t1 inner JOIN sales_in_weather as t2 ON t1.`date` = t2.`date` inner JOIN relation as t3 ON t2.store_nbr = t3.store_nbr WHERE t2.item_nbr = 10 ),"CREATE TABLE `weather` (
  station_nbr INTEGER PRIMARY KEY,
  date DATE PRIMARY KEY,
  tmax INTEGER,
  tmin INTEGER,
  tavg INTEGER,
  depart INTEGER,
  dewpoint INTEGER,
  wetbulb INTEGER,
  heat INTEGER,
  cool INTEGER,
  sunrise TEXT,
  sunset TEXT,
  codesum TEXT,
  snowfall REAL,
  preciptotal REAL,
  stnpressure REAL,
  sealevel REAL,
  resultspeed REAL,
  resultdir INTEGER,
  avgspeed REAL
);
Sample rows from `weather`:
1, 2012-01-01, 52, 31, 42, None, 36, 40, 23, 0, None, None, RA FZFG BR, None, 0.05, 29.78, 29.92, 3.6, 20, 4.6
1, 2012-01-02, 50, 31, 41, None, 26, 35, 24, 0, None, None,  , None, 0.01, 29.44, 29.62, 9.8, 24, 10.3
1, 2012-01-03, 32, 11, 22, None, 4, 18, 43, 0, None, None,  , None, 0.0, 29.67, 29.87, 10.8, 31, 11.6

CREATE TABLE `sales_in_weather` (
  date DATE PRIMARY KEY,
  store_nbr INTEGER PRIMARY KEY,
  item_nbr INTEGER PRIMARY KEY,
  units INTEGER
);
Sample rows from `sales_in_weather`:
2012-01-01, 1, 1, 0
2012-01-01, 1, 2, 0
2012-01-01, 1, 3, 0

CREATE TABLE `relation` (
  store_nbr INTEGER REFERENCES sales_in_weather(store_nbr),
  station_nbr INTEGER REFERENCES weather(station_nbr)
);
Sample rows from `relation`:
1, 1
2, 14
3, 7

","CREATE TABLE `sales_in_weather` (
  date DATE PRIMARY KEY,
  store_nbr INTEGER PRIMARY KEY,
  item_nbr INTEGER PRIMARY KEY,
  units INTEGER
);
Sample rows from `sales_in_weather`:
2012-01-01, 1, 1, 0
2012-01-01, 1, 2, 0
2012-01-01, 1, 3, 0

CREATE TABLE `weather` (
  station_nbr INTEGER PRIMARY KEY,
  date DATE PRIMARY KEY,
  tmax INTEGER,
  tmin INTEGER,
  tavg INTEGER,
  depart INTEGER,
  dewpoint INTEGER,
  wetbulb INTEGER,
  heat INTEGER,
  cool INTEGER,
  sunrise TEXT,
  sunset TEXT,
  codesum TEXT,
  snowfall REAL,
  preciptotal REAL,
  stnpressure REAL,
  sealevel REAL,
  resultspeed REAL,
  resultdir INTEGER,
  avgspeed REAL
);
Sample rows from `weather`:
1, 2012-01-01, 52, 31, 42, None, 36, 40, 23, 0, None, None, RA FZFG BR, None, 0.05, 29.78, 29.92, 3.6, 20, 4.6
1, 2012-01-02, 50, 31, 41, None, 26, 35, 24, 0, None, None,  , None, 0.01, 29.44, 29.62, 9.8, 24, 10.3
1, 2012-01-03, 32, 11, 22, None, 4, 18, 43, 0, None, None,  , None, 0.0, 29.67, 29.87, 10.8, 31, 11.6

CREATE TABLE `relation` (
  store_nbr INTEGER REFERENCES sales_in_weather(store_nbr),
  station_nbr INTEGER REFERENCES weather(station_nbr)
);
Sample rows from `relation`:
1, 1
2, 14
3, 7

","weather, sales_in_weather, relation","sales_in_weather.units, weather.date, sales_in_weather.date, sales_in_weather.store_nbr, relation.store_nbr, sales_in_weather.item_nbr, weather.tavg","sales_in_weather, weather, relation"
music_platform_2,What is the longest review?,SELECT title FROM reviews ORDER BY length(content) DESC LIMIT 1,"CREATE TABLE `reviews` (
  podcast_id TEXT REFERENCES podcasts(None),
  title TEXT,
  content TEXT,
  rating INTEGER,
  author_id TEXT,
  created_at TEXT
);
Sample rows from `reviews`:
c61aa81c9b929a66f0c1db6cbe5d8548, really interesting!, Thanks for providing these insights.  Really enjoy the variety and depth -- please keep them coming!, 5, F7E5A318989779D, 2018-04-24T12:05:16-07:00
c61aa81c9b929a66f0c1db6cbe5d8548, Must listen for anyone interested in the arts!!!, Super excited to see this podcast grow. So many fun topics to talk about...Shari is really engaging. Definitely subscribing and would recommend to anyone interested in the arts!!, 5, F6BF5472689BD12, 2018-05-09T18:14:32-07:00
ad4f2bf69c72b8db75978423c25f379e, nauseatingly left, I'm a liberal myself, but its pretty obvious and annoying that they're trying to push their beliefs on the listeners. Get a more politically diverse production staff, we like to see issues from multiple point of views not just yours., 1, 1AB95B8E6E1309E, 2019-06-11T14:53:39-07:00

","CREATE TABLE `runs` (
  run_at TEXT,
  max_rowid INTEGER,
  reviews_added INTEGER
);
Sample rows from `runs`:
2021-05-10 02:53:00, 3266481, 1215223
2021-06-06 21:34:36, 3300773, 13139
2021-07-02 18:04:55, 3329699, 11561

CREATE TABLE `podcasts` (
  podcast_id TEXT PRIMARY KEY,
  itunes_id INTEGER,
  slug TEXT,
  itunes_url TEXT,
  title TEXT
);
Sample rows from `podcasts`:
a00018b54eb342567c94dacfb2a3e504, 1313466221, scaling-global, https://podcasts.apple.com/us/podcast/scaling-global/id1313466221, Scaling Global
a00043d34e734b09246d17dc5d56f63c, 158973461, cornerstone-baptist-church-of-orlando, https://podcasts.apple.com/us/podcast/cornerstone-baptist-church-of-orlando/id158973461, Cornerstone Baptist Church of Orlando
a0004b1ef445af9dc84dad1e7821b1e3, 139076942, mystery-dancing-in-the-dark, https://podcasts.apple.com/us/podcast/mystery-dancing-in-the-dark/id139076942, Mystery: Dancing in the Dark

CREATE TABLE `reviews` (
  podcast_id TEXT REFERENCES podcasts(None),
  title TEXT,
  content TEXT,
  rating INTEGER,
  author_id TEXT,
  created_at TEXT
);
Sample rows from `reviews`:
c61aa81c9b929a66f0c1db6cbe5d8548, really interesting!, Thanks for providing these insights.  Really enjoy the variety and depth -- please keep them coming!, 5, F7E5A318989779D, 2018-04-24T12:05:16-07:00
c61aa81c9b929a66f0c1db6cbe5d8548, Must listen for anyone interested in the arts!!!, Super excited to see this podcast grow. So many fun topics to talk about...Shari is really engaging. Definitely subscribing and would recommend to anyone interested in the arts!!, 5, F6BF5472689BD12, 2018-05-09T18:14:32-07:00
ad4f2bf69c72b8db75978423c25f379e, nauseatingly left, I'm a liberal myself, but its pretty obvious and annoying that they're trying to push their beliefs on the listeners. Get a more politically diverse production staff, we like to see issues from multiple point of views not just yours., 1, 1AB95B8E6E1309E, 2019-06-11T14:53:39-07:00

CREATE TABLE `categories` (
  podcast_id TEXT PRIMARY KEY REFERENCES podcasts(None),
  category TEXT PRIMARY KEY
);
Sample rows from `categories`:
c61aa81c9b929a66f0c1db6cbe5d8548, arts
c61aa81c9b929a66f0c1db6cbe5d8548, arts-performing-arts
c61aa81c9b929a66f0c1db6cbe5d8548, music

",reviews,"title, content","runs, podcasts, reviews, categories"
retail_complains,Write down the date received of complaints sent via Fax.,SELECT t1.`date received` FROM callcenterlogs as t1 inner JOIN events as t2 ON t1.`complaint id` = t2.`complaint id` WHERE t2.`submitted via` = 'Fax',"CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

","CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

","callcenterlogs, events","callcenterlogs.date received, callcenterlogs.complaint id, events.complaint id, events.submitted via","state, callcenterlogs, client, district, events, reviews"
menu,"Among the menus that include baked apples with cream, who is the sponsor of the menu with the highest price?",SELECT t4.sponsor FROM menupage as t1 inner JOIN menuitem as t2 ON t1.id = t2.menu_page_id inner JOIN dish as t3 ON t2.dish_id = t3.id inner JOIN menu as t4 ON t4.id = t1.menu_id WHERE t3.name = 'Baked apples with cream' AND t3.id = 107 ORDER BY t2.price DESC LIMIT 1,"CREATE TABLE `menupage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `menupage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

CREATE TABLE `menuitem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `menuitem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

CREATE TABLE `dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

CREATE TABLE `menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

","CREATE TABLE `Dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `Dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

CREATE TABLE `Menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `Menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

CREATE TABLE `MenuPage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `MenuPage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

CREATE TABLE `MenuItem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `MenuItem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

","menupage, menuitem, dish, menu","menu.sponsor, menupage.id, menuitem.menu_page_id, menuitem.dish_id, dish.id, menu.id, menupage.menu_id, dish.name, menuitem.price","Dish, Menu, MenuPage, MenuItem"
movie,"Who was the actor that played in the movie ""Batman"" with the longest screentime?",SELECT t2.name FROM characters as t1 inner JOIN actor as t2 ON t1.actorid = t2.actorid inner JOIN movie as t3 ON t3.movieid = t1.movieid WHERE t3.title = 'Batman' ORDER BY t1.screentime DESC LIMIT 1,"CREATE TABLE `characters` (
  MovieID INTEGER PRIMARY KEY REFERENCES movie(MovieID),
  ActorID INTEGER PRIMARY KEY REFERENCES actor(ActorID),
  Character Name TEXT,
  creditOrder INTEGER,
  pay TEXT,
  screentime TEXT
);
Sample rows from `characters`:
1, 1, James, 1, None, None
1, 2, Mollie, 2, None, None
1, 3, Rosie, 3, None, None

CREATE TABLE `actor` (
  ActorID INTEGER,
  Name TEXT,
  Date of Birth DATE,
  Birth City TEXT,
  Birth Country TEXT,
  Height (Inches) INTEGER,
  Biography TEXT,
  Gender TEXT,
  Ethnicity TEXT,
  NetWorth TEXT
);
Sample rows from `actor`:
1, John Travolta, 1954-02-18, Englewood, USA, 74, John Joseph Travolta was born in Englewood, New Jersey, one of six children of Helen Travolta (n�e Helen Cecilia Burke) and Salvatore/Samuel J. Travolta. His father was of Italian descent and his mother was of Irish ancestry. His father owned a tire repair shop called Travolta Tires in Hillsdale, NJ. Travolta started acting appearing in a local ..., Male, White, $250,000,000.00
2, Kirstie Alley, 1951-01-12, Wichita, USA, 67, None, Female, White, $40,000,000.00
3, Olympia Dukakis, 1931-06-20, Lowell, USA, 63, Long a vital, respected lady of the classic and contemporary stage this grand lady did not become a household name and sought-after film actress until age 56 when she turned in a glorious, Oscar-winning perf as Cher's sardonic mother in the romantic comedy Moonstruck (1987). Since then movie (and TV) fans have discovered what the East coast ..., Female, White, $6,000,000.00

CREATE TABLE `movie` (
  MovieID INTEGER,
  Title TEXT,
  MPAA Rating TEXT,
  Budget INTEGER,
  Gross INTEGER,
  Release Date TEXT,
  Genre TEXT,
  Runtime INTEGER,
  Rating REAL,
  Rating Count INTEGER,
  Summary TEXT
);
Sample rows from `movie`:
1, Look Who's Talking, PG-13, 7500000, 296000000, 1989-10-12, Romance, 93, 5.9, 73638, After a single, career-minded woman is left on her own to give birth to the child of a married man, she finds a new romantic chance in a cab driver. Meanwhile, the point-of-view of the newborn boy is narrated through voice-over.
2, Driving Miss Daisy, PG, 7500000, 145793296, 1989-12-13, Comedy, 99, 7.4, 91075, An old Jewish woman and her African-American chauffeur in the American South have a relationship that grows and improves over the years.
3, Turner & Hooch, PG, 13000000, 71079915, 1989-07-28, Crime, 100, 7.2, 91415, Det. Scott Turner (Tom Hanks) is an uptight, by-the-book police officer. When his friend Amos Reed (John McIntire), the proprietor of a junkyard, is killed, Turner reluctantly inherits the man's dog. Turner adjusts to life with the dog to help solve a murder case.

","CREATE TABLE `actor` (
  ActorID INTEGER,
  Name TEXT,
  Date of Birth DATE,
  Birth City TEXT,
  Birth Country TEXT,
  Height (Inches) INTEGER,
  Biography TEXT,
  Gender TEXT,
  Ethnicity TEXT,
  NetWorth TEXT
);
Sample rows from `actor`:
1, John Travolta, 1954-02-18, Englewood, USA, 74, John Joseph Travolta was born in Englewood, New Jersey, one of six children of Helen Travolta (n�e Helen Cecilia Burke) and Salvatore/Samuel J. Travolta. His father was of Italian descent and his mother was of Irish ancestry. His father owned a tire repair shop called Travolta Tires in Hillsdale, NJ. Travolta started acting appearing in a local ..., Male, White, $250,000,000.00
2, Kirstie Alley, 1951-01-12, Wichita, USA, 67, None, Female, White, $40,000,000.00
3, Olympia Dukakis, 1931-06-20, Lowell, USA, 63, Long a vital, respected lady of the classic and contemporary stage this grand lady did not become a household name and sought-after film actress until age 56 when she turned in a glorious, Oscar-winning perf as Cher's sardonic mother in the romantic comedy Moonstruck (1987). Since then movie (and TV) fans have discovered what the East coast ..., Female, White, $6,000,000.00

CREATE TABLE `movie` (
  MovieID INTEGER,
  Title TEXT,
  MPAA Rating TEXT,
  Budget INTEGER,
  Gross INTEGER,
  Release Date TEXT,
  Genre TEXT,
  Runtime INTEGER,
  Rating REAL,
  Rating Count INTEGER,
  Summary TEXT
);
Sample rows from `movie`:
1, Look Who's Talking, PG-13, 7500000, 296000000, 1989-10-12, Romance, 93, 5.9, 73638, After a single, career-minded woman is left on her own to give birth to the child of a married man, she finds a new romantic chance in a cab driver. Meanwhile, the point-of-view of the newborn boy is narrated through voice-over.
2, Driving Miss Daisy, PG, 7500000, 145793296, 1989-12-13, Comedy, 99, 7.4, 91075, An old Jewish woman and her African-American chauffeur in the American South have a relationship that grows and improves over the years.
3, Turner & Hooch, PG, 13000000, 71079915, 1989-07-28, Crime, 100, 7.2, 91415, Det. Scott Turner (Tom Hanks) is an uptight, by-the-book police officer. When his friend Amos Reed (John McIntire), the proprietor of a junkyard, is killed, Turner reluctantly inherits the man's dog. Turner adjusts to life with the dog to help solve a murder case.

CREATE TABLE `characters` (
  MovieID INTEGER PRIMARY KEY REFERENCES movie(MovieID),
  ActorID INTEGER PRIMARY KEY REFERENCES actor(ActorID),
  Character Name TEXT,
  creditOrder INTEGER,
  pay TEXT,
  screentime TEXT
);
Sample rows from `characters`:
1, 1, James, 1, None, None
1, 2, Mollie, 2, None, None
1, 3, Rosie, 3, None, None

","characters, actor, movie","actor.name, characters.actorid, actor.actorid, movie.movieid, characters.movieid, movie.title, characters.screentime","actor, movie, characters"
cars,What is the name of the most expensive car?,SELECT t1.car_name FROM data as t1 inner JOIN price as t2 ON t1.id = t2.id ORDER BY t2.price DESC LIMIT 1,"CREATE TABLE `data` (
  ID INTEGER REFERENCES price(ID),
  mpg REAL,
  cylinders INTEGER,
  displacement REAL,
  horsepower INTEGER,
  weight INTEGER,
  acceleration REAL,
  model INTEGER,
  car_name TEXT
);
Sample rows from `data`:
1, 18.0, 8, 307.0, 130, 3504, 12.0, 70, chevrolet chevelle malibu
2, 15.0, 8, 350.0, 165, 3693, 11.5, 70, buick skylark 320
3, 18.0, 8, 318.0, 150, 3436, 11.0, 70, plymouth satellite

CREATE TABLE `price` (
  ID INTEGER,
  price REAL
);
Sample rows from `price`:
1, 25561.59078
2, 24221.42273
3, 27240.84373

","CREATE TABLE `country` (
  origin INTEGER,
  country TEXT
);
Sample rows from `country`:
1, USA
2, Europe
3, Japan

CREATE TABLE `price` (
  ID INTEGER,
  price REAL
);
Sample rows from `price`:
1, 25561.59078
2, 24221.42273
3, 27240.84373

CREATE TABLE `data` (
  ID INTEGER REFERENCES price(ID),
  mpg REAL,
  cylinders INTEGER,
  displacement REAL,
  horsepower INTEGER,
  weight INTEGER,
  acceleration REAL,
  model INTEGER,
  car_name TEXT
);
Sample rows from `data`:
1, 18.0, 8, 307.0, 130, 3504, 12.0, 70, chevrolet chevelle malibu
2, 15.0, 8, 350.0, 165, 3693, 11.5, 70, buick skylark 320
3, 18.0, 8, 318.0, 150, 3436, 11.0, 70, plymouth satellite

CREATE TABLE `production` (
  ID INTEGER PRIMARY KEY REFERENCES price(ID) REFERENCES data(ID),
  model_year INTEGER PRIMARY KEY,
  country INTEGER REFERENCES country(origin)
);
Sample rows from `production`:
1, 1970, 1
1, 1971, 1
2, 1970, 1

","data, price","data.car_name, data.id, price.id, price.price","country, price, data, production"
trains,How many trains are running west?,SELECT COUNT(id) FROM trains WHERE direction = 'west',"CREATE TABLE `trains` (
  id INTEGER,
  direction TEXT
);
Sample rows from `trains`:
1, east
2, east
3, east

","CREATE TABLE `cars` (
  id INTEGER,
  train_id INTEGER REFERENCES trains(id),
  position INTEGER,
  shape TEXT,
  len TEXT,
  sides TEXT,
  roof TEXT,
  wheels INTEGER,
  load_shape TEXT,
  load_num INTEGER
);
Sample rows from `cars`:
1, 1, 1, rectangle, short, not_double, none, 2, circle, 1
2, 1, 2, rectangle, long, not_double, none, 3, hexagon, 1
3, 1, 3, rectangle, short, not_double, peaked, 2, triangle, 1

CREATE TABLE `trains` (
  id INTEGER,
  direction TEXT
);
Sample rows from `trains`:
1, east
2, east
3, east

",trains,"id, direction","cars, trains"
food_inspection_2,What is the average number of inspections did risk level 3 taverns have?,SELECT cast(COUNT(t2.inspection_id) as real) / COUNT(DISTINCT t1.license_no) FROM establishment as t1 inner JOIN inspection as t2 ON t1.license_no = t2.license_no WHERE t1.risk_level = 3 AND t1.facility_type = 'TAVERN',"CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

","establishment, inspection","inspection.inspection_id, establishment.license_no, inspection.license_no, establishment.risk_level, establishment.facility_type","employee, establishment, inspection, inspection_point, violation"
university,"In 2014, what is the name of the university which was considered a leader in the publications rank?",SELECT t3.university_name FROM ranking_criteria as t1 inner JOIN university_ranking_year as t2 ON t1.id = t2.ranking_criteria_id inner JOIN university as t3 ON t3.id = t2.university_id WHERE t1.criteria_name = 'Publications Rank' AND t2.year = 2014 AND t1.id = 17 ORDER BY t2.score DESC LIMIT 1,"CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

","CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

CREATE TABLE `ranking_system` (
  id INTEGER,
  system_name TEXT
);
Sample rows from `ranking_system`:
1, Times Higher Education World University Ranking
2, Shanghai Ranking
3, Center for World University Rankings

CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

","ranking_criteria, university_ranking_year, university","university.university_name, ranking_criteria.id, university_ranking_year.ranking_criteria_id, university.id, university_ranking_year.university_id, ranking_criteria.criteria_name, university_ranking_year.year, university_ranking_year.score","country, ranking_system, ranking_criteria, university, university_ranking_year, university_year"
human_resources,By what percentage is the average salary of Trainees higher than the minimum salary of this postion?,"SELECT 100 * (AVG(cast(replace(substr(t1.salary, 4), ',', '') as real)) - cast(replace(substr(t2.minsalary, 4), ',', '') as real)) / cast(replace(substr(t2.minsalary, 4), ',', '') as real) as per FROM employee as t1  inner JOIN position as t2  ON t1.positionid = t2.positionid WHERE t2.positiontitle = 'Trainee'","CREATE TABLE `employee` (
  ssn TEXT PRIMARY KEY,
  lastname TEXT,
  firstname TEXT,
  hiredate TEXT,
  salary TEXT,
  gender TEXT,
  performance TEXT,
  positionID INTEGER REFERENCES position(positionID),
  locationID INTEGER REFERENCES location(locationID)
);
Sample rows from `employee`:
000-01-0000, Milgrom, Patricia, 10/1/04, US$57,500.00, F, Average, 2, 2
000-02-2222, Adams, Sandy, 1/15/01, US$19,500.00, F, Average, 3, 1
109-87-6543, Wood, Emily, 3/12/97, US$69,000.00, F, Average, 2, 5

CREATE TABLE `position` (
  positionID INTEGER,
  positiontitle TEXT,
  educationrequired TEXT,
  minsalary TEXT,
  maxsalary TEXT
);
Sample rows from `position`:
1, Account Representative, 4 year degree, US$25,000.00, US$75,000.00
2, Manager, 4 year degree, US$50,000.00, US$150,000.00
3, Trainee, 2 year degree, US$18,000.00, US$25,000.00

","CREATE TABLE `location` (
  locationID INTEGER,
  locationcity TEXT,
  address TEXT,
  state TEXT,
  zipcode INTEGER,
  officephone TEXT
);
Sample rows from `location`:
1, Atlanta, 450 Peachtree Rd, GA, 30316, (404)333-5555
2, Boston, 3 Commons Blvd, MA, 2190, (617)123-4444
3, Chicago, 500 Loop Highway, IL, 60620, (312)444-6666

CREATE TABLE `position` (
  positionID INTEGER,
  positiontitle TEXT,
  educationrequired TEXT,
  minsalary TEXT,
  maxsalary TEXT
);
Sample rows from `position`:
1, Account Representative, 4 year degree, US$25,000.00, US$75,000.00
2, Manager, 4 year degree, US$50,000.00, US$150,000.00
3, Trainee, 2 year degree, US$18,000.00, US$25,000.00

CREATE TABLE `employee` (
  ssn TEXT PRIMARY KEY,
  lastname TEXT,
  firstname TEXT,
  hiredate TEXT,
  salary TEXT,
  gender TEXT,
  performance TEXT,
  positionID INTEGER REFERENCES position(positionID),
  locationID INTEGER REFERENCES location(locationID)
);
Sample rows from `employee`:
000-01-0000, Milgrom, Patricia, 10/1/04, US$57,500.00, F, Average, 2, 2
000-02-2222, Adams, Sandy, 1/15/01, US$19,500.00, F, Average, 3, 1
109-87-6543, Wood, Emily, 3/12/97, US$69,000.00, F, Average, 2, 5

","employee, position","employee.salary, position.minsalary, employee.positionid, position.positionid, position.positiontitle","location, position, employee"
language_corpus,Name the longest Catalan language Wikipedia page title and state the number of different words in this page.,"SELECT title, words FROM pages WHERE title = ( SELECT MAX(length(title)) FROM pages )","CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

","CREATE TABLE `langs` (
  lid INTEGER,
  lang TEXT PRIMARY KEY,
  locale TEXT PRIMARY KEY,
  pages INTEGER,
  words INTEGER
);
Sample rows from `langs`:
1, ca, ca_ES, 1129144, 2764996

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
langs, 1
pages, 1129144
words, 2764996

CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `langs_words` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `langs_words`:
1, 1, 242
1, 2, 16841
1, 3, 48700

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

",pages,"title, words","langs, sqlite_sequence, pages, words, langs_words, pages_words, biwords"
public_review_platform,Find out which business ID are opened all the time.,SELECT DISTINCT business_id FROM business_hours WHERE day_id >= 1 AND day_id < 8 AND opening_time = closing_time,"CREATE TABLE `business_hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `business_hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

",business_hours,"business_id, day_id, opening_time, closing_time","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
retail_world,What is the shipping cost for order number 10692 from the company Alfreds Futterkiste?,SELECT t2.freight FROM customers as t1 inner JOIN orders as t2 ON t1.customerid = t2.customerid WHERE t2.orderid = 10692 AND t1.companyname = 'Alfreds Futterkiste',"CREATE TABLE `customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

","customers, orders","orders.freight, customers.customerid, orders.customerid, orders.orderid, customers.companyname","sqlite_sequence, Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails"
beer_factory,List the brands of root beer produced by Dr Pepper Snapple Group and calculate their percentage of purchases between 2014 to 2016.,"SELECT t1.brandname , cast(SUM(case when t2.purchasedate >= '2014-01-01' AND t2.purchasedate <= '2016-12-31' then 1 else 0 end) as real) / COUNT(t2.brandid) as purchase FROM rootbeerbrand as t1 inner JOIN rootbeer as t2 ON t1.brandid = t2.brandid WHERE t1.breweryname = 'Dr Pepper Snapple Group' GROUP BY t2.brandid","CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

","CREATE TABLE `customers` (
  CustomerID INTEGER,
  First TEXT,
  Last TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER,
  Email TEXT,
  PhoneNumber TEXT,
  FirstPurchaseDate DATE,
  SubscribedToEmailList TEXT,
  Gender TEXT
);
Sample rows from `customers`:
101811, Kenneth, Walton, 6715 Commonwealth Dr, Sacramento, CA, 94256, walton.k76@fastmail.com, (916) 918-1561, 2013-05-30, FALSE, M
103508, Madeleine, Jones, 3603 Leola Way, Sacramento, CA, 94258, j_madeleine@gmail.com, (916) 186-9423, 2013-02-06, FALSE, F
104939, Damen, Wheeler, 6740 Branwood Way, Orangevale, CA, 95662, dwheeler@outlook.com, (916) 164-1156, 2013-04-11, FALSE, M

CREATE TABLE `geolocation` (
  LocationID INTEGER REFERENCES location(LocationID),
  Latitude REAL,
  Longitude REAL
);
Sample rows from `geolocation`:
0, 0.0, 0.0
1, 38.566129, -121.426432
2, 38.559615, -121.42243

CREATE TABLE `location` (
  LocationID INTEGER REFERENCES geolocation(LocationID),
  LocationName TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER
);
Sample rows from `location`:
0, LOST, None, None, None, None
1, Sac State American River Courtyard, 6000 J St, Sacramento, CA, 95819
2, Sac State Union, 6000 J St, Sacramento, CA, 95819

CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

CREATE TABLE `rootbeerreview` (
  CustomerID INTEGER PRIMARY KEY REFERENCES customers(CustomerID),
  BrandID INTEGER PRIMARY KEY REFERENCES rootbeerbrand(BrandID),
  StarRating INTEGER,
  ReviewDate DATE,
  Review TEXT
);
Sample rows from `rootbeerreview`:
101811, 10012, 5, 2013-07-15, None
101811, 10014, 1, 2013-07-08, None
101811, 10015, 3, 2013-07-25, None

CREATE TABLE `transaction` (
  TransactionID INTEGER,
  CreditCardNumber INTEGER,
  CustomerID INTEGER REFERENCES customers(CustomerID),
  TransactionDate DATE,
  CreditCardType TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  RootBeerID INTEGER REFERENCES rootbeer(RootBeerID),
  PurchasePrice REAL
);
Sample rows from `transaction`:
100000, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105661, 3.0
100001, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105798, 3.0
100002, 6011583832864739, 864896, 2014-07-07, Discover, 2, 102514, 3.0

","rootbeerbrand, rootbeer","rootbeerbrand.brandname, rootbeer.purchasedate, rootbeer.brandid, rootbeerbrand.brandid, rootbeerbrand.breweryname","customers, geolocation, location, rootbeerbrand, rootbeer, rootbeerreview, transaction"
video_games,How many platforms are available for the game Pro Evolution Soccer 2016?,SELECT COUNT(t2.id) FROM game_platform as t1 inner JOIN platform as t2 ON t1.platform_id = t2.id inner JOIN game_publisher as t3 ON t1.game_publisher_id = t3.id inner JOIN game as t4 ON t3.game_id = t4.id WHERE t4.game_name = 'Pro Evolution Soccer 2016',"CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

","CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

","game_platform, platform, game_publisher, game","platform.id, game_platform.platform_id, game_platform.game_publisher_id, game_publisher.id, game_publisher.game_id, game.id, game.game_name","genre, game, platform, publisher, game_publisher, game_platform, region, region_sales"
sales,"Among customers with the last name of Valdez, who purchased the highest quantity?",SELECT t1.firstname FROM customers as t1 inner JOIN sales as t2 ON t1.customerid = t2.customerid WHERE t1.lastname = 'Valdez' ORDER BY t2.quantity DESC LIMIT 1,"CREATE TABLE `customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

CREATE TABLE `sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Employees`:
1, Abraham, e, Bennet
2, Reginald, l, Blotchet-Halls
3, Cheryl, a, Carson

CREATE TABLE `Products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

CREATE TABLE `Sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `Sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

","customers, sales","customers.firstname, customers.customerid, sales.customerid, customers.lastname, sales.quantity","Customers, Employees, Products, Sales"
shooting,What is the proportion of white males and females in the police force?,SELECT cast(SUM(gender = 'M') as real) / SUM(gender = 'F') FROM officers wHERE race = 'w',"CREATE TABLE `officers` (
  case_number TEXT REFERENCES incidents(case_number),
  race TEXT,
  gender TEXT,
  last_name TEXT,
  first_name TEXT,
  full_name TEXT
);
Sample rows from `officers`:
44523A, L, M, Patino, Michael, Patino, Michael
44523A, W, M, Fillingim, Brian, Fillingim, Brian
121982X, L, M, Padilla, Gilbert, Padilla, Gilbert

","CREATE TABLE `incidents` (
  case_number TEXT PRIMARY KEY,
  date DATE,
  location TEXT,
  subject_statuses TEXT,
  subject_weapon TEXT,
  subjects TEXT,
  subject_count INTEGER,
  officers TEXT
);
Sample rows from `incidents`:
031347-2015, 2015/2/9, 7400 Bonnie View Road, Deceased, Vehicle, Luster, Desmond Dwayne B/M, 1, Tollerton, Aaron W/M
072458-2016, 2016/3/26, 8218 Willoughby Boulevard, Shoot and Miss, Shotgun, Gilstrap, Bryan B/M, 1, Cardenas, Steven L/M
089985-2016, 2016/4/16, 4800 Columbia Ave, Shoot and Miss, Handgun, Unknown L/M, 1, Ruben, Fredirick W/M

CREATE TABLE `officers` (
  case_number TEXT REFERENCES incidents(case_number),
  race TEXT,
  gender TEXT,
  last_name TEXT,
  first_name TEXT,
  full_name TEXT
);
Sample rows from `officers`:
44523A, L, M, Patino, Michael, Patino, Michael
44523A, W, M, Fillingim, Brian, Fillingim, Brian
121982X, L, M, Padilla, Gilbert, Padilla, Gilbert

CREATE TABLE `subjects` (
  case_number TEXT REFERENCES incidents(case_number),
  race TEXT,
  gender TEXT,
  last_name TEXT,
  first_name TEXT,
  full_name TEXT
);
Sample rows from `subjects`:
44523A, L, M, Curry, James, Curry, James
121982X, L, M, Chavez, Gabriel, Chavez, Gabriel
605484T, L, M, Salinas, Nick, Salinas, Nick

",officers,"gender, race","incidents, officers, subjects"
regional_sales,Calculate the average net profit of phones which have sales channel of distributor.,"SELECT SUM(replace(t1.`unit price`, ',', '') - replace(t1.`unit cost`, ',', '')) / COUNT(t1.ordernumber) FROM `sales orders` as t1 inner JOIN products as t2 ON t2.productid = t1._productid WHERE t2.`product name` = 'Phones' AND t1.`sales channel` = 'Distributor'","CREATE TABLE `sales orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `sales orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

CREATE TABLE `products` (
  ProductID INTEGER,
  Product Name TEXT
);
Sample rows from `products`:
1, Cookware
2, Photo Frames
3, Table Lamps

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  Customer Names TEXT
);
Sample rows from `Customers`:
1, Avon Corp
2, WakeFern 
3, Elorac, Corp

CREATE TABLE `Products` (
  ProductID INTEGER,
  Product Name TEXT
);
Sample rows from `Products`:
1, Cookware
2, Photo Frames
3, Table Lamps

CREATE TABLE `Regions` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `Regions`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `Sales Team` (
  SalesTeamID INTEGER,
  Sales Team TEXT,
  Region TEXT
);
Sample rows from `Sales Team`:
1, Adam Hernandez, Northeast
2, Keith Griffin, Northeast
3, Jerry Green, West

CREATE TABLE `Store Locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `Store Locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

CREATE TABLE `Sales Orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `Sales Orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

","sales orders, products","sales orders.unit price, sales orders.unit cost, sales orders.ordernumber, products.productid, sales orders._productid, products.product name, sales orders.sales channel","Customers, Products, Regions, Sales Team, Store Locations, Sales Orders"
movielens,List the genres of the movies which actor id 851 is the star.,SELECT t2.genre FROM movies2actors as t1 inner JOIN movies2directors as t2 ON t1.movieid = t2.movieid inner JOIN actors as t3 ON t1.actorid = t3.actorid WHERE t3.actorid = 851,"CREATE TABLE `movies2actors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  actorid INTEGER PRIMARY KEY REFERENCES actors(None),
  cast_num INTEGER
);
Sample rows from `movies2actors`:
1672580, 981535, 0
1672946, 1094968, 0
1673647, 149985, 0

CREATE TABLE `movies2directors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  directorid INTEGER PRIMARY KEY REFERENCES directors(None),
  genre TEXT
);
Sample rows from `movies2directors`:
1672111, 54934, Action
1672946, 188940, Action
1679461, 179783, Action

CREATE TABLE `actors` (
  actorid INTEGER,
  a_gender TEXT,
  a_quality INTEGER
);
Sample rows from `actors`:
4, M, 4
16, M, 0
28, M, 4

","CREATE TABLE `users` (
  userid INTEGER,
  age TEXT,
  u_gender TEXT,
  occupation TEXT
);
Sample rows from `users`:
1, 1, F, 2
2, 56, M, 3
3, 25, M, 2

CREATE TABLE `directors` (
  directorid INTEGER,
  d_quality INTEGER PRIMARY KEY,
  avg_revenue INTEGER PRIMARY KEY
);
Sample rows from `directors`:
67, 4, 1
92, 2, 3
284, 4, 0

CREATE TABLE `actors` (
  actorid INTEGER,
  a_gender TEXT,
  a_quality INTEGER
);
Sample rows from `actors`:
4, M, 4
16, M, 0
28, M, 4

CREATE TABLE `movies` (
  movieid INTEGER,
  year INTEGER,
  isEnglish TEXT,
  country TEXT,
  runningtime INTEGER
);
Sample rows from `movies`:
1672052, 3, T, other, 2
1672111, 4, T, other, 2
1672580, 4, T, USA, 3

CREATE TABLE `movies2actors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  actorid INTEGER PRIMARY KEY REFERENCES actors(None),
  cast_num INTEGER
);
Sample rows from `movies2actors`:
1672580, 981535, 0
1672946, 1094968, 0
1673647, 149985, 0

CREATE TABLE `movies2directors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  directorid INTEGER PRIMARY KEY REFERENCES directors(None),
  genre TEXT
);
Sample rows from `movies2directors`:
1672111, 54934, Action
1672946, 188940, Action
1679461, 179783, Action

CREATE TABLE `u2base` (
  userid INTEGER PRIMARY KEY REFERENCES users(None),
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  rating TEXT
);
Sample rows from `u2base`:
2, 1964242, 1
2, 2219779, 1
3, 1856939, 1

","movies2actors, movies2directors, actors","movies2directors.genre, movies2actors.movieid, movies2directors.movieid, movies2actors.actorid, actors.actorid","users, directors, actors, movies, movies2actors, movies2directors, u2base"
public_review_platform,How many open businesses in the City of Phoenix have users left a long review?,SELECT COUNT(DISTINCT t2.business_id) FROM reviews as t1 inner JOIN business as t2 ON t1.business_id = t2.business_id WHERE t1.review_length = 'Long' AND t2.active = 'true' AND t2.city = 'Phoenix',"CREATE TABLE `reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","reviews, business","business.business_id, reviews.business_id, reviews.review_length, business.active, business.city","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
computer_student,How many courses are there for basic or medium undergraduate courses?,SELECT COUNT(course_id) FROM course WHERE courselevel = 'Level_300',"CREATE TABLE `course` (
  course_id INTEGER,
  courseLevel TEXT
);
Sample rows from `course`:
0, Level_500
1, Level_500
2, Level_500

","CREATE TABLE `course` (
  course_id INTEGER,
  courseLevel TEXT
);
Sample rows from `course`:
0, Level_500
1, Level_500
2, Level_500

CREATE TABLE `person` (
  p_id INTEGER,
  professor INTEGER,
  student INTEGER,
  hasPosition TEXT,
  inPhase TEXT,
  yearsInProgram TEXT
);
Sample rows from `person`:
3, 0, 1, 0, 0, 0
4, 0, 1, 0, 0, 0
5, 1, 0, Faculty, 0, 0

CREATE TABLE `advisedBy` (
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id),
  p_id_dummy INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `advisedBy`:
96, 5
118, 5
183, 5

CREATE TABLE `taughtBy` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `taughtBy`:
0, 40
1, 40
2, 180

",course,"course_id, courselevel","course, person, advisedBy, taughtBy"
student_loan,List out all bankrupt students that are able to make payment before due?,SELECT t1.name FROM filed_for_bankrupcy as t1 inner JOIN no_payment_due as t2 ON t1.name = t2.name WHERE t2.bool = 'neg',"CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

","filed_for_bankrupcy, no_payment_due","filed_for_bankrupcy.name, no_payment_due.name, no_payment_due.bool","bool, person, disabled, enlist, filed_for_bankrupcy, longest_absense_from_school, male, no_payment_due, unemployed, enrolled"
shakespeare,What are the character names for a senator of Venice?,SELECT charname FROM characters WHERE description = 'a senator of Venice',"CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

","CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
chapters, 19648
characters, 1266
paragraphs, 666327

CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

",characters,"charname, description","chapters, sqlite_sequence, characters, paragraphs, works"
language_corpus,"What are the occurance of word ""del"" in title ""Any anomalÃ­stic""?",SELECT t2.occurrences FROM words as t1 inner JOIN pages_words as t2 ON t1.wid = t2.wid inner JOIN pages as t3 ON t2.pid = t3.pid WHERE t1.word = 'del' AND t3.title = 'Any anomalÃ­stic',"CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

","CREATE TABLE `langs` (
  lid INTEGER,
  lang TEXT PRIMARY KEY,
  locale TEXT PRIMARY KEY,
  pages INTEGER,
  words INTEGER
);
Sample rows from `langs`:
1, ca, ca_ES, 1129144, 2764996

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
langs, 1
pages, 1129144
words, 2764996

CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `langs_words` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `langs_words`:
1, 1, 242
1, 2, 16841
1, 3, 48700

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

","words, pages_words, pages","pages_words.occurrences, words.wid, pages_words.wid, pages_words.pid, pages.pid, words.word, pages.title","langs, sqlite_sequence, pages, words, langs_words, pages_words, biwords"
university,What is the total number of ranking criteria under the ranking system called Shanghai Ranking?,SELECT COUNT(*) FROM ranking_system as t1 inner JOIN ranking_criteria as t2 ON t1.id = t2.ranking_system_id WHERE t1.system_name = 'Shanghai Ranking',"CREATE TABLE `ranking_system` (
  id INTEGER,
  system_name TEXT
);
Sample rows from `ranking_system`:
1, Times Higher Education World University Ranking
2, Shanghai Ranking
3, Center for World University Rankings

CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

","CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

CREATE TABLE `ranking_system` (
  id INTEGER,
  system_name TEXT
);
Sample rows from `ranking_system`:
1, Times Higher Education World University Ranking
2, Shanghai Ranking
3, Center for World University Rankings

CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

","ranking_system, ranking_criteria","ranking_system.id, ranking_criteria.ranking_system_id, ranking_system.system_name","country, ranking_system, ranking_criteria, university, university_ranking_year, university_year"
food_inspection_2,"What is the employee's last name at 7211 S Hermitage Ave, Chicago, IL?",SELECT last_name FROM employee WHERE address = '7211 S Hermitage Ave' AND city = 'Chicago' AND state = 'IL',"CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

",employee,"last_name, address, city, state","employee, establishment, inspection, inspection_point, violation"
codebase_comments,"What is the language of the method used in the solution path ""opendns_diagnosticapp\windows\OpenDnsDiagnostic.sln""?",SELECT t2.lang FROM solution as t1 inner JOIN method as t2 ON t1.id = t2.solutionid WHERE t1.path = 'opendns_diagnosticappwindowsOpenDnsDiagnostic.sln',"CREATE TABLE `solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

CREATE TABLE `method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Method, 10860640
MethodParameter, 17514858
Repo, 156550

CREATE TABLE `Method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `Method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

CREATE TABLE `MethodParameter` (
  Id INTEGER,
  MethodId TEXT,
  Type TEXT,
  Name TEXT
);
Sample rows from `MethodParameter`:
1, 1, System.String, data
2, 2, System.Int32, i
3, 2, System.Int32, declstartpos

CREATE TABLE `Repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `Repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

CREATE TABLE `Solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `Solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

","solution, method","method.lang, solution.id, method.solutionid, solution.path","sqlite_sequence, Method, MethodParameter, Repo, Solution"
public_review_platform,How many businesses in AZ state do not open on Thursday?,SELECT COUNT(t1.business_id) FROM business as t1 inner JOIN checkins as t2 ON t1.business_id = t2.business_id inner JOIN days as t3 ON t2.day_id = t3.day_id WHERE t2.label_time_4 LIKE 'None' AND t1.state LIKE 'AZ' AND t3.day_of_week LIKE 'Thursday',"CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `days`:
1, Sunday
2, Monday
3, Tuesday

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","business, checkins, days","business.business_id, checkins.business_id, checkins.day_id, days.day_id, checkins.label_time_4, business.state, days.day_of_week","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
shipping,State the weight of shipments transported by Peterbilt.,SELECT t2.weight FROM truck as t1 inner JOIN shipment as t2 ON t1.truck_id = t2.truck_id WHERE make = 'Peterbilt',"CREATE TABLE `truck` (
  truck_id INTEGER,
  make TEXT,
  model_year INTEGER
);
Sample rows from `truck`:
1, Peterbilt, 2005
2, Mack, 2006
3, Peterbilt, 2007

CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

","CREATE TABLE `city` (
  city_id INTEGER,
  city_name TEXT,
  state TEXT,
  population INTEGER,
  area REAL
);
Sample rows from `city`:
100, Union City, New Jersey, 67088, 1.3
101, Huntington Park, California, 61348, 3.0
102, Passaic, New Jersey, 67861, 3.1

CREATE TABLE `customer` (
  cust_id INTEGER,
  cust_name TEXT,
  annual_revenue INTEGER,
  cust_type TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip REAL,
  phone TEXT
);
Sample rows from `customer`:
193, Advanced Fabricators, 39588651, manufacturer, 5141 Summit Boulevard, West Palm Beach, FL, 33415.0, (561) 683-3535
304, Pard's Trailer Sales, 17158109, wholesaler, 5910 South 300 West, Salt Lake City, UT, 84107.0, (801) 262-4864
314, Saar Enterprises, Inc., 47403613, retailer, 11687 192nd Street, Council Bluffs, IA, 51503.0, (712) 366-4929

CREATE TABLE `driver` (
  driver_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip_code INTEGER,
  phone TEXT
);
Sample rows from `driver`:
20, Sue, Newell, 268 Richmond Ave, Memphis, TN, 38106, (901) 774-6569
21, Andrea, Simons, 3574 Oak Limb Cv, Memphis, TN, 38135, (901) 384-0984
22, Roger, McHaney, 1839 S Orleans St, Memphis, TN, 38106, (901) 948-1043

CREATE TABLE `truck` (
  truck_id INTEGER,
  make TEXT,
  model_year INTEGER
);
Sample rows from `truck`:
1, Peterbilt, 2005
2, Mack, 2006
3, Peterbilt, 2007

CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

","truck, shipment","shipment.weight, truck.truck_id, shipment.truck_id, make","city, customer, driver, truck, shipment"
retail_complains,How many times per year does a credit card customer complain about overlimit fees?,"SELECT strftime('%Y', `date received`), COUNT(`date received`) FROM events WHERE product = 'Credit card' AND issue = 'Overlimit fee' GROUP BY strftime('%Y', `date received`) HAVING COUNT(`date received`)","CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

","CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

",events,"date received, product","state, callcenterlogs, client, district, events, reviews"
simpson_episodes,What is the title of the episode that received the lowest rating?,SELECT title FROM episode ORDER BY rating LIMIT 1;,"CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

",episode,"title, rating","Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
movielens,What is the total average movie directed by the directors who's quality and revenue is 4?,SELECT cast(SUM(case when t1.d_quality = 4 AND t1.avg_revenue = 4 then 1 else 0 end) as real) / COUNT(t2.movieid) FROM directors as t1 inner JOIN movies2directors as t2 ON t1.directorid = t2.directorid,"CREATE TABLE `directors` (
  directorid INTEGER,
  d_quality INTEGER PRIMARY KEY,
  avg_revenue INTEGER PRIMARY KEY
);
Sample rows from `directors`:
67, 4, 1
92, 2, 3
284, 4, 0

CREATE TABLE `movies2directors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  directorid INTEGER PRIMARY KEY REFERENCES directors(None),
  genre TEXT
);
Sample rows from `movies2directors`:
1672111, 54934, Action
1672946, 188940, Action
1679461, 179783, Action

","CREATE TABLE `users` (
  userid INTEGER,
  age TEXT,
  u_gender TEXT,
  occupation TEXT
);
Sample rows from `users`:
1, 1, F, 2
2, 56, M, 3
3, 25, M, 2

CREATE TABLE `directors` (
  directorid INTEGER,
  d_quality INTEGER PRIMARY KEY,
  avg_revenue INTEGER PRIMARY KEY
);
Sample rows from `directors`:
67, 4, 1
92, 2, 3
284, 4, 0

CREATE TABLE `actors` (
  actorid INTEGER,
  a_gender TEXT,
  a_quality INTEGER
);
Sample rows from `actors`:
4, M, 4
16, M, 0
28, M, 4

CREATE TABLE `movies` (
  movieid INTEGER,
  year INTEGER,
  isEnglish TEXT,
  country TEXT,
  runningtime INTEGER
);
Sample rows from `movies`:
1672052, 3, T, other, 2
1672111, 4, T, other, 2
1672580, 4, T, USA, 3

CREATE TABLE `movies2actors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  actorid INTEGER PRIMARY KEY REFERENCES actors(None),
  cast_num INTEGER
);
Sample rows from `movies2actors`:
1672580, 981535, 0
1672946, 1094968, 0
1673647, 149985, 0

CREATE TABLE `movies2directors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  directorid INTEGER PRIMARY KEY REFERENCES directors(None),
  genre TEXT
);
Sample rows from `movies2directors`:
1672111, 54934, Action
1672946, 188940, Action
1679461, 179783, Action

CREATE TABLE `u2base` (
  userid INTEGER PRIMARY KEY REFERENCES users(None),
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  rating TEXT
);
Sample rows from `u2base`:
2, 1964242, 1
2, 2219779, 1
3, 1856939, 1

","directors, movies2directors","directors.d_quality, directors.avg_revenue, movies2directors.movieid, directors.directorid, movies2directors.directorid","users, directors, actors, movies, movies2actors, movies2directors, u2base"
public_review_platform,How many business have been reviewed by user ID 3 and how long have this user been with Yelp?,"SELECT COUNT(t1.business_id) , strftime('%Y', 'now') - t2.user_yelping_since_year FROM reviews as t1 inner JOIN users as t2 ON t1.user_id = t2.user_id WHERE t1.user_id = 3","CREATE TABLE `reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","reviews, users","reviews.business_id, reviews.user_id, users.user_id","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
restaurant,In which region can you find the highest number of Baskin Robbins restaurants?,SELECT t2.region as num FROM generalinfo as t1 inner JOIN geographic as t2 ON t1.city = t2.city WHERE t1.label = 'baskin robbins' GROUP BY t2.region ORDER BY COUNT(t1.city) DESC LIMIT 1,"CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

CREATE TABLE `geographic` (
  city TEXT PRIMARY KEY,
  county TEXT,
  region TEXT
);
Sample rows from `geographic`:
alameda, alameda county, bay area
alamo, contra costa county, bay area
albany, alameda county, bay area

","CREATE TABLE `geographic` (
  city TEXT PRIMARY KEY,
  county TEXT,
  region TEXT
);
Sample rows from `geographic`:
alameda, alameda county, bay area
alamo, contra costa county, bay area
albany, alameda county, bay area

CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

","generalinfo, geographic","geographic.region, generalinfo.city, geographic.city, generalinfo.label","geographic, generalinfo, location"
menu,"Please list the IDs of the menus that are DIYs of the restaurant and have the dish ""Clear green turtle"".",SELECT t2.menu_id FROM menuitem as t1 inner JOIN menupage as t2 ON t1.menu_page_id = t2.id inner JOIN menu as t3 ON t2.menu_id = t3.id inner JOIN dish as t4 ON t1.dish_id = t4.id WHERE t4.name = 'Clear green turtle' AND t3.sponsor is null,"CREATE TABLE `menuitem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `menuitem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

CREATE TABLE `menupage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `menupage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

CREATE TABLE `menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

CREATE TABLE `dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

","CREATE TABLE `Dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `Dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

CREATE TABLE `Menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `Menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

CREATE TABLE `MenuPage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `MenuPage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

CREATE TABLE `MenuItem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `MenuItem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

","menuitem, menupage, menu, dish","menupage.menu_id, menuitem.menu_page_id, menupage.id, menu.id, menuitem.dish_id, dish.id, dish.name, menu.sponsor","Dish, Menu, MenuPage, MenuItem"
movielens,List the cast and the director of the movie with the id 1949144.,"SELECT t1.actorid, t2.directorid FROM movies2actors as t1 inner JOIN movies2directors as t2 ON t1.movieid = t2.movieid WHERE t1.movieid = 1949144","CREATE TABLE `movies2actors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  actorid INTEGER PRIMARY KEY REFERENCES actors(None),
  cast_num INTEGER
);
Sample rows from `movies2actors`:
1672580, 981535, 0
1672946, 1094968, 0
1673647, 149985, 0

CREATE TABLE `movies2directors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  directorid INTEGER PRIMARY KEY REFERENCES directors(None),
  genre TEXT
);
Sample rows from `movies2directors`:
1672111, 54934, Action
1672946, 188940, Action
1679461, 179783, Action

","CREATE TABLE `users` (
  userid INTEGER,
  age TEXT,
  u_gender TEXT,
  occupation TEXT
);
Sample rows from `users`:
1, 1, F, 2
2, 56, M, 3
3, 25, M, 2

CREATE TABLE `directors` (
  directorid INTEGER,
  d_quality INTEGER PRIMARY KEY,
  avg_revenue INTEGER PRIMARY KEY
);
Sample rows from `directors`:
67, 4, 1
92, 2, 3
284, 4, 0

CREATE TABLE `actors` (
  actorid INTEGER,
  a_gender TEXT,
  a_quality INTEGER
);
Sample rows from `actors`:
4, M, 4
16, M, 0
28, M, 4

CREATE TABLE `movies` (
  movieid INTEGER,
  year INTEGER,
  isEnglish TEXT,
  country TEXT,
  runningtime INTEGER
);
Sample rows from `movies`:
1672052, 3, T, other, 2
1672111, 4, T, other, 2
1672580, 4, T, USA, 3

CREATE TABLE `movies2actors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  actorid INTEGER PRIMARY KEY REFERENCES actors(None),
  cast_num INTEGER
);
Sample rows from `movies2actors`:
1672580, 981535, 0
1672946, 1094968, 0
1673647, 149985, 0

CREATE TABLE `movies2directors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  directorid INTEGER PRIMARY KEY REFERENCES directors(None),
  genre TEXT
);
Sample rows from `movies2directors`:
1672111, 54934, Action
1672946, 188940, Action
1679461, 179783, Action

CREATE TABLE `u2base` (
  userid INTEGER PRIMARY KEY REFERENCES users(None),
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  rating TEXT
);
Sample rows from `u2base`:
2, 1964242, 1
2, 2219779, 1
3, 1856939, 1

","movies2actors, movies2directors","movies2actors.actorid, movies2directors.directorid, movies2actors.movieid, movies2directors.movieid","users, directors, actors, movies, movies2actors, movies2directors, u2base"
regional_sales,Sate the order number and calculate the net profit for each order under Joshua Bennett.,"SELECT t1.ordernumber , replace(t1.`unit price`, ',', '') - replace(t1.`unit cost`, ',', '')  FROM `sales orders` as t1 inner JOIN `sales team` as t2 ON t2.salesteamID = t1._salesteamID WHERE t2.`sales team` = 'Joshua Bennett'","CREATE TABLE `sales orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `sales orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

CREATE TABLE `sales team` (
  SalesTeamID INTEGER,
  Sales Team TEXT,
  Region TEXT
);
Sample rows from `sales team`:
1, Adam Hernandez, Northeast
2, Keith Griffin, Northeast
3, Jerry Green, West

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  Customer Names TEXT
);
Sample rows from `Customers`:
1, Avon Corp
2, WakeFern 
3, Elorac, Corp

CREATE TABLE `Products` (
  ProductID INTEGER,
  Product Name TEXT
);
Sample rows from `Products`:
1, Cookware
2, Photo Frames
3, Table Lamps

CREATE TABLE `Regions` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `Regions`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `Sales Team` (
  SalesTeamID INTEGER,
  Sales Team TEXT,
  Region TEXT
);
Sample rows from `Sales Team`:
1, Adam Hernandez, Northeast
2, Keith Griffin, Northeast
3, Jerry Green, West

CREATE TABLE `Store Locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `Store Locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

CREATE TABLE `Sales Orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `Sales Orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

","sales orders, sales team","sales orders.ordernumber, sales orders.unit price, sales orders.unit cost, sales team.salesteamID, sales orders._salesteamID, sales team.sales team","Customers, Products, Regions, Sales Team, Store Locations, Sales Orders"
public_review_platform,"Under the category name of ""Coffee & Tea"", mention any 5 business ID , their state and city.","SELECT t2.business_id, t3.state, t3.city FROM categories as t1 inner JOIN business_categories as t2 ON t1.category_id = t2.category_id inner JOIN business as t3 ON t2.business_id = t3.business_id WHERE t1.category_name = 'Coffee & Tea' LIMIT 5","CREATE TABLE `categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `business_categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `business_categories`:
1, 8
1, 143
2, 18

CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","categories, business_categories, business","business_categories.business_id, business.state, business.city, categories.category_id, business_categories.category_id, business.business_id, categories.category_name","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
shakespeare,List down any 5 titles in the history genre.,SELECT title FROM works WHERE genretype = 'History' LIMIT 5,"CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

","CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
chapters, 19648
characters, 1266
paragraphs, 666327

CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

",works,"title, genretype","chapters, sqlite_sequence, characters, paragraphs, works"
image_and_language,How many samples of animal objects are there in image no.660?,SELECT COUNT(t1.img_id) FROM img_obj as t1 inner JOIN OBJ_CLasSES as t2 ON t1.OBJ_CLasS_ID = t2.OBJ_CLasS_ID WHERE t2.OBJ_CLasS = 'animal' AND t1.img_id = 660,"CREATE TABLE `img_obj` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `img_obj`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `OBJ_CLasSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLasSES`:
0, awning
1, goggles
2, dot

","CREATE TABLE `ATT_CLASSES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `ATT_CLASSES`:
0, building s
1, indoors
2, cluttered

CREATE TABLE `OBJ_CLASSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLASSES`:
0, awning
1, goggles
2, dot

CREATE TABLE `IMG_OBJ` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `IMG_OBJ`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `IMG_OBJ_ATT` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_OBJ_ATT`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `PRED_CLASSES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `PRED_CLASSES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `IMG_REL` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_REL`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

","img_obj, OBJ_CLasSES","img_obj.img_id, img_obj.OBJ_CLasS_ID, OBJ_CLasSES.OBJ_CLasS_ID, OBJ_CLasSES.OBJ_CLasS","ATT_CLASSES, OBJ_CLASSES, IMG_OBJ, IMG_OBJ_ATT, PRED_CLASSES, IMG_REL"
chicago_crime,Provide the occurrence date and location of the deceptive practice due to the unlawful use of recorded sound.,"SELECT t2.date, t2.latitude, t2.longitude FROM iucr as t1 inner JOIN crime as t2 ON t2.iucr_no = t1.iucr_no WHERE t1.primary_description = 'DECEPTIVE PRACTICE' AND t1.secondary_description = 'UNLAWFUL USE OF RECORDED SOUND'","CREATE TABLE `iucr` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `iucr`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","CREATE TABLE `Community_Area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `Community_Area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `District` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `District`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `FBI_Code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `FBI_Code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `IUCR` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `IUCR`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `Neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `Neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `Ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `Ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `Crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `Crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","iucr, crime","crime.date, crime.latitude, crime.longitude, crime.iucr_no, iucr.iucr_no, iucr.primary_description, iucr.secondary_description","Community_Area, District, FBI_Code, IUCR, Neighborhood, Ward, Crime"
european_football_1,What's the name of the football division in the Netherlands?,SELECT name FROM divisions WHERE country = 'Netherlands',"CREATE TABLE `divisions` (
  division TEXT PRIMARY KEY,
  name TEXT,
  country TEXT
);
Sample rows from `divisions`:
B1, Division 1A, Belgium
D1, Bundesliga, Deutschland
D2, 2. Bundesliga, Deutschland

","CREATE TABLE `divisions` (
  division TEXT PRIMARY KEY,
  name TEXT,
  country TEXT
);
Sample rows from `divisions`:
B1, Division 1A, Belgium
D1, Bundesliga, Deutschland
D2, 2. Bundesliga, Deutschland

CREATE TABLE `matchs` (
  Div TEXT REFERENCES divisions(division),
  Date DATE,
  HomeTeam TEXT,
  AwayTeam TEXT,
  FTHG INTEGER,
  FTAG INTEGER,
  FTR TEXT,
  season INTEGER
);
Sample rows from `matchs`:
B1, 2020-08-08, Club Brugge, Charleroi, 0, 1, A, 2021
B1, 2020-08-08, Antwerp, Mouscron, 1, 1, D, 2021
B1, 2020-08-08, Standard, Cercle Brugge, 1, 0, H, 2021

",divisions,"name, country","divisions, matchs"
food_inspection_2,"List down the inspection ID with the inspector's comment ""A certified food service manager must be present in all establishments at which potentially hazardous food is prepared or served. NO CERTIFIED FOOD MANAGER ON DUTY AT THIS TIME FOODS ARE COOKED AND SERVED SERIOUS CITATION ISSUED"" and inspection category of Personnel.",SELECT t2.inspection_id FROM inspection_point as t1 inner JOIN violation as t2 ON t1.point_id = t2.point_id WHERE t1.category = 'Personnel' AND t2.inspector_comment = 'A certified food service manager must be present in all establishments at which potentially hazardous food is prepared or served.FOUND NO CITY OF CHICAGO SANITATION CERTIFICATE POSTED OR VALID DOCUMENTATION DURING THIS INSPECTION.',"CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

","inspection_point, violation","violation.inspection_id, inspection_point.point_id, violation.point_id, inspection_point.category, violation.inspector_comment","employee, establishment, inspection, inspection_point, violation"
olympics,Calculate the percentage of bronze medals won by men's basketball players.,SELECT cast(COUNT(case when t4.medal_name = 'Bronze' then 1 else null end) as real) * 100 / COUNT(t2.person_id) FROM competitor_event as t1 inner JOIN games_competitor as t2 ON t1.competitor_id = t2.id inner JOIN event as t3 ON t1.event_id = t3.id inner JOIN medal as t4 ON t1.medal_id = t4.id WHERE t3.event_name LIKE 'Basketball Men%s Basketball',"CREATE TABLE `competitor_event` (
  event_id INTEGER REFERENCES event(id),
  competitor_id INTEGER REFERENCES games_competitor(id),
  medal_id INTEGER REFERENCES medal(id)
);
Sample rows from `competitor_event`:
1, 1, 4
2, 2, 4
3, 3, 4

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `event` (
  id INTEGER,
  sport_id INTEGER REFERENCES sport(id),
  event_name TEXT
);
Sample rows from `event`:
1, 9, Basketball Men's Basketball
2, 33, Judo Men's Extra-Lightweight
3, 25, Football Men's Football

CREATE TABLE `medal` (
  id INTEGER,
  medal_name TEXT
);
Sample rows from `medal`:
1, Gold
2, Silver
3, Bronze

","CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `medal` (
  id INTEGER,
  medal_name TEXT
);
Sample rows from `medal`:
1, Gold
2, Silver
3, Bronze

CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `sport` (
  id INTEGER,
  sport_name TEXT
);
Sample rows from `sport`:
1, Aeronautics
2, Alpine Skiing
3, Alpinism

CREATE TABLE `event` (
  id INTEGER,
  sport_id INTEGER REFERENCES sport(id),
  event_name TEXT
);
Sample rows from `event`:
1, 9, Basketball Men's Basketball
2, 33, Judo Men's Extra-Lightweight
3, 25, Football Men's Football

CREATE TABLE `competitor_event` (
  event_id INTEGER REFERENCES event(id),
  competitor_id INTEGER REFERENCES games_competitor(id),
  medal_id INTEGER REFERENCES medal(id)
);
Sample rows from `competitor_event`:
1, 1, 4
2, 2, 4
3, 3, 4

","competitor_event, games_competitor, event, medal","medal.medal_name, games_competitor.person_id, competitor_event.competitor_id, games_competitor.id, competitor_event.event_id, event.id, competitor_event.medal_id, medal.id, event.event_name","city, games, games_city, medal, noc_region, person, games_competitor, person_region, sport, event, competitor_event"
authors,"What is the short name for the journal that published the paper ""A Case of Unilateral Ashy Dermatosis""?",SELECT t2.shortname FROM paper as t1 inner JOIN journal as t2 ON t1.journalid = t2.id WHERE t1.title = 'A Case of Unilateral Ashy Dermatosis',"CREATE TABLE `paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

","CREATE TABLE `Author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `Author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

CREATE TABLE `Conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

CREATE TABLE `Journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `Paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `Paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `PaperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `PaperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

","paper, journal","journal.shortname, paper.journalid, journal.id, paper.title","Author, Conference, Journal, Paper, PaperAuthor"
bike_share_1,What is the location coordinates of the bike station from which the bike for the trip that last the longest was borrowed?,"SELECT t2.lat, t2.long FROM trip as t1 inner JOIN station as t2 ON t2.name = t1.start_station_name WHERE t1.duration = ( SELECT MAX(t1.duration) FROM trip as t1 inner JOIN station as t2 ON t2.name = t1.start_station_name )","CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);
Sample rows from `trip`:
4069, 174, 8/29/2013 9:08, 2nd at South Park, 64, 8/29/2013 9:11, 2nd at South Park, 64, 288, Subscriber, 94114
4073, 1067, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:42, San Francisco Caltrain 2 (330 Townsend), 69, 321, Subscriber, 94703
4074, 1131, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:43, San Francisco Caltrain 2 (330 Townsend), 69, 317, Subscriber, 94115

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat REAL,
  long REAL,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);
Sample rows from `station`:
2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013
3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013
4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013

","CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat REAL,
  long REAL,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);
Sample rows from `station`:
2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013
3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013
4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013

CREATE TABLE `status` (
  station_id INTEGER,
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);
Sample rows from `status`:
2, 2, 25, 2013/08/29 12:06:01
2, 2, 25, 2013/08/29 12:07:01
2, 2, 25, 2013/08/29 12:08:01

CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);
Sample rows from `trip`:
4069, 174, 8/29/2013 9:08, 2nd at South Park, 64, 8/29/2013 9:11, 2nd at South Park, 64, 288, Subscriber, 94114
4073, 1067, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:42, San Francisco Caltrain 2 (330 Townsend), 69, 321, Subscriber, 94703
4074, 1131, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:43, San Francisco Caltrain 2 (330 Townsend), 69, 317, Subscriber, 94115

CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches REAL,
  mean_sea_level_pressure_inches REAL,
  min_sea_level_pressure_inches REAL,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches TEXT,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code TEXT
);
Sample rows from `weather`:
8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107
8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30.0, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107
8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30.0, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107

","trip, station","station.lat, station.long, station.name, trip.start_station_name, trip.duration","station, status, trip, weather"
food_inspection_2,How many inspections were sanitarian Joshua Rosa responsible for in 2010?,"SELECT COUNT(t2.inspection_id) FROM employee as t1 inner JOIN inspection as t2 ON t1.employee_id = t2.employee_id WHERE strftime('%Y', t2.inspection_date) = '2010' AND t1.first_name = 'Joshua' AND t1.last_name = 'Rosa'","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

","employee, inspection","inspection.inspection_id, employee.employee_id, inspection.employee_id, inspection.inspection_date, employee.first_name, employee.last_name","employee, establishment, inspection, inspection_point, violation"
language_corpus,How frequently did the words 1 and 25 appear together?,SELECT occurrences FROM biwords WHERE w1st = 1 AND w2nd = 25,"CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

","CREATE TABLE `langs` (
  lid INTEGER,
  lang TEXT PRIMARY KEY,
  locale TEXT PRIMARY KEY,
  pages INTEGER,
  words INTEGER
);
Sample rows from `langs`:
1, ca, ca_ES, 1129144, 2764996

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
langs, 1
pages, 1129144
words, 2764996

CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `langs_words` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `langs_words`:
1, 1, 242
1, 2, 16841
1, 3, 48700

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

",biwords,"occurrences, w1st, w2nd","langs, sqlite_sequence, pages, words, langs_words, pages_words, biwords"
public_review_platform,How many users manage to get uber votes for all of the review category? Find out what are the user average star.,"SELECT COUNT(t2.user_id) as user_ids, t2.user_average_stars FROM reviews as t1 inner JOIN users as t2 ON t1.user_id = t2.user_id WHERE t1.review_votes_funny = 'Uber' AND t1.review_votes_useful = 'Uber' AND t1.review_votes_cool = 'Uber'","CREATE TABLE `reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","reviews, users","users.user_id, users.user_average_stars, reviews.user_id, reviews.review_votes_funny, reviews.review_votes_useful, reviews.review_votes_cool","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
retail_world,Please list any three order numbers that have been shipped using Speedy Express.,SELECT t1.orderid FROM orders as t1 inner JOIN shippers as t2 ON t1.shipvia = t2.shipperid WHERE t2.companyname = 'Speedy Express' LIMIT 3,"CREATE TABLE `orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

","orders, shippers","orders.orderid, orders.shipvia, shippers.shipperid, shippers.companyname","sqlite_sequence, Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails"
food_inspection_2,How many of the restaurants with the lowest risk level failed the complaint inspection type?,SELECT COUNT(DISTINCT t1.license_no) FROM establishment as t1 inner JOIN inspection as t2 ON t1.license_no = t2.license_no WHERE t1.risk_level = '1' AND t2.inspection_type = 'Complaint' AND t1.facility_type = 'Restaurant' AND t2.results = 'Fail',"CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

","establishment, inspection","establishment.license_no, inspection.license_no, establishment.risk_level, inspection.inspection_type, establishment.facility_type, inspection.results","employee, establishment, inspection, inspection_point, violation"
app_store,How many users mildly likes the 7 Minute Workout app and when was it last updated?,"SELECT COUNT(t2.sentiment_polarity), t1.""Last Updated"" FROM playstore as t1 inner JOIN user_reviews as t2 ON t1.app = t2.app WHERE t1.app = '7 Minute Workout' AND t2.sentiment_polarity BETWEEN 0 AND 0.5","CREATE TABLE `playstore` (
  App TEXT,
  Category TEXT,
  Rating REAL,
  Reviews INTEGER,
  Size TEXT,
  Installs TEXT,
  Type TEXT,
  Price TEXT,
  Content Rating TEXT,
  Genres TEXT
);
Sample rows from `playstore`:
Photo Editor & Candy Camera & Grid & ScrapBook, ART_AND_DESIGN, 4.1, 159, 19M, 10,000+, Free, 0, Everyone, Art & Design
Coloring book moana, ART_AND_DESIGN, 3.9, 967, 14M, 500,000+, Free, 0, Everyone, Art & Design;Pretend Play
U Launcher Lite – FREE Live Cool Themes, Hide Apps, ART_AND_DESIGN, 4.7, 87510, 8.7M, 5,000,000+, Free, 0, Everyone, Art & Design

CREATE TABLE `user_reviews` (
  App TEXT REFERENCES playstore(App),
  Translated_Review TEXT,
  Sentiment TEXT,
  Sentiment_Polarity TEXT,
  Sentiment_Subjectivity TEXT
);
Sample rows from `user_reviews`:
10 Best Foods for You, I like eat delicious food. That's I'm cooking food myself, case ""10 Best Foods"" helps lot, also ""Best Before (Shelf Life)"", Positive, 1.0, 0.5333333333333333
10 Best Foods for You, This help eating healthy exercise regular basis, Positive, 0.25, 0.28846153846153844
10 Best Foods for You, nan, nan, nan, nan

","CREATE TABLE `playstore` (
  App TEXT,
  Category TEXT,
  Rating REAL,
  Reviews INTEGER,
  Size TEXT,
  Installs TEXT,
  Type TEXT,
  Price TEXT,
  Content Rating TEXT,
  Genres TEXT
);
Sample rows from `playstore`:
Photo Editor & Candy Camera & Grid & ScrapBook, ART_AND_DESIGN, 4.1, 159, 19M, 10,000+, Free, 0, Everyone, Art & Design
Coloring book moana, ART_AND_DESIGN, 3.9, 967, 14M, 500,000+, Free, 0, Everyone, Art & Design;Pretend Play
U Launcher Lite – FREE Live Cool Themes, Hide Apps, ART_AND_DESIGN, 4.7, 87510, 8.7M, 5,000,000+, Free, 0, Everyone, Art & Design

CREATE TABLE `user_reviews` (
  App TEXT REFERENCES playstore(App),
  Translated_Review TEXT,
  Sentiment TEXT,
  Sentiment_Polarity TEXT,
  Sentiment_Subjectivity TEXT
);
Sample rows from `user_reviews`:
10 Best Foods for You, I like eat delicious food. That's I'm cooking food myself, case ""10 Best Foods"" helps lot, also ""Best Before (Shelf Life)"", Positive, 1.0, 0.5333333333333333
10 Best Foods for You, This help eating healthy exercise regular basis, Positive, 0.25, 0.28846153846153844
10 Best Foods for You, nan, nan, nan, nan

","playstore, user_reviews","user_reviews.sentiment_polarity, playstore.Last Updated, playstore.app, user_reviews.app","playstore, user_reviews"
student_loan,Name all students enlisted in the foreign legion.,SELECT name FROM enlist WHERE organ = 'foreign_legion',"CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

",enlist,"name, organ","bool, person, disabled, enlist, filed_for_bankrupcy, longest_absense_from_school, male, no_payment_due, unemployed, enrolled"
authors,Identify by conference full name all papers in which a journal was not published but a conference.,SELECT t2.fullname FROM paper as t1 inner JOIN conference as t2 ON t1.conferenceid = t2.id WHERE t1.conferenceid != 0 AND t1.Journalid = 0 AND t1.year != 0,"CREATE TABLE `paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

","CREATE TABLE `Author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `Author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

CREATE TABLE `Conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

CREATE TABLE `Journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `Paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `Paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `PaperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `PaperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

","paper, conference","conference.fullname, paper.conferenceid, conference.id, paper.Journalid, paper.year","Author, Conference, Journal, Paper, PaperAuthor"
image_and_language,"Among the objects that have multiple relations, how many images whose captions for the prediction class ids are ""on""?",SELECT COUNT(t2.pred_class_id) FROM img_rel as t1 inner JOIN PRED_CLasSES as t2 ON t1.pred_class_id = t2.pred_class_id WHERE t1.obj1_sample_id != t1.obj2_sample_id AND t2.PRED_CLasS = 'on',"CREATE TABLE `img_rel` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `img_rel`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

CREATE TABLE `PRED_CLasSES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `PRED_CLasSES`:
0, playing on
1, looking a
2, to left of

","CREATE TABLE `ATT_CLASSES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `ATT_CLASSES`:
0, building s
1, indoors
2, cluttered

CREATE TABLE `OBJ_CLASSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLASSES`:
0, awning
1, goggles
2, dot

CREATE TABLE `IMG_OBJ` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `IMG_OBJ`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `IMG_OBJ_ATT` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_OBJ_ATT`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `PRED_CLASSES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `PRED_CLASSES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `IMG_REL` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_REL`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

","img_rel, PRED_CLasSES","PRED_CLasSES.pred_class_id, img_rel.pred_class_id, img_rel.obj1_sample_id, img_rel.obj2_sample_id, PRED_CLasSES.PRED_CLasS","ATT_CLASSES, OBJ_CLASSES, IMG_OBJ, IMG_OBJ_ATT, PRED_CLASSES, IMG_REL"
books,"Among all orders updated in 2022, identify the percentage that has been returned.","SELECT cast(SUM(case when t1.status_value = 'Returned' then 1 else 0 end) as real) * 100 / COUNT(*) FROM order_status as t1 inner JOIN order_history as t2 ON t1.status_id = t2.status_id WHERE strftime('%Y', t2.status_date) = '2022'","CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","order_status, order_history","order_status.status_value, order_status.status_id, order_history.status_id, order_history.status_date","address_status, author, book_language, country, address, customer, customer_address, order_status, publisher, book, book_author, shipping_method, cust_order, sqlite_sequence, order_history, order_line"
movie,"Among the movies with drama genre, what is the percentage of the actors with net worth greater than $400,000,000.00?","SELECT SUM(case when cast(replace(replace(t3.networth, ',', ''), '$', '') as real) > 400000000 then 1 else 0 end) - SUM(case when cast(replace(replace(t3.networth, ',', ''), '$', '') as real) < 400000000 then 1 else 0 end) FROM movie as t1 inner JOIN characters as t2 ON t1.movieid = t2.movieid inner JOIN actor as t3 ON t3.actorid = t2.actorid WHERE t1.genre = 'Drama'","CREATE TABLE `movie` (
  MovieID INTEGER,
  Title TEXT,
  MPAA Rating TEXT,
  Budget INTEGER,
  Gross INTEGER,
  Release Date TEXT,
  Genre TEXT,
  Runtime INTEGER,
  Rating REAL,
  Rating Count INTEGER,
  Summary TEXT
);
Sample rows from `movie`:
1, Look Who's Talking, PG-13, 7500000, 296000000, 1989-10-12, Romance, 93, 5.9, 73638, After a single, career-minded woman is left on her own to give birth to the child of a married man, she finds a new romantic chance in a cab driver. Meanwhile, the point-of-view of the newborn boy is narrated through voice-over.
2, Driving Miss Daisy, PG, 7500000, 145793296, 1989-12-13, Comedy, 99, 7.4, 91075, An old Jewish woman and her African-American chauffeur in the American South have a relationship that grows and improves over the years.
3, Turner & Hooch, PG, 13000000, 71079915, 1989-07-28, Crime, 100, 7.2, 91415, Det. Scott Turner (Tom Hanks) is an uptight, by-the-book police officer. When his friend Amos Reed (John McIntire), the proprietor of a junkyard, is killed, Turner reluctantly inherits the man's dog. Turner adjusts to life with the dog to help solve a murder case.

CREATE TABLE `characters` (
  MovieID INTEGER PRIMARY KEY REFERENCES movie(MovieID),
  ActorID INTEGER PRIMARY KEY REFERENCES actor(ActorID),
  Character Name TEXT,
  creditOrder INTEGER,
  pay TEXT,
  screentime TEXT
);
Sample rows from `characters`:
1, 1, James, 1, None, None
1, 2, Mollie, 2, None, None
1, 3, Rosie, 3, None, None

CREATE TABLE `actor` (
  ActorID INTEGER,
  Name TEXT,
  Date of Birth DATE,
  Birth City TEXT,
  Birth Country TEXT,
  Height (Inches) INTEGER,
  Biography TEXT,
  Gender TEXT,
  Ethnicity TEXT,
  NetWorth TEXT
);
Sample rows from `actor`:
1, John Travolta, 1954-02-18, Englewood, USA, 74, John Joseph Travolta was born in Englewood, New Jersey, one of six children of Helen Travolta (n�e Helen Cecilia Burke) and Salvatore/Samuel J. Travolta. His father was of Italian descent and his mother was of Irish ancestry. His father owned a tire repair shop called Travolta Tires in Hillsdale, NJ. Travolta started acting appearing in a local ..., Male, White, $250,000,000.00
2, Kirstie Alley, 1951-01-12, Wichita, USA, 67, None, Female, White, $40,000,000.00
3, Olympia Dukakis, 1931-06-20, Lowell, USA, 63, Long a vital, respected lady of the classic and contemporary stage this grand lady did not become a household name and sought-after film actress until age 56 when she turned in a glorious, Oscar-winning perf as Cher's sardonic mother in the romantic comedy Moonstruck (1987). Since then movie (and TV) fans have discovered what the East coast ..., Female, White, $6,000,000.00

","CREATE TABLE `actor` (
  ActorID INTEGER,
  Name TEXT,
  Date of Birth DATE,
  Birth City TEXT,
  Birth Country TEXT,
  Height (Inches) INTEGER,
  Biography TEXT,
  Gender TEXT,
  Ethnicity TEXT,
  NetWorth TEXT
);
Sample rows from `actor`:
1, John Travolta, 1954-02-18, Englewood, USA, 74, John Joseph Travolta was born in Englewood, New Jersey, one of six children of Helen Travolta (n�e Helen Cecilia Burke) and Salvatore/Samuel J. Travolta. His father was of Italian descent and his mother was of Irish ancestry. His father owned a tire repair shop called Travolta Tires in Hillsdale, NJ. Travolta started acting appearing in a local ..., Male, White, $250,000,000.00
2, Kirstie Alley, 1951-01-12, Wichita, USA, 67, None, Female, White, $40,000,000.00
3, Olympia Dukakis, 1931-06-20, Lowell, USA, 63, Long a vital, respected lady of the classic and contemporary stage this grand lady did not become a household name and sought-after film actress until age 56 when she turned in a glorious, Oscar-winning perf as Cher's sardonic mother in the romantic comedy Moonstruck (1987). Since then movie (and TV) fans have discovered what the East coast ..., Female, White, $6,000,000.00

CREATE TABLE `movie` (
  MovieID INTEGER,
  Title TEXT,
  MPAA Rating TEXT,
  Budget INTEGER,
  Gross INTEGER,
  Release Date TEXT,
  Genre TEXT,
  Runtime INTEGER,
  Rating REAL,
  Rating Count INTEGER,
  Summary TEXT
);
Sample rows from `movie`:
1, Look Who's Talking, PG-13, 7500000, 296000000, 1989-10-12, Romance, 93, 5.9, 73638, After a single, career-minded woman is left on her own to give birth to the child of a married man, she finds a new romantic chance in a cab driver. Meanwhile, the point-of-view of the newborn boy is narrated through voice-over.
2, Driving Miss Daisy, PG, 7500000, 145793296, 1989-12-13, Comedy, 99, 7.4, 91075, An old Jewish woman and her African-American chauffeur in the American South have a relationship that grows and improves over the years.
3, Turner & Hooch, PG, 13000000, 71079915, 1989-07-28, Crime, 100, 7.2, 91415, Det. Scott Turner (Tom Hanks) is an uptight, by-the-book police officer. When his friend Amos Reed (John McIntire), the proprietor of a junkyard, is killed, Turner reluctantly inherits the man's dog. Turner adjusts to life with the dog to help solve a murder case.

CREATE TABLE `characters` (
  MovieID INTEGER PRIMARY KEY REFERENCES movie(MovieID),
  ActorID INTEGER PRIMARY KEY REFERENCES actor(ActorID),
  Character Name TEXT,
  creditOrder INTEGER,
  pay TEXT,
  screentime TEXT
);
Sample rows from `characters`:
1, 1, James, 1, None, None
1, 2, Mollie, 2, None, None
1, 3, Rosie, 3, None, None

","movie, characters, actor","actor.networth, movie.movieid, characters.movieid, actor.actorid, characters.actorid, movie.genre","actor, movie, characters"
social_media,How many tweets in total were posted by a user in Argentina?,SELECT COUNT(t1.tweetid) FROM twitter as t1 inner JOIN location as t2 ON t2.locationid = t1.locationid WHERE t2.country = 'Argentina' LIMIT 1,"CREATE TABLE `twitter` (
  TweetID TEXT PRIMARY KEY,
  Weekday TEXT,
  Hour INTEGER,
  Day INTEGER,
  Lang TEXT,
  IsReshare TEXT,
  Reach INTEGER,
  RetweetCount INTEGER,
  Likes INTEGER,
  Klout INTEGER,
  Sentiment REAL,
  text TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  UserID TEXT REFERENCES user(UserID)
);
Sample rows from `twitter`:
tw-682712873332805633, Thursday, 17, 31, en, FALSE, 44, 0, 0, 35, 0.0, We are hiring: Senior Software Engineer - Proto http://www.reqcloud.com/jobs/719865/?k=0LaPxXuFwczs1e32ZURJKrgCIDMQtRO7BquFSQthUKY&utm_source=twitter&utm_campaign=reqCloud_JobPost #job @awscloud #job #protocol #networking #aws #mediastreaming, 3751, tw-40932430
tw-682713045357998080, Thursday, 17, 31, en, TRUE, 1810, 5, 0, 53, 2.0, RT @CodeMineStatus: This is true Amazon Web Services https://aws.amazon.com/ #php #html #html5 #css #webdesign #seo #java #javascript htt, 3989, tw-3179389829
tw-682713219375476736, Thursday, 17, 31, en, FALSE, 282, 0, 0, 47, 0.0, Devops Engineer Aws Ansible Cassandra Mysql Ubuntu Ruby On Rails Jobs in Austin TX #Austin #TX #jobs #jobsearch https://www.jobfindly.com/devops-engineer-aws-ansible-cassandra-mysql-ubuntu-ruby-on-rails-jobs-austin-tx.html, 3741, tw-4624808414

CREATE TABLE `location` (
  LocationID INTEGER,
  Country TEXT,
  State TEXT,
  StateCode TEXT,
  City TEXT
);
Sample rows from `location`:
1, Albania, Elbasan, AL, Elbasan
2, Albania, Tirane, AL, Tirana
3, Algeria, Souk Ahras, DZ, Souk Ahras

","CREATE TABLE `location` (
  LocationID INTEGER,
  Country TEXT,
  State TEXT,
  StateCode TEXT,
  City TEXT
);
Sample rows from `location`:
1, Albania, Elbasan, AL, Elbasan
2, Albania, Tirane, AL, Tirana
3, Algeria, Souk Ahras, DZ, Souk Ahras

CREATE TABLE `user` (
  UserID TEXT PRIMARY KEY,
  Gender TEXT
);
Sample rows from `user`:
tw-1267804344, Unknown
tw-27229880, Male
tw-199664730, Male

CREATE TABLE `twitter` (
  TweetID TEXT PRIMARY KEY,
  Weekday TEXT,
  Hour INTEGER,
  Day INTEGER,
  Lang TEXT,
  IsReshare TEXT,
  Reach INTEGER,
  RetweetCount INTEGER,
  Likes INTEGER,
  Klout INTEGER,
  Sentiment REAL,
  text TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  UserID TEXT REFERENCES user(UserID)
);
Sample rows from `twitter`:
tw-682712873332805633, Thursday, 17, 31, en, FALSE, 44, 0, 0, 35, 0.0, We are hiring: Senior Software Engineer - Proto http://www.reqcloud.com/jobs/719865/?k=0LaPxXuFwczs1e32ZURJKrgCIDMQtRO7BquFSQthUKY&utm_source=twitter&utm_campaign=reqCloud_JobPost #job @awscloud #job #protocol #networking #aws #mediastreaming, 3751, tw-40932430
tw-682713045357998080, Thursday, 17, 31, en, TRUE, 1810, 5, 0, 53, 2.0, RT @CodeMineStatus: This is true Amazon Web Services https://aws.amazon.com/ #php #html #html5 #css #webdesign #seo #java #javascript htt, 3989, tw-3179389829
tw-682713219375476736, Thursday, 17, 31, en, FALSE, 282, 0, 0, 47, 0.0, Devops Engineer Aws Ansible Cassandra Mysql Ubuntu Ruby On Rails Jobs in Austin TX #Austin #TX #jobs #jobsearch https://www.jobfindly.com/devops-engineer-aws-ansible-cassandra-mysql-ubuntu-ruby-on-rails-jobs-austin-tx.html, 3741, tw-4624808414

","twitter, location","twitter.tweetid, location.locationid, twitter.locationid, location.country","location, user, twitter"
books,What is the average number of book pages written by Zilpha Keatley Snyder?,SELECT AVG(t3.num_pages) FROM book_author as t1 inner JOIN author as t2 ON t1.author_id = t2.author_id inner JOIN book as t3 ON t3.book_id = t1.book_id WHERE t2.author_name = 'Zilpha Keatley Snyder',"CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","book_author, author, book","book.num_pages, book_author.author_id, author.author_id, book.book_id, book_author.book_id, author.author_name","address_status, author, book_language, country, address, customer, customer_address, order_status, publisher, book, book_author, shipping_method, cust_order, sqlite_sequence, order_history, order_line"
video_games,How many publishers published the Minecraft game?,SELECT COUNT(t2.publisher_id) FROM game as t1 inner JOIN game_publisher as t2 ON t1.id = t2.game_id WHERE t1.game_name = 'Minecraft',"CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

","CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

","game, game_publisher","game_publisher.publisher_id, game.id, game_publisher.game_id, game.game_name","genre, game, platform, publisher, game_publisher, game_platform, region, region_sales"
authors,"Calculate the total average number of papers published from 2002 to 2010 under the conference ""Information and Knowledge Engineering"".",SELECT cast(COUNT(t1.id) as real) / COUNT(DISTINCT t1.year) FROM paper as t1 inner JOIN conference as t2 ON t1.conferenceid = t2.id WHERE t2.fullname = 'Information and Knowledge Engineering' AND t1.year >= 2002 AND t1.year <= 2010,"CREATE TABLE `paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

","CREATE TABLE `Author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `Author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

CREATE TABLE `Conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

CREATE TABLE `Journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `Paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `Paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `PaperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `PaperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

","paper, conference","paper.id, paper.year, paper.conferenceid, conference.id, conference.fullname","Author, Conference, Journal, Paper, PaperAuthor"
retail_complains,What is the detailed product of the complaint filed by Diesel Galloway on 2014/7/3?,SELECT t2.`sub-product` FROM client as t1 inner JOIN events as t2 ON t1.client_id = t2.client_id WHERE t1.first = 'Diesel' AND t1.last = 'Galloway' AND t2.`date received` = '2014-07-03',"CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

","CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

","client, events","events.sub-product, client.client_id, events.client_id, client.first, client.last, events.date received","state, callcenterlogs, client, district, events, reviews"
food_inspection_2,How much salary does Jessica Anthony receive?,SELECT salary FROM employee WHERE first_name = 'Jessica' AND last_name = 'Anthony',"CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

",employee,"salary, first_name, last_name","employee, establishment, inspection, inspection_point, violation"
retail_complains,"List down the email of client whose complaint is type ""PS"".",SELECT t1.email FROM client as t1 inner JOIN callcenterlogs as t2 ON t1.client_id = t2.`rand client` WHERE t2.type = 'PS',"CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

","CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

","client, callcenterlogs","client.email, client.client_id, callcenterlogs.rand client, callcenterlogs.type","state, callcenterlogs, client, district, events, reviews"
law_episode,In which organization did Constantine Makris win the most awards?,SELECT t2.organization FROM person as t1 inner JOIN award as t2 ON t1.person_id = t2.person_id WHERE t1.name = 'Constantine Makris' AND t2.result = 'Winner' GROUP BY t2.organization ORDER BY COUNT(t2.award_id) DESC LIMIT 1,"CREATE TABLE `person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

CREATE TABLE `award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  series TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  person_id TEXT REFERENCES Person(person_id),
  role TEXT,
  result TEXT
);
Sample rows from `award`:
258, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0937725, None, Winner
259, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0792309, None, Winner
260, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0049569, None, Winner

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
tt0629239, nun
tt0629239, priest
tt0629420, police officer

CREATE TABLE `Person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  series TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  person_id TEXT REFERENCES Person(person_id),
  role TEXT,
  result TEXT
);
Sample rows from `Award`:
258, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0937725, None, Winner
259, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0792309, None, Winner
260, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0049569, None, Winner

CREATE TABLE `Credit` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  person_id TEXT PRIMARY KEY REFERENCES Person(person_id),
  category TEXT,
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
tt0629204, nm0226352, Additional Crew, technical advisor, true
tt0629204, nm0506974, Additional Crew, production accountant, true
tt0629204, nm4103116, Additional Crew, production accountant, true

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
tt0629204, 10, 36, 17.7
tt0629204, 9, 39, 19.2
tt0629204, 8, 64, 31.5

","person, award","award.organization, person.person_id, award.person_id, person.name, award.result, award.award_id","Episode, Keyword, Person, Award, Credit, Vote"
human_resources,How much is the minimum salary given to the position with the most complex work?,SELECT minsalary FROM position ORDER BY educationrequired DESC LIMIT 1,"CREATE TABLE `position` (
  positionID INTEGER,
  positiontitle TEXT,
  educationrequired TEXT,
  minsalary TEXT,
  maxsalary TEXT
);
Sample rows from `position`:
1, Account Representative, 4 year degree, US$25,000.00, US$75,000.00
2, Manager, 4 year degree, US$50,000.00, US$150,000.00
3, Trainee, 2 year degree, US$18,000.00, US$25,000.00

","CREATE TABLE `location` (
  locationID INTEGER,
  locationcity TEXT,
  address TEXT,
  state TEXT,
  zipcode INTEGER,
  officephone TEXT
);
Sample rows from `location`:
1, Atlanta, 450 Peachtree Rd, GA, 30316, (404)333-5555
2, Boston, 3 Commons Blvd, MA, 2190, (617)123-4444
3, Chicago, 500 Loop Highway, IL, 60620, (312)444-6666

CREATE TABLE `position` (
  positionID INTEGER,
  positiontitle TEXT,
  educationrequired TEXT,
  minsalary TEXT,
  maxsalary TEXT
);
Sample rows from `position`:
1, Account Representative, 4 year degree, US$25,000.00, US$75,000.00
2, Manager, 4 year degree, US$50,000.00, US$150,000.00
3, Trainee, 2 year degree, US$18,000.00, US$25,000.00

CREATE TABLE `employee` (
  ssn TEXT PRIMARY KEY,
  lastname TEXT,
  firstname TEXT,
  hiredate TEXT,
  salary TEXT,
  gender TEXT,
  performance TEXT,
  positionID INTEGER REFERENCES position(positionID),
  locationID INTEGER REFERENCES location(locationID)
);
Sample rows from `employee`:
000-01-0000, Milgrom, Patricia, 10/1/04, US$57,500.00, F, Average, 2, 2
000-02-2222, Adams, Sandy, 1/15/01, US$19,500.00, F, Average, 3, 1
109-87-6543, Wood, Emily, 3/12/97, US$69,000.00, F, Average, 2, 5

",position,"minsalary, educationrequired","location, position, employee"
shooting,Did the number of cases with Vehicle as subject weapon increase or decrease from year 2007 to 2008. State the difference.,"SELECT SUM(iif(strftime('%Y', date) = '2007', 1, 0)) - SUM(iif(strftime('%Y', date) = '2008', 1, 0)) FROM incidents WHERE subject_weapon = 'Vehicle'","CREATE TABLE `incidents` (
  case_number TEXT PRIMARY KEY,
  date DATE,
  location TEXT,
  subject_statuses TEXT,
  subject_weapon TEXT,
  subjects TEXT,
  subject_count INTEGER,
  officers TEXT
);
Sample rows from `incidents`:
031347-2015, 2015/2/9, 7400 Bonnie View Road, Deceased, Vehicle, Luster, Desmond Dwayne B/M, 1, Tollerton, Aaron W/M
072458-2016, 2016/3/26, 8218 Willoughby Boulevard, Shoot and Miss, Shotgun, Gilstrap, Bryan B/M, 1, Cardenas, Steven L/M
089985-2016, 2016/4/16, 4800 Columbia Ave, Shoot and Miss, Handgun, Unknown L/M, 1, Ruben, Fredirick W/M

","CREATE TABLE `incidents` (
  case_number TEXT PRIMARY KEY,
  date DATE,
  location TEXT,
  subject_statuses TEXT,
  subject_weapon TEXT,
  subjects TEXT,
  subject_count INTEGER,
  officers TEXT
);
Sample rows from `incidents`:
031347-2015, 2015/2/9, 7400 Bonnie View Road, Deceased, Vehicle, Luster, Desmond Dwayne B/M, 1, Tollerton, Aaron W/M
072458-2016, 2016/3/26, 8218 Willoughby Boulevard, Shoot and Miss, Shotgun, Gilstrap, Bryan B/M, 1, Cardenas, Steven L/M
089985-2016, 2016/4/16, 4800 Columbia Ave, Shoot and Miss, Handgun, Unknown L/M, 1, Ruben, Fredirick W/M

CREATE TABLE `officers` (
  case_number TEXT REFERENCES incidents(case_number),
  race TEXT,
  gender TEXT,
  last_name TEXT,
  first_name TEXT,
  full_name TEXT
);
Sample rows from `officers`:
44523A, L, M, Patino, Michael, Patino, Michael
44523A, W, M, Fillingim, Brian, Fillingim, Brian
121982X, L, M, Padilla, Gilbert, Padilla, Gilbert

CREATE TABLE `subjects` (
  case_number TEXT REFERENCES incidents(case_number),
  race TEXT,
  gender TEXT,
  last_name TEXT,
  first_name TEXT,
  full_name TEXT
);
Sample rows from `subjects`:
44523A, L, M, Curry, James, Curry, James
121982X, L, M, Chavez, Gabriel, Chavez, Gabriel
605484T, L, M, Salinas, Nick, Salinas, Nick

",incidents,subject_weapon,"incidents, officers, subjects"
cars,Calculate the percentage of American cars among all cars.,SELECT cast(SUM(case when t3.country = 'USA' then 1 else 0 end) as real) * 100 / COUNT(*) FROM data as t1 inner JOIN production as t2 ON t1.id = t2.id inner JOIN country as t3 ON t3.origin = t2.country,"CREATE TABLE `data` (
  ID INTEGER REFERENCES price(ID),
  mpg REAL,
  cylinders INTEGER,
  displacement REAL,
  horsepower INTEGER,
  weight INTEGER,
  acceleration REAL,
  model INTEGER,
  car_name TEXT
);
Sample rows from `data`:
1, 18.0, 8, 307.0, 130, 3504, 12.0, 70, chevrolet chevelle malibu
2, 15.0, 8, 350.0, 165, 3693, 11.5, 70, buick skylark 320
3, 18.0, 8, 318.0, 150, 3436, 11.0, 70, plymouth satellite

CREATE TABLE `production` (
  ID INTEGER PRIMARY KEY REFERENCES price(ID) REFERENCES data(ID),
  model_year INTEGER PRIMARY KEY,
  country INTEGER REFERENCES country(origin)
);
Sample rows from `production`:
1, 1970, 1
1, 1971, 1
2, 1970, 1

CREATE TABLE `country` (
  origin INTEGER,
  country TEXT
);
Sample rows from `country`:
1, USA
2, Europe
3, Japan

","CREATE TABLE `country` (
  origin INTEGER,
  country TEXT
);
Sample rows from `country`:
1, USA
2, Europe
3, Japan

CREATE TABLE `price` (
  ID INTEGER,
  price REAL
);
Sample rows from `price`:
1, 25561.59078
2, 24221.42273
3, 27240.84373

CREATE TABLE `data` (
  ID INTEGER REFERENCES price(ID),
  mpg REAL,
  cylinders INTEGER,
  displacement REAL,
  horsepower INTEGER,
  weight INTEGER,
  acceleration REAL,
  model INTEGER,
  car_name TEXT
);
Sample rows from `data`:
1, 18.0, 8, 307.0, 130, 3504, 12.0, 70, chevrolet chevelle malibu
2, 15.0, 8, 350.0, 165, 3693, 11.5, 70, buick skylark 320
3, 18.0, 8, 318.0, 150, 3436, 11.0, 70, plymouth satellite

CREATE TABLE `production` (
  ID INTEGER PRIMARY KEY REFERENCES price(ID) REFERENCES data(ID),
  model_year INTEGER PRIMARY KEY,
  country INTEGER REFERENCES country(origin)
);
Sample rows from `production`:
1, 1970, 1
1, 1971, 1
2, 1970, 1

","data, production, country","country.country, data.id, production.id, country.origin, production.country","country, price, data, production"
music_platform_2,Write the names of the podcasts in the music category that have a rating greater than 3.,SELECT DISTINCT t2.title FROM categories as t1 inner JOIN reviews as t2 ON t2.podcast_id = t1.podcast_id WHERE t1.category = 'music' AND t2.rating > 3,"CREATE TABLE `categories` (
  podcast_id TEXT PRIMARY KEY REFERENCES podcasts(None),
  category TEXT PRIMARY KEY
);
Sample rows from `categories`:
c61aa81c9b929a66f0c1db6cbe5d8548, arts
c61aa81c9b929a66f0c1db6cbe5d8548, arts-performing-arts
c61aa81c9b929a66f0c1db6cbe5d8548, music

CREATE TABLE `reviews` (
  podcast_id TEXT REFERENCES podcasts(None),
  title TEXT,
  content TEXT,
  rating INTEGER,
  author_id TEXT,
  created_at TEXT
);
Sample rows from `reviews`:
c61aa81c9b929a66f0c1db6cbe5d8548, really interesting!, Thanks for providing these insights.  Really enjoy the variety and depth -- please keep them coming!, 5, F7E5A318989779D, 2018-04-24T12:05:16-07:00
c61aa81c9b929a66f0c1db6cbe5d8548, Must listen for anyone interested in the arts!!!, Super excited to see this podcast grow. So many fun topics to talk about...Shari is really engaging. Definitely subscribing and would recommend to anyone interested in the arts!!, 5, F6BF5472689BD12, 2018-05-09T18:14:32-07:00
ad4f2bf69c72b8db75978423c25f379e, nauseatingly left, I'm a liberal myself, but its pretty obvious and annoying that they're trying to push their beliefs on the listeners. Get a more politically diverse production staff, we like to see issues from multiple point of views not just yours., 1, 1AB95B8E6E1309E, 2019-06-11T14:53:39-07:00

","CREATE TABLE `runs` (
  run_at TEXT,
  max_rowid INTEGER,
  reviews_added INTEGER
);
Sample rows from `runs`:
2021-05-10 02:53:00, 3266481, 1215223
2021-06-06 21:34:36, 3300773, 13139
2021-07-02 18:04:55, 3329699, 11561

CREATE TABLE `podcasts` (
  podcast_id TEXT PRIMARY KEY,
  itunes_id INTEGER,
  slug TEXT,
  itunes_url TEXT,
  title TEXT
);
Sample rows from `podcasts`:
a00018b54eb342567c94dacfb2a3e504, 1313466221, scaling-global, https://podcasts.apple.com/us/podcast/scaling-global/id1313466221, Scaling Global
a00043d34e734b09246d17dc5d56f63c, 158973461, cornerstone-baptist-church-of-orlando, https://podcasts.apple.com/us/podcast/cornerstone-baptist-church-of-orlando/id158973461, Cornerstone Baptist Church of Orlando
a0004b1ef445af9dc84dad1e7821b1e3, 139076942, mystery-dancing-in-the-dark, https://podcasts.apple.com/us/podcast/mystery-dancing-in-the-dark/id139076942, Mystery: Dancing in the Dark

CREATE TABLE `reviews` (
  podcast_id TEXT REFERENCES podcasts(None),
  title TEXT,
  content TEXT,
  rating INTEGER,
  author_id TEXT,
  created_at TEXT
);
Sample rows from `reviews`:
c61aa81c9b929a66f0c1db6cbe5d8548, really interesting!, Thanks for providing these insights.  Really enjoy the variety and depth -- please keep them coming!, 5, F7E5A318989779D, 2018-04-24T12:05:16-07:00
c61aa81c9b929a66f0c1db6cbe5d8548, Must listen for anyone interested in the arts!!!, Super excited to see this podcast grow. So many fun topics to talk about...Shari is really engaging. Definitely subscribing and would recommend to anyone interested in the arts!!, 5, F6BF5472689BD12, 2018-05-09T18:14:32-07:00
ad4f2bf69c72b8db75978423c25f379e, nauseatingly left, I'm a liberal myself, but its pretty obvious and annoying that they're trying to push their beliefs on the listeners. Get a more politically diverse production staff, we like to see issues from multiple point of views not just yours., 1, 1AB95B8E6E1309E, 2019-06-11T14:53:39-07:00

CREATE TABLE `categories` (
  podcast_id TEXT PRIMARY KEY REFERENCES podcasts(None),
  category TEXT PRIMARY KEY
);
Sample rows from `categories`:
c61aa81c9b929a66f0c1db6cbe5d8548, arts
c61aa81c9b929a66f0c1db6cbe5d8548, arts-performing-arts
c61aa81c9b929a66f0c1db6cbe5d8548, music

","categories, reviews","reviews.title, reviews.podcast_id, categories.podcast_id, categories.category, reviews.rating","runs, podcasts, reviews, categories"
ice_hockey_draft,Identify the name and position of the player who has committed the most rule violations.,"SELECT t2.playername, t2.position_info FROM seasonstatus as t1 inner JOIN playerinfo as t2 ON t1.eliteid = t2.eliteid WHERE t1.pim = ( SELECT MAX(pim) FROM seasonstatus )","CREATE TABLE `seasonstatus` (
  ELITEID INTEGER REFERENCES PlayerInfo(ELITEID),
  SEASON TEXT,
  TEAM TEXT,
  LEAGUE TEXT,
  GAMETYPE TEXT,
  GP INTEGER,
  G INTEGER,
  A INTEGER,
  P INTEGER,
  PIM INTEGER,
  PLUSMINUS INTEGER
);
Sample rows from `seasonstatus`:
3667, 1997-1998, Rimouski Oceanic, QMJHL, Regular Season, 58, 44, 71, 115, 117, 27
3667, 1997-1998, Rimouski Oceanic, QMJHL, Playoffs, 18, 15, 26, 41, 46, 4
3667, 1997-1998, Canada U20, WJC-20, Regular Season, 7, 1, 1, 2, 4, 0

CREATE TABLE `playerinfo` (
  ELITEID INTEGER,
  PlayerName TEXT,
  birthdate TEXT,
  birthyear DATE,
  birthmonth INTEGER,
  birthday INTEGER,
  birthplace TEXT,
  nation TEXT,
  height INTEGER REFERENCES height_info(height_id),
  weight INTEGER REFERENCES weight_info(weight_id),
  position_info TEXT,
  shoots TEXT,
  draftyear INTEGER,
  draftround INTEGER,
  overall INTEGER,
  overallby TEXT,
  CSS_rank INTEGER,
  sum_7yr_GP INTEGER,
  sum_7yr_TOI INTEGER,
  GP_greater_than_0 TEXT
);
Sample rows from `playerinfo`:
9, David Bornhammar, 1981-06-15, 1981, 6, 15, Lidingo, SWE, Sweden, 73, 198, D, L, 1999, 7, 192, Washington Capitals, 192, 0, 0, no
18, David Printz, 1980-07-24, 1980, 7, 24, Stockholm, SWE, Sweden, 76, 220, D, L, 2001, 7, 225, Philadelphia Flyers, 176, 13, 84, yes
27, Yared Hagos, 1983-03-27, 1983, 3, 27, Stockholm, SWE, Sweden, 73, 218, C, L, 2001, 3, 70, Dallas Stars, 24, 0, 0, no

","CREATE TABLE `height_info` (
  height_id INTEGER,
  height_in_cm INTEGER,
  height_in_inch TEXT
);
Sample rows from `height_info`:
65, 165, 5'5""
67, 170, 5'7""
68, 172, 5'8""

CREATE TABLE `weight_info` (
  weight_id INTEGER,
  weight_in_kg INTEGER,
  weight_in_lbs INTEGER
);
Sample rows from `weight_info`:
154, 70, 154
159, 72, 159
161, 73, 161

CREATE TABLE `PlayerInfo` (
  ELITEID INTEGER,
  PlayerName TEXT,
  birthdate TEXT,
  birthyear DATE,
  birthmonth INTEGER,
  birthday INTEGER,
  birthplace TEXT,
  nation TEXT,
  height INTEGER REFERENCES height_info(height_id),
  weight INTEGER REFERENCES weight_info(weight_id),
  position_info TEXT,
  shoots TEXT,
  draftyear INTEGER,
  draftround INTEGER,
  overall INTEGER,
  overallby TEXT,
  CSS_rank INTEGER,
  sum_7yr_GP INTEGER,
  sum_7yr_TOI INTEGER,
  GP_greater_than_0 TEXT
);
Sample rows from `PlayerInfo`:
9, David Bornhammar, 1981-06-15, 1981, 6, 15, Lidingo, SWE, Sweden, 73, 198, D, L, 1999, 7, 192, Washington Capitals, 192, 0, 0, no
18, David Printz, 1980-07-24, 1980, 7, 24, Stockholm, SWE, Sweden, 76, 220, D, L, 2001, 7, 225, Philadelphia Flyers, 176, 13, 84, yes
27, Yared Hagos, 1983-03-27, 1983, 3, 27, Stockholm, SWE, Sweden, 73, 218, C, L, 2001, 3, 70, Dallas Stars, 24, 0, 0, no

CREATE TABLE `SeasonStatus` (
  ELITEID INTEGER REFERENCES PlayerInfo(ELITEID),
  SEASON TEXT,
  TEAM TEXT,
  LEAGUE TEXT,
  GAMETYPE TEXT,
  GP INTEGER,
  G INTEGER,
  A INTEGER,
  P INTEGER,
  PIM INTEGER,
  PLUSMINUS INTEGER
);
Sample rows from `SeasonStatus`:
3667, 1997-1998, Rimouski Oceanic, QMJHL, Regular Season, 58, 44, 71, 115, 117, 27
3667, 1997-1998, Rimouski Oceanic, QMJHL, Playoffs, 18, 15, 26, 41, 46, 4
3667, 1997-1998, Canada U20, WJC-20, Regular Season, 7, 1, 1, 2, 4, 0

","seasonstatus, playerinfo","playerinfo.playername, playerinfo.position_info, seasonstatus.eliteid, playerinfo.eliteid, seasonstatus.pim, pim","height_info, weight_info, PlayerInfo, SeasonStatus"
movie,What is the name of male and white actor with actor ID 439?,SELECT name FROM actor WHERE actorid = 439 AND gender = 'Male' AND ethnicity = 'White',"CREATE TABLE `actor` (
  ActorID INTEGER,
  Name TEXT,
  Date of Birth DATE,
  Birth City TEXT,
  Birth Country TEXT,
  Height (Inches) INTEGER,
  Biography TEXT,
  Gender TEXT,
  Ethnicity TEXT,
  NetWorth TEXT
);
Sample rows from `actor`:
1, John Travolta, 1954-02-18, Englewood, USA, 74, John Joseph Travolta was born in Englewood, New Jersey, one of six children of Helen Travolta (n�e Helen Cecilia Burke) and Salvatore/Samuel J. Travolta. His father was of Italian descent and his mother was of Irish ancestry. His father owned a tire repair shop called Travolta Tires in Hillsdale, NJ. Travolta started acting appearing in a local ..., Male, White, $250,000,000.00
2, Kirstie Alley, 1951-01-12, Wichita, USA, 67, None, Female, White, $40,000,000.00
3, Olympia Dukakis, 1931-06-20, Lowell, USA, 63, Long a vital, respected lady of the classic and contemporary stage this grand lady did not become a household name and sought-after film actress until age 56 when she turned in a glorious, Oscar-winning perf as Cher's sardonic mother in the romantic comedy Moonstruck (1987). Since then movie (and TV) fans have discovered what the East coast ..., Female, White, $6,000,000.00

","CREATE TABLE `actor` (
  ActorID INTEGER,
  Name TEXT,
  Date of Birth DATE,
  Birth City TEXT,
  Birth Country TEXT,
  Height (Inches) INTEGER,
  Biography TEXT,
  Gender TEXT,
  Ethnicity TEXT,
  NetWorth TEXT
);
Sample rows from `actor`:
1, John Travolta, 1954-02-18, Englewood, USA, 74, John Joseph Travolta was born in Englewood, New Jersey, one of six children of Helen Travolta (n�e Helen Cecilia Burke) and Salvatore/Samuel J. Travolta. His father was of Italian descent and his mother was of Irish ancestry. His father owned a tire repair shop called Travolta Tires in Hillsdale, NJ. Travolta started acting appearing in a local ..., Male, White, $250,000,000.00
2, Kirstie Alley, 1951-01-12, Wichita, USA, 67, None, Female, White, $40,000,000.00
3, Olympia Dukakis, 1931-06-20, Lowell, USA, 63, Long a vital, respected lady of the classic and contemporary stage this grand lady did not become a household name and sought-after film actress until age 56 when she turned in a glorious, Oscar-winning perf as Cher's sardonic mother in the romantic comedy Moonstruck (1987). Since then movie (and TV) fans have discovered what the East coast ..., Female, White, $6,000,000.00

CREATE TABLE `movie` (
  MovieID INTEGER,
  Title TEXT,
  MPAA Rating TEXT,
  Budget INTEGER,
  Gross INTEGER,
  Release Date TEXT,
  Genre TEXT,
  Runtime INTEGER,
  Rating REAL,
  Rating Count INTEGER,
  Summary TEXT
);
Sample rows from `movie`:
1, Look Who's Talking, PG-13, 7500000, 296000000, 1989-10-12, Romance, 93, 5.9, 73638, After a single, career-minded woman is left on her own to give birth to the child of a married man, she finds a new romantic chance in a cab driver. Meanwhile, the point-of-view of the newborn boy is narrated through voice-over.
2, Driving Miss Daisy, PG, 7500000, 145793296, 1989-12-13, Comedy, 99, 7.4, 91075, An old Jewish woman and her African-American chauffeur in the American South have a relationship that grows and improves over the years.
3, Turner & Hooch, PG, 13000000, 71079915, 1989-07-28, Crime, 100, 7.2, 91415, Det. Scott Turner (Tom Hanks) is an uptight, by-the-book police officer. When his friend Amos Reed (John McIntire), the proprietor of a junkyard, is killed, Turner reluctantly inherits the man's dog. Turner adjusts to life with the dog to help solve a murder case.

CREATE TABLE `characters` (
  MovieID INTEGER PRIMARY KEY REFERENCES movie(MovieID),
  ActorID INTEGER PRIMARY KEY REFERENCES actor(ActorID),
  Character Name TEXT,
  creditOrder INTEGER,
  pay TEXT,
  screentime TEXT
);
Sample rows from `characters`:
1, 1, James, 1, None, None
1, 2, Mollie, 2, None, None
1, 3, Rosie, 3, None, None

",actor,"name, actorid, gender, ethnicity","actor, movie, characters"
food_inspection_2,Provide the categories and fines for the inspections done by Lisa Tillman in January 2014.,"SELECT DISTINCT t4.category, t3.fine FROM inspection as t1 inner JOIN employee as t2 ON t1.employee_id = t2.employee_id inner JOIN violation as t3 ON t1.inspection_id = t3.inspection_id inner JOIN inspection_point as t4 ON t3.point_id = t4.point_id WHERE t2.first_name = 'Lisa' AND t2.last_name = 'Tillman' AND strftime('%Y-%m', t1.inspection_date) = '2014-01'","CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

","inspection, employee, violation, inspection_point","inspection_point.category, violation.fine, inspection.employee_id, employee.employee_id, inspection.inspection_id, violation.inspection_id, violation.point_id, inspection_point.point_id, employee.first_name, employee.last_name, inspection.inspection_date","employee, establishment, inspection, inspection_point, violation"
airline,What is the total number of flights that have Oklahoma as their origin?,SELECT COUNT(*) as num FROM airlines WHERE origin = 'OKC',"CREATE TABLE `airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

","CREATE TABLE `Air Carriers` (
  Code INTEGER,
  Description TEXT
);
Sample rows from `Air Carriers`:
19031, Mackey International Inc.: MAC
19032, Munz Northern Airlines Inc.: XY
19033, Cochise Airlines Inc.: COC

CREATE TABLE `Airports` (
  Code TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `Airports`:
01A, Afognak Lake, AK: Afognak Lake Airport
03A, Granite Mountain, AK: Bear Creek Mining Strip
04A, Lik, AK: Lik Mining Camp

CREATE TABLE `Airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `Airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

",airlines,origin,"Air Carriers, Airports, Airlines"
law_episode,What is the average star rating of the episodes Jim Bracchitta has worked on?,SELECT cast(SUM(t3.stars) as real) / COUNT(t2.episode_id) FROM person as t1 inner JOIN credit as t2 ON t1.person_id = t2.person_id inner JOIN vote as t3 ON t2.episode_id = t3.episode_id WHERE t3.stars = 1 AND t1.name = 'Jim Bracchitta',"CREATE TABLE `person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

CREATE TABLE `credit` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  person_id TEXT PRIMARY KEY REFERENCES Person(person_id),
  category TEXT,
  role TEXT,
  credited TEXT
);
Sample rows from `credit`:
tt0629204, nm0226352, Additional Crew, technical advisor, true
tt0629204, nm0506974, Additional Crew, production accountant, true
tt0629204, nm4103116, Additional Crew, production accountant, true

CREATE TABLE `vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `vote`:
tt0629204, 10, 36, 17.7
tt0629204, 9, 39, 19.2
tt0629204, 8, 64, 31.5

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
tt0629239, nun
tt0629239, priest
tt0629420, police officer

CREATE TABLE `Person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  series TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  person_id TEXT REFERENCES Person(person_id),
  role TEXT,
  result TEXT
);
Sample rows from `Award`:
258, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0937725, None, Winner
259, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0792309, None, Winner
260, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0049569, None, Winner

CREATE TABLE `Credit` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  person_id TEXT PRIMARY KEY REFERENCES Person(person_id),
  category TEXT,
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
tt0629204, nm0226352, Additional Crew, technical advisor, true
tt0629204, nm0506974, Additional Crew, production accountant, true
tt0629204, nm4103116, Additional Crew, production accountant, true

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
tt0629204, 10, 36, 17.7
tt0629204, 9, 39, 19.2
tt0629204, 8, 64, 31.5

","person, credit, vote","vote.stars, credit.episode_id, person.person_id, credit.person_id, vote.episode_id, person.name","Episode, Keyword, Person, Award, Credit, Vote"
university,Please list the names of all the ranking criteria of Harvard University in 2011.,SELECT t1.criteria_name FROM ranking_criteria as t1 inner JOIN university_ranking_year as t2 ON t1.id = t2.ranking_criteria_id inner JOIN university as t3 ON t3.id = t2.university_id WHERE t3.university_name = 'Harvard University' AND t2.year = 2011,"CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

","CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

CREATE TABLE `ranking_system` (
  id INTEGER,
  system_name TEXT
);
Sample rows from `ranking_system`:
1, Times Higher Education World University Ranking
2, Shanghai Ranking
3, Center for World University Rankings

CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

","ranking_criteria, university_ranking_year, university","ranking_criteria.criteria_name, ranking_criteria.id, university_ranking_year.ranking_criteria_id, university.id, university_ranking_year.university_id, university.university_name, university_ranking_year.year","country, ranking_system, ranking_criteria, university, university_ranking_year, university_year"
public_review_platform,How many businesses are opened for 24 hours?,SELECT COUNT(t2.business_id) FROM attributes as t1 inner JOIN Business_attributes as t2 ON t1.attribute_id = t2.attribute_id WHERE t2.attribute_value LIKE 'TRUE' AND t1.attribute_name LIKE 'Open 24 Hours',"CREATE TABLE `attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Business_attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_attributes`:
1, 2, none
1, 3, none
1, 13, none

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","attributes, Business_attributes","Business_attributes.business_id, attributes.attribute_id, Business_attributes.attribute_id, Business_attributes.attribute_value, attributes.attribute_name","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
european_football_1,Which away team in the division of Bundesliga has the highest final time goals?,SELECT t1.awayteam FROM matchs as t1 inner JOIN divisions as t2 ON t1.div=t2.division WHERE t2.name = 'Bundesliga' ORDER BY t1.ftag DESC LIMIT 1,"CREATE TABLE `matchs` (
  Div TEXT REFERENCES divisions(division),
  Date DATE,
  HomeTeam TEXT,
  AwayTeam TEXT,
  FTHG INTEGER,
  FTAG INTEGER,
  FTR TEXT,
  season INTEGER
);
Sample rows from `matchs`:
B1, 2020-08-08, Club Brugge, Charleroi, 0, 1, A, 2021
B1, 2020-08-08, Antwerp, Mouscron, 1, 1, D, 2021
B1, 2020-08-08, Standard, Cercle Brugge, 1, 0, H, 2021

CREATE TABLE `divisions` (
  division TEXT PRIMARY KEY,
  name TEXT,
  country TEXT
);
Sample rows from `divisions`:
B1, Division 1A, Belgium
D1, Bundesliga, Deutschland
D2, 2. Bundesliga, Deutschland

","CREATE TABLE `divisions` (
  division TEXT PRIMARY KEY,
  name TEXT,
  country TEXT
);
Sample rows from `divisions`:
B1, Division 1A, Belgium
D1, Bundesliga, Deutschland
D2, 2. Bundesliga, Deutschland

CREATE TABLE `matchs` (
  Div TEXT REFERENCES divisions(division),
  Date DATE,
  HomeTeam TEXT,
  AwayTeam TEXT,
  FTHG INTEGER,
  FTAG INTEGER,
  FTR TEXT,
  season INTEGER
);
Sample rows from `matchs`:
B1, 2020-08-08, Club Brugge, Charleroi, 0, 1, A, 2021
B1, 2020-08-08, Antwerp, Mouscron, 1, 1, D, 2021
B1, 2020-08-08, Standard, Cercle Brugge, 1, 0, H, 2021

","matchs, divisions","matchs.awayteam, matchs.div, divisions.division, divisions.name, matchs.ftag","divisions, matchs"
public_review_platform,What is the total number of active businesses in AZ with a low review count?,SELECT COUNT(business_id) FROM business WHERE state LIKE 'AZ' AND active LIKE 'True' AND review_count LIKE 'low',"CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

",business,"business_id, state, active, review_count","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
simpson_episodes,Give the title of the episode won in Primetime Emmy Awards 2009.,SELECT t2.title FROM award as t1 inner JOIN episode as t2 ON t1.episode_id = t2.episode_id WHERE t1.organization = 'Primetime Emmy awards' AND t1.year = 2009 AND t1.result = 'Winner';,"CREATE TABLE `award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","award, episode","episode.title, award.episode_id, episode.episode_id, award.organization, award.year, award.result","Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
public_review_platform,"Among the users whose fan is medium, how many users received high compliments from other users.",SELECT COUNT(t1.user_id) FROM users as t1 inner JOIN users_Compliments as t2 ON t1.user_id = t2.user_id WHERE t2.number_of_compliments = 'High' AND t1.user_fans = 'Medium',"CREATE TABLE `users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

CREATE TABLE `users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","users, users_Compliments","users.user_id, users_Compliments.user_id, users_Compliments.number_of_compliments, users.user_fans","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
menu,Give me the name and menu price of dishes that were free.,"SELECT t2.name, t1.price FROM menuitem as t1 inner JOIN dish as t2 ON t2.id = t1.dish_id WHERE t2.lowest_price = 0","CREATE TABLE `menuitem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `menuitem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

CREATE TABLE `dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

","CREATE TABLE `Dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `Dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

CREATE TABLE `Menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `Menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

CREATE TABLE `MenuPage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `MenuPage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

CREATE TABLE `MenuItem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `MenuItem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

","menuitem, dish","dish.name, menuitem.price, dish.id, menuitem.dish_id, dish.lowest_price","Dish, Menu, MenuPage, MenuItem"
airline,How many cancelled flights are there?,SELECT COUNT(*) FROM airlines WHERE cancelled = 1,"CREATE TABLE `airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

","CREATE TABLE `Air Carriers` (
  Code INTEGER,
  Description TEXT
);
Sample rows from `Air Carriers`:
19031, Mackey International Inc.: MAC
19032, Munz Northern Airlines Inc.: XY
19033, Cochise Airlines Inc.: COC

CREATE TABLE `Airports` (
  Code TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `Airports`:
01A, Afognak Lake, AK: Afognak Lake Airport
03A, Granite Mountain, AK: Bear Creek Mining Strip
04A, Lik, AK: Lik Mining Camp

CREATE TABLE `Airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `Airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

",airlines,cancelled,"Air Carriers, Airports, Airlines"
image_and_language,How many object classes are there in the database?,SELECT COUNT(obj_class_id) FROM obj_classes,"CREATE TABLE `obj_classes` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `obj_classes`:
0, awning
1, goggles
2, dot

","CREATE TABLE `ATT_CLASSES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `ATT_CLASSES`:
0, building s
1, indoors
2, cluttered

CREATE TABLE `OBJ_CLASSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLASSES`:
0, awning
1, goggles
2, dot

CREATE TABLE `IMG_OBJ` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `IMG_OBJ`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `IMG_OBJ_ATT` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_OBJ_ATT`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `PRED_CLASSES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `PRED_CLASSES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `IMG_REL` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_REL`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

",obj_classes,obj_class_id,"ATT_CLASSES, OBJ_CLASSES, IMG_OBJ, IMG_OBJ_ATT, PRED_CLASSES, IMG_REL"
simpson_episodes,Please list the titles of the episodes that have over 200 voters voting a 10 in star score.,SELECT t1.title FROM episode as t1 inner JOIN vote as t2 ON t2.episode_id = t1.episode_id WHERE t2.votes > 200 AND t2.stars = 10;,"CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","episode, vote","episode.title, vote.episode_id, episode.episode_id, vote.votes, vote.stars","Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
menu,Write down the top ten menus with the highest dish count.,SELECT name FROM menu GROUP BY name ORDER BY dish_count DESC LIMIT 10,"CREATE TABLE `menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

","CREATE TABLE `Dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `Dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

CREATE TABLE `Menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `Menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

CREATE TABLE `MenuPage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `MenuPage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

CREATE TABLE `MenuItem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `MenuItem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

",menu,"name, dish_count","Dish, Menu, MenuPage, MenuItem"
olympics,How many athletes over the age of 59 competed in the 2016 Summer Olympics?,SELECT COUNT(t2.person_id) FROM games as t1 inner JOIN games_competitor as t2 ON t1.id = t2.games_id WHERE t1.games_name = '2016 Summer' AND t2.age > 59,"CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

","CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `medal` (
  id INTEGER,
  medal_name TEXT
);
Sample rows from `medal`:
1, Gold
2, Silver
3, Bronze

CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `sport` (
  id INTEGER,
  sport_name TEXT
);
Sample rows from `sport`:
1, Aeronautics
2, Alpine Skiing
3, Alpinism

CREATE TABLE `event` (
  id INTEGER,
  sport_id INTEGER REFERENCES sport(id),
  event_name TEXT
);
Sample rows from `event`:
1, 9, Basketball Men's Basketball
2, 33, Judo Men's Extra-Lightweight
3, 25, Football Men's Football

CREATE TABLE `competitor_event` (
  event_id INTEGER REFERENCES event(id),
  competitor_id INTEGER REFERENCES games_competitor(id),
  medal_id INTEGER REFERENCES medal(id)
);
Sample rows from `competitor_event`:
1, 1, 4
2, 2, 4
3, 3, 4

","games, games_competitor","games_competitor.person_id, games.id, games_competitor.games_id, games.games_name, games_competitor.age","city, games, games_city, medal, noc_region, person, games_competitor, person_region, sport, event, competitor_event"
coinmarketcap,What was the average price of a Bitcoin in the year 2013?,"SELECT AVG(t2.price) FROM coins as t1 inner JOIN historical as t2 ON t1.id = t2.coin_id WHERE strftime('%Y', t2.date) = '2013' AND t1.name = 'Bitcoin'","CREATE TABLE `coins` (
  id INTEGER,
  name TEXT,
  slug TEXT,
  symbol TEXT,
  status TEXT,
  category TEXT,
  description TEXT,
  subreddit TEXT,
  notice TEXT,
  tags TEXT,
  tag_names TEXT,
  website TEXT,
  platform_id INTEGER,
  date_added TEXT,
  date_launched TEXT
);
Sample rows from `coins`:
1, Bitcoin, bitcoin, BTC, active, coin, ## **What Is Bitcoin (BTC)?**\n\nBitcoin is a decentralized cryptocurrency originally described in a 2008 [whitepaper](https://coinmarketcap.com/alexandria/glossary/whitepaper) by a person, or group of people, using the alias [Satoshi Nakamoto](https://co, bitcoin, None, mineable, pow, sha-256, store-of-value, state-channels, coinbase-ventures-portfolio, three-arrows-capital-portfolio, polychain-capital-portfolio, binance-labs-portfolio, arrington-xrp-capital, blockchain-capital-portfolio, boostvc-portfolio, cms-holdings-, Mineable, PoW, SHA-256, Store of Value, State channels, Coinbase Ventures Portfolio, Three Arrows Capital Portfolio, Polychain Capital Portfolio, Binance Labs Portfolio, Arrington XRP capital, Blockchain Capital Portfolio, BoostVC Portfolio, CMS Holdings , https://bitcoin.org/, None, 2013-04-28T00:00:00.000Z, None
2, Litecoin, litecoin, LTC, active, coin, ## What Is Litecoin (LTC)?\n\nLitecoin (LTC) is a cryptocurrency that was designed to provide fast, secure and low-cost payments by leveraging the unique properties of [blockchain](https://coinmarketcap.com/alexandria/glossary/blockchain) technology. \n\n, litecoin, None, mineable, pow, scrypt, medium-of-exchange, binance-chain, Mineable, PoW, Scrypt, Medium of Exchange, Binance Chain, https://litecoin.org/, None, 2013-04-28T00:00:00.000Z, None
3, Namecoin, namecoin, NMC, active, coin, Namecoin (NMC) is a cryptocurrency . Users are able to generate NMC through the process of mining. Namecoin has a current supply of 14,736,400. The last known price of Namecoin is 2.14833562 USD and is up 0.40 over the last 24 hours. It is currently tradi, namecoin, None, mineable, pow, sha-256, platform, Mineable, PoW, SHA-256, Platform, https://www.namecoin.org/, None, 2013-04-28T00:00:00.000Z, None

CREATE TABLE `historical` (
  date DATE,
  coin_id INTEGER,
  cmc_rank INTEGER,
  market_cap REAL,
  price REAL,
  open REAL,
  high REAL,
  low REAL,
  close REAL,
  time_high TEXT,
  time_low TEXT,
  volume_24h REAL,
  percent_change_1h REAL,
  percent_change_24h REAL,
  percent_change_7d REAL,
  circulating_supply REAL,
  total_supply REAL,
  max_supply REAL,
  num_market_pairs INTEGER
);
Sample rows from `historical`:
2013-04-28, 1, 1, 1488566971.9558687, 134.210021972656, None, None, None, None, None, None, 0.0, 0.639231, None, None, 11091325.0, 11091325.0, 21000000.0, None
2013-04-28, 2, 2, 74637021.56790735, 4.34840488433838, None, None, None, None, None, None, 0.0, 0.799273, None, None, 17164230.0, 17164230.0, 84000000.0, None
2013-04-28, 5, 3, 7250186.647688276, 0.386524856090546, None, None, None, None, None, None, 0.0, -0.934763, None, None, 18757362.0, 18757362.0, None, None

","CREATE TABLE `coins` (
  id INTEGER,
  name TEXT,
  slug TEXT,
  symbol TEXT,
  status TEXT,
  category TEXT,
  description TEXT,
  subreddit TEXT,
  notice TEXT,
  tags TEXT,
  tag_names TEXT,
  website TEXT,
  platform_id INTEGER,
  date_added TEXT,
  date_launched TEXT
);
Sample rows from `coins`:
1, Bitcoin, bitcoin, BTC, active, coin, ## **What Is Bitcoin (BTC)?**\n\nBitcoin is a decentralized cryptocurrency originally described in a 2008 [whitepaper](https://coinmarketcap.com/alexandria/glossary/whitepaper) by a person, or group of people, using the alias [Satoshi Nakamoto](https://co, bitcoin, None, mineable, pow, sha-256, store-of-value, state-channels, coinbase-ventures-portfolio, three-arrows-capital-portfolio, polychain-capital-portfolio, binance-labs-portfolio, arrington-xrp-capital, blockchain-capital-portfolio, boostvc-portfolio, cms-holdings-, Mineable, PoW, SHA-256, Store of Value, State channels, Coinbase Ventures Portfolio, Three Arrows Capital Portfolio, Polychain Capital Portfolio, Binance Labs Portfolio, Arrington XRP capital, Blockchain Capital Portfolio, BoostVC Portfolio, CMS Holdings , https://bitcoin.org/, None, 2013-04-28T00:00:00.000Z, None
2, Litecoin, litecoin, LTC, active, coin, ## What Is Litecoin (LTC)?\n\nLitecoin (LTC) is a cryptocurrency that was designed to provide fast, secure and low-cost payments by leveraging the unique properties of [blockchain](https://coinmarketcap.com/alexandria/glossary/blockchain) technology. \n\n, litecoin, None, mineable, pow, scrypt, medium-of-exchange, binance-chain, Mineable, PoW, Scrypt, Medium of Exchange, Binance Chain, https://litecoin.org/, None, 2013-04-28T00:00:00.000Z, None
3, Namecoin, namecoin, NMC, active, coin, Namecoin (NMC) is a cryptocurrency . Users are able to generate NMC through the process of mining. Namecoin has a current supply of 14,736,400. The last known price of Namecoin is 2.14833562 USD and is up 0.40 over the last 24 hours. It is currently tradi, namecoin, None, mineable, pow, sha-256, platform, Mineable, PoW, SHA-256, Platform, https://www.namecoin.org/, None, 2013-04-28T00:00:00.000Z, None

CREATE TABLE `historical` (
  date DATE,
  coin_id INTEGER,
  cmc_rank INTEGER,
  market_cap REAL,
  price REAL,
  open REAL,
  high REAL,
  low REAL,
  close REAL,
  time_high TEXT,
  time_low TEXT,
  volume_24h REAL,
  percent_change_1h REAL,
  percent_change_24h REAL,
  percent_change_7d REAL,
  circulating_supply REAL,
  total_supply REAL,
  max_supply REAL,
  num_market_pairs INTEGER
);
Sample rows from `historical`:
2013-04-28, 1, 1, 1488566971.9558687, 134.210021972656, None, None, None, None, None, None, 0.0, 0.639231, None, None, 11091325.0, 11091325.0, 21000000.0, None
2013-04-28, 2, 2, 74637021.56790735, 4.34840488433838, None, None, None, None, None, None, 0.0, 0.799273, None, None, 17164230.0, 17164230.0, 84000000.0, None
2013-04-28, 5, 3, 7250186.647688276, 0.386524856090546, None, None, None, None, None, None, 0.0, -0.934763, None, None, 18757362.0, 18757362.0, None, None

","coins, historical","historical.price, coins.id, historical.coin_id, historical.date, coins.name","coins, historical"
simpson_episodes,"How many people were considered as prospective recipients of the ""Animation"" award?",SELECT COUNT(*) FROM award WHERE award = 'Animation' AND result = 'Nominee';,"CREATE TABLE `award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

",award,award,"Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
simpson_episodes,"The person named Al Jean achieved the Primetime Emmy Award category in 2009, which episode did AI Jean achieve?","SELECT t2.episode_id FROM award as t1 inner JOIN episode as t2 ON t1.episode_id = t2.episode_id WHERE substr(t1.year, 1, 4) = '2009' AND t1.person = 'Al Jean' AND t1.award_category = 'Primetime Emmy';","CREATE TABLE `award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","award, episode","episode.episode_id, award.episode_id, award.year, award.person, award.award_category","Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
authors,Indicate the name of all the journals published in the paper database in the year 2001.,SELECT t2.fullname FROM paper as t1 inner JOIN journal as t2 ON t1.journalid = t2.id WHERE t1.year = 2001 AND t1.Conferenceid > 0 AND t1.journalid > 0,"CREATE TABLE `paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

","CREATE TABLE `Author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `Author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

CREATE TABLE `Conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

CREATE TABLE `Journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `Paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `Paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `PaperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `PaperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

","paper, journal","journal.fullname, paper.journalid, journal.id, paper.year, paper.Conferenceid","Author, Conference, Journal, Paper, PaperAuthor"
sales_in_weather,Provide the sunrise time recorded by the home weather station of store no.30 on 2014/2/21.,SELECT t1.sunrise FROM weather as t1 inner JOIN relation as t2 ON t1.station_nbr = t2.station_nbr WHERE t1.`date` = '2014-02-21' AND store_nbr = 30,"CREATE TABLE `weather` (
  station_nbr INTEGER PRIMARY KEY,
  date DATE PRIMARY KEY,
  tmax INTEGER,
  tmin INTEGER,
  tavg INTEGER,
  depart INTEGER,
  dewpoint INTEGER,
  wetbulb INTEGER,
  heat INTEGER,
  cool INTEGER,
  sunrise TEXT,
  sunset TEXT,
  codesum TEXT,
  snowfall REAL,
  preciptotal REAL,
  stnpressure REAL,
  sealevel REAL,
  resultspeed REAL,
  resultdir INTEGER,
  avgspeed REAL
);
Sample rows from `weather`:
1, 2012-01-01, 52, 31, 42, None, 36, 40, 23, 0, None, None, RA FZFG BR, None, 0.05, 29.78, 29.92, 3.6, 20, 4.6
1, 2012-01-02, 50, 31, 41, None, 26, 35, 24, 0, None, None,  , None, 0.01, 29.44, 29.62, 9.8, 24, 10.3
1, 2012-01-03, 32, 11, 22, None, 4, 18, 43, 0, None, None,  , None, 0.0, 29.67, 29.87, 10.8, 31, 11.6

CREATE TABLE `relation` (
  store_nbr INTEGER REFERENCES sales_in_weather(store_nbr),
  station_nbr INTEGER REFERENCES weather(station_nbr)
);
Sample rows from `relation`:
1, 1
2, 14
3, 7

","CREATE TABLE `sales_in_weather` (
  date DATE PRIMARY KEY,
  store_nbr INTEGER PRIMARY KEY,
  item_nbr INTEGER PRIMARY KEY,
  units INTEGER
);
Sample rows from `sales_in_weather`:
2012-01-01, 1, 1, 0
2012-01-01, 1, 2, 0
2012-01-01, 1, 3, 0

CREATE TABLE `weather` (
  station_nbr INTEGER PRIMARY KEY,
  date DATE PRIMARY KEY,
  tmax INTEGER,
  tmin INTEGER,
  tavg INTEGER,
  depart INTEGER,
  dewpoint INTEGER,
  wetbulb INTEGER,
  heat INTEGER,
  cool INTEGER,
  sunrise TEXT,
  sunset TEXT,
  codesum TEXT,
  snowfall REAL,
  preciptotal REAL,
  stnpressure REAL,
  sealevel REAL,
  resultspeed REAL,
  resultdir INTEGER,
  avgspeed REAL
);
Sample rows from `weather`:
1, 2012-01-01, 52, 31, 42, None, 36, 40, 23, 0, None, None, RA FZFG BR, None, 0.05, 29.78, 29.92, 3.6, 20, 4.6
1, 2012-01-02, 50, 31, 41, None, 26, 35, 24, 0, None, None,  , None, 0.01, 29.44, 29.62, 9.8, 24, 10.3
1, 2012-01-03, 32, 11, 22, None, 4, 18, 43, 0, None, None,  , None, 0.0, 29.67, 29.87, 10.8, 31, 11.6

CREATE TABLE `relation` (
  store_nbr INTEGER REFERENCES sales_in_weather(store_nbr),
  station_nbr INTEGER REFERENCES weather(station_nbr)
);
Sample rows from `relation`:
1, 1
2, 14
3, 7

","weather, relation","weather.sunrise, weather.station_nbr, relation.station_nbr, weather.date, store_nbr","sales_in_weather, weather, relation"
world,"Among the languages used in Baltic Countries, provide the languages which are used by over 80%.

",SELECT t2.language FROM country as t1 inner JOIN countrylanguage as t2 ON t1.code = t2.countrycode WHERE t1.region = 'Baltic Countries' AND t2.percentage > 80,"CREATE TABLE `country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

CREATE TABLE `countrylanguage` (
  CountryCode TEXT PRIMARY KEY REFERENCES Country(Code),
  Language TEXT PRIMARY KEY,
  IsOfficial TEXT,
  Percentage REAL
);
Sample rows from `countrylanguage`:
ABW, Dutch, T, 5.3
ABW, English, F, 9.5
ABW, Papiamento, F, 76.7

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
City, 4079

CREATE TABLE `City` (
  ID INTEGER,
  Name TEXT,
  CountryCode TEXT REFERENCES Country(Code),
  District TEXT,
  Population INTEGER
);
Sample rows from `City`:
1, Kabul, AFG, Kabol, 1780000
2, Qandahar, AFG, Qandahar, 237500
3, Herat, AFG, Herat, 186800

CREATE TABLE `Country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `Country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

CREATE TABLE `CountryLanguage` (
  CountryCode TEXT PRIMARY KEY REFERENCES Country(Code),
  Language TEXT PRIMARY KEY,
  IsOfficial TEXT,
  Percentage REAL
);
Sample rows from `CountryLanguage`:
ABW, Dutch, T, 5.3
ABW, English, F, 9.5
ABW, Papiamento, F, 76.7

","country, countrylanguage","countrylanguage.language, country.code, countrylanguage.countrycode, country.region, countrylanguage.percentage","sqlite_sequence, City, Country, CountryLanguage"
chicago_crime,In which district have there been more intimidation-type crimes?,SELECT t3.district_name FROM iucr as t1 inner JOIN crime as t2 ON t2.iucr_no = t1.iucr_no inner JOIN district as t3 ON t3.district_no = t2.district_no WHERE t1.primary_description = 'INTIMIDATION' GROUP BY t3.district_name ORDER BY COUNT(t1.primary_description) DESC LIMIT 1,"CREATE TABLE `iucr` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `iucr`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

CREATE TABLE `district` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `district`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

","CREATE TABLE `Community_Area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `Community_Area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `District` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `District`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `FBI_Code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `FBI_Code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `IUCR` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `IUCR`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `Neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `Neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `Ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `Ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `Crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `Crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","iucr, crime, district","district.district_name, crime.iucr_no, iucr.iucr_no, district.district_no, crime.district_no, iucr.primary_description","Community_Area, District, FBI_Code, IUCR, Neighborhood, Ward, Crime"
citeseer,"Among the papers under DB classification, which paper has the highest number of words cited?",SELECT t1.paper_id FROM paper as t1 inner JOIN content as t2 ON t1.paper_id = t2.paper_id WHERE t1.class_label = 'DB' GROUP BY t1.paper_id ORDER BY COUNT(t2.word_cited_id) DESC LIMIT 1,"CREATE TABLE `paper` (
  paper_id TEXT PRIMARY KEY,
  class_label TEXT
);
Sample rows from `paper`:
100157, Agents
100598, IR
101570, ML

CREATE TABLE `content` (
  paper_id TEXT PRIMARY KEY REFERENCES paper(paper_id),
  word_cited_id TEXT PRIMARY KEY
);
Sample rows from `content`:
100157, word1163
100157, word1509
100157, word1614

","CREATE TABLE `cites` (
  cited_paper_id TEXT PRIMARY KEY,
  citing_paper_id TEXT PRIMARY KEY
);
Sample rows from `cites`:
100157, 100157
100157, 364207
100157, 38848

CREATE TABLE `paper` (
  paper_id TEXT PRIMARY KEY,
  class_label TEXT
);
Sample rows from `paper`:
100157, Agents
100598, IR
101570, ML

CREATE TABLE `content` (
  paper_id TEXT PRIMARY KEY REFERENCES paper(paper_id),
  word_cited_id TEXT PRIMARY KEY
);
Sample rows from `content`:
100157, word1163
100157, word1509
100157, word1614

","paper, content","paper.paper_id, content.paper_id, paper.class_label, content.word_cited_id","cites, paper, content"
image_and_language,What is the relationship between object sample no.12 and no.8 of image no.2345511?,SELECT t1.pred_class FROM pred_classES as t1 inner JOIN img_rel as t2 ON t1.pred_class_ID = t2.pred_class_ID WHERE t2.img_id = 2345511 AND t2.obj1_sample_id = 12 AND t2.obj2_sample_id = 8,"CREATE TABLE `pred_classES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `pred_classES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `img_rel` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `img_rel`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

","CREATE TABLE `ATT_CLASSES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `ATT_CLASSES`:
0, building s
1, indoors
2, cluttered

CREATE TABLE `OBJ_CLASSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLASSES`:
0, awning
1, goggles
2, dot

CREATE TABLE `IMG_OBJ` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `IMG_OBJ`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `IMG_OBJ_ATT` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_OBJ_ATT`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `PRED_CLASSES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `PRED_CLASSES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `IMG_REL` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_REL`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

","pred_classES, img_rel","pred_classES.pred_class, pred_classES.pred_class_ID, img_rel.pred_class_ID, img_rel.img_id, img_rel.obj1_sample_id, img_rel.obj2_sample_id","ATT_CLASSES, OBJ_CLASSES, IMG_OBJ, IMG_OBJ_ATT, PRED_CLASSES, IMG_REL"
image_and_language,"How many images have at least one object sample in the class of ""man""?",SELECt COUNT(t.img_id) FROM ( SELECt t2.img_id FROM obj_classes as t1 inner JOIN img_obj as t2 ON t1.OBJ_CLasS_ID = t2.OBJ_CLasS_ID WHERE t1.OBJ_CLasS = 'man' GROUP BY t2.img_id ) t,"CREATE TABLE `obj_classes` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `obj_classes`:
0, awning
1, goggles
2, dot

CREATE TABLE `img_obj` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `img_obj`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

","CREATE TABLE `ATT_CLASSES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `ATT_CLASSES`:
0, building s
1, indoors
2, cluttered

CREATE TABLE `OBJ_CLASSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLASSES`:
0, awning
1, goggles
2, dot

CREATE TABLE `IMG_OBJ` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `IMG_OBJ`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `IMG_OBJ_ATT` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_OBJ_ATT`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `PRED_CLASSES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `PRED_CLASSES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `IMG_REL` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_REL`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

","obj_classes, img_obj","img_obj.img_id, obj_classes.OBJ_CLasS_ID, img_obj.OBJ_CLasS_ID, obj_classes.OBJ_CLasS","ATT_CLASSES, OBJ_CLASSES, IMG_OBJ, IMG_OBJ_ATT, PRED_CLASSES, IMG_REL"
shakespeare,List the character names and descriptions of chapter ID 18710.,"SELECT DISTINCT t1.charname, t1.description FROM characters as t1 inner JOIN paragraphs as t2 ON t1.id = t2.character_id WHERE t2.chapter_id = 18710","CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

","CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
chapters, 19648
characters, 1266
paragraphs, 666327

CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

","characters, paragraphs","characters.charname, characters.description, characters.id, paragraphs.character_id, paragraphs.chapter_id","chapters, sqlite_sequence, characters, paragraphs, works"
cs_semester,Describe the names and capability of the students who were advised by professors from the University of Washington.,"SELECT t3.f_name, t3.l_name, t2.capability FROM prof as t1 inner JOIN ra as t2 ON t1.prof_id = t2.prof_id inner JOIN student as t3 ON t2.student_id = t3.student_id WHERE t1.graduate_from = 'University of Washington'","CREATE TABLE `prof` (
  prof_id INTEGER,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  popularity INTEGER,
  teachingability INTEGER,
  graduate_from TEXT
);
Sample rows from `prof`:
1, Male, Nathaniel, Pigford, npigford0@hku.hk, 3, 5, University of Washington
2, Male, Zhihua, Zhou, zzhihua@hku.hk, 2, 1, Beijing Polytechnic University
3, Male, Ogdon, Zywicki, ozywicki2@hku.hk, 2, 2, University of Boston

CREATE TABLE `ra` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `ra`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

","CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

CREATE TABLE `prof` (
  prof_id INTEGER,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  popularity INTEGER,
  teachingability INTEGER,
  graduate_from TEXT
);
Sample rows from `prof`:
1, Male, Nathaniel, Pigford, npigford0@hku.hk, 3, 5, University of Washington
2, Male, Zhihua, Zhou, zzhihua@hku.hk, 2, 1, Beijing Polytechnic University
3, Male, Ogdon, Zywicki, ozywicki2@hku.hk, 2, 2, University of Boston

CREATE TABLE `RA` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `RA`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

","prof, ra, student","student.f_name, student.l_name, ra.capability, prof.prof_id, ra.prof_id, ra.student_id, student.student_id, prof.graduate_from","course, prof, RA, registration, student"
retail_world,List all the customer company names and cities located in Canada.,"SELECT companyname, city FROM customers WHERE country = 'Canada'","CREATE TABLE `customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

",customers,"companyname, city, country","sqlite_sequence, Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails"
public_review_platform,"List at least 5 users that has received less than 5 low compliments from
other users.",SELECT user_id FROM users_compliments WHERE number_of_compliments LIKE 'Low' GROUP BY user_id ORDER BY COUNT(number_of_compliments) > 5 LIMIT 5,"CREATE TABLE `users_compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `users_compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

",users_compliments,"user_id, number_of_compliments","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
authors,How many papers are preprint or not published?,SELECT COUNT(id) FROM paper WHERE year = 0 OR (Conferenceid = 0 AND Journalid = 0),"CREATE TABLE `paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

","CREATE TABLE `Author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `Author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

CREATE TABLE `Conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

CREATE TABLE `Journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `Paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `Paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `PaperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `PaperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

",paper,"id, Conferenceid, Journalid","Author, Conference, Journal, Paper, PaperAuthor"
simpson_episodes,"Out of the rating of 6.8 scored by title ""No Loan Again, Naturally"", how many percent of it consists of scores 5 to 10?","SELECT SUM(t2.percent) FROM episode as t1 inner JOIN vote as t2 ON t2.episode_id = t1.episode_id WHERE t1.title = 'No Loan Again, Naturally' AND t1.rating = 6.8 AND t2.stars BETWEEN 5 AND 10;","CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","episode, vote","vote.percent, vote.episode_id, episode.episode_id, episode.title, episode.rating, vote.stars","Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
disney,Which director had the most popular film from 1937 to 1990?,"SELECT t2.director FROM characters as t1 inner JOIN director as t2 ON t1.movie_title = t2.name inner JOIN movies_total_gross as t3 ON t3.movie_title = t1.movie_title WHERE substr(t3.release_date, length(t3.release_date) - 3, length(t3.release_date)) BETWEEN '1937' AND '1990' ORDER BY CasT(replace(trim(t3.total_gross, '$'), ',', '') as real) DESC LIMIT 1","CREATE TABLE `characters` (
  movie_title TEXT PRIMARY KEY,
  release_date TEXT,
  hero TEXT REFERENCES voice-actors(character),
  villian TEXT,
  song TEXT
);
Sample rows from `characters`:
Snow White and the Seven Dwarfs, 21-Dec-37, Snow White, Evil Queen, Some Day My Prince Will Come
Pinocchio, 7-Feb-40, Pinocchio, Stromboli, When You Wish upon a Star
Fantasia, 13-Nov-40, None, Chernabog, None

CREATE TABLE `director` (
  name TEXT PRIMARY KEY REFERENCES characters(movie_title),
  director TEXT
);
Sample rows from `director`:
Snow White and the Seven Dwarfs, David Hand
Pinocchio, Ben Sharpsteen
Fantasia, full credits

CREATE TABLE `movies_total_gross` (
  movie_title TEXT PRIMARY KEY REFERENCES characters(movie_title),
  release_date TEXT PRIMARY KEY,
  genre TEXT,
  MPAA_rating TEXT,
  total_gross TEXT,
  inflation_adjusted_gross TEXT
);
Sample rows from `movies_total_gross`:
Snow White and the Seven Dwarfs, Dec 21, 1937, Musical, G, $184,925,485, $5,228,953,251
Pinocchio, Feb 9, 1940, Adventure, G, $84,300,000, $2,188,229,052
Fantasia, Nov 13, 1940, Musical, G, $83,320,000, $2,187,090,808

","CREATE TABLE `characters` (
  movie_title TEXT PRIMARY KEY,
  release_date TEXT,
  hero TEXT REFERENCES voice-actors(character),
  villian TEXT,
  song TEXT
);
Sample rows from `characters`:
Snow White and the Seven Dwarfs, 21-Dec-37, Snow White, Evil Queen, Some Day My Prince Will Come
Pinocchio, 7-Feb-40, Pinocchio, Stromboli, When You Wish upon a Star
Fantasia, 13-Nov-40, None, Chernabog, None

CREATE TABLE `director` (
  name TEXT PRIMARY KEY REFERENCES characters(movie_title),
  director TEXT
);
Sample rows from `director`:
Snow White and the Seven Dwarfs, David Hand
Pinocchio, Ben Sharpsteen
Fantasia, full credits

CREATE TABLE `movies_total_gross` (
  movie_title TEXT PRIMARY KEY REFERENCES characters(movie_title),
  release_date TEXT PRIMARY KEY,
  genre TEXT,
  MPAA_rating TEXT,
  total_gross TEXT,
  inflation_adjusted_gross TEXT
);
Sample rows from `movies_total_gross`:
Snow White and the Seven Dwarfs, Dec 21, 1937, Musical, G, $184,925,485, $5,228,953,251
Pinocchio, Feb 9, 1940, Adventure, G, $84,300,000, $2,188,229,052
Fantasia, Nov 13, 1940, Musical, G, $83,320,000, $2,187,090,808

CREATE TABLE `revenue` (
  Year INTEGER,
  Studio Entertainment[NI 1] REAL,
  Disney Consumer Products[NI 2] REAL,
  Disney Interactive[NI 3][Rev 1] INTEGER,
  Walt Disney Parks and Resorts REAL,
  Disney Media Networks TEXT,
  Total INTEGER
);
Sample rows from `revenue`:
1991, 2593.0, 724.0, None, 2794.0, None, 6111
1992, 3115.0, 1081.0, None, 3306.0, None, 7502
1993, 3673.4, 1415.1, None, 3440.7, None, 8529

CREATE TABLE `voice-actors` (
  character TEXT PRIMARY KEY,
  voice-actor TEXT,
  movie TEXT REFERENCES characters(movie_title)
);
Sample rows from `voice-actors`:
Abby Mallard, Joan Cusack, Chicken Little
Abigail Gabble, Monica Evans, The Aristocats
Abis Mal, Jason Alexander, The Return of Jafar

","characters, director, movies_total_gross","director.director, characters.movie_title, director.name, movies_total_gross.movie_title, movies_total_gross.release_date, movies_total_gross.total_gross","characters, director, movies_total_gross, revenue, voice-actors"
movielens,What is the highest average rating for action movies made in the USA?,SELECT AVG(t2.rating) FROM movies as t1 inner JOIN u2base as t2 ON t1.movieid = t2.movieid inner JOIN movies2directors as t3 ON t1.movieid = t3.movieid WHERE t1.country = 'USA' AND t3.genre = 'Action' GROUP BY t1.movieid ORDER BY AVG(t2.rating) DESC LIMIT 1,"CREATE TABLE `movies` (
  movieid INTEGER,
  year INTEGER,
  isEnglish TEXT,
  country TEXT,
  runningtime INTEGER
);
Sample rows from `movies`:
1672052, 3, T, other, 2
1672111, 4, T, other, 2
1672580, 4, T, USA, 3

CREATE TABLE `u2base` (
  userid INTEGER PRIMARY KEY REFERENCES users(None),
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  rating TEXT
);
Sample rows from `u2base`:
2, 1964242, 1
2, 2219779, 1
3, 1856939, 1

CREATE TABLE `movies2directors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  directorid INTEGER PRIMARY KEY REFERENCES directors(None),
  genre TEXT
);
Sample rows from `movies2directors`:
1672111, 54934, Action
1672946, 188940, Action
1679461, 179783, Action

","CREATE TABLE `users` (
  userid INTEGER,
  age TEXT,
  u_gender TEXT,
  occupation TEXT
);
Sample rows from `users`:
1, 1, F, 2
2, 56, M, 3
3, 25, M, 2

CREATE TABLE `directors` (
  directorid INTEGER,
  d_quality INTEGER PRIMARY KEY,
  avg_revenue INTEGER PRIMARY KEY
);
Sample rows from `directors`:
67, 4, 1
92, 2, 3
284, 4, 0

CREATE TABLE `actors` (
  actorid INTEGER,
  a_gender TEXT,
  a_quality INTEGER
);
Sample rows from `actors`:
4, M, 4
16, M, 0
28, M, 4

CREATE TABLE `movies` (
  movieid INTEGER,
  year INTEGER,
  isEnglish TEXT,
  country TEXT,
  runningtime INTEGER
);
Sample rows from `movies`:
1672052, 3, T, other, 2
1672111, 4, T, other, 2
1672580, 4, T, USA, 3

CREATE TABLE `movies2actors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  actorid INTEGER PRIMARY KEY REFERENCES actors(None),
  cast_num INTEGER
);
Sample rows from `movies2actors`:
1672580, 981535, 0
1672946, 1094968, 0
1673647, 149985, 0

CREATE TABLE `movies2directors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  directorid INTEGER PRIMARY KEY REFERENCES directors(None),
  genre TEXT
);
Sample rows from `movies2directors`:
1672111, 54934, Action
1672946, 188940, Action
1679461, 179783, Action

CREATE TABLE `u2base` (
  userid INTEGER PRIMARY KEY REFERENCES users(None),
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  rating TEXT
);
Sample rows from `u2base`:
2, 1964242, 1
2, 2219779, 1
3, 1856939, 1

","movies, u2base, movies2directors","u2base.rating, movies.movieid, u2base.movieid, movies2directors.movieid, movies.country, movies2directors.genre","users, directors, actors, movies, movies2actors, movies2directors, u2base"
mental_health_survey,"Please list all the answers to the question ""Any additional notes or comments"" that are not null in 2014's survey.",SELECT t2.answertext FROM question as t1 inner JOIN answer as t2 ON t1.questionid = t2.questionID WHERE t1.questiontext = 'Any additional notes or comments' AND t2.surveyid = 2014 AND t2.answertext <> -1,"CREATE TABLE `question` (
  questiontext TEXT,
  questionid INTEGER
);
Sample rows from `question`:
What is your age?, 1
What is your gender?, 2
What country do you live in?, 3

CREATE TABLE `answer` (
  AnswerText TEXT,
  SurveyID INTEGER REFERENCES Survey(None),
  UserID INTEGER PRIMARY KEY,
  QuestionID INTEGER PRIMARY KEY REFERENCES Question(None)
);
Sample rows from `answer`:
37, 2014, 1, 1
44, 2014, 2, 1
32, 2014, 3, 1

","CREATE TABLE `Question` (
  questiontext TEXT,
  questionid INTEGER
);
Sample rows from `Question`:
What is your age?, 1
What is your gender?, 2
What country do you live in?, 3

CREATE TABLE `Survey` (
  SurveyID INTEGER,
  Description TEXT
);
Sample rows from `Survey`:
2014, mental health survey for 2014
2016, mental health survey for 2016
2017, mental health survey for 2017

CREATE TABLE `Answer` (
  AnswerText TEXT,
  SurveyID INTEGER REFERENCES Survey(None),
  UserID INTEGER PRIMARY KEY,
  QuestionID INTEGER PRIMARY KEY REFERENCES Question(None)
);
Sample rows from `Answer`:
37, 2014, 1, 1
44, 2014, 2, 1
32, 2014, 3, 1

","question, answer","answer.answertext, question.questionid, answer.questionID, question.questiontext, answer.surveyid","Question, Survey, Answer"
simpson_episodes,"Among the casts who were born in Los Angeles, describe the name and birth date of who have 1.8 m and above in height.","SELECT name, birthdate FROM person WHERE birth_place = 'Los Angeles' AND height_meters >= 1.8;","CREATE TABLE `person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

",person,"name, birthdate, birth_place, height_meters","Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
books,What is the name of the publisher that published the most books?,SELECT t2.publisher_name FROM book as t1 inner JOIN publisher as t2 ON t1.publisher_id = t2.publisher_id GROUP BY t2.publisher_name ORDER BY COUNT(t2.publisher_id) DESC LIMIT 1,"CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","book, publisher","publisher.publisher_name, book.publisher_id, publisher.publisher_id","address_status, author, book_language, country, address, customer, customer_address, order_status, publisher, book, book_author, shipping_method, cust_order, sqlite_sequence, order_history, order_line"
european_football_1,What was the difference in home team and away team win percentages across all divisions in 2010?,SELECT cast(COUNT(case when ftr = 'H' then 1 else null end) as real) * 100 / COUNT(ftr) - cast(COUNT(case when ftr = 'A' then 1 else null end) as real) * 100 / COUNT(ftr) difference FROM matchs WHERE season = 2010,"CREATE TABLE `matchs` (
  Div TEXT REFERENCES divisions(division),
  Date DATE,
  HomeTeam TEXT,
  AwayTeam TEXT,
  FTHG INTEGER,
  FTAG INTEGER,
  FTR TEXT,
  season INTEGER
);
Sample rows from `matchs`:
B1, 2020-08-08, Club Brugge, Charleroi, 0, 1, A, 2021
B1, 2020-08-08, Antwerp, Mouscron, 1, 1, D, 2021
B1, 2020-08-08, Standard, Cercle Brugge, 1, 0, H, 2021

","CREATE TABLE `divisions` (
  division TEXT PRIMARY KEY,
  name TEXT,
  country TEXT
);
Sample rows from `divisions`:
B1, Division 1A, Belgium
D1, Bundesliga, Deutschland
D2, 2. Bundesliga, Deutschland

CREATE TABLE `matchs` (
  Div TEXT REFERENCES divisions(division),
  Date DATE,
  HomeTeam TEXT,
  AwayTeam TEXT,
  FTHG INTEGER,
  FTAG INTEGER,
  FTR TEXT,
  season INTEGER
);
Sample rows from `matchs`:
B1, 2020-08-08, Club Brugge, Charleroi, 0, 1, A, 2021
B1, 2020-08-08, Antwerp, Mouscron, 1, 1, D, 2021
B1, 2020-08-08, Standard, Cercle Brugge, 1, 0, H, 2021

",matchs,"ftr, season","divisions, matchs"
beer_factory,How many transactions have been made to purchase a root beer brand from California?,SELECT COUNT(t3.rootbeerid) FROM rootbeerbrand as t1 inner JOIN rootbeer as t2 ON t1.brandid = t2.brandid inner JOIN `transaction` as t3 ON t2.rootbeerid = t3.rootbeerid WHERE t1.state = 'CA',"CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

CREATE TABLE `transaction` (
  TransactionID INTEGER,
  CreditCardNumber INTEGER,
  CustomerID INTEGER REFERENCES customers(CustomerID),
  TransactionDate DATE,
  CreditCardType TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  RootBeerID INTEGER REFERENCES rootbeer(RootBeerID),
  PurchasePrice REAL
);
Sample rows from `transaction`:
100000, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105661, 3.0
100001, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105798, 3.0
100002, 6011583832864739, 864896, 2014-07-07, Discover, 2, 102514, 3.0

","CREATE TABLE `customers` (
  CustomerID INTEGER,
  First TEXT,
  Last TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER,
  Email TEXT,
  PhoneNumber TEXT,
  FirstPurchaseDate DATE,
  SubscribedToEmailList TEXT,
  Gender TEXT
);
Sample rows from `customers`:
101811, Kenneth, Walton, 6715 Commonwealth Dr, Sacramento, CA, 94256, walton.k76@fastmail.com, (916) 918-1561, 2013-05-30, FALSE, M
103508, Madeleine, Jones, 3603 Leola Way, Sacramento, CA, 94258, j_madeleine@gmail.com, (916) 186-9423, 2013-02-06, FALSE, F
104939, Damen, Wheeler, 6740 Branwood Way, Orangevale, CA, 95662, dwheeler@outlook.com, (916) 164-1156, 2013-04-11, FALSE, M

CREATE TABLE `geolocation` (
  LocationID INTEGER REFERENCES location(LocationID),
  Latitude REAL,
  Longitude REAL
);
Sample rows from `geolocation`:
0, 0.0, 0.0
1, 38.566129, -121.426432
2, 38.559615, -121.42243

CREATE TABLE `location` (
  LocationID INTEGER REFERENCES geolocation(LocationID),
  LocationName TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER
);
Sample rows from `location`:
0, LOST, None, None, None, None
1, Sac State American River Courtyard, 6000 J St, Sacramento, CA, 95819
2, Sac State Union, 6000 J St, Sacramento, CA, 95819

CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

CREATE TABLE `rootbeerreview` (
  CustomerID INTEGER PRIMARY KEY REFERENCES customers(CustomerID),
  BrandID INTEGER PRIMARY KEY REFERENCES rootbeerbrand(BrandID),
  StarRating INTEGER,
  ReviewDate DATE,
  Review TEXT
);
Sample rows from `rootbeerreview`:
101811, 10012, 5, 2013-07-15, None
101811, 10014, 1, 2013-07-08, None
101811, 10015, 3, 2013-07-25, None

CREATE TABLE `transaction` (
  TransactionID INTEGER,
  CreditCardNumber INTEGER,
  CustomerID INTEGER REFERENCES customers(CustomerID),
  TransactionDate DATE,
  CreditCardType TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  RootBeerID INTEGER REFERENCES rootbeer(RootBeerID),
  PurchasePrice REAL
);
Sample rows from `transaction`:
100000, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105661, 3.0
100001, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105798, 3.0
100002, 6011583832864739, 864896, 2014-07-07, Discover, 2, 102514, 3.0

","rootbeerbrand, rootbeer, transaction","transaction.rootbeerid, rootbeerbrand.brandid, rootbeer.brandid, rootbeer.rootbeerid, rootbeerbrand.state","customers, geolocation, location, rootbeerbrand, rootbeer, rootbeerreview, transaction"
retail_world,"Among the products, how many of them were discontinued in production?",SELECT COUNT(*) FROM products WHERE discontinued = 1,"CREATE TABLE `products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

",products,discontinued,"sqlite_sequence, Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails"
books,Which language was book id 1405 written in?,SELECT t2.language_name FROM book as t1 inner JOIN book_language as t2 ON t1.language_id = t2.language_id WHERE t1.book_id = 1405,"CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","book, book_language","book_language.language_name, book.language_id, book_language.language_id, book.book_id","address_status, author, book_language, country, address, customer, customer_address, order_status, publisher, book, book_author, shipping_method, cust_order, sqlite_sequence, order_history, order_line"
authors,"Which paper published by the ""TUBERCLE LUNG DIS"" journal is the oldest?",SELECT t2.title FROM journal as t1 inner JOIN paper as t2 ON t1.id = t2.journalid WHERE t1.shortname = 'TUBERCLE LUNG DIS' ORDER BY t2.year asC LIMIT 1,"CREATE TABLE `journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

","CREATE TABLE `Author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `Author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

CREATE TABLE `Conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

CREATE TABLE `Journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `Paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `Paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `PaperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `PaperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

","journal, paper","paper.title, journal.id, paper.journalid, journal.shortname, paper.year","Author, Conference, Journal, Paper, PaperAuthor"
movielens,What is the difference of female and male audiences in number who viewed horror movies?,"SELECT SUM(iif(t2.u_gender = 'F', 1, 0)) - SUM(iif(t2.u_gender = 'M', 1, 0)) FROM u2base as t1 inner JOIN users as t2 ON t1.userid = t2.userid inner JOIN movies2directors as t3 ON t3.movieid = t1.movieid WHERE t3.genre = 'horror'","CREATE TABLE `u2base` (
  userid INTEGER PRIMARY KEY REFERENCES users(None),
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  rating TEXT
);
Sample rows from `u2base`:
2, 1964242, 1
2, 2219779, 1
3, 1856939, 1

CREATE TABLE `users` (
  userid INTEGER,
  age TEXT,
  u_gender TEXT,
  occupation TEXT
);
Sample rows from `users`:
1, 1, F, 2
2, 56, M, 3
3, 25, M, 2

CREATE TABLE `movies2directors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  directorid INTEGER PRIMARY KEY REFERENCES directors(None),
  genre TEXT
);
Sample rows from `movies2directors`:
1672111, 54934, Action
1672946, 188940, Action
1679461, 179783, Action

","CREATE TABLE `users` (
  userid INTEGER,
  age TEXT,
  u_gender TEXT,
  occupation TEXT
);
Sample rows from `users`:
1, 1, F, 2
2, 56, M, 3
3, 25, M, 2

CREATE TABLE `directors` (
  directorid INTEGER,
  d_quality INTEGER PRIMARY KEY,
  avg_revenue INTEGER PRIMARY KEY
);
Sample rows from `directors`:
67, 4, 1
92, 2, 3
284, 4, 0

CREATE TABLE `actors` (
  actorid INTEGER,
  a_gender TEXT,
  a_quality INTEGER
);
Sample rows from `actors`:
4, M, 4
16, M, 0
28, M, 4

CREATE TABLE `movies` (
  movieid INTEGER,
  year INTEGER,
  isEnglish TEXT,
  country TEXT,
  runningtime INTEGER
);
Sample rows from `movies`:
1672052, 3, T, other, 2
1672111, 4, T, other, 2
1672580, 4, T, USA, 3

CREATE TABLE `movies2actors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  actorid INTEGER PRIMARY KEY REFERENCES actors(None),
  cast_num INTEGER
);
Sample rows from `movies2actors`:
1672580, 981535, 0
1672946, 1094968, 0
1673647, 149985, 0

CREATE TABLE `movies2directors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  directorid INTEGER PRIMARY KEY REFERENCES directors(None),
  genre TEXT
);
Sample rows from `movies2directors`:
1672111, 54934, Action
1672946, 188940, Action
1679461, 179783, Action

CREATE TABLE `u2base` (
  userid INTEGER PRIMARY KEY REFERENCES users(None),
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  rating TEXT
);
Sample rows from `u2base`:
2, 1964242, 1
2, 2219779, 1
3, 1856939, 1

","u2base, users, movies2directors","users.u_gender, u2base.userid, users.userid, movies2directors.movieid, u2base.movieid, movies2directors.genre","users, directors, actors, movies, movies2actors, movies2directors, u2base"
world,What is the life expectancy of residents in the most crowded city?,SELECT t2.lifeexpectancy FROM city as t1 inner JOIN country as t2 ON t1.countrycode = t2.code ORDER BY t1.population DESC LIMIT 1,"CREATE TABLE `city` (
  ID INTEGER,
  Name TEXT,
  CountryCode TEXT REFERENCES Country(Code),
  District TEXT,
  Population INTEGER
);
Sample rows from `city`:
1, Kabul, AFG, Kabol, 1780000
2, Qandahar, AFG, Qandahar, 237500
3, Herat, AFG, Herat, 186800

CREATE TABLE `country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
City, 4079

CREATE TABLE `City` (
  ID INTEGER,
  Name TEXT,
  CountryCode TEXT REFERENCES Country(Code),
  District TEXT,
  Population INTEGER
);
Sample rows from `City`:
1, Kabul, AFG, Kabol, 1780000
2, Qandahar, AFG, Qandahar, 237500
3, Herat, AFG, Herat, 186800

CREATE TABLE `Country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `Country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

CREATE TABLE `CountryLanguage` (
  CountryCode TEXT PRIMARY KEY REFERENCES Country(Code),
  Language TEXT PRIMARY KEY,
  IsOfficial TEXT,
  Percentage REAL
);
Sample rows from `CountryLanguage`:
ABW, Dutch, T, 5.3
ABW, English, F, 9.5
ABW, Papiamento, F, 76.7

","city, country","country.lifeexpectancy, city.countrycode, country.code, city.population","sqlite_sequence, City, Country, CountryLanguage"
shakespeare,"How many chapters have the name Gratiano as a character for ""friend to Antonio and Bassiano""?",SELECT COUNT(DISTINCT t2.chapter_id) FROM characters as t1 inner JOIN paragraphs as t2 ON t1.id = t2.character_id WHERE t1.charname = 'Gratiano' AND t1.description = 'friend to Antonio and Bassiano',"CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

","CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
chapters, 19648
characters, 1266
paragraphs, 666327

CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

","characters, paragraphs","paragraphs.chapter_id, characters.id, paragraphs.character_id, characters.charname, characters.description","chapters, sqlite_sequence, characters, paragraphs, works"
authors,"Which author of the paper ""Incremental Extraction of Keyterms for Classifying Multilingual Documents in the Web"" is affiliated with National Taiwan University Department of Computer Science and Information Engineering Taiwan?",SELECT t1.name FROM paperauthor as t1 inner JOIN paper as t2 ON t1.paperid = t2.id WHERE t2.title = 'Incremental Extraction of Keyterms for Classifying Multilingual Documents in the Web' AND t1.affiliation = 'National Taiwan University Department of Computer Science and Information Engineering Taiwan',"CREATE TABLE `paperauthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `paperauthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

CREATE TABLE `paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

","CREATE TABLE `Author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `Author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

CREATE TABLE `Conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

CREATE TABLE `Journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `Paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `Paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `PaperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `PaperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

","paperauthor, paper","paperauthor.name, paperauthor.paperid, paper.id, paper.title, paperauthor.affiliation","Author, Conference, Journal, Paper, PaperAuthor"
cookbook,How many ingredients are there in the recipe that is best in helping your body's natural defence against illness and infection?,SELECT COUNT(*) FROM nutrition as t1 inner JOIN quantity as t2 ON t1.recipe_id = t2.recipe_id WHERE t1.vitamin_a > 0,"CREATE TABLE `nutrition` (
  recipe_id INTEGER REFERENCES Recipe(recipe_id),
  protein REAL,
  carbo REAL,
  alcohol REAL,
  total_fat REAL,
  sat_fat REAL,
  cholestrl REAL,
  sodium REAL,
  iron REAL,
  vitamin_c REAL,
  vitamin_a REAL,
  fiber REAL,
  pcnt_cal_carb REAL,
  pcnt_cal_fat REAL,
  pcnt_cal_prot REAL,
  calories REAL
);
Sample rows from `nutrition`:
214, 5.47, 41.29, 0.0, 11.53, 2.21, 1.39, 260.78, 0.81, 8.89, 586.2, 0.87, 56.8, 35.68, 7.53, 290.79
215, 5.7, 23.75, 1.93, 1.08, 0.58, 3.48, 46.17, 0.57, 13.02, 2738.24, 0.62, 67.38, 6.89, 16.17, 141.01
216, 4.9, 26.88, 0.0, 1.1, 0.58, 3.46, 41.79, 0.37, 6.13, 1521.1, 0.34, 78.45, 7.24, 14.3, 137.06

CREATE TABLE `quantity` (
  quantity_id INTEGER,
  recipe_id INTEGER REFERENCES Nutrition(recipe_id) REFERENCES Recipe(recipe_id),
  ingredient_id INTEGER REFERENCES Ingredient(ingredient_id),
  max_qty REAL,
  min_qty REAL,
  unit TEXT,
  preparation TEXT,
  optional TEXT
);
Sample rows from `quantity`:
1, 214, 1613, 2.0, 2.0, cup(s), None, FALSE
2, 214, 3334, 0.25, 0.25, cup(s), None, FALSE
3, 214, 2222, 0.5, 0.5, cup(s), melted, FALSE

","CREATE TABLE `Ingredient` (
  ingredient_id INTEGER,
  category TEXT,
  name TEXT,
  plural TEXT
);
Sample rows from `Ingredient`:
1, dairy, 1% lowfat cottage cheese, None
6, dairy, 1% lowfat milk, None
10, Mexican products, 10-inch flour tortilla, s

CREATE TABLE `Recipe` (
  recipe_id INTEGER,
  title TEXT,
  subtitle TEXT,
  servings INTEGER,
  yield_unit TEXT,
  prep_min INTEGER,
  cook_min INTEGER,
  stnd_min INTEGER,
  source TEXT,
  intro TEXT,
  directions TEXT
);
Sample rows from `Recipe`:
214, Raspberry Chiffon Pie, None, 10, 1 pie, 20, 8, 305, The California Tree Fruit Agreement, None, For crust, preheat oven to 375 degrees F.
In lightly greased 10-inch pie plate, combine graham cracker crumbs, melted butter and 1/4 cup sugar. Press evenly on bottom and up side of plate. Bake 5 minutes; cool.

For filling, in medium saucepan, combine juice or water and gelatin; let stand 5 minutes. Add 1/3 cup sugar and heat over medium heat, stirring to dissolve gelatin. In blender or food processor, puree 6 plums. Add puree and raspberries to gelatin mixture. Refrigerate until mixture begins to set about 1 hour. Stir yogurt into fruit mixture. In large bowl, beat egg whites until frothy. Gradually add cream of tartar and remaining 1/3 cup sugar and beat until stiff peaks form. Gently fold egg whites into fruit mixture so as not to reduce volume. Spoon into crust. Refrigerate 4 hours or overnight. Thinly slice remaining 2 plums and garnish top of pie.
215, Apricot Yogurt Parfaits, None, 4, None, 5, 2, 65, Produce for Better Health Foundation and 5 a Day, None, Drain canned apricots, pour 1/4 cup of the juice into saucepan or microwave-safe dish. Sprinkle gelatin over juice and let stand for 5 minutes to soften. Warm over low heat or microwave at medium (50% power) for 30 seconds or until gelatin has dissolved.
 
In food processor or blender, puree canned apricots; add lemon juice brandy, yogurt and gelatin mixture and process for 30 seconds or until combined.
 
Pour into parfait or stemmed glasses or champagne flutes. Cover and refrigerate until set, at least 1 hour or overnight.
 
Just before serving arrange fresh apricots on top. (If apricots are not available substitute kiwi slices or berries). Garnish each with a small spoonful of yogurt and sprinkling of brown sugar or mint.
216, Fresh Apricot Bavarian, None, 8, None, 5, 13, 0, The California Apricot Advisory Board, Serve in stemmed glasses and top with sliced apricots for elegant endings., Drop apricots into boiling water to cover. Return to boil and simmer for 5 minutes or until skins begin to split. Drain and rinse under cold water. Halve fruit and discard skins and pits. Puree apricots in electric blender. Combine water and gelatin in small saucepan; stir over low heat until dissolved. Mix sugar, apricot puree and yogurt with a wire whip until smooth; mix in dissolved gelatin. Sweeten to taste if desired. Chill mixture until thick. Spoon into stemmed glasses.

Note: One pound fresh apricots is 15 to 20. One and a half envelopes gelatin is 4 teaspoons.

CREATE TABLE `Nutrition` (
  recipe_id INTEGER REFERENCES Recipe(recipe_id),
  protein REAL,
  carbo REAL,
  alcohol REAL,
  total_fat REAL,
  sat_fat REAL,
  cholestrl REAL,
  sodium REAL,
  iron REAL,
  vitamin_c REAL,
  vitamin_a REAL,
  fiber REAL,
  pcnt_cal_carb REAL,
  pcnt_cal_fat REAL,
  pcnt_cal_prot REAL,
  calories REAL
);
Sample rows from `Nutrition`:
214, 5.47, 41.29, 0.0, 11.53, 2.21, 1.39, 260.78, 0.81, 8.89, 586.2, 0.87, 56.8, 35.68, 7.53, 290.79
215, 5.7, 23.75, 1.93, 1.08, 0.58, 3.48, 46.17, 0.57, 13.02, 2738.24, 0.62, 67.38, 6.89, 16.17, 141.01
216, 4.9, 26.88, 0.0, 1.1, 0.58, 3.46, 41.79, 0.37, 6.13, 1521.1, 0.34, 78.45, 7.24, 14.3, 137.06

CREATE TABLE `Quantity` (
  quantity_id INTEGER,
  recipe_id INTEGER REFERENCES Nutrition(recipe_id) REFERENCES Recipe(recipe_id),
  ingredient_id INTEGER REFERENCES Ingredient(ingredient_id),
  max_qty REAL,
  min_qty REAL,
  unit TEXT,
  preparation TEXT,
  optional TEXT
);
Sample rows from `Quantity`:
1, 214, 1613, 2.0, 2.0, cup(s), None, FALSE
2, 214, 3334, 0.25, 0.25, cup(s), None, FALSE
3, 214, 2222, 0.5, 0.5, cup(s), melted, FALSE

","nutrition, quantity","nutrition.recipe_id, quantity.recipe_id, nutrition.vitamin_a","Ingredient, Recipe, Nutrition, Quantity"
menu,"Among the menus in which the dish ""Clear green turtle"" had appeared, how many of them used the dollar as their currency?",SELECT SUM(case when t3.currency = 'Dollars' then 1 else 0 end) FROM menuitem as t1 inner JOIN menupage as t2 ON t1.menu_page_id = t2.id inner JOIN menu as t3 ON t2.menu_id = t3.id inner JOIN dish as t4 ON t1.dish_id = t4.id WHERE t4.name = 'Clear green turtle',"CREATE TABLE `menuitem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `menuitem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

CREATE TABLE `menupage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `menupage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

CREATE TABLE `menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

CREATE TABLE `dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

","CREATE TABLE `Dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `Dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

CREATE TABLE `Menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `Menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

CREATE TABLE `MenuPage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `MenuPage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

CREATE TABLE `MenuItem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `MenuItem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

","menuitem, menupage, menu, dish","menu.currency, menuitem.menu_page_id, menupage.id, menupage.menu_id, menu.id, menuitem.dish_id, dish.id, dish.name","Dish, Menu, MenuPage, MenuItem"
beer_factory,Show the credit card number of Lisa Ling.,SELECT DISTINCT t2.creditcardnumber FROM customers as t1 inner JOIN `transaction` as t2 ON t1.customerid = t2.customerid WHERE t1.first = 'Lisa' AND t1.last = 'Ling',"CREATE TABLE `customers` (
  CustomerID INTEGER,
  First TEXT,
  Last TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER,
  Email TEXT,
  PhoneNumber TEXT,
  FirstPurchaseDate DATE,
  SubscribedToEmailList TEXT,
  Gender TEXT
);
Sample rows from `customers`:
101811, Kenneth, Walton, 6715 Commonwealth Dr, Sacramento, CA, 94256, walton.k76@fastmail.com, (916) 918-1561, 2013-05-30, FALSE, M
103508, Madeleine, Jones, 3603 Leola Way, Sacramento, CA, 94258, j_madeleine@gmail.com, (916) 186-9423, 2013-02-06, FALSE, F
104939, Damen, Wheeler, 6740 Branwood Way, Orangevale, CA, 95662, dwheeler@outlook.com, (916) 164-1156, 2013-04-11, FALSE, M

CREATE TABLE `transaction` (
  TransactionID INTEGER,
  CreditCardNumber INTEGER,
  CustomerID INTEGER REFERENCES customers(CustomerID),
  TransactionDate DATE,
  CreditCardType TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  RootBeerID INTEGER REFERENCES rootbeer(RootBeerID),
  PurchasePrice REAL
);
Sample rows from `transaction`:
100000, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105661, 3.0
100001, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105798, 3.0
100002, 6011583832864739, 864896, 2014-07-07, Discover, 2, 102514, 3.0

","CREATE TABLE `customers` (
  CustomerID INTEGER,
  First TEXT,
  Last TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER,
  Email TEXT,
  PhoneNumber TEXT,
  FirstPurchaseDate DATE,
  SubscribedToEmailList TEXT,
  Gender TEXT
);
Sample rows from `customers`:
101811, Kenneth, Walton, 6715 Commonwealth Dr, Sacramento, CA, 94256, walton.k76@fastmail.com, (916) 918-1561, 2013-05-30, FALSE, M
103508, Madeleine, Jones, 3603 Leola Way, Sacramento, CA, 94258, j_madeleine@gmail.com, (916) 186-9423, 2013-02-06, FALSE, F
104939, Damen, Wheeler, 6740 Branwood Way, Orangevale, CA, 95662, dwheeler@outlook.com, (916) 164-1156, 2013-04-11, FALSE, M

CREATE TABLE `geolocation` (
  LocationID INTEGER REFERENCES location(LocationID),
  Latitude REAL,
  Longitude REAL
);
Sample rows from `geolocation`:
0, 0.0, 0.0
1, 38.566129, -121.426432
2, 38.559615, -121.42243

CREATE TABLE `location` (
  LocationID INTEGER REFERENCES geolocation(LocationID),
  LocationName TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER
);
Sample rows from `location`:
0, LOST, None, None, None, None
1, Sac State American River Courtyard, 6000 J St, Sacramento, CA, 95819
2, Sac State Union, 6000 J St, Sacramento, CA, 95819

CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

CREATE TABLE `rootbeerreview` (
  CustomerID INTEGER PRIMARY KEY REFERENCES customers(CustomerID),
  BrandID INTEGER PRIMARY KEY REFERENCES rootbeerbrand(BrandID),
  StarRating INTEGER,
  ReviewDate DATE,
  Review TEXT
);
Sample rows from `rootbeerreview`:
101811, 10012, 5, 2013-07-15, None
101811, 10014, 1, 2013-07-08, None
101811, 10015, 3, 2013-07-25, None

CREATE TABLE `transaction` (
  TransactionID INTEGER,
  CreditCardNumber INTEGER,
  CustomerID INTEGER REFERENCES customers(CustomerID),
  TransactionDate DATE,
  CreditCardType TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  RootBeerID INTEGER REFERENCES rootbeer(RootBeerID),
  PurchasePrice REAL
);
Sample rows from `transaction`:
100000, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105661, 3.0
100001, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105798, 3.0
100002, 6011583832864739, 864896, 2014-07-07, Discover, 2, 102514, 3.0

","customers, transaction","transaction.creditcardnumber, customers.customerid, transaction.customerid, customers.first, customers.last","customers, geolocation, location, rootbeerbrand, rootbeer, rootbeerreview, transaction"
sales_in_weather,How many no.9 items from store no.11 were sold on 2012/12/7?,SELECT units FROM sales_in_weather WHERE `date` = '2012-12-07' AND store_nbr = 11 AND item_nbr = 9,"CREATE TABLE `sales_in_weather` (
  date DATE PRIMARY KEY,
  store_nbr INTEGER PRIMARY KEY,
  item_nbr INTEGER PRIMARY KEY,
  units INTEGER
);
Sample rows from `sales_in_weather`:
2012-01-01, 1, 1, 0
2012-01-01, 1, 2, 0
2012-01-01, 1, 3, 0

","CREATE TABLE `sales_in_weather` (
  date DATE PRIMARY KEY,
  store_nbr INTEGER PRIMARY KEY,
  item_nbr INTEGER PRIMARY KEY,
  units INTEGER
);
Sample rows from `sales_in_weather`:
2012-01-01, 1, 1, 0
2012-01-01, 1, 2, 0
2012-01-01, 1, 3, 0

CREATE TABLE `weather` (
  station_nbr INTEGER PRIMARY KEY,
  date DATE PRIMARY KEY,
  tmax INTEGER,
  tmin INTEGER,
  tavg INTEGER,
  depart INTEGER,
  dewpoint INTEGER,
  wetbulb INTEGER,
  heat INTEGER,
  cool INTEGER,
  sunrise TEXT,
  sunset TEXT,
  codesum TEXT,
  snowfall REAL,
  preciptotal REAL,
  stnpressure REAL,
  sealevel REAL,
  resultspeed REAL,
  resultdir INTEGER,
  avgspeed REAL
);
Sample rows from `weather`:
1, 2012-01-01, 52, 31, 42, None, 36, 40, 23, 0, None, None, RA FZFG BR, None, 0.05, 29.78, 29.92, 3.6, 20, 4.6
1, 2012-01-02, 50, 31, 41, None, 26, 35, 24, 0, None, None,  , None, 0.01, 29.44, 29.62, 9.8, 24, 10.3
1, 2012-01-03, 32, 11, 22, None, 4, 18, 43, 0, None, None,  , None, 0.0, 29.67, 29.87, 10.8, 31, 11.6

CREATE TABLE `relation` (
  store_nbr INTEGER REFERENCES sales_in_weather(store_nbr),
  station_nbr INTEGER REFERENCES weather(station_nbr)
);
Sample rows from `relation`:
1, 1
2, 14
3, 7

",sales_in_weather,"units, date, store_nbr, item_nbr","sales_in_weather, weather, relation"
bike_share_1,"On 11/3/2013, which stations are often empty? Indicate the names of the stations.",SELECT DISTINCT t1.name FROM station as t1 inner JOIN status as t2 ON t2.station_id = t1.id WHERE t2.bikes_available = 0 AND t2.time LIKE '2013/11/03%',"CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat REAL,
  long REAL,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);
Sample rows from `station`:
2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013
3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013
4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013

CREATE TABLE `status` (
  station_id INTEGER,
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);
Sample rows from `status`:
2, 2, 25, 2013/08/29 12:06:01
2, 2, 25, 2013/08/29 12:07:01
2, 2, 25, 2013/08/29 12:08:01

","CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat REAL,
  long REAL,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);
Sample rows from `station`:
2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013
3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013
4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013

CREATE TABLE `status` (
  station_id INTEGER,
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);
Sample rows from `status`:
2, 2, 25, 2013/08/29 12:06:01
2, 2, 25, 2013/08/29 12:07:01
2, 2, 25, 2013/08/29 12:08:01

CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);
Sample rows from `trip`:
4069, 174, 8/29/2013 9:08, 2nd at South Park, 64, 8/29/2013 9:11, 2nd at South Park, 64, 288, Subscriber, 94114
4073, 1067, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:42, San Francisco Caltrain 2 (330 Townsend), 69, 321, Subscriber, 94703
4074, 1131, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:43, San Francisco Caltrain 2 (330 Townsend), 69, 317, Subscriber, 94115

CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches REAL,
  mean_sea_level_pressure_inches REAL,
  min_sea_level_pressure_inches REAL,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches TEXT,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code TEXT
);
Sample rows from `weather`:
8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107
8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30.0, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107
8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30.0, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107

","station, status","station.name, status.station_id, station.id, status.bikes_available, status.time","station, status, trip, weather"
regional_sales,How many orders were shipped by the sales team with the highest amount of shipped orders in 2020? Give the name of the said sales team.,"SELECT COUNT(t1.ordernumber), t2.`sales team` FROM `sales orders` as t1 inner JOIN `sales team` as t2 ON t2.salesteamID = t1._salesteamID WHERE t1.shipdate LIKE '%/%/20' GROUP BY t2.`sales team` ORDER BY COUNT(t1.ordernumber) DESC LIMIT 1","CREATE TABLE `sales orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `sales orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

CREATE TABLE `sales team` (
  SalesTeamID INTEGER,
  Sales Team TEXT,
  Region TEXT
);
Sample rows from `sales team`:
1, Adam Hernandez, Northeast
2, Keith Griffin, Northeast
3, Jerry Green, West

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  Customer Names TEXT
);
Sample rows from `Customers`:
1, Avon Corp
2, WakeFern 
3, Elorac, Corp

CREATE TABLE `Products` (
  ProductID INTEGER,
  Product Name TEXT
);
Sample rows from `Products`:
1, Cookware
2, Photo Frames
3, Table Lamps

CREATE TABLE `Regions` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `Regions`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `Sales Team` (
  SalesTeamID INTEGER,
  Sales Team TEXT,
  Region TEXT
);
Sample rows from `Sales Team`:
1, Adam Hernandez, Northeast
2, Keith Griffin, Northeast
3, Jerry Green, West

CREATE TABLE `Store Locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `Store Locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

CREATE TABLE `Sales Orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `Sales Orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

","sales orders, sales team","sales orders.ordernumber, sales team.sales team, sales team.salesteamID, sales orders._salesteamID, sales orders.shipdate","Customers, Products, Regions, Sales Team, Store Locations, Sales Orders"
student_loan,List out students that enrolled in occ school and enlisted in a fire department.,SELECT t1.name FROM enlist as t1 inner JOIN enrolled as t2 ON t2.name = t1.name WHERE t2.school = 'occ' AND t1.organ = 'fire_department',"CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

","enlist, enrolled","enlist.name, enrolled.name, enrolled.school, enlist.organ","bool, person, disabled, enlist, filed_for_bankrupcy, longest_absense_from_school, male, no_payment_due, unemployed, enrolled"
retail_complains,How long was Kendall Allen's complaint about her credit card?,SELECT t3.ser_time FROM events as t1 inner JOIN client as t2 ON t1.client_id = t2.client_id inner JOIN callcenterlogs as t3 ON t1.`complaint id` = t3.`complaint id` WHERE t2.first = 'Kendall' AND t2.last = 'Allen' AND t2.sex = 'Female' AND t1.product = 'Credit card',"CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

","CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

","events, client, callcenterlogs","callcenterlogs.ser_time, events.client_id, client.client_id, events.complaint id, callcenterlogs.complaint id, client.first, client.last, client.sex, events.product","state, callcenterlogs, client, district, events, reviews"
food_inspection_2,What is the full name of the employee that inspected establishments with license 1334073?,"SELECT DISTINCT t1.first_name, t1.last_name FROM employee as t1 inner JOIN inspection as t2 ON t1.employee_id = t2.employee_id WHERE t2.license_no = 1334073","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

","employee, inspection","employee.first_name, employee.last_name, employee.employee_id, inspection.employee_id, inspection.license_no","employee, establishment, inspection, inspection_point, violation"
authors,"Give the number of papers that were published on ""IEEE Transactions on Nuclear Science"" in 1999.",SELECT COUNT(t2.id) FROM journal as t1 inner JOIN paper as t2 ON t1.id = t2.journalid WHERE t1.fullname = 'IEEE Transactions on Nuclear Science' AND t2.year = 1999,"CREATE TABLE `journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

","CREATE TABLE `Author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `Author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

CREATE TABLE `Conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

CREATE TABLE `Journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `Paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `Paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `PaperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `PaperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

","journal, paper","paper.id, journal.id, paper.journalid, journal.fullname, paper.year","Author, Conference, Journal, Paper, PaperAuthor"
books,What is the title of the most expensive book?,SELECT t1.title FROM book as t1 inner JOIN order_line as t2 ON t1.book_id = t2.book_id ORDER BY t2.price DESC LIMIT 1,"CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","book, order_line","book.title, book.book_id, order_line.book_id, order_line.price","address_status, author, book_language, country, address, customer, customer_address, order_status, publisher, book, book_author, shipping_method, cust_order, sqlite_sequence, order_history, order_line"
citeseer,List all paper ID and its class type with more than 20 cited words.,"SELECT DISTINCT t1.paper_id, t1.class_label FROM paper as t1 inner JOIN content as t2 ON t1.paper_id = t2.paper_id GROUP BY t2.paper_id, t1.class_label HAVING COUNT(t2.word_cited_id) > 20","CREATE TABLE `paper` (
  paper_id TEXT PRIMARY KEY,
  class_label TEXT
);
Sample rows from `paper`:
100157, Agents
100598, IR
101570, ML

CREATE TABLE `content` (
  paper_id TEXT PRIMARY KEY REFERENCES paper(paper_id),
  word_cited_id TEXT PRIMARY KEY
);
Sample rows from `content`:
100157, word1163
100157, word1509
100157, word1614

","CREATE TABLE `cites` (
  cited_paper_id TEXT PRIMARY KEY,
  citing_paper_id TEXT PRIMARY KEY
);
Sample rows from `cites`:
100157, 100157
100157, 364207
100157, 38848

CREATE TABLE `paper` (
  paper_id TEXT PRIMARY KEY,
  class_label TEXT
);
Sample rows from `paper`:
100157, Agents
100598, IR
101570, ML

CREATE TABLE `content` (
  paper_id TEXT PRIMARY KEY REFERENCES paper(paper_id),
  word_cited_id TEXT PRIMARY KEY
);
Sample rows from `content`:
100157, word1163
100157, word1509
100157, word1614

","paper, content","paper.paper_id, paper.class_label, content.paper_id, content.word_cited_id","cites, paper, content"
airline,What is the flight number of the flight operated by American Airlines Inc. that had the longest delay in departure?,SELECT t1.op_carrier_fl_num FROM airlines as t1 inner JOIN airports as t2 ON t2.code = t1.origin inner JOIN `air carriers` as t3 ON t1.op_carrier_airline_id = t3.code WHERE t3.description = 'American airlines Inc.: AA' ORDER BY t1.dep_time DESC LIMIT 1,"CREATE TABLE `airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

CREATE TABLE `airports` (
  Code TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `airports`:
01A, Afognak Lake, AK: Afognak Lake Airport
03A, Granite Mountain, AK: Bear Creek Mining Strip
04A, Lik, AK: Lik Mining Camp

CREATE TABLE `air carriers` (
  Code INTEGER,
  Description TEXT
);
Sample rows from `air carriers`:
19031, Mackey International Inc.: MAC
19032, Munz Northern Airlines Inc.: XY
19033, Cochise Airlines Inc.: COC

","CREATE TABLE `Air Carriers` (
  Code INTEGER,
  Description TEXT
);
Sample rows from `Air Carriers`:
19031, Mackey International Inc.: MAC
19032, Munz Northern Airlines Inc.: XY
19033, Cochise Airlines Inc.: COC

CREATE TABLE `Airports` (
  Code TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `Airports`:
01A, Afognak Lake, AK: Afognak Lake Airport
03A, Granite Mountain, AK: Bear Creek Mining Strip
04A, Lik, AK: Lik Mining Camp

CREATE TABLE `Airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `Airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

","airlines, airports, air carriers","airlines.op_carrier_fl_num, airports.code, airlines.origin, airlines.op_carrier_airline_id, air carriers.code, air carriers.description, airlines.dep_time","Air Carriers, Airports, Airlines"
simpson_episodes,List out the title of episodes which have star score of 2.,SELECT t1.title FROM episode as t1 inner JOIN vote as t2 ON t2.episode_id = t1.episode_id WHERE t2.stars = 2;,"CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","episode, vote","episode.title, vote.episode_id, episode.episode_id, vote.stars","Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
beer_factory,"For the customer who leaves the review content of ""Tastes like Australia."", when was his/her first purchase date?",SELECT t1.firstpurchasedate FROM customers as t1 inner JOIN rootbeerreview as t2 ON t1.customerid = t2.customerid WHERE t2.review = 'Tastes like Australia.',"CREATE TABLE `customers` (
  CustomerID INTEGER,
  First TEXT,
  Last TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER,
  Email TEXT,
  PhoneNumber TEXT,
  FirstPurchaseDate DATE,
  SubscribedToEmailList TEXT,
  Gender TEXT
);
Sample rows from `customers`:
101811, Kenneth, Walton, 6715 Commonwealth Dr, Sacramento, CA, 94256, walton.k76@fastmail.com, (916) 918-1561, 2013-05-30, FALSE, M
103508, Madeleine, Jones, 3603 Leola Way, Sacramento, CA, 94258, j_madeleine@gmail.com, (916) 186-9423, 2013-02-06, FALSE, F
104939, Damen, Wheeler, 6740 Branwood Way, Orangevale, CA, 95662, dwheeler@outlook.com, (916) 164-1156, 2013-04-11, FALSE, M

CREATE TABLE `rootbeerreview` (
  CustomerID INTEGER PRIMARY KEY REFERENCES customers(CustomerID),
  BrandID INTEGER PRIMARY KEY REFERENCES rootbeerbrand(BrandID),
  StarRating INTEGER,
  ReviewDate DATE,
  Review TEXT
);
Sample rows from `rootbeerreview`:
101811, 10012, 5, 2013-07-15, None
101811, 10014, 1, 2013-07-08, None
101811, 10015, 3, 2013-07-25, None

","CREATE TABLE `customers` (
  CustomerID INTEGER,
  First TEXT,
  Last TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER,
  Email TEXT,
  PhoneNumber TEXT,
  FirstPurchaseDate DATE,
  SubscribedToEmailList TEXT,
  Gender TEXT
);
Sample rows from `customers`:
101811, Kenneth, Walton, 6715 Commonwealth Dr, Sacramento, CA, 94256, walton.k76@fastmail.com, (916) 918-1561, 2013-05-30, FALSE, M
103508, Madeleine, Jones, 3603 Leola Way, Sacramento, CA, 94258, j_madeleine@gmail.com, (916) 186-9423, 2013-02-06, FALSE, F
104939, Damen, Wheeler, 6740 Branwood Way, Orangevale, CA, 95662, dwheeler@outlook.com, (916) 164-1156, 2013-04-11, FALSE, M

CREATE TABLE `geolocation` (
  LocationID INTEGER REFERENCES location(LocationID),
  Latitude REAL,
  Longitude REAL
);
Sample rows from `geolocation`:
0, 0.0, 0.0
1, 38.566129, -121.426432
2, 38.559615, -121.42243

CREATE TABLE `location` (
  LocationID INTEGER REFERENCES geolocation(LocationID),
  LocationName TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER
);
Sample rows from `location`:
0, LOST, None, None, None, None
1, Sac State American River Courtyard, 6000 J St, Sacramento, CA, 95819
2, Sac State Union, 6000 J St, Sacramento, CA, 95819

CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

CREATE TABLE `rootbeerreview` (
  CustomerID INTEGER PRIMARY KEY REFERENCES customers(CustomerID),
  BrandID INTEGER PRIMARY KEY REFERENCES rootbeerbrand(BrandID),
  StarRating INTEGER,
  ReviewDate DATE,
  Review TEXT
);
Sample rows from `rootbeerreview`:
101811, 10012, 5, 2013-07-15, None
101811, 10014, 1, 2013-07-08, None
101811, 10015, 3, 2013-07-25, None

CREATE TABLE `transaction` (
  TransactionID INTEGER,
  CreditCardNumber INTEGER,
  CustomerID INTEGER REFERENCES customers(CustomerID),
  TransactionDate DATE,
  CreditCardType TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  RootBeerID INTEGER REFERENCES rootbeer(RootBeerID),
  PurchasePrice REAL
);
Sample rows from `transaction`:
100000, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105661, 3.0
100001, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105798, 3.0
100002, 6011583832864739, 864896, 2014-07-07, Discover, 2, 102514, 3.0

","customers, rootbeerreview","customers.firstpurchasedate, customers.customerid, rootbeerreview.customerid, rootbeerreview.review","customers, geolocation, location, rootbeerbrand, rootbeer, rootbeerreview, transaction"
olympics,How many kinds of events does athletics have?,SELECT COUNT(t2.event_name) FROM sport as t1 inner JOIN event as t2 ON t1.id = t2.sport_id WHERE t1.sport_name = 'Athletics',"CREATE TABLE `sport` (
  id INTEGER,
  sport_name TEXT
);
Sample rows from `sport`:
1, Aeronautics
2, Alpine Skiing
3, Alpinism

CREATE TABLE `event` (
  id INTEGER,
  sport_id INTEGER REFERENCES sport(id),
  event_name TEXT
);
Sample rows from `event`:
1, 9, Basketball Men's Basketball
2, 33, Judo Men's Extra-Lightweight
3, 25, Football Men's Football

","CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `medal` (
  id INTEGER,
  medal_name TEXT
);
Sample rows from `medal`:
1, Gold
2, Silver
3, Bronze

CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `sport` (
  id INTEGER,
  sport_name TEXT
);
Sample rows from `sport`:
1, Aeronautics
2, Alpine Skiing
3, Alpinism

CREATE TABLE `event` (
  id INTEGER,
  sport_id INTEGER REFERENCES sport(id),
  event_name TEXT
);
Sample rows from `event`:
1, 9, Basketball Men's Basketball
2, 33, Judo Men's Extra-Lightweight
3, 25, Football Men's Football

CREATE TABLE `competitor_event` (
  event_id INTEGER REFERENCES event(id),
  competitor_id INTEGER REFERENCES games_competitor(id),
  medal_id INTEGER REFERENCES medal(id)
);
Sample rows from `competitor_event`:
1, 1, 4
2, 2, 4
3, 3, 4

","sport, event","event.event_name, sport.id, event.sport_id, sport.sport_name","city, games, games_city, medal, noc_region, person, games_competitor, person_region, sport, event, competitor_event"
shooting,What is the percentage of subject who are female used the Vehicle as weapon?,SELECT cast(SUM(t1.subject_weapon = 'Vehicle') as real) * 100 / COUNT(t1.case_number) fROM incidents t1 inner JOIN subjects t2 ON t1.case_number = t2.case_number WHERE t2.gender = 'f',"CREATE TABLE `incidents` (
  case_number TEXT PRIMARY KEY,
  date DATE,
  location TEXT,
  subject_statuses TEXT,
  subject_weapon TEXT,
  subjects TEXT,
  subject_count INTEGER,
  officers TEXT
);
Sample rows from `incidents`:
031347-2015, 2015/2/9, 7400 Bonnie View Road, Deceased, Vehicle, Luster, Desmond Dwayne B/M, 1, Tollerton, Aaron W/M
072458-2016, 2016/3/26, 8218 Willoughby Boulevard, Shoot and Miss, Shotgun, Gilstrap, Bryan B/M, 1, Cardenas, Steven L/M
089985-2016, 2016/4/16, 4800 Columbia Ave, Shoot and Miss, Handgun, Unknown L/M, 1, Ruben, Fredirick W/M

CREATE TABLE `subjects` (
  case_number TEXT REFERENCES incidents(case_number),
  race TEXT,
  gender TEXT,
  last_name TEXT,
  first_name TEXT,
  full_name TEXT
);
Sample rows from `subjects`:
44523A, L, M, Curry, James, Curry, James
121982X, L, M, Chavez, Gabriel, Chavez, Gabriel
605484T, L, M, Salinas, Nick, Salinas, Nick

","CREATE TABLE `incidents` (
  case_number TEXT PRIMARY KEY,
  date DATE,
  location TEXT,
  subject_statuses TEXT,
  subject_weapon TEXT,
  subjects TEXT,
  subject_count INTEGER,
  officers TEXT
);
Sample rows from `incidents`:
031347-2015, 2015/2/9, 7400 Bonnie View Road, Deceased, Vehicle, Luster, Desmond Dwayne B/M, 1, Tollerton, Aaron W/M
072458-2016, 2016/3/26, 8218 Willoughby Boulevard, Shoot and Miss, Shotgun, Gilstrap, Bryan B/M, 1, Cardenas, Steven L/M
089985-2016, 2016/4/16, 4800 Columbia Ave, Shoot and Miss, Handgun, Unknown L/M, 1, Ruben, Fredirick W/M

CREATE TABLE `officers` (
  case_number TEXT REFERENCES incidents(case_number),
  race TEXT,
  gender TEXT,
  last_name TEXT,
  first_name TEXT,
  full_name TEXT
);
Sample rows from `officers`:
44523A, L, M, Patino, Michael, Patino, Michael
44523A, W, M, Fillingim, Brian, Fillingim, Brian
121982X, L, M, Padilla, Gilbert, Padilla, Gilbert

CREATE TABLE `subjects` (
  case_number TEXT REFERENCES incidents(case_number),
  race TEXT,
  gender TEXT,
  last_name TEXT,
  first_name TEXT,
  full_name TEXT
);
Sample rows from `subjects`:
44523A, L, M, Curry, James, Curry, James
121982X, L, M, Chavez, Gabriel, Chavez, Gabriel
605484T, L, M, Salinas, Nick, Salinas, Nick

","incidents, subjects","incidents.subject_weapon, incidents.case_number, subjects.case_number, subjects.gender","incidents, officers, subjects"
beer_factory,How many breweries are there in Australia?,SELECT COUNT(breweryname) FROM rootbeerbrand WHERE country = 'Australia',"CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

","CREATE TABLE `customers` (
  CustomerID INTEGER,
  First TEXT,
  Last TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER,
  Email TEXT,
  PhoneNumber TEXT,
  FirstPurchaseDate DATE,
  SubscribedToEmailList TEXT,
  Gender TEXT
);
Sample rows from `customers`:
101811, Kenneth, Walton, 6715 Commonwealth Dr, Sacramento, CA, 94256, walton.k76@fastmail.com, (916) 918-1561, 2013-05-30, FALSE, M
103508, Madeleine, Jones, 3603 Leola Way, Sacramento, CA, 94258, j_madeleine@gmail.com, (916) 186-9423, 2013-02-06, FALSE, F
104939, Damen, Wheeler, 6740 Branwood Way, Orangevale, CA, 95662, dwheeler@outlook.com, (916) 164-1156, 2013-04-11, FALSE, M

CREATE TABLE `geolocation` (
  LocationID INTEGER REFERENCES location(LocationID),
  Latitude REAL,
  Longitude REAL
);
Sample rows from `geolocation`:
0, 0.0, 0.0
1, 38.566129, -121.426432
2, 38.559615, -121.42243

CREATE TABLE `location` (
  LocationID INTEGER REFERENCES geolocation(LocationID),
  LocationName TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER
);
Sample rows from `location`:
0, LOST, None, None, None, None
1, Sac State American River Courtyard, 6000 J St, Sacramento, CA, 95819
2, Sac State Union, 6000 J St, Sacramento, CA, 95819

CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

CREATE TABLE `rootbeerreview` (
  CustomerID INTEGER PRIMARY KEY REFERENCES customers(CustomerID),
  BrandID INTEGER PRIMARY KEY REFERENCES rootbeerbrand(BrandID),
  StarRating INTEGER,
  ReviewDate DATE,
  Review TEXT
);
Sample rows from `rootbeerreview`:
101811, 10012, 5, 2013-07-15, None
101811, 10014, 1, 2013-07-08, None
101811, 10015, 3, 2013-07-25, None

CREATE TABLE `transaction` (
  TransactionID INTEGER,
  CreditCardNumber INTEGER,
  CustomerID INTEGER REFERENCES customers(CustomerID),
  TransactionDate DATE,
  CreditCardType TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  RootBeerID INTEGER REFERENCES rootbeer(RootBeerID),
  PurchasePrice REAL
);
Sample rows from `transaction`:
100000, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105661, 3.0
100001, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105798, 3.0
100002, 6011583832864739, 864896, 2014-07-07, Discover, 2, 102514, 3.0

",rootbeerbrand,"breweryname, country","customers, geolocation, location, rootbeerbrand, rootbeer, rootbeerreview, transaction"
olympics,"From 1900 to 1992, how many games did London host?",SELECT COUNT(t3.id) FROM games_city as t1 inner JOIN city as t2 ON t1.city_id = t2.id inner JOIN games as t3 ON t1.games_id = t3.id WHERE t2.city_name = 'London' AND t3.games_year BETWEEN 1900 AND 1992,"CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

","CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `medal` (
  id INTEGER,
  medal_name TEXT
);
Sample rows from `medal`:
1, Gold
2, Silver
3, Bronze

CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `sport` (
  id INTEGER,
  sport_name TEXT
);
Sample rows from `sport`:
1, Aeronautics
2, Alpine Skiing
3, Alpinism

CREATE TABLE `event` (
  id INTEGER,
  sport_id INTEGER REFERENCES sport(id),
  event_name TEXT
);
Sample rows from `event`:
1, 9, Basketball Men's Basketball
2, 33, Judo Men's Extra-Lightweight
3, 25, Football Men's Football

CREATE TABLE `competitor_event` (
  event_id INTEGER REFERENCES event(id),
  competitor_id INTEGER REFERENCES games_competitor(id),
  medal_id INTEGER REFERENCES medal(id)
);
Sample rows from `competitor_event`:
1, 1, 4
2, 2, 4
3, 3, 4

","games_city, city, games","games.id, games_city.city_id, city.id, games_city.games_id, city.city_name, games.games_year","city, games, games_city, medal, noc_region, person, games_competitor, person_region, sport, event, competitor_event"
menu,List down the locations of menu sponsored by Norddeutscher Lloyd Bremen.,SELECT location FROM menu WHERE sponsor = 'Norddeutscher Lloyd Bremen',"CREATE TABLE `menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

","CREATE TABLE `Dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `Dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

CREATE TABLE `Menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `Menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

CREATE TABLE `MenuPage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `MenuPage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

CREATE TABLE `MenuItem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `MenuItem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

",menu,sponsor,"Dish, Menu, MenuPage, MenuItem"
sales,What is the price and name of the product bought by Erica Xu?,"SELECT t3.price, t3.name FROM sales as t1 inner JOIN customers as t2 ON t1.customerid = t2.customerid inner JOIN products as t3 ON t1.productid = t3.productid WHERE t2.Firstname = 'Erica' AND t2.Lastname = 'Xu'","CREATE TABLE `sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

CREATE TABLE `customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

CREATE TABLE `products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Employees`:
1, Abraham, e, Bennet
2, Reginald, l, Blotchet-Halls
3, Cheryl, a, Carson

CREATE TABLE `Products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

CREATE TABLE `Sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `Sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

","sales, customers, products","products.price, products.name, sales.customerid, customers.customerid, sales.productid, products.productid, customers.Firstname, customers.Lastname","Customers, Employees, Products, Sales"
world,How many languages are used in Cyprus?,SELECT SUM(case when t1.name = 'Cyprus' then 1 else 0 end) FROM country as t1 inner JOIN countryLanguage as t2 ON t1.code = t2.countrycode,"CREATE TABLE `country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

CREATE TABLE `countryLanguage` (
  CountryCode TEXT PRIMARY KEY REFERENCES Country(Code),
  Language TEXT PRIMARY KEY,
  IsOfficial TEXT,
  Percentage REAL
);
Sample rows from `countryLanguage`:
ABW, Dutch, T, 5.3
ABW, English, F, 9.5
ABW, Papiamento, F, 76.7

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
City, 4079

CREATE TABLE `City` (
  ID INTEGER,
  Name TEXT,
  CountryCode TEXT REFERENCES Country(Code),
  District TEXT,
  Population INTEGER
);
Sample rows from `City`:
1, Kabul, AFG, Kabol, 1780000
2, Qandahar, AFG, Qandahar, 237500
3, Herat, AFG, Herat, 186800

CREATE TABLE `Country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `Country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

CREATE TABLE `CountryLanguage` (
  CountryCode TEXT PRIMARY KEY REFERENCES Country(Code),
  Language TEXT PRIMARY KEY,
  IsOfficial TEXT,
  Percentage REAL
);
Sample rows from `CountryLanguage`:
ABW, Dutch, T, 5.3
ABW, English, F, 9.5
ABW, Papiamento, F, 76.7

","country, countryLanguage","country.name, country.code, countryLanguage.countrycode","sqlite_sequence, City, Country, CountryLanguage"
food_inspection,Who is the owner of the business that has a high risk violation of 103109 and described as unclean or unsanitary food contact surfaces?,SELECT DISTINCT t2.owner_name FROM violations as t1 inner JOIN businesses as t2 ON t1.business_id = t2.business_id WHERE t1.risk_category = 'High Risk' AND t1.violation_type_id = 103109 AND t1.description = 'Unclean or unsanitary food contact surfaces',"CREATE TABLE `violations` (
  business_id INTEGER REFERENCES businesses(business_id),
  date DATE,
  violation_type_id TEXT,
  risk_category TEXT,
  description TEXT
);
Sample rows from `violations`:
10, 2014-07-29, 103129, Moderate Risk, Insufficient hot water or running water
10, 2014-07-29, 103144, Low Risk, Unapproved or unmaintained equipment or utensils
10, 2014-01-14, 103119, Moderate Risk, Inadequate and inaccessible handwashing facilities

CREATE TABLE `businesses` (
  business_id INTEGER,
  name TEXT,
  address TEXT,
  city TEXT,
  postal_code TEXT,
  latitude REAL,
  longitude REAL,
  phone_number INTEGER,
  tax_code TEXT,
  business_certificate INTEGER,
  application_date DATE,
  owner_name TEXT,
  owner_address TEXT,
  owner_city TEXT,
  owner_state TEXT,
  owner_zip TEXT
);
Sample rows from `businesses`:
10, Tiramisu Kitchen, 033 Belden Pl, San Francisco, 94104, 37.7911, -122.404, None, H24, 779059, None, Tiramisu LLC, 33 Belden St, San Francisco, CA, 94104
24, OMNI S.F. Hotel - 2nd Floor Pantry, 500 California St, 2nd  Floor, San Francisco, 94104, 37.7929, -122.403, None, H24, 352312, None, OMNI San Francisco Hotel Corp, 500 California St, 2nd Floor, San Francisco, CA, 94104
31, Norman's Ice Cream and Freezes, 2801 Leavenworth St, San Francisco, 94133, 37.8072, -122.419, None, H24, 346882, None, Norman Antiforda, 2801 Leavenworth St, San Francisco, CA, 94133

","CREATE TABLE `businesses` (
  business_id INTEGER,
  name TEXT,
  address TEXT,
  city TEXT,
  postal_code TEXT,
  latitude REAL,
  longitude REAL,
  phone_number INTEGER,
  tax_code TEXT,
  business_certificate INTEGER,
  application_date DATE,
  owner_name TEXT,
  owner_address TEXT,
  owner_city TEXT,
  owner_state TEXT,
  owner_zip TEXT
);
Sample rows from `businesses`:
10, Tiramisu Kitchen, 033 Belden Pl, San Francisco, 94104, 37.7911, -122.404, None, H24, 779059, None, Tiramisu LLC, 33 Belden St, San Francisco, CA, 94104
24, OMNI S.F. Hotel - 2nd Floor Pantry, 500 California St, 2nd  Floor, San Francisco, 94104, 37.7929, -122.403, None, H24, 352312, None, OMNI San Francisco Hotel Corp, 500 California St, 2nd Floor, San Francisco, CA, 94104
31, Norman's Ice Cream and Freezes, 2801 Leavenworth St, San Francisco, 94133, 37.8072, -122.419, None, H24, 346882, None, Norman Antiforda, 2801 Leavenworth St, San Francisco, CA, 94133

CREATE TABLE `inspections` (
  business_id INTEGER REFERENCES businesses(business_id),
  score INTEGER,
  date DATE,
  type TEXT
);
Sample rows from `inspections`:
10, 92, 2014-01-14, Routine - Unscheduled
10, None, 2014-01-24, Reinspection/Followup
10, 94, 2014-07-29, Routine - Unscheduled

CREATE TABLE `violations` (
  business_id INTEGER REFERENCES businesses(business_id),
  date DATE,
  violation_type_id TEXT,
  risk_category TEXT,
  description TEXT
);
Sample rows from `violations`:
10, 2014-07-29, 103129, Moderate Risk, Insufficient hot water or running water
10, 2014-07-29, 103144, Low Risk, Unapproved or unmaintained equipment or utensils
10, 2014-01-14, 103119, Moderate Risk, Inadequate and inaccessible handwashing facilities

","violations, businesses","businesses.owner_name, violations.business_id, businesses.business_id, violations.risk_category, violations.violation_type_id, violations.description","businesses, inspections, violations"
codebase_comments,"What is the task of the method whose tokenized name is ""online median filter test median window filling""?","SELECT substr(substr(name, instr(name, '.') + 1), 1, instr(substr(name, instr(name, '.') + 1), '.') - 1) task FROM method WHERE nameTokenized = 'online median filter test median window filling'","CREATE TABLE `method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Method, 10860640
MethodParameter, 17514858
Repo, 156550

CREATE TABLE `Method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `Method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

CREATE TABLE `MethodParameter` (
  Id INTEGER,
  MethodId TEXT,
  Type TEXT,
  Name TEXT
);
Sample rows from `MethodParameter`:
1, 1, System.String, data
2, 2, System.Int32, i
3, 2, System.Int32, declstartpos

CREATE TABLE `Repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `Repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

CREATE TABLE `Solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `Solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

",method,"name, nameTokenized","sqlite_sequence, Method, MethodParameter, Repo, Solution"
cars,"Among the cars over 3000lbs, how many of them cost less than $30000?",SELECT COUNT(t1.car_name) FROM data as t1 inner JOIN price as t2 ON t1.id = t2.id WHERE t1.weight > 3000 AND t2.price < 30000,"CREATE TABLE `data` (
  ID INTEGER REFERENCES price(ID),
  mpg REAL,
  cylinders INTEGER,
  displacement REAL,
  horsepower INTEGER,
  weight INTEGER,
  acceleration REAL,
  model INTEGER,
  car_name TEXT
);
Sample rows from `data`:
1, 18.0, 8, 307.0, 130, 3504, 12.0, 70, chevrolet chevelle malibu
2, 15.0, 8, 350.0, 165, 3693, 11.5, 70, buick skylark 320
3, 18.0, 8, 318.0, 150, 3436, 11.0, 70, plymouth satellite

CREATE TABLE `price` (
  ID INTEGER,
  price REAL
);
Sample rows from `price`:
1, 25561.59078
2, 24221.42273
3, 27240.84373

","CREATE TABLE `country` (
  origin INTEGER,
  country TEXT
);
Sample rows from `country`:
1, USA
2, Europe
3, Japan

CREATE TABLE `price` (
  ID INTEGER,
  price REAL
);
Sample rows from `price`:
1, 25561.59078
2, 24221.42273
3, 27240.84373

CREATE TABLE `data` (
  ID INTEGER REFERENCES price(ID),
  mpg REAL,
  cylinders INTEGER,
  displacement REAL,
  horsepower INTEGER,
  weight INTEGER,
  acceleration REAL,
  model INTEGER,
  car_name TEXT
);
Sample rows from `data`:
1, 18.0, 8, 307.0, 130, 3504, 12.0, 70, chevrolet chevelle malibu
2, 15.0, 8, 350.0, 165, 3693, 11.5, 70, buick skylark 320
3, 18.0, 8, 318.0, 150, 3436, 11.0, 70, plymouth satellite

CREATE TABLE `production` (
  ID INTEGER PRIMARY KEY REFERENCES price(ID) REFERENCES data(ID),
  model_year INTEGER PRIMARY KEY,
  country INTEGER REFERENCES country(origin)
);
Sample rows from `production`:
1, 1970, 1
1, 1971, 1
2, 1970, 1

","data, price","data.car_name, data.id, price.id, data.weight, price.price","country, price, data, production"
sales_in_weather,What is the lowest minimum temperature recorded in store 16 on January 2012?,SELECT MIN(tmin) FROM weather as t1 inner JOIN relation as t2 ON t1.station_nbr = t2.station_nbr WHERE t2.store_nbr = 16 AND t1.`date` LIKE '%2012-01%',"CREATE TABLE `weather` (
  station_nbr INTEGER PRIMARY KEY,
  date DATE PRIMARY KEY,
  tmax INTEGER,
  tmin INTEGER,
  tavg INTEGER,
  depart INTEGER,
  dewpoint INTEGER,
  wetbulb INTEGER,
  heat INTEGER,
  cool INTEGER,
  sunrise TEXT,
  sunset TEXT,
  codesum TEXT,
  snowfall REAL,
  preciptotal REAL,
  stnpressure REAL,
  sealevel REAL,
  resultspeed REAL,
  resultdir INTEGER,
  avgspeed REAL
);
Sample rows from `weather`:
1, 2012-01-01, 52, 31, 42, None, 36, 40, 23, 0, None, None, RA FZFG BR, None, 0.05, 29.78, 29.92, 3.6, 20, 4.6
1, 2012-01-02, 50, 31, 41, None, 26, 35, 24, 0, None, None,  , None, 0.01, 29.44, 29.62, 9.8, 24, 10.3
1, 2012-01-03, 32, 11, 22, None, 4, 18, 43, 0, None, None,  , None, 0.0, 29.67, 29.87, 10.8, 31, 11.6

CREATE TABLE `relation` (
  store_nbr INTEGER REFERENCES sales_in_weather(store_nbr),
  station_nbr INTEGER REFERENCES weather(station_nbr)
);
Sample rows from `relation`:
1, 1
2, 14
3, 7

","CREATE TABLE `sales_in_weather` (
  date DATE PRIMARY KEY,
  store_nbr INTEGER PRIMARY KEY,
  item_nbr INTEGER PRIMARY KEY,
  units INTEGER
);
Sample rows from `sales_in_weather`:
2012-01-01, 1, 1, 0
2012-01-01, 1, 2, 0
2012-01-01, 1, 3, 0

CREATE TABLE `weather` (
  station_nbr INTEGER PRIMARY KEY,
  date DATE PRIMARY KEY,
  tmax INTEGER,
  tmin INTEGER,
  tavg INTEGER,
  depart INTEGER,
  dewpoint INTEGER,
  wetbulb INTEGER,
  heat INTEGER,
  cool INTEGER,
  sunrise TEXT,
  sunset TEXT,
  codesum TEXT,
  snowfall REAL,
  preciptotal REAL,
  stnpressure REAL,
  sealevel REAL,
  resultspeed REAL,
  resultdir INTEGER,
  avgspeed REAL
);
Sample rows from `weather`:
1, 2012-01-01, 52, 31, 42, None, 36, 40, 23, 0, None, None, RA FZFG BR, None, 0.05, 29.78, 29.92, 3.6, 20, 4.6
1, 2012-01-02, 50, 31, 41, None, 26, 35, 24, 0, None, None,  , None, 0.01, 29.44, 29.62, 9.8, 24, 10.3
1, 2012-01-03, 32, 11, 22, None, 4, 18, 43, 0, None, None,  , None, 0.0, 29.67, 29.87, 10.8, 31, 11.6

CREATE TABLE `relation` (
  store_nbr INTEGER REFERENCES sales_in_weather(store_nbr),
  station_nbr INTEGER REFERENCES weather(station_nbr)
);
Sample rows from `relation`:
1, 1
2, 14
3, 7

","weather, relation","tmin, weather.station_nbr, relation.station_nbr, relation.store_nbr, weather.date","sales_in_weather, weather, relation"
bike_share_1,Please list the starting stations of the bike trips made on a day with a max humidity over 80 in 2013 in the area where the zip code is 94107.,"SELECT DISTINCT t1.start_station_name FROM trip as t1 inner JOIN weather as t2 ON t2.zip_code = t1.zip_code WHERE substr(CasT(t2.date as text), -4) = '2013' AND t2.zip_code = 94107 AND t2.max_temperature_f > 80","CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);
Sample rows from `trip`:
4069, 174, 8/29/2013 9:08, 2nd at South Park, 64, 8/29/2013 9:11, 2nd at South Park, 64, 288, Subscriber, 94114
4073, 1067, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:42, San Francisco Caltrain 2 (330 Townsend), 69, 321, Subscriber, 94703
4074, 1131, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:43, San Francisco Caltrain 2 (330 Townsend), 69, 317, Subscriber, 94115

CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches REAL,
  mean_sea_level_pressure_inches REAL,
  min_sea_level_pressure_inches REAL,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches TEXT,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code TEXT
);
Sample rows from `weather`:
8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107
8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30.0, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107
8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30.0, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107

","CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat REAL,
  long REAL,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);
Sample rows from `station`:
2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013
3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013
4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013

CREATE TABLE `status` (
  station_id INTEGER,
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);
Sample rows from `status`:
2, 2, 25, 2013/08/29 12:06:01
2, 2, 25, 2013/08/29 12:07:01
2, 2, 25, 2013/08/29 12:08:01

CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);
Sample rows from `trip`:
4069, 174, 8/29/2013 9:08, 2nd at South Park, 64, 8/29/2013 9:11, 2nd at South Park, 64, 288, Subscriber, 94114
4073, 1067, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:42, San Francisco Caltrain 2 (330 Townsend), 69, 321, Subscriber, 94703
4074, 1131, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:43, San Francisco Caltrain 2 (330 Townsend), 69, 317, Subscriber, 94115

CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches REAL,
  mean_sea_level_pressure_inches REAL,
  min_sea_level_pressure_inches REAL,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches TEXT,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code TEXT
);
Sample rows from `weather`:
8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107
8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30.0, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107
8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30.0, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107

","trip, weather","trip.start_station_name, weather.zip_code, trip.zip_code, weather.date, weather.max_temperature_f","station, status, trip, weather"
authors,How many author published papers in the 'IEEE Computer' journal?,SELECT COUNT(t2.name) FROM paper as t1 inner JOIN paperAuthor as t2 ON t1.id = t2.paperid inner JOIN journal as t3 ON t1.journalid = t3.id WHERE t3.Fullname = 'IEEE Computer',"CREATE TABLE `paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `paperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `paperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

CREATE TABLE `journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

","CREATE TABLE `Author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `Author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

CREATE TABLE `Conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

CREATE TABLE `Journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `Paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `Paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `PaperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `PaperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

","paper, paperAuthor, journal","paperAuthor.name, paper.id, paperAuthor.paperid, paper.journalid, journal.id, journal.Fullname","Author, Conference, Journal, Paper, PaperAuthor"
codebase_comments,"List all the method name of the solution path ""graffen_NLog.Targets.Syslog\src\NLog.Targets.Syslog.sln
"".",SELECT DISTINCT t2.name FROM solution as t1 inner JOIN method as t2 ON t1.id = t2.solutionid WHERE t1.path = 'graffen_NLog.Targets.SyslogsrcNLog.Targets.Syslog.sln',"CREATE TABLE `solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

CREATE TABLE `method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Method, 10860640
MethodParameter, 17514858
Repo, 156550

CREATE TABLE `Method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `Method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

CREATE TABLE `MethodParameter` (
  Id INTEGER,
  MethodId TEXT,
  Type TEXT,
  Name TEXT
);
Sample rows from `MethodParameter`:
1, 1, System.String, data
2, 2, System.Int32, i
3, 2, System.Int32, declstartpos

CREATE TABLE `Repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `Repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

CREATE TABLE `Solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `Solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

","solution, method","method.name, solution.id, method.solutionid, solution.path","sqlite_sequence, Method, MethodParameter, Repo, Solution"
video_games,What is the genre ID of the game named 25 to Life?,SELECt t.genre_id FROM game as t WHERE t.game_name = '25 to Life',"CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

","CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

",game,"game.genre_id, game.game_name","genre, game, platform, publisher, game_publisher, game_platform, region, region_sales"
beer_factory,Give me the brewery and brand names of canned root beer that were purchased before 6/6/2015.,"SELECT DISTINCT t2.breweryname, t2.brandname FROM rootbeer as t1 inner JOIN rootbeerbrand as t2 ON t1.brandid = t2.brandid WHERE t1.purchasedate < '2015-06-06' AND t1.containertype = 'Can'","CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

","CREATE TABLE `customers` (
  CustomerID INTEGER,
  First TEXT,
  Last TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER,
  Email TEXT,
  PhoneNumber TEXT,
  FirstPurchaseDate DATE,
  SubscribedToEmailList TEXT,
  Gender TEXT
);
Sample rows from `customers`:
101811, Kenneth, Walton, 6715 Commonwealth Dr, Sacramento, CA, 94256, walton.k76@fastmail.com, (916) 918-1561, 2013-05-30, FALSE, M
103508, Madeleine, Jones, 3603 Leola Way, Sacramento, CA, 94258, j_madeleine@gmail.com, (916) 186-9423, 2013-02-06, FALSE, F
104939, Damen, Wheeler, 6740 Branwood Way, Orangevale, CA, 95662, dwheeler@outlook.com, (916) 164-1156, 2013-04-11, FALSE, M

CREATE TABLE `geolocation` (
  LocationID INTEGER REFERENCES location(LocationID),
  Latitude REAL,
  Longitude REAL
);
Sample rows from `geolocation`:
0, 0.0, 0.0
1, 38.566129, -121.426432
2, 38.559615, -121.42243

CREATE TABLE `location` (
  LocationID INTEGER REFERENCES geolocation(LocationID),
  LocationName TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER
);
Sample rows from `location`:
0, LOST, None, None, None, None
1, Sac State American River Courtyard, 6000 J St, Sacramento, CA, 95819
2, Sac State Union, 6000 J St, Sacramento, CA, 95819

CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

CREATE TABLE `rootbeerreview` (
  CustomerID INTEGER PRIMARY KEY REFERENCES customers(CustomerID),
  BrandID INTEGER PRIMARY KEY REFERENCES rootbeerbrand(BrandID),
  StarRating INTEGER,
  ReviewDate DATE,
  Review TEXT
);
Sample rows from `rootbeerreview`:
101811, 10012, 5, 2013-07-15, None
101811, 10014, 1, 2013-07-08, None
101811, 10015, 3, 2013-07-25, None

CREATE TABLE `transaction` (
  TransactionID INTEGER,
  CreditCardNumber INTEGER,
  CustomerID INTEGER REFERENCES customers(CustomerID),
  TransactionDate DATE,
  CreditCardType TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  RootBeerID INTEGER REFERENCES rootbeer(RootBeerID),
  PurchasePrice REAL
);
Sample rows from `transaction`:
100000, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105661, 3.0
100001, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105798, 3.0
100002, 6011583832864739, 864896, 2014-07-07, Discover, 2, 102514, 3.0

","rootbeer, rootbeerbrand","rootbeerbrand.breweryname, rootbeerbrand.brandname, rootbeer.brandid, rootbeerbrand.brandid, rootbeer.purchasedate, rootbeer.containertype","customers, geolocation, location, rootbeerbrand, rootbeer, rootbeerreview, transaction"
world,Calculate the average population per city in Karnataka district.,SELECT AVG(population) FROM city WHERE district = 'Karnataka' GROUP BY id,"CREATE TABLE `city` (
  ID INTEGER,
  Name TEXT,
  CountryCode TEXT REFERENCES Country(Code),
  District TEXT,
  Population INTEGER
);
Sample rows from `city`:
1, Kabul, AFG, Kabol, 1780000
2, Qandahar, AFG, Qandahar, 237500
3, Herat, AFG, Herat, 186800

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
City, 4079

CREATE TABLE `City` (
  ID INTEGER,
  Name TEXT,
  CountryCode TEXT REFERENCES Country(Code),
  District TEXT,
  Population INTEGER
);
Sample rows from `City`:
1, Kabul, AFG, Kabol, 1780000
2, Qandahar, AFG, Qandahar, 237500
3, Herat, AFG, Herat, 186800

CREATE TABLE `Country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `Country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

CREATE TABLE `CountryLanguage` (
  CountryCode TEXT PRIMARY KEY REFERENCES Country(Code),
  Language TEXT PRIMARY KEY,
  IsOfficial TEXT,
  Percentage REAL
);
Sample rows from `CountryLanguage`:
ABW, Dutch, T, 5.3
ABW, English, F, 9.5
ABW, Papiamento, F, 76.7

",city,"population, district, id","sqlite_sequence, City, Country, CountryLanguage"
disney,Describe the voice actors and villains in Cinderella.,"SELECT t1.`voice-actor`, t2.villian FROM `voice-actors` as t1 inner JOIN characters as t2 ON t1.movie = t2.movie_title WHERE t2.movie_title = 'Cinderella'","CREATE TABLE `voice-actors` (
  character TEXT PRIMARY KEY,
  voice-actor TEXT,
  movie TEXT REFERENCES characters(movie_title)
);
Sample rows from `voice-actors`:
Abby Mallard, Joan Cusack, Chicken Little
Abigail Gabble, Monica Evans, The Aristocats
Abis Mal, Jason Alexander, The Return of Jafar

CREATE TABLE `characters` (
  movie_title TEXT PRIMARY KEY,
  release_date TEXT,
  hero TEXT REFERENCES voice-actors(character),
  villian TEXT,
  song TEXT
);
Sample rows from `characters`:
Snow White and the Seven Dwarfs, 21-Dec-37, Snow White, Evil Queen, Some Day My Prince Will Come
Pinocchio, 7-Feb-40, Pinocchio, Stromboli, When You Wish upon a Star
Fantasia, 13-Nov-40, None, Chernabog, None

","CREATE TABLE `characters` (
  movie_title TEXT PRIMARY KEY,
  release_date TEXT,
  hero TEXT REFERENCES voice-actors(character),
  villian TEXT,
  song TEXT
);
Sample rows from `characters`:
Snow White and the Seven Dwarfs, 21-Dec-37, Snow White, Evil Queen, Some Day My Prince Will Come
Pinocchio, 7-Feb-40, Pinocchio, Stromboli, When You Wish upon a Star
Fantasia, 13-Nov-40, None, Chernabog, None

CREATE TABLE `director` (
  name TEXT PRIMARY KEY REFERENCES characters(movie_title),
  director TEXT
);
Sample rows from `director`:
Snow White and the Seven Dwarfs, David Hand
Pinocchio, Ben Sharpsteen
Fantasia, full credits

CREATE TABLE `movies_total_gross` (
  movie_title TEXT PRIMARY KEY REFERENCES characters(movie_title),
  release_date TEXT PRIMARY KEY,
  genre TEXT,
  MPAA_rating TEXT,
  total_gross TEXT,
  inflation_adjusted_gross TEXT
);
Sample rows from `movies_total_gross`:
Snow White and the Seven Dwarfs, Dec 21, 1937, Musical, G, $184,925,485, $5,228,953,251
Pinocchio, Feb 9, 1940, Adventure, G, $84,300,000, $2,188,229,052
Fantasia, Nov 13, 1940, Musical, G, $83,320,000, $2,187,090,808

CREATE TABLE `revenue` (
  Year INTEGER,
  Studio Entertainment[NI 1] REAL,
  Disney Consumer Products[NI 2] REAL,
  Disney Interactive[NI 3][Rev 1] INTEGER,
  Walt Disney Parks and Resorts REAL,
  Disney Media Networks TEXT,
  Total INTEGER
);
Sample rows from `revenue`:
1991, 2593.0, 724.0, None, 2794.0, None, 6111
1992, 3115.0, 1081.0, None, 3306.0, None, 7502
1993, 3673.4, 1415.1, None, 3440.7, None, 8529

CREATE TABLE `voice-actors` (
  character TEXT PRIMARY KEY,
  voice-actor TEXT,
  movie TEXT REFERENCES characters(movie_title)
);
Sample rows from `voice-actors`:
Abby Mallard, Joan Cusack, Chicken Little
Abigail Gabble, Monica Evans, The Aristocats
Abis Mal, Jason Alexander, The Return of Jafar

","voice-actors, characters","voice-actors.voice-actor, characters.villian, voice-actors.movie, characters.movie_title","characters, director, movies_total_gross, revenue, voice-actors"
university,How many universities are located in Japan?,SELECT COUNT(*) FROM university as t1 inner JOIN country as t2 ON t1.country_id = t2.id WHERE t2.country_name = 'Japan',"CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

","CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

CREATE TABLE `ranking_system` (
  id INTEGER,
  system_name TEXT
);
Sample rows from `ranking_system`:
1, Times Higher Education World University Ranking
2, Shanghai Ranking
3, Center for World University Rankings

CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

","university, country","university.country_id, country.id, country.country_name","country, ranking_system, ranking_criteria, university, university_ranking_year, university_year"
student_loan,How many female students are enlisted in the Navy organization?,SELECT COUNT(name) FROM enlist WHERE organ = 'navy' AND name NOT IN ( SELECT name FROM male ),"CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

","enlist, male","name, organ","bool, person, disabled, enlist, filed_for_bankrupcy, longest_absense_from_school, male, no_payment_due, unemployed, enrolled"
student_loan,Calculate the average enlisted students per organization.,SELECT cast(COUNT(name) as real) * 100 / COUNT(DISTINCT organ) FROM enlist,"CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

",enlist,"name, organ","bool, person, disabled, enlist, filed_for_bankrupcy, longest_absense_from_school, male, no_payment_due, unemployed, enrolled"
retail_complains,Which region does Noah Thompson live in?,SELECT t2.division FROM client as t1 inner JOIN district as t2 ON t1.district_id = t2.district_id WHERE t1.first = 'Noah' AND t1.last = 'Thompson',"CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

","CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

","client, district","district.division, client.district_id, district.district_id, client.first, client.last","state, callcenterlogs, client, district, events, reviews"
olympics,"Which sport does the event ""Shooting Women's Trap"" belong to?",SELECT t1.sport_name FROM sport as t1 inner JOIN event as t2 ON t1.id = t2.sport_id WHERE t2.event_name LIKE 'Shooting Women%s Trap',"CREATE TABLE `sport` (
  id INTEGER,
  sport_name TEXT
);
Sample rows from `sport`:
1, Aeronautics
2, Alpine Skiing
3, Alpinism

CREATE TABLE `event` (
  id INTEGER,
  sport_id INTEGER REFERENCES sport(id),
  event_name TEXT
);
Sample rows from `event`:
1, 9, Basketball Men's Basketball
2, 33, Judo Men's Extra-Lightweight
3, 25, Football Men's Football

","CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `medal` (
  id INTEGER,
  medal_name TEXT
);
Sample rows from `medal`:
1, Gold
2, Silver
3, Bronze

CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `sport` (
  id INTEGER,
  sport_name TEXT
);
Sample rows from `sport`:
1, Aeronautics
2, Alpine Skiing
3, Alpinism

CREATE TABLE `event` (
  id INTEGER,
  sport_id INTEGER REFERENCES sport(id),
  event_name TEXT
);
Sample rows from `event`:
1, 9, Basketball Men's Basketball
2, 33, Judo Men's Extra-Lightweight
3, 25, Football Men's Football

CREATE TABLE `competitor_event` (
  event_id INTEGER REFERENCES event(id),
  competitor_id INTEGER REFERENCES games_competitor(id),
  medal_id INTEGER REFERENCES medal(id)
);
Sample rows from `competitor_event`:
1, 1, 4
2, 2, 4
3, 3, 4

","sport, event","sport.sport_name, sport.id, event.sport_id, event.event_name","city, games, games_city, medal, noc_region, person, games_competitor, person_region, sport, event, competitor_event"
public_review_platform,Calculate the difference between running business in Glendale City and Mesa City.,SELECT SUM(case when city = 'Glendale' then 1 else 0 end) - SUM(case when city = 'Mesa' then 1 else 0 end) as diff FROM business WHERE active = 'true',"CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

",business,"city, active","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
bike_share_1,What is the longest trip duration according? Convert the it to number of days.,"SELECT MAX(duration), cast(MAX(duration) as real) / 86400 FROM trip","CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);
Sample rows from `trip`:
4069, 174, 8/29/2013 9:08, 2nd at South Park, 64, 8/29/2013 9:11, 2nd at South Park, 64, 288, Subscriber, 94114
4073, 1067, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:42, San Francisco Caltrain 2 (330 Townsend), 69, 321, Subscriber, 94703
4074, 1131, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:43, San Francisco Caltrain 2 (330 Townsend), 69, 317, Subscriber, 94115

","CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat REAL,
  long REAL,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);
Sample rows from `station`:
2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013
3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013
4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013

CREATE TABLE `status` (
  station_id INTEGER,
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);
Sample rows from `status`:
2, 2, 25, 2013/08/29 12:06:01
2, 2, 25, 2013/08/29 12:07:01
2, 2, 25, 2013/08/29 12:08:01

CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);
Sample rows from `trip`:
4069, 174, 8/29/2013 9:08, 2nd at South Park, 64, 8/29/2013 9:11, 2nd at South Park, 64, 288, Subscriber, 94114
4073, 1067, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:42, San Francisco Caltrain 2 (330 Townsend), 69, 321, Subscriber, 94703
4074, 1131, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:43, San Francisco Caltrain 2 (330 Townsend), 69, 317, Subscriber, 94115

CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches REAL,
  mean_sea_level_pressure_inches REAL,
  min_sea_level_pressure_inches REAL,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches TEXT,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code TEXT
);
Sample rows from `weather`:
8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107
8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30.0, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107
8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30.0, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107

",trip,duration,"station, status, trip, weather"
chicago_crime,Please name three communities that experience the fraud incident.,SELECT t3.community_area_name FROM fbi_code as t1 inner JOIN crime as t2 ON t1.fbi_code_no = t2.fbi_code_no inner JOIN community_area as t3 ON t2.community_area_no = t3.community_area_no WHERE t1.title = 'Criminal Sexual Assault' LIMIT 3,"CREATE TABLE `fbi_code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `fbi_code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

CREATE TABLE `community_area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `community_area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

","CREATE TABLE `Community_Area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `Community_Area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `District` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `District`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `FBI_Code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `FBI_Code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `IUCR` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `IUCR`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `Neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `Neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `Ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `Ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `Crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `Crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","fbi_code, crime, community_area","community_area.community_area_name, fbi_code.fbi_code_no, crime.fbi_code_no, crime.community_area_no, community_area.community_area_no, fbi_code.title","Community_Area, District, FBI_Code, IUCR, Neighborhood, Ward, Crime"
chicago_crime,What is the general and specific description of incident 275?,"SELECT primary_description, secondary_description FROM iucr WHERE iucr_no = 275","CREATE TABLE `iucr` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `iucr`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

","CREATE TABLE `Community_Area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `Community_Area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `District` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `District`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `FBI_Code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `FBI_Code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `IUCR` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `IUCR`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `Neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `Neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `Ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `Ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `Crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `Crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

",iucr,"primary_description, secondary_description, iucr_no","Community_Area, District, FBI_Code, IUCR, Neighborhood, Ward, Crime"
image_and_language,How many white objects are there in image no.2347915?,SELECT SUM(case when t2.att_class = 'white' then 1 else 0 end) FROM img_obj_att as t1 inner JOIN att_classES as t2 ON t1.att_class_ID = t2.att_class_ID WHERE t1.img_id = 2347915,"CREATE TABLE `img_obj_att` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `img_obj_att`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `att_classES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `att_classES`:
0, building s
1, indoors
2, cluttered

","CREATE TABLE `ATT_CLASSES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `ATT_CLASSES`:
0, building s
1, indoors
2, cluttered

CREATE TABLE `OBJ_CLASSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLASSES`:
0, awning
1, goggles
2, dot

CREATE TABLE `IMG_OBJ` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `IMG_OBJ`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `IMG_OBJ_ATT` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_OBJ_ATT`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `PRED_CLASSES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `PRED_CLASSES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `IMG_REL` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_REL`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

","img_obj_att, att_classES","att_classES.att_class, img_obj_att.att_class_ID, att_classES.att_class_ID, img_obj_att.img_id","ATT_CLASSES, OBJ_CLASSES, IMG_OBJ, IMG_OBJ_ATT, PRED_CLASSES, IMG_REL"
computer_student,Mention the person ID of faculty professor who taught course ID 104 and the course level.,"SELECT t1.p_id, t3.courselevel FROM person as t1 inner JOIN taughtby as t2 ON t1.p_id = t2.p_id inner JOIN course as t3 ON t3.course_id = t2.course_id WHERE t3.course_id = 104 AND t1.hasposition <> 0","CREATE TABLE `person` (
  p_id INTEGER,
  professor INTEGER,
  student INTEGER,
  hasPosition TEXT,
  inPhase TEXT,
  yearsInProgram TEXT
);
Sample rows from `person`:
3, 0, 1, 0, 0, 0
4, 0, 1, 0, 0, 0
5, 1, 0, Faculty, 0, 0

CREATE TABLE `taughtby` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `taughtby`:
0, 40
1, 40
2, 180

CREATE TABLE `course` (
  course_id INTEGER,
  courseLevel TEXT
);
Sample rows from `course`:
0, Level_500
1, Level_500
2, Level_500

","CREATE TABLE `course` (
  course_id INTEGER,
  courseLevel TEXT
);
Sample rows from `course`:
0, Level_500
1, Level_500
2, Level_500

CREATE TABLE `person` (
  p_id INTEGER,
  professor INTEGER,
  student INTEGER,
  hasPosition TEXT,
  inPhase TEXT,
  yearsInProgram TEXT
);
Sample rows from `person`:
3, 0, 1, 0, 0, 0
4, 0, 1, 0, 0, 0
5, 1, 0, Faculty, 0, 0

CREATE TABLE `advisedBy` (
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id),
  p_id_dummy INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `advisedBy`:
96, 5
118, 5
183, 5

CREATE TABLE `taughtBy` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `taughtBy`:
0, 40
1, 40
2, 180

","person, taughtby, course","person.p_id, course.courselevel, taughtby.p_id, course.course_id, taughtby.course_id, person.hasposition","course, person, advisedBy, taughtBy"
law_episode,What was the rating of the episodes that Jace Alexander worked on?,SELECT t1.rating FROM episode as t1 inner JOIN credit as t2 ON t1.episode_id = t2.episode_id inner JOIN person as t3 ON t3.person_id = t2.person_id WHERE t3.name = 'Jace Alexander',"CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `credit` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  person_id TEXT PRIMARY KEY REFERENCES Person(person_id),
  category TEXT,
  role TEXT,
  credited TEXT
);
Sample rows from `credit`:
tt0629204, nm0226352, Additional Crew, technical advisor, true
tt0629204, nm0506974, Additional Crew, production accountant, true
tt0629204, nm4103116, Additional Crew, production accountant, true

CREATE TABLE `person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
tt0629239, nun
tt0629239, priest
tt0629420, police officer

CREATE TABLE `Person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  series TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  person_id TEXT REFERENCES Person(person_id),
  role TEXT,
  result TEXT
);
Sample rows from `Award`:
258, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0937725, None, Winner
259, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0792309, None, Winner
260, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0049569, None, Winner

CREATE TABLE `Credit` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  person_id TEXT PRIMARY KEY REFERENCES Person(person_id),
  category TEXT,
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
tt0629204, nm0226352, Additional Crew, technical advisor, true
tt0629204, nm0506974, Additional Crew, production accountant, true
tt0629204, nm4103116, Additional Crew, production accountant, true

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
tt0629204, 10, 36, 17.7
tt0629204, 9, 39, 19.2
tt0629204, 8, 64, 31.5

","episode, credit, person","episode.rating, episode.episode_id, credit.episode_id, person.person_id, credit.person_id, person.name","Episode, Keyword, Person, Award, Credit, Vote"
world,How many cities are there in the country with the surface area of 652090?,"SELECT t2.name, COUNT(t1.name) FROM city as t1 inner JOIN country as t2 ON t1.countrycode = t2.code WHERE t2.surfacearea = 652090 GROUP BY t2.name","CREATE TABLE `city` (
  ID INTEGER,
  Name TEXT,
  CountryCode TEXT REFERENCES Country(Code),
  District TEXT,
  Population INTEGER
);
Sample rows from `city`:
1, Kabul, AFG, Kabol, 1780000
2, Qandahar, AFG, Qandahar, 237500
3, Herat, AFG, Herat, 186800

CREATE TABLE `country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
City, 4079

CREATE TABLE `City` (
  ID INTEGER,
  Name TEXT,
  CountryCode TEXT REFERENCES Country(Code),
  District TEXT,
  Population INTEGER
);
Sample rows from `City`:
1, Kabul, AFG, Kabol, 1780000
2, Qandahar, AFG, Qandahar, 237500
3, Herat, AFG, Herat, 186800

CREATE TABLE `Country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `Country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

CREATE TABLE `CountryLanguage` (
  CountryCode TEXT PRIMARY KEY REFERENCES Country(Code),
  Language TEXT PRIMARY KEY,
  IsOfficial TEXT,
  Percentage REAL
);
Sample rows from `CountryLanguage`:
ABW, Dutch, T, 5.3
ABW, English, F, 9.5
ABW, Papiamento, F, 76.7

","city, country","country.name, city.name, city.countrycode, country.code, country.surfacearea","sqlite_sequence, City, Country, CountryLanguage"
menu,What is the highest price of dishes with menu item ID 1 to 5?,SELECT t2.price FROM dish as t1 inner JOIN menuitem as t2 ON t1.id = t2.dish_id WHERE t2.id BETWEEN 1 AND 5 ORDER BY t2.price DESC LIMIT 1,"CREATE TABLE `dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

CREATE TABLE `menuitem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `menuitem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

","CREATE TABLE `Dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `Dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

CREATE TABLE `Menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `Menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

CREATE TABLE `MenuPage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `MenuPage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

CREATE TABLE `MenuItem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `MenuItem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

","dish, menuitem","menuitem.price, dish.id, menuitem.dish_id, menuitem.id","Dish, Menu, MenuPage, MenuItem"
public_review_platform,Write down the ID and opening day of a week for the business which are running in Black Canyon City.,"SELECT t2.business_id, t3.day_of_week FROM business as t1 inner JOIN business_Hours as t2 ON t1.business_id = t2.business_id inner JOIN days as t3 ON t2.day_id = t3.day_id WHERE t1.city = 'Black Canyon City' AND t1.active = 'true'","CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `days`:
1, Sunday
2, Monday
3, Tuesday

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","business, business_Hours, days","business_Hours.business_id, days.day_of_week, business.business_id, business_Hours.day_id, days.day_id, business.city, business.active","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
movielens,List all of the user ids and ages who rated movies with the id 1695219?,"SELECT t2.userid, t2.age FROM u2base as t1 inner JOIN users as t2 ON t1.userid = t2.userid WHERE t1.movieid = 1695219","CREATE TABLE `u2base` (
  userid INTEGER PRIMARY KEY REFERENCES users(None),
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  rating TEXT
);
Sample rows from `u2base`:
2, 1964242, 1
2, 2219779, 1
3, 1856939, 1

CREATE TABLE `users` (
  userid INTEGER,
  age TEXT,
  u_gender TEXT,
  occupation TEXT
);
Sample rows from `users`:
1, 1, F, 2
2, 56, M, 3
3, 25, M, 2

","CREATE TABLE `users` (
  userid INTEGER,
  age TEXT,
  u_gender TEXT,
  occupation TEXT
);
Sample rows from `users`:
1, 1, F, 2
2, 56, M, 3
3, 25, M, 2

CREATE TABLE `directors` (
  directorid INTEGER,
  d_quality INTEGER PRIMARY KEY,
  avg_revenue INTEGER PRIMARY KEY
);
Sample rows from `directors`:
67, 4, 1
92, 2, 3
284, 4, 0

CREATE TABLE `actors` (
  actorid INTEGER,
  a_gender TEXT,
  a_quality INTEGER
);
Sample rows from `actors`:
4, M, 4
16, M, 0
28, M, 4

CREATE TABLE `movies` (
  movieid INTEGER,
  year INTEGER,
  isEnglish TEXT,
  country TEXT,
  runningtime INTEGER
);
Sample rows from `movies`:
1672052, 3, T, other, 2
1672111, 4, T, other, 2
1672580, 4, T, USA, 3

CREATE TABLE `movies2actors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  actorid INTEGER PRIMARY KEY REFERENCES actors(None),
  cast_num INTEGER
);
Sample rows from `movies2actors`:
1672580, 981535, 0
1672946, 1094968, 0
1673647, 149985, 0

CREATE TABLE `movies2directors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  directorid INTEGER PRIMARY KEY REFERENCES directors(None),
  genre TEXT
);
Sample rows from `movies2directors`:
1672111, 54934, Action
1672946, 188940, Action
1679461, 179783, Action

CREATE TABLE `u2base` (
  userid INTEGER PRIMARY KEY REFERENCES users(None),
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  rating TEXT
);
Sample rows from `u2base`:
2, 1964242, 1
2, 2219779, 1
3, 1856939, 1

","u2base, users","users.userid, users.age, u2base.userid, u2base.movieid","users, directors, actors, movies, movies2actors, movies2directors, u2base"
books,"Among the books ordered by Lucas Wyldbore, how many of them are over 300 pages?",SELECT COUNT(*) FROM book as t1 inner JOIN order_line as t2 ON t1.book_id = t2.book_id inner JOIN cust_order as t3 ON t3.order_id = t2.order_id inner JOIN customer as t4 ON t4.customer_id = t3.customer_id WHERE t4.first_name = 'Lucas' AND t4.last_name = 'Wyldbore' AND t1.num_pages > 300,"CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","book, order_line, cust_order, customer","book.book_id, order_line.book_id, cust_order.order_id, order_line.order_id, customer.customer_id, cust_order.customer_id, customer.first_name, customer.last_name, book.num_pages","address_status, author, book_language, country, address, customer, customer_address, order_status, publisher, book, book_author, shipping_method, cust_order, sqlite_sequence, order_history, order_line"
restaurant,How many restaurants have not obtained a minimum of 3 in their reviews?,SELECT COUNT(id_restaurant) FROM generalinfo WHERE review < 3,"CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

","CREATE TABLE `geographic` (
  city TEXT PRIMARY KEY,
  county TEXT,
  region TEXT
);
Sample rows from `geographic`:
alameda, alameda county, bay area
alamo, contra costa county, bay area
albany, alameda county, bay area

CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

",generalinfo,"id_restaurant, review","geographic, generalinfo, location"
world,Which country has the smallest surface area and the most crowded city?,"SELECT t2.name FROM city as t1 inner JOIN country as t2 ON t1.countrycode = t2.code ORDER BY t1.population DESC, t2.surfacearea DESC LIMIT 1","CREATE TABLE `city` (
  ID INTEGER,
  Name TEXT,
  CountryCode TEXT REFERENCES Country(Code),
  District TEXT,
  Population INTEGER
);
Sample rows from `city`:
1, Kabul, AFG, Kabol, 1780000
2, Qandahar, AFG, Qandahar, 237500
3, Herat, AFG, Herat, 186800

CREATE TABLE `country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
City, 4079

CREATE TABLE `City` (
  ID INTEGER,
  Name TEXT,
  CountryCode TEXT REFERENCES Country(Code),
  District TEXT,
  Population INTEGER
);
Sample rows from `City`:
1, Kabul, AFG, Kabol, 1780000
2, Qandahar, AFG, Qandahar, 237500
3, Herat, AFG, Herat, 186800

CREATE TABLE `Country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `Country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

CREATE TABLE `CountryLanguage` (
  CountryCode TEXT PRIMARY KEY REFERENCES Country(Code),
  Language TEXT PRIMARY KEY,
  IsOfficial TEXT,
  Percentage REAL
);
Sample rows from `CountryLanguage`:
ABW, Dutch, T, 5.3
ABW, English, F, 9.5
ABW, Papiamento, F, 76.7

","city, country","country.name, city.countrycode, country.code, city.population, country.surfacearea","sqlite_sequence, City, Country, CountryLanguage"
chicago_crime,"Among the crimes, what percentage are severe?",SELECT cast(COUNT(case when index_code = 'I' then iucr_no else null end) as real) * 100 / COUNT(iucr_no) FROM iucr,"CREATE TABLE `iucr` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `iucr`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

","CREATE TABLE `Community_Area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `Community_Area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `District` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `District`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `FBI_Code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `FBI_Code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `IUCR` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `IUCR`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `Neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `Neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `Ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `Ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `Crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `Crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

",iucr,"index_code, iucr_no","Community_Area, District, FBI_Code, IUCR, Neighborhood, Ward, Crime"
authors,What is the title of the paper that was written by Cheng Huang and affiliated with Microsoft?,SELECT t1.title FROM paper as t1 inner JOIN paperAuthor as t2 ON t1.id = t2.paperid WHERE t2.name = 'Cheng Huang' AND t2.affiliation = 'Microsoft',"CREATE TABLE `paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `paperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `paperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

","CREATE TABLE `Author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `Author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

CREATE TABLE `Conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

CREATE TABLE `Journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `Paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `Paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `PaperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `PaperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

","paper, paperAuthor","paper.title, paper.id, paperAuthor.paperid, paperAuthor.name, paperAuthor.affiliation","Author, Conference, Journal, Paper, PaperAuthor"
app_store,"How many neutral reviews does the app ""Dino War: Rise of Beasts"" have?",SELECT COUNT(app) FROM user_reviews WHERE app = 'Dino War: Rise of Beasts' AND sentiment = 'Neutral',"CREATE TABLE `user_reviews` (
  App TEXT REFERENCES playstore(App),
  Translated_Review TEXT,
  Sentiment TEXT,
  Sentiment_Polarity TEXT,
  Sentiment_Subjectivity TEXT
);
Sample rows from `user_reviews`:
10 Best Foods for You, I like eat delicious food. That's I'm cooking food myself, case ""10 Best Foods"" helps lot, also ""Best Before (Shelf Life)"", Positive, 1.0, 0.5333333333333333
10 Best Foods for You, This help eating healthy exercise regular basis, Positive, 0.25, 0.28846153846153844
10 Best Foods for You, nan, nan, nan, nan

","CREATE TABLE `playstore` (
  App TEXT,
  Category TEXT,
  Rating REAL,
  Reviews INTEGER,
  Size TEXT,
  Installs TEXT,
  Type TEXT,
  Price TEXT,
  Content Rating TEXT,
  Genres TEXT
);
Sample rows from `playstore`:
Photo Editor & Candy Camera & Grid & ScrapBook, ART_AND_DESIGN, 4.1, 159, 19M, 10,000+, Free, 0, Everyone, Art & Design
Coloring book moana, ART_AND_DESIGN, 3.9, 967, 14M, 500,000+, Free, 0, Everyone, Art & Design;Pretend Play
U Launcher Lite – FREE Live Cool Themes, Hide Apps, ART_AND_DESIGN, 4.7, 87510, 8.7M, 5,000,000+, Free, 0, Everyone, Art & Design

CREATE TABLE `user_reviews` (
  App TEXT REFERENCES playstore(App),
  Translated_Review TEXT,
  Sentiment TEXT,
  Sentiment_Polarity TEXT,
  Sentiment_Subjectivity TEXT
);
Sample rows from `user_reviews`:
10 Best Foods for You, I like eat delicious food. That's I'm cooking food myself, case ""10 Best Foods"" helps lot, also ""Best Before (Shelf Life)"", Positive, 1.0, 0.5333333333333333
10 Best Foods for You, This help eating healthy exercise regular basis, Positive, 0.25, 0.28846153846153844
10 Best Foods for You, nan, nan, nan, nan

",user_reviews,"app, sentiment","playstore, user_reviews"
public_review_platform,Please list all business IDs in Mesa city that review stars of over 3.,SELECT t1.business_id FROM business as t1 inner JOIN reviews as t2 ON t1.business_id = t2.business_id WHERE t1.city LIKE 'Mesa' AND t2.review_stars > 3 GROUP BY t1.business_id,"CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","business, reviews","business.business_id, reviews.business_id, business.city, reviews.review_stars","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
disney,Who directed the most popular movie?,"SELECT t2.director FROM movies_total_gross as t1 inner JOIN director as t2 ON t1.movie_title = t2.name ORDER BY CasT(replace(trim(t1.total_gross, '$'), ',', '') as real) DESC LIMIT 1","CREATE TABLE `movies_total_gross` (
  movie_title TEXT PRIMARY KEY REFERENCES characters(movie_title),
  release_date TEXT PRIMARY KEY,
  genre TEXT,
  MPAA_rating TEXT,
  total_gross TEXT,
  inflation_adjusted_gross TEXT
);
Sample rows from `movies_total_gross`:
Snow White and the Seven Dwarfs, Dec 21, 1937, Musical, G, $184,925,485, $5,228,953,251
Pinocchio, Feb 9, 1940, Adventure, G, $84,300,000, $2,188,229,052
Fantasia, Nov 13, 1940, Musical, G, $83,320,000, $2,187,090,808

CREATE TABLE `director` (
  name TEXT PRIMARY KEY REFERENCES characters(movie_title),
  director TEXT
);
Sample rows from `director`:
Snow White and the Seven Dwarfs, David Hand
Pinocchio, Ben Sharpsteen
Fantasia, full credits

","CREATE TABLE `characters` (
  movie_title TEXT PRIMARY KEY,
  release_date TEXT,
  hero TEXT REFERENCES voice-actors(character),
  villian TEXT,
  song TEXT
);
Sample rows from `characters`:
Snow White and the Seven Dwarfs, 21-Dec-37, Snow White, Evil Queen, Some Day My Prince Will Come
Pinocchio, 7-Feb-40, Pinocchio, Stromboli, When You Wish upon a Star
Fantasia, 13-Nov-40, None, Chernabog, None

CREATE TABLE `director` (
  name TEXT PRIMARY KEY REFERENCES characters(movie_title),
  director TEXT
);
Sample rows from `director`:
Snow White and the Seven Dwarfs, David Hand
Pinocchio, Ben Sharpsteen
Fantasia, full credits

CREATE TABLE `movies_total_gross` (
  movie_title TEXT PRIMARY KEY REFERENCES characters(movie_title),
  release_date TEXT PRIMARY KEY,
  genre TEXT,
  MPAA_rating TEXT,
  total_gross TEXT,
  inflation_adjusted_gross TEXT
);
Sample rows from `movies_total_gross`:
Snow White and the Seven Dwarfs, Dec 21, 1937, Musical, G, $184,925,485, $5,228,953,251
Pinocchio, Feb 9, 1940, Adventure, G, $84,300,000, $2,188,229,052
Fantasia, Nov 13, 1940, Musical, G, $83,320,000, $2,187,090,808

CREATE TABLE `revenue` (
  Year INTEGER,
  Studio Entertainment[NI 1] REAL,
  Disney Consumer Products[NI 2] REAL,
  Disney Interactive[NI 3][Rev 1] INTEGER,
  Walt Disney Parks and Resorts REAL,
  Disney Media Networks TEXT,
  Total INTEGER
);
Sample rows from `revenue`:
1991, 2593.0, 724.0, None, 2794.0, None, 6111
1992, 3115.0, 1081.0, None, 3306.0, None, 7502
1993, 3673.4, 1415.1, None, 3440.7, None, 8529

CREATE TABLE `voice-actors` (
  character TEXT PRIMARY KEY,
  voice-actor TEXT,
  movie TEXT REFERENCES characters(movie_title)
);
Sample rows from `voice-actors`:
Abby Mallard, Joan Cusack, Chicken Little
Abigail Gabble, Monica Evans, The Aristocats
Abis Mal, Jason Alexander, The Return of Jafar

","movies_total_gross, director","director.director, movies_total_gross.movie_title, director.name, movies_total_gross.total_gross","characters, director, movies_total_gross, revenue, voice-actors"
menu,Calculate the total price of items for menu with ID 12882.,SELECT SUM(t2.price) FROM menupage as t1 inner JOIN menuitem as t2 ON t1.id = t2.menu_page_id WHERE t1.menu_id = 12882,"CREATE TABLE `menupage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `menupage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

CREATE TABLE `menuitem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `menuitem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

","CREATE TABLE `Dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `Dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

CREATE TABLE `Menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `Menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

CREATE TABLE `MenuPage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `MenuPage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

CREATE TABLE `MenuItem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `MenuItem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

","menupage, menuitem","menuitem.price, menupage.id, menuitem.menu_page_id, menupage.menu_id","Dish, Menu, MenuPage, MenuItem"
video_games,Provide the genre name of the genre ID 3.,SELECt t.genre_name FROM genre as t WHERE t.id = 3,"CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

","CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

",genre,"genre.genre_name, genre.id","genre, game, platform, publisher, game_publisher, game_platform, region, region_sales"
public_review_platform,"How many businesses in Phoenix, Arizona is attributed to waiter service?",SELECT COUNT(t1.business_id) FROM business as t1 inner JOIN business_attributes as t2 ON t1.business_id = t2.business_id inner JOIN attributes as t3 ON t2.attribute_id = t3.attribute_id WHERE t1.city LIKE 'Phoenix' AND t3.attribute_name LIKE 'waiter_service' AND t2.attribute_id = 2,"CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `business_attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `business_attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","business, business_attributes, attributes","business.business_id, business_attributes.business_id, business_attributes.attribute_id, attributes.attribute_id, business.city, attributes.attribute_name","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
simpson_episodes,List down the episode ID of episodes aired in 2008 with 5 stars and below.,"SELECT DISTINCT t1.episode_id FROM episode as t1 inner JOIN vote as t2 ON t2.episode_id = t1.episode_id WHERE substr(t1.air_date, 1, 4) = '2008' AND t2.stars < 5;","CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","episode, vote","episode.episode_id, vote.episode_id, episode.air_date, vote.stars","Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
menu,What is the occasion for menu with ID 12463?,SELECT occasion FROM menu WHERE id = 12463,"CREATE TABLE `menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

","CREATE TABLE `Dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `Dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

CREATE TABLE `Menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `Menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

CREATE TABLE `MenuPage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `MenuPage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

CREATE TABLE `MenuItem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `MenuItem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

",menu,"occasion, id","Dish, Menu, MenuPage, MenuItem"
food_inspection_2,What is the full name of the employee who gave the highest amount of fine of all time?,"SELECt t.first_name, t.last_name FROM ( SELECt t1.first_name, t1.last_name, SUM(t3.fine) FROM employee as t1 inner JOIN inspection as t2 ON t1.employee_id = t2.employee_id inner JOIN violation as t3 ON t2.inspection_id = t3.inspection_id GROUP BY t1.first_name, t1.last_name ORDER BY SUM(t3.fine) DESC LIMIt 1 ) t","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

","employee, inspection, violation","employee.first_name, employee.last_name, violation.fine, employee.employee_id, inspection.employee_id, inspection.inspection_id, violation.inspection_id","employee, establishment, inspection, inspection_point, violation"
retail_world,What are the product names of Exotic Liquids?,SELECT t1.productname FROM products as t1 inner JOIN suppliers as t2 ON t1.supplierid = t2.supplierid WHERE t2.companyname = 'Exotic Liquids',"CREATE TABLE `products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

","products, suppliers","products.productname, products.supplierid, suppliers.supplierid, suppliers.companyname","sqlite_sequence, Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails"
video_games,Calculate the number of game publisher IDs for games released in 1984.,SELECt COUNT(t.game_publisher_id) FROM game_platform as t WHERE t.release_year = 1984,"CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

","CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

",game_platform,"game_platform.game_publisher_id, game_platform.release_year","genre, game, platform, publisher, game_publisher, game_platform, region, region_sales"
retail_world,Indicate the fax of the company Blondesddsl pre et fils in Strasbourg city.,SELECT fax FROM customers WHERE companyname = 'Blondesddsl pre et fils' AND city = 'Strasbourg',"CREATE TABLE `customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

",customers,"fax, companyname, city","sqlite_sequence, Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails"
image_and_language,How many images have a total of 10 attribute classes?,SELECT COUNT(img_id) FROM img_obj WHERE obj_class_id = 10,"CREATE TABLE `img_obj` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `img_obj`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

","CREATE TABLE `ATT_CLASSES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `ATT_CLASSES`:
0, building s
1, indoors
2, cluttered

CREATE TABLE `OBJ_CLASSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLASSES`:
0, awning
1, goggles
2, dot

CREATE TABLE `IMG_OBJ` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `IMG_OBJ`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `IMG_OBJ_ATT` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_OBJ_ATT`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `PRED_CLASSES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `PRED_CLASSES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `IMG_REL` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_REL`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

",img_obj,"img_id, obj_class_id","ATT_CLASSES, OBJ_CLASSES, IMG_OBJ, IMG_OBJ_ATT, PRED_CLASSES, IMG_REL"
regional_sales,Calculate the average net profit of bar tools which has ordered quantity exceed 5.,"SELECT SUM(replace(t1.`unit price`, ',', '') - replace(t1.`unit cost`, ',', '')) / COUNT(t1.ordernumber) FROM `sales orders` as t1 inner JOIN products as t2 ON t2.productid = t1._productid WHERE t2.`product name` = 'Bar Tools' AND t1.`order quantity` > 5","CREATE TABLE `sales orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `sales orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

CREATE TABLE `products` (
  ProductID INTEGER,
  Product Name TEXT
);
Sample rows from `products`:
1, Cookware
2, Photo Frames
3, Table Lamps

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  Customer Names TEXT
);
Sample rows from `Customers`:
1, Avon Corp
2, WakeFern 
3, Elorac, Corp

CREATE TABLE `Products` (
  ProductID INTEGER,
  Product Name TEXT
);
Sample rows from `Products`:
1, Cookware
2, Photo Frames
3, Table Lamps

CREATE TABLE `Regions` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `Regions`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `Sales Team` (
  SalesTeamID INTEGER,
  Sales Team TEXT,
  Region TEXT
);
Sample rows from `Sales Team`:
1, Adam Hernandez, Northeast
2, Keith Griffin, Northeast
3, Jerry Green, West

CREATE TABLE `Store Locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `Store Locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

CREATE TABLE `Sales Orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `Sales Orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

","sales orders, products","sales orders.unit price, sales orders.unit cost, sales orders.ordernumber, products.productid, sales orders._productid, products.product name, sales orders.order quantity","Customers, Products, Regions, Sales Team, Store Locations, Sales Orders"
authors,List the short name of all conferences whose full name begins with International Symposium.,SELECT shortname FROM conference WHERE fullname LIKE 'International Symposium%',"CREATE TABLE `conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

","CREATE TABLE `Author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `Author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

CREATE TABLE `Conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

CREATE TABLE `Journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `Paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `Paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `PaperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `PaperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

",conference,"shortname, fullname","Author, Conference, Journal, Paper, PaperAuthor"
university,Name the most famous university in Argentina.,SELECT t1.university_name FROM university as t1 inner JOIN university_ranking_year as t2 ON t1.id = t2.university_id inner JOIN country as t3 ON t3.id = t1.country_id WHERE t3.country_name = 'Argentina' GROUP BY t1.university_name ORDER BY SUM(t2.score) DESC LIMIT 1,"CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

","CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

CREATE TABLE `ranking_system` (
  id INTEGER,
  system_name TEXT
);
Sample rows from `ranking_system`:
1, Times Higher Education World University Ranking
2, Shanghai Ranking
3, Center for World University Rankings

CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

","university, university_ranking_year, country","university.university_name, university.id, university_ranking_year.university_id, country.id, university.country_id, country.country_name, university_ranking_year.score","country, ranking_system, ranking_criteria, university, university_ranking_year, university_year"
law_episode,"How many votes did the episode titled ""Cherished"" get in total?",SELECT SUM(t2.votes) FROM episode as t1 inner JOIN vote as t2 ON t1.episode_id = t2.episode_id WHERE t1.title = 'Cherished',"CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `vote`:
tt0629204, 10, 36, 17.7
tt0629204, 9, 39, 19.2
tt0629204, 8, 64, 31.5

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
tt0629239, nun
tt0629239, priest
tt0629420, police officer

CREATE TABLE `Person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  series TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  person_id TEXT REFERENCES Person(person_id),
  role TEXT,
  result TEXT
);
Sample rows from `Award`:
258, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0937725, None, Winner
259, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0792309, None, Winner
260, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0049569, None, Winner

CREATE TABLE `Credit` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  person_id TEXT PRIMARY KEY REFERENCES Person(person_id),
  category TEXT,
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
tt0629204, nm0226352, Additional Crew, technical advisor, true
tt0629204, nm0506974, Additional Crew, production accountant, true
tt0629204, nm4103116, Additional Crew, production accountant, true

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
tt0629204, 10, 36, 17.7
tt0629204, 9, 39, 19.2
tt0629204, 8, 64, 31.5

","episode, vote","vote.votes, episode.episode_id, vote.episode_id, episode.title","Episode, Keyword, Person, Award, Credit, Vote"
cs_semester,List the capability of research postgraduate students with an intellegence level of 4 and above.,SELECT t1.capability FROM ra as t1 inner JOIN student as t2 ON t1.student_id = t2.student_id WHERE t2.type = 'RPG' AND t2.intelligence >= 4,"CREATE TABLE `ra` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `ra`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

","CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

CREATE TABLE `prof` (
  prof_id INTEGER,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  popularity INTEGER,
  teachingability INTEGER,
  graduate_from TEXT
);
Sample rows from `prof`:
1, Male, Nathaniel, Pigford, npigford0@hku.hk, 3, 5, University of Washington
2, Male, Zhihua, Zhou, zzhihua@hku.hk, 2, 1, Beijing Polytechnic University
3, Male, Ogdon, Zywicki, ozywicki2@hku.hk, 2, 2, University of Boston

CREATE TABLE `RA` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `RA`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

","ra, student","ra.capability, ra.student_id, student.student_id, student.type, student.intelligence","course, prof, RA, registration, student"
cs_semester,What is the average satisfying degree of the course Machine Learning Theory?,SELECT cast(SUM(t1.sat) as real) / COUNT(t1.student_id) FROM registration as t1 inner JOIN course as t2 ON t1.course_id = t2.course_id WHERE t2.name = 'Machine Learning Theory',"CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

","CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

CREATE TABLE `prof` (
  prof_id INTEGER,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  popularity INTEGER,
  teachingability INTEGER,
  graduate_from TEXT
);
Sample rows from `prof`:
1, Male, Nathaniel, Pigford, npigford0@hku.hk, 3, 5, University of Washington
2, Male, Zhihua, Zhou, zzhihua@hku.hk, 2, 1, Beijing Polytechnic University
3, Male, Ogdon, Zywicki, ozywicki2@hku.hk, 2, 2, University of Boston

CREATE TABLE `RA` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `RA`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

","registration, course","registration.sat, registration.student_id, registration.course_id, course.course_id, course.name","course, prof, RA, registration, student"
european_football_1,"How many Scottish League One games took place on the day that ""Pro Vercelli"" and ""Pescara""had a 5-2 game?",SELECT COUNT(t1.date) FROM matchs as t1 inner JOIN divisions as t2 ON t1.div = t2.division WHERE t2.name = 'Scottish League One' AND t1.date = ( SELECT date FROM matchs WHERE fthg = 5 AND ftag = 2 AND hometeam = 'Pro Vercelli' AND awayteam = 'Pescara' ),"CREATE TABLE `matchs` (
  Div TEXT REFERENCES divisions(division),
  Date DATE,
  HomeTeam TEXT,
  AwayTeam TEXT,
  FTHG INTEGER,
  FTAG INTEGER,
  FTR TEXT,
  season INTEGER
);
Sample rows from `matchs`:
B1, 2020-08-08, Club Brugge, Charleroi, 0, 1, A, 2021
B1, 2020-08-08, Antwerp, Mouscron, 1, 1, D, 2021
B1, 2020-08-08, Standard, Cercle Brugge, 1, 0, H, 2021

CREATE TABLE `divisions` (
  division TEXT PRIMARY KEY,
  name TEXT,
  country TEXT
);
Sample rows from `divisions`:
B1, Division 1A, Belgium
D1, Bundesliga, Deutschland
D2, 2. Bundesliga, Deutschland

","CREATE TABLE `divisions` (
  division TEXT PRIMARY KEY,
  name TEXT,
  country TEXT
);
Sample rows from `divisions`:
B1, Division 1A, Belgium
D1, Bundesliga, Deutschland
D2, 2. Bundesliga, Deutschland

CREATE TABLE `matchs` (
  Div TEXT REFERENCES divisions(division),
  Date DATE,
  HomeTeam TEXT,
  AwayTeam TEXT,
  FTHG INTEGER,
  FTAG INTEGER,
  FTR TEXT,
  season INTEGER
);
Sample rows from `matchs`:
B1, 2020-08-08, Club Brugge, Charleroi, 0, 1, A, 2021
B1, 2020-08-08, Antwerp, Mouscron, 1, 1, D, 2021
B1, 2020-08-08, Standard, Cercle Brugge, 1, 0, H, 2021

","matchs, divisions","matchs.date, matchs.div, divisions.division, divisions.name, fthg, ftag, hometeam, awayteam","divisions, matchs"
shakespeare,"Give the abbreviation name for the character ""Earl of Westmoreland"".",SELECT DISTINCT abbrev FROM characters WHERE charname = 'Earl of Westmoreland',"CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

","CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
chapters, 19648
characters, 1266
paragraphs, 666327

CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

",characters,"abbrev, charname","chapters, sqlite_sequence, characters, paragraphs, works"
simpson_episodes,How many awards had been held in 2009?,"SELECT COUNT(award_id) FROM award WHERE substr(year, 1, 4) = '2009';","CREATE TABLE `award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

",award,award_id,"Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
world,"What are the cities for country called ""Â´Uman"" in local name.",SELECT t1.name FROM city as t1 inner JOIN country as t2 ON t1.countrycode = t2.code WHERE t2.Localname = 'Â´Uman',"CREATE TABLE `city` (
  ID INTEGER,
  Name TEXT,
  CountryCode TEXT REFERENCES Country(Code),
  District TEXT,
  Population INTEGER
);
Sample rows from `city`:
1, Kabul, AFG, Kabol, 1780000
2, Qandahar, AFG, Qandahar, 237500
3, Herat, AFG, Herat, 186800

CREATE TABLE `country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
City, 4079

CREATE TABLE `City` (
  ID INTEGER,
  Name TEXT,
  CountryCode TEXT REFERENCES Country(Code),
  District TEXT,
  Population INTEGER
);
Sample rows from `City`:
1, Kabul, AFG, Kabol, 1780000
2, Qandahar, AFG, Qandahar, 237500
3, Herat, AFG, Herat, 186800

CREATE TABLE `Country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `Country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

CREATE TABLE `CountryLanguage` (
  CountryCode TEXT PRIMARY KEY REFERENCES Country(Code),
  Language TEXT PRIMARY KEY,
  IsOfficial TEXT,
  Percentage REAL
);
Sample rows from `CountryLanguage`:
ABW, Dutch, T, 5.3
ABW, English, F, 9.5
ABW, Papiamento, F, 76.7

","city, country","city.name, city.countrycode, country.code, country.Localname","sqlite_sequence, City, Country, CountryLanguage"
ice_hockey_draft,How many players who were drafted by the Toronto Maple Leafs have played over 300 games in their first 7 years of the NHL career?,SELECT COUNT(eliteid) FROM playerinfo WHERE overallby = 'Toronto Maple Leafs' AND sum_7yr_gp > 300,"CREATE TABLE `playerinfo` (
  ELITEID INTEGER,
  PlayerName TEXT,
  birthdate TEXT,
  birthyear DATE,
  birthmonth INTEGER,
  birthday INTEGER,
  birthplace TEXT,
  nation TEXT,
  height INTEGER REFERENCES height_info(height_id),
  weight INTEGER REFERENCES weight_info(weight_id),
  position_info TEXT,
  shoots TEXT,
  draftyear INTEGER,
  draftround INTEGER,
  overall INTEGER,
  overallby TEXT,
  CSS_rank INTEGER,
  sum_7yr_GP INTEGER,
  sum_7yr_TOI INTEGER,
  GP_greater_than_0 TEXT
);
Sample rows from `playerinfo`:
9, David Bornhammar, 1981-06-15, 1981, 6, 15, Lidingo, SWE, Sweden, 73, 198, D, L, 1999, 7, 192, Washington Capitals, 192, 0, 0, no
18, David Printz, 1980-07-24, 1980, 7, 24, Stockholm, SWE, Sweden, 76, 220, D, L, 2001, 7, 225, Philadelphia Flyers, 176, 13, 84, yes
27, Yared Hagos, 1983-03-27, 1983, 3, 27, Stockholm, SWE, Sweden, 73, 218, C, L, 2001, 3, 70, Dallas Stars, 24, 0, 0, no

","CREATE TABLE `height_info` (
  height_id INTEGER,
  height_in_cm INTEGER,
  height_in_inch TEXT
);
Sample rows from `height_info`:
65, 165, 5'5""
67, 170, 5'7""
68, 172, 5'8""

CREATE TABLE `weight_info` (
  weight_id INTEGER,
  weight_in_kg INTEGER,
  weight_in_lbs INTEGER
);
Sample rows from `weight_info`:
154, 70, 154
159, 72, 159
161, 73, 161

CREATE TABLE `PlayerInfo` (
  ELITEID INTEGER,
  PlayerName TEXT,
  birthdate TEXT,
  birthyear DATE,
  birthmonth INTEGER,
  birthday INTEGER,
  birthplace TEXT,
  nation TEXT,
  height INTEGER REFERENCES height_info(height_id),
  weight INTEGER REFERENCES weight_info(weight_id),
  position_info TEXT,
  shoots TEXT,
  draftyear INTEGER,
  draftround INTEGER,
  overall INTEGER,
  overallby TEXT,
  CSS_rank INTEGER,
  sum_7yr_GP INTEGER,
  sum_7yr_TOI INTEGER,
  GP_greater_than_0 TEXT
);
Sample rows from `PlayerInfo`:
9, David Bornhammar, 1981-06-15, 1981, 6, 15, Lidingo, SWE, Sweden, 73, 198, D, L, 1999, 7, 192, Washington Capitals, 192, 0, 0, no
18, David Printz, 1980-07-24, 1980, 7, 24, Stockholm, SWE, Sweden, 76, 220, D, L, 2001, 7, 225, Philadelphia Flyers, 176, 13, 84, yes
27, Yared Hagos, 1983-03-27, 1983, 3, 27, Stockholm, SWE, Sweden, 73, 218, C, L, 2001, 3, 70, Dallas Stars, 24, 0, 0, no

CREATE TABLE `SeasonStatus` (
  ELITEID INTEGER REFERENCES PlayerInfo(ELITEID),
  SEASON TEXT,
  TEAM TEXT,
  LEAGUE TEXT,
  GAMETYPE TEXT,
  GP INTEGER,
  G INTEGER,
  A INTEGER,
  P INTEGER,
  PIM INTEGER,
  PLUSMINUS INTEGER
);
Sample rows from `SeasonStatus`:
3667, 1997-1998, Rimouski Oceanic, QMJHL, Regular Season, 58, 44, 71, 115, 117, 27
3667, 1997-1998, Rimouski Oceanic, QMJHL, Playoffs, 18, 15, 26, 41, 46, 4
3667, 1997-1998, Canada U20, WJC-20, Regular Season, 7, 1, 1, 2, 4, 0

",playerinfo,"eliteid, overallby, sum_7yr_gp","height_info, weight_info, PlayerInfo, SeasonStatus"
music_tracker,What is the release title of the single that was released by Ron Hunt in 1979 that was downloaded 239 times?,SELECT groupname FROM torrents WHERE artist LIKE 'ron hunt & ronnie g & the sm crew' AND groupyear = 1979 AND releasetype LIKE 'single' AND totalsnatched = 239,"CREATE TABLE `torrents` (
  groupName TEXT,
  totalSnatched INTEGER,
  artist TEXT,
  groupYear INTEGER,
  releaseType TEXT,
  groupId INTEGER,
  id INTEGER
);
Sample rows from `torrents`:
superappin&#39;, 239, grandmaster flash & the furious five, 1979, single, 720949, 0
spiderap / a corona jam, 156, ron hunt & ronnie g & the sm crew, 1979, single, 728752, 1
rapper&#39;s delight, 480, sugarhill gang, 1979, single, 18513, 2

","CREATE TABLE `torrents` (
  groupName TEXT,
  totalSnatched INTEGER,
  artist TEXT,
  groupYear INTEGER,
  releaseType TEXT,
  groupId INTEGER,
  id INTEGER
);
Sample rows from `torrents`:
superappin&#39;, 239, grandmaster flash & the furious five, 1979, single, 720949, 0
spiderap / a corona jam, 156, ron hunt & ronnie g & the sm crew, 1979, single, 728752, 1
rapper&#39;s delight, 480, sugarhill gang, 1979, single, 18513, 2

CREATE TABLE `tags` (
  index INTEGER PRIMARY KEY,
  id INTEGER REFERENCES torrents(None),
  tag TEXT
);
Sample rows from `tags`:
0, 0, 1970s
1, 0, funk
2, 0, disco

",torrents,"groupname, artist, groupyear, releasetype, totalsnatched","torrents, tags"
public_review_platform,Which business ID have the shortest business operating hours?,SELECT business_id FROM business_hours ORDER BY closing_time - opening_time LIMIT 1,"CREATE TABLE `business_hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `business_hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

",business_hours,"business_id, closing_time, opening_time","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
chicago_crime,"Among the incidents in January, 2018, how many of them were stated ""against Property"" in the FBI classification?","SELECT SUM(case when substr(t2.date, 5, 4) = '2018' then 1 else 0 end) FROM fbi_code as t1 inner JOIN crime as t2 ON t1.fbi_code_no = t2.fbi_code_no WHERE t1.crime_against = 'Property' AND substr(t2.date, 1, 1) = '1'","CREATE TABLE `fbi_code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `fbi_code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","CREATE TABLE `Community_Area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `Community_Area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `District` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `District`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `FBI_Code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `FBI_Code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `IUCR` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `IUCR`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `Neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `Neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `Ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `Ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `Crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `Crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","fbi_code, crime","crime.date, fbi_code.fbi_code_no, crime.fbi_code_no, fbi_code.crime_against","Community_Area, District, FBI_Code, IUCR, Neighborhood, Ward, Crime"
public_review_platform,"Among the active businesses located at Chandler, AZ, list the category and atrributes of business with a medium review count.","SELECT t3.category_name, t5.attribute_name FROM business as t1 inner JOIN business_categories ON t1.business_id = business_categories.business_id inner JOIN categories as t3 ON business_categories.category_id = t3.category_id inner JOIN business_attributes as t4 ON t1.business_id = t4.business_id inner JOIN attributes as t5 ON t4.attribute_id = t5.attribute_id WHERE t1.active LIKE 'TRUE' AND t1.state LIKE 'AZ' AND t1.city LIKE 'Chandler' AND t1.review_count LIKE 'Medium'","CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `business_categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `business_categories`:
1, 8
1, 143
2, 18

CREATE TABLE `categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `business_attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `business_attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","business, business_categories, categories, business_attributes, attributes","categories.category_name, attributes.attribute_name, business.business_id, business_categories.business_id, business_categories.category_id, categories.category_id, business_attributes.business_id, business_attributes.attribute_id, attributes.attribute_id, business.active, business.state, business.city, business.review_count","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
retail_world,Which employee has created the least order and please indicates the employee's title?,SELECT t1.title FROM employees as t1 inner JOIN orders as t2 ON t1.employeeid = t2.employeeid GROUP BY t1.title ORDER BY COUNT(t2.orderid) LIMIT 1,"CREATE TABLE `employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

","employees, orders","employees.title, employees.employeeid, orders.employeeid, orders.orderid","sqlite_sequence, Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails"
restaurant,In which region can you find the top 4 most popular restaurants?,SELECT t2.region FROM generalinfo as t1 inner JOIN geographic as t2 ON t1.city = t2.city ORDER BY t1.review DESC LIMIT 4,"CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

CREATE TABLE `geographic` (
  city TEXT PRIMARY KEY,
  county TEXT,
  region TEXT
);
Sample rows from `geographic`:
alameda, alameda county, bay area
alamo, contra costa county, bay area
albany, alameda county, bay area

","CREATE TABLE `geographic` (
  city TEXT PRIMARY KEY,
  county TEXT,
  region TEXT
);
Sample rows from `geographic`:
alameda, alameda county, bay area
alamo, contra costa county, bay area
albany, alameda county, bay area

CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

","generalinfo, geographic","geographic.region, generalinfo.city, geographic.city, generalinfo.review","geographic, generalinfo, location"
codebase_comments,"For the solution of the most 'sw' methods, what is its path?",SELECT DISTINCT t1.path FROM solution as t1 inner JOIN method as t2 ON t1.id = t2.solutionid WHERE t2.lang = 'sw',"CREATE TABLE `solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

CREATE TABLE `method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Method, 10860640
MethodParameter, 17514858
Repo, 156550

CREATE TABLE `Method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `Method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

CREATE TABLE `MethodParameter` (
  Id INTEGER,
  MethodId TEXT,
  Type TEXT,
  Name TEXT
);
Sample rows from `MethodParameter`:
1, 1, System.String, data
2, 2, System.Int32, i
3, 2, System.Int32, declstartpos

CREATE TABLE `Repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `Repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

CREATE TABLE `Solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `Solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

","solution, method","solution.path, solution.id, method.solutionid, method.lang","sqlite_sequence, Method, MethodParameter, Repo, Solution"
music_tracker,"Among the artists with the id from 10 to 30. Which artist released the product with the tag ""funk"" in 1980?",SELECT t1.artist FROM torrents as t1 inner JOIN tags as t2 ON t1.id = t2.id WHERE t2.tag = 'funk' AND t1.groupyear = 1980 AND t1.id BETWEEN 10 AND 30,"CREATE TABLE `torrents` (
  groupName TEXT,
  totalSnatched INTEGER,
  artist TEXT,
  groupYear INTEGER,
  releaseType TEXT,
  groupId INTEGER,
  id INTEGER
);
Sample rows from `torrents`:
superappin&#39;, 239, grandmaster flash & the furious five, 1979, single, 720949, 0
spiderap / a corona jam, 156, ron hunt & ronnie g & the sm crew, 1979, single, 728752, 1
rapper&#39;s delight, 480, sugarhill gang, 1979, single, 18513, 2

CREATE TABLE `tags` (
  index INTEGER PRIMARY KEY,
  id INTEGER REFERENCES torrents(None),
  tag TEXT
);
Sample rows from `tags`:
0, 0, 1970s
1, 0, funk
2, 0, disco

","CREATE TABLE `torrents` (
  groupName TEXT,
  totalSnatched INTEGER,
  artist TEXT,
  groupYear INTEGER,
  releaseType TEXT,
  groupId INTEGER,
  id INTEGER
);
Sample rows from `torrents`:
superappin&#39;, 239, grandmaster flash & the furious five, 1979, single, 720949, 0
spiderap / a corona jam, 156, ron hunt & ronnie g & the sm crew, 1979, single, 728752, 1
rapper&#39;s delight, 480, sugarhill gang, 1979, single, 18513, 2

CREATE TABLE `tags` (
  index INTEGER PRIMARY KEY,
  id INTEGER REFERENCES torrents(None),
  tag TEXT
);
Sample rows from `tags`:
0, 0, 1970s
1, 0, funk
2, 0, disco

","torrents, tags","torrents.artist, torrents.id, tags.id, tags.tag, torrents.groupyear","torrents, tags"
app_store,"What is the rating for ""Draw A Stickman""?",SELECT rating FROM playstore WHERE app = 'Draw A Stickman',"CREATE TABLE `playstore` (
  App TEXT,
  Category TEXT,
  Rating REAL,
  Reviews INTEGER,
  Size TEXT,
  Installs TEXT,
  Type TEXT,
  Price TEXT,
  Content Rating TEXT,
  Genres TEXT
);
Sample rows from `playstore`:
Photo Editor & Candy Camera & Grid & ScrapBook, ART_AND_DESIGN, 4.1, 159, 19M, 10,000+, Free, 0, Everyone, Art & Design
Coloring book moana, ART_AND_DESIGN, 3.9, 967, 14M, 500,000+, Free, 0, Everyone, Art & Design;Pretend Play
U Launcher Lite – FREE Live Cool Themes, Hide Apps, ART_AND_DESIGN, 4.7, 87510, 8.7M, 5,000,000+, Free, 0, Everyone, Art & Design

","CREATE TABLE `playstore` (
  App TEXT,
  Category TEXT,
  Rating REAL,
  Reviews INTEGER,
  Size TEXT,
  Installs TEXT,
  Type TEXT,
  Price TEXT,
  Content Rating TEXT,
  Genres TEXT
);
Sample rows from `playstore`:
Photo Editor & Candy Camera & Grid & ScrapBook, ART_AND_DESIGN, 4.1, 159, 19M, 10,000+, Free, 0, Everyone, Art & Design
Coloring book moana, ART_AND_DESIGN, 3.9, 967, 14M, 500,000+, Free, 0, Everyone, Art & Design;Pretend Play
U Launcher Lite – FREE Live Cool Themes, Hide Apps, ART_AND_DESIGN, 4.7, 87510, 8.7M, 5,000,000+, Free, 0, Everyone, Art & Design

CREATE TABLE `user_reviews` (
  App TEXT REFERENCES playstore(App),
  Translated_Review TEXT,
  Sentiment TEXT,
  Sentiment_Polarity TEXT,
  Sentiment_Subjectivity TEXT
);
Sample rows from `user_reviews`:
10 Best Foods for You, I like eat delicious food. That's I'm cooking food myself, case ""10 Best Foods"" helps lot, also ""Best Before (Shelf Life)"", Positive, 1.0, 0.5333333333333333
10 Best Foods for You, This help eating healthy exercise regular basis, Positive, 0.25, 0.28846153846153844
10 Best Foods for You, nan, nan, nan, nan

",playstore,"rating, app","playstore, user_reviews"
cs_semester,How many professors are more popular than Zhou Zhihua?,SELECT COUNT(prof_id) FROM prof WHERE popularity > ( SELECT popularity FROM prof WHERE first_name = 'Zhihua' AND last_name = 'Zhou' ),"CREATE TABLE `prof` (
  prof_id INTEGER,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  popularity INTEGER,
  teachingability INTEGER,
  graduate_from TEXT
);
Sample rows from `prof`:
1, Male, Nathaniel, Pigford, npigford0@hku.hk, 3, 5, University of Washington
2, Male, Zhihua, Zhou, zzhihua@hku.hk, 2, 1, Beijing Polytechnic University
3, Male, Ogdon, Zywicki, ozywicki2@hku.hk, 2, 2, University of Boston

","CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

CREATE TABLE `prof` (
  prof_id INTEGER,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  popularity INTEGER,
  teachingability INTEGER,
  graduate_from TEXT
);
Sample rows from `prof`:
1, Male, Nathaniel, Pigford, npigford0@hku.hk, 3, 5, University of Washington
2, Male, Zhihua, Zhou, zzhihua@hku.hk, 2, 1, Beijing Polytechnic University
3, Male, Ogdon, Zywicki, ozywicki2@hku.hk, 2, 2, University of Boston

CREATE TABLE `RA` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `RA`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

",prof,"prof_id, popularity, first_name, last_name","course, prof, RA, registration, student"
airline,"How many flights on average does American Airlines Inc. operate every day in August, 2018?",SELECT cast( SUM(case when t2.fl_date LIKE '2018/8%' then 1 else 0 end) as real) / 31 FROM airports as t1 inner JOIN airlines as t2 ON t1.code = t2.origin inner JOIN `air carriers` as t3 ON t2.op_carrier_airline_id = t3.code WHERE t3.description = 'American airlines Inc.: AA',"CREATE TABLE `airports` (
  Code TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `airports`:
01A, Afognak Lake, AK: Afognak Lake Airport
03A, Granite Mountain, AK: Bear Creek Mining Strip
04A, Lik, AK: Lik Mining Camp

CREATE TABLE `airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

CREATE TABLE `air carriers` (
  Code INTEGER,
  Description TEXT
);
Sample rows from `air carriers`:
19031, Mackey International Inc.: MAC
19032, Munz Northern Airlines Inc.: XY
19033, Cochise Airlines Inc.: COC

","CREATE TABLE `Air Carriers` (
  Code INTEGER,
  Description TEXT
);
Sample rows from `Air Carriers`:
19031, Mackey International Inc.: MAC
19032, Munz Northern Airlines Inc.: XY
19033, Cochise Airlines Inc.: COC

CREATE TABLE `Airports` (
  Code TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `Airports`:
01A, Afognak Lake, AK: Afognak Lake Airport
03A, Granite Mountain, AK: Bear Creek Mining Strip
04A, Lik, AK: Lik Mining Camp

CREATE TABLE `Airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `Airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

","airports, airlines, air carriers","airlines.fl_date, airports.code, airlines.origin, airlines.op_carrier_airline_id, air carriers.code, air carriers.description","Air Carriers, Airports, Airlines"
authors,"What are the different ways the name of the author, Randall Davis, is written on their papers?",SELECT DISTINCT t1.name FROM paperauthor as t1 inner JOIN author as t2 ON t1.authorid = t2.id WHERE t2.name = 'Randall Davis' AND t1.name != 'Randall Davis',"CREATE TABLE `paperauthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `paperauthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

CREATE TABLE `author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

","CREATE TABLE `Author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `Author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

CREATE TABLE `Conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

CREATE TABLE `Journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `Paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `Paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `PaperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `PaperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

","paperauthor, author","paperauthor.name, paperauthor.authorid, author.id, author.name","Author, Conference, Journal, Paper, PaperAuthor"
retail_world,What is the contact title for the person who supplied a product that is 10 boxes x 12 pieces.,SELECT t2.contacttitle FROM products as t1 inner JOIN suppliers as t2 ON t1.supplierid = t2.supplierid WHERE t1.quantityperunit = '10 boxes x 12 pieces',"CREATE TABLE `products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

","products, suppliers","suppliers.contacttitle, products.supplierid, suppliers.supplierid, products.quantityperunit","sqlite_sequence, Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails"
image_and_language,Define the onion's bounding box on image no. 285930.,"SELECT t1.x, t1.y, t1.w, t1.h FROM img_obj as t1 inner JOIN OBJ_CLasSES as t2 ON t1.OBJ_CLasS_ID = t2.OBJ_CLasS_ID whERE t1.img_id = 285930 AND t2.OBJ_CLasS = 'onion'","CREATE TABLE `img_obj` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `img_obj`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `OBJ_CLasSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLasSES`:
0, awning
1, goggles
2, dot

","CREATE TABLE `ATT_CLASSES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `ATT_CLASSES`:
0, building s
1, indoors
2, cluttered

CREATE TABLE `OBJ_CLASSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLASSES`:
0, awning
1, goggles
2, dot

CREATE TABLE `IMG_OBJ` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `IMG_OBJ`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `IMG_OBJ_ATT` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_OBJ_ATT`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `PRED_CLASSES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `PRED_CLASSES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `IMG_REL` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_REL`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

","img_obj, OBJ_CLasSES","img_obj.x, img_obj.y, img_obj.w, img_obj.h, img_obj.OBJ_CLasS_ID, OBJ_CLasSES.OBJ_CLasS_ID, img_obj.img_id, OBJ_CLasSES.OBJ_CLasS","ATT_CLASSES, OBJ_CLASSES, IMG_OBJ, IMG_OBJ_ATT, PRED_CLASSES, IMG_REL"
regional_sales,In which city is the store with the highest sales order unit price located?,"SELECT t2.`city name` FROM `sales orders` as t1 inner JOIN `store locations` as t2 ON t2.storeID = t1._storeID WHERE replace(t1.`unit price`, ',', '') = ( SELECT replace(t1.`unit price`, ',', '') FROM `sales orders` as t1 inner JOIN `store locations` as t2 ON t2.storeID = t1._storeID ORDER BY replace(t1.`unit price`, ',', '') DESC LIMIT 1 ) ORDER BY replace(t1.`unit price`, ',', '') DESC LIMIT 1","CREATE TABLE `sales orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `sales orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

CREATE TABLE `store locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `store locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  Customer Names TEXT
);
Sample rows from `Customers`:
1, Avon Corp
2, WakeFern 
3, Elorac, Corp

CREATE TABLE `Products` (
  ProductID INTEGER,
  Product Name TEXT
);
Sample rows from `Products`:
1, Cookware
2, Photo Frames
3, Table Lamps

CREATE TABLE `Regions` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `Regions`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `Sales Team` (
  SalesTeamID INTEGER,
  Sales Team TEXT,
  Region TEXT
);
Sample rows from `Sales Team`:
1, Adam Hernandez, Northeast
2, Keith Griffin, Northeast
3, Jerry Green, West

CREATE TABLE `Store Locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `Store Locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

CREATE TABLE `Sales Orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `Sales Orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

","sales orders, store locations","store locations.city name, store locations.storeID, sales orders._storeID, sales orders.unit price","Customers, Products, Regions, Sales Team, Store Locations, Sales Orders"
language_corpus,Calculate the average number of the word occurrences in which ‘system’ appeared as the first word in the pair.,SELECT AVG(t2.occurrences) FROM words as t1 inner JOIN biwords as t2 ON t1.wid = t2.w1st WHERE t2.w1st = ( SELECT wid FROM words WHERE word = 'sistema' ),"CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

","CREATE TABLE `langs` (
  lid INTEGER,
  lang TEXT PRIMARY KEY,
  locale TEXT PRIMARY KEY,
  pages INTEGER,
  words INTEGER
);
Sample rows from `langs`:
1, ca, ca_ES, 1129144, 2764996

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
langs, 1
pages, 1129144
words, 2764996

CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `langs_words` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `langs_words`:
1, 1, 242
1, 2, 16841
1, 3, 48700

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

","words, biwords","biwords.occurrences, words.wid, biwords.w1st, wid, word","langs, sqlite_sequence, pages, words, langs_words, pages_words, biwords"
retail_complains,"Which product got the most five stars, and how many?","SELECt t.product, MAX(t.num) FROM ( SELECt product, COUNT(stars) as num FROM reviews WHERE stars = 5 GROUP BY product ) t","CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

","CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

",reviews,"product, stars","state, callcenterlogs, client, district, events, reviews"
simpson_episodes,List down all the roles of Matt Groening on the episode titled 'In the Name of the Grandfather' along with the episode number and series number.,"SELECT t2.role, t1.episode, t1.number_in_series FROM episode as t1 inner JOIN credit as t2 ON t1.episode_id = t2.episode_id WHERE t2.person = 'Matt Groening' AND t1.title = 'In the Name of the Grandfather';","CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","episode, credit","credit.role, episode.episode, episode.number_in_series, episode.episode_id, credit.episode_id, credit.person, episode.title","Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
food_inspection,"Among violations on 3rd June, 2014, describe any 5 names, located cities and tax codes of the eateries with high risk category.","SELECT DISTINCT t2.name, t2.city, t2.tax_code FROM violations as t1 inner JOIN businesses as t2 ON t1.business_id = t2.business_id WHERE t1.risk_category = 'High Risk' AND t1.`date` = '2014-06-03' LIMIT 5","CREATE TABLE `violations` (
  business_id INTEGER REFERENCES businesses(business_id),
  date DATE,
  violation_type_id TEXT,
  risk_category TEXT,
  description TEXT
);
Sample rows from `violations`:
10, 2014-07-29, 103129, Moderate Risk, Insufficient hot water or running water
10, 2014-07-29, 103144, Low Risk, Unapproved or unmaintained equipment or utensils
10, 2014-01-14, 103119, Moderate Risk, Inadequate and inaccessible handwashing facilities

CREATE TABLE `businesses` (
  business_id INTEGER,
  name TEXT,
  address TEXT,
  city TEXT,
  postal_code TEXT,
  latitude REAL,
  longitude REAL,
  phone_number INTEGER,
  tax_code TEXT,
  business_certificate INTEGER,
  application_date DATE,
  owner_name TEXT,
  owner_address TEXT,
  owner_city TEXT,
  owner_state TEXT,
  owner_zip TEXT
);
Sample rows from `businesses`:
10, Tiramisu Kitchen, 033 Belden Pl, San Francisco, 94104, 37.7911, -122.404, None, H24, 779059, None, Tiramisu LLC, 33 Belden St, San Francisco, CA, 94104
24, OMNI S.F. Hotel - 2nd Floor Pantry, 500 California St, 2nd  Floor, San Francisco, 94104, 37.7929, -122.403, None, H24, 352312, None, OMNI San Francisco Hotel Corp, 500 California St, 2nd Floor, San Francisco, CA, 94104
31, Norman's Ice Cream and Freezes, 2801 Leavenworth St, San Francisco, 94133, 37.8072, -122.419, None, H24, 346882, None, Norman Antiforda, 2801 Leavenworth St, San Francisco, CA, 94133

","CREATE TABLE `businesses` (
  business_id INTEGER,
  name TEXT,
  address TEXT,
  city TEXT,
  postal_code TEXT,
  latitude REAL,
  longitude REAL,
  phone_number INTEGER,
  tax_code TEXT,
  business_certificate INTEGER,
  application_date DATE,
  owner_name TEXT,
  owner_address TEXT,
  owner_city TEXT,
  owner_state TEXT,
  owner_zip TEXT
);
Sample rows from `businesses`:
10, Tiramisu Kitchen, 033 Belden Pl, San Francisco, 94104, 37.7911, -122.404, None, H24, 779059, None, Tiramisu LLC, 33 Belden St, San Francisco, CA, 94104
24, OMNI S.F. Hotel - 2nd Floor Pantry, 500 California St, 2nd  Floor, San Francisco, 94104, 37.7929, -122.403, None, H24, 352312, None, OMNI San Francisco Hotel Corp, 500 California St, 2nd Floor, San Francisco, CA, 94104
31, Norman's Ice Cream and Freezes, 2801 Leavenworth St, San Francisco, 94133, 37.8072, -122.419, None, H24, 346882, None, Norman Antiforda, 2801 Leavenworth St, San Francisco, CA, 94133

CREATE TABLE `inspections` (
  business_id INTEGER REFERENCES businesses(business_id),
  score INTEGER,
  date DATE,
  type TEXT
);
Sample rows from `inspections`:
10, 92, 2014-01-14, Routine - Unscheduled
10, None, 2014-01-24, Reinspection/Followup
10, 94, 2014-07-29, Routine - Unscheduled

CREATE TABLE `violations` (
  business_id INTEGER REFERENCES businesses(business_id),
  date DATE,
  violation_type_id TEXT,
  risk_category TEXT,
  description TEXT
);
Sample rows from `violations`:
10, 2014-07-29, 103129, Moderate Risk, Insufficient hot water or running water
10, 2014-07-29, 103144, Low Risk, Unapproved or unmaintained equipment or utensils
10, 2014-01-14, 103119, Moderate Risk, Inadequate and inaccessible handwashing facilities

","violations, businesses","businesses.name, businesses.city, businesses.tax_code, violations.business_id, businesses.business_id, violations.risk_category, violations.date","businesses, inspections, violations"
olympics,Please list the names of the Olympic games that were held in London.,SELECT t3.games_name FROM games_city as t1 inner JOIN city as t2 ON t1.city_id = t2.id inner JOIN games as t3 ON t1.games_id = t3.id WHERE t2.city_name = 'London',"CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

","CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `medal` (
  id INTEGER,
  medal_name TEXT
);
Sample rows from `medal`:
1, Gold
2, Silver
3, Bronze

CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `sport` (
  id INTEGER,
  sport_name TEXT
);
Sample rows from `sport`:
1, Aeronautics
2, Alpine Skiing
3, Alpinism

CREATE TABLE `event` (
  id INTEGER,
  sport_id INTEGER REFERENCES sport(id),
  event_name TEXT
);
Sample rows from `event`:
1, 9, Basketball Men's Basketball
2, 33, Judo Men's Extra-Lightweight
3, 25, Football Men's Football

CREATE TABLE `competitor_event` (
  event_id INTEGER REFERENCES event(id),
  competitor_id INTEGER REFERENCES games_competitor(id),
  medal_id INTEGER REFERENCES medal(id)
);
Sample rows from `competitor_event`:
1, 1, 4
2, 2, 4
3, 3, 4

","games_city, city, games","games.games_name, games_city.city_id, city.id, games_city.games_id, games.id, city.city_name","city, games, games_city, medal, noc_region, person, games_competitor, person_region, sport, event, competitor_event"
sales,"How many of the employees have the last name ""Ringer"" ?",SELECT COUNT(lastname) FROM employees WHERE lastname = 'Ringer',"CREATE TABLE `employees` (
  EmployeeID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `employees`:
1, Abraham, e, Bennet
2, Reginald, l, Blotchet-Halls
3, Cheryl, a, Carson

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Employees`:
1, Abraham, e, Bennet
2, Reginald, l, Blotchet-Halls
3, Cheryl, a, Carson

CREATE TABLE `Products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

CREATE TABLE `Sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `Sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

",employees,lastname,"Customers, Employees, Products, Sales"
beer_factory,"Among the transactions, what percentage is done by using a visa card?",SELECT cast(COUNT(case when creditcardtype = 'Visa' then transactionid else null end) as real) * 100 / COUNT(transactionid) FROM `transaction`,"CREATE TABLE `transaction` (
  TransactionID INTEGER,
  CreditCardNumber INTEGER,
  CustomerID INTEGER REFERENCES customers(CustomerID),
  TransactionDate DATE,
  CreditCardType TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  RootBeerID INTEGER REFERENCES rootbeer(RootBeerID),
  PurchasePrice REAL
);
Sample rows from `transaction`:
100000, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105661, 3.0
100001, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105798, 3.0
100002, 6011583832864739, 864896, 2014-07-07, Discover, 2, 102514, 3.0

","CREATE TABLE `customers` (
  CustomerID INTEGER,
  First TEXT,
  Last TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER,
  Email TEXT,
  PhoneNumber TEXT,
  FirstPurchaseDate DATE,
  SubscribedToEmailList TEXT,
  Gender TEXT
);
Sample rows from `customers`:
101811, Kenneth, Walton, 6715 Commonwealth Dr, Sacramento, CA, 94256, walton.k76@fastmail.com, (916) 918-1561, 2013-05-30, FALSE, M
103508, Madeleine, Jones, 3603 Leola Way, Sacramento, CA, 94258, j_madeleine@gmail.com, (916) 186-9423, 2013-02-06, FALSE, F
104939, Damen, Wheeler, 6740 Branwood Way, Orangevale, CA, 95662, dwheeler@outlook.com, (916) 164-1156, 2013-04-11, FALSE, M

CREATE TABLE `geolocation` (
  LocationID INTEGER REFERENCES location(LocationID),
  Latitude REAL,
  Longitude REAL
);
Sample rows from `geolocation`:
0, 0.0, 0.0
1, 38.566129, -121.426432
2, 38.559615, -121.42243

CREATE TABLE `location` (
  LocationID INTEGER REFERENCES geolocation(LocationID),
  LocationName TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER
);
Sample rows from `location`:
0, LOST, None, None, None, None
1, Sac State American River Courtyard, 6000 J St, Sacramento, CA, 95819
2, Sac State Union, 6000 J St, Sacramento, CA, 95819

CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

CREATE TABLE `rootbeerreview` (
  CustomerID INTEGER PRIMARY KEY REFERENCES customers(CustomerID),
  BrandID INTEGER PRIMARY KEY REFERENCES rootbeerbrand(BrandID),
  StarRating INTEGER,
  ReviewDate DATE,
  Review TEXT
);
Sample rows from `rootbeerreview`:
101811, 10012, 5, 2013-07-15, None
101811, 10014, 1, 2013-07-08, None
101811, 10015, 3, 2013-07-25, None

CREATE TABLE `transaction` (
  TransactionID INTEGER,
  CreditCardNumber INTEGER,
  CustomerID INTEGER REFERENCES customers(CustomerID),
  TransactionDate DATE,
  CreditCardType TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  RootBeerID INTEGER REFERENCES rootbeer(RootBeerID),
  PurchasePrice REAL
);
Sample rows from `transaction`:
100000, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105661, 3.0
100001, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105798, 3.0
100002, 6011583832864739, 864896, 2014-07-07, Discover, 2, 102514, 3.0

",transaction,"creditcardtype, transactionid","customers, geolocation, location, rootbeerbrand, rootbeer, rootbeerreview, transaction"
genes,"Of the genes whose phenotype and motif are nucleic acid metabolism defects, PS00107, what percentage perform positive interaction with another gene?","SELECT cast(SUM(iif(t2.expression_corr > 0, 1, 0)) as real) * 100 / COUNT(t2.geneid1) FROM genes as t1 inner JOIN interactions as t2 ON t1.geneid = t2.geneid1 WHERE t1.phenotype = 'Nucleic acid metabolism defects' AND t1.motif = 'PS00107'","CREATE TABLE `genes` (
  GeneID TEXT REFERENCES Classification(GeneID),
  Essential TEXT,
  Class TEXT,
  Complex TEXT,
  Phenotype TEXT,
  Motif TEXT,
  Chromosome INTEGER,
  Function TEXT,
  Localization TEXT
);
Sample rows from `genes`:
G234064, Essential, GTP/GDP-exchange factors (GEFs), Translation complexes, ?, PS00824, 1, CELLULAR ORGANIZATION (proteins are localized to the corresponding organelle), cytoplasm
G234064, Essential, GTP/GDP-exchange factors (GEFs), Translation complexes, ?, PS00824, 1, PROTEIN SYNTHESIS, cytoplasm
G234064, Essential, GTP/GDP-exchange factors (GEFs), Translation complexes, ?, PS00825, 1, CELLULAR ORGANIZATION (proteins are localized to the corresponding organelle), cytoplasm

CREATE TABLE `interactions` (
  GeneID1 TEXT PRIMARY KEY REFERENCES Classification(GeneID),
  GeneID2 TEXT PRIMARY KEY REFERENCES Classification(GeneID),
  Type TEXT,
  Expression_Corr REAL
);
Sample rows from `interactions`:
G234064, G234126, Genetic-Physical, 0.914095071
G234064, G235065, Genetic-Physical, 0.751584888
G234065, G234371, Genetic, 0.823773738

","CREATE TABLE `Classification` (
  GeneID TEXT PRIMARY KEY,
  Localization TEXT
);
Sample rows from `Classification`:
G234064, cytoplasm
G234065, cytoplasm
G234070, cytoskeleton

CREATE TABLE `Genes` (
  GeneID TEXT REFERENCES Classification(GeneID),
  Essential TEXT,
  Class TEXT,
  Complex TEXT,
  Phenotype TEXT,
  Motif TEXT,
  Chromosome INTEGER,
  Function TEXT,
  Localization TEXT
);
Sample rows from `Genes`:
G234064, Essential, GTP/GDP-exchange factors (GEFs), Translation complexes, ?, PS00824, 1, CELLULAR ORGANIZATION (proteins are localized to the corresponding organelle), cytoplasm
G234064, Essential, GTP/GDP-exchange factors (GEFs), Translation complexes, ?, PS00824, 1, PROTEIN SYNTHESIS, cytoplasm
G234064, Essential, GTP/GDP-exchange factors (GEFs), Translation complexes, ?, PS00825, 1, CELLULAR ORGANIZATION (proteins are localized to the corresponding organelle), cytoplasm

CREATE TABLE `Interactions` (
  GeneID1 TEXT PRIMARY KEY REFERENCES Classification(GeneID),
  GeneID2 TEXT PRIMARY KEY REFERENCES Classification(GeneID),
  Type TEXT,
  Expression_Corr REAL
);
Sample rows from `Interactions`:
G234064, G234126, Genetic-Physical, 0.914095071
G234064, G235065, Genetic-Physical, 0.751584888
G234065, G234371, Genetic, 0.823773738

","genes, interactions","interactions.expression_corr, interactions.geneid1, genes.geneid, genes.phenotype, genes.motif","Classification, Genes, Interactions"
disney,Which director did Bill Thompson work the most with?,SELECT director FROM director as t1 inner JOIN `voice-actors` as t2 ON t1.name = t2.movie WHERE t2.`voice-actor` = 'Bill Thompson' GROUP BY director ORDER BY COUNT(director) DESC LIMIT 1,"CREATE TABLE `director` (
  name TEXT PRIMARY KEY REFERENCES characters(movie_title),
  director TEXT
);
Sample rows from `director`:
Snow White and the Seven Dwarfs, David Hand
Pinocchio, Ben Sharpsteen
Fantasia, full credits

CREATE TABLE `voice-actors` (
  character TEXT PRIMARY KEY,
  voice-actor TEXT,
  movie TEXT REFERENCES characters(movie_title)
);
Sample rows from `voice-actors`:
Abby Mallard, Joan Cusack, Chicken Little
Abigail Gabble, Monica Evans, The Aristocats
Abis Mal, Jason Alexander, The Return of Jafar

","CREATE TABLE `characters` (
  movie_title TEXT PRIMARY KEY,
  release_date TEXT,
  hero TEXT REFERENCES voice-actors(character),
  villian TEXT,
  song TEXT
);
Sample rows from `characters`:
Snow White and the Seven Dwarfs, 21-Dec-37, Snow White, Evil Queen, Some Day My Prince Will Come
Pinocchio, 7-Feb-40, Pinocchio, Stromboli, When You Wish upon a Star
Fantasia, 13-Nov-40, None, Chernabog, None

CREATE TABLE `director` (
  name TEXT PRIMARY KEY REFERENCES characters(movie_title),
  director TEXT
);
Sample rows from `director`:
Snow White and the Seven Dwarfs, David Hand
Pinocchio, Ben Sharpsteen
Fantasia, full credits

CREATE TABLE `movies_total_gross` (
  movie_title TEXT PRIMARY KEY REFERENCES characters(movie_title),
  release_date TEXT PRIMARY KEY,
  genre TEXT,
  MPAA_rating TEXT,
  total_gross TEXT,
  inflation_adjusted_gross TEXT
);
Sample rows from `movies_total_gross`:
Snow White and the Seven Dwarfs, Dec 21, 1937, Musical, G, $184,925,485, $5,228,953,251
Pinocchio, Feb 9, 1940, Adventure, G, $84,300,000, $2,188,229,052
Fantasia, Nov 13, 1940, Musical, G, $83,320,000, $2,187,090,808

CREATE TABLE `revenue` (
  Year INTEGER,
  Studio Entertainment[NI 1] REAL,
  Disney Consumer Products[NI 2] REAL,
  Disney Interactive[NI 3][Rev 1] INTEGER,
  Walt Disney Parks and Resorts REAL,
  Disney Media Networks TEXT,
  Total INTEGER
);
Sample rows from `revenue`:
1991, 2593.0, 724.0, None, 2794.0, None, 6111
1992, 3115.0, 1081.0, None, 3306.0, None, 7502
1993, 3673.4, 1415.1, None, 3440.7, None, 8529

CREATE TABLE `voice-actors` (
  character TEXT PRIMARY KEY,
  voice-actor TEXT,
  movie TEXT REFERENCES characters(movie_title)
);
Sample rows from `voice-actors`:
Abby Mallard, Joan Cusack, Chicken Little
Abigail Gabble, Monica Evans, The Aristocats
Abis Mal, Jason Alexander, The Return of Jafar

","director, voice-actors","director, director.name, voice-actors.movie, voice-actors.voice-actor","characters, director, movies_total_gross, revenue, voice-actors"
olympics,Which game has Jessica Carolina Aguilera Aguilera participated in? Give the id of the game.,SELECT t2.games_id FROM person as t1 inner JOIN games_competitor as t2 ON t1.id = t2.person_id WHERE t1.full_name = 'Jessica Carolina Aguilera Aguilera',"CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

","CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `medal` (
  id INTEGER,
  medal_name TEXT
);
Sample rows from `medal`:
1, Gold
2, Silver
3, Bronze

CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `sport` (
  id INTEGER,
  sport_name TEXT
);
Sample rows from `sport`:
1, Aeronautics
2, Alpine Skiing
3, Alpinism

CREATE TABLE `event` (
  id INTEGER,
  sport_id INTEGER REFERENCES sport(id),
  event_name TEXT
);
Sample rows from `event`:
1, 9, Basketball Men's Basketball
2, 33, Judo Men's Extra-Lightweight
3, 25, Football Men's Football

CREATE TABLE `competitor_event` (
  event_id INTEGER REFERENCES event(id),
  competitor_id INTEGER REFERENCES games_competitor(id),
  medal_id INTEGER REFERENCES medal(id)
);
Sample rows from `competitor_event`:
1, 1, 4
2, 2, 4
3, 3, 4

","person, games_competitor","games_competitor.games_id, person.id, games_competitor.person_id, person.full_name","city, games, games_city, medal, noc_region, person, games_competitor, person_region, sport, event, competitor_event"
language_corpus,Which word has the most repetitions in the Catalan language? Give the ID of the word.,SELECT wid FROM langs_words WHERE occurrences = ( SELECT MAX(occurrences) FROM langs_words ),"CREATE TABLE `langs_words` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `langs_words`:
1, 1, 242
1, 2, 16841
1, 3, 48700

","CREATE TABLE `langs` (
  lid INTEGER,
  lang TEXT PRIMARY KEY,
  locale TEXT PRIMARY KEY,
  pages INTEGER,
  words INTEGER
);
Sample rows from `langs`:
1, ca, ca_ES, 1129144, 2764996

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
langs, 1
pages, 1129144
words, 2764996

CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `langs_words` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `langs_words`:
1, 1, 242
1, 2, 16841
1, 3, 48700

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

",langs_words,"wid, occurrences","langs, sqlite_sequence, pages, words, langs_words, pages_words, biwords"
sales,"Of the employees who sold Blade, who has the most amount of sales?","SELECT t1.firstname, t1.middleinitial, t1.lastname FROM employees as t1 inner JOIN sales as t2 ON t1.employeeid = t2.salesPersonID inner JOIN products as t3 ON t2.productid = t3.productid ORDER BY t2.quantity * t3.price DESC LIMIT 1","CREATE TABLE `employees` (
  EmployeeID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `employees`:
1, Abraham, e, Bennet
2, Reginald, l, Blotchet-Halls
3, Cheryl, a, Carson

CREATE TABLE `sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

CREATE TABLE `products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Employees`:
1, Abraham, e, Bennet
2, Reginald, l, Blotchet-Halls
3, Cheryl, a, Carson

CREATE TABLE `Products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

CREATE TABLE `Sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `Sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

","employees, sales, products","employees.firstname, employees.middleinitial, employees.lastname, employees.employeeid, sales.salesPersonID, sales.productid, products.productid, sales.quantity, products.price","Customers, Employees, Products, Sales"
language_corpus,"In the Catalan language, which biwords pair appeared the most in this language/page?","SELECT w1st, w2nd FROM biwords WHERE occurrences = ( SELECT MAX(occurrences) FROM biwords )","CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

","CREATE TABLE `langs` (
  lid INTEGER,
  lang TEXT PRIMARY KEY,
  locale TEXT PRIMARY KEY,
  pages INTEGER,
  words INTEGER
);
Sample rows from `langs`:
1, ca, ca_ES, 1129144, 2764996

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
langs, 1
pages, 1129144
words, 2764996

CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `langs_words` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `langs_words`:
1, 1, 242
1, 2, 16841
1, 3, 48700

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

",biwords,"w1st, w2nd, occurrences","langs, sqlite_sequence, pages, words, langs_words, pages_words, biwords"
trains,What is the average number of cars on trains that run in the east direction?,SELECT cast(COUNT(t1.id) as real) / COUNT(DISTINCT t1.train_id) FROM cars as t1 inner JOIN trains as t2 ON t1.train_id = t2.id WHERE t2.direction = 'east',"CREATE TABLE `cars` (
  id INTEGER,
  train_id INTEGER REFERENCES trains(id),
  position INTEGER,
  shape TEXT,
  len TEXT,
  sides TEXT,
  roof TEXT,
  wheels INTEGER,
  load_shape TEXT,
  load_num INTEGER
);
Sample rows from `cars`:
1, 1, 1, rectangle, short, not_double, none, 2, circle, 1
2, 1, 2, rectangle, long, not_double, none, 3, hexagon, 1
3, 1, 3, rectangle, short, not_double, peaked, 2, triangle, 1

CREATE TABLE `trains` (
  id INTEGER,
  direction TEXT
);
Sample rows from `trains`:
1, east
2, east
3, east

","CREATE TABLE `cars` (
  id INTEGER,
  train_id INTEGER REFERENCES trains(id),
  position INTEGER,
  shape TEXT,
  len TEXT,
  sides TEXT,
  roof TEXT,
  wheels INTEGER,
  load_shape TEXT,
  load_num INTEGER
);
Sample rows from `cars`:
1, 1, 1, rectangle, short, not_double, none, 2, circle, 1
2, 1, 2, rectangle, long, not_double, none, 3, hexagon, 1
3, 1, 3, rectangle, short, not_double, peaked, 2, triangle, 1

CREATE TABLE `trains` (
  id INTEGER,
  direction TEXT
);
Sample rows from `trains`:
1, east
2, east
3, east

","cars, trains","cars.id, cars.train_id, trains.id, trains.direction","cars, trains"
codebase_comments,"For the method which got the tokenized name as 't jadwal entity get single mpic', what is the path time for its solution?",SELECT DISTINCT t1.processedtime FROM solution as t1 inner JOIN method as t2 ON t1.id = t2.solutionid WHERE t2.nametokenized = 't jadwal entity get single mpic',"CREATE TABLE `solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

CREATE TABLE `method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Method, 10860640
MethodParameter, 17514858
Repo, 156550

CREATE TABLE `Method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `Method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

CREATE TABLE `MethodParameter` (
  Id INTEGER,
  MethodId TEXT,
  Type TEXT,
  Name TEXT
);
Sample rows from `MethodParameter`:
1, 1, System.String, data
2, 2, System.Int32, i
3, 2, System.Int32, declstartpos

CREATE TABLE `Repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `Repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

CREATE TABLE `Solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `Solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

","solution, method","solution.processedtime, solution.id, method.solutionid, method.nametokenized","sqlite_sequence, Method, MethodParameter, Repo, Solution"
public_review_platform,"How many Yelp_Business under the category of ""Food"" are good for kids?",SELECT COUNT(t3.stars) FROM categories as t1 inner JOIN business_categories as t2 ON t1.category_id = t2.category_id inner JOIN business as t3 ON t2.business_id = t3.business_id inner JOIN business_attributes as t4 ON t3.business_id = t4.business_id inner JOIN attributes as t5 ON t4.attribute_id = t5.attribute_id WHERE t1.category_name LIKE 'Food' AND t5.attribute_name LIKE 'Good for Kids' AND t4.attribute_value LIKE 'TRUE',"CREATE TABLE `categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `business_categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `business_categories`:
1, 8
1, 143
2, 18

CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `business_attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `business_attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","categories, business_categories, business, business_attributes, attributes","business.stars, categories.category_id, business_categories.category_id, business_categories.business_id, business.business_id, business_attributes.business_id, business_attributes.attribute_id, attributes.attribute_id, categories.category_name, attributes.attribute_name, business_attributes.attribute_value","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
cars,"Among the cars with 8 cylinders, what is the name of the one that's the most expensive?",SELECT t1.car_name FROM data as t1 inner JOIN price as t2 ON t1.id = t2.id WHERE t1.cylinders = 8 ORDER BY t2.price DESC LIMIT 1,"CREATE TABLE `data` (
  ID INTEGER REFERENCES price(ID),
  mpg REAL,
  cylinders INTEGER,
  displacement REAL,
  horsepower INTEGER,
  weight INTEGER,
  acceleration REAL,
  model INTEGER,
  car_name TEXT
);
Sample rows from `data`:
1, 18.0, 8, 307.0, 130, 3504, 12.0, 70, chevrolet chevelle malibu
2, 15.0, 8, 350.0, 165, 3693, 11.5, 70, buick skylark 320
3, 18.0, 8, 318.0, 150, 3436, 11.0, 70, plymouth satellite

CREATE TABLE `price` (
  ID INTEGER,
  price REAL
);
Sample rows from `price`:
1, 25561.59078
2, 24221.42273
3, 27240.84373

","CREATE TABLE `country` (
  origin INTEGER,
  country TEXT
);
Sample rows from `country`:
1, USA
2, Europe
3, Japan

CREATE TABLE `price` (
  ID INTEGER,
  price REAL
);
Sample rows from `price`:
1, 25561.59078
2, 24221.42273
3, 27240.84373

CREATE TABLE `data` (
  ID INTEGER REFERENCES price(ID),
  mpg REAL,
  cylinders INTEGER,
  displacement REAL,
  horsepower INTEGER,
  weight INTEGER,
  acceleration REAL,
  model INTEGER,
  car_name TEXT
);
Sample rows from `data`:
1, 18.0, 8, 307.0, 130, 3504, 12.0, 70, chevrolet chevelle malibu
2, 15.0, 8, 350.0, 165, 3693, 11.5, 70, buick skylark 320
3, 18.0, 8, 318.0, 150, 3436, 11.0, 70, plymouth satellite

CREATE TABLE `production` (
  ID INTEGER PRIMARY KEY REFERENCES price(ID) REFERENCES data(ID),
  model_year INTEGER PRIMARY KEY,
  country INTEGER REFERENCES country(origin)
);
Sample rows from `production`:
1, 1970, 1
1, 1971, 1
2, 1970, 1

","data, price","data.car_name, data.id, price.id, data.cylinders, price.price","country, price, data, production"
law_episode,What is the difference of 10 stars votes between the first episode and the last episode?,SELECT SUM(case when t2.episode = 24 then t1.votes else 0 end) - SUM(case when t2.episode = 1 then t1.votes else 0 end) FROM vote as t1 inner JOIN episode as t2 ON t2.episode_id = t1.episode_id WHERE t1.stars = 10,"CREATE TABLE `vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `vote`:
tt0629204, 10, 36, 17.7
tt0629204, 9, 39, 19.2
tt0629204, 8, 64, 31.5

CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
tt0629239, nun
tt0629239, priest
tt0629420, police officer

CREATE TABLE `Person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  series TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  person_id TEXT REFERENCES Person(person_id),
  role TEXT,
  result TEXT
);
Sample rows from `Award`:
258, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0937725, None, Winner
259, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0792309, None, Winner
260, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0049569, None, Winner

CREATE TABLE `Credit` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  person_id TEXT PRIMARY KEY REFERENCES Person(person_id),
  category TEXT,
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
tt0629204, nm0226352, Additional Crew, technical advisor, true
tt0629204, nm0506974, Additional Crew, production accountant, true
tt0629204, nm4103116, Additional Crew, production accountant, true

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
tt0629204, 10, 36, 17.7
tt0629204, 9, 39, 19.2
tt0629204, 8, 64, 31.5

","vote, episode","episode.episode, vote.votes, episode.episode_id, vote.episode_id, vote.stars","Episode, Keyword, Person, Award, Credit, Vote"
european_football_1,How many final-time home-team goals were there in total in all the matches of the Bundesliga division in the 2021 season?,SELECT SUM(t1.fthg) FROM matchs as t1 inner JOIN divisions as t2 ON t1.div = t2.division WHERE t2.name = 'Bundesliga' AND t1.season = 2021,"CREATE TABLE `matchs` (
  Div TEXT REFERENCES divisions(division),
  Date DATE,
  HomeTeam TEXT,
  AwayTeam TEXT,
  FTHG INTEGER,
  FTAG INTEGER,
  FTR TEXT,
  season INTEGER
);
Sample rows from `matchs`:
B1, 2020-08-08, Club Brugge, Charleroi, 0, 1, A, 2021
B1, 2020-08-08, Antwerp, Mouscron, 1, 1, D, 2021
B1, 2020-08-08, Standard, Cercle Brugge, 1, 0, H, 2021

CREATE TABLE `divisions` (
  division TEXT PRIMARY KEY,
  name TEXT,
  country TEXT
);
Sample rows from `divisions`:
B1, Division 1A, Belgium
D1, Bundesliga, Deutschland
D2, 2. Bundesliga, Deutschland

","CREATE TABLE `divisions` (
  division TEXT PRIMARY KEY,
  name TEXT,
  country TEXT
);
Sample rows from `divisions`:
B1, Division 1A, Belgium
D1, Bundesliga, Deutschland
D2, 2. Bundesliga, Deutschland

CREATE TABLE `matchs` (
  Div TEXT REFERENCES divisions(division),
  Date DATE,
  HomeTeam TEXT,
  AwayTeam TEXT,
  FTHG INTEGER,
  FTAG INTEGER,
  FTR TEXT,
  season INTEGER
);
Sample rows from `matchs`:
B1, 2020-08-08, Club Brugge, Charleroi, 0, 1, A, 2021
B1, 2020-08-08, Antwerp, Mouscron, 1, 1, D, 2021
B1, 2020-08-08, Standard, Cercle Brugge, 1, 0, H, 2021

","matchs, divisions","matchs.fthg, matchs.div, divisions.division, divisions.name, matchs.season","divisions, matchs"
student_loan,Count the number of female students who belong to marines organization.,SELECT COUNT(*) FROM person as t1 inner JOIN enlist as t2 ON t1.name = t2.name left JOIN male as t3 ON t1.name = t3.name WHERE t2.organ = 'marines' AND t3.name is null,"CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

","person, enlist, male","person.name, enlist.name, male.name, enlist.organ","bool, person, disabled, enlist, filed_for_bankrupcy, longest_absense_from_school, male, no_payment_due, unemployed, enrolled"
simpson_episodes,What is the average heights of crew members from Animation Department?,SELECT AVG(t1.height_meters) FROM person as t1 inner JOIN credit as t2 ON t1.name = t2.person WHERE t2.category = 'Animation Department';,"CREATE TABLE `person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","person, credit","person.height_meters, person.name, credit.person, credit.category","Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
menu,Please describe the menu sponsored by Noviomagus physically.,SELECT physical_description FROM menu WHERE sponsor = 'Noviomagus',"CREATE TABLE `menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

","CREATE TABLE `Dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `Dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

CREATE TABLE `Menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `Menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

CREATE TABLE `MenuPage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `MenuPage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

CREATE TABLE `MenuItem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `MenuItem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

",menu,"physical_description, sponsor","Dish, Menu, MenuPage, MenuItem"
airline,Give the actual elapsed time of the flights with air carrier named Semo Aviation Inc.: SEM.,SELECT t2.actual_elapsed_time FROM `air carriers` as t1 inner JOIN airlines as t2 ON t1.code = t2.op_carrier_airline_id WHERE t1.description = 'Semo Aviation Inc.: SEM',"CREATE TABLE `air carriers` (
  Code INTEGER,
  Description TEXT
);
Sample rows from `air carriers`:
19031, Mackey International Inc.: MAC
19032, Munz Northern Airlines Inc.: XY
19033, Cochise Airlines Inc.: COC

CREATE TABLE `airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

","CREATE TABLE `Air Carriers` (
  Code INTEGER,
  Description TEXT
);
Sample rows from `Air Carriers`:
19031, Mackey International Inc.: MAC
19032, Munz Northern Airlines Inc.: XY
19033, Cochise Airlines Inc.: COC

CREATE TABLE `Airports` (
  Code TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `Airports`:
01A, Afognak Lake, AK: Afognak Lake Airport
03A, Granite Mountain, AK: Bear Creek Mining Strip
04A, Lik, AK: Lik Mining Camp

CREATE TABLE `Airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `Airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

","air carriers, airlines","airlines.actual_elapsed_time, air carriers.code, airlines.op_carrier_airline_id, air carriers.description","Air Carriers, Airports, Airlines"
citeseer,What is the class label of paper ID 'chakrabarti01integrating'. How many words were cited by this paper ID?,"SELECT DISTINCT t1.class_label, COUNT(t2.word_cited_id) FROM paper as t1 inner JOIN content as t2 ON t1.paper_id = t2.paper_id WHERE t1.paper_id = 'chakrabarti01integrating' GROUP BY t1.class_label","CREATE TABLE `paper` (
  paper_id TEXT PRIMARY KEY,
  class_label TEXT
);
Sample rows from `paper`:
100157, Agents
100598, IR
101570, ML

CREATE TABLE `content` (
  paper_id TEXT PRIMARY KEY REFERENCES paper(paper_id),
  word_cited_id TEXT PRIMARY KEY
);
Sample rows from `content`:
100157, word1163
100157, word1509
100157, word1614

","CREATE TABLE `cites` (
  cited_paper_id TEXT PRIMARY KEY,
  citing_paper_id TEXT PRIMARY KEY
);
Sample rows from `cites`:
100157, 100157
100157, 364207
100157, 38848

CREATE TABLE `paper` (
  paper_id TEXT PRIMARY KEY,
  class_label TEXT
);
Sample rows from `paper`:
100157, Agents
100598, IR
101570, ML

CREATE TABLE `content` (
  paper_id TEXT PRIMARY KEY REFERENCES paper(paper_id),
  word_cited_id TEXT PRIMARY KEY
);
Sample rows from `content`:
100157, word1163
100157, word1509
100157, word1614

","paper, content","paper.class_label, content.word_cited_id, paper.paper_id, content.paper_id","cites, paper, content"
menu,"How many menus with the name ""Waldorf Astoria"" have 4 pages?",SELECT COUNT(*) FROM menu WHERE name = 'Waldorf Astoria' AND page_count = 4,"CREATE TABLE `menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

","CREATE TABLE `Dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `Dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

CREATE TABLE `Menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `Menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

CREATE TABLE `MenuPage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `MenuPage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

CREATE TABLE `MenuItem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `MenuItem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

",menu,"name, page_count","Dish, Menu, MenuPage, MenuItem"
mental_health_survey,"How many people wrote comments for the question ""Any additional notes or comments.""?",SELECT COUNT(t1.userid) FROM answer as t1 inner JOIN question as t2 ON t1.questionID = t2.questionid WHERE t2.questiontext LIKE 'Any additional notes or comments' AND t1.answerText is NOT null,"CREATE TABLE `answer` (
  AnswerText TEXT,
  SurveyID INTEGER REFERENCES Survey(None),
  UserID INTEGER PRIMARY KEY,
  QuestionID INTEGER PRIMARY KEY REFERENCES Question(None)
);
Sample rows from `answer`:
37, 2014, 1, 1
44, 2014, 2, 1
32, 2014, 3, 1

CREATE TABLE `question` (
  questiontext TEXT,
  questionid INTEGER
);
Sample rows from `question`:
What is your age?, 1
What is your gender?, 2
What country do you live in?, 3

","CREATE TABLE `Question` (
  questiontext TEXT,
  questionid INTEGER
);
Sample rows from `Question`:
What is your age?, 1
What is your gender?, 2
What country do you live in?, 3

CREATE TABLE `Survey` (
  SurveyID INTEGER,
  Description TEXT
);
Sample rows from `Survey`:
2014, mental health survey for 2014
2016, mental health survey for 2016
2017, mental health survey for 2017

CREATE TABLE `Answer` (
  AnswerText TEXT,
  SurveyID INTEGER REFERENCES Survey(None),
  UserID INTEGER PRIMARY KEY,
  QuestionID INTEGER PRIMARY KEY REFERENCES Question(None)
);
Sample rows from `Answer`:
37, 2014, 1, 1
44, 2014, 2, 1
32, 2014, 3, 1

","answer, question","answer.userid, answer.questionID, question.questionid, question.questiontext, answer.answerText","Question, Survey, Answer"
restaurant,List restaurant ids located in Danville city.,SELECT id_restaurant FROM location WHERE city = 'Danville',"CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

","CREATE TABLE `geographic` (
  city TEXT PRIMARY KEY,
  county TEXT,
  region TEXT
);
Sample rows from `geographic`:
alameda, alameda county, bay area
alamo, contra costa county, bay area
albany, alameda county, bay area

CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

",location,"id_restaurant, city","geographic, generalinfo, location"
regional_sales,How many products sold by Adam Hernandez?,SELECT SUM(case when t2.`sales team` = 'Adam Hernandez' then 1 else 0 end) FROM `sales orders` as t1 inner JOIN `sales team` as t2 ON t2.salesteamID = t1._salesteamID,"CREATE TABLE `sales orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `sales orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

CREATE TABLE `sales team` (
  SalesTeamID INTEGER,
  Sales Team TEXT,
  Region TEXT
);
Sample rows from `sales team`:
1, Adam Hernandez, Northeast
2, Keith Griffin, Northeast
3, Jerry Green, West

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  Customer Names TEXT
);
Sample rows from `Customers`:
1, Avon Corp
2, WakeFern 
3, Elorac, Corp

CREATE TABLE `Products` (
  ProductID INTEGER,
  Product Name TEXT
);
Sample rows from `Products`:
1, Cookware
2, Photo Frames
3, Table Lamps

CREATE TABLE `Regions` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `Regions`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `Sales Team` (
  SalesTeamID INTEGER,
  Sales Team TEXT,
  Region TEXT
);
Sample rows from `Sales Team`:
1, Adam Hernandez, Northeast
2, Keith Griffin, Northeast
3, Jerry Green, West

CREATE TABLE `Store Locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `Store Locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

CREATE TABLE `Sales Orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `Sales Orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

","sales orders, sales team","sales team.sales team, sales team.salesteamID, sales orders._salesteamID","Customers, Products, Regions, Sales Team, Store Locations, Sales Orders"
cookbook,"How many recipes include the ingredient ""graham cracker crumbs""?",SELECT COUNT(*) FROM ingredient as t1 inner JOIN quantity as t2 ON t1.ingredient_id = t2.ingredient_id WHERE t1.name = 'graham cracker crumbs',"CREATE TABLE `ingredient` (
  ingredient_id INTEGER,
  category TEXT,
  name TEXT,
  plural TEXT
);
Sample rows from `ingredient`:
1, dairy, 1% lowfat cottage cheese, None
6, dairy, 1% lowfat milk, None
10, Mexican products, 10-inch flour tortilla, s

CREATE TABLE `quantity` (
  quantity_id INTEGER,
  recipe_id INTEGER REFERENCES Nutrition(recipe_id) REFERENCES Recipe(recipe_id),
  ingredient_id INTEGER REFERENCES Ingredient(ingredient_id),
  max_qty REAL,
  min_qty REAL,
  unit TEXT,
  preparation TEXT,
  optional TEXT
);
Sample rows from `quantity`:
1, 214, 1613, 2.0, 2.0, cup(s), None, FALSE
2, 214, 3334, 0.25, 0.25, cup(s), None, FALSE
3, 214, 2222, 0.5, 0.5, cup(s), melted, FALSE

","CREATE TABLE `Ingredient` (
  ingredient_id INTEGER,
  category TEXT,
  name TEXT,
  plural TEXT
);
Sample rows from `Ingredient`:
1, dairy, 1% lowfat cottage cheese, None
6, dairy, 1% lowfat milk, None
10, Mexican products, 10-inch flour tortilla, s

CREATE TABLE `Recipe` (
  recipe_id INTEGER,
  title TEXT,
  subtitle TEXT,
  servings INTEGER,
  yield_unit TEXT,
  prep_min INTEGER,
  cook_min INTEGER,
  stnd_min INTEGER,
  source TEXT,
  intro TEXT,
  directions TEXT
);
Sample rows from `Recipe`:
214, Raspberry Chiffon Pie, None, 10, 1 pie, 20, 8, 305, The California Tree Fruit Agreement, None, For crust, preheat oven to 375 degrees F.
In lightly greased 10-inch pie plate, combine graham cracker crumbs, melted butter and 1/4 cup sugar. Press evenly on bottom and up side of plate. Bake 5 minutes; cool.

For filling, in medium saucepan, combine juice or water and gelatin; let stand 5 minutes. Add 1/3 cup sugar and heat over medium heat, stirring to dissolve gelatin. In blender or food processor, puree 6 plums. Add puree and raspberries to gelatin mixture. Refrigerate until mixture begins to set about 1 hour. Stir yogurt into fruit mixture. In large bowl, beat egg whites until frothy. Gradually add cream of tartar and remaining 1/3 cup sugar and beat until stiff peaks form. Gently fold egg whites into fruit mixture so as not to reduce volume. Spoon into crust. Refrigerate 4 hours or overnight. Thinly slice remaining 2 plums and garnish top of pie.
215, Apricot Yogurt Parfaits, None, 4, None, 5, 2, 65, Produce for Better Health Foundation and 5 a Day, None, Drain canned apricots, pour 1/4 cup of the juice into saucepan or microwave-safe dish. Sprinkle gelatin over juice and let stand for 5 minutes to soften. Warm over low heat or microwave at medium (50% power) for 30 seconds or until gelatin has dissolved.
 
In food processor or blender, puree canned apricots; add lemon juice brandy, yogurt and gelatin mixture and process for 30 seconds or until combined.
 
Pour into parfait or stemmed glasses or champagne flutes. Cover and refrigerate until set, at least 1 hour or overnight.
 
Just before serving arrange fresh apricots on top. (If apricots are not available substitute kiwi slices or berries). Garnish each with a small spoonful of yogurt and sprinkling of brown sugar or mint.
216, Fresh Apricot Bavarian, None, 8, None, 5, 13, 0, The California Apricot Advisory Board, Serve in stemmed glasses and top with sliced apricots for elegant endings., Drop apricots into boiling water to cover. Return to boil and simmer for 5 minutes or until skins begin to split. Drain and rinse under cold water. Halve fruit and discard skins and pits. Puree apricots in electric blender. Combine water and gelatin in small saucepan; stir over low heat until dissolved. Mix sugar, apricot puree and yogurt with a wire whip until smooth; mix in dissolved gelatin. Sweeten to taste if desired. Chill mixture until thick. Spoon into stemmed glasses.

Note: One pound fresh apricots is 15 to 20. One and a half envelopes gelatin is 4 teaspoons.

CREATE TABLE `Nutrition` (
  recipe_id INTEGER REFERENCES Recipe(recipe_id),
  protein REAL,
  carbo REAL,
  alcohol REAL,
  total_fat REAL,
  sat_fat REAL,
  cholestrl REAL,
  sodium REAL,
  iron REAL,
  vitamin_c REAL,
  vitamin_a REAL,
  fiber REAL,
  pcnt_cal_carb REAL,
  pcnt_cal_fat REAL,
  pcnt_cal_prot REAL,
  calories REAL
);
Sample rows from `Nutrition`:
214, 5.47, 41.29, 0.0, 11.53, 2.21, 1.39, 260.78, 0.81, 8.89, 586.2, 0.87, 56.8, 35.68, 7.53, 290.79
215, 5.7, 23.75, 1.93, 1.08, 0.58, 3.48, 46.17, 0.57, 13.02, 2738.24, 0.62, 67.38, 6.89, 16.17, 141.01
216, 4.9, 26.88, 0.0, 1.1, 0.58, 3.46, 41.79, 0.37, 6.13, 1521.1, 0.34, 78.45, 7.24, 14.3, 137.06

CREATE TABLE `Quantity` (
  quantity_id INTEGER,
  recipe_id INTEGER REFERENCES Nutrition(recipe_id) REFERENCES Recipe(recipe_id),
  ingredient_id INTEGER REFERENCES Ingredient(ingredient_id),
  max_qty REAL,
  min_qty REAL,
  unit TEXT,
  preparation TEXT,
  optional TEXT
);
Sample rows from `Quantity`:
1, 214, 1613, 2.0, 2.0, cup(s), None, FALSE
2, 214, 3334, 0.25, 0.25, cup(s), None, FALSE
3, 214, 2222, 0.5, 0.5, cup(s), melted, FALSE

","ingredient, quantity","ingredient.ingredient_id, quantity.ingredient_id, ingredient.name","Ingredient, Recipe, Nutrition, Quantity"
disney,Which actor voices Akela from The Jungle Book?,SELECT `voice-actor` FROM `voice-actors` WHERE character = 'Akela',"CREATE TABLE `voice-actors` (
  character TEXT PRIMARY KEY,
  voice-actor TEXT,
  movie TEXT REFERENCES characters(movie_title)
);
Sample rows from `voice-actors`:
Abby Mallard, Joan Cusack, Chicken Little
Abigail Gabble, Monica Evans, The Aristocats
Abis Mal, Jason Alexander, The Return of Jafar

","CREATE TABLE `characters` (
  movie_title TEXT PRIMARY KEY,
  release_date TEXT,
  hero TEXT REFERENCES voice-actors(character),
  villian TEXT,
  song TEXT
);
Sample rows from `characters`:
Snow White and the Seven Dwarfs, 21-Dec-37, Snow White, Evil Queen, Some Day My Prince Will Come
Pinocchio, 7-Feb-40, Pinocchio, Stromboli, When You Wish upon a Star
Fantasia, 13-Nov-40, None, Chernabog, None

CREATE TABLE `director` (
  name TEXT PRIMARY KEY REFERENCES characters(movie_title),
  director TEXT
);
Sample rows from `director`:
Snow White and the Seven Dwarfs, David Hand
Pinocchio, Ben Sharpsteen
Fantasia, full credits

CREATE TABLE `movies_total_gross` (
  movie_title TEXT PRIMARY KEY REFERENCES characters(movie_title),
  release_date TEXT PRIMARY KEY,
  genre TEXT,
  MPAA_rating TEXT,
  total_gross TEXT,
  inflation_adjusted_gross TEXT
);
Sample rows from `movies_total_gross`:
Snow White and the Seven Dwarfs, Dec 21, 1937, Musical, G, $184,925,485, $5,228,953,251
Pinocchio, Feb 9, 1940, Adventure, G, $84,300,000, $2,188,229,052
Fantasia, Nov 13, 1940, Musical, G, $83,320,000, $2,187,090,808

CREATE TABLE `revenue` (
  Year INTEGER,
  Studio Entertainment[NI 1] REAL,
  Disney Consumer Products[NI 2] REAL,
  Disney Interactive[NI 3][Rev 1] INTEGER,
  Walt Disney Parks and Resorts REAL,
  Disney Media Networks TEXT,
  Total INTEGER
);
Sample rows from `revenue`:
1991, 2593.0, 724.0, None, 2794.0, None, 6111
1992, 3115.0, 1081.0, None, 3306.0, None, 7502
1993, 3673.4, 1415.1, None, 3440.7, None, 8529

CREATE TABLE `voice-actors` (
  character TEXT PRIMARY KEY,
  voice-actor TEXT,
  movie TEXT REFERENCES characters(movie_title)
);
Sample rows from `voice-actors`:
Abby Mallard, Joan Cusack, Chicken Little
Abigail Gabble, Monica Evans, The Aristocats
Abis Mal, Jason Alexander, The Return of Jafar

",voice-actors,voice-actor,"characters, director, movies_total_gross, revenue, voice-actors"
public_review_platform,"How many hours does the Yelp business No. ""5734"" open on Saturday?","SELECT t1.closing_time - t1.opening_time as ""hour"" FROM business_hours as t1 inner JOIN days as t2 ON t1.day_id = t2.day_id WHERE t2.day_of_week LIKE 'Saturday' AND t1.business_id = 5734","CREATE TABLE `business_hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `business_hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `days`:
1, Sunday
2, Monday
3, Tuesday

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","business_hours, days","business_hours.closing_time, business_hours.opening_time, business_hours.day_id, days.day_id, days.day_of_week, business_hours.business_id","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
language_corpus,"How many times of repetition does the word ""exemple"" show in the Catalan language?",SELECT t2.occurrences FROM words as t1 inner JOIN langs_words as t2 ON t1.wid = t2.wid WHERE t1.word = 'exemple' AND t2.lid = 1,"CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `langs_words` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `langs_words`:
1, 1, 242
1, 2, 16841
1, 3, 48700

","CREATE TABLE `langs` (
  lid INTEGER,
  lang TEXT PRIMARY KEY,
  locale TEXT PRIMARY KEY,
  pages INTEGER,
  words INTEGER
);
Sample rows from `langs`:
1, ca, ca_ES, 1129144, 2764996

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
langs, 1
pages, 1129144
words, 2764996

CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `langs_words` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `langs_words`:
1, 1, 242
1, 2, 16841
1, 3, 48700

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

","words, langs_words","langs_words.occurrences, words.wid, langs_words.wid, words.word, langs_words.lid","langs, sqlite_sequence, pages, words, langs_words, pages_words, biwords"
computer_student,Which professor taught the least amount of courses?,SELECT p_id FROM taughtby GROUP BY p_id ORDER BY COUNT(course_id) ASC LIMIT 1,"CREATE TABLE `taughtby` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `taughtby`:
0, 40
1, 40
2, 180

","CREATE TABLE `course` (
  course_id INTEGER,
  courseLevel TEXT
);
Sample rows from `course`:
0, Level_500
1, Level_500
2, Level_500

CREATE TABLE `person` (
  p_id INTEGER,
  professor INTEGER,
  student INTEGER,
  hasPosition TEXT,
  inPhase TEXT,
  yearsInProgram TEXT
);
Sample rows from `person`:
3, 0, 1, 0, 0, 0
4, 0, 1, 0, 0, 0
5, 1, 0, Faculty, 0, 0

CREATE TABLE `advisedBy` (
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id),
  p_id_dummy INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `advisedBy`:
96, 5
118, 5
183, 5

CREATE TABLE `taughtBy` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `taughtBy`:
0, 40
1, 40
2, 180

",taughtby,"p_id, course_id","course, person, advisedBy, taughtBy"
disney,Name the villain of the movie with Scott Weinger and Brad Kane as voice actors.,SELECT t1.villian FROM characters as t1 inner JOIN `voice-actors` as t2 ON t1.movie_title = t2.movie WHERE t2.`voice-actor` = 'Scott Weinger Brad Kane',"CREATE TABLE `characters` (
  movie_title TEXT PRIMARY KEY,
  release_date TEXT,
  hero TEXT REFERENCES voice-actors(character),
  villian TEXT,
  song TEXT
);
Sample rows from `characters`:
Snow White and the Seven Dwarfs, 21-Dec-37, Snow White, Evil Queen, Some Day My Prince Will Come
Pinocchio, 7-Feb-40, Pinocchio, Stromboli, When You Wish upon a Star
Fantasia, 13-Nov-40, None, Chernabog, None

CREATE TABLE `voice-actors` (
  character TEXT PRIMARY KEY,
  voice-actor TEXT,
  movie TEXT REFERENCES characters(movie_title)
);
Sample rows from `voice-actors`:
Abby Mallard, Joan Cusack, Chicken Little
Abigail Gabble, Monica Evans, The Aristocats
Abis Mal, Jason Alexander, The Return of Jafar

","CREATE TABLE `characters` (
  movie_title TEXT PRIMARY KEY,
  release_date TEXT,
  hero TEXT REFERENCES voice-actors(character),
  villian TEXT,
  song TEXT
);
Sample rows from `characters`:
Snow White and the Seven Dwarfs, 21-Dec-37, Snow White, Evil Queen, Some Day My Prince Will Come
Pinocchio, 7-Feb-40, Pinocchio, Stromboli, When You Wish upon a Star
Fantasia, 13-Nov-40, None, Chernabog, None

CREATE TABLE `director` (
  name TEXT PRIMARY KEY REFERENCES characters(movie_title),
  director TEXT
);
Sample rows from `director`:
Snow White and the Seven Dwarfs, David Hand
Pinocchio, Ben Sharpsteen
Fantasia, full credits

CREATE TABLE `movies_total_gross` (
  movie_title TEXT PRIMARY KEY REFERENCES characters(movie_title),
  release_date TEXT PRIMARY KEY,
  genre TEXT,
  MPAA_rating TEXT,
  total_gross TEXT,
  inflation_adjusted_gross TEXT
);
Sample rows from `movies_total_gross`:
Snow White and the Seven Dwarfs, Dec 21, 1937, Musical, G, $184,925,485, $5,228,953,251
Pinocchio, Feb 9, 1940, Adventure, G, $84,300,000, $2,188,229,052
Fantasia, Nov 13, 1940, Musical, G, $83,320,000, $2,187,090,808

CREATE TABLE `revenue` (
  Year INTEGER,
  Studio Entertainment[NI 1] REAL,
  Disney Consumer Products[NI 2] REAL,
  Disney Interactive[NI 3][Rev 1] INTEGER,
  Walt Disney Parks and Resorts REAL,
  Disney Media Networks TEXT,
  Total INTEGER
);
Sample rows from `revenue`:
1991, 2593.0, 724.0, None, 2794.0, None, 6111
1992, 3115.0, 1081.0, None, 3306.0, None, 7502
1993, 3673.4, 1415.1, None, 3440.7, None, 8529

CREATE TABLE `voice-actors` (
  character TEXT PRIMARY KEY,
  voice-actor TEXT,
  movie TEXT REFERENCES characters(movie_title)
);
Sample rows from `voice-actors`:
Abby Mallard, Joan Cusack, Chicken Little
Abigail Gabble, Monica Evans, The Aristocats
Abis Mal, Jason Alexander, The Return of Jafar

","characters, voice-actors","characters.villian, characters.movie_title, voice-actors.movie, voice-actors.voice-actor","characters, director, movies_total_gross, revenue, voice-actors"
university,What is the percentage of Harvard university's international students in 2011?,SELECT t1.pct_international_students FROM university_year as t1 inner JOIN university as t2 ON t1.university_id = t2.id WHERE t1.year = 2011 AND t2.university_name = 'Harvard University',"CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

","CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

CREATE TABLE `ranking_system` (
  id INTEGER,
  system_name TEXT
);
Sample rows from `ranking_system`:
1, Times Higher Education World University Ranking
2, Shanghai Ranking
3, Center for World University Rankings

CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

","university_year, university","university_year.pct_international_students, university_year.university_id, university.id, university_year.year, university.university_name","country, ranking_system, ranking_criteria, university, university_ranking_year, university_year"
retail_complains,Find the number of service members who complained in Syracuse.,SELECT COUNT(t1.client_id) FROM client as t1 inner JOIN events as t2 ON t1.client_id = t2.client_id WHERE t2.tags = 'Servicemember' AND t1.city = 'Syracuse',"CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

","CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

","client, events","client.client_id, events.client_id, events.tags, client.city","state, callcenterlogs, client, district, events, reviews"
simpson_episodes,"In year 2009, what is the percentage of the episode titled by ""Gone Maggie Gone"" being nominated?",SELECT cast((SUM(case when t1.result = 'Nominee' then 1 else 0 end) - SUM(case when t1.result = 'Winner' then 1 else 0 end)) as real) * 100 / COUNT(t1.result) FROM award as t1 inner JOIN episode as t2 ON t1.episode_id = t2.episode_id WHERE t2.title = 'Gone Maggie Gone' AND t1.year = 2009;,"CREATE TABLE `award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","award, episode","award.result, award.episode_id, episode.episode_id, episode.title, award.year","Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
restaurant,What is the name of the least popular Indian restaurant on Shattuck Avenue in Berkeley?,SELECT t1.id_restaurant FROM generalinfo as t1 inner JOIN location as t2 ON t1.id_restaurant = t2.id_restaurant WHERE t1.city = 'berkeley' AND t2.street_name = 'shattuck ave' AND t1.food_type = 'Indian restaurant' ORDER BY t1.review LIMIT 1,"CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

","CREATE TABLE `geographic` (
  city TEXT PRIMARY KEY,
  county TEXT,
  region TEXT
);
Sample rows from `geographic`:
alameda, alameda county, bay area
alamo, contra costa county, bay area
albany, alameda county, bay area

CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

","generalinfo, location","generalinfo.id_restaurant, location.id_restaurant, generalinfo.city, location.street_name, generalinfo.food_type, generalinfo.review","geographic, generalinfo, location"
retail_complains,List the full names of all clients who live in the Pacific division.,"SELECT t2.first, t2.middle, t2.last FROM district as t1 inner JOIN client as t2 ON t1.district_id = t2.district_id WHERE t1.division = 'Pacific'","CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

","CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

","district, client","client.first, client.middle, client.last, district.district_id, client.district_id, district.division","state, callcenterlogs, client, district, events, reviews"
simpson_episodes,"In the crew, who was born in 1962 in California?","SELECT name FROM person WHERE substr(birthdate, 1, 4) = '1962' AND birth_region = 'California';","CREATE TABLE `person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

",person,"name, birthdate, birth_region","Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
bike_share_1,What was the mean humidity of a trip with id 4275?,SELECT t2.mean_humidity FROM trip as t1 inner JOIN weather as t2 ON t2.zip_code = t1.zip_code WHERE t1.id = 4275,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);
Sample rows from `trip`:
4069, 174, 8/29/2013 9:08, 2nd at South Park, 64, 8/29/2013 9:11, 2nd at South Park, 64, 288, Subscriber, 94114
4073, 1067, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:42, San Francisco Caltrain 2 (330 Townsend), 69, 321, Subscriber, 94703
4074, 1131, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:43, San Francisco Caltrain 2 (330 Townsend), 69, 317, Subscriber, 94115

CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches REAL,
  mean_sea_level_pressure_inches REAL,
  min_sea_level_pressure_inches REAL,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches TEXT,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code TEXT
);
Sample rows from `weather`:
8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107
8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30.0, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107
8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30.0, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107

","CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat REAL,
  long REAL,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);
Sample rows from `station`:
2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013
3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013
4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013

CREATE TABLE `status` (
  station_id INTEGER,
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);
Sample rows from `status`:
2, 2, 25, 2013/08/29 12:06:01
2, 2, 25, 2013/08/29 12:07:01
2, 2, 25, 2013/08/29 12:08:01

CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);
Sample rows from `trip`:
4069, 174, 8/29/2013 9:08, 2nd at South Park, 64, 8/29/2013 9:11, 2nd at South Park, 64, 288, Subscriber, 94114
4073, 1067, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:42, San Francisco Caltrain 2 (330 Townsend), 69, 321, Subscriber, 94703
4074, 1131, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:43, San Francisco Caltrain 2 (330 Townsend), 69, 317, Subscriber, 94115

CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches REAL,
  mean_sea_level_pressure_inches REAL,
  min_sea_level_pressure_inches REAL,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches TEXT,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code TEXT
);
Sample rows from `weather`:
8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107
8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30.0, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107
8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30.0, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107

","trip, weather","weather.mean_humidity, weather.zip_code, trip.zip_code, trip.id","station, status, trip, weather"
cs_semester,Name the professor who got graduation from the University of Boston.,"SELECT first_name, last_name FROM prof WHERE graduate_from = 'University of Boston'","CREATE TABLE `prof` (
  prof_id INTEGER,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  popularity INTEGER,
  teachingability INTEGER,
  graduate_from TEXT
);
Sample rows from `prof`:
1, Male, Nathaniel, Pigford, npigford0@hku.hk, 3, 5, University of Washington
2, Male, Zhihua, Zhou, zzhihua@hku.hk, 2, 1, Beijing Polytechnic University
3, Male, Ogdon, Zywicki, ozywicki2@hku.hk, 2, 2, University of Boston

","CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

CREATE TABLE `prof` (
  prof_id INTEGER,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  popularity INTEGER,
  teachingability INTEGER,
  graduate_from TEXT
);
Sample rows from `prof`:
1, Male, Nathaniel, Pigford, npigford0@hku.hk, 3, 5, University of Washington
2, Male, Zhihua, Zhou, zzhihua@hku.hk, 2, 1, Beijing Polytechnic University
3, Male, Ogdon, Zywicki, ozywicki2@hku.hk, 2, 2, University of Boston

CREATE TABLE `RA` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `RA`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

",prof,"first_name, last_name, graduate_from","course, prof, RA, registration, student"
retail_complains,"What is the address of the client who made a complaint via postal mail on March 14, 2012?","SELECT t1.address_1, t1.address_2 FROM client as t1 inner JOIN events as t2 ON t1.client_id = t2.client_id WHERE t2.`date received` = '2012-03-14' AND t2.`submitted via` = 'Postal mail'","CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

","CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

","client, events","client.address_1, client.address_2, client.client_id, events.client_id, events.date received, events.submitted via","state, callcenterlogs, client, district, events, reviews"
restaurant,In which streets of the city of San Francisco are there restaurants that serve seafood?,SELECT t1.street_name FROM location as t1 inner JOIN generalinfo as t2 ON t1.id_restaurant = t2.id_restaurant WHERE t1.city = 'san francisco' AND t2.food_type = 'seafood' AND street_name is NOT null,"CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

","CREATE TABLE `geographic` (
  city TEXT PRIMARY KEY,
  county TEXT,
  region TEXT
);
Sample rows from `geographic`:
alameda, alameda county, bay area
alamo, contra costa county, bay area
albany, alameda county, bay area

CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

","location, generalinfo","location.street_name, location.id_restaurant, generalinfo.id_restaurant, location.city, generalinfo.food_type, street_name","geographic, generalinfo, location"
bike_share_1,"On 8/29/2013 at 6:14:01 PM, how many bikes were borrowed from San Jose Diridon Caltrain Station?",SELECT SUM(t1.dock_count - t2.bikes_available) FROM station as t1 inner JOIN status as t2 ON t1.id = t2.station_id WHERE t1.name = 'San Jose Diridon Caltrain Station' AND t2.time = '2013/08/29 06:14:01',"CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat REAL,
  long REAL,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);
Sample rows from `station`:
2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013
3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013
4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013

CREATE TABLE `status` (
  station_id INTEGER,
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);
Sample rows from `status`:
2, 2, 25, 2013/08/29 12:06:01
2, 2, 25, 2013/08/29 12:07:01
2, 2, 25, 2013/08/29 12:08:01

","CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat REAL,
  long REAL,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);
Sample rows from `station`:
2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013
3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013
4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013

CREATE TABLE `status` (
  station_id INTEGER,
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);
Sample rows from `status`:
2, 2, 25, 2013/08/29 12:06:01
2, 2, 25, 2013/08/29 12:07:01
2, 2, 25, 2013/08/29 12:08:01

CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);
Sample rows from `trip`:
4069, 174, 8/29/2013 9:08, 2nd at South Park, 64, 8/29/2013 9:11, 2nd at South Park, 64, 288, Subscriber, 94114
4073, 1067, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:42, San Francisco Caltrain 2 (330 Townsend), 69, 321, Subscriber, 94703
4074, 1131, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:43, San Francisco Caltrain 2 (330 Townsend), 69, 317, Subscriber, 94115

CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches REAL,
  mean_sea_level_pressure_inches REAL,
  min_sea_level_pressure_inches REAL,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches TEXT,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code TEXT
);
Sample rows from `weather`:
8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107
8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30.0, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107
8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30.0, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107

","station, status","station.dock_count, status.bikes_available, station.id, status.station_id, station.name, status.time","station, status, trip, weather"
shakespeare,"Describe the scene number, act, and title of work which had the description of ""The house of ANTIPHOLUS of Ephesus"" in chapter.","SELECT t2.act, t2.scene, t1.title FROM works as t1 inner JOIN chapters as t2 ON t1.id = t2.work_id WHERE t2.description = 'The house of ANTIPHOLUS of Ephesus.'","CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

","CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
chapters, 19648
characters, 1266
paragraphs, 666327

CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

","works, chapters","chapters.act, chapters.scene, works.title, works.id, chapters.work_id, chapters.description","chapters, sqlite_sequence, characters, paragraphs, works"
restaurant,List the restaurant's ID that has a review greater than the 70% of average review of all American restaurants with street number greater than 2000.,SELECT t1.id_restaurant FROM location as t1 inner JOIN generalinfo as t2 ON t1.id_restaurant = t2.id_restaurant WHERE t2.food_type = 'american' AND t1.street_num > 2000 GROUP BY t1.id_restaurant ORDER BY AVG(t2.review) * 0.7 DESC,"CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

","CREATE TABLE `geographic` (
  city TEXT PRIMARY KEY,
  county TEXT,
  region TEXT
);
Sample rows from `geographic`:
alameda, alameda county, bay area
alamo, contra costa county, bay area
albany, alameda county, bay area

CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

","location, generalinfo","location.id_restaurant, generalinfo.id_restaurant, generalinfo.food_type, location.street_num, generalinfo.review","geographic, generalinfo, location"
student_loan,State name of students who filed for bankruptcy and have the longest duration of absense from school.,SELECT t1.name FROM longest_absense_from_school as t1 inner JOIN filed_for_bankrupcy as t2 ON t1.name = t2.name ORDER BY t1.month DESC LIMIT 1,"CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

","longest_absense_from_school, filed_for_bankrupcy","longest_absense_from_school.name, filed_for_bankrupcy.name, longest_absense_from_school.month","bool, person, disabled, enlist, filed_for_bankrupcy, longest_absense_from_school, male, no_payment_due, unemployed, enrolled"
ice_hockey_draft,Indicate the height of all players from team Oshawa Generals in inches.,SELECT t3.height_in_inch FROM playerinfo as t1 inner JOIN seasonstatus as t2 ON t1.eliteid = t2.eliteid inner JOIN height_info as t3 ON t1.height = t3.height_id WHERE t2.team = 'Oshawa Generals',"CREATE TABLE `playerinfo` (
  ELITEID INTEGER,
  PlayerName TEXT,
  birthdate TEXT,
  birthyear DATE,
  birthmonth INTEGER,
  birthday INTEGER,
  birthplace TEXT,
  nation TEXT,
  height INTEGER REFERENCES height_info(height_id),
  weight INTEGER REFERENCES weight_info(weight_id),
  position_info TEXT,
  shoots TEXT,
  draftyear INTEGER,
  draftround INTEGER,
  overall INTEGER,
  overallby TEXT,
  CSS_rank INTEGER,
  sum_7yr_GP INTEGER,
  sum_7yr_TOI INTEGER,
  GP_greater_than_0 TEXT
);
Sample rows from `playerinfo`:
9, David Bornhammar, 1981-06-15, 1981, 6, 15, Lidingo, SWE, Sweden, 73, 198, D, L, 1999, 7, 192, Washington Capitals, 192, 0, 0, no
18, David Printz, 1980-07-24, 1980, 7, 24, Stockholm, SWE, Sweden, 76, 220, D, L, 2001, 7, 225, Philadelphia Flyers, 176, 13, 84, yes
27, Yared Hagos, 1983-03-27, 1983, 3, 27, Stockholm, SWE, Sweden, 73, 218, C, L, 2001, 3, 70, Dallas Stars, 24, 0, 0, no

CREATE TABLE `seasonstatus` (
  ELITEID INTEGER REFERENCES PlayerInfo(ELITEID),
  SEASON TEXT,
  TEAM TEXT,
  LEAGUE TEXT,
  GAMETYPE TEXT,
  GP INTEGER,
  G INTEGER,
  A INTEGER,
  P INTEGER,
  PIM INTEGER,
  PLUSMINUS INTEGER
);
Sample rows from `seasonstatus`:
3667, 1997-1998, Rimouski Oceanic, QMJHL, Regular Season, 58, 44, 71, 115, 117, 27
3667, 1997-1998, Rimouski Oceanic, QMJHL, Playoffs, 18, 15, 26, 41, 46, 4
3667, 1997-1998, Canada U20, WJC-20, Regular Season, 7, 1, 1, 2, 4, 0

CREATE TABLE `height_info` (
  height_id INTEGER,
  height_in_cm INTEGER,
  height_in_inch TEXT
);
Sample rows from `height_info`:
65, 165, 5'5""
67, 170, 5'7""
68, 172, 5'8""

","CREATE TABLE `height_info` (
  height_id INTEGER,
  height_in_cm INTEGER,
  height_in_inch TEXT
);
Sample rows from `height_info`:
65, 165, 5'5""
67, 170, 5'7""
68, 172, 5'8""

CREATE TABLE `weight_info` (
  weight_id INTEGER,
  weight_in_kg INTEGER,
  weight_in_lbs INTEGER
);
Sample rows from `weight_info`:
154, 70, 154
159, 72, 159
161, 73, 161

CREATE TABLE `PlayerInfo` (
  ELITEID INTEGER,
  PlayerName TEXT,
  birthdate TEXT,
  birthyear DATE,
  birthmonth INTEGER,
  birthday INTEGER,
  birthplace TEXT,
  nation TEXT,
  height INTEGER REFERENCES height_info(height_id),
  weight INTEGER REFERENCES weight_info(weight_id),
  position_info TEXT,
  shoots TEXT,
  draftyear INTEGER,
  draftround INTEGER,
  overall INTEGER,
  overallby TEXT,
  CSS_rank INTEGER,
  sum_7yr_GP INTEGER,
  sum_7yr_TOI INTEGER,
  GP_greater_than_0 TEXT
);
Sample rows from `PlayerInfo`:
9, David Bornhammar, 1981-06-15, 1981, 6, 15, Lidingo, SWE, Sweden, 73, 198, D, L, 1999, 7, 192, Washington Capitals, 192, 0, 0, no
18, David Printz, 1980-07-24, 1980, 7, 24, Stockholm, SWE, Sweden, 76, 220, D, L, 2001, 7, 225, Philadelphia Flyers, 176, 13, 84, yes
27, Yared Hagos, 1983-03-27, 1983, 3, 27, Stockholm, SWE, Sweden, 73, 218, C, L, 2001, 3, 70, Dallas Stars, 24, 0, 0, no

CREATE TABLE `SeasonStatus` (
  ELITEID INTEGER REFERENCES PlayerInfo(ELITEID),
  SEASON TEXT,
  TEAM TEXT,
  LEAGUE TEXT,
  GAMETYPE TEXT,
  GP INTEGER,
  G INTEGER,
  A INTEGER,
  P INTEGER,
  PIM INTEGER,
  PLUSMINUS INTEGER
);
Sample rows from `SeasonStatus`:
3667, 1997-1998, Rimouski Oceanic, QMJHL, Regular Season, 58, 44, 71, 115, 117, 27
3667, 1997-1998, Rimouski Oceanic, QMJHL, Playoffs, 18, 15, 26, 41, 46, 4
3667, 1997-1998, Canada U20, WJC-20, Regular Season, 7, 1, 1, 2, 4, 0

","playerinfo, seasonstatus, height_info","height_info.height_in_inch, playerinfo.eliteid, seasonstatus.eliteid, playerinfo.height, height_info.height_id, seasonstatus.team","height_info, weight_info, PlayerInfo, SeasonStatus"
shakespeare,Describe the full title which had the character named Servant to Montague.,SELECT DISTINCT t1.longtitle FROM works as t1 inner JOIN chapters as t2 ON t1.id = t2.work_id inner JOIN paragraphs as t3 ON t2.id = t3.chapter_id inner JOIN characters as t4 ON t3.character_id = t4.id WHERE t4.description = 'Servant to Montague',"CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

","CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
chapters, 19648
characters, 1266
paragraphs, 666327

CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

","works, chapters, paragraphs, characters","works.longtitle, works.id, chapters.work_id, chapters.id, paragraphs.chapter_id, paragraphs.character_id, characters.id, characters.description","chapters, sqlite_sequence, characters, paragraphs, works"
codebase_comments,What is the language of method number 28 that can be found in the repository number 3?,SELECT t2.lang FROM solution as t1 inner JOIN method as t2 ON t1.id = t2.solutionid WHERE t2.id = 28 AND t1.Repoid = 3,"CREATE TABLE `solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

CREATE TABLE `method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Method, 10860640
MethodParameter, 17514858
Repo, 156550

CREATE TABLE `Method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `Method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

CREATE TABLE `MethodParameter` (
  Id INTEGER,
  MethodId TEXT,
  Type TEXT,
  Name TEXT
);
Sample rows from `MethodParameter`:
1, 1, System.String, data
2, 2, System.Int32, i
3, 2, System.Int32, declstartpos

CREATE TABLE `Repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `Repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

CREATE TABLE `Solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `Solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

","solution, method","method.lang, solution.id, method.solutionid, method.id, solution.Repoid","sqlite_sequence, Method, MethodParameter, Repo, Solution"
beer_factory,What is the precise location of Sac State Union?,"SELECT t2.latitude, t2.longitude FROM location as t1 inner JOIN geolocation as t2 ON t1.locationid = t2.locationid WHERE t1.locationname = 'Sac State Union'","CREATE TABLE `location` (
  LocationID INTEGER REFERENCES geolocation(LocationID),
  LocationName TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER
);
Sample rows from `location`:
0, LOST, None, None, None, None
1, Sac State American River Courtyard, 6000 J St, Sacramento, CA, 95819
2, Sac State Union, 6000 J St, Sacramento, CA, 95819

CREATE TABLE `geolocation` (
  LocationID INTEGER REFERENCES location(LocationID),
  Latitude REAL,
  Longitude REAL
);
Sample rows from `geolocation`:
0, 0.0, 0.0
1, 38.566129, -121.426432
2, 38.559615, -121.42243

","CREATE TABLE `customers` (
  CustomerID INTEGER,
  First TEXT,
  Last TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER,
  Email TEXT,
  PhoneNumber TEXT,
  FirstPurchaseDate DATE,
  SubscribedToEmailList TEXT,
  Gender TEXT
);
Sample rows from `customers`:
101811, Kenneth, Walton, 6715 Commonwealth Dr, Sacramento, CA, 94256, walton.k76@fastmail.com, (916) 918-1561, 2013-05-30, FALSE, M
103508, Madeleine, Jones, 3603 Leola Way, Sacramento, CA, 94258, j_madeleine@gmail.com, (916) 186-9423, 2013-02-06, FALSE, F
104939, Damen, Wheeler, 6740 Branwood Way, Orangevale, CA, 95662, dwheeler@outlook.com, (916) 164-1156, 2013-04-11, FALSE, M

CREATE TABLE `geolocation` (
  LocationID INTEGER REFERENCES location(LocationID),
  Latitude REAL,
  Longitude REAL
);
Sample rows from `geolocation`:
0, 0.0, 0.0
1, 38.566129, -121.426432
2, 38.559615, -121.42243

CREATE TABLE `location` (
  LocationID INTEGER REFERENCES geolocation(LocationID),
  LocationName TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER
);
Sample rows from `location`:
0, LOST, None, None, None, None
1, Sac State American River Courtyard, 6000 J St, Sacramento, CA, 95819
2, Sac State Union, 6000 J St, Sacramento, CA, 95819

CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

CREATE TABLE `rootbeerreview` (
  CustomerID INTEGER PRIMARY KEY REFERENCES customers(CustomerID),
  BrandID INTEGER PRIMARY KEY REFERENCES rootbeerbrand(BrandID),
  StarRating INTEGER,
  ReviewDate DATE,
  Review TEXT
);
Sample rows from `rootbeerreview`:
101811, 10012, 5, 2013-07-15, None
101811, 10014, 1, 2013-07-08, None
101811, 10015, 3, 2013-07-25, None

CREATE TABLE `transaction` (
  TransactionID INTEGER,
  CreditCardNumber INTEGER,
  CustomerID INTEGER REFERENCES customers(CustomerID),
  TransactionDate DATE,
  CreditCardType TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  RootBeerID INTEGER REFERENCES rootbeer(RootBeerID),
  PurchasePrice REAL
);
Sample rows from `transaction`:
100000, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105661, 3.0
100001, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105798, 3.0
100002, 6011583832864739, 864896, 2014-07-07, Discover, 2, 102514, 3.0

","location, geolocation","geolocation.latitude, geolocation.longitude, location.locationid, geolocation.locationid, location.locationname","customers, geolocation, location, rootbeerbrand, rootbeer, rootbeerreview, transaction"
university,"For the university id 268, show its number of students in 2013.",SELECT num_students FROM university_year WHERE university_id = 268 AND year = 2013,"CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

","CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

CREATE TABLE `ranking_system` (
  id INTEGER,
  system_name TEXT
);
Sample rows from `ranking_system`:
1, Times Higher Education World University Ranking
2, Shanghai Ranking
3, Center for World University Rankings

CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

",university_year,"num_students, university_id","country, ranking_system, ranking_criteria, university, university_ranking_year, university_year"
public_review_platform,What is the total number of active businesses in AZ with a medium review count?,SELECT COUNT(business_id) FROM business WHERE review_count = 'Medium' AND state = 'AZ' AND active = 'true',"CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

",business,"business_id, review_count, state, active","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
software_company,What is the age of female customers within the number of inhabitants below 30?,SELECT age FROM customers WHERE geoid IN ( SELECT geoid FROM demog WHERE inhabitants_k < 30 ) AND sex = 'Female',"CREATE TABLE `customers` (
  ID INTEGER,
  SEX TEXT,
  MARITAL_STATUS TEXT,
  GEOID INTEGER REFERENCES Demog(None),
  EDUCATIONNUM INTEGER,
  OCCUPATION TEXT,
  age INTEGER
);
Sample rows from `customers`:
0, Male, Never-married, 61, 7, Machine-op-inspct, 62
1, Male, Married-civ-spouse, 70, 3, Handlers-cleaners, 78
2, Male, Never-married, 53, 7, Machine-op-inspct, 69

CREATE TABLE `demog` (
  GEOID INTEGER,
  INHABITANTS_K REAL,
  INCOME_K REAL,
  A_VAR1 REAL,
  A_VAR2 REAL,
  A_VAR3 REAL,
  A_VAR4 REAL,
  A_VAR5 REAL,
  A_VAR6 REAL,
  A_VAR7 REAL,
  A_VAR8 REAL,
  A_VAR9 REAL,
  A_VAR10 REAL,
  A_VAR11 REAL,
  A_VAR12 REAL,
  A_VAR13 REAL,
  A_VAR14 REAL,
  A_VAR15 REAL,
  A_VAR16 REAL,
  A_VAR17 REAL,
  A_VAR18 REAL
);
Sample rows from `demog`:
0, 30.046, 2631.47, 6.084, 5.79, 8.595, 3.935, 6.362, 8.626, 4.624, 8.324, 5.233, 6.232, 5.205, 8.231, 6.746, 8.679, 5.292, 3.5, 5.512, 5.783
1, 36.25, 3012.75, 4.604, 8.309, 6.007, 5.938, 8.773, 3.579, 6.349, 4.694, 6.884, 7.062, 7.319, 3.72, 6.405, 7.202, 4.932, 7.969, 8.15, 5.633
2, 47.645, 2192.41, 4.911, 8.557, 5.934, 6.494, 9.172, 3.202, 6.157, 4.822, 7.942, 7.901, 7.928, 2.33, 6.029, 6.455, 4.72, 8.564, 8.342, 4.938

","CREATE TABLE `Demog` (
  GEOID INTEGER,
  INHABITANTS_K REAL,
  INCOME_K REAL,
  A_VAR1 REAL,
  A_VAR2 REAL,
  A_VAR3 REAL,
  A_VAR4 REAL,
  A_VAR5 REAL,
  A_VAR6 REAL,
  A_VAR7 REAL,
  A_VAR8 REAL,
  A_VAR9 REAL,
  A_VAR10 REAL,
  A_VAR11 REAL,
  A_VAR12 REAL,
  A_VAR13 REAL,
  A_VAR14 REAL,
  A_VAR15 REAL,
  A_VAR16 REAL,
  A_VAR17 REAL,
  A_VAR18 REAL
);
Sample rows from `Demog`:
0, 30.046, 2631.47, 6.084, 5.79, 8.595, 3.935, 6.362, 8.626, 4.624, 8.324, 5.233, 6.232, 5.205, 8.231, 6.746, 8.679, 5.292, 3.5, 5.512, 5.783
1, 36.25, 3012.75, 4.604, 8.309, 6.007, 5.938, 8.773, 3.579, 6.349, 4.694, 6.884, 7.062, 7.319, 3.72, 6.405, 7.202, 4.932, 7.969, 8.15, 5.633
2, 47.645, 2192.41, 4.911, 8.557, 5.934, 6.494, 9.172, 3.202, 6.157, 4.822, 7.942, 7.901, 7.928, 2.33, 6.029, 6.455, 4.72, 8.564, 8.342, 4.938

CREATE TABLE `mailings3` (
  REFID INTEGER,
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `mailings3`:
60000, 2007-07-01 12:00:00.0, false
60001, 2007-07-01 12:00:00.0, false
60002, 2007-07-01 12:00:00.0, false

CREATE TABLE `Customers` (
  ID INTEGER,
  SEX TEXT,
  MARITAL_STATUS TEXT,
  GEOID INTEGER REFERENCES Demog(None),
  EDUCATIONNUM INTEGER,
  OCCUPATION TEXT,
  age INTEGER
);
Sample rows from `Customers`:
0, Male, Never-married, 61, 7, Machine-op-inspct, 62
1, Male, Married-civ-spouse, 70, 3, Handlers-cleaners, 78
2, Male, Never-married, 53, 7, Machine-op-inspct, 69

CREATE TABLE `Mailings1_2` (
  REFID INTEGER REFERENCES Customers(None),
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `Mailings1_2`:
0, 2007-02-01 12:00:00.0, false
1, 2007-02-01 12:00:00.0, false
2, 2007-02-01 12:00:00.0, false

CREATE TABLE `Sales` (
  EVENTID INTEGER,
  REFID INTEGER REFERENCES Customers(None),
  EVENT_DATE DATETIME,
  AMOUNT REAL
);
Sample rows from `Sales`:
0, 0, 2006-12-21 12:00:00.0, 17.907
1, 0, 2006-12-25 12:00:00.0, 17.401
2, 0, 2007-01-26 12:00:00.0, 13.277

","customers, demog","age, geoid, inhabitants_k, sex","Demog, mailings3, Customers, Mailings1_2, Sales"
shipping,"Among the customers having at least one shipment in 2017, how many of them have an annual revenue of over 30000000?","SELECT COUNT(countCUSID) FROM ( SELECT COUNT(t1.cust_id) as countCUSID FROM customer as t1 inner JOIN shipment as t2 ON t1.cust_id = t2.cust_id WHERE strftime('%Y', t2.ship_date) = '2017' AND t1.annual_revenue > 30000000 GROUP BY t1.cust_id HAVING COUNT(t2.ship_id) >= 1 ) t3","CREATE TABLE `customer` (
  cust_id INTEGER,
  cust_name TEXT,
  annual_revenue INTEGER,
  cust_type TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip REAL,
  phone TEXT
);
Sample rows from `customer`:
193, Advanced Fabricators, 39588651, manufacturer, 5141 Summit Boulevard, West Palm Beach, FL, 33415.0, (561) 683-3535
304, Pard's Trailer Sales, 17158109, wholesaler, 5910 South 300 West, Salt Lake City, UT, 84107.0, (801) 262-4864
314, Saar Enterprises, Inc., 47403613, retailer, 11687 192nd Street, Council Bluffs, IA, 51503.0, (712) 366-4929

CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

","CREATE TABLE `city` (
  city_id INTEGER,
  city_name TEXT,
  state TEXT,
  population INTEGER,
  area REAL
);
Sample rows from `city`:
100, Union City, New Jersey, 67088, 1.3
101, Huntington Park, California, 61348, 3.0
102, Passaic, New Jersey, 67861, 3.1

CREATE TABLE `customer` (
  cust_id INTEGER,
  cust_name TEXT,
  annual_revenue INTEGER,
  cust_type TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip REAL,
  phone TEXT
);
Sample rows from `customer`:
193, Advanced Fabricators, 39588651, manufacturer, 5141 Summit Boulevard, West Palm Beach, FL, 33415.0, (561) 683-3535
304, Pard's Trailer Sales, 17158109, wholesaler, 5910 South 300 West, Salt Lake City, UT, 84107.0, (801) 262-4864
314, Saar Enterprises, Inc., 47403613, retailer, 11687 192nd Street, Council Bluffs, IA, 51503.0, (712) 366-4929

CREATE TABLE `driver` (
  driver_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip_code INTEGER,
  phone TEXT
);
Sample rows from `driver`:
20, Sue, Newell, 268 Richmond Ave, Memphis, TN, 38106, (901) 774-6569
21, Andrea, Simons, 3574 Oak Limb Cv, Memphis, TN, 38135, (901) 384-0984
22, Roger, McHaney, 1839 S Orleans St, Memphis, TN, 38106, (901) 948-1043

CREATE TABLE `truck` (
  truck_id INTEGER,
  make TEXT,
  model_year INTEGER
);
Sample rows from `truck`:
1, Peterbilt, 2005
2, Mack, 2006
3, Peterbilt, 2007

CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

","customer, shipment","customer.cust_id, shipment.cust_id, shipment.ship_date, customer.annual_revenue, shipment.ship_id","city, customer, driver, truck, shipment"
language_corpus,Indicate the page id of Wikipedia about Catalan language of all the pages that have a numeric value in their title.,"SELECT pid, title FROM pages WHERE title LIKE '%0%' OR '%1%' OR '%2%' OR '%3%' OR '%4%' OR '%5%' OR '%6%' OR '%7%' OR '%8%' OR '%9%'","CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

","CREATE TABLE `langs` (
  lid INTEGER,
  lang TEXT PRIMARY KEY,
  locale TEXT PRIMARY KEY,
  pages INTEGER,
  words INTEGER
);
Sample rows from `langs`:
1, ca, ca_ES, 1129144, 2764996

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
langs, 1
pages, 1129144
words, 2764996

CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `langs_words` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `langs_words`:
1, 1, 242
1, 2, 16841
1, 3, 48700

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

",pages,"pid, title","langs, sqlite_sequence, pages, words, langs_words, pages_words, biwords"
books,How many books were published in 2017?,"SELECT COUNT(*) FROM book WHERE strftime('%Y', publication_date) = '2017'","CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

",book,publication_date,"address_status, author, book_language, country, address, customer, customer_address, order_status, publisher, book, book_author, shipping_method, cust_order, sqlite_sequence, order_history, order_line"
food_inspection_2,"After Azha Restaurant Inc. passed the inspection on 2010/1/21, when was the follow-up inspection done?",SELECT t1.followup_to FROM inspection as t1 inner JOIN establishment as t2 ON t1.license_no = t2.license_no WHERE t2.dba_name = 'Azha Restaurant Inc.' AND t1.results = 'Pass' AND t1.inspection_date = '2010-01-21',"CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

","inspection, establishment","inspection.followup_to, inspection.license_no, establishment.license_no, establishment.dba_name, inspection.results, inspection.inspection_date","employee, establishment, inspection, inspection_point, violation"
software_company,"Of the first 60,000 customers who sent a true response to the incentive mailing sent by the marketing department, how many of them are divorced males?",SELECT COUNT(t1.id) FROM customers as t1 inner JOIN mailings1_2 as t2 ON t1.id = t2.REFid WHERE t1.sex = 'Male' AND t1.marital_status = 'Divorced' AND t2.response = 'true',"CREATE TABLE `customers` (
  ID INTEGER,
  SEX TEXT,
  MARITAL_STATUS TEXT,
  GEOID INTEGER REFERENCES Demog(None),
  EDUCATIONNUM INTEGER,
  OCCUPATION TEXT,
  age INTEGER
);
Sample rows from `customers`:
0, Male, Never-married, 61, 7, Machine-op-inspct, 62
1, Male, Married-civ-spouse, 70, 3, Handlers-cleaners, 78
2, Male, Never-married, 53, 7, Machine-op-inspct, 69

CREATE TABLE `mailings1_2` (
  REFID INTEGER REFERENCES Customers(None),
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `mailings1_2`:
0, 2007-02-01 12:00:00.0, false
1, 2007-02-01 12:00:00.0, false
2, 2007-02-01 12:00:00.0, false

","CREATE TABLE `Demog` (
  GEOID INTEGER,
  INHABITANTS_K REAL,
  INCOME_K REAL,
  A_VAR1 REAL,
  A_VAR2 REAL,
  A_VAR3 REAL,
  A_VAR4 REAL,
  A_VAR5 REAL,
  A_VAR6 REAL,
  A_VAR7 REAL,
  A_VAR8 REAL,
  A_VAR9 REAL,
  A_VAR10 REAL,
  A_VAR11 REAL,
  A_VAR12 REAL,
  A_VAR13 REAL,
  A_VAR14 REAL,
  A_VAR15 REAL,
  A_VAR16 REAL,
  A_VAR17 REAL,
  A_VAR18 REAL
);
Sample rows from `Demog`:
0, 30.046, 2631.47, 6.084, 5.79, 8.595, 3.935, 6.362, 8.626, 4.624, 8.324, 5.233, 6.232, 5.205, 8.231, 6.746, 8.679, 5.292, 3.5, 5.512, 5.783
1, 36.25, 3012.75, 4.604, 8.309, 6.007, 5.938, 8.773, 3.579, 6.349, 4.694, 6.884, 7.062, 7.319, 3.72, 6.405, 7.202, 4.932, 7.969, 8.15, 5.633
2, 47.645, 2192.41, 4.911, 8.557, 5.934, 6.494, 9.172, 3.202, 6.157, 4.822, 7.942, 7.901, 7.928, 2.33, 6.029, 6.455, 4.72, 8.564, 8.342, 4.938

CREATE TABLE `mailings3` (
  REFID INTEGER,
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `mailings3`:
60000, 2007-07-01 12:00:00.0, false
60001, 2007-07-01 12:00:00.0, false
60002, 2007-07-01 12:00:00.0, false

CREATE TABLE `Customers` (
  ID INTEGER,
  SEX TEXT,
  MARITAL_STATUS TEXT,
  GEOID INTEGER REFERENCES Demog(None),
  EDUCATIONNUM INTEGER,
  OCCUPATION TEXT,
  age INTEGER
);
Sample rows from `Customers`:
0, Male, Never-married, 61, 7, Machine-op-inspct, 62
1, Male, Married-civ-spouse, 70, 3, Handlers-cleaners, 78
2, Male, Never-married, 53, 7, Machine-op-inspct, 69

CREATE TABLE `Mailings1_2` (
  REFID INTEGER REFERENCES Customers(None),
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `Mailings1_2`:
0, 2007-02-01 12:00:00.0, false
1, 2007-02-01 12:00:00.0, false
2, 2007-02-01 12:00:00.0, false

CREATE TABLE `Sales` (
  EVENTID INTEGER,
  REFID INTEGER REFERENCES Customers(None),
  EVENT_DATE DATETIME,
  AMOUNT REAL
);
Sample rows from `Sales`:
0, 0, 2006-12-21 12:00:00.0, 17.907
1, 0, 2006-12-25 12:00:00.0, 17.401
2, 0, 2007-01-26 12:00:00.0, 13.277

","customers, mailings1_2","customers.id, mailings1_2.REFid, customers.sex, customers.marital_status, mailings1_2.response","Demog, mailings3, Customers, Mailings1_2, Sales"
beer_factory,Which root beer got the most five stars in 2012? Give the brand name of this beer.,"SELECT t3.brandname FROM rootbeer as t1 inner JOIN rootbeerreview as t2 ON t1.brandid = t2.brandid inner JOIN rootbeerbrand as t3 ON t1.brandid = t3.brandid WHERE t2.starrating = 5 AND strftime('%Y', t2.reviewdate) = '2012' GROUP BY t1.brandid ORDER BY COUNT(t2.brandid) DESC LIMIT 1","CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

CREATE TABLE `rootbeerreview` (
  CustomerID INTEGER PRIMARY KEY REFERENCES customers(CustomerID),
  BrandID INTEGER PRIMARY KEY REFERENCES rootbeerbrand(BrandID),
  StarRating INTEGER,
  ReviewDate DATE,
  Review TEXT
);
Sample rows from `rootbeerreview`:
101811, 10012, 5, 2013-07-15, None
101811, 10014, 1, 2013-07-08, None
101811, 10015, 3, 2013-07-25, None

CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

","CREATE TABLE `customers` (
  CustomerID INTEGER,
  First TEXT,
  Last TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER,
  Email TEXT,
  PhoneNumber TEXT,
  FirstPurchaseDate DATE,
  SubscribedToEmailList TEXT,
  Gender TEXT
);
Sample rows from `customers`:
101811, Kenneth, Walton, 6715 Commonwealth Dr, Sacramento, CA, 94256, walton.k76@fastmail.com, (916) 918-1561, 2013-05-30, FALSE, M
103508, Madeleine, Jones, 3603 Leola Way, Sacramento, CA, 94258, j_madeleine@gmail.com, (916) 186-9423, 2013-02-06, FALSE, F
104939, Damen, Wheeler, 6740 Branwood Way, Orangevale, CA, 95662, dwheeler@outlook.com, (916) 164-1156, 2013-04-11, FALSE, M

CREATE TABLE `geolocation` (
  LocationID INTEGER REFERENCES location(LocationID),
  Latitude REAL,
  Longitude REAL
);
Sample rows from `geolocation`:
0, 0.0, 0.0
1, 38.566129, -121.426432
2, 38.559615, -121.42243

CREATE TABLE `location` (
  LocationID INTEGER REFERENCES geolocation(LocationID),
  LocationName TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER
);
Sample rows from `location`:
0, LOST, None, None, None, None
1, Sac State American River Courtyard, 6000 J St, Sacramento, CA, 95819
2, Sac State Union, 6000 J St, Sacramento, CA, 95819

CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

CREATE TABLE `rootbeerreview` (
  CustomerID INTEGER PRIMARY KEY REFERENCES customers(CustomerID),
  BrandID INTEGER PRIMARY KEY REFERENCES rootbeerbrand(BrandID),
  StarRating INTEGER,
  ReviewDate DATE,
  Review TEXT
);
Sample rows from `rootbeerreview`:
101811, 10012, 5, 2013-07-15, None
101811, 10014, 1, 2013-07-08, None
101811, 10015, 3, 2013-07-25, None

CREATE TABLE `transaction` (
  TransactionID INTEGER,
  CreditCardNumber INTEGER,
  CustomerID INTEGER REFERENCES customers(CustomerID),
  TransactionDate DATE,
  CreditCardType TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  RootBeerID INTEGER REFERENCES rootbeer(RootBeerID),
  PurchasePrice REAL
);
Sample rows from `transaction`:
100000, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105661, 3.0
100001, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105798, 3.0
100002, 6011583832864739, 864896, 2014-07-07, Discover, 2, 102514, 3.0

","rootbeer, rootbeerreview, rootbeerbrand","rootbeerbrand.brandname, rootbeer.brandid, rootbeerreview.brandid, rootbeerbrand.brandid, rootbeerreview.starrating, rootbeerreview.reviewdate","customers, geolocation, location, rootbeerbrand, rootbeer, rootbeerreview, transaction"
public_review_platform,What is the ratio of good to bad business star for a businesses that are opened all the time?,SELECT cast(SUM(case when t1.stars BETWEEN 3.5 AND 5 then 1 else 0 end) as real) / SUM(case when t1.stars BETWEEN 1 AND 2.5 then 1 else 0 end) as ratio FROM business as t1 inner JOIN business_Hours as t2 ON t1.business_id = t2.business_id,"CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","business, business_Hours","business.stars, business.business_id, business_Hours.business_id","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
shooting,How many more black female victims than white female victims were discovered?,SELECT SUM(race = 'B') - SUM(race = 'W') fROM subjects WHERE gender = 'f',"CREATE TABLE `subjects` (
  case_number TEXT REFERENCES incidents(case_number),
  race TEXT,
  gender TEXT,
  last_name TEXT,
  first_name TEXT,
  full_name TEXT
);
Sample rows from `subjects`:
44523A, L, M, Curry, James, Curry, James
121982X, L, M, Chavez, Gabriel, Chavez, Gabriel
605484T, L, M, Salinas, Nick, Salinas, Nick

","CREATE TABLE `incidents` (
  case_number TEXT PRIMARY KEY,
  date DATE,
  location TEXT,
  subject_statuses TEXT,
  subject_weapon TEXT,
  subjects TEXT,
  subject_count INTEGER,
  officers TEXT
);
Sample rows from `incidents`:
031347-2015, 2015/2/9, 7400 Bonnie View Road, Deceased, Vehicle, Luster, Desmond Dwayne B/M, 1, Tollerton, Aaron W/M
072458-2016, 2016/3/26, 8218 Willoughby Boulevard, Shoot and Miss, Shotgun, Gilstrap, Bryan B/M, 1, Cardenas, Steven L/M
089985-2016, 2016/4/16, 4800 Columbia Ave, Shoot and Miss, Handgun, Unknown L/M, 1, Ruben, Fredirick W/M

CREATE TABLE `officers` (
  case_number TEXT REFERENCES incidents(case_number),
  race TEXT,
  gender TEXT,
  last_name TEXT,
  first_name TEXT,
  full_name TEXT
);
Sample rows from `officers`:
44523A, L, M, Patino, Michael, Patino, Michael
44523A, W, M, Fillingim, Brian, Fillingim, Brian
121982X, L, M, Padilla, Gilbert, Padilla, Gilbert

CREATE TABLE `subjects` (
  case_number TEXT REFERENCES incidents(case_number),
  race TEXT,
  gender TEXT,
  last_name TEXT,
  first_name TEXT,
  full_name TEXT
);
Sample rows from `subjects`:
44523A, L, M, Curry, James, Curry, James
121982X, L, M, Chavez, Gabriel, Chavez, Gabriel
605484T, L, M, Salinas, Nick, Salinas, Nick

",subjects,"race, gender","incidents, officers, subjects"
image_and_language,Which object classes belong to the onion category?,SELECT obj_class_id FROM obj_classes WHERE obj_class = 'onion',"CREATE TABLE `obj_classes` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `obj_classes`:
0, awning
1, goggles
2, dot

","CREATE TABLE `ATT_CLASSES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `ATT_CLASSES`:
0, building s
1, indoors
2, cluttered

CREATE TABLE `OBJ_CLASSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLASSES`:
0, awning
1, goggles
2, dot

CREATE TABLE `IMG_OBJ` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `IMG_OBJ`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `IMG_OBJ_ATT` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_OBJ_ATT`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `PRED_CLASSES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `PRED_CLASSES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `IMG_REL` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_REL`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

",obj_classes,"obj_class_id, obj_class","ATT_CLASSES, OBJ_CLASSES, IMG_OBJ, IMG_OBJ_ATT, PRED_CLASSES, IMG_REL"
retail_complains,What is the full name of the client whose complaint on 2017/3/27 was received by MICHAL?,"SELECT t1.first, t1.middle, t1.last FROM client as t1 inner JOIN callcenterlogs as t2 ON t1.client_id = t2.`rand client` WHERE t2.`date received` = '2017-03-27' AND t2.server = 'MICHAL'","CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

","CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

","client, callcenterlogs","client.first, client.middle, client.last, client.client_id, callcenterlogs.rand client, callcenterlogs.date received, callcenterlogs.server","state, callcenterlogs, client, district, events, reviews"
retail_world,"List the product ID of the top five products, by descending order, the number of quantities in stock.",SELECT productid FROM products ORDER BY unitsinstock DESC LIMIT 5,"CREATE TABLE `products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

",products,"productid, unitsinstock","sqlite_sequence, Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails"
chicago_crime,What is the percentage of under $500 thefts among all cases that happened in West Englewood?,SELECT cast(SUM(case when t2.secondary_description = '$500 AND UNDER' then 1 else 0 end) as real) * 100 / COUNT(t1.case_number) FROM crime as t1 inner JOIN iucr as t2 ON t1.iucr_no = t2.iucr_no inner JOIN community_area as t3 ON t1.community_area_no = t3.community_area_no WHERE t2.primary_description = 'THEFT' AND t3.community_area_name = 'West Englewood',"CREATE TABLE `crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

CREATE TABLE `iucr` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `iucr`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `community_area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `community_area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

","CREATE TABLE `Community_Area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `Community_Area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `District` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `District`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `FBI_Code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `FBI_Code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `IUCR` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `IUCR`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `Neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `Neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `Ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `Ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `Crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `Crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","crime, iucr, community_area","iucr.secondary_description, crime.case_number, crime.iucr_no, iucr.iucr_no, crime.community_area_no, community_area.community_area_no, iucr.primary_description, community_area.community_area_name","Community_Area, District, FBI_Code, IUCR, Neighborhood, Ward, Crime"
cars,How much is the Volkswagen Dasher with 14.1 mph acceleration?,SELECT t2.price FROM data as t1 inner JOIN price as t2 ON t1.id = t2.id WHERE t1.car_name = 'volkswagen dasher' AND t1.acceleration = '14.1',"CREATE TABLE `data` (
  ID INTEGER REFERENCES price(ID),
  mpg REAL,
  cylinders INTEGER,
  displacement REAL,
  horsepower INTEGER,
  weight INTEGER,
  acceleration REAL,
  model INTEGER,
  car_name TEXT
);
Sample rows from `data`:
1, 18.0, 8, 307.0, 130, 3504, 12.0, 70, chevrolet chevelle malibu
2, 15.0, 8, 350.0, 165, 3693, 11.5, 70, buick skylark 320
3, 18.0, 8, 318.0, 150, 3436, 11.0, 70, plymouth satellite

CREATE TABLE `price` (
  ID INTEGER,
  price REAL
);
Sample rows from `price`:
1, 25561.59078
2, 24221.42273
3, 27240.84373

","CREATE TABLE `country` (
  origin INTEGER,
  country TEXT
);
Sample rows from `country`:
1, USA
2, Europe
3, Japan

CREATE TABLE `price` (
  ID INTEGER,
  price REAL
);
Sample rows from `price`:
1, 25561.59078
2, 24221.42273
3, 27240.84373

CREATE TABLE `data` (
  ID INTEGER REFERENCES price(ID),
  mpg REAL,
  cylinders INTEGER,
  displacement REAL,
  horsepower INTEGER,
  weight INTEGER,
  acceleration REAL,
  model INTEGER,
  car_name TEXT
);
Sample rows from `data`:
1, 18.0, 8, 307.0, 130, 3504, 12.0, 70, chevrolet chevelle malibu
2, 15.0, 8, 350.0, 165, 3693, 11.5, 70, buick skylark 320
3, 18.0, 8, 318.0, 150, 3436, 11.0, 70, plymouth satellite

CREATE TABLE `production` (
  ID INTEGER PRIMARY KEY REFERENCES price(ID) REFERENCES data(ID),
  model_year INTEGER PRIMARY KEY,
  country INTEGER REFERENCES country(origin)
);
Sample rows from `production`:
1, 1970, 1
1, 1971, 1
2, 1970, 1

","data, price","price.price, data.id, price.id, data.car_name, data.acceleration","country, price, data, production"
simpson_episodes,What is the birth name of the person who voiced 'Helen Lovejoy?',SELECT DISTINCT t1.birth_name FROM person as t1 inner JOIN credit as t2 ON t1.name = t2.person WHERE t2.role = 'Helen Lovejoy';,"CREATE TABLE `person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","person, credit","person.birth_name, person.name, credit.person, credit.role","Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
law_episode,Which episodes of the Law & Order have been nominated for the Primetime Emmy Awards?,SELECT DISTINCT episode_id FROM award WHERE award_category = 'Primetime Emmy',"CREATE TABLE `award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  series TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  person_id TEXT REFERENCES Person(person_id),
  role TEXT,
  result TEXT
);
Sample rows from `award`:
258, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0937725, None, Winner
259, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0792309, None, Winner
260, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0049569, None, Winner

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
tt0629239, nun
tt0629239, priest
tt0629420, police officer

CREATE TABLE `Person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  series TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  person_id TEXT REFERENCES Person(person_id),
  role TEXT,
  result TEXT
);
Sample rows from `Award`:
258, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0937725, None, Winner
259, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0792309, None, Winner
260, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0049569, None, Winner

CREATE TABLE `Credit` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  person_id TEXT PRIMARY KEY REFERENCES Person(person_id),
  category TEXT,
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
tt0629204, nm0226352, Additional Crew, technical advisor, true
tt0629204, nm0506974, Additional Crew, production accountant, true
tt0629204, nm4103116, Additional Crew, production accountant, true

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
tt0629204, 10, 36, 17.7
tt0629204, 9, 39, 19.2
tt0629204, 8, 64, 31.5

",award,"episode_id, award_category","Episode, Keyword, Person, Award, Credit, Vote"
public_review_platform,"List the categories of active businesses in Surprise, AZ.",SELECT t3.category_name FROM business as t1 inner JOIN business_categories ON t1.business_id = business_categories.business_id inner JOIN categories as t3 ON business_categories.category_id = t3.category_id WHERE t1.active LIKE 'TRUE' AND t1.state LIKE 'AZ' AND t1.city LIKE 'Surprise' GROUP BY t3.category_name,"CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `business_categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `business_categories`:
1, 8
1, 143
2, 18

CREATE TABLE `categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","business, business_categories, categories","categories.category_name, business.business_id, business_categories.business_id, business_categories.category_id, categories.category_id, business.active, business.state, business.city","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
movielens,What is the proportion of action movies directors who are called 'box office success paradox'?,"SELECT cast(SUM(iif(t2.avg_revenue > t2.d_quality, 1, 0)) as real) * 100 / COUNT(t1.movieid) FROM movies2directors as t1 inner JOIN directors as t2 ON t1.directorid = t2.directorid WHERE t1.genre = 'Action'","CREATE TABLE `movies2directors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  directorid INTEGER PRIMARY KEY REFERENCES directors(None),
  genre TEXT
);
Sample rows from `movies2directors`:
1672111, 54934, Action
1672946, 188940, Action
1679461, 179783, Action

CREATE TABLE `directors` (
  directorid INTEGER,
  d_quality INTEGER PRIMARY KEY,
  avg_revenue INTEGER PRIMARY KEY
);
Sample rows from `directors`:
67, 4, 1
92, 2, 3
284, 4, 0

","CREATE TABLE `users` (
  userid INTEGER,
  age TEXT,
  u_gender TEXT,
  occupation TEXT
);
Sample rows from `users`:
1, 1, F, 2
2, 56, M, 3
3, 25, M, 2

CREATE TABLE `directors` (
  directorid INTEGER,
  d_quality INTEGER PRIMARY KEY,
  avg_revenue INTEGER PRIMARY KEY
);
Sample rows from `directors`:
67, 4, 1
92, 2, 3
284, 4, 0

CREATE TABLE `actors` (
  actorid INTEGER,
  a_gender TEXT,
  a_quality INTEGER
);
Sample rows from `actors`:
4, M, 4
16, M, 0
28, M, 4

CREATE TABLE `movies` (
  movieid INTEGER,
  year INTEGER,
  isEnglish TEXT,
  country TEXT,
  runningtime INTEGER
);
Sample rows from `movies`:
1672052, 3, T, other, 2
1672111, 4, T, other, 2
1672580, 4, T, USA, 3

CREATE TABLE `movies2actors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  actorid INTEGER PRIMARY KEY REFERENCES actors(None),
  cast_num INTEGER
);
Sample rows from `movies2actors`:
1672580, 981535, 0
1672946, 1094968, 0
1673647, 149985, 0

CREATE TABLE `movies2directors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  directorid INTEGER PRIMARY KEY REFERENCES directors(None),
  genre TEXT
);
Sample rows from `movies2directors`:
1672111, 54934, Action
1672946, 188940, Action
1679461, 179783, Action

CREATE TABLE `u2base` (
  userid INTEGER PRIMARY KEY REFERENCES users(None),
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  rating TEXT
);
Sample rows from `u2base`:
2, 1964242, 1
2, 2219779, 1
3, 1856939, 1

","movies2directors, directors","directors.avg_revenue, movies2directors.movieid, movies2directors.directorid, directors.directorid, movies2directors.genre","users, directors, actors, movies, movies2actors, movies2directors, u2base"
retail_world,"In August of 1996, how many orders were placed by the customer with the highest amount of orders?",SELECT COUNT(orderid) FROM orders WHERE orderdate LIKE '1996-08%' GROUP BY customerid ORDER BY COUNT(orderid) DESC LIMIT 1,"CREATE TABLE `orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

",orders,"orderid, orderdate, customerid","sqlite_sequence, Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails"
law_episode,How many people gave the most enjoyed episode a 10-star rating?,SELECT COUNT(t1.episode_id) FROM episode as t1 inner JOIN vote as t2 ON t1.episode_id = t2.episode_id WHERE t2.stars = 10,"CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `vote`:
tt0629204, 10, 36, 17.7
tt0629204, 9, 39, 19.2
tt0629204, 8, 64, 31.5

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
tt0629239, nun
tt0629239, priest
tt0629420, police officer

CREATE TABLE `Person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  series TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  person_id TEXT REFERENCES Person(person_id),
  role TEXT,
  result TEXT
);
Sample rows from `Award`:
258, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0937725, None, Winner
259, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0792309, None, Winner
260, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0049569, None, Winner

CREATE TABLE `Credit` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  person_id TEXT PRIMARY KEY REFERENCES Person(person_id),
  category TEXT,
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
tt0629204, nm0226352, Additional Crew, technical advisor, true
tt0629204, nm0506974, Additional Crew, production accountant, true
tt0629204, nm4103116, Additional Crew, production accountant, true

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
tt0629204, 10, 36, 17.7
tt0629204, 9, 39, 19.2
tt0629204, 8, 64, 31.5

","episode, vote","episode.episode_id, vote.episode_id, vote.stars","Episode, Keyword, Person, Award, Credit, Vote"
chicago_crime,What was the major type of crime that happened in the Rogers Park community area?,"SELECT t1.fbi_code_no, t1.title FROM fbi_code as t1 inner JOIN crime as t2 ON t1.fbi_code_no = t2.fbi_code_no inner JOIN community_area as t3 ON t2.community_area_no = t3.community_area_no WHERE t3.community_area_name = 'Rogers Park' GROUP BY t1.fbi_code_no, t1.title","CREATE TABLE `fbi_code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `fbi_code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

CREATE TABLE `community_area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `community_area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

","CREATE TABLE `Community_Area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `Community_Area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `District` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `District`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `FBI_Code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `FBI_Code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `IUCR` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `IUCR`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `Neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `Neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `Ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `Ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `Crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `Crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","fbi_code, crime, community_area","fbi_code.fbi_code_no, fbi_code.title, crime.fbi_code_no, crime.community_area_no, community_area.community_area_no, community_area.community_area_name","Community_Area, District, FBI_Code, IUCR, Neighborhood, Ward, Crime"
codebase_comments,How many methods with solutions with path 'maravillas_linq-to-delicious\tasty.sln'?,SELECT COUNT(t2.solutionid) FROM solution as t1 inner JOIN method as t2 ON t1.id = t2.solutionid WHERE t1.path = 'maravillas_linq-to-delicious\tasty.sln',"CREATE TABLE `solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

CREATE TABLE `method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Method, 10860640
MethodParameter, 17514858
Repo, 156550

CREATE TABLE `Method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `Method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

CREATE TABLE `MethodParameter` (
  Id INTEGER,
  MethodId TEXT,
  Type TEXT,
  Name TEXT
);
Sample rows from `MethodParameter`:
1, 1, System.String, data
2, 2, System.Int32, i
3, 2, System.Int32, declstartpos

CREATE TABLE `Repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `Repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

CREATE TABLE `Solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `Solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

","solution, method","method.solutionid, solution.id, solution.path","sqlite_sequence, Method, MethodParameter, Repo, Solution"
airline,How many flights were there on 2018/8/1?,SELECT COUNT(*) FROM airlines WHERE fl_date = '2018/8/1',"CREATE TABLE `airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

","CREATE TABLE `Air Carriers` (
  Code INTEGER,
  Description TEXT
);
Sample rows from `Air Carriers`:
19031, Mackey International Inc.: MAC
19032, Munz Northern Airlines Inc.: XY
19033, Cochise Airlines Inc.: COC

CREATE TABLE `Airports` (
  Code TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `Airports`:
01A, Afognak Lake, AK: Afognak Lake Airport
03A, Granite Mountain, AK: Bear Creek Mining Strip
04A, Lik, AK: Lik Mining Camp

CREATE TABLE `Airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `Airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

",airlines,fl_date,"Air Carriers, Airports, Airlines"
books,List 10 addresses located in Poland.,"SELECT t1.street_number, t1.street_name, t1.city FROM address as t1 inner JOIN country as t2 ON t2.country_id = t1.country_id WHERE t2.country_name = 'Poland' LIMIT 10","CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","address, country","address.street_number, address.street_name, address.city, country.country_id, address.country_id, country.country_name","address_status, author, book_language, country, address, customer, customer_address, order_status, publisher, book, book_author, shipping_method, cust_order, sqlite_sequence, order_history, order_line"
image_and_language,How many images have less than 15 object samples?,SELECT COUNT(img_id) FROM img_obj WHERE obj_sample_id < 15,"CREATE TABLE `img_obj` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `img_obj`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

","CREATE TABLE `ATT_CLASSES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `ATT_CLASSES`:
0, building s
1, indoors
2, cluttered

CREATE TABLE `OBJ_CLASSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLASSES`:
0, awning
1, goggles
2, dot

CREATE TABLE `IMG_OBJ` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `IMG_OBJ`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `IMG_OBJ_ATT` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_OBJ_ATT`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `PRED_CLASSES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `PRED_CLASSES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `IMG_REL` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_REL`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

",img_obj,"img_id, obj_sample_id","ATT_CLASSES, OBJ_CLASSES, IMG_OBJ, IMG_OBJ_ATT, PRED_CLASSES, IMG_REL"
cars,Which country produced the most expensive car in 1970?,SELECT t3.country FROM data as t1 inner JOIN production as t2 ON t1.id = t2.id inner JOIN country as t3 ON t3.origin = t2.country inner JOIN price as t4 ON t4.id = t1.id WHERE t2.model_year = 1970 ORDER BY t4.price DESC LIMIT 1,"CREATE TABLE `data` (
  ID INTEGER REFERENCES price(ID),
  mpg REAL,
  cylinders INTEGER,
  displacement REAL,
  horsepower INTEGER,
  weight INTEGER,
  acceleration REAL,
  model INTEGER,
  car_name TEXT
);
Sample rows from `data`:
1, 18.0, 8, 307.0, 130, 3504, 12.0, 70, chevrolet chevelle malibu
2, 15.0, 8, 350.0, 165, 3693, 11.5, 70, buick skylark 320
3, 18.0, 8, 318.0, 150, 3436, 11.0, 70, plymouth satellite

CREATE TABLE `production` (
  ID INTEGER PRIMARY KEY REFERENCES price(ID) REFERENCES data(ID),
  model_year INTEGER PRIMARY KEY,
  country INTEGER REFERENCES country(origin)
);
Sample rows from `production`:
1, 1970, 1
1, 1971, 1
2, 1970, 1

CREATE TABLE `country` (
  origin INTEGER,
  country TEXT
);
Sample rows from `country`:
1, USA
2, Europe
3, Japan

CREATE TABLE `price` (
  ID INTEGER,
  price REAL
);
Sample rows from `price`:
1, 25561.59078
2, 24221.42273
3, 27240.84373

","CREATE TABLE `country` (
  origin INTEGER,
  country TEXT
);
Sample rows from `country`:
1, USA
2, Europe
3, Japan

CREATE TABLE `price` (
  ID INTEGER,
  price REAL
);
Sample rows from `price`:
1, 25561.59078
2, 24221.42273
3, 27240.84373

CREATE TABLE `data` (
  ID INTEGER REFERENCES price(ID),
  mpg REAL,
  cylinders INTEGER,
  displacement REAL,
  horsepower INTEGER,
  weight INTEGER,
  acceleration REAL,
  model INTEGER,
  car_name TEXT
);
Sample rows from `data`:
1, 18.0, 8, 307.0, 130, 3504, 12.0, 70, chevrolet chevelle malibu
2, 15.0, 8, 350.0, 165, 3693, 11.5, 70, buick skylark 320
3, 18.0, 8, 318.0, 150, 3436, 11.0, 70, plymouth satellite

CREATE TABLE `production` (
  ID INTEGER PRIMARY KEY REFERENCES price(ID) REFERENCES data(ID),
  model_year INTEGER PRIMARY KEY,
  country INTEGER REFERENCES country(origin)
);
Sample rows from `production`:
1, 1970, 1
1, 1971, 1
2, 1970, 1

","data, production, country, price","country.country, data.id, production.id, country.origin, production.country, price.id, production.model_year, price.price","country, price, data, production"
olympics,List out all the gold medalist winners in cycling sport.,SELECT DISTINCT t5.full_name FROM event as t1 inner JOIN competitor_event as t2 ON t1.id = t2.event_id inner JOIN games_competitor as t3 ON t2.competitor_id = t3.id inner JOIN sport as t4 ON t1.sport_id = t4.id inner JOIN person as t5 ON t3.person_id = t5.id WHERE t4.sport_name = 'Cycling' AND t2.medal_id = 1,"CREATE TABLE `event` (
  id INTEGER,
  sport_id INTEGER REFERENCES sport(id),
  event_name TEXT
);
Sample rows from `event`:
1, 9, Basketball Men's Basketball
2, 33, Judo Men's Extra-Lightweight
3, 25, Football Men's Football

CREATE TABLE `competitor_event` (
  event_id INTEGER REFERENCES event(id),
  competitor_id INTEGER REFERENCES games_competitor(id),
  medal_id INTEGER REFERENCES medal(id)
);
Sample rows from `competitor_event`:
1, 1, 4
2, 2, 4
3, 3, 4

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `sport` (
  id INTEGER,
  sport_name TEXT
);
Sample rows from `sport`:
1, Aeronautics
2, Alpine Skiing
3, Alpinism

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

","CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `medal` (
  id INTEGER,
  medal_name TEXT
);
Sample rows from `medal`:
1, Gold
2, Silver
3, Bronze

CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `sport` (
  id INTEGER,
  sport_name TEXT
);
Sample rows from `sport`:
1, Aeronautics
2, Alpine Skiing
3, Alpinism

CREATE TABLE `event` (
  id INTEGER,
  sport_id INTEGER REFERENCES sport(id),
  event_name TEXT
);
Sample rows from `event`:
1, 9, Basketball Men's Basketball
2, 33, Judo Men's Extra-Lightweight
3, 25, Football Men's Football

CREATE TABLE `competitor_event` (
  event_id INTEGER REFERENCES event(id),
  competitor_id INTEGER REFERENCES games_competitor(id),
  medal_id INTEGER REFERENCES medal(id)
);
Sample rows from `competitor_event`:
1, 1, 4
2, 2, 4
3, 3, 4

","event, competitor_event, games_competitor, sport, person","person.full_name, event.id, competitor_event.event_id, competitor_event.competitor_id, games_competitor.id, event.sport_id, sport.id, games_competitor.person_id, person.id, sport.sport_name, competitor_event.medal_id","city, games, games_city, medal, noc_region, person, games_competitor, person_region, sport, event, competitor_event"
sales,"Among products bought by Kathryn Ashe, what is the name of the product with the highest quantity?",SELECT t1.name FROM products as t1 inner JOIN sales as t2 ON t1.productid = t2.productid inner JOIN customers as t3 ON t2.customerid = t3.customerid WHERE t3.Firstname = 'Kathryn' AND t3.Lastname = 'Ashe' ORDER BY t2.quantity DESC LIMIT 1,"CREATE TABLE `products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

CREATE TABLE `sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

CREATE TABLE `customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Employees`:
1, Abraham, e, Bennet
2, Reginald, l, Blotchet-Halls
3, Cheryl, a, Carson

CREATE TABLE `Products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

CREATE TABLE `Sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `Sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

","products, sales, customers","products.name, products.productid, sales.productid, sales.customerid, customers.customerid, customers.Firstname, customers.Lastname, sales.quantity","Customers, Employees, Products, Sales"
books,What is the most common domain for the email address among all the customers?,"SELECT substr(email, instr(email, '@') + 1, length(email) - instr(email, '@')) as ym FROM customer GROUP BY substr(email, instr(email, '@') + 1, length(email) - instr(email, '@')) ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

",customer,email,"address_status, author, book_language, country, address, customer, customer_address, order_status, publisher, book, book_author, shipping_method, cust_order, sqlite_sequence, order_history, order_line"
chicago_crime,Provide the responsible person and his/her email address of Chicago Lawn.,"SELECT commander, email FROM district WHERE district_name = 'Chicago Lawn'","CREATE TABLE `district` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `district`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

","CREATE TABLE `Community_Area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `Community_Area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `District` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `District`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `FBI_Code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `FBI_Code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `IUCR` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `IUCR`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `Neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `Neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `Ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `Ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `Crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `Crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

",district,"commander, email, district_name","Community_Area, District, FBI_Code, IUCR, Neighborhood, Ward, Crime"
software_company,List the income and number of inhabitants of customers with a reference ID greater than the 50% of average of number of false response?,"SELECT t2.income_k, t2.inhabitants_k FROM customers as t1 inner JOIN demog as t2 ON t1.geoid = t2.geoid inner JOIN mailings1_2 as t3 ON t1.id = t3.REFid WHERE t3.REFid > ( SELECT 0.5 * COUNT(CasE when response = 'false' then 1 else null end) / COUNT(response) FROM mailings1_2 )","CREATE TABLE `customers` (
  ID INTEGER,
  SEX TEXT,
  MARITAL_STATUS TEXT,
  GEOID INTEGER REFERENCES Demog(None),
  EDUCATIONNUM INTEGER,
  OCCUPATION TEXT,
  age INTEGER
);
Sample rows from `customers`:
0, Male, Never-married, 61, 7, Machine-op-inspct, 62
1, Male, Married-civ-spouse, 70, 3, Handlers-cleaners, 78
2, Male, Never-married, 53, 7, Machine-op-inspct, 69

CREATE TABLE `demog` (
  GEOID INTEGER,
  INHABITANTS_K REAL,
  INCOME_K REAL,
  A_VAR1 REAL,
  A_VAR2 REAL,
  A_VAR3 REAL,
  A_VAR4 REAL,
  A_VAR5 REAL,
  A_VAR6 REAL,
  A_VAR7 REAL,
  A_VAR8 REAL,
  A_VAR9 REAL,
  A_VAR10 REAL,
  A_VAR11 REAL,
  A_VAR12 REAL,
  A_VAR13 REAL,
  A_VAR14 REAL,
  A_VAR15 REAL,
  A_VAR16 REAL,
  A_VAR17 REAL,
  A_VAR18 REAL
);
Sample rows from `demog`:
0, 30.046, 2631.47, 6.084, 5.79, 8.595, 3.935, 6.362, 8.626, 4.624, 8.324, 5.233, 6.232, 5.205, 8.231, 6.746, 8.679, 5.292, 3.5, 5.512, 5.783
1, 36.25, 3012.75, 4.604, 8.309, 6.007, 5.938, 8.773, 3.579, 6.349, 4.694, 6.884, 7.062, 7.319, 3.72, 6.405, 7.202, 4.932, 7.969, 8.15, 5.633
2, 47.645, 2192.41, 4.911, 8.557, 5.934, 6.494, 9.172, 3.202, 6.157, 4.822, 7.942, 7.901, 7.928, 2.33, 6.029, 6.455, 4.72, 8.564, 8.342, 4.938

CREATE TABLE `mailings1_2` (
  REFID INTEGER REFERENCES Customers(None),
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `mailings1_2`:
0, 2007-02-01 12:00:00.0, false
1, 2007-02-01 12:00:00.0, false
2, 2007-02-01 12:00:00.0, false

","CREATE TABLE `Demog` (
  GEOID INTEGER,
  INHABITANTS_K REAL,
  INCOME_K REAL,
  A_VAR1 REAL,
  A_VAR2 REAL,
  A_VAR3 REAL,
  A_VAR4 REAL,
  A_VAR5 REAL,
  A_VAR6 REAL,
  A_VAR7 REAL,
  A_VAR8 REAL,
  A_VAR9 REAL,
  A_VAR10 REAL,
  A_VAR11 REAL,
  A_VAR12 REAL,
  A_VAR13 REAL,
  A_VAR14 REAL,
  A_VAR15 REAL,
  A_VAR16 REAL,
  A_VAR17 REAL,
  A_VAR18 REAL
);
Sample rows from `Demog`:
0, 30.046, 2631.47, 6.084, 5.79, 8.595, 3.935, 6.362, 8.626, 4.624, 8.324, 5.233, 6.232, 5.205, 8.231, 6.746, 8.679, 5.292, 3.5, 5.512, 5.783
1, 36.25, 3012.75, 4.604, 8.309, 6.007, 5.938, 8.773, 3.579, 6.349, 4.694, 6.884, 7.062, 7.319, 3.72, 6.405, 7.202, 4.932, 7.969, 8.15, 5.633
2, 47.645, 2192.41, 4.911, 8.557, 5.934, 6.494, 9.172, 3.202, 6.157, 4.822, 7.942, 7.901, 7.928, 2.33, 6.029, 6.455, 4.72, 8.564, 8.342, 4.938

CREATE TABLE `mailings3` (
  REFID INTEGER,
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `mailings3`:
60000, 2007-07-01 12:00:00.0, false
60001, 2007-07-01 12:00:00.0, false
60002, 2007-07-01 12:00:00.0, false

CREATE TABLE `Customers` (
  ID INTEGER,
  SEX TEXT,
  MARITAL_STATUS TEXT,
  GEOID INTEGER REFERENCES Demog(None),
  EDUCATIONNUM INTEGER,
  OCCUPATION TEXT,
  age INTEGER
);
Sample rows from `Customers`:
0, Male, Never-married, 61, 7, Machine-op-inspct, 62
1, Male, Married-civ-spouse, 70, 3, Handlers-cleaners, 78
2, Male, Never-married, 53, 7, Machine-op-inspct, 69

CREATE TABLE `Mailings1_2` (
  REFID INTEGER REFERENCES Customers(None),
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `Mailings1_2`:
0, 2007-02-01 12:00:00.0, false
1, 2007-02-01 12:00:00.0, false
2, 2007-02-01 12:00:00.0, false

CREATE TABLE `Sales` (
  EVENTID INTEGER,
  REFID INTEGER REFERENCES Customers(None),
  EVENT_DATE DATETIME,
  AMOUNT REAL
);
Sample rows from `Sales`:
0, 0, 2006-12-21 12:00:00.0, 17.907
1, 0, 2006-12-25 12:00:00.0, 17.401
2, 0, 2007-01-26 12:00:00.0, 13.277

","customers, demog, mailings1_2","demog.income_k, demog.inhabitants_k, customers.geoid, demog.geoid, customers.id, mailings1_2.REFid, response","Demog, mailings3, Customers, Mailings1_2, Sales"
social_media,"Among all the users that have posted a tweet with over 1000 likes, how many of them are male?",SELECT COUNT(t1.tweetid) FROM twitter as t1 inner JOIN user as t2 ON t1.userid = t2.userid WHERE t1.likes > 10 AND t2.gender = 'Male',"CREATE TABLE `twitter` (
  TweetID TEXT PRIMARY KEY,
  Weekday TEXT,
  Hour INTEGER,
  Day INTEGER,
  Lang TEXT,
  IsReshare TEXT,
  Reach INTEGER,
  RetweetCount INTEGER,
  Likes INTEGER,
  Klout INTEGER,
  Sentiment REAL,
  text TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  UserID TEXT REFERENCES user(UserID)
);
Sample rows from `twitter`:
tw-682712873332805633, Thursday, 17, 31, en, FALSE, 44, 0, 0, 35, 0.0, We are hiring: Senior Software Engineer - Proto http://www.reqcloud.com/jobs/719865/?k=0LaPxXuFwczs1e32ZURJKrgCIDMQtRO7BquFSQthUKY&utm_source=twitter&utm_campaign=reqCloud_JobPost #job @awscloud #job #protocol #networking #aws #mediastreaming, 3751, tw-40932430
tw-682713045357998080, Thursday, 17, 31, en, TRUE, 1810, 5, 0, 53, 2.0, RT @CodeMineStatus: This is true Amazon Web Services https://aws.amazon.com/ #php #html #html5 #css #webdesign #seo #java #javascript htt, 3989, tw-3179389829
tw-682713219375476736, Thursday, 17, 31, en, FALSE, 282, 0, 0, 47, 0.0, Devops Engineer Aws Ansible Cassandra Mysql Ubuntu Ruby On Rails Jobs in Austin TX #Austin #TX #jobs #jobsearch https://www.jobfindly.com/devops-engineer-aws-ansible-cassandra-mysql-ubuntu-ruby-on-rails-jobs-austin-tx.html, 3741, tw-4624808414

CREATE TABLE `user` (
  UserID TEXT PRIMARY KEY,
  Gender TEXT
);
Sample rows from `user`:
tw-1267804344, Unknown
tw-27229880, Male
tw-199664730, Male

","CREATE TABLE `location` (
  LocationID INTEGER,
  Country TEXT,
  State TEXT,
  StateCode TEXT,
  City TEXT
);
Sample rows from `location`:
1, Albania, Elbasan, AL, Elbasan
2, Albania, Tirane, AL, Tirana
3, Algeria, Souk Ahras, DZ, Souk Ahras

CREATE TABLE `user` (
  UserID TEXT PRIMARY KEY,
  Gender TEXT
);
Sample rows from `user`:
tw-1267804344, Unknown
tw-27229880, Male
tw-199664730, Male

CREATE TABLE `twitter` (
  TweetID TEXT PRIMARY KEY,
  Weekday TEXT,
  Hour INTEGER,
  Day INTEGER,
  Lang TEXT,
  IsReshare TEXT,
  Reach INTEGER,
  RetweetCount INTEGER,
  Likes INTEGER,
  Klout INTEGER,
  Sentiment REAL,
  text TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  UserID TEXT REFERENCES user(UserID)
);
Sample rows from `twitter`:
tw-682712873332805633, Thursday, 17, 31, en, FALSE, 44, 0, 0, 35, 0.0, We are hiring: Senior Software Engineer - Proto http://www.reqcloud.com/jobs/719865/?k=0LaPxXuFwczs1e32ZURJKrgCIDMQtRO7BquFSQthUKY&utm_source=twitter&utm_campaign=reqCloud_JobPost #job @awscloud #job #protocol #networking #aws #mediastreaming, 3751, tw-40932430
tw-682713045357998080, Thursday, 17, 31, en, TRUE, 1810, 5, 0, 53, 2.0, RT @CodeMineStatus: This is true Amazon Web Services https://aws.amazon.com/ #php #html #html5 #css #webdesign #seo #java #javascript htt, 3989, tw-3179389829
tw-682713219375476736, Thursday, 17, 31, en, FALSE, 282, 0, 0, 47, 0.0, Devops Engineer Aws Ansible Cassandra Mysql Ubuntu Ruby On Rails Jobs in Austin TX #Austin #TX #jobs #jobsearch https://www.jobfindly.com/devops-engineer-aws-ansible-cassandra-mysql-ubuntu-ruby-on-rails-jobs-austin-tx.html, 3741, tw-4624808414

","twitter, user","twitter.tweetid, twitter.userid, user.userid, twitter.likes, user.gender","location, user, twitter"
cars,Calculate the average price of cars from Europe.,SELECT AVG(t1.price) FROM price as t1 inner JOIN production as t2 ON t1.id = t2.id inner JOIN country as t3 ON t3.origin = t2.country WHERE t3.country = 'Europe',"CREATE TABLE `price` (
  ID INTEGER,
  price REAL
);
Sample rows from `price`:
1, 25561.59078
2, 24221.42273
3, 27240.84373

CREATE TABLE `production` (
  ID INTEGER PRIMARY KEY REFERENCES price(ID) REFERENCES data(ID),
  model_year INTEGER PRIMARY KEY,
  country INTEGER REFERENCES country(origin)
);
Sample rows from `production`:
1, 1970, 1
1, 1971, 1
2, 1970, 1

CREATE TABLE `country` (
  origin INTEGER,
  country TEXT
);
Sample rows from `country`:
1, USA
2, Europe
3, Japan

","CREATE TABLE `country` (
  origin INTEGER,
  country TEXT
);
Sample rows from `country`:
1, USA
2, Europe
3, Japan

CREATE TABLE `price` (
  ID INTEGER,
  price REAL
);
Sample rows from `price`:
1, 25561.59078
2, 24221.42273
3, 27240.84373

CREATE TABLE `data` (
  ID INTEGER REFERENCES price(ID),
  mpg REAL,
  cylinders INTEGER,
  displacement REAL,
  horsepower INTEGER,
  weight INTEGER,
  acceleration REAL,
  model INTEGER,
  car_name TEXT
);
Sample rows from `data`:
1, 18.0, 8, 307.0, 130, 3504, 12.0, 70, chevrolet chevelle malibu
2, 15.0, 8, 350.0, 165, 3693, 11.5, 70, buick skylark 320
3, 18.0, 8, 318.0, 150, 3436, 11.0, 70, plymouth satellite

CREATE TABLE `production` (
  ID INTEGER PRIMARY KEY REFERENCES price(ID) REFERENCES data(ID),
  model_year INTEGER PRIMARY KEY,
  country INTEGER REFERENCES country(origin)
);
Sample rows from `production`:
1, 1970, 1
1, 1971, 1
2, 1970, 1

","price, production, country","price.price, price.id, production.id, country.origin, production.country, country.country","country, price, data, production"
student_loan,Name all disabled students that are enrolled in SMC.,SELECT t2.name FROM enrolled as t1 inner JOIN disabled as t2 ON t1.`name` = t2.`name` WHERE t1.school = 'smc',"CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

","enrolled, disabled","disabled.name, enrolled.name, enrolled.school","bool, person, disabled, enlist, filed_for_bankrupcy, longest_absense_from_school, male, no_payment_due, unemployed, enrolled"
olympics,What is the average age of Argentina's athletes who participated in the Summer Olympics in 2012?,SELECT AVG(t2.age) FROM games as t1 inner JOIN games_competitor as t2 ON t1.id = t2.games_id inner JOIN person_region as t3 ON t2.person_id = t3.person_id inner JOIN noc_region as t4 ON t3.region_id = t4.id WHERE t1.games_name = '2012 Summer' AND t4.region_name = 'Argentina',"CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

","CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `medal` (
  id INTEGER,
  medal_name TEXT
);
Sample rows from `medal`:
1, Gold
2, Silver
3, Bronze

CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `sport` (
  id INTEGER,
  sport_name TEXT
);
Sample rows from `sport`:
1, Aeronautics
2, Alpine Skiing
3, Alpinism

CREATE TABLE `event` (
  id INTEGER,
  sport_id INTEGER REFERENCES sport(id),
  event_name TEXT
);
Sample rows from `event`:
1, 9, Basketball Men's Basketball
2, 33, Judo Men's Extra-Lightweight
3, 25, Football Men's Football

CREATE TABLE `competitor_event` (
  event_id INTEGER REFERENCES event(id),
  competitor_id INTEGER REFERENCES games_competitor(id),
  medal_id INTEGER REFERENCES medal(id)
);
Sample rows from `competitor_event`:
1, 1, 4
2, 2, 4
3, 3, 4

","games, games_competitor, person_region, noc_region","games_competitor.age, games.id, games_competitor.games_id, games_competitor.person_id, person_region.person_id, person_region.region_id, noc_region.id, games.games_name, noc_region.region_name","city, games, games_city, medal, noc_region, person, games_competitor, person_region, sport, event, competitor_event"
cars,Provide the name and model of the car with the highest price.,"SELECT t1.car_name, t1.model FROM data as t1 inner JOIN price as t2 ON t1.id = t2.id ORDER BY t2.price DESC LIMIT 1","CREATE TABLE `data` (
  ID INTEGER REFERENCES price(ID),
  mpg REAL,
  cylinders INTEGER,
  displacement REAL,
  horsepower INTEGER,
  weight INTEGER,
  acceleration REAL,
  model INTEGER,
  car_name TEXT
);
Sample rows from `data`:
1, 18.0, 8, 307.0, 130, 3504, 12.0, 70, chevrolet chevelle malibu
2, 15.0, 8, 350.0, 165, 3693, 11.5, 70, buick skylark 320
3, 18.0, 8, 318.0, 150, 3436, 11.0, 70, plymouth satellite

CREATE TABLE `price` (
  ID INTEGER,
  price REAL
);
Sample rows from `price`:
1, 25561.59078
2, 24221.42273
3, 27240.84373

","CREATE TABLE `country` (
  origin INTEGER,
  country TEXT
);
Sample rows from `country`:
1, USA
2, Europe
3, Japan

CREATE TABLE `price` (
  ID INTEGER,
  price REAL
);
Sample rows from `price`:
1, 25561.59078
2, 24221.42273
3, 27240.84373

CREATE TABLE `data` (
  ID INTEGER REFERENCES price(ID),
  mpg REAL,
  cylinders INTEGER,
  displacement REAL,
  horsepower INTEGER,
  weight INTEGER,
  acceleration REAL,
  model INTEGER,
  car_name TEXT
);
Sample rows from `data`:
1, 18.0, 8, 307.0, 130, 3504, 12.0, 70, chevrolet chevelle malibu
2, 15.0, 8, 350.0, 165, 3693, 11.5, 70, buick skylark 320
3, 18.0, 8, 318.0, 150, 3436, 11.0, 70, plymouth satellite

CREATE TABLE `production` (
  ID INTEGER PRIMARY KEY REFERENCES price(ID) REFERENCES data(ID),
  model_year INTEGER PRIMARY KEY,
  country INTEGER REFERENCES country(origin)
);
Sample rows from `production`:
1, 1970, 1
1, 1971, 1
2, 1970, 1

","data, price","data.car_name, data.model, data.id, price.id, price.price","country, price, data, production"
retail_complains,Which city in the Midwest region has the least number of clients?,SELECT t2.city FROM client as t1 inner JOIN district as t2 ON t1.district_id = t2.district_id inner JOIN state as t3 ON t2.state_abbrev = t3.statecode WHERE t3.region = 'Midwest' GROUP BY t2.city ORDER BY COUNT(t2.city) LIMIT 1,"CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

","CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

","client, district, state","district.city, client.district_id, district.district_id, district.state_abbrev, state.statecode, state.region","state, callcenterlogs, client, district, events, reviews"
public_review_platform,Identify the percent of long reviews among all 5-star reviews given to businesses by the Yelp users.,SELECT cast(SUM(case when review_length = 'Long' then 1 else 0 end) as real) * 100 / COUNT(review_length) FROM reviews WHERE review_stars = 5,"CREATE TABLE `reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

",reviews,"review_length, review_stars","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
simpson_episodes,What are the top five most popular episodes?,SELECT episode_id FROM episode ORDER BY votes DESC LIMIT 5;,"CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

",episode,"episode_id, votes","Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
sales_in_weather,How many units are being sold for item 1 when the average temperature is 83?,SELECT SUM(units) FROM weather as t1 inner JOIN sales_in_weather as t2 ON t1.`date` = t2.`date` inner JOIN relation as t3 ON t2.store_nbr = t3.store_nbr WHERE t2.item_nbr = 1 AND t1.tavg = 83,"CREATE TABLE `weather` (
  station_nbr INTEGER PRIMARY KEY,
  date DATE PRIMARY KEY,
  tmax INTEGER,
  tmin INTEGER,
  tavg INTEGER,
  depart INTEGER,
  dewpoint INTEGER,
  wetbulb INTEGER,
  heat INTEGER,
  cool INTEGER,
  sunrise TEXT,
  sunset TEXT,
  codesum TEXT,
  snowfall REAL,
  preciptotal REAL,
  stnpressure REAL,
  sealevel REAL,
  resultspeed REAL,
  resultdir INTEGER,
  avgspeed REAL
);
Sample rows from `weather`:
1, 2012-01-01, 52, 31, 42, None, 36, 40, 23, 0, None, None, RA FZFG BR, None, 0.05, 29.78, 29.92, 3.6, 20, 4.6
1, 2012-01-02, 50, 31, 41, None, 26, 35, 24, 0, None, None,  , None, 0.01, 29.44, 29.62, 9.8, 24, 10.3
1, 2012-01-03, 32, 11, 22, None, 4, 18, 43, 0, None, None,  , None, 0.0, 29.67, 29.87, 10.8, 31, 11.6

CREATE TABLE `sales_in_weather` (
  date DATE PRIMARY KEY,
  store_nbr INTEGER PRIMARY KEY,
  item_nbr INTEGER PRIMARY KEY,
  units INTEGER
);
Sample rows from `sales_in_weather`:
2012-01-01, 1, 1, 0
2012-01-01, 1, 2, 0
2012-01-01, 1, 3, 0

CREATE TABLE `relation` (
  store_nbr INTEGER REFERENCES sales_in_weather(store_nbr),
  station_nbr INTEGER REFERENCES weather(station_nbr)
);
Sample rows from `relation`:
1, 1
2, 14
3, 7

","CREATE TABLE `sales_in_weather` (
  date DATE PRIMARY KEY,
  store_nbr INTEGER PRIMARY KEY,
  item_nbr INTEGER PRIMARY KEY,
  units INTEGER
);
Sample rows from `sales_in_weather`:
2012-01-01, 1, 1, 0
2012-01-01, 1, 2, 0
2012-01-01, 1, 3, 0

CREATE TABLE `weather` (
  station_nbr INTEGER PRIMARY KEY,
  date DATE PRIMARY KEY,
  tmax INTEGER,
  tmin INTEGER,
  tavg INTEGER,
  depart INTEGER,
  dewpoint INTEGER,
  wetbulb INTEGER,
  heat INTEGER,
  cool INTEGER,
  sunrise TEXT,
  sunset TEXT,
  codesum TEXT,
  snowfall REAL,
  preciptotal REAL,
  stnpressure REAL,
  sealevel REAL,
  resultspeed REAL,
  resultdir INTEGER,
  avgspeed REAL
);
Sample rows from `weather`:
1, 2012-01-01, 52, 31, 42, None, 36, 40, 23, 0, None, None, RA FZFG BR, None, 0.05, 29.78, 29.92, 3.6, 20, 4.6
1, 2012-01-02, 50, 31, 41, None, 26, 35, 24, 0, None, None,  , None, 0.01, 29.44, 29.62, 9.8, 24, 10.3
1, 2012-01-03, 32, 11, 22, None, 4, 18, 43, 0, None, None,  , None, 0.0, 29.67, 29.87, 10.8, 31, 11.6

CREATE TABLE `relation` (
  store_nbr INTEGER REFERENCES sales_in_weather(store_nbr),
  station_nbr INTEGER REFERENCES weather(station_nbr)
);
Sample rows from `relation`:
1, 1
2, 14
3, 7

","weather, sales_in_weather, relation","units, weather.date, sales_in_weather.date, sales_in_weather.store_nbr, relation.store_nbr, sales_in_weather.item_nbr, weather.tavg","sales_in_weather, weather, relation"
law_episode,How many 6-star votes did episode 12 get? Please include the air date and rating.,"SELECT t2.air_date, t2.rating FROM vote as t1 inner JOIN episode as t2 ON t2.episode_id = t1.episode_id WHERE t1.stars = 6 AND t2.episode = 12","CREATE TABLE `vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `vote`:
tt0629204, 10, 36, 17.7
tt0629204, 9, 39, 19.2
tt0629204, 8, 64, 31.5

CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
tt0629239, nun
tt0629239, priest
tt0629420, police officer

CREATE TABLE `Person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  series TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  person_id TEXT REFERENCES Person(person_id),
  role TEXT,
  result TEXT
);
Sample rows from `Award`:
258, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0937725, None, Winner
259, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0792309, None, Winner
260, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0049569, None, Winner

CREATE TABLE `Credit` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  person_id TEXT PRIMARY KEY REFERENCES Person(person_id),
  category TEXT,
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
tt0629204, nm0226352, Additional Crew, technical advisor, true
tt0629204, nm0506974, Additional Crew, production accountant, true
tt0629204, nm4103116, Additional Crew, production accountant, true

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
tt0629204, 10, 36, 17.7
tt0629204, 9, 39, 19.2
tt0629204, 8, 64, 31.5

","vote, episode","episode.air_date, episode.rating, episode.episode_id, vote.episode_id, vote.stars, episode.episode","Episode, Keyword, Person, Award, Credit, Vote"
sales,List down product ids that were purchased by customers called Abby.,SELECT DISTINCT t1.productid FROM sales as t1 inner JOIN customers as t2 ON t1.customerid = t2.customerid WHERE t2.firstname = 'Abby',"CREATE TABLE `sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

CREATE TABLE `customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Employees`:
1, Abraham, e, Bennet
2, Reginald, l, Blotchet-Halls
3, Cheryl, a, Carson

CREATE TABLE `Products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

CREATE TABLE `Sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `Sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

","sales, customers","sales.productid, sales.customerid, customers.customerid, customers.firstname","Customers, Employees, Products, Sales"
ice_hockey_draft,Which team has the most Swedish?,"SELECt t.tEAM FROM ( SELECt t2.tEAM, COUNT(DIStINCt t1.ELItEID) FROM playerinfo as t1 inner JOIN seasonstatus as t2 ON t1.ELItEID = t2.ELItEID WHERE t1.nation = 'Sweden' GROUP BY t2.tEAM ORDER BY COUNT(DIStINCt t1.ELItEID) DESC LIMIt 1 ) as t","CREATE TABLE `playerinfo` (
  ELITEID INTEGER,
  PlayerName TEXT,
  birthdate TEXT,
  birthyear DATE,
  birthmonth INTEGER,
  birthday INTEGER,
  birthplace TEXT,
  nation TEXT,
  height INTEGER REFERENCES height_info(height_id),
  weight INTEGER REFERENCES weight_info(weight_id),
  position_info TEXT,
  shoots TEXT,
  draftyear INTEGER,
  draftround INTEGER,
  overall INTEGER,
  overallby TEXT,
  CSS_rank INTEGER,
  sum_7yr_GP INTEGER,
  sum_7yr_TOI INTEGER,
  GP_greater_than_0 TEXT
);
Sample rows from `playerinfo`:
9, David Bornhammar, 1981-06-15, 1981, 6, 15, Lidingo, SWE, Sweden, 73, 198, D, L, 1999, 7, 192, Washington Capitals, 192, 0, 0, no
18, David Printz, 1980-07-24, 1980, 7, 24, Stockholm, SWE, Sweden, 76, 220, D, L, 2001, 7, 225, Philadelphia Flyers, 176, 13, 84, yes
27, Yared Hagos, 1983-03-27, 1983, 3, 27, Stockholm, SWE, Sweden, 73, 218, C, L, 2001, 3, 70, Dallas Stars, 24, 0, 0, no

CREATE TABLE `seasonstatus` (
  ELITEID INTEGER REFERENCES PlayerInfo(ELITEID),
  SEASON TEXT,
  TEAM TEXT,
  LEAGUE TEXT,
  GAMETYPE TEXT,
  GP INTEGER,
  G INTEGER,
  A INTEGER,
  P INTEGER,
  PIM INTEGER,
  PLUSMINUS INTEGER
);
Sample rows from `seasonstatus`:
3667, 1997-1998, Rimouski Oceanic, QMJHL, Regular Season, 58, 44, 71, 115, 117, 27
3667, 1997-1998, Rimouski Oceanic, QMJHL, Playoffs, 18, 15, 26, 41, 46, 4
3667, 1997-1998, Canada U20, WJC-20, Regular Season, 7, 1, 1, 2, 4, 0

","CREATE TABLE `height_info` (
  height_id INTEGER,
  height_in_cm INTEGER,
  height_in_inch TEXT
);
Sample rows from `height_info`:
65, 165, 5'5""
67, 170, 5'7""
68, 172, 5'8""

CREATE TABLE `weight_info` (
  weight_id INTEGER,
  weight_in_kg INTEGER,
  weight_in_lbs INTEGER
);
Sample rows from `weight_info`:
154, 70, 154
159, 72, 159
161, 73, 161

CREATE TABLE `PlayerInfo` (
  ELITEID INTEGER,
  PlayerName TEXT,
  birthdate TEXT,
  birthyear DATE,
  birthmonth INTEGER,
  birthday INTEGER,
  birthplace TEXT,
  nation TEXT,
  height INTEGER REFERENCES height_info(height_id),
  weight INTEGER REFERENCES weight_info(weight_id),
  position_info TEXT,
  shoots TEXT,
  draftyear INTEGER,
  draftround INTEGER,
  overall INTEGER,
  overallby TEXT,
  CSS_rank INTEGER,
  sum_7yr_GP INTEGER,
  sum_7yr_TOI INTEGER,
  GP_greater_than_0 TEXT
);
Sample rows from `PlayerInfo`:
9, David Bornhammar, 1981-06-15, 1981, 6, 15, Lidingo, SWE, Sweden, 73, 198, D, L, 1999, 7, 192, Washington Capitals, 192, 0, 0, no
18, David Printz, 1980-07-24, 1980, 7, 24, Stockholm, SWE, Sweden, 76, 220, D, L, 2001, 7, 225, Philadelphia Flyers, 176, 13, 84, yes
27, Yared Hagos, 1983-03-27, 1983, 3, 27, Stockholm, SWE, Sweden, 73, 218, C, L, 2001, 3, 70, Dallas Stars, 24, 0, 0, no

CREATE TABLE `SeasonStatus` (
  ELITEID INTEGER REFERENCES PlayerInfo(ELITEID),
  SEASON TEXT,
  TEAM TEXT,
  LEAGUE TEXT,
  GAMETYPE TEXT,
  GP INTEGER,
  G INTEGER,
  A INTEGER,
  P INTEGER,
  PIM INTEGER,
  PLUSMINUS INTEGER
);
Sample rows from `SeasonStatus`:
3667, 1997-1998, Rimouski Oceanic, QMJHL, Regular Season, 58, 44, 71, 115, 117, 27
3667, 1997-1998, Rimouski Oceanic, QMJHL, Playoffs, 18, 15, 26, 41, 46, 4
3667, 1997-1998, Canada U20, WJC-20, Regular Season, 7, 1, 1, 2, 4, 0

","playerinfo, seasonstatus","seasonstatus.tEAM, playerinfo.ELItEID, seasonstatus.ELItEID, playerinfo.nation","height_info, weight_info, PlayerInfo, SeasonStatus"
video_games,How many strategy games are there?,SELECT COUNT(case when t1.genre_name = 'Strategy' then t2.id else null end) FROM genre as t1 inner JOIN game as t2 ON t1.id = t2.genre_id,"CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

","CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

","genre, game","genre.genre_name, game.id, genre.id, game.genre_id","genre, game, platform, publisher, game_publisher, game_platform, region, region_sales"
retail_world,What is the most widely used shipping company in the United States of America?,SELECT t2.companyname FROM orders as t1 inner JOIN shippers as t2 ON t1.shipvia = t2.shipperid WHERE t1.shipcountry = 'USA' GROUP BY t2.companyname ORDER BY COUNT(t2.companyname) DESC LIMIT 1,"CREATE TABLE `orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

","orders, shippers","shippers.companyname, orders.shipvia, shippers.shipperid, orders.shipcountry","sqlite_sequence, Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails"
simpson_episodes,What is the title of episode that won the Best International TV Series Award in 2017?,"SELECT t2.title FROM award as t1 inner JOIN episode as t2 ON t1.episode_id = t2.episode_id WHERE substr(t1.year, 1, 4) = '2017' AND t1.award = 'Best International TV Series' AND t1.result = 'Winner';","CREATE TABLE `award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","award, episode","episode.title, award.episode_id, episode.episode_id, award.year, award.award, award.result","Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
computer_student,List the ID of all professors who are not faculty member along with the courses taught by him/her.,"SELECT t2.p_id, t2.course_id FROM person as t1 inner JOIN taughtby as t2 ON t1.p_id = t2.p_id WHERE t1.professor = 1 AND t1.hasposition <> 0","CREATE TABLE `person` (
  p_id INTEGER,
  professor INTEGER,
  student INTEGER,
  hasPosition TEXT,
  inPhase TEXT,
  yearsInProgram TEXT
);
Sample rows from `person`:
3, 0, 1, 0, 0, 0
4, 0, 1, 0, 0, 0
5, 1, 0, Faculty, 0, 0

CREATE TABLE `taughtby` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `taughtby`:
0, 40
1, 40
2, 180

","CREATE TABLE `course` (
  course_id INTEGER,
  courseLevel TEXT
);
Sample rows from `course`:
0, Level_500
1, Level_500
2, Level_500

CREATE TABLE `person` (
  p_id INTEGER,
  professor INTEGER,
  student INTEGER,
  hasPosition TEXT,
  inPhase TEXT,
  yearsInProgram TEXT
);
Sample rows from `person`:
3, 0, 1, 0, 0, 0
4, 0, 1, 0, 0, 0
5, 1, 0, Faculty, 0, 0

CREATE TABLE `advisedBy` (
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id),
  p_id_dummy INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `advisedBy`:
96, 5
118, 5
183, 5

CREATE TABLE `taughtBy` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `taughtBy`:
0, 40
1, 40
2, 180

","person, taughtby","taughtby.p_id, taughtby.course_id, person.p_id, person.professor, person.hasposition","course, person, advisedBy, taughtBy"
law_episode,List the names of all the cast members in the series.,SELECT t2.name FROM credit as t1 inner JOIN person as t2 ON t2.person_id = t1.person_id WHERE t1.category = 'Cast',"CREATE TABLE `credit` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  person_id TEXT PRIMARY KEY REFERENCES Person(person_id),
  category TEXT,
  role TEXT,
  credited TEXT
);
Sample rows from `credit`:
tt0629204, nm0226352, Additional Crew, technical advisor, true
tt0629204, nm0506974, Additional Crew, production accountant, true
tt0629204, nm4103116, Additional Crew, production accountant, true

CREATE TABLE `person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
tt0629239, nun
tt0629239, priest
tt0629420, police officer

CREATE TABLE `Person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  series TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  person_id TEXT REFERENCES Person(person_id),
  role TEXT,
  result TEXT
);
Sample rows from `Award`:
258, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0937725, None, Winner
259, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0792309, None, Winner
260, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0049569, None, Winner

CREATE TABLE `Credit` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  person_id TEXT PRIMARY KEY REFERENCES Person(person_id),
  category TEXT,
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
tt0629204, nm0226352, Additional Crew, technical advisor, true
tt0629204, nm0506974, Additional Crew, production accountant, true
tt0629204, nm4103116, Additional Crew, production accountant, true

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
tt0629204, 10, 36, 17.7
tt0629204, 9, 39, 19.2
tt0629204, 8, 64, 31.5

","credit, person","person.name, person.person_id, credit.person_id, credit.category","Episode, Keyword, Person, Award, Credit, Vote"
authors,How many journals do not have a website?,SELECT COUNT(homepage) FROM journal WHERE homepage = '',"CREATE TABLE `journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

","CREATE TABLE `Author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `Author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

CREATE TABLE `Conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

CREATE TABLE `Journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `Paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `Paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `PaperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `PaperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

",journal,homepage,"Author, Conference, Journal, Paper, PaperAuthor"
cars,Provide the price of the only Toyota Corona hardtop in the database.,SELECT t2.price FROM data as t1 inner JOIN price as t2 ON t1.id = t2.id WHERE t1.car_name = 'toyota corona hardtop',"CREATE TABLE `data` (
  ID INTEGER REFERENCES price(ID),
  mpg REAL,
  cylinders INTEGER,
  displacement REAL,
  horsepower INTEGER,
  weight INTEGER,
  acceleration REAL,
  model INTEGER,
  car_name TEXT
);
Sample rows from `data`:
1, 18.0, 8, 307.0, 130, 3504, 12.0, 70, chevrolet chevelle malibu
2, 15.0, 8, 350.0, 165, 3693, 11.5, 70, buick skylark 320
3, 18.0, 8, 318.0, 150, 3436, 11.0, 70, plymouth satellite

CREATE TABLE `price` (
  ID INTEGER,
  price REAL
);
Sample rows from `price`:
1, 25561.59078
2, 24221.42273
3, 27240.84373

","CREATE TABLE `country` (
  origin INTEGER,
  country TEXT
);
Sample rows from `country`:
1, USA
2, Europe
3, Japan

CREATE TABLE `price` (
  ID INTEGER,
  price REAL
);
Sample rows from `price`:
1, 25561.59078
2, 24221.42273
3, 27240.84373

CREATE TABLE `data` (
  ID INTEGER REFERENCES price(ID),
  mpg REAL,
  cylinders INTEGER,
  displacement REAL,
  horsepower INTEGER,
  weight INTEGER,
  acceleration REAL,
  model INTEGER,
  car_name TEXT
);
Sample rows from `data`:
1, 18.0, 8, 307.0, 130, 3504, 12.0, 70, chevrolet chevelle malibu
2, 15.0, 8, 350.0, 165, 3693, 11.5, 70, buick skylark 320
3, 18.0, 8, 318.0, 150, 3436, 11.0, 70, plymouth satellite

CREATE TABLE `production` (
  ID INTEGER PRIMARY KEY REFERENCES price(ID) REFERENCES data(ID),
  model_year INTEGER PRIMARY KEY,
  country INTEGER REFERENCES country(origin)
);
Sample rows from `production`:
1, 1970, 1
1, 1971, 1
2, 1970, 1

","data, price","price.price, data.id, price.id, data.car_name","country, price, data, production"
regional_sales,"Write down the store IDs and region of the state ""Michigan"".","SELECT DISTINCT t2.storeid, t1.region FROM regions as t1 inner JOIN `store locations` as t2 ON t2.statecode = t1.statecode WHERE t2.state = 'Michigan'","CREATE TABLE `regions` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `regions`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `store locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `store locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  Customer Names TEXT
);
Sample rows from `Customers`:
1, Avon Corp
2, WakeFern 
3, Elorac, Corp

CREATE TABLE `Products` (
  ProductID INTEGER,
  Product Name TEXT
);
Sample rows from `Products`:
1, Cookware
2, Photo Frames
3, Table Lamps

CREATE TABLE `Regions` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `Regions`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `Sales Team` (
  SalesTeamID INTEGER,
  Sales Team TEXT,
  Region TEXT
);
Sample rows from `Sales Team`:
1, Adam Hernandez, Northeast
2, Keith Griffin, Northeast
3, Jerry Green, West

CREATE TABLE `Store Locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `Store Locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

CREATE TABLE `Sales Orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `Sales Orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

","regions, store locations","store locations.storeid, regions.region, store locations.statecode, regions.statecode, store locations.state","Customers, Products, Regions, Sales Team, Store Locations, Sales Orders"
books,How many customers have an address that is located in the city of Villeneuve-la-Garenne?,SELECT COUNT(address_id) FROM address WHERE city = 'Villeneuve-la-Garenne',"CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

",address,"address_id, city","address_status, author, book_language, country, address, customer, customer_address, order_status, publisher, book, book_author, shipping_method, cust_order, sqlite_sequence, order_history, order_line"
software_company,Please list the occupations of the customers over 40 and have sent a true response to the incentive mailing sent by the marketing department.,SELECT DISTINCT t1.occupation FROM customers as t1 inner JOIN mailings1_2 as t2 ON t1.id = t2.REFid WHERE t1.age > 40 AND t2.response = 'true',"CREATE TABLE `customers` (
  ID INTEGER,
  SEX TEXT,
  MARITAL_STATUS TEXT,
  GEOID INTEGER REFERENCES Demog(None),
  EDUCATIONNUM INTEGER,
  OCCUPATION TEXT,
  age INTEGER
);
Sample rows from `customers`:
0, Male, Never-married, 61, 7, Machine-op-inspct, 62
1, Male, Married-civ-spouse, 70, 3, Handlers-cleaners, 78
2, Male, Never-married, 53, 7, Machine-op-inspct, 69

CREATE TABLE `mailings1_2` (
  REFID INTEGER REFERENCES Customers(None),
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `mailings1_2`:
0, 2007-02-01 12:00:00.0, false
1, 2007-02-01 12:00:00.0, false
2, 2007-02-01 12:00:00.0, false

","CREATE TABLE `Demog` (
  GEOID INTEGER,
  INHABITANTS_K REAL,
  INCOME_K REAL,
  A_VAR1 REAL,
  A_VAR2 REAL,
  A_VAR3 REAL,
  A_VAR4 REAL,
  A_VAR5 REAL,
  A_VAR6 REAL,
  A_VAR7 REAL,
  A_VAR8 REAL,
  A_VAR9 REAL,
  A_VAR10 REAL,
  A_VAR11 REAL,
  A_VAR12 REAL,
  A_VAR13 REAL,
  A_VAR14 REAL,
  A_VAR15 REAL,
  A_VAR16 REAL,
  A_VAR17 REAL,
  A_VAR18 REAL
);
Sample rows from `Demog`:
0, 30.046, 2631.47, 6.084, 5.79, 8.595, 3.935, 6.362, 8.626, 4.624, 8.324, 5.233, 6.232, 5.205, 8.231, 6.746, 8.679, 5.292, 3.5, 5.512, 5.783
1, 36.25, 3012.75, 4.604, 8.309, 6.007, 5.938, 8.773, 3.579, 6.349, 4.694, 6.884, 7.062, 7.319, 3.72, 6.405, 7.202, 4.932, 7.969, 8.15, 5.633
2, 47.645, 2192.41, 4.911, 8.557, 5.934, 6.494, 9.172, 3.202, 6.157, 4.822, 7.942, 7.901, 7.928, 2.33, 6.029, 6.455, 4.72, 8.564, 8.342, 4.938

CREATE TABLE `mailings3` (
  REFID INTEGER,
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `mailings3`:
60000, 2007-07-01 12:00:00.0, false
60001, 2007-07-01 12:00:00.0, false
60002, 2007-07-01 12:00:00.0, false

CREATE TABLE `Customers` (
  ID INTEGER,
  SEX TEXT,
  MARITAL_STATUS TEXT,
  GEOID INTEGER REFERENCES Demog(None),
  EDUCATIONNUM INTEGER,
  OCCUPATION TEXT,
  age INTEGER
);
Sample rows from `Customers`:
0, Male, Never-married, 61, 7, Machine-op-inspct, 62
1, Male, Married-civ-spouse, 70, 3, Handlers-cleaners, 78
2, Male, Never-married, 53, 7, Machine-op-inspct, 69

CREATE TABLE `Mailings1_2` (
  REFID INTEGER REFERENCES Customers(None),
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `Mailings1_2`:
0, 2007-02-01 12:00:00.0, false
1, 2007-02-01 12:00:00.0, false
2, 2007-02-01 12:00:00.0, false

CREATE TABLE `Sales` (
  EVENTID INTEGER,
  REFID INTEGER REFERENCES Customers(None),
  EVENT_DATE DATETIME,
  AMOUNT REAL
);
Sample rows from `Sales`:
0, 0, 2006-12-21 12:00:00.0, 17.907
1, 0, 2006-12-25 12:00:00.0, 17.401
2, 0, 2007-01-26 12:00:00.0, 13.277

","customers, mailings1_2","customers.occupation, customers.id, mailings1_2.REFid, customers.age, mailings1_2.response","Demog, mailings3, Customers, Mailings1_2, Sales"
public_review_platform,"Among the active businesses in Ahwatukee, which of them are still open in Sunday?",SELECT t1.business_id FROM business as t1 inner JOIN business_Hours as t2 ON t1.business_id = t2.business_id inner JOIN days as t3 ON t2.day_id = t3.day_id WHERE t1.city LIKE 'Ahwatukee' AND t1.active LIKE 'TRUE' AND t3.day_of_week LIKE 'Sunday',"CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `days`:
1, Sunday
2, Monday
3, Tuesday

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","business, business_Hours, days","business.business_id, business_Hours.business_id, business_Hours.day_id, days.day_id, business.city, business.active, days.day_of_week","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
european_football_1,How many matches played in the 2019 season of Scottish Championship league were ended with an equal result of 2-2?,SELECT COUNT(t1.div) FROM matchs as t1 inner JOIN divisions as t2 ON t1.div = t2.division WHERE t1.season = 2019 AND t2.name = 'Scottish Championship' AND t1.ftag = 2 AND t1.fthg = 2,"CREATE TABLE `matchs` (
  Div TEXT REFERENCES divisions(division),
  Date DATE,
  HomeTeam TEXT,
  AwayTeam TEXT,
  FTHG INTEGER,
  FTAG INTEGER,
  FTR TEXT,
  season INTEGER
);
Sample rows from `matchs`:
B1, 2020-08-08, Club Brugge, Charleroi, 0, 1, A, 2021
B1, 2020-08-08, Antwerp, Mouscron, 1, 1, D, 2021
B1, 2020-08-08, Standard, Cercle Brugge, 1, 0, H, 2021

CREATE TABLE `divisions` (
  division TEXT PRIMARY KEY,
  name TEXT,
  country TEXT
);
Sample rows from `divisions`:
B1, Division 1A, Belgium
D1, Bundesliga, Deutschland
D2, 2. Bundesliga, Deutschland

","CREATE TABLE `divisions` (
  division TEXT PRIMARY KEY,
  name TEXT,
  country TEXT
);
Sample rows from `divisions`:
B1, Division 1A, Belgium
D1, Bundesliga, Deutschland
D2, 2. Bundesliga, Deutschland

CREATE TABLE `matchs` (
  Div TEXT REFERENCES divisions(division),
  Date DATE,
  HomeTeam TEXT,
  AwayTeam TEXT,
  FTHG INTEGER,
  FTAG INTEGER,
  FTR TEXT,
  season INTEGER
);
Sample rows from `matchs`:
B1, 2020-08-08, Club Brugge, Charleroi, 0, 1, A, 2021
B1, 2020-08-08, Antwerp, Mouscron, 1, 1, D, 2021
B1, 2020-08-08, Standard, Cercle Brugge, 1, 0, H, 2021

","matchs, divisions","matchs.div, divisions.division, matchs.season, divisions.name, matchs.ftag, matchs.fthg","divisions, matchs"
university,Show the id of University of Orléans.,SELECT id FROM university WHERE university_name = 'University of Orléans',"CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

","CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

CREATE TABLE `ranking_system` (
  id INTEGER,
  system_name TEXT
);
Sample rows from `ranking_system`:
1, Times Higher Education World University Ranking
2, Shanghai Ranking
3, Center for World University Rankings

CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

",university,"id, university_name","country, ranking_system, ranking_criteria, university, university_ranking_year, university_year"
language_corpus,"How many words are there on the page that the word ""grec"" has occurred for 52 times?",SELECT SUM(t3.words) FROM words as t1 inner JOIN pages_words as t2 ON t1.wid = t2.wid inner JOIN pages as t3 ON t2.pid = t3.pid WHERE t1.word = 'grec' AND t2.occurrences = 52,"CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

","CREATE TABLE `langs` (
  lid INTEGER,
  lang TEXT PRIMARY KEY,
  locale TEXT PRIMARY KEY,
  pages INTEGER,
  words INTEGER
);
Sample rows from `langs`:
1, ca, ca_ES, 1129144, 2764996

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
langs, 1
pages, 1129144
words, 2764996

CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `langs_words` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `langs_words`:
1, 1, 242
1, 2, 16841
1, 3, 48700

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

","words, pages_words, pages","pages.words, words.wid, pages_words.wid, pages_words.pid, pages.pid, words.word, pages_words.occurrences","langs, sqlite_sequence, pages, words, langs_words, pages_words, biwords"
public_review_platform,"Compare the number of business between the category of ""Men's Clothing"" and ""Women's Clothing"".",SELECT SUM(case when t1.category_name = 'Men''s Clothing' then 1 else 0 end) - SUM(case when t1.category_name = 'Women''s Clothing' then 1 else 0 end) as diff FROM categories as t1 inner JOIN Business_categories as t2 ON t1.category_id = t2.category_id,"CREATE TABLE `categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Business_categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_categories`:
1, 8
1, 143
2, 18

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","categories, Business_categories","categories.category_name, categories.category_id, Business_categories.category_id","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
menu,List down the page numbers for menu with dishes on the right upper corner.,SELECT t2.page_number FROM menu as t1 inner JOIN menuPage as t2 ON t1.id = t2.menu_id inner JOIN menuItem as t3 ON t2.id = t3.menu_page_id WHERE t3.xpos > 0.75 AND t3.ypos < 0.25,"CREATE TABLE `menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

CREATE TABLE `menuPage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `menuPage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

CREATE TABLE `menuItem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `menuItem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

","CREATE TABLE `Dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `Dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

CREATE TABLE `Menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `Menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

CREATE TABLE `MenuPage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `MenuPage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

CREATE TABLE `MenuItem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `MenuItem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

","menu, menuPage, menuItem","menuPage.page_number, menu.id, menuPage.menu_id, menuPage.id, menuItem.menu_page_id, menuItem.xpos, menuItem.ypos","Dish, Menu, MenuPage, MenuItem"
app_store,How many apps have rating of 5?,SELECT COUNT(app) FROM playstore WHERE rating = 5,"CREATE TABLE `playstore` (
  App TEXT,
  Category TEXT,
  Rating REAL,
  Reviews INTEGER,
  Size TEXT,
  Installs TEXT,
  Type TEXT,
  Price TEXT,
  Content Rating TEXT,
  Genres TEXT
);
Sample rows from `playstore`:
Photo Editor & Candy Camera & Grid & ScrapBook, ART_AND_DESIGN, 4.1, 159, 19M, 10,000+, Free, 0, Everyone, Art & Design
Coloring book moana, ART_AND_DESIGN, 3.9, 967, 14M, 500,000+, Free, 0, Everyone, Art & Design;Pretend Play
U Launcher Lite – FREE Live Cool Themes, Hide Apps, ART_AND_DESIGN, 4.7, 87510, 8.7M, 5,000,000+, Free, 0, Everyone, Art & Design

","CREATE TABLE `playstore` (
  App TEXT,
  Category TEXT,
  Rating REAL,
  Reviews INTEGER,
  Size TEXT,
  Installs TEXT,
  Type TEXT,
  Price TEXT,
  Content Rating TEXT,
  Genres TEXT
);
Sample rows from `playstore`:
Photo Editor & Candy Camera & Grid & ScrapBook, ART_AND_DESIGN, 4.1, 159, 19M, 10,000+, Free, 0, Everyone, Art & Design
Coloring book moana, ART_AND_DESIGN, 3.9, 967, 14M, 500,000+, Free, 0, Everyone, Art & Design;Pretend Play
U Launcher Lite – FREE Live Cool Themes, Hide Apps, ART_AND_DESIGN, 4.7, 87510, 8.7M, 5,000,000+, Free, 0, Everyone, Art & Design

CREATE TABLE `user_reviews` (
  App TEXT REFERENCES playstore(App),
  Translated_Review TEXT,
  Sentiment TEXT,
  Sentiment_Polarity TEXT,
  Sentiment_Subjectivity TEXT
);
Sample rows from `user_reviews`:
10 Best Foods for You, I like eat delicious food. That's I'm cooking food myself, case ""10 Best Foods"" helps lot, also ""Best Before (Shelf Life)"", Positive, 1.0, 0.5333333333333333
10 Best Foods for You, This help eating healthy exercise regular basis, Positive, 0.25, 0.28846153846153844
10 Best Foods for You, nan, nan, nan, nan

",playstore,"app, rating","playstore, user_reviews"
menu,How many dishes have appeared on the menu in less than 5 years?,SELECT COUNT(*) FROM dish as t1 inner JOIN menuitem as t2 ON t1.id = t2.dish_id WHERE t1.last_appeared - t1.first_appeared < 5,"CREATE TABLE `dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

CREATE TABLE `menuitem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `menuitem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

","CREATE TABLE `Dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `Dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

CREATE TABLE `Menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `Menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

CREATE TABLE `MenuPage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `MenuPage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

CREATE TABLE `MenuItem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `MenuItem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

","dish, menuitem","dish.id, menuitem.dish_id, dish.last_appeared, dish.first_appeared","Dish, Menu, MenuPage, MenuItem"
books,How many books are in English?,SELECT COUNT(*) FROM book as t1 inner JOIN book_language as t2 ON t1.language_id = t2.language_id WHERE t2.language_name = 'English',"CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","book, book_language","book.language_id, book_language.language_id, book_language.language_name","address_status, author, book_language, country, address, customer, customer_address, order_status, publisher, book, book_author, shipping_method, cust_order, sqlite_sequence, order_history, order_line"
movie,What is the genre of PG rated movie starred by the actor with highest net worth?,"SELECT t1.genre FROM movie as t1 inner JOIN characters as t2 ON t1.movieid = t2.movieid inner JOIN actor as t3 ON t3.actorid = t2.actorid WHERE t1.`mpaa rating` = 'PG' ORDER BY CasT(replace(replace(t3.networth, ',', ''), '$', '') as real) DESC LIMIT 1","CREATE TABLE `movie` (
  MovieID INTEGER,
  Title TEXT,
  MPAA Rating TEXT,
  Budget INTEGER,
  Gross INTEGER,
  Release Date TEXT,
  Genre TEXT,
  Runtime INTEGER,
  Rating REAL,
  Rating Count INTEGER,
  Summary TEXT
);
Sample rows from `movie`:
1, Look Who's Talking, PG-13, 7500000, 296000000, 1989-10-12, Romance, 93, 5.9, 73638, After a single, career-minded woman is left on her own to give birth to the child of a married man, she finds a new romantic chance in a cab driver. Meanwhile, the point-of-view of the newborn boy is narrated through voice-over.
2, Driving Miss Daisy, PG, 7500000, 145793296, 1989-12-13, Comedy, 99, 7.4, 91075, An old Jewish woman and her African-American chauffeur in the American South have a relationship that grows and improves over the years.
3, Turner & Hooch, PG, 13000000, 71079915, 1989-07-28, Crime, 100, 7.2, 91415, Det. Scott Turner (Tom Hanks) is an uptight, by-the-book police officer. When his friend Amos Reed (John McIntire), the proprietor of a junkyard, is killed, Turner reluctantly inherits the man's dog. Turner adjusts to life with the dog to help solve a murder case.

CREATE TABLE `characters` (
  MovieID INTEGER PRIMARY KEY REFERENCES movie(MovieID),
  ActorID INTEGER PRIMARY KEY REFERENCES actor(ActorID),
  Character Name TEXT,
  creditOrder INTEGER,
  pay TEXT,
  screentime TEXT
);
Sample rows from `characters`:
1, 1, James, 1, None, None
1, 2, Mollie, 2, None, None
1, 3, Rosie, 3, None, None

CREATE TABLE `actor` (
  ActorID INTEGER,
  Name TEXT,
  Date of Birth DATE,
  Birth City TEXT,
  Birth Country TEXT,
  Height (Inches) INTEGER,
  Biography TEXT,
  Gender TEXT,
  Ethnicity TEXT,
  NetWorth TEXT
);
Sample rows from `actor`:
1, John Travolta, 1954-02-18, Englewood, USA, 74, John Joseph Travolta was born in Englewood, New Jersey, one of six children of Helen Travolta (n�e Helen Cecilia Burke) and Salvatore/Samuel J. Travolta. His father was of Italian descent and his mother was of Irish ancestry. His father owned a tire repair shop called Travolta Tires in Hillsdale, NJ. Travolta started acting appearing in a local ..., Male, White, $250,000,000.00
2, Kirstie Alley, 1951-01-12, Wichita, USA, 67, None, Female, White, $40,000,000.00
3, Olympia Dukakis, 1931-06-20, Lowell, USA, 63, Long a vital, respected lady of the classic and contemporary stage this grand lady did not become a household name and sought-after film actress until age 56 when she turned in a glorious, Oscar-winning perf as Cher's sardonic mother in the romantic comedy Moonstruck (1987). Since then movie (and TV) fans have discovered what the East coast ..., Female, White, $6,000,000.00

","CREATE TABLE `actor` (
  ActorID INTEGER,
  Name TEXT,
  Date of Birth DATE,
  Birth City TEXT,
  Birth Country TEXT,
  Height (Inches) INTEGER,
  Biography TEXT,
  Gender TEXT,
  Ethnicity TEXT,
  NetWorth TEXT
);
Sample rows from `actor`:
1, John Travolta, 1954-02-18, Englewood, USA, 74, John Joseph Travolta was born in Englewood, New Jersey, one of six children of Helen Travolta (n�e Helen Cecilia Burke) and Salvatore/Samuel J. Travolta. His father was of Italian descent and his mother was of Irish ancestry. His father owned a tire repair shop called Travolta Tires in Hillsdale, NJ. Travolta started acting appearing in a local ..., Male, White, $250,000,000.00
2, Kirstie Alley, 1951-01-12, Wichita, USA, 67, None, Female, White, $40,000,000.00
3, Olympia Dukakis, 1931-06-20, Lowell, USA, 63, Long a vital, respected lady of the classic and contemporary stage this grand lady did not become a household name and sought-after film actress until age 56 when she turned in a glorious, Oscar-winning perf as Cher's sardonic mother in the romantic comedy Moonstruck (1987). Since then movie (and TV) fans have discovered what the East coast ..., Female, White, $6,000,000.00

CREATE TABLE `movie` (
  MovieID INTEGER,
  Title TEXT,
  MPAA Rating TEXT,
  Budget INTEGER,
  Gross INTEGER,
  Release Date TEXT,
  Genre TEXT,
  Runtime INTEGER,
  Rating REAL,
  Rating Count INTEGER,
  Summary TEXT
);
Sample rows from `movie`:
1, Look Who's Talking, PG-13, 7500000, 296000000, 1989-10-12, Romance, 93, 5.9, 73638, After a single, career-minded woman is left on her own to give birth to the child of a married man, she finds a new romantic chance in a cab driver. Meanwhile, the point-of-view of the newborn boy is narrated through voice-over.
2, Driving Miss Daisy, PG, 7500000, 145793296, 1989-12-13, Comedy, 99, 7.4, 91075, An old Jewish woman and her African-American chauffeur in the American South have a relationship that grows and improves over the years.
3, Turner & Hooch, PG, 13000000, 71079915, 1989-07-28, Crime, 100, 7.2, 91415, Det. Scott Turner (Tom Hanks) is an uptight, by-the-book police officer. When his friend Amos Reed (John McIntire), the proprietor of a junkyard, is killed, Turner reluctantly inherits the man's dog. Turner adjusts to life with the dog to help solve a murder case.

CREATE TABLE `characters` (
  MovieID INTEGER PRIMARY KEY REFERENCES movie(MovieID),
  ActorID INTEGER PRIMARY KEY REFERENCES actor(ActorID),
  Character Name TEXT,
  creditOrder INTEGER,
  pay TEXT,
  screentime TEXT
);
Sample rows from `characters`:
1, 1, James, 1, None, None
1, 2, Mollie, 2, None, None
1, 3, Rosie, 3, None, None

","movie, characters, actor","movie.genre, movie.movieid, characters.movieid, actor.actorid, characters.actorid, movie.mpaa rating, actor.networth","actor, movie, characters"
codebase_comments,Give the number of solutions that the repository which has 3060 Stars contains.,SELECT COUNT(t2.repoid) FROM repo as t1 inner JOIN solution as t2 ON t1.id = t2.repoid WHERE t1.stars = 3060,"CREATE TABLE `repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

CREATE TABLE `solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Method, 10860640
MethodParameter, 17514858
Repo, 156550

CREATE TABLE `Method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `Method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

CREATE TABLE `MethodParameter` (
  Id INTEGER,
  MethodId TEXT,
  Type TEXT,
  Name TEXT
);
Sample rows from `MethodParameter`:
1, 1, System.String, data
2, 2, System.Int32, i
3, 2, System.Int32, declstartpos

CREATE TABLE `Repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `Repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

CREATE TABLE `Solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `Solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

","repo, solution","solution.repoid, repo.id, repo.stars","sqlite_sequence, Method, MethodParameter, Repo, Solution"
language_corpus,"For the biwords pair that appears ""116430"" times, what is the second word of the pair?",SELECT t1.word FROM words as t1 inner JOIN biwords as t2 ON t1.wid = t2.w2nd WHERE t2.occurrences = 116430,"CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

","CREATE TABLE `langs` (
  lid INTEGER,
  lang TEXT PRIMARY KEY,
  locale TEXT PRIMARY KEY,
  pages INTEGER,
  words INTEGER
);
Sample rows from `langs`:
1, ca, ca_ES, 1129144, 2764996

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
langs, 1
pages, 1129144
words, 2764996

CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `langs_words` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `langs_words`:
1, 1, 242
1, 2, 16841
1, 3, 48700

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

","words, biwords","words.word, words.wid, biwords.w2nd, biwords.occurrences","langs, sqlite_sequence, pages, words, langs_words, pages_words, biwords"
app_store,List all the comments on the lowest rated Mature 17+ app.,"SELECT t2.translated_review FROM playstore as t1 inner JOIN user_reviews as t2 ON t1.app = t2.app WHERE t1.""Content rating"" = 'Mature 17+' ORDER BY t1.rating LIMIT 1","CREATE TABLE `playstore` (
  App TEXT,
  Category TEXT,
  Rating REAL,
  Reviews INTEGER,
  Size TEXT,
  Installs TEXT,
  Type TEXT,
  Price TEXT,
  Content Rating TEXT,
  Genres TEXT
);
Sample rows from `playstore`:
Photo Editor & Candy Camera & Grid & ScrapBook, ART_AND_DESIGN, 4.1, 159, 19M, 10,000+, Free, 0, Everyone, Art & Design
Coloring book moana, ART_AND_DESIGN, 3.9, 967, 14M, 500,000+, Free, 0, Everyone, Art & Design;Pretend Play
U Launcher Lite – FREE Live Cool Themes, Hide Apps, ART_AND_DESIGN, 4.7, 87510, 8.7M, 5,000,000+, Free, 0, Everyone, Art & Design

CREATE TABLE `user_reviews` (
  App TEXT REFERENCES playstore(App),
  Translated_Review TEXT,
  Sentiment TEXT,
  Sentiment_Polarity TEXT,
  Sentiment_Subjectivity TEXT
);
Sample rows from `user_reviews`:
10 Best Foods for You, I like eat delicious food. That's I'm cooking food myself, case ""10 Best Foods"" helps lot, also ""Best Before (Shelf Life)"", Positive, 1.0, 0.5333333333333333
10 Best Foods for You, This help eating healthy exercise regular basis, Positive, 0.25, 0.28846153846153844
10 Best Foods for You, nan, nan, nan, nan

","CREATE TABLE `playstore` (
  App TEXT,
  Category TEXT,
  Rating REAL,
  Reviews INTEGER,
  Size TEXT,
  Installs TEXT,
  Type TEXT,
  Price TEXT,
  Content Rating TEXT,
  Genres TEXT
);
Sample rows from `playstore`:
Photo Editor & Candy Camera & Grid & ScrapBook, ART_AND_DESIGN, 4.1, 159, 19M, 10,000+, Free, 0, Everyone, Art & Design
Coloring book moana, ART_AND_DESIGN, 3.9, 967, 14M, 500,000+, Free, 0, Everyone, Art & Design;Pretend Play
U Launcher Lite – FREE Live Cool Themes, Hide Apps, ART_AND_DESIGN, 4.7, 87510, 8.7M, 5,000,000+, Free, 0, Everyone, Art & Design

CREATE TABLE `user_reviews` (
  App TEXT REFERENCES playstore(App),
  Translated_Review TEXT,
  Sentiment TEXT,
  Sentiment_Polarity TEXT,
  Sentiment_Subjectivity TEXT
);
Sample rows from `user_reviews`:
10 Best Foods for You, I like eat delicious food. That's I'm cooking food myself, case ""10 Best Foods"" helps lot, also ""Best Before (Shelf Life)"", Positive, 1.0, 0.5333333333333333
10 Best Foods for You, This help eating healthy exercise regular basis, Positive, 0.25, 0.28846153846153844
10 Best Foods for You, nan, nan, nan, nan

","playstore, user_reviews","user_reviews.translated_review, playstore.app, user_reviews.app, playstore.Content rating, playstore.rating","playstore, user_reviews"
student_loan,"Among the students who filed for bankruptcy with an absence in school of no more than 6 months, how many students enlisted for the fire department?",SELECT COUNT(t1.name) FROM longest_absense_from_school as t1 inner JOIN filed_for_bankrupcy as t2 ON t1.name = t2.name inner JOIN enlist as t3 ON t3.name = t2.name WHERE t3.organ = 'fire_department',"CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

","longest_absense_from_school, filed_for_bankrupcy, enlist","longest_absense_from_school.name, filed_for_bankrupcy.name, enlist.name, enlist.organ","bool, person, disabled, enlist, filed_for_bankrupcy, longest_absense_from_school, male, no_payment_due, unemployed, enrolled"
music_tracker,"How many tags does the release ""city funk"" have？",SELECT COUNT(t2.tag) FROM torrents as t1 inner JOIN tags as t2 ON t1.id = t2.id WHERE t1.groupname = 'city funk',"CREATE TABLE `torrents` (
  groupName TEXT,
  totalSnatched INTEGER,
  artist TEXT,
  groupYear INTEGER,
  releaseType TEXT,
  groupId INTEGER,
  id INTEGER
);
Sample rows from `torrents`:
superappin&#39;, 239, grandmaster flash & the furious five, 1979, single, 720949, 0
spiderap / a corona jam, 156, ron hunt & ronnie g & the sm crew, 1979, single, 728752, 1
rapper&#39;s delight, 480, sugarhill gang, 1979, single, 18513, 2

CREATE TABLE `tags` (
  index INTEGER PRIMARY KEY,
  id INTEGER REFERENCES torrents(None),
  tag TEXT
);
Sample rows from `tags`:
0, 0, 1970s
1, 0, funk
2, 0, disco

","CREATE TABLE `torrents` (
  groupName TEXT,
  totalSnatched INTEGER,
  artist TEXT,
  groupYear INTEGER,
  releaseType TEXT,
  groupId INTEGER,
  id INTEGER
);
Sample rows from `torrents`:
superappin&#39;, 239, grandmaster flash & the furious five, 1979, single, 720949, 0
spiderap / a corona jam, 156, ron hunt & ronnie g & the sm crew, 1979, single, 728752, 1
rapper&#39;s delight, 480, sugarhill gang, 1979, single, 18513, 2

CREATE TABLE `tags` (
  index INTEGER PRIMARY KEY,
  id INTEGER REFERENCES torrents(None),
  tag TEXT
);
Sample rows from `tags`:
0, 0, 1970s
1, 0, funk
2, 0, disco

","torrents, tags","tags.tag, torrents.id, tags.id, torrents.groupname","torrents, tags"
computer_student,What is the average number of students for each advisor?,SELECT cast(COUNT(p_id) as real) / COUNT(DISTINCT p_id_dummy) as avgnum FROM advisedby GROUP BY p_id_dummy,"CREATE TABLE `advisedby` (
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id),
  p_id_dummy INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `advisedby`:
96, 5
118, 5
183, 5

","CREATE TABLE `course` (
  course_id INTEGER,
  courseLevel TEXT
);
Sample rows from `course`:
0, Level_500
1, Level_500
2, Level_500

CREATE TABLE `person` (
  p_id INTEGER,
  professor INTEGER,
  student INTEGER,
  hasPosition TEXT,
  inPhase TEXT,
  yearsInProgram TEXT
);
Sample rows from `person`:
3, 0, 1, 0, 0, 0
4, 0, 1, 0, 0, 0
5, 1, 0, Faculty, 0, 0

CREATE TABLE `advisedBy` (
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id),
  p_id_dummy INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `advisedBy`:
96, 5
118, 5
183, 5

CREATE TABLE `taughtBy` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `taughtBy`:
0, 40
1, 40
2, 180

",advisedby,"p_id, p_id_dummy","course, person, advisedBy, taughtBy"
european_football_1,How many Away Victories happened on 2016/3/27 in the LaLiga 2 division?,SELECT COUNT(t1.ftr) FROM matchs as t1 inner JOIN divisions as t2 ON t1.div = t2.division WHERE t2.name = 'LaLiga 2' aND t1.date = '2016-03-27' aND t1.ftr = 'a',"CREATE TABLE `matchs` (
  Div TEXT REFERENCES divisions(division),
  Date DATE,
  HomeTeam TEXT,
  AwayTeam TEXT,
  FTHG INTEGER,
  FTAG INTEGER,
  FTR TEXT,
  season INTEGER
);
Sample rows from `matchs`:
B1, 2020-08-08, Club Brugge, Charleroi, 0, 1, A, 2021
B1, 2020-08-08, Antwerp, Mouscron, 1, 1, D, 2021
B1, 2020-08-08, Standard, Cercle Brugge, 1, 0, H, 2021

CREATE TABLE `divisions` (
  division TEXT PRIMARY KEY,
  name TEXT,
  country TEXT
);
Sample rows from `divisions`:
B1, Division 1A, Belgium
D1, Bundesliga, Deutschland
D2, 2. Bundesliga, Deutschland

","CREATE TABLE `divisions` (
  division TEXT PRIMARY KEY,
  name TEXT,
  country TEXT
);
Sample rows from `divisions`:
B1, Division 1A, Belgium
D1, Bundesliga, Deutschland
D2, 2. Bundesliga, Deutschland

CREATE TABLE `matchs` (
  Div TEXT REFERENCES divisions(division),
  Date DATE,
  HomeTeam TEXT,
  AwayTeam TEXT,
  FTHG INTEGER,
  FTAG INTEGER,
  FTR TEXT,
  season INTEGER
);
Sample rows from `matchs`:
B1, 2020-08-08, Club Brugge, Charleroi, 0, 1, A, 2021
B1, 2020-08-08, Antwerp, Mouscron, 1, 1, D, 2021
B1, 2020-08-08, Standard, Cercle Brugge, 1, 0, H, 2021

","matchs, divisions","matchs.ftr, matchs.div, divisions.division, divisions.name, matchs.date","divisions, matchs"
public_review_platform,"Give the number of users who joined Yelp since ""2004"".",SELECT COUNT(user_id) FROM users WHERE user_yelping_since_year = 2004,"CREATE TABLE `users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

",users,"user_id, user_yelping_since_year","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
olympics,Tell the weight of Dagfinn Sverre Aarskog.,SELECT weight FROM person WHERE full_name = 'Dagfinn Sverre Aarskog',"CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

","CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `medal` (
  id INTEGER,
  medal_name TEXT
);
Sample rows from `medal`:
1, Gold
2, Silver
3, Bronze

CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `sport` (
  id INTEGER,
  sport_name TEXT
);
Sample rows from `sport`:
1, Aeronautics
2, Alpine Skiing
3, Alpinism

CREATE TABLE `event` (
  id INTEGER,
  sport_id INTEGER REFERENCES sport(id),
  event_name TEXT
);
Sample rows from `event`:
1, 9, Basketball Men's Basketball
2, 33, Judo Men's Extra-Lightweight
3, 25, Football Men's Football

CREATE TABLE `competitor_event` (
  event_id INTEGER REFERENCES event(id),
  competitor_id INTEGER REFERENCES games_competitor(id),
  medal_id INTEGER REFERENCES medal(id)
);
Sample rows from `competitor_event`:
1, 1, 4
2, 2, 4
3, 3, 4

",person,"weight, full_name","city, games, games_city, medal, noc_region, person, games_competitor, person_region, sport, event, competitor_event"
movielens,What is the disparate number of the comedy films that got the 1 rating?,SELECT COUNT(DISTINCT t1.movieid) FROM movies2directors as t1 inner JOIN u2base as t2 ON t1.movieid = t2.movieid WHERE t2.rating = 1 AND t1.genre = 'comedy',"CREATE TABLE `movies2directors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  directorid INTEGER PRIMARY KEY REFERENCES directors(None),
  genre TEXT
);
Sample rows from `movies2directors`:
1672111, 54934, Action
1672946, 188940, Action
1679461, 179783, Action

CREATE TABLE `u2base` (
  userid INTEGER PRIMARY KEY REFERENCES users(None),
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  rating TEXT
);
Sample rows from `u2base`:
2, 1964242, 1
2, 2219779, 1
3, 1856939, 1

","CREATE TABLE `users` (
  userid INTEGER,
  age TEXT,
  u_gender TEXT,
  occupation TEXT
);
Sample rows from `users`:
1, 1, F, 2
2, 56, M, 3
3, 25, M, 2

CREATE TABLE `directors` (
  directorid INTEGER,
  d_quality INTEGER PRIMARY KEY,
  avg_revenue INTEGER PRIMARY KEY
);
Sample rows from `directors`:
67, 4, 1
92, 2, 3
284, 4, 0

CREATE TABLE `actors` (
  actorid INTEGER,
  a_gender TEXT,
  a_quality INTEGER
);
Sample rows from `actors`:
4, M, 4
16, M, 0
28, M, 4

CREATE TABLE `movies` (
  movieid INTEGER,
  year INTEGER,
  isEnglish TEXT,
  country TEXT,
  runningtime INTEGER
);
Sample rows from `movies`:
1672052, 3, T, other, 2
1672111, 4, T, other, 2
1672580, 4, T, USA, 3

CREATE TABLE `movies2actors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  actorid INTEGER PRIMARY KEY REFERENCES actors(None),
  cast_num INTEGER
);
Sample rows from `movies2actors`:
1672580, 981535, 0
1672946, 1094968, 0
1673647, 149985, 0

CREATE TABLE `movies2directors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  directorid INTEGER PRIMARY KEY REFERENCES directors(None),
  genre TEXT
);
Sample rows from `movies2directors`:
1672111, 54934, Action
1672946, 188940, Action
1679461, 179783, Action

CREATE TABLE `u2base` (
  userid INTEGER PRIMARY KEY REFERENCES users(None),
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  rating TEXT
);
Sample rows from `u2base`:
2, 1964242, 1
2, 2219779, 1
3, 1856939, 1

","movies2directors, u2base","movies2directors.movieid, u2base.movieid, u2base.rating, movies2directors.genre","users, directors, actors, movies, movies2actors, movies2directors, u2base"
retail_world,What are the companies that have the same phone area code as 171?,SELECT companyname FROM customers WHERE phone LIKE '(171)%',"CREATE TABLE `customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

",customers,"companyname, phone","sqlite_sequence, Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails"
shakespeare,"How many paragraphs are there in Act 5 Scene 1 of ""Comedy of Errors""?",SELECT COUNT(t3.id) FROM works as t1 inner JOIN chapters as t2 ON t1.id = t2.work_id inner JOIN paragraphs as t3 ON t2.id = t3.chapter_id WHERE t2.act = 5 AND t2.scene = 1 AND t1.title = 'Comedy of Errors',"CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

","CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
chapters, 19648
characters, 1266
paragraphs, 666327

CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

","works, chapters, paragraphs","paragraphs.id, works.id, chapters.work_id, chapters.id, paragraphs.chapter_id, chapters.act, chapters.scene, works.title","chapters, sqlite_sequence, characters, paragraphs, works"
menu,"How much space does page 1 of the menu ""Zentral Theater Terrace"" cover?",SELECT t2.full_height * t2.full_width FROM menu as t1 inner JOIN menuPage as t2 ON t1.id = t2.menu_id WHERE t1.name = 'Zentral Theater Terrace' AND t2.page_number = 1,"CREATE TABLE `menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

CREATE TABLE `menuPage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `menuPage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

","CREATE TABLE `Dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `Dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

CREATE TABLE `Menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `Menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

CREATE TABLE `MenuPage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `MenuPage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

CREATE TABLE `MenuItem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `MenuItem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

","menu, menuPage","menuPage.full_height, menu.id, menuPage.menu_id, menu.name, menuPage.page_number","Dish, Menu, MenuPage, MenuItem"
cars,Which country produced the car with the lowest price?,SELECT t3.country FROM price as t1 inner JOIN production as t2 ON t1.id = t2.id inner JOIN country as t3 ON t3.origin = t2.country ORDER BY t1.price asC LIMIT 1,"CREATE TABLE `price` (
  ID INTEGER,
  price REAL
);
Sample rows from `price`:
1, 25561.59078
2, 24221.42273
3, 27240.84373

CREATE TABLE `production` (
  ID INTEGER PRIMARY KEY REFERENCES price(ID) REFERENCES data(ID),
  model_year INTEGER PRIMARY KEY,
  country INTEGER REFERENCES country(origin)
);
Sample rows from `production`:
1, 1970, 1
1, 1971, 1
2, 1970, 1

CREATE TABLE `country` (
  origin INTEGER,
  country TEXT
);
Sample rows from `country`:
1, USA
2, Europe
3, Japan

","CREATE TABLE `country` (
  origin INTEGER,
  country TEXT
);
Sample rows from `country`:
1, USA
2, Europe
3, Japan

CREATE TABLE `price` (
  ID INTEGER,
  price REAL
);
Sample rows from `price`:
1, 25561.59078
2, 24221.42273
3, 27240.84373

CREATE TABLE `data` (
  ID INTEGER REFERENCES price(ID),
  mpg REAL,
  cylinders INTEGER,
  displacement REAL,
  horsepower INTEGER,
  weight INTEGER,
  acceleration REAL,
  model INTEGER,
  car_name TEXT
);
Sample rows from `data`:
1, 18.0, 8, 307.0, 130, 3504, 12.0, 70, chevrolet chevelle malibu
2, 15.0, 8, 350.0, 165, 3693, 11.5, 70, buick skylark 320
3, 18.0, 8, 318.0, 150, 3436, 11.0, 70, plymouth satellite

CREATE TABLE `production` (
  ID INTEGER PRIMARY KEY REFERENCES price(ID) REFERENCES data(ID),
  model_year INTEGER PRIMARY KEY,
  country INTEGER REFERENCES country(origin)
);
Sample rows from `production`:
1, 1970, 1
1, 1971, 1
2, 1970, 1

","price, production, country","country.country, price.id, production.id, country.origin, production.country, price.price","country, price, data, production"
image_and_language,How many self-relations are there between the object samples in image no.5?,SELECT SUM(case when img_id = 5 then 1 else 0 end) FROM img_rel WHERE obj1_sample_id = obj2_sample_id,"CREATE TABLE `img_rel` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `img_rel`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

","CREATE TABLE `ATT_CLASSES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `ATT_CLASSES`:
0, building s
1, indoors
2, cluttered

CREATE TABLE `OBJ_CLASSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLASSES`:
0, awning
1, goggles
2, dot

CREATE TABLE `IMG_OBJ` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `IMG_OBJ`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `IMG_OBJ_ATT` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_OBJ_ATT`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `PRED_CLASSES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `PRED_CLASSES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `IMG_REL` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_REL`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

",img_rel,"img_id, obj1_sample_id, obj2_sample_id","ATT_CLASSES, OBJ_CLASSES, IMG_OBJ, IMG_OBJ_ATT, PRED_CLASSES, IMG_REL"
food_inspection,What are the names of the establishments that met all of the required standards in 2013?,"SELECT DISTINCT t2.name FROM inspections as t1 inner JOIN businesses as t2 ON t1.business_id = t2.business_id WHERE strftime('%Y', t1.`date`) = '2013' AND t1.score = 100","CREATE TABLE `inspections` (
  business_id INTEGER REFERENCES businesses(business_id),
  score INTEGER,
  date DATE,
  type TEXT
);
Sample rows from `inspections`:
10, 92, 2014-01-14, Routine - Unscheduled
10, None, 2014-01-24, Reinspection/Followup
10, 94, 2014-07-29, Routine - Unscheduled

CREATE TABLE `businesses` (
  business_id INTEGER,
  name TEXT,
  address TEXT,
  city TEXT,
  postal_code TEXT,
  latitude REAL,
  longitude REAL,
  phone_number INTEGER,
  tax_code TEXT,
  business_certificate INTEGER,
  application_date DATE,
  owner_name TEXT,
  owner_address TEXT,
  owner_city TEXT,
  owner_state TEXT,
  owner_zip TEXT
);
Sample rows from `businesses`:
10, Tiramisu Kitchen, 033 Belden Pl, San Francisco, 94104, 37.7911, -122.404, None, H24, 779059, None, Tiramisu LLC, 33 Belden St, San Francisco, CA, 94104
24, OMNI S.F. Hotel - 2nd Floor Pantry, 500 California St, 2nd  Floor, San Francisco, 94104, 37.7929, -122.403, None, H24, 352312, None, OMNI San Francisco Hotel Corp, 500 California St, 2nd Floor, San Francisco, CA, 94104
31, Norman's Ice Cream and Freezes, 2801 Leavenworth St, San Francisco, 94133, 37.8072, -122.419, None, H24, 346882, None, Norman Antiforda, 2801 Leavenworth St, San Francisco, CA, 94133

","CREATE TABLE `businesses` (
  business_id INTEGER,
  name TEXT,
  address TEXT,
  city TEXT,
  postal_code TEXT,
  latitude REAL,
  longitude REAL,
  phone_number INTEGER,
  tax_code TEXT,
  business_certificate INTEGER,
  application_date DATE,
  owner_name TEXT,
  owner_address TEXT,
  owner_city TEXT,
  owner_state TEXT,
  owner_zip TEXT
);
Sample rows from `businesses`:
10, Tiramisu Kitchen, 033 Belden Pl, San Francisco, 94104, 37.7911, -122.404, None, H24, 779059, None, Tiramisu LLC, 33 Belden St, San Francisco, CA, 94104
24, OMNI S.F. Hotel - 2nd Floor Pantry, 500 California St, 2nd  Floor, San Francisco, 94104, 37.7929, -122.403, None, H24, 352312, None, OMNI San Francisco Hotel Corp, 500 California St, 2nd Floor, San Francisco, CA, 94104
31, Norman's Ice Cream and Freezes, 2801 Leavenworth St, San Francisco, 94133, 37.8072, -122.419, None, H24, 346882, None, Norman Antiforda, 2801 Leavenworth St, San Francisco, CA, 94133

CREATE TABLE `inspections` (
  business_id INTEGER REFERENCES businesses(business_id),
  score INTEGER,
  date DATE,
  type TEXT
);
Sample rows from `inspections`:
10, 92, 2014-01-14, Routine - Unscheduled
10, None, 2014-01-24, Reinspection/Followup
10, 94, 2014-07-29, Routine - Unscheduled

CREATE TABLE `violations` (
  business_id INTEGER REFERENCES businesses(business_id),
  date DATE,
  violation_type_id TEXT,
  risk_category TEXT,
  description TEXT
);
Sample rows from `violations`:
10, 2014-07-29, 103129, Moderate Risk, Insufficient hot water or running water
10, 2014-07-29, 103144, Low Risk, Unapproved or unmaintained equipment or utensils
10, 2014-01-14, 103119, Moderate Risk, Inadequate and inaccessible handwashing facilities

","inspections, businesses","businesses.name, inspections.business_id, businesses.business_id, inspections.date, inspections.score","businesses, inspections, violations"
menu,Provide the menu page ids of all the menu that includes mashed potatoes.,SELECT t2.menu_page_id FROM dish as t1 inner JOIN menuitem as t2 ON t1.id = t2.dish_id WHERE t1.name = 'Mashed potatoes',"CREATE TABLE `dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

CREATE TABLE `menuitem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `menuitem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

","CREATE TABLE `Dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `Dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

CREATE TABLE `Menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `Menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

CREATE TABLE `MenuPage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `MenuPage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

CREATE TABLE `MenuItem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `MenuItem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

","dish, menuitem","menuitem.menu_page_id, dish.id, menuitem.dish_id, dish.name","Dish, Menu, MenuPage, MenuItem"
computer_student,What is the sum of year 1 and year 2 students?,SELECT COUNT(*) FROM person WHERE yearsinprogram = 'Year_1' OR yearsinprogram = 'Year_2',"CREATE TABLE `person` (
  p_id INTEGER,
  professor INTEGER,
  student INTEGER,
  hasPosition TEXT,
  inPhase TEXT,
  yearsInProgram TEXT
);
Sample rows from `person`:
3, 0, 1, 0, 0, 0
4, 0, 1, 0, 0, 0
5, 1, 0, Faculty, 0, 0

","CREATE TABLE `course` (
  course_id INTEGER,
  courseLevel TEXT
);
Sample rows from `course`:
0, Level_500
1, Level_500
2, Level_500

CREATE TABLE `person` (
  p_id INTEGER,
  professor INTEGER,
  student INTEGER,
  hasPosition TEXT,
  inPhase TEXT,
  yearsInProgram TEXT
);
Sample rows from `person`:
3, 0, 1, 0, 0, 0
4, 0, 1, 0, 0, 0
5, 1, 0, Faculty, 0, 0

CREATE TABLE `advisedBy` (
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id),
  p_id_dummy INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `advisedBy`:
96, 5
118, 5
183, 5

CREATE TABLE `taughtBy` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `taughtBy`:
0, 40
1, 40
2, 180

",person,yearsinprogram,"course, person, advisedBy, taughtBy"
public_review_platform,"What is the percentage of businesses with ""Good for Kids"" attribute over the other attributes?",SELECT cast(SUM(case when attribute_name = 'Good for Kids' then 1 else 0 end) as real) * 100 / COUNT(t2.business_id) FROM attributes as t1 inner JOIN Business_attributes as t2 ON t1.attribute_id = t2.attribute_id WHERE t2.attribute_value = 'true',"CREATE TABLE `attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Business_attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_attributes`:
1, 2, none
1, 3, none
1, 13, none

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","attributes, Business_attributes","attribute_name, Business_attributes.business_id, attributes.attribute_id, Business_attributes.attribute_id, Business_attributes.attribute_value","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
sales_in_weather,How many items weren't sold in store 2 on 1/1/2012?,SELECT COUNT(item_nbr) FROM sales_in_weather WHERE store_nbr = 2 AND units = 0 AND `date` = '2012-01-01',"CREATE TABLE `sales_in_weather` (
  date DATE PRIMARY KEY,
  store_nbr INTEGER PRIMARY KEY,
  item_nbr INTEGER PRIMARY KEY,
  units INTEGER
);
Sample rows from `sales_in_weather`:
2012-01-01, 1, 1, 0
2012-01-01, 1, 2, 0
2012-01-01, 1, 3, 0

","CREATE TABLE `sales_in_weather` (
  date DATE PRIMARY KEY,
  store_nbr INTEGER PRIMARY KEY,
  item_nbr INTEGER PRIMARY KEY,
  units INTEGER
);
Sample rows from `sales_in_weather`:
2012-01-01, 1, 1, 0
2012-01-01, 1, 2, 0
2012-01-01, 1, 3, 0

CREATE TABLE `weather` (
  station_nbr INTEGER PRIMARY KEY,
  date DATE PRIMARY KEY,
  tmax INTEGER,
  tmin INTEGER,
  tavg INTEGER,
  depart INTEGER,
  dewpoint INTEGER,
  wetbulb INTEGER,
  heat INTEGER,
  cool INTEGER,
  sunrise TEXT,
  sunset TEXT,
  codesum TEXT,
  snowfall REAL,
  preciptotal REAL,
  stnpressure REAL,
  sealevel REAL,
  resultspeed REAL,
  resultdir INTEGER,
  avgspeed REAL
);
Sample rows from `weather`:
1, 2012-01-01, 52, 31, 42, None, 36, 40, 23, 0, None, None, RA FZFG BR, None, 0.05, 29.78, 29.92, 3.6, 20, 4.6
1, 2012-01-02, 50, 31, 41, None, 26, 35, 24, 0, None, None,  , None, 0.01, 29.44, 29.62, 9.8, 24, 10.3
1, 2012-01-03, 32, 11, 22, None, 4, 18, 43, 0, None, None,  , None, 0.0, 29.67, 29.87, 10.8, 31, 11.6

CREATE TABLE `relation` (
  store_nbr INTEGER REFERENCES sales_in_weather(store_nbr),
  station_nbr INTEGER REFERENCES weather(station_nbr)
);
Sample rows from `relation`:
1, 1
2, 14
3, 7

",sales_in_weather,"item_nbr, store_nbr, units, date","sales_in_weather, weather, relation"
cookbook,State the name of the optional ingredient of no.1397 recipe.,SELECT t1.name FROM ingredient as t1 inner JOIN quantity as t2 ON t1.ingredient_id = t2.ingredient_id WHERE t2.recipe_id = 1397 AND t2.optional = 'TRUE',"CREATE TABLE `ingredient` (
  ingredient_id INTEGER,
  category TEXT,
  name TEXT,
  plural TEXT
);
Sample rows from `ingredient`:
1, dairy, 1% lowfat cottage cheese, None
6, dairy, 1% lowfat milk, None
10, Mexican products, 10-inch flour tortilla, s

CREATE TABLE `quantity` (
  quantity_id INTEGER,
  recipe_id INTEGER REFERENCES Nutrition(recipe_id) REFERENCES Recipe(recipe_id),
  ingredient_id INTEGER REFERENCES Ingredient(ingredient_id),
  max_qty REAL,
  min_qty REAL,
  unit TEXT,
  preparation TEXT,
  optional TEXT
);
Sample rows from `quantity`:
1, 214, 1613, 2.0, 2.0, cup(s), None, FALSE
2, 214, 3334, 0.25, 0.25, cup(s), None, FALSE
3, 214, 2222, 0.5, 0.5, cup(s), melted, FALSE

","CREATE TABLE `Ingredient` (
  ingredient_id INTEGER,
  category TEXT,
  name TEXT,
  plural TEXT
);
Sample rows from `Ingredient`:
1, dairy, 1% lowfat cottage cheese, None
6, dairy, 1% lowfat milk, None
10, Mexican products, 10-inch flour tortilla, s

CREATE TABLE `Recipe` (
  recipe_id INTEGER,
  title TEXT,
  subtitle TEXT,
  servings INTEGER,
  yield_unit TEXT,
  prep_min INTEGER,
  cook_min INTEGER,
  stnd_min INTEGER,
  source TEXT,
  intro TEXT,
  directions TEXT
);
Sample rows from `Recipe`:
214, Raspberry Chiffon Pie, None, 10, 1 pie, 20, 8, 305, The California Tree Fruit Agreement, None, For crust, preheat oven to 375 degrees F.
In lightly greased 10-inch pie plate, combine graham cracker crumbs, melted butter and 1/4 cup sugar. Press evenly on bottom and up side of plate. Bake 5 minutes; cool.

For filling, in medium saucepan, combine juice or water and gelatin; let stand 5 minutes. Add 1/3 cup sugar and heat over medium heat, stirring to dissolve gelatin. In blender or food processor, puree 6 plums. Add puree and raspberries to gelatin mixture. Refrigerate until mixture begins to set about 1 hour. Stir yogurt into fruit mixture. In large bowl, beat egg whites until frothy. Gradually add cream of tartar and remaining 1/3 cup sugar and beat until stiff peaks form. Gently fold egg whites into fruit mixture so as not to reduce volume. Spoon into crust. Refrigerate 4 hours or overnight. Thinly slice remaining 2 plums and garnish top of pie.
215, Apricot Yogurt Parfaits, None, 4, None, 5, 2, 65, Produce for Better Health Foundation and 5 a Day, None, Drain canned apricots, pour 1/4 cup of the juice into saucepan or microwave-safe dish. Sprinkle gelatin over juice and let stand for 5 minutes to soften. Warm over low heat or microwave at medium (50% power) for 30 seconds or until gelatin has dissolved.
 
In food processor or blender, puree canned apricots; add lemon juice brandy, yogurt and gelatin mixture and process for 30 seconds or until combined.
 
Pour into parfait or stemmed glasses or champagne flutes. Cover and refrigerate until set, at least 1 hour or overnight.
 
Just before serving arrange fresh apricots on top. (If apricots are not available substitute kiwi slices or berries). Garnish each with a small spoonful of yogurt and sprinkling of brown sugar or mint.
216, Fresh Apricot Bavarian, None, 8, None, 5, 13, 0, The California Apricot Advisory Board, Serve in stemmed glasses and top with sliced apricots for elegant endings., Drop apricots into boiling water to cover. Return to boil and simmer for 5 minutes or until skins begin to split. Drain and rinse under cold water. Halve fruit and discard skins and pits. Puree apricots in electric blender. Combine water and gelatin in small saucepan; stir over low heat until dissolved. Mix sugar, apricot puree and yogurt with a wire whip until smooth; mix in dissolved gelatin. Sweeten to taste if desired. Chill mixture until thick. Spoon into stemmed glasses.

Note: One pound fresh apricots is 15 to 20. One and a half envelopes gelatin is 4 teaspoons.

CREATE TABLE `Nutrition` (
  recipe_id INTEGER REFERENCES Recipe(recipe_id),
  protein REAL,
  carbo REAL,
  alcohol REAL,
  total_fat REAL,
  sat_fat REAL,
  cholestrl REAL,
  sodium REAL,
  iron REAL,
  vitamin_c REAL,
  vitamin_a REAL,
  fiber REAL,
  pcnt_cal_carb REAL,
  pcnt_cal_fat REAL,
  pcnt_cal_prot REAL,
  calories REAL
);
Sample rows from `Nutrition`:
214, 5.47, 41.29, 0.0, 11.53, 2.21, 1.39, 260.78, 0.81, 8.89, 586.2, 0.87, 56.8, 35.68, 7.53, 290.79
215, 5.7, 23.75, 1.93, 1.08, 0.58, 3.48, 46.17, 0.57, 13.02, 2738.24, 0.62, 67.38, 6.89, 16.17, 141.01
216, 4.9, 26.88, 0.0, 1.1, 0.58, 3.46, 41.79, 0.37, 6.13, 1521.1, 0.34, 78.45, 7.24, 14.3, 137.06

CREATE TABLE `Quantity` (
  quantity_id INTEGER,
  recipe_id INTEGER REFERENCES Nutrition(recipe_id) REFERENCES Recipe(recipe_id),
  ingredient_id INTEGER REFERENCES Ingredient(ingredient_id),
  max_qty REAL,
  min_qty REAL,
  unit TEXT,
  preparation TEXT,
  optional TEXT
);
Sample rows from `Quantity`:
1, 214, 1613, 2.0, 2.0, cup(s), None, FALSE
2, 214, 3334, 0.25, 0.25, cup(s), None, FALSE
3, 214, 2222, 0.5, 0.5, cup(s), melted, FALSE

","ingredient, quantity","ingredient.name, ingredient.ingredient_id, quantity.ingredient_id, quantity.recipe_id, quantity.optional","Ingredient, Recipe, Nutrition, Quantity"
public_review_platform,List at least 10 users ID that has 4 as an average ratings of all reviews sent.,SELECT COUNT(user_id) FROM users WHERE user_average_stars = 4 LIMIT 10,"CREATE TABLE `users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

",users,"user_id, user_average_stars","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
movielens,"Among the movies from France, how many of them are drama?",SELECT COUNT(t1.movieid) FROM movies2directors as t1 inner JOIN movies as t2 ON t1.movieid = t2.movieid WHERE t2.country = 'France' AND t1.genre = 'drama',"CREATE TABLE `movies2directors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  directorid INTEGER PRIMARY KEY REFERENCES directors(None),
  genre TEXT
);
Sample rows from `movies2directors`:
1672111, 54934, Action
1672946, 188940, Action
1679461, 179783, Action

CREATE TABLE `movies` (
  movieid INTEGER,
  year INTEGER,
  isEnglish TEXT,
  country TEXT,
  runningtime INTEGER
);
Sample rows from `movies`:
1672052, 3, T, other, 2
1672111, 4, T, other, 2
1672580, 4, T, USA, 3

","CREATE TABLE `users` (
  userid INTEGER,
  age TEXT,
  u_gender TEXT,
  occupation TEXT
);
Sample rows from `users`:
1, 1, F, 2
2, 56, M, 3
3, 25, M, 2

CREATE TABLE `directors` (
  directorid INTEGER,
  d_quality INTEGER PRIMARY KEY,
  avg_revenue INTEGER PRIMARY KEY
);
Sample rows from `directors`:
67, 4, 1
92, 2, 3
284, 4, 0

CREATE TABLE `actors` (
  actorid INTEGER,
  a_gender TEXT,
  a_quality INTEGER
);
Sample rows from `actors`:
4, M, 4
16, M, 0
28, M, 4

CREATE TABLE `movies` (
  movieid INTEGER,
  year INTEGER,
  isEnglish TEXT,
  country TEXT,
  runningtime INTEGER
);
Sample rows from `movies`:
1672052, 3, T, other, 2
1672111, 4, T, other, 2
1672580, 4, T, USA, 3

CREATE TABLE `movies2actors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  actorid INTEGER PRIMARY KEY REFERENCES actors(None),
  cast_num INTEGER
);
Sample rows from `movies2actors`:
1672580, 981535, 0
1672946, 1094968, 0
1673647, 149985, 0

CREATE TABLE `movies2directors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  directorid INTEGER PRIMARY KEY REFERENCES directors(None),
  genre TEXT
);
Sample rows from `movies2directors`:
1672111, 54934, Action
1672946, 188940, Action
1679461, 179783, Action

CREATE TABLE `u2base` (
  userid INTEGER PRIMARY KEY REFERENCES users(None),
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  rating TEXT
);
Sample rows from `u2base`:
2, 1964242, 1
2, 2219779, 1
3, 1856939, 1

","movies2directors, movies","movies2directors.movieid, movies.movieid, movies.country, movies2directors.genre","users, directors, actors, movies, movies2actors, movies2directors, u2base"
food_inspection_2,How many inspections were done in January 2011?,"SELECT COUNT(inspection_id) FROM inspection WHERE strftime('%Y-%m', inspection_date) = '2011-01'","CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

",inspection,"inspection_id, inspection_date","employee, establishment, inspection, inspection_point, violation"
public_review_platform,"Mention the user average star, elite year and the compliment type of user ID 6027 whereby number of compliments reach uber.","SELECT t2.user_average_stars, t1.year_id, t4.compliment_type, t3.number_of_compliments FROM elite as t1 inner JOIN users as t2 ON t1.user_id = t2.user_id inner JOIN users_compliments as t3 ON t2.user_id = t3.user_id inner JOIN compliments as t4 ON t3.compliment_id = t4.compliment_id inner JOIN years as t5 ON t1.year_id = t5.year_id WHERE t3.number_of_compliments = 'Uber' AND t3.user_id = 6027","CREATE TABLE `elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

CREATE TABLE `users_compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `users_compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `years`:
2005, 2005
2006, 2006
2007, 2007

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","elite, users, users_compliments, compliments, years","users.user_average_stars, elite.year_id, compliments.compliment_type, users_compliments.number_of_compliments, elite.user_id, users.user_id, users_compliments.user_id, users_compliments.compliment_id, compliments.compliment_id, years.year_id","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
music_platform_2,Indicate the id of the reviewer whose itunes id is 1516665400.,SELECT t2.author_id FROM podcasts as t1 inner JOIN reviews as t2 ON t2.podcast_id = t1.podcast_id WHERE t1.itunes_id = 1516665400,"CREATE TABLE `podcasts` (
  podcast_id TEXT PRIMARY KEY,
  itunes_id INTEGER,
  slug TEXT,
  itunes_url TEXT,
  title TEXT
);
Sample rows from `podcasts`:
a00018b54eb342567c94dacfb2a3e504, 1313466221, scaling-global, https://podcasts.apple.com/us/podcast/scaling-global/id1313466221, Scaling Global
a00043d34e734b09246d17dc5d56f63c, 158973461, cornerstone-baptist-church-of-orlando, https://podcasts.apple.com/us/podcast/cornerstone-baptist-church-of-orlando/id158973461, Cornerstone Baptist Church of Orlando
a0004b1ef445af9dc84dad1e7821b1e3, 139076942, mystery-dancing-in-the-dark, https://podcasts.apple.com/us/podcast/mystery-dancing-in-the-dark/id139076942, Mystery: Dancing in the Dark

CREATE TABLE `reviews` (
  podcast_id TEXT REFERENCES podcasts(None),
  title TEXT,
  content TEXT,
  rating INTEGER,
  author_id TEXT,
  created_at TEXT
);
Sample rows from `reviews`:
c61aa81c9b929a66f0c1db6cbe5d8548, really interesting!, Thanks for providing these insights.  Really enjoy the variety and depth -- please keep them coming!, 5, F7E5A318989779D, 2018-04-24T12:05:16-07:00
c61aa81c9b929a66f0c1db6cbe5d8548, Must listen for anyone interested in the arts!!!, Super excited to see this podcast grow. So many fun topics to talk about...Shari is really engaging. Definitely subscribing and would recommend to anyone interested in the arts!!, 5, F6BF5472689BD12, 2018-05-09T18:14:32-07:00
ad4f2bf69c72b8db75978423c25f379e, nauseatingly left, I'm a liberal myself, but its pretty obvious and annoying that they're trying to push their beliefs on the listeners. Get a more politically diverse production staff, we like to see issues from multiple point of views not just yours., 1, 1AB95B8E6E1309E, 2019-06-11T14:53:39-07:00

","CREATE TABLE `runs` (
  run_at TEXT,
  max_rowid INTEGER,
  reviews_added INTEGER
);
Sample rows from `runs`:
2021-05-10 02:53:00, 3266481, 1215223
2021-06-06 21:34:36, 3300773, 13139
2021-07-02 18:04:55, 3329699, 11561

CREATE TABLE `podcasts` (
  podcast_id TEXT PRIMARY KEY,
  itunes_id INTEGER,
  slug TEXT,
  itunes_url TEXT,
  title TEXT
);
Sample rows from `podcasts`:
a00018b54eb342567c94dacfb2a3e504, 1313466221, scaling-global, https://podcasts.apple.com/us/podcast/scaling-global/id1313466221, Scaling Global
a00043d34e734b09246d17dc5d56f63c, 158973461, cornerstone-baptist-church-of-orlando, https://podcasts.apple.com/us/podcast/cornerstone-baptist-church-of-orlando/id158973461, Cornerstone Baptist Church of Orlando
a0004b1ef445af9dc84dad1e7821b1e3, 139076942, mystery-dancing-in-the-dark, https://podcasts.apple.com/us/podcast/mystery-dancing-in-the-dark/id139076942, Mystery: Dancing in the Dark

CREATE TABLE `reviews` (
  podcast_id TEXT REFERENCES podcasts(None),
  title TEXT,
  content TEXT,
  rating INTEGER,
  author_id TEXT,
  created_at TEXT
);
Sample rows from `reviews`:
c61aa81c9b929a66f0c1db6cbe5d8548, really interesting!, Thanks for providing these insights.  Really enjoy the variety and depth -- please keep them coming!, 5, F7E5A318989779D, 2018-04-24T12:05:16-07:00
c61aa81c9b929a66f0c1db6cbe5d8548, Must listen for anyone interested in the arts!!!, Super excited to see this podcast grow. So many fun topics to talk about...Shari is really engaging. Definitely subscribing and would recommend to anyone interested in the arts!!, 5, F6BF5472689BD12, 2018-05-09T18:14:32-07:00
ad4f2bf69c72b8db75978423c25f379e, nauseatingly left, I'm a liberal myself, but its pretty obvious and annoying that they're trying to push their beliefs on the listeners. Get a more politically diverse production staff, we like to see issues from multiple point of views not just yours., 1, 1AB95B8E6E1309E, 2019-06-11T14:53:39-07:00

CREATE TABLE `categories` (
  podcast_id TEXT PRIMARY KEY REFERENCES podcasts(None),
  category TEXT PRIMARY KEY
);
Sample rows from `categories`:
c61aa81c9b929a66f0c1db6cbe5d8548, arts
c61aa81c9b929a66f0c1db6cbe5d8548, arts-performing-arts
c61aa81c9b929a66f0c1db6cbe5d8548, music

","podcasts, reviews","reviews.author_id, reviews.podcast_id, podcasts.podcast_id, podcasts.itunes_id","runs, podcasts, reviews, categories"
simpson_episodes,"List the name of all awards along with the award category, nominated by Marc Wilmore.","SELECT award_id, award_category FROM award WHERE person = 'Marc Wilmore';","CREATE TABLE `award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

",award,"award_id, award_category, person","Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
language_corpus,Calculate the average percentage of word appearance in the page that have revision page id smaller than 106680.,SELECT cast(SUM(t1.words) as real) * 100 / SUM(t2.occurrences) FROM pages as t1 inner JOIN pages_words as t2 ON t1.pid = t2.pid WHERE t1.revision < 106680,"CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

","CREATE TABLE `langs` (
  lid INTEGER,
  lang TEXT PRIMARY KEY,
  locale TEXT PRIMARY KEY,
  pages INTEGER,
  words INTEGER
);
Sample rows from `langs`:
1, ca, ca_ES, 1129144, 2764996

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
langs, 1
pages, 1129144
words, 2764996

CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `langs_words` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `langs_words`:
1, 1, 242
1, 2, 16841
1, 3, 48700

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

","pages, pages_words","pages.words, pages_words.occurrences, pages.pid, pages_words.pid, pages.revision","langs, sqlite_sequence, pages, words, langs_words, pages_words, biwords"
chicago_crime,Give the case number and coordinates of the places where child abduction is reported.,"SELECT t1.case_number, t1.latitude, t1.longitude FROM crime as t1 inner JOIN iucr as t2 ON t2.iucr_no = t1.iucr_no WHERE t2.secondary_description = 'CHILD ABDUCTION'","CREATE TABLE `crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

CREATE TABLE `iucr` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `iucr`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

","CREATE TABLE `Community_Area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `Community_Area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `District` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `District`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `FBI_Code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `FBI_Code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `IUCR` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `IUCR`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `Neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `Neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `Ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `Ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `Crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `Crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","crime, iucr","crime.case_number, crime.latitude, crime.longitude, iucr.iucr_no, crime.iucr_no, iucr.secondary_description","Community_Area, District, FBI_Code, IUCR, Neighborhood, Ward, Crime"
video_games,List the games available on Wii.,SELECT t4.game_name FROM platform as t1 inner JOIN game_platform as t2 ON t1.id = t2.platform_id inner JOIN game_publisher as t3 ON t2.game_publisher_id = t3.id inner JOIN game as t4 ON t3.game_id = t4.id WHERE t1.platform_name = 'Wii',"CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

","CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

","platform, game_platform, game_publisher, game","game.game_name, platform.id, game_platform.platform_id, game_platform.game_publisher_id, game_publisher.id, game_publisher.game_id, game.id, platform.platform_name","genre, game, platform, publisher, game_publisher, game_platform, region, region_sales"
retail_world,How many product names does the supplier Exotic Liquids have?,SELECT COUNT(t1.productname) FROM products as t1 inner JOIN suppliers as t2 ON t1.supplierid = t2.supplierid WHERE t2.companyname = 'Exotic Liquids',"CREATE TABLE `products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

","products, suppliers","products.productname, products.supplierid, suppliers.supplierid, suppliers.companyname","sqlite_sequence, Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails"
airline,Provide the air carrier description of the flight with the highest actual elapsed time.,SELECT t1.description FROM `air carriers` as t1 inner JOIN airlines as t2 ON t1.code = t2.op_carrier_airline_id ORDER BY t2.actual_elapsed_time DESC LIMIT 1,"CREATE TABLE `air carriers` (
  Code INTEGER,
  Description TEXT
);
Sample rows from `air carriers`:
19031, Mackey International Inc.: MAC
19032, Munz Northern Airlines Inc.: XY
19033, Cochise Airlines Inc.: COC

CREATE TABLE `airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

","CREATE TABLE `Air Carriers` (
  Code INTEGER,
  Description TEXT
);
Sample rows from `Air Carriers`:
19031, Mackey International Inc.: MAC
19032, Munz Northern Airlines Inc.: XY
19033, Cochise Airlines Inc.: COC

CREATE TABLE `Airports` (
  Code TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `Airports`:
01A, Afognak Lake, AK: Afognak Lake Airport
03A, Granite Mountain, AK: Bear Creek Mining Strip
04A, Lik, AK: Lik Mining Camp

CREATE TABLE `Airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `Airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

","air carriers, airlines","air carriers.description, air carriers.code, airlines.op_carrier_airline_id, airlines.actual_elapsed_time","Air Carriers, Airports, Airlines"
simpson_episodes,List all of the information about the music department's casts and crews.,"SELECT DISTINCT person, name, birthdate, birth_name, birth_place , birth_region, birth_country, height_meters, nickname FROM person as t1 inner JOIN credit as t2 ON t1.name = t2.person WHERE t2.category = 'Music Department';","CREATE TABLE `person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","person, credit","person, name, birthdate, birth_name, birth_place, birth_region, birth_country, height_meters, nickname, person.name, credit.person, credit.category","Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
chicago_crime,At which district did the multiple homicide case number JB120039 occurred?,"SELECT t1.district_no, t1.district_name FROM district as t1 inner JOIN crime as t2 ON t1.district_no = t2.district_no WHERE t2.case_number = 'JB120039' GROUP BY t1.district_no, t1.district_name","CREATE TABLE `district` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `district`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","CREATE TABLE `Community_Area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `Community_Area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `District` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `District`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `FBI_Code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `FBI_Code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `IUCR` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `IUCR`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `Neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `Neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `Ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `Ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `Crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `Crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","district, crime","district.district_no, district.district_name, crime.district_no, crime.case_number","Community_Area, District, FBI_Code, IUCR, Neighborhood, Ward, Crime"
cars,Which year did Europe produce the most cars?,SELECT t1.model_year FROM production as t1 inner JOIN country as t2 ON t1.country = t2.origin WHERE t2.country = 'Europe' GROUP BY t1.model_year ORDER BY COUNT(t1.model_year) DESC LIMIT 1,"CREATE TABLE `production` (
  ID INTEGER PRIMARY KEY REFERENCES price(ID) REFERENCES data(ID),
  model_year INTEGER PRIMARY KEY,
  country INTEGER REFERENCES country(origin)
);
Sample rows from `production`:
1, 1970, 1
1, 1971, 1
2, 1970, 1

CREATE TABLE `country` (
  origin INTEGER,
  country TEXT
);
Sample rows from `country`:
1, USA
2, Europe
3, Japan

","CREATE TABLE `country` (
  origin INTEGER,
  country TEXT
);
Sample rows from `country`:
1, USA
2, Europe
3, Japan

CREATE TABLE `price` (
  ID INTEGER,
  price REAL
);
Sample rows from `price`:
1, 25561.59078
2, 24221.42273
3, 27240.84373

CREATE TABLE `data` (
  ID INTEGER REFERENCES price(ID),
  mpg REAL,
  cylinders INTEGER,
  displacement REAL,
  horsepower INTEGER,
  weight INTEGER,
  acceleration REAL,
  model INTEGER,
  car_name TEXT
);
Sample rows from `data`:
1, 18.0, 8, 307.0, 130, 3504, 12.0, 70, chevrolet chevelle malibu
2, 15.0, 8, 350.0, 165, 3693, 11.5, 70, buick skylark 320
3, 18.0, 8, 318.0, 150, 3436, 11.0, 70, plymouth satellite

CREATE TABLE `production` (
  ID INTEGER PRIMARY KEY REFERENCES price(ID) REFERENCES data(ID),
  model_year INTEGER PRIMARY KEY,
  country INTEGER REFERENCES country(origin)
);
Sample rows from `production`:
1, 1970, 1
1, 1971, 1
2, 1970, 1

","production, country","production.model_year, production.country, country.origin, country.country","country, price, data, production"
books,Name the publisher who published the most books.,SELECT t2.publisher_name FROM book as t1 inner JOIN publisher as t2 ON t1.publisher_id = t2.publisher_id GROUP BY t2.publisher_name ORDER BY COUNT(t2.publisher_id) DESC LIMIT 1,"CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","book, publisher","publisher.publisher_name, book.publisher_id, publisher.publisher_id","address_status, author, book_language, country, address, customer, customer_address, order_status, publisher, book, book_author, shipping_method, cust_order, sqlite_sequence, order_history, order_line"
simpson_episodes,"Provide the episode number, title and rating of which were aired in October, 2008.","SELECT episode, title, rating FROM episode WHERE substr(air_date, 1, 7) LIKE '2008-10%';","CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

",episode,"episode, title, rating, air_date","Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
music_tracker,How many christmas albums were released in 2004?,SELECT COUNT(t1.id) FROM torrents as t1 inner JOIN tags as t2 ON t1.id = t2.id WHERE t2.tag = 'christmas' AND t1.groupyear = 2004 AND t1.releasetype LIKE 'album',"CREATE TABLE `torrents` (
  groupName TEXT,
  totalSnatched INTEGER,
  artist TEXT,
  groupYear INTEGER,
  releaseType TEXT,
  groupId INTEGER,
  id INTEGER
);
Sample rows from `torrents`:
superappin&#39;, 239, grandmaster flash & the furious five, 1979, single, 720949, 0
spiderap / a corona jam, 156, ron hunt & ronnie g & the sm crew, 1979, single, 728752, 1
rapper&#39;s delight, 480, sugarhill gang, 1979, single, 18513, 2

CREATE TABLE `tags` (
  index INTEGER PRIMARY KEY,
  id INTEGER REFERENCES torrents(None),
  tag TEXT
);
Sample rows from `tags`:
0, 0, 1970s
1, 0, funk
2, 0, disco

","CREATE TABLE `torrents` (
  groupName TEXT,
  totalSnatched INTEGER,
  artist TEXT,
  groupYear INTEGER,
  releaseType TEXT,
  groupId INTEGER,
  id INTEGER
);
Sample rows from `torrents`:
superappin&#39;, 239, grandmaster flash & the furious five, 1979, single, 720949, 0
spiderap / a corona jam, 156, ron hunt & ronnie g & the sm crew, 1979, single, 728752, 1
rapper&#39;s delight, 480, sugarhill gang, 1979, single, 18513, 2

CREATE TABLE `tags` (
  index INTEGER PRIMARY KEY,
  id INTEGER REFERENCES torrents(None),
  tag TEXT
);
Sample rows from `tags`:
0, 0, 1970s
1, 0, funk
2, 0, disco

","torrents, tags","torrents.id, tags.id, tags.tag, torrents.groupyear, torrents.releasetype","torrents, tags"
retail_world,How many suppliers are from UK?,SELECT COUNT(supplierid) FROM suppliers WHERE country = 'UK',"CREATE TABLE `suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

",suppliers,"supplierid, country","sqlite_sequence, Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails"
menu,"Among the menu pages on which the dish ""Chicken gumbo"" had appeared, what is the menu ID of the one with the biggest width?",SELECT t1.id FROM menupage as t1 inner JOIN menuitem as t2 ON t1.id = t2.menu_page_id inner JOIN dish as t3 ON t2.dish_id = t3.id WHERE t3.name = 'Chicken gumbo' ORDER BY t1.full_width DESC LIMIT 1,"CREATE TABLE `menupage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `menupage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

CREATE TABLE `menuitem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `menuitem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

CREATE TABLE `dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

","CREATE TABLE `Dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `Dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

CREATE TABLE `Menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `Menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

CREATE TABLE `MenuPage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `MenuPage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

CREATE TABLE `MenuItem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `MenuItem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

","menupage, menuitem, dish","menupage.id, menuitem.menu_page_id, menuitem.dish_id, dish.id, dish.name, menupage.full_width","Dish, Menu, MenuPage, MenuItem"
olympics,Give the name of the tallest athlete from Sweden.,SELECT t3.full_name FROM noc_region as t1 inner JOIN person_region as t2 ON t1.id = t2.region_id inner JOIN person as t3 ON t2.person_id = t3.id WHERE t1.region_name = 'Sweden' ORDER BY t3.height DESC LIMIT 1,"CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

","CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `medal` (
  id INTEGER,
  medal_name TEXT
);
Sample rows from `medal`:
1, Gold
2, Silver
3, Bronze

CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `sport` (
  id INTEGER,
  sport_name TEXT
);
Sample rows from `sport`:
1, Aeronautics
2, Alpine Skiing
3, Alpinism

CREATE TABLE `event` (
  id INTEGER,
  sport_id INTEGER REFERENCES sport(id),
  event_name TEXT
);
Sample rows from `event`:
1, 9, Basketball Men's Basketball
2, 33, Judo Men's Extra-Lightweight
3, 25, Football Men's Football

CREATE TABLE `competitor_event` (
  event_id INTEGER REFERENCES event(id),
  competitor_id INTEGER REFERENCES games_competitor(id),
  medal_id INTEGER REFERENCES medal(id)
);
Sample rows from `competitor_event`:
1, 1, 4
2, 2, 4
3, 3, 4

","noc_region, person_region, person","person.full_name, noc_region.id, person_region.region_id, person_region.person_id, person.id, noc_region.region_name, person.height","city, games, games_city, medal, noc_region, person, games_competitor, person_region, sport, event, competitor_event"
student_loan,What is the average absence period of a disabled student?,SELECT AVG(t1.month) FROM longest_absense_from_school as t1 inner JOIN disabled as t2 ON t1.name = t2.name,"CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

","longest_absense_from_school, disabled","longest_absense_from_school.month, longest_absense_from_school.name, disabled.name","bool, person, disabled, enlist, filed_for_bankrupcy, longest_absense_from_school, male, no_payment_due, unemployed, enrolled"
shakespeare,"For how many times has the scene ""OLIVIA’S house."" appeared in Twelfth Night?",SELECT COUNT(t2.id) FROM works as t1 inner JOIN chapters as t2 ON t1.id = t2.work_id WHERE t2.description = 'OLIVIA’S house.' AND t1.title = 'Twelfth Night',"CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

","CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
chapters, 19648
characters, 1266
paragraphs, 666327

CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

","works, chapters","chapters.id, works.id, chapters.work_id, chapters.description, works.title","chapters, sqlite_sequence, characters, paragraphs, works"
student_loan,List at least 5 students who have payment due and are enlisted in Peace Corps organization?,SELECT t1.name FROM no_payment_due as t1 inner JOIN enlist as t2 ON t2.name = t1.name WHERE t2.organ = 'peace_corps' AND t1.bool = 'pos' LIMIT 5,"CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

","no_payment_due, enlist","no_payment_due.name, enlist.name, enlist.organ, no_payment_due.bool","bool, person, disabled, enlist, filed_for_bankrupcy, longest_absense_from_school, male, no_payment_due, unemployed, enrolled"
law_episode,Which role did Joseph Blair play in the show?,SELECT t1.role FROM credit as t1 inner JOIN person as t2 ON t2.person_id = t1.person_id WHERE t2.name = 'Joseph Blair',"CREATE TABLE `credit` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  person_id TEXT PRIMARY KEY REFERENCES Person(person_id),
  category TEXT,
  role TEXT,
  credited TEXT
);
Sample rows from `credit`:
tt0629204, nm0226352, Additional Crew, technical advisor, true
tt0629204, nm0506974, Additional Crew, production accountant, true
tt0629204, nm4103116, Additional Crew, production accountant, true

CREATE TABLE `person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
tt0629239, nun
tt0629239, priest
tt0629420, police officer

CREATE TABLE `Person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  series TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  person_id TEXT REFERENCES Person(person_id),
  role TEXT,
  result TEXT
);
Sample rows from `Award`:
258, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0937725, None, Winner
259, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0792309, None, Winner
260, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0049569, None, Winner

CREATE TABLE `Credit` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  person_id TEXT PRIMARY KEY REFERENCES Person(person_id),
  category TEXT,
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
tt0629204, nm0226352, Additional Crew, technical advisor, true
tt0629204, nm0506974, Additional Crew, production accountant, true
tt0629204, nm4103116, Additional Crew, production accountant, true

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
tt0629204, 10, 36, 17.7
tt0629204, 9, 39, 19.2
tt0629204, 8, 64, 31.5

","credit, person","credit.role, person.person_id, credit.person_id, person.name","Episode, Keyword, Person, Award, Credit, Vote"
public_review_platform,List all the users with average star less than 3 stars in 2012,SELECT user_id FROM users WHERE user_yelping_since_year = 2012 AND user_average_stars < 3,"CREATE TABLE `users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

",users,"user_id, user_yelping_since_year, user_average_stars","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
retail_world,How many days was the fastest shipping of Berglunds snabbkp's order?,"SELECT datediff(t2.shippeddate, t2.orderdate) FROM customers as t1 inner JOIN orders as t2 ON t1.customerid = t2.customerid WHERE t1.companyname = 'Berglunds snabbkp' ORDER BY datediff(t2.shippeddate, t2.orderdate) LIMIT 1","CREATE TABLE `customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

","customers, orders","orders.shippeddate, orders.orderdate, customers.customerid, orders.customerid, customers.companyname","sqlite_sequence, Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails"
shakespeare,How many scenes are there in Act 1 in Twelfth Night?,SELECT COUNT(t1.id) FROM works as t1 inner JOIN chapters as t2 ON t1.id = t2.work_id WHERE t2.act = 1 AND t1.title = 'Twelfth Night',"CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

","CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
chapters, 19648
characters, 1266
paragraphs, 666327

CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

","works, chapters","works.id, chapters.work_id, chapters.act, works.title","chapters, sqlite_sequence, characters, paragraphs, works"
university,"Among the universities in Australia, how many of them have more than 15000 students in 2011?",SELECT COUNT(*) FROM university as t1 inner JOIN university_year as t2 ON t1.id = t2.university_id inner JOIN country as t3 ON t3.id = t1.country_id WHERE t3.country_name = 'Australia' AND t2.year = 2011 AND t2.num_students > 15000,"CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

","CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

CREATE TABLE `ranking_system` (
  id INTEGER,
  system_name TEXT
);
Sample rows from `ranking_system`:
1, Times Higher Education World University Ranking
2, Shanghai Ranking
3, Center for World University Rankings

CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

","university, university_year, country","university.id, university_year.university_id, country.id, university.country_id, country.country_name, university_year.year, university_year.num_students","country, ranking_system, ranking_criteria, university, university_ranking_year, university_year"
restaurant,List all the streets with more than 10 restaurants in Alameda county.,SELECT t2.street_name FROM geographic as t1 inner JOIN location as t2 ON t1.city = t2.city WHERE t1.county = 'alameda county' GROUP BY t2.street_name HAVING COUNT(t2.id_restaurant) > 10,"CREATE TABLE `geographic` (
  city TEXT PRIMARY KEY,
  county TEXT,
  region TEXT
);
Sample rows from `geographic`:
alameda, alameda county, bay area
alamo, contra costa county, bay area
albany, alameda county, bay area

CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

","CREATE TABLE `geographic` (
  city TEXT PRIMARY KEY,
  county TEXT,
  region TEXT
);
Sample rows from `geographic`:
alameda, alameda county, bay area
alamo, contra costa county, bay area
albany, alameda county, bay area

CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

","geographic, location","location.street_name, geographic.city, location.city, geographic.county, location.id_restaurant","geographic, generalinfo, location"
authors,"Under the conference name of MICRO, calculate how many more paper is needed to published in 1971 to 1980 in average by yearly to get equivalent to the number of paper from 1991 to 2000. Write down the title and author name of the paper that were actually published during 1971 to 1980 with the conference name with MICRO.","SELECT t2.title, t3.name, t1.fullname FROM conference as t1 inner JOIN paper as t2 ON t1.id = t2.conferenceId inner JOIN paperAuthor as t3 ON t1.id = t3.paperId WHERE t1.shortname = 'MICRO' AND t2.year BETWEEN '1971' AND '1980'","CREATE TABLE `conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

CREATE TABLE `paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `paperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `paperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

","CREATE TABLE `Author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `Author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

CREATE TABLE `Conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

CREATE TABLE `Journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `Paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `Paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `PaperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `PaperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

","conference, paper, paperAuthor","paper.title, paperAuthor.name, conference.fullname, conference.id, paper.conferenceId, paperAuthor.paperId, conference.shortname, paper.year","Author, Conference, Journal, Paper, PaperAuthor"
shipping,Where was the destination city of shipment no.1701?,SELECT t2.city_name FROM shipment as t1 inner JOIN city as t2 ON t1.city_id = t2.city_id WHERE t1.ship_id = '1701',"CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

CREATE TABLE `city` (
  city_id INTEGER,
  city_name TEXT,
  state TEXT,
  population INTEGER,
  area REAL
);
Sample rows from `city`:
100, Union City, New Jersey, 67088, 1.3
101, Huntington Park, California, 61348, 3.0
102, Passaic, New Jersey, 67861, 3.1

","CREATE TABLE `city` (
  city_id INTEGER,
  city_name TEXT,
  state TEXT,
  population INTEGER,
  area REAL
);
Sample rows from `city`:
100, Union City, New Jersey, 67088, 1.3
101, Huntington Park, California, 61348, 3.0
102, Passaic, New Jersey, 67861, 3.1

CREATE TABLE `customer` (
  cust_id INTEGER,
  cust_name TEXT,
  annual_revenue INTEGER,
  cust_type TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip REAL,
  phone TEXT
);
Sample rows from `customer`:
193, Advanced Fabricators, 39588651, manufacturer, 5141 Summit Boulevard, West Palm Beach, FL, 33415.0, (561) 683-3535
304, Pard's Trailer Sales, 17158109, wholesaler, 5910 South 300 West, Salt Lake City, UT, 84107.0, (801) 262-4864
314, Saar Enterprises, Inc., 47403613, retailer, 11687 192nd Street, Council Bluffs, IA, 51503.0, (712) 366-4929

CREATE TABLE `driver` (
  driver_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip_code INTEGER,
  phone TEXT
);
Sample rows from `driver`:
20, Sue, Newell, 268 Richmond Ave, Memphis, TN, 38106, (901) 774-6569
21, Andrea, Simons, 3574 Oak Limb Cv, Memphis, TN, 38135, (901) 384-0984
22, Roger, McHaney, 1839 S Orleans St, Memphis, TN, 38106, (901) 948-1043

CREATE TABLE `truck` (
  truck_id INTEGER,
  make TEXT,
  model_year INTEGER
);
Sample rows from `truck`:
1, Peterbilt, 2005
2, Mack, 2006
3, Peterbilt, 2007

CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

","shipment, city","city.city_name, shipment.city_id, city.city_id, shipment.ship_id","city, customer, driver, truck, shipment"
app_store,What is the average sentiment polarity score of the Cooking Fever app? Indicate the age group that the app is targeted at.,"SELECT AVG(t2.sentiment_polarity), t1.""Content Rating"" FROM playstore as t1 inner JOIN user_reviews as t2 ON t1.app = t2.app WHERE t1.app = 'Cooking Fever'","CREATE TABLE `playstore` (
  App TEXT,
  Category TEXT,
  Rating REAL,
  Reviews INTEGER,
  Size TEXT,
  Installs TEXT,
  Type TEXT,
  Price TEXT,
  Content Rating TEXT,
  Genres TEXT
);
Sample rows from `playstore`:
Photo Editor & Candy Camera & Grid & ScrapBook, ART_AND_DESIGN, 4.1, 159, 19M, 10,000+, Free, 0, Everyone, Art & Design
Coloring book moana, ART_AND_DESIGN, 3.9, 967, 14M, 500,000+, Free, 0, Everyone, Art & Design;Pretend Play
U Launcher Lite – FREE Live Cool Themes, Hide Apps, ART_AND_DESIGN, 4.7, 87510, 8.7M, 5,000,000+, Free, 0, Everyone, Art & Design

CREATE TABLE `user_reviews` (
  App TEXT REFERENCES playstore(App),
  Translated_Review TEXT,
  Sentiment TEXT,
  Sentiment_Polarity TEXT,
  Sentiment_Subjectivity TEXT
);
Sample rows from `user_reviews`:
10 Best Foods for You, I like eat delicious food. That's I'm cooking food myself, case ""10 Best Foods"" helps lot, also ""Best Before (Shelf Life)"", Positive, 1.0, 0.5333333333333333
10 Best Foods for You, This help eating healthy exercise regular basis, Positive, 0.25, 0.28846153846153844
10 Best Foods for You, nan, nan, nan, nan

","CREATE TABLE `playstore` (
  App TEXT,
  Category TEXT,
  Rating REAL,
  Reviews INTEGER,
  Size TEXT,
  Installs TEXT,
  Type TEXT,
  Price TEXT,
  Content Rating TEXT,
  Genres TEXT
);
Sample rows from `playstore`:
Photo Editor & Candy Camera & Grid & ScrapBook, ART_AND_DESIGN, 4.1, 159, 19M, 10,000+, Free, 0, Everyone, Art & Design
Coloring book moana, ART_AND_DESIGN, 3.9, 967, 14M, 500,000+, Free, 0, Everyone, Art & Design;Pretend Play
U Launcher Lite – FREE Live Cool Themes, Hide Apps, ART_AND_DESIGN, 4.7, 87510, 8.7M, 5,000,000+, Free, 0, Everyone, Art & Design

CREATE TABLE `user_reviews` (
  App TEXT REFERENCES playstore(App),
  Translated_Review TEXT,
  Sentiment TEXT,
  Sentiment_Polarity TEXT,
  Sentiment_Subjectivity TEXT
);
Sample rows from `user_reviews`:
10 Best Foods for You, I like eat delicious food. That's I'm cooking food myself, case ""10 Best Foods"" helps lot, also ""Best Before (Shelf Life)"", Positive, 1.0, 0.5333333333333333
10 Best Foods for You, This help eating healthy exercise regular basis, Positive, 0.25, 0.28846153846153844
10 Best Foods for You, nan, nan, nan, nan

","playstore, user_reviews","user_reviews.sentiment_polarity, playstore.Content Rating, playstore.app, user_reviews.app","playstore, user_reviews"
food_inspection,Tell the Id number of the business with the most number of violations.,SELECT business_id FROM violations GROUP BY business_id ORDER BY COUNT(business_id) DESC LIMIT 1,"CREATE TABLE `violations` (
  business_id INTEGER REFERENCES businesses(business_id),
  date DATE,
  violation_type_id TEXT,
  risk_category TEXT,
  description TEXT
);
Sample rows from `violations`:
10, 2014-07-29, 103129, Moderate Risk, Insufficient hot water or running water
10, 2014-07-29, 103144, Low Risk, Unapproved or unmaintained equipment or utensils
10, 2014-01-14, 103119, Moderate Risk, Inadequate and inaccessible handwashing facilities

","CREATE TABLE `businesses` (
  business_id INTEGER,
  name TEXT,
  address TEXT,
  city TEXT,
  postal_code TEXT,
  latitude REAL,
  longitude REAL,
  phone_number INTEGER,
  tax_code TEXT,
  business_certificate INTEGER,
  application_date DATE,
  owner_name TEXT,
  owner_address TEXT,
  owner_city TEXT,
  owner_state TEXT,
  owner_zip TEXT
);
Sample rows from `businesses`:
10, Tiramisu Kitchen, 033 Belden Pl, San Francisco, 94104, 37.7911, -122.404, None, H24, 779059, None, Tiramisu LLC, 33 Belden St, San Francisco, CA, 94104
24, OMNI S.F. Hotel - 2nd Floor Pantry, 500 California St, 2nd  Floor, San Francisco, 94104, 37.7929, -122.403, None, H24, 352312, None, OMNI San Francisco Hotel Corp, 500 California St, 2nd Floor, San Francisco, CA, 94104
31, Norman's Ice Cream and Freezes, 2801 Leavenworth St, San Francisco, 94133, 37.8072, -122.419, None, H24, 346882, None, Norman Antiforda, 2801 Leavenworth St, San Francisco, CA, 94133

CREATE TABLE `inspections` (
  business_id INTEGER REFERENCES businesses(business_id),
  score INTEGER,
  date DATE,
  type TEXT
);
Sample rows from `inspections`:
10, 92, 2014-01-14, Routine - Unscheduled
10, None, 2014-01-24, Reinspection/Followup
10, 94, 2014-07-29, Routine - Unscheduled

CREATE TABLE `violations` (
  business_id INTEGER REFERENCES businesses(business_id),
  date DATE,
  violation_type_id TEXT,
  risk_category TEXT,
  description TEXT
);
Sample rows from `violations`:
10, 2014-07-29, 103129, Moderate Risk, Insufficient hot water or running water
10, 2014-07-29, 103144, Low Risk, Unapproved or unmaintained equipment or utensils
10, 2014-01-14, 103119, Moderate Risk, Inadequate and inaccessible handwashing facilities

",violations,business_id,"businesses, inspections, violations"
music_platform_2,"Name the podcast title, rating and review content created by '76A4C24B6038145'.","SELECT t2.title, t2.rating, t2.content FROM podcasts as t1 inner JOIN reviews as t2 ON t2.podcast_id = t1.podcast_id WHERE t2.author_id = '76A4C24B6038145'","CREATE TABLE `podcasts` (
  podcast_id TEXT PRIMARY KEY,
  itunes_id INTEGER,
  slug TEXT,
  itunes_url TEXT,
  title TEXT
);
Sample rows from `podcasts`:
a00018b54eb342567c94dacfb2a3e504, 1313466221, scaling-global, https://podcasts.apple.com/us/podcast/scaling-global/id1313466221, Scaling Global
a00043d34e734b09246d17dc5d56f63c, 158973461, cornerstone-baptist-church-of-orlando, https://podcasts.apple.com/us/podcast/cornerstone-baptist-church-of-orlando/id158973461, Cornerstone Baptist Church of Orlando
a0004b1ef445af9dc84dad1e7821b1e3, 139076942, mystery-dancing-in-the-dark, https://podcasts.apple.com/us/podcast/mystery-dancing-in-the-dark/id139076942, Mystery: Dancing in the Dark

CREATE TABLE `reviews` (
  podcast_id TEXT REFERENCES podcasts(None),
  title TEXT,
  content TEXT,
  rating INTEGER,
  author_id TEXT,
  created_at TEXT
);
Sample rows from `reviews`:
c61aa81c9b929a66f0c1db6cbe5d8548, really interesting!, Thanks for providing these insights.  Really enjoy the variety and depth -- please keep them coming!, 5, F7E5A318989779D, 2018-04-24T12:05:16-07:00
c61aa81c9b929a66f0c1db6cbe5d8548, Must listen for anyone interested in the arts!!!, Super excited to see this podcast grow. So many fun topics to talk about...Shari is really engaging. Definitely subscribing and would recommend to anyone interested in the arts!!, 5, F6BF5472689BD12, 2018-05-09T18:14:32-07:00
ad4f2bf69c72b8db75978423c25f379e, nauseatingly left, I'm a liberal myself, but its pretty obvious and annoying that they're trying to push their beliefs on the listeners. Get a more politically diverse production staff, we like to see issues from multiple point of views not just yours., 1, 1AB95B8E6E1309E, 2019-06-11T14:53:39-07:00

","CREATE TABLE `runs` (
  run_at TEXT,
  max_rowid INTEGER,
  reviews_added INTEGER
);
Sample rows from `runs`:
2021-05-10 02:53:00, 3266481, 1215223
2021-06-06 21:34:36, 3300773, 13139
2021-07-02 18:04:55, 3329699, 11561

CREATE TABLE `podcasts` (
  podcast_id TEXT PRIMARY KEY,
  itunes_id INTEGER,
  slug TEXT,
  itunes_url TEXT,
  title TEXT
);
Sample rows from `podcasts`:
a00018b54eb342567c94dacfb2a3e504, 1313466221, scaling-global, https://podcasts.apple.com/us/podcast/scaling-global/id1313466221, Scaling Global
a00043d34e734b09246d17dc5d56f63c, 158973461, cornerstone-baptist-church-of-orlando, https://podcasts.apple.com/us/podcast/cornerstone-baptist-church-of-orlando/id158973461, Cornerstone Baptist Church of Orlando
a0004b1ef445af9dc84dad1e7821b1e3, 139076942, mystery-dancing-in-the-dark, https://podcasts.apple.com/us/podcast/mystery-dancing-in-the-dark/id139076942, Mystery: Dancing in the Dark

CREATE TABLE `reviews` (
  podcast_id TEXT REFERENCES podcasts(None),
  title TEXT,
  content TEXT,
  rating INTEGER,
  author_id TEXT,
  created_at TEXT
);
Sample rows from `reviews`:
c61aa81c9b929a66f0c1db6cbe5d8548, really interesting!, Thanks for providing these insights.  Really enjoy the variety and depth -- please keep them coming!, 5, F7E5A318989779D, 2018-04-24T12:05:16-07:00
c61aa81c9b929a66f0c1db6cbe5d8548, Must listen for anyone interested in the arts!!!, Super excited to see this podcast grow. So many fun topics to talk about...Shari is really engaging. Definitely subscribing and would recommend to anyone interested in the arts!!, 5, F6BF5472689BD12, 2018-05-09T18:14:32-07:00
ad4f2bf69c72b8db75978423c25f379e, nauseatingly left, I'm a liberal myself, but its pretty obvious and annoying that they're trying to push their beliefs on the listeners. Get a more politically diverse production staff, we like to see issues from multiple point of views not just yours., 1, 1AB95B8E6E1309E, 2019-06-11T14:53:39-07:00

CREATE TABLE `categories` (
  podcast_id TEXT PRIMARY KEY REFERENCES podcasts(None),
  category TEXT PRIMARY KEY
);
Sample rows from `categories`:
c61aa81c9b929a66f0c1db6cbe5d8548, arts
c61aa81c9b929a66f0c1db6cbe5d8548, arts-performing-arts
c61aa81c9b929a66f0c1db6cbe5d8548, music

","podcasts, reviews","reviews.title, reviews.rating, reviews.content, reviews.podcast_id, podcasts.podcast_id, reviews.author_id","runs, podcasts, reviews, categories"
retail_world,Give the full name of employee who handled the order id 10280.,"SELECT t1.firstname, t1.lastname FROM employees as t1 inner JOIN orders as t2 ON t1.employeeid = t2.employeeid WHERE t2.orderid = 10280","CREATE TABLE `employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

","employees, orders","employees.firstname, employees.lastname, employees.employeeid, orders.employeeid, orders.orderid","sqlite_sequence, Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails"
language_corpus,"In Abadia, what is the word id of the of the Catalan language that appeared the highest amount of times? Indicate the how many times did they said word id appeared.","SELECT t2.wid, t2.occurrences FROM pages as t1 inner JOIN pages_words as t2 ON t1.pid = t2.pid WHERE t1.title = 'Abadia' ORDER BY t2.occurrences DESC LIMIT 1","CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

","CREATE TABLE `langs` (
  lid INTEGER,
  lang TEXT PRIMARY KEY,
  locale TEXT PRIMARY KEY,
  pages INTEGER,
  words INTEGER
);
Sample rows from `langs`:
1, ca, ca_ES, 1129144, 2764996

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
langs, 1
pages, 1129144
words, 2764996

CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `langs_words` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `langs_words`:
1, 1, 242
1, 2, 16841
1, 3, 48700

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

","pages, pages_words","pages_words.wid, pages_words.occurrences, pages.pid, pages_words.pid, pages.title","langs, sqlite_sequence, pages, words, langs_words, pages_words, biwords"
restaurant,What is the review of the restaurant at 8440 Murray Ave?,SELECT t2.review FROM location as t1 inner JOIN generalinfo as t2 ON t1.id_restaurant = t2.id_restaurant WHERE t1.street_name = 'murray ave' AND t1.street_num = 8440,"CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

","CREATE TABLE `geographic` (
  city TEXT PRIMARY KEY,
  county TEXT,
  region TEXT
);
Sample rows from `geographic`:
alameda, alameda county, bay area
alamo, contra costa county, bay area
albany, alameda county, bay area

CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

","location, generalinfo","generalinfo.review, location.id_restaurant, generalinfo.id_restaurant, location.street_name, location.street_num","geographic, generalinfo, location"
shakespeare,What is the long title of the work with the highest number of scenes in act 1?,SELECT t2.longtitle FROM chapters as t1 inner JOIN works as t2 ON t1.work_id = t2.id WHERE t1.act = 1 ORDER BY t1.scene DESC LIMIT 1,"CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

","CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
chapters, 19648
characters, 1266
paragraphs, 666327

CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

","chapters, works","works.longtitle, chapters.work_id, works.id, chapters.act, chapters.scene","chapters, sqlite_sequence, characters, paragraphs, works"
language_corpus,"How many times did the word pair ""i"" and ""a"" appeared in the Cataln language/page?",SELECT SUM(occurrences) FROM biwords WHERE w1st = 86 AND w2nd = 109,"CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

","CREATE TABLE `langs` (
  lid INTEGER,
  lang TEXT PRIMARY KEY,
  locale TEXT PRIMARY KEY,
  pages INTEGER,
  words INTEGER
);
Sample rows from `langs`:
1, ca, ca_ES, 1129144, 2764996

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
langs, 1
pages, 1129144
words, 2764996

CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `langs_words` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `langs_words`:
1, 1, 242
1, 2, 16841
1, 3, 48700

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

",biwords,"occurrences, w1st, w2nd","langs, sqlite_sequence, pages, words, langs_words, pages_words, biwords"
law_episode,Which continent was Michael Preston born on?,SELECT birth_country FROM person WHERE name = 'Michael Preston',"CREATE TABLE `person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
tt0629239, nun
tt0629239, priest
tt0629420, police officer

CREATE TABLE `Person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  series TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  person_id TEXT REFERENCES Person(person_id),
  role TEXT,
  result TEXT
);
Sample rows from `Award`:
258, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0937725, None, Winner
259, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0792309, None, Winner
260, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0049569, None, Winner

CREATE TABLE `Credit` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  person_id TEXT PRIMARY KEY REFERENCES Person(person_id),
  category TEXT,
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
tt0629204, nm0226352, Additional Crew, technical advisor, true
tt0629204, nm0506974, Additional Crew, production accountant, true
tt0629204, nm4103116, Additional Crew, production accountant, true

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
tt0629204, 10, 36, 17.7
tt0629204, 9, 39, 19.2
tt0629204, 8, 64, 31.5

",person,"birth_country, name","Episode, Keyword, Person, Award, Credit, Vote"
disney,Which song is associated with the most popular Disney movie in 1970s?,"SELECT t2.song FROM movies_total_gross as t1 inner JOIN characters as t2 ON t1.movie_title = t2.movie_title WHERE CasT(substr(t1.release_date, instr(t1.release_date, ', ') + 1) as int) BETWEEN 1970 AND 1979 ORDER BY CasT(replace(substr(t1.total_gross, 2), ',', '') as float) DESC LIMIT 1","CREATE TABLE `movies_total_gross` (
  movie_title TEXT PRIMARY KEY REFERENCES characters(movie_title),
  release_date TEXT PRIMARY KEY,
  genre TEXT,
  MPAA_rating TEXT,
  total_gross TEXT,
  inflation_adjusted_gross TEXT
);
Sample rows from `movies_total_gross`:
Snow White and the Seven Dwarfs, Dec 21, 1937, Musical, G, $184,925,485, $5,228,953,251
Pinocchio, Feb 9, 1940, Adventure, G, $84,300,000, $2,188,229,052
Fantasia, Nov 13, 1940, Musical, G, $83,320,000, $2,187,090,808

CREATE TABLE `characters` (
  movie_title TEXT PRIMARY KEY,
  release_date TEXT,
  hero TEXT REFERENCES voice-actors(character),
  villian TEXT,
  song TEXT
);
Sample rows from `characters`:
Snow White and the Seven Dwarfs, 21-Dec-37, Snow White, Evil Queen, Some Day My Prince Will Come
Pinocchio, 7-Feb-40, Pinocchio, Stromboli, When You Wish upon a Star
Fantasia, 13-Nov-40, None, Chernabog, None

","CREATE TABLE `characters` (
  movie_title TEXT PRIMARY KEY,
  release_date TEXT,
  hero TEXT REFERENCES voice-actors(character),
  villian TEXT,
  song TEXT
);
Sample rows from `characters`:
Snow White and the Seven Dwarfs, 21-Dec-37, Snow White, Evil Queen, Some Day My Prince Will Come
Pinocchio, 7-Feb-40, Pinocchio, Stromboli, When You Wish upon a Star
Fantasia, 13-Nov-40, None, Chernabog, None

CREATE TABLE `director` (
  name TEXT PRIMARY KEY REFERENCES characters(movie_title),
  director TEXT
);
Sample rows from `director`:
Snow White and the Seven Dwarfs, David Hand
Pinocchio, Ben Sharpsteen
Fantasia, full credits

CREATE TABLE `movies_total_gross` (
  movie_title TEXT PRIMARY KEY REFERENCES characters(movie_title),
  release_date TEXT PRIMARY KEY,
  genre TEXT,
  MPAA_rating TEXT,
  total_gross TEXT,
  inflation_adjusted_gross TEXT
);
Sample rows from `movies_total_gross`:
Snow White and the Seven Dwarfs, Dec 21, 1937, Musical, G, $184,925,485, $5,228,953,251
Pinocchio, Feb 9, 1940, Adventure, G, $84,300,000, $2,188,229,052
Fantasia, Nov 13, 1940, Musical, G, $83,320,000, $2,187,090,808

CREATE TABLE `revenue` (
  Year INTEGER,
  Studio Entertainment[NI 1] REAL,
  Disney Consumer Products[NI 2] REAL,
  Disney Interactive[NI 3][Rev 1] INTEGER,
  Walt Disney Parks and Resorts REAL,
  Disney Media Networks TEXT,
  Total INTEGER
);
Sample rows from `revenue`:
1991, 2593.0, 724.0, None, 2794.0, None, 6111
1992, 3115.0, 1081.0, None, 3306.0, None, 7502
1993, 3673.4, 1415.1, None, 3440.7, None, 8529

CREATE TABLE `voice-actors` (
  character TEXT PRIMARY KEY,
  voice-actor TEXT,
  movie TEXT REFERENCES characters(movie_title)
);
Sample rows from `voice-actors`:
Abby Mallard, Joan Cusack, Chicken Little
Abigail Gabble, Monica Evans, The Aristocats
Abis Mal, Jason Alexander, The Return of Jafar

","movies_total_gross, characters","characters.song, movies_total_gross.movie_title, characters.movie_title, movies_total_gross.release_date, movies_total_gross.total_gross","characters, director, movies_total_gross, revenue, voice-actors"
restaurant,Identify all restaurants in Contra Costa County by id.,SELECT t1.id_restaurant FROM location as t1 inner JOIN geographic as t2 ON t1.city = t2.city WHERE t2.county = 'contra costa county',"CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

CREATE TABLE `geographic` (
  city TEXT PRIMARY KEY,
  county TEXT,
  region TEXT
);
Sample rows from `geographic`:
alameda, alameda county, bay area
alamo, contra costa county, bay area
albany, alameda county, bay area

","CREATE TABLE `geographic` (
  city TEXT PRIMARY KEY,
  county TEXT,
  region TEXT
);
Sample rows from `geographic`:
alameda, alameda county, bay area
alamo, contra costa county, bay area
albany, alameda county, bay area

CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

","location, geographic","location.id_restaurant, location.city, geographic.city, geographic.county","geographic, generalinfo, location"
regional_sales,What is the detailed position of the store which has order SO - 000115?,"SELECT t2.latitude, t2.longitude FROM `sales orders` as t1 inner JOIN `store locations` as t2 ON t2.storeID = t1._storeID WHERE t1.ordernumber = 'SO - 000115'","CREATE TABLE `sales orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `sales orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

CREATE TABLE `store locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `store locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  Customer Names TEXT
);
Sample rows from `Customers`:
1, Avon Corp
2, WakeFern 
3, Elorac, Corp

CREATE TABLE `Products` (
  ProductID INTEGER,
  Product Name TEXT
);
Sample rows from `Products`:
1, Cookware
2, Photo Frames
3, Table Lamps

CREATE TABLE `Regions` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `Regions`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `Sales Team` (
  SalesTeamID INTEGER,
  Sales Team TEXT,
  Region TEXT
);
Sample rows from `Sales Team`:
1, Adam Hernandez, Northeast
2, Keith Griffin, Northeast
3, Jerry Green, West

CREATE TABLE `Store Locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `Store Locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

CREATE TABLE `Sales Orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `Sales Orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

","sales orders, store locations","store locations.latitude, store locations.longitude, store locations.storeID, sales orders._storeID, sales orders.ordernumber","Customers, Products, Regions, Sales Team, Store Locations, Sales Orders"
retail_world,How many orders were shipped to GREAL via United Package?,SELECT COUNT(t1.orderid) FROM orders as t1 inner JOIN shippers as t2 ON t1.shipvia = t2.shipperid WHERE t1.customerid = 'GREAL' AND t2.companyname = 'United Package',"CREATE TABLE `orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

","orders, shippers","orders.orderid, orders.shipvia, shippers.shipperid, orders.customerid, shippers.companyname","sqlite_sequence, Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails"
menu,List down the name of dishes from menu created in April.,"SELECT t2.name FROM menuitem as t1 inner JOIN dish as t2 ON t2.id = t1.dish_id WHERE substr(t1.created_at, 7, 1) = '4'","CREATE TABLE `menuitem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `menuitem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

CREATE TABLE `dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

","CREATE TABLE `Dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `Dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

CREATE TABLE `Menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `Menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

CREATE TABLE `MenuPage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `MenuPage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

CREATE TABLE `MenuItem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `MenuItem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

","menuitem, dish","dish.name, dish.id, menuitem.dish_id, menuitem.created_at","Dish, Menu, MenuPage, MenuItem"
computer_student,Which member of the faculty are teaching the most courses and what is his/her general course level?,"SELECT t1.p_id, t3.courselevel FROM person as t1 inner JOIN taughtby as t2 ON t1.p_id = t2.p_id inner JOIN course as t3 ON t3.course_id = t2.course_id GROUP BY t1.p_id ORDER BY COUNT(t2.course_id) DESC LIMIT 1","CREATE TABLE `person` (
  p_id INTEGER,
  professor INTEGER,
  student INTEGER,
  hasPosition TEXT,
  inPhase TEXT,
  yearsInProgram TEXT
);
Sample rows from `person`:
3, 0, 1, 0, 0, 0
4, 0, 1, 0, 0, 0
5, 1, 0, Faculty, 0, 0

CREATE TABLE `taughtby` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `taughtby`:
0, 40
1, 40
2, 180

CREATE TABLE `course` (
  course_id INTEGER,
  courseLevel TEXT
);
Sample rows from `course`:
0, Level_500
1, Level_500
2, Level_500

","CREATE TABLE `course` (
  course_id INTEGER,
  courseLevel TEXT
);
Sample rows from `course`:
0, Level_500
1, Level_500
2, Level_500

CREATE TABLE `person` (
  p_id INTEGER,
  professor INTEGER,
  student INTEGER,
  hasPosition TEXT,
  inPhase TEXT,
  yearsInProgram TEXT
);
Sample rows from `person`:
3, 0, 1, 0, 0, 0
4, 0, 1, 0, 0, 0
5, 1, 0, Faculty, 0, 0

CREATE TABLE `advisedBy` (
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id),
  p_id_dummy INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `advisedBy`:
96, 5
118, 5
183, 5

CREATE TABLE `taughtBy` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `taughtBy`:
0, 40
1, 40
2, 180

","person, taughtby, course","person.p_id, course.courselevel, taughtby.p_id, course.course_id, taughtby.course_id","course, person, advisedBy, taughtBy"
shakespeare,"How many scenes are there in the 5th act of ""History of Henry VIII""?",SELECT SUM(t2.scene) FROM works as t1 inner JOIN chapters as t2 ON t1.id = t2.work_id WHERE t2.act = 5 AND t1.longtitle = 'History of Henry VIII',"CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

","CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
chapters, 19648
characters, 1266
paragraphs, 666327

CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

","works, chapters","chapters.scene, works.id, chapters.work_id, chapters.act, works.longtitle","chapters, sqlite_sequence, characters, paragraphs, works"
european_football_1,When did the first match that score more than 10 goals happen?,SELECT MIN(date) FROM matchs WHERE fthg + ftag > 10,"CREATE TABLE `matchs` (
  Div TEXT REFERENCES divisions(division),
  Date DATE,
  HomeTeam TEXT,
  AwayTeam TEXT,
  FTHG INTEGER,
  FTAG INTEGER,
  FTR TEXT,
  season INTEGER
);
Sample rows from `matchs`:
B1, 2020-08-08, Club Brugge, Charleroi, 0, 1, A, 2021
B1, 2020-08-08, Antwerp, Mouscron, 1, 1, D, 2021
B1, 2020-08-08, Standard, Cercle Brugge, 1, 0, H, 2021

","CREATE TABLE `divisions` (
  division TEXT PRIMARY KEY,
  name TEXT,
  country TEXT
);
Sample rows from `divisions`:
B1, Division 1A, Belgium
D1, Bundesliga, Deutschland
D2, 2. Bundesliga, Deutschland

CREATE TABLE `matchs` (
  Div TEXT REFERENCES divisions(division),
  Date DATE,
  HomeTeam TEXT,
  AwayTeam TEXT,
  FTHG INTEGER,
  FTAG INTEGER,
  FTR TEXT,
  season INTEGER
);
Sample rows from `matchs`:
B1, 2020-08-08, Club Brugge, Charleroi, 0, 1, A, 2021
B1, 2020-08-08, Antwerp, Mouscron, 1, 1, D, 2021
B1, 2020-08-08, Standard, Cercle Brugge, 1, 0, H, 2021

",matchs,"fthg, ftag","divisions, matchs"
coinmarketcap,What is the total value of Argentum coined traded in the past 24 hours on 2016/10/11.,SELECT t2.volume_24h FROM coins as t1 inner JOIN historical as t2 ON t1.id = t2.coin_id WHERE t1.name = 'Argentum' AND t2.date = '2016-10-11',"CREATE TABLE `coins` (
  id INTEGER,
  name TEXT,
  slug TEXT,
  symbol TEXT,
  status TEXT,
  category TEXT,
  description TEXT,
  subreddit TEXT,
  notice TEXT,
  tags TEXT,
  tag_names TEXT,
  website TEXT,
  platform_id INTEGER,
  date_added TEXT,
  date_launched TEXT
);
Sample rows from `coins`:
1, Bitcoin, bitcoin, BTC, active, coin, ## **What Is Bitcoin (BTC)?**\n\nBitcoin is a decentralized cryptocurrency originally described in a 2008 [whitepaper](https://coinmarketcap.com/alexandria/glossary/whitepaper) by a person, or group of people, using the alias [Satoshi Nakamoto](https://co, bitcoin, None, mineable, pow, sha-256, store-of-value, state-channels, coinbase-ventures-portfolio, three-arrows-capital-portfolio, polychain-capital-portfolio, binance-labs-portfolio, arrington-xrp-capital, blockchain-capital-portfolio, boostvc-portfolio, cms-holdings-, Mineable, PoW, SHA-256, Store of Value, State channels, Coinbase Ventures Portfolio, Three Arrows Capital Portfolio, Polychain Capital Portfolio, Binance Labs Portfolio, Arrington XRP capital, Blockchain Capital Portfolio, BoostVC Portfolio, CMS Holdings , https://bitcoin.org/, None, 2013-04-28T00:00:00.000Z, None
2, Litecoin, litecoin, LTC, active, coin, ## What Is Litecoin (LTC)?\n\nLitecoin (LTC) is a cryptocurrency that was designed to provide fast, secure and low-cost payments by leveraging the unique properties of [blockchain](https://coinmarketcap.com/alexandria/glossary/blockchain) technology. \n\n, litecoin, None, mineable, pow, scrypt, medium-of-exchange, binance-chain, Mineable, PoW, Scrypt, Medium of Exchange, Binance Chain, https://litecoin.org/, None, 2013-04-28T00:00:00.000Z, None
3, Namecoin, namecoin, NMC, active, coin, Namecoin (NMC) is a cryptocurrency . Users are able to generate NMC through the process of mining. Namecoin has a current supply of 14,736,400. The last known price of Namecoin is 2.14833562 USD and is up 0.40 over the last 24 hours. It is currently tradi, namecoin, None, mineable, pow, sha-256, platform, Mineable, PoW, SHA-256, Platform, https://www.namecoin.org/, None, 2013-04-28T00:00:00.000Z, None

CREATE TABLE `historical` (
  date DATE,
  coin_id INTEGER,
  cmc_rank INTEGER,
  market_cap REAL,
  price REAL,
  open REAL,
  high REAL,
  low REAL,
  close REAL,
  time_high TEXT,
  time_low TEXT,
  volume_24h REAL,
  percent_change_1h REAL,
  percent_change_24h REAL,
  percent_change_7d REAL,
  circulating_supply REAL,
  total_supply REAL,
  max_supply REAL,
  num_market_pairs INTEGER
);
Sample rows from `historical`:
2013-04-28, 1, 1, 1488566971.9558687, 134.210021972656, None, None, None, None, None, None, 0.0, 0.639231, None, None, 11091325.0, 11091325.0, 21000000.0, None
2013-04-28, 2, 2, 74637021.56790735, 4.34840488433838, None, None, None, None, None, None, 0.0, 0.799273, None, None, 17164230.0, 17164230.0, 84000000.0, None
2013-04-28, 5, 3, 7250186.647688276, 0.386524856090546, None, None, None, None, None, None, 0.0, -0.934763, None, None, 18757362.0, 18757362.0, None, None

","CREATE TABLE `coins` (
  id INTEGER,
  name TEXT,
  slug TEXT,
  symbol TEXT,
  status TEXT,
  category TEXT,
  description TEXT,
  subreddit TEXT,
  notice TEXT,
  tags TEXT,
  tag_names TEXT,
  website TEXT,
  platform_id INTEGER,
  date_added TEXT,
  date_launched TEXT
);
Sample rows from `coins`:
1, Bitcoin, bitcoin, BTC, active, coin, ## **What Is Bitcoin (BTC)?**\n\nBitcoin is a decentralized cryptocurrency originally described in a 2008 [whitepaper](https://coinmarketcap.com/alexandria/glossary/whitepaper) by a person, or group of people, using the alias [Satoshi Nakamoto](https://co, bitcoin, None, mineable, pow, sha-256, store-of-value, state-channels, coinbase-ventures-portfolio, three-arrows-capital-portfolio, polychain-capital-portfolio, binance-labs-portfolio, arrington-xrp-capital, blockchain-capital-portfolio, boostvc-portfolio, cms-holdings-, Mineable, PoW, SHA-256, Store of Value, State channels, Coinbase Ventures Portfolio, Three Arrows Capital Portfolio, Polychain Capital Portfolio, Binance Labs Portfolio, Arrington XRP capital, Blockchain Capital Portfolio, BoostVC Portfolio, CMS Holdings , https://bitcoin.org/, None, 2013-04-28T00:00:00.000Z, None
2, Litecoin, litecoin, LTC, active, coin, ## What Is Litecoin (LTC)?\n\nLitecoin (LTC) is a cryptocurrency that was designed to provide fast, secure and low-cost payments by leveraging the unique properties of [blockchain](https://coinmarketcap.com/alexandria/glossary/blockchain) technology. \n\n, litecoin, None, mineable, pow, scrypt, medium-of-exchange, binance-chain, Mineable, PoW, Scrypt, Medium of Exchange, Binance Chain, https://litecoin.org/, None, 2013-04-28T00:00:00.000Z, None
3, Namecoin, namecoin, NMC, active, coin, Namecoin (NMC) is a cryptocurrency . Users are able to generate NMC through the process of mining. Namecoin has a current supply of 14,736,400. The last known price of Namecoin is 2.14833562 USD and is up 0.40 over the last 24 hours. It is currently tradi, namecoin, None, mineable, pow, sha-256, platform, Mineable, PoW, SHA-256, Platform, https://www.namecoin.org/, None, 2013-04-28T00:00:00.000Z, None

CREATE TABLE `historical` (
  date DATE,
  coin_id INTEGER,
  cmc_rank INTEGER,
  market_cap REAL,
  price REAL,
  open REAL,
  high REAL,
  low REAL,
  close REAL,
  time_high TEXT,
  time_low TEXT,
  volume_24h REAL,
  percent_change_1h REAL,
  percent_change_24h REAL,
  percent_change_7d REAL,
  circulating_supply REAL,
  total_supply REAL,
  max_supply REAL,
  num_market_pairs INTEGER
);
Sample rows from `historical`:
2013-04-28, 1, 1, 1488566971.9558687, 134.210021972656, None, None, None, None, None, None, 0.0, 0.639231, None, None, 11091325.0, 11091325.0, 21000000.0, None
2013-04-28, 2, 2, 74637021.56790735, 4.34840488433838, None, None, None, None, None, None, 0.0, 0.799273, None, None, 17164230.0, 17164230.0, 84000000.0, None
2013-04-28, 5, 3, 7250186.647688276, 0.386524856090546, None, None, None, None, None, None, 0.0, -0.934763, None, None, 18757362.0, 18757362.0, None, None

","coins, historical","historical.volume_24h, coins.id, historical.coin_id, coins.name, historical.date","coins, historical"
menu,"Which menu page has a bigger width, page 1 of ""Zentral Theater Terrace"" or page 1 of ""Young's Hotel""?",SELECT case when SUM(case when t1.name = 'Zentral Theater Terrace' then t2.full_width else 0 end) - SUM(case when t1.name = 'Young''s Hotel' then t2.full_width else 0 end) > 0 then 'Zentral Theater Terrace' else 'Young''s Hotel' end FROM menu as t1 inner JOIN menuPage as t2 ON t1.id = t2.menu_id,"CREATE TABLE `menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

CREATE TABLE `menuPage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `menuPage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

","CREATE TABLE `Dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `Dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

CREATE TABLE `Menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `Menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

CREATE TABLE `MenuPage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `MenuPage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

CREATE TABLE `MenuItem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `MenuItem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

","menu, menuPage","menu.name, menuPage.full_width, menu.id, menuPage.menu_id","Dish, Menu, MenuPage, MenuItem"
language_corpus,How many Catalan language wikipedia pages have between 1000 to 2000 number of different words?,SELECT COUNT(pid) FROM pages WHERE words BETWEEN 1000 AND 2000,"CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

","CREATE TABLE `langs` (
  lid INTEGER,
  lang TEXT PRIMARY KEY,
  locale TEXT PRIMARY KEY,
  pages INTEGER,
  words INTEGER
);
Sample rows from `langs`:
1, ca, ca_ES, 1129144, 2764996

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
langs, 1
pages, 1129144
words, 2764996

CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `langs_words` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `langs_words`:
1, 1, 242
1, 2, 16841
1, 3, 48700

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

",pages,"pid, words","langs, sqlite_sequence, pages, words, langs_words, pages_words, biwords"
shipping,Who is the driver that transported the lightest weight of shipment? Provide the full name of the driver.,"SELECT t2.first_name, t2.last_name FROM shipment as t1 inner JOIN driver as t2 ON t1.driver_id = t2.driver_id ORDER BY t1.weight asC LIMIT 1","CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

CREATE TABLE `driver` (
  driver_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip_code INTEGER,
  phone TEXT
);
Sample rows from `driver`:
20, Sue, Newell, 268 Richmond Ave, Memphis, TN, 38106, (901) 774-6569
21, Andrea, Simons, 3574 Oak Limb Cv, Memphis, TN, 38135, (901) 384-0984
22, Roger, McHaney, 1839 S Orleans St, Memphis, TN, 38106, (901) 948-1043

","CREATE TABLE `city` (
  city_id INTEGER,
  city_name TEXT,
  state TEXT,
  population INTEGER,
  area REAL
);
Sample rows from `city`:
100, Union City, New Jersey, 67088, 1.3
101, Huntington Park, California, 61348, 3.0
102, Passaic, New Jersey, 67861, 3.1

CREATE TABLE `customer` (
  cust_id INTEGER,
  cust_name TEXT,
  annual_revenue INTEGER,
  cust_type TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip REAL,
  phone TEXT
);
Sample rows from `customer`:
193, Advanced Fabricators, 39588651, manufacturer, 5141 Summit Boulevard, West Palm Beach, FL, 33415.0, (561) 683-3535
304, Pard's Trailer Sales, 17158109, wholesaler, 5910 South 300 West, Salt Lake City, UT, 84107.0, (801) 262-4864
314, Saar Enterprises, Inc., 47403613, retailer, 11687 192nd Street, Council Bluffs, IA, 51503.0, (712) 366-4929

CREATE TABLE `driver` (
  driver_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip_code INTEGER,
  phone TEXT
);
Sample rows from `driver`:
20, Sue, Newell, 268 Richmond Ave, Memphis, TN, 38106, (901) 774-6569
21, Andrea, Simons, 3574 Oak Limb Cv, Memphis, TN, 38135, (901) 384-0984
22, Roger, McHaney, 1839 S Orleans St, Memphis, TN, 38106, (901) 948-1043

CREATE TABLE `truck` (
  truck_id INTEGER,
  make TEXT,
  model_year INTEGER
);
Sample rows from `truck`:
1, Peterbilt, 2005
2, Mack, 2006
3, Peterbilt, 2007

CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

","shipment, driver","driver.first_name, driver.last_name, shipment.driver_id, driver.driver_id, shipment.weight","city, customer, driver, truck, shipment"
simpson_episodes,Please list the names of all the awards won by the crew member whose nickname is Doofus.,SELECT t2.award FROM person as t1 inner JOIN award as t2 ON t1.name = t2.person WHERE t1.nickname = 'Doofus' AND t2.result = 'Winner';,"CREATE TABLE `person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","person, award","award.award, person.name, award.person, person.nickname, award.result","Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
human_resources,"What is the maximum salary of position ""Trainer""?",SELECT maxsalary FROM position WHERE positiontitle = 'Trainee',"CREATE TABLE `position` (
  positionID INTEGER,
  positiontitle TEXT,
  educationrequired TEXT,
  minsalary TEXT,
  maxsalary TEXT
);
Sample rows from `position`:
1, Account Representative, 4 year degree, US$25,000.00, US$75,000.00
2, Manager, 4 year degree, US$50,000.00, US$150,000.00
3, Trainee, 2 year degree, US$18,000.00, US$25,000.00

","CREATE TABLE `location` (
  locationID INTEGER,
  locationcity TEXT,
  address TEXT,
  state TEXT,
  zipcode INTEGER,
  officephone TEXT
);
Sample rows from `location`:
1, Atlanta, 450 Peachtree Rd, GA, 30316, (404)333-5555
2, Boston, 3 Commons Blvd, MA, 2190, (617)123-4444
3, Chicago, 500 Loop Highway, IL, 60620, (312)444-6666

CREATE TABLE `position` (
  positionID INTEGER,
  positiontitle TEXT,
  educationrequired TEXT,
  minsalary TEXT,
  maxsalary TEXT
);
Sample rows from `position`:
1, Account Representative, 4 year degree, US$25,000.00, US$75,000.00
2, Manager, 4 year degree, US$50,000.00, US$150,000.00
3, Trainee, 2 year degree, US$18,000.00, US$25,000.00

CREATE TABLE `employee` (
  ssn TEXT PRIMARY KEY,
  lastname TEXT,
  firstname TEXT,
  hiredate TEXT,
  salary TEXT,
  gender TEXT,
  performance TEXT,
  positionID INTEGER REFERENCES position(positionID),
  locationID INTEGER REFERENCES location(locationID)
);
Sample rows from `employee`:
000-01-0000, Milgrom, Patricia, 10/1/04, US$57,500.00, F, Average, 2, 2
000-02-2222, Adams, Sandy, 1/15/01, US$19,500.00, F, Average, 3, 1
109-87-6543, Wood, Emily, 3/12/97, US$69,000.00, F, Average, 2, 5

",position,"maxsalary, positiontitle","location, position, employee"
student_loan,What is the gender of student1000?,"SELECt iif(t.result = 0, 'female', 'male') as re FROM ( SELECt COUNT(name) as result FROM male WHERE name = 'student1000' ) t","CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

",male,name,"bool, person, disabled, enlist, filed_for_bankrupcy, longest_absense_from_school, male, no_payment_due, unemployed, enrolled"
books,How many orders did Marcelia Goering place in 2021 that uses the Priority Shipping method?,"SELECT COUNT(*) FROM customer as t1 inner JOIN cust_order as t2 ON t1.customer_id = t2.customer_id inner JOIN shipping_method as t3 ON t3.method_id = t2.shipping_method_id WHERE t1.first_name = 'Marcelia' AND t1.last_name = 'Goering' AND strftime('%Y', t2.order_date) = '2021' AND t3.method_name = 'Priority'","CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","customer, cust_order, shipping_method","customer.customer_id, cust_order.customer_id, shipping_method.method_id, cust_order.shipping_method_id, customer.first_name, customer.last_name, cust_order.order_date, shipping_method.method_name","address_status, author, book_language, country, address, customer, customer_address, order_status, publisher, book, book_author, shipping_method, cust_order, sqlite_sequence, order_history, order_line"
chicago_crime,"Calculate the percentage of the domestic violence cases handled by Christopher Taliaferro. Among them, list report numbers of cases that happened in the bank.","SELECT cast(COUNT(case when t1.domestic = 'TRUE' then t1.report_no end) as real) * 100 / COUNT(t1.report_no), COUNT(case when t1.domestic = 'TRUE' AND t1.location_description = 'BANK' then t1.report_no end) as ""number"" FROM crime as t1 inner JOIN ward as t2 ON t2.ward_no = t1.ward_no WHERE t2.alderman_first_name = 'Christopher' AND t2.alderman_last_name = 'Taliaferro'","CREATE TABLE `crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

CREATE TABLE `ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

","CREATE TABLE `Community_Area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `Community_Area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `District` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `District`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `FBI_Code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `FBI_Code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `IUCR` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `IUCR`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `Neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `Neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `Ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `Ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `Crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `Crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","crime, ward","crime.domestic, crime.report_no, crime.location_description, ward.ward_no, crime.ward_no, ward.alderman_first_name, ward.alderman_last_name","Community_Area, District, FBI_Code, IUCR, Neighborhood, Ward, Crime"
public_review_platform,"Give the percentage of ""Automotive"" businesses among all the Yelp businesses.","SELECT cast(SUM(case when t2.category_name LIKE 'Automotive' then 1 else 0 end) as real) * 100 / COUNT(t1.business_id) as ""percentage"" FROM business_categories as t1 inner JOIN categories as t2 ON t1.category_id = t2.category_id","CREATE TABLE `business_categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `business_categories`:
1, 8
1, 143
2, 18

CREATE TABLE `categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","business_categories, categories","categories.category_name, business_categories.business_id, business_categories.category_id, categories.category_id","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
sales,"Among customers named Kate, who has the highest quantity?","SELECT t2.firstname, t2.lastname FROM sales as t1 inner JOIN customers as t2 ON t1.customerid = t2.customerid WHERE t2.firstname = 'Kate' ORDER BY t1.quantity DESC LIMIT 1","CREATE TABLE `sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

CREATE TABLE `customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Employees`:
1, Abraham, e, Bennet
2, Reginald, l, Blotchet-Halls
3, Cheryl, a, Carson

CREATE TABLE `Products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

CREATE TABLE `Sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `Sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

","sales, customers","customers.firstname, customers.lastname, sales.customerid, customers.customerid, sales.quantity","Customers, Employees, Products, Sales"
authors,What percentage of authors of the paper about Charged particle multiplicity are affiliated with INFN?,SELECT cast((SUM(case when t1.affiliation LIKE '%INFN%' then 1 else 0 end)) as real) * 100 / COUNT(t2.id) FROM paperauthor as t1 inner JOIN paper as t2 ON t1.paperid = t2.id WHERE t2.title LIKE '%Charged particle multiplicity%',"CREATE TABLE `paperauthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `paperauthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

CREATE TABLE `paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

","CREATE TABLE `Author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `Author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

CREATE TABLE `Conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

CREATE TABLE `Journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `Paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `Paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `PaperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `PaperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

","paperauthor, paper","paperauthor.affiliation, paper.id, paperauthor.paperid, paper.title","Author, Conference, Journal, Paper, PaperAuthor"
public_review_platform,What is the correlation between the review starts and business stars?,SELECT cast(SUM(t2.review_stars) as real) / COUNT(t1.business_id) FROM business as t1 inner JOIN reviews as t2 ON t1.business_id = t2.business_id,"CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","business, reviews","reviews.review_stars, business.business_id, reviews.business_id","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
university,How many universities got less than 50 scores under ranking criteria ID 6 in 2011?,SELECT COUNT(*) FROM university_ranking_year WHERE ranking_criteria_id = 6 AND year = 2011 AND score < 50,"CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

","CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

CREATE TABLE `ranking_system` (
  id INTEGER,
  system_name TEXT
);
Sample rows from `ranking_system`:
1, Times Higher Education World University Ranking
2, Shanghai Ranking
3, Center for World University Rankings

CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

",university_ranking_year,"ranking_criteria_id, score","country, ranking_system, ranking_criteria, university, university_ranking_year, university_year"
image_and_language,On image no. 99 identify the percentage of objects that are described as white.,SELECT cast(SUM(case when t2.att_class = 'white' then 1 else 0 end) as real) * 100 / COUNT(obj_sample_id) FROM img_obj_att as t1 inner JOIN att_classES as t2 ON t1.att_class_ID = t2.att_class_ID WHERE t1.img_id = 99,"CREATE TABLE `img_obj_att` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `img_obj_att`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `att_classES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `att_classES`:
0, building s
1, indoors
2, cluttered

","CREATE TABLE `ATT_CLASSES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `ATT_CLASSES`:
0, building s
1, indoors
2, cluttered

CREATE TABLE `OBJ_CLASSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLASSES`:
0, awning
1, goggles
2, dot

CREATE TABLE `IMG_OBJ` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `IMG_OBJ`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `IMG_OBJ_ATT` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_OBJ_ATT`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `PRED_CLASSES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `PRED_CLASSES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `IMG_REL` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_REL`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

","img_obj_att, att_classES","att_classES.att_class, obj_sample_id, img_obj_att.att_class_ID, att_classES.att_class_ID, img_obj_att.img_id","ATT_CLASSES, OBJ_CLASSES, IMG_OBJ, IMG_OBJ_ATT, PRED_CLASSES, IMG_REL"
food_inspection_2,What is the average number of inspections done by the top 5 employees with the highest salary? List the names of the said employees.,"SELECT cast(COUNT(DISTINCT t2.inspection_id) as real) / 5, t1.first_name, t1.last_name FROM employee as t1 inner JOIN inspection as t2 ON t1.employee_id = t2.employee_id WHERE t1.title = 'Sanitarian' ORDER BY t1.salary DESC LIMIT 5","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

","employee, inspection","inspection.inspection_id, employee.first_name, employee.last_name, employee.employee_id, inspection.employee_id, employee.title, employee.salary","employee, establishment, inspection, inspection_point, violation"
app_store,What is the average review number for application with 5 rating?,SELECT AVG(reviews) FROM playstore WHERE rating = 5,"CREATE TABLE `playstore` (
  App TEXT,
  Category TEXT,
  Rating REAL,
  Reviews INTEGER,
  Size TEXT,
  Installs TEXT,
  Type TEXT,
  Price TEXT,
  Content Rating TEXT,
  Genres TEXT
);
Sample rows from `playstore`:
Photo Editor & Candy Camera & Grid & ScrapBook, ART_AND_DESIGN, 4.1, 159, 19M, 10,000+, Free, 0, Everyone, Art & Design
Coloring book moana, ART_AND_DESIGN, 3.9, 967, 14M, 500,000+, Free, 0, Everyone, Art & Design;Pretend Play
U Launcher Lite – FREE Live Cool Themes, Hide Apps, ART_AND_DESIGN, 4.7, 87510, 8.7M, 5,000,000+, Free, 0, Everyone, Art & Design

","CREATE TABLE `playstore` (
  App TEXT,
  Category TEXT,
  Rating REAL,
  Reviews INTEGER,
  Size TEXT,
  Installs TEXT,
  Type TEXT,
  Price TEXT,
  Content Rating TEXT,
  Genres TEXT
);
Sample rows from `playstore`:
Photo Editor & Candy Camera & Grid & ScrapBook, ART_AND_DESIGN, 4.1, 159, 19M, 10,000+, Free, 0, Everyone, Art & Design
Coloring book moana, ART_AND_DESIGN, 3.9, 967, 14M, 500,000+, Free, 0, Everyone, Art & Design;Pretend Play
U Launcher Lite – FREE Live Cool Themes, Hide Apps, ART_AND_DESIGN, 4.7, 87510, 8.7M, 5,000,000+, Free, 0, Everyone, Art & Design

CREATE TABLE `user_reviews` (
  App TEXT REFERENCES playstore(App),
  Translated_Review TEXT,
  Sentiment TEXT,
  Sentiment_Polarity TEXT,
  Sentiment_Subjectivity TEXT
);
Sample rows from `user_reviews`:
10 Best Foods for You, I like eat delicious food. That's I'm cooking food myself, case ""10 Best Foods"" helps lot, also ""Best Before (Shelf Life)"", Positive, 1.0, 0.5333333333333333
10 Best Foods for You, This help eating healthy exercise regular basis, Positive, 0.25, 0.28846153846153844
10 Best Foods for You, nan, nan, nan, nan

",playstore,"reviews, rating","playstore, user_reviews"
books,Indicate the last number of each street.,SELECT street_number FROM address,"CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

",address,street_number,"address_status, author, book_language, country, address, customer, customer_address, order_status, publisher, book, book_author, shipping_method, cust_order, sqlite_sequence, order_history, order_line"
authors,"What is the journal's short and full names that feature papers on the ""Materials"" topic?","SELECT t2.shortname, t2.fullname FROM paper as t1 inner JOIN journal as t2 ON t1.journalid = t2.id WHERE t1.keyword LIKE '%Materials%'","CREATE TABLE `paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

","CREATE TABLE `Author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `Author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

CREATE TABLE `Conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

CREATE TABLE `Journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `Paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `Paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `PaperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `PaperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

","paper, journal","journal.shortname, journal.fullname, paper.journalid, journal.id, paper.keyword","Author, Conference, Journal, Paper, PaperAuthor"
movielens,How many directors with average revenue of 4 have made either action or adventure films?,SELECT COUNT(t1.directorid) FROM directors as t1 inner JOIN movies2directors as t2 ON t1.directorid = t2.directorid WHERE t1.avg_revenue = 4 AND (t2.genre = 'Adventure' OR t2.genre = 'Action'),"CREATE TABLE `directors` (
  directorid INTEGER,
  d_quality INTEGER PRIMARY KEY,
  avg_revenue INTEGER PRIMARY KEY
);
Sample rows from `directors`:
67, 4, 1
92, 2, 3
284, 4, 0

CREATE TABLE `movies2directors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  directorid INTEGER PRIMARY KEY REFERENCES directors(None),
  genre TEXT
);
Sample rows from `movies2directors`:
1672111, 54934, Action
1672946, 188940, Action
1679461, 179783, Action

","CREATE TABLE `users` (
  userid INTEGER,
  age TEXT,
  u_gender TEXT,
  occupation TEXT
);
Sample rows from `users`:
1, 1, F, 2
2, 56, M, 3
3, 25, M, 2

CREATE TABLE `directors` (
  directorid INTEGER,
  d_quality INTEGER PRIMARY KEY,
  avg_revenue INTEGER PRIMARY KEY
);
Sample rows from `directors`:
67, 4, 1
92, 2, 3
284, 4, 0

CREATE TABLE `actors` (
  actorid INTEGER,
  a_gender TEXT,
  a_quality INTEGER
);
Sample rows from `actors`:
4, M, 4
16, M, 0
28, M, 4

CREATE TABLE `movies` (
  movieid INTEGER,
  year INTEGER,
  isEnglish TEXT,
  country TEXT,
  runningtime INTEGER
);
Sample rows from `movies`:
1672052, 3, T, other, 2
1672111, 4, T, other, 2
1672580, 4, T, USA, 3

CREATE TABLE `movies2actors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  actorid INTEGER PRIMARY KEY REFERENCES actors(None),
  cast_num INTEGER
);
Sample rows from `movies2actors`:
1672580, 981535, 0
1672946, 1094968, 0
1673647, 149985, 0

CREATE TABLE `movies2directors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  directorid INTEGER PRIMARY KEY REFERENCES directors(None),
  genre TEXT
);
Sample rows from `movies2directors`:
1672111, 54934, Action
1672946, 188940, Action
1679461, 179783, Action

CREATE TABLE `u2base` (
  userid INTEGER PRIMARY KEY REFERENCES users(None),
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  rating TEXT
);
Sample rows from `u2base`:
2, 1964242, 1
2, 2219779, 1
3, 1856939, 1

","directors, movies2directors","directors.directorid, movies2directors.directorid, directors.avg_revenue, movies2directors.genre","users, directors, actors, movies, movies2actors, movies2directors, u2base"
airline,Provide the number of airplanes that landed on Oakland Airport on 2018/8/7.,SELECT SUM(case when t1.description LIKE '%Oakland%' then 1 else 0 end) as count FROM airports as t1 inner JOIN airlines as t2 ON t1.code = t2.dest WHERE t2.fl_date = '2018/8/7',"CREATE TABLE `airports` (
  Code TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `airports`:
01A, Afognak Lake, AK: Afognak Lake Airport
03A, Granite Mountain, AK: Bear Creek Mining Strip
04A, Lik, AK: Lik Mining Camp

CREATE TABLE `airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

","CREATE TABLE `Air Carriers` (
  Code INTEGER,
  Description TEXT
);
Sample rows from `Air Carriers`:
19031, Mackey International Inc.: MAC
19032, Munz Northern Airlines Inc.: XY
19033, Cochise Airlines Inc.: COC

CREATE TABLE `Airports` (
  Code TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `Airports`:
01A, Afognak Lake, AK: Afognak Lake Airport
03A, Granite Mountain, AK: Bear Creek Mining Strip
04A, Lik, AK: Lik Mining Camp

CREATE TABLE `Airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `Airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

","airports, airlines","airports.description, airports.code, airlines.dest, airlines.fl_date","Air Carriers, Airports, Airlines"
food_inspection_2,Compare the number of inspections under toxic items and no-smoking regulations.,"SELECT COUNT(case when t2.category = 'Toxic Items' then t1.inspection_id end) as tox_nums , COUNT(case when t2.category = 'No Smoking Regulations' then t1.inspection_id end) as nosmonums FROM violation as t1 inner JOIN inspection_point as t2 ON t1.point_id = t2.point_id","CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

","violation, inspection_point","inspection_point.category, violation.inspection_id, violation.point_id, inspection_point.point_id","employee, establishment, inspection, inspection_point, violation"
authors,"What are the affiliations of the author ""Mark A. Musen"" written on and off paper?",SELECT t1.affiliation FROM paperauthor as t1 inner JOIN author as t2 ON t1.authorid = t2.id WHERE t2.name = 'Mark A. Musen',"CREATE TABLE `paperauthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `paperauthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

CREATE TABLE `author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

","CREATE TABLE `Author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `Author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

CREATE TABLE `Conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

CREATE TABLE `Journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `Paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `Paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `PaperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `PaperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

","paperauthor, author","paperauthor.affiliation, paperauthor.authorid, author.id, author.name","Author, Conference, Journal, Paper, PaperAuthor"
movielens,List down 5 non English adventure movies from UK?,SELECT t1.movieid fROM movies2directors as t1 inner JOIN movies as t2 ON t1.movieid = t2.movieid WHERE t2.country = 'UK' AND t1.genre = 'Adventure' AND t2.isenglish = 'f' LIMIT 5,"CREATE TABLE `movies2directors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  directorid INTEGER PRIMARY KEY REFERENCES directors(None),
  genre TEXT
);
Sample rows from `movies2directors`:
1672111, 54934, Action
1672946, 188940, Action
1679461, 179783, Action

CREATE TABLE `movies` (
  movieid INTEGER,
  year INTEGER,
  isEnglish TEXT,
  country TEXT,
  runningtime INTEGER
);
Sample rows from `movies`:
1672052, 3, T, other, 2
1672111, 4, T, other, 2
1672580, 4, T, USA, 3

","CREATE TABLE `users` (
  userid INTEGER,
  age TEXT,
  u_gender TEXT,
  occupation TEXT
);
Sample rows from `users`:
1, 1, F, 2
2, 56, M, 3
3, 25, M, 2

CREATE TABLE `directors` (
  directorid INTEGER,
  d_quality INTEGER PRIMARY KEY,
  avg_revenue INTEGER PRIMARY KEY
);
Sample rows from `directors`:
67, 4, 1
92, 2, 3
284, 4, 0

CREATE TABLE `actors` (
  actorid INTEGER,
  a_gender TEXT,
  a_quality INTEGER
);
Sample rows from `actors`:
4, M, 4
16, M, 0
28, M, 4

CREATE TABLE `movies` (
  movieid INTEGER,
  year INTEGER,
  isEnglish TEXT,
  country TEXT,
  runningtime INTEGER
);
Sample rows from `movies`:
1672052, 3, T, other, 2
1672111, 4, T, other, 2
1672580, 4, T, USA, 3

CREATE TABLE `movies2actors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  actorid INTEGER PRIMARY KEY REFERENCES actors(None),
  cast_num INTEGER
);
Sample rows from `movies2actors`:
1672580, 981535, 0
1672946, 1094968, 0
1673647, 149985, 0

CREATE TABLE `movies2directors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  directorid INTEGER PRIMARY KEY REFERENCES directors(None),
  genre TEXT
);
Sample rows from `movies2directors`:
1672111, 54934, Action
1672946, 188940, Action
1679461, 179783, Action

CREATE TABLE `u2base` (
  userid INTEGER PRIMARY KEY REFERENCES users(None),
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  rating TEXT
);
Sample rows from `u2base`:
2, 1964242, 1
2, 2219779, 1
3, 1856939, 1

","movies2directors, movies","movies2directors.movieid, movies.movieid, movies.country, movies2directors.genre, movies.isenglish","users, directors, actors, movies, movies2actors, movies2directors, u2base"
simpson_episodes,How old was composer of the show when he was nominated for Emmy's Outstanding Music Composition for a Series in 2009. Indicate his full name as well.,"SELECT t1.year - t2.birthdate as agein2009, t2.name FROM award as t1 inner JOIN person as t2 ON t1.person = t2.name WHERE t1.role = 'composer' AND t1.organization = 'Primetime Emmy awards' AND t1.award = 'Outstanding Music Composition for a Series (Original Dramatic Score)' AND t1.result = 'Nominee' AND t1.year = 2009;","CREATE TABLE `award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","award, person","award.year, person.birthdate, person.name, award.person, award.role, award.organization, award.award, award.result","Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
image_and_language,To which predicted relation class does the self-relation of the object sample in image no.5 belong?,SELECT t1.pred_class FROM pred_classES as t1 inner JOIN img_rel as t2 ON t1.pred_class_ID = t2.pred_class_ID WHERE t2.img_id = 5 AND t2.obj1_sample_id = t2.obj2_sample_id,"CREATE TABLE `pred_classES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `pred_classES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `img_rel` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `img_rel`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

","CREATE TABLE `ATT_CLASSES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `ATT_CLASSES`:
0, building s
1, indoors
2, cluttered

CREATE TABLE `OBJ_CLASSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLASSES`:
0, awning
1, goggles
2, dot

CREATE TABLE `IMG_OBJ` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `IMG_OBJ`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `IMG_OBJ_ATT` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_OBJ_ATT`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `PRED_CLASSES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `PRED_CLASSES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `IMG_REL` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_REL`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

","pred_classES, img_rel","pred_classES.pred_class, pred_classES.pred_class_ID, img_rel.pred_class_ID, img_rel.img_id, img_rel.obj1_sample_id, img_rel.obj2_sample_id","ATT_CLASSES, OBJ_CLASSES, IMG_OBJ, IMG_OBJ_ATT, PRED_CLASSES, IMG_REL"
olympics,How many athletes competed in the 1992 Summer Olympics?,SELECT COUNT(t2.person_id) FROM games as t1 inner JOIN games_competitor as t2 ON t1.id = t2.games_id WHERE t1.games_name = '1928 Summer',"CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

","CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `medal` (
  id INTEGER,
  medal_name TEXT
);
Sample rows from `medal`:
1, Gold
2, Silver
3, Bronze

CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `sport` (
  id INTEGER,
  sport_name TEXT
);
Sample rows from `sport`:
1, Aeronautics
2, Alpine Skiing
3, Alpinism

CREATE TABLE `event` (
  id INTEGER,
  sport_id INTEGER REFERENCES sport(id),
  event_name TEXT
);
Sample rows from `event`:
1, 9, Basketball Men's Basketball
2, 33, Judo Men's Extra-Lightweight
3, 25, Football Men's Football

CREATE TABLE `competitor_event` (
  event_id INTEGER REFERENCES event(id),
  competitor_id INTEGER REFERENCES games_competitor(id),
  medal_id INTEGER REFERENCES medal(id)
);
Sample rows from `competitor_event`:
1, 1, 4
2, 2, 4
3, 3, 4

","games, games_competitor","games_competitor.person_id, games.id, games_competitor.games_id, games.games_name","city, games, games_city, medal, noc_region, person, games_competitor, person_region, sport, event, competitor_event"
video_games,Which publisher published the most games?,"SELECt t.publisher_name FROM ( SELECt t1.publisher_name, COUNT(DIStINCt t2.game_id) FROM publisher as t1 inner JOIN game_publisher as t2 ON t1.id = t2.publisher_id GROUP BY t1.publisher_name ORDER BY COUNT(DIStINCt t2.game_id) DESC LIMIt 1 ) t","CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

","CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

","publisher, game_publisher","publisher.publisher_name, game_publisher.game_id, publisher.id, game_publisher.publisher_id","genre, game, platform, publisher, game_publisher, game_platform, region, region_sales"
sales,"What is the total cost of all the ""Road-650, Red, 60"" products that Abraham E. Bennet sold?","SELECT SUM(t2.quantity * t3.price) FROM employees as t1 inner JOIN sales as t2 ON t1.employeeid = t2.salesPersonID inner JOIN products as t3 ON t2.productid = t3.productid WHERE t1.firstname = 'Abraham' AND t1.middleinitial = 'e' AND t1.lastname = 'Bennet' AND t3.name = 'Road-650 Red, 60'","CREATE TABLE `employees` (
  EmployeeID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `employees`:
1, Abraham, e, Bennet
2, Reginald, l, Blotchet-Halls
3, Cheryl, a, Carson

CREATE TABLE `sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

CREATE TABLE `products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Employees`:
1, Abraham, e, Bennet
2, Reginald, l, Blotchet-Halls
3, Cheryl, a, Carson

CREATE TABLE `Products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

CREATE TABLE `Sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `Sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

","employees, sales, products","sales.quantity, products.price, employees.employeeid, sales.salesPersonID, sales.productid, products.productid, employees.firstname, employees.middleinitial, employees.lastname, products.name","Customers, Employees, Products, Sales"
video_games,How many games were released in the year 2001?,SELECt COUNT(id) FROM game_platform as t WHERE t.release_year = 2001,"CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

","CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

",game_platform,"id, game_platform.release_year","genre, game, platform, publisher, game_publisher, game_platform, region, region_sales"
regional_sales,List all orders where its products were shipped from Daly City.,SELECt t FROM ( SELECt DistINCt case  when t2.`city name` = 'Daly city' tHEN t1.ordernumber end as t FROM `sales orders` t1 inner JOIN `store locations` t2 ON t2.storeID = t1._storeID ) WHERE t is NOt null,"CREATE TABLE `sales orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `sales orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

CREATE TABLE `store locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `store locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  Customer Names TEXT
);
Sample rows from `Customers`:
1, Avon Corp
2, WakeFern 
3, Elorac, Corp

CREATE TABLE `Products` (
  ProductID INTEGER,
  Product Name TEXT
);
Sample rows from `Products`:
1, Cookware
2, Photo Frames
3, Table Lamps

CREATE TABLE `Regions` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `Regions`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `Sales Team` (
  SalesTeamID INTEGER,
  Sales Team TEXT,
  Region TEXT
);
Sample rows from `Sales Team`:
1, Adam Hernandez, Northeast
2, Keith Griffin, Northeast
3, Jerry Green, West

CREATE TABLE `Store Locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `Store Locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

CREATE TABLE `Sales Orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `Sales Orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

","sales orders, store locations","store locations.city name, sales orders.ordernumber, store locations.storeID, sales orders._storeID","Customers, Products, Regions, Sales Team, Store Locations, Sales Orders"
books,What is the status of the orders placed on 04/10/2022?,SELECT DISTINCT t1.status_value FROM order_status as t1 inner JOIN order_history as t2 ON t1.status_id = t2.status_id inner JOIN cust_order as t3 ON t3.order_id = t2.order_id WHERE t3.order_date LIKE '2022-04-10%',"CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","order_status, order_history, cust_order","order_status.status_value, order_status.status_id, order_history.status_id, cust_order.order_id, order_history.order_id, cust_order.order_date","address_status, author, book_language, country, address, customer, customer_address, order_status, publisher, book, book_author, shipping_method, cust_order, sqlite_sequence, order_history, order_line"
authors,How many authors are affiliated with NASA Langley Research Center?,SELECT COUNT(name) FROM author WHERE affiliation = 'NASA Langley Research Center',"CREATE TABLE `author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

","CREATE TABLE `Author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `Author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

CREATE TABLE `Conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

CREATE TABLE `Journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `Paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `Paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `PaperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `PaperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

",author,"name, affiliation","Author, Conference, Journal, Paper, PaperAuthor"
retail_world,"Which category does ""tofu"" belong to?",SELECT t2.categoryname FROM products as t1 inner JOIN categories as t2 ON t1.categoryid = t2.categoryid WHERE t1.productname = 'Tofu',"CREATE TABLE `products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

","products, categories","categories.categoryname, products.categoryid, categories.categoryid, products.productname","sqlite_sequence, Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails"
books,"Which country does the customer with the email ""rturbitt2@geocities.jp"" from?",SELECT t4.country_name FROM customer as t1 inner JOIN customer_address as t2 ON t1.customer_id = t2.customer_id inner JOIN address as t3 ON t3.address_id = t2.address_id inner JOIN country as t4 ON t4.country_id = t3.country_id WHERE t1.email = 'rturbitt2@geocities.jp',"CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","customer, customer_address, address, country","country.country_name, customer.customer_id, customer_address.customer_id, address.address_id, customer_address.address_id, country.country_id, address.country_id, customer.email","address_status, author, book_language, country, address, customer, customer_address, order_status, publisher, book, book_author, shipping_method, cust_order, sqlite_sequence, order_history, order_line"
sales,Which product has the highest total amount of quantity sold? Calculate its overall total price.,"SELECT t1.name, SUM(t2.quantity * t1.price) FROM products as t1 inner JOIN sales as t2 ON t1.productid = t2.productid GROUP BY t1.productid, t1.name ORDER BY SUM(t2.quantity) DESC LIMIT 1","CREATE TABLE `products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

CREATE TABLE `sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Employees`:
1, Abraham, e, Bennet
2, Reginald, l, Blotchet-Halls
3, Cheryl, a, Carson

CREATE TABLE `Products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

CREATE TABLE `Sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `Sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

","products, sales","products.name, sales.quantity, products.price, products.productid, sales.productid","Customers, Employees, Products, Sales"
retail_complains,List by their ID the complaints received by the company on 25/09/2014 that took the longest.,"SELECT `complaint id` FROM events WHERE strftime('%J', `date sent to company`) - strftime('%J', `date received`) = ( SELECT MAX(strftime('%J', `date sent to company`) - strftime('%J', `date received`)) FROM events WHERE `date sent to company` = '2014-09-25' ) AND `date sent to company` = '2014-09-25'","CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

","CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

",events,"complaint id, date sent to company, date received","state, callcenterlogs, client, district, events, reviews"
restaurant,What is the name of the most popular restaurant serving Asian foods in San Francisco?,SELECT label FROM generalinfo WHERE food_type = 'asian' AND city = 'san francisco' AND review = ( SELECT MAX(review) FROM generalinfo WHERE food_type = 'asian' AND city = 'san francisco' ),"CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

","CREATE TABLE `geographic` (
  city TEXT PRIMARY KEY,
  county TEXT,
  region TEXT
);
Sample rows from `geographic`:
alameda, alameda county, bay area
alamo, contra costa county, bay area
albany, alameda county, bay area

CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

",generalinfo,"label, food_type, city, review","geographic, generalinfo, location"
food_inspection_2,How many inspections with critical food safety problems are under inspection point id 3?,SELECT COUNT(inspection_id) FROM violation WHERE point_id = 3 AND fine = 500,"CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

",violation,"inspection_id, point_id, fine","employee, establishment, inspection, inspection_point, violation"
olympics,How many Summer games are there that were held in Paris?,SELECT COUNT(t3.id) FROM games_city as t1 inner JOIN city as t2 ON t1.city_id = t2.id inner JOIN games as t3 ON t1.games_id = t3.id WHERE t2.city_name = 'Paris' AND t3.season = 'Summer',"CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

","CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `medal` (
  id INTEGER,
  medal_name TEXT
);
Sample rows from `medal`:
1, Gold
2, Silver
3, Bronze

CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `sport` (
  id INTEGER,
  sport_name TEXT
);
Sample rows from `sport`:
1, Aeronautics
2, Alpine Skiing
3, Alpinism

CREATE TABLE `event` (
  id INTEGER,
  sport_id INTEGER REFERENCES sport(id),
  event_name TEXT
);
Sample rows from `event`:
1, 9, Basketball Men's Basketball
2, 33, Judo Men's Extra-Lightweight
3, 25, Football Men's Football

CREATE TABLE `competitor_event` (
  event_id INTEGER REFERENCES event(id),
  competitor_id INTEGER REFERENCES games_competitor(id),
  medal_id INTEGER REFERENCES medal(id)
);
Sample rows from `competitor_event`:
1, 1, 4
2, 2, 4
3, 3, 4

","games_city, city, games","games.id, games_city.city_id, city.id, games_city.games_id, city.city_name, games.season","city, games, games_city, medal, noc_region, person, games_competitor, person_region, sport, event, competitor_event"
retail_world,What is the difference in the number of employees from the UK and the USA who work as sales representatives?,SELECT ( SELECT COUNT(title) FROM employees WHERE country = 'UK' AND title = 'Sales Representative' ) - ( SELECT COUNT(title) FROM employees WHERE country = 'USA' AND title = 'Sales Representative' ) as difference,"CREATE TABLE `employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

",employees,"title, country","sqlite_sequence, Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails"
image_and_language,"Name number of samples of ""bed"" object are there in the image No.1098?",SELECT SUM(case when t2.obj_class = 'bed' then 1 else 0 end) FROM img_obj as t1 inner JOIN obj_classES as t2 ON t1.obj_class_ID = t2.obj_class_ID WHERE t1.img_id = 1098,"CREATE TABLE `img_obj` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `img_obj`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `obj_classES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `obj_classES`:
0, awning
1, goggles
2, dot

","CREATE TABLE `ATT_CLASSES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `ATT_CLASSES`:
0, building s
1, indoors
2, cluttered

CREATE TABLE `OBJ_CLASSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLASSES`:
0, awning
1, goggles
2, dot

CREATE TABLE `IMG_OBJ` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `IMG_OBJ`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `IMG_OBJ_ATT` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_OBJ_ATT`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `PRED_CLASSES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `PRED_CLASSES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `IMG_REL` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_REL`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

","img_obj, obj_classES","obj_classES.obj_class, img_obj.obj_class_ID, obj_classES.obj_class_ID, img_obj.img_id","ATT_CLASSES, OBJ_CLASSES, IMG_OBJ, IMG_OBJ_ATT, PRED_CLASSES, IMG_REL"
retail_complains,Pick 5 clients with 0 priority and write down their last name.,SELECT t1.last FROM client as t1 inner JOIN callcenterlogs as t2 ON t1.client_id = t2.`rand client` WHERE t2.priority = 0 LIMIT 5,"CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

","CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

","client, callcenterlogs","client.last, client.client_id, callcenterlogs.rand client, callcenterlogs.priority","state, callcenterlogs, client, district, events, reviews"
retail_complains,What is the name of the state in which there have been the largest number of complaints with priority 0?,SELECT t2.state FROM callcenterlogs as t1 inner JOIN client as t2 ON t1.`rand client` = t2.client_id inner JOIN district as t3 ON t2.district_id = t3.district_id inner JOIN state as t4 ON t3.state_abbrev = t4.statecode WHERE t1.priority = 0 GROUP BY t2.state ORDER BY COUNT(t2.state) DESC LIMIT 1,"CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

","CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

","callcenterlogs, client, district, state","client.state, callcenterlogs.rand client, client.client_id, client.district_id, district.district_id, district.state_abbrev, state.statecode, callcenterlogs.priority","state, callcenterlogs, client, district, events, reviews"
simpson_episodes,What is the name of the person that has the highest number of nominated award but didn't win?,SELECT person FROM award WHERE result = 'Nominee' GROUP BY person ORDER BY COUNT(person) DESC LIMIT 1;,"CREATE TABLE `award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

",award,person,"Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
simpson_episodes,Who produced The simpson 20s: Season 20?,SELECT DISTINCT person FROM credit WHERE role = 'producer';,"CREATE TABLE `credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

",credit,person,"Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
movielens,What is the average occupation of users whose ratings are not more than 2 ?,SELECT AVG(t2.occupation) FROM u2base as t1 inner JOIN users as t2 ON t1.userid = t2.userid WHERE t1.rating < 2,"CREATE TABLE `u2base` (
  userid INTEGER PRIMARY KEY REFERENCES users(None),
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  rating TEXT
);
Sample rows from `u2base`:
2, 1964242, 1
2, 2219779, 1
3, 1856939, 1

CREATE TABLE `users` (
  userid INTEGER,
  age TEXT,
  u_gender TEXT,
  occupation TEXT
);
Sample rows from `users`:
1, 1, F, 2
2, 56, M, 3
3, 25, M, 2

","CREATE TABLE `users` (
  userid INTEGER,
  age TEXT,
  u_gender TEXT,
  occupation TEXT
);
Sample rows from `users`:
1, 1, F, 2
2, 56, M, 3
3, 25, M, 2

CREATE TABLE `directors` (
  directorid INTEGER,
  d_quality INTEGER PRIMARY KEY,
  avg_revenue INTEGER PRIMARY KEY
);
Sample rows from `directors`:
67, 4, 1
92, 2, 3
284, 4, 0

CREATE TABLE `actors` (
  actorid INTEGER,
  a_gender TEXT,
  a_quality INTEGER
);
Sample rows from `actors`:
4, M, 4
16, M, 0
28, M, 4

CREATE TABLE `movies` (
  movieid INTEGER,
  year INTEGER,
  isEnglish TEXT,
  country TEXT,
  runningtime INTEGER
);
Sample rows from `movies`:
1672052, 3, T, other, 2
1672111, 4, T, other, 2
1672580, 4, T, USA, 3

CREATE TABLE `movies2actors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  actorid INTEGER PRIMARY KEY REFERENCES actors(None),
  cast_num INTEGER
);
Sample rows from `movies2actors`:
1672580, 981535, 0
1672946, 1094968, 0
1673647, 149985, 0

CREATE TABLE `movies2directors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  directorid INTEGER PRIMARY KEY REFERENCES directors(None),
  genre TEXT
);
Sample rows from `movies2directors`:
1672111, 54934, Action
1672946, 188940, Action
1679461, 179783, Action

CREATE TABLE `u2base` (
  userid INTEGER PRIMARY KEY REFERENCES users(None),
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  rating TEXT
);
Sample rows from `u2base`:
2, 1964242, 1
2, 2219779, 1
3, 1856939, 1

","u2base, users","users.occupation, u2base.userid, users.userid, u2base.rating","users, directors, actors, movies, movies2actors, movies2directors, u2base"
regional_sales,"Compare the total number of orders between customer ""Apollo Ltd"" and ""Pacific Ltd"".","SELECT SUM(case when t2.`customer names` = 'Apollo Ltd' then 1 else 0 end), SUM(case when t2.`customer names` = 'Pacific Ltd' then 1 else 0 end) FROM `sales orders` as t1 inner JOIN customers as t2 ON t2.customerID = t1._customerID","CREATE TABLE `sales orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `sales orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

CREATE TABLE `customers` (
  CustomerID INTEGER,
  Customer Names TEXT
);
Sample rows from `customers`:
1, Avon Corp
2, WakeFern 
3, Elorac, Corp

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  Customer Names TEXT
);
Sample rows from `Customers`:
1, Avon Corp
2, WakeFern 
3, Elorac, Corp

CREATE TABLE `Products` (
  ProductID INTEGER,
  Product Name TEXT
);
Sample rows from `Products`:
1, Cookware
2, Photo Frames
3, Table Lamps

CREATE TABLE `Regions` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `Regions`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `Sales Team` (
  SalesTeamID INTEGER,
  Sales Team TEXT,
  Region TEXT
);
Sample rows from `Sales Team`:
1, Adam Hernandez, Northeast
2, Keith Griffin, Northeast
3, Jerry Green, West

CREATE TABLE `Store Locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `Store Locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

CREATE TABLE `Sales Orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `Sales Orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

","sales orders, customers","customers.customer names, customers.customerID, sales orders._customerID","Customers, Products, Regions, Sales Team, Store Locations, Sales Orders"
simpson_episodes,What is the awarded category that the awarded character Lenny won?,SELECT DISTINCT t1.award_category FROM award as t1 inner JOIN Character_award as t2 ON t1.award_id = t2.award_id WHERE t2.character = 'Lenny';,"CREATE TABLE `award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","award, Character_award","award.award_category, award.award_id, Character_award.award_id, Character_award.character","Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
student_loan,Calculate the ratio of unemployed students who have never been absent from school.,"SELECT cast(SUM(iif(t2.month = 0, 1, 0)) as real) * 100 / COUNT(t1.name) FROM unemployed as t1 inner JOIN longest_absense_from_school as t2 ON t2.name = t1.name","CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

","unemployed, longest_absense_from_school","longest_absense_from_school.month, unemployed.name, longest_absense_from_school.name","bool, person, disabled, enlist, filed_for_bankrupcy, longest_absense_from_school, male, no_payment_due, unemployed, enrolled"
student_loan,How many male students filed for bankruptcy as compare to female students?,"SELECT COUNT(t2.name) - SUM(iif(t2.name is null, 1, 0)) as num FROM filed_for_bankrupcy as t1 left JOIN male as t2 ON t2.name = t1.name","CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

","filed_for_bankrupcy, male","male.name, filed_for_bankrupcy.name","bool, person, disabled, enlist, filed_for_bankrupcy, longest_absense_from_school, male, no_payment_due, unemployed, enrolled"
beer_factory,"List out the root beer ID for the brand Bulldog, Bundaberg, Dad's, Dog n Suds and Virgil's.","SELECT t1.rootbeerid FROM rootbeer as t1 inner JOIN rootbeerbrand as t2 ON t2.brandid = t1.brandid WHERE t2.brandname IN ('Bulldog', 'Bundaberg', 'Dad''s', 'Dog n Suds', 'Virgil''s')","CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

","CREATE TABLE `customers` (
  CustomerID INTEGER,
  First TEXT,
  Last TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER,
  Email TEXT,
  PhoneNumber TEXT,
  FirstPurchaseDate DATE,
  SubscribedToEmailList TEXT,
  Gender TEXT
);
Sample rows from `customers`:
101811, Kenneth, Walton, 6715 Commonwealth Dr, Sacramento, CA, 94256, walton.k76@fastmail.com, (916) 918-1561, 2013-05-30, FALSE, M
103508, Madeleine, Jones, 3603 Leola Way, Sacramento, CA, 94258, j_madeleine@gmail.com, (916) 186-9423, 2013-02-06, FALSE, F
104939, Damen, Wheeler, 6740 Branwood Way, Orangevale, CA, 95662, dwheeler@outlook.com, (916) 164-1156, 2013-04-11, FALSE, M

CREATE TABLE `geolocation` (
  LocationID INTEGER REFERENCES location(LocationID),
  Latitude REAL,
  Longitude REAL
);
Sample rows from `geolocation`:
0, 0.0, 0.0
1, 38.566129, -121.426432
2, 38.559615, -121.42243

CREATE TABLE `location` (
  LocationID INTEGER REFERENCES geolocation(LocationID),
  LocationName TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER
);
Sample rows from `location`:
0, LOST, None, None, None, None
1, Sac State American River Courtyard, 6000 J St, Sacramento, CA, 95819
2, Sac State Union, 6000 J St, Sacramento, CA, 95819

CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

CREATE TABLE `rootbeerreview` (
  CustomerID INTEGER PRIMARY KEY REFERENCES customers(CustomerID),
  BrandID INTEGER PRIMARY KEY REFERENCES rootbeerbrand(BrandID),
  StarRating INTEGER,
  ReviewDate DATE,
  Review TEXT
);
Sample rows from `rootbeerreview`:
101811, 10012, 5, 2013-07-15, None
101811, 10014, 1, 2013-07-08, None
101811, 10015, 3, 2013-07-25, None

CREATE TABLE `transaction` (
  TransactionID INTEGER,
  CreditCardNumber INTEGER,
  CustomerID INTEGER REFERENCES customers(CustomerID),
  TransactionDate DATE,
  CreditCardType TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  RootBeerID INTEGER REFERENCES rootbeer(RootBeerID),
  PurchasePrice REAL
);
Sample rows from `transaction`:
100000, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105661, 3.0
100001, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105798, 3.0
100002, 6011583832864739, 864896, 2014-07-07, Discover, 2, 102514, 3.0

","rootbeer, rootbeerbrand","rootbeer.rootbeerid, rootbeerbrand.brandid, rootbeer.brandid, rootbeerbrand.brandname","customers, geolocation, location, rootbeerbrand, rootbeer, rootbeerreview, transaction"
law_episode,What is the ratio of American casts on episode 2 of the series? Please include their roles.,"SELECT cast(SUM(case when t2.category = 'Cast' then 1 else 0 end) as real) * 100 / COUNT(t2.category), t1.role FROM award as t1 inner JOIN credit as t2 ON t1.episode_id = t2.episode_id inner JOIN episode as t3 ON t2.episode_id = t3.episode_id inner JOIN person as t4 ON t2.person_id = t4.person_id WHERE t3.episode = 2 AND t4.birth_country = 'USA'","CREATE TABLE `award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  series TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  person_id TEXT REFERENCES Person(person_id),
  role TEXT,
  result TEXT
);
Sample rows from `award`:
258, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0937725, None, Winner
259, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0792309, None, Winner
260, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0049569, None, Winner

CREATE TABLE `credit` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  person_id TEXT PRIMARY KEY REFERENCES Person(person_id),
  category TEXT,
  role TEXT,
  credited TEXT
);
Sample rows from `credit`:
tt0629204, nm0226352, Additional Crew, technical advisor, true
tt0629204, nm0506974, Additional Crew, production accountant, true
tt0629204, nm4103116, Additional Crew, production accountant, true

CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
tt0629239, nun
tt0629239, priest
tt0629420, police officer

CREATE TABLE `Person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  series TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  person_id TEXT REFERENCES Person(person_id),
  role TEXT,
  result TEXT
);
Sample rows from `Award`:
258, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0937725, None, Winner
259, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0792309, None, Winner
260, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0049569, None, Winner

CREATE TABLE `Credit` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  person_id TEXT PRIMARY KEY REFERENCES Person(person_id),
  category TEXT,
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
tt0629204, nm0226352, Additional Crew, technical advisor, true
tt0629204, nm0506974, Additional Crew, production accountant, true
tt0629204, nm4103116, Additional Crew, production accountant, true

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
tt0629204, 10, 36, 17.7
tt0629204, 9, 39, 19.2
tt0629204, 8, 64, 31.5

","award, credit, episode, person","credit.category, award.role, award.episode_id, credit.episode_id, episode.episode_id, credit.person_id, person.person_id, episode.episode, person.birth_country","Episode, Keyword, Person, Award, Credit, Vote"
movie,"What is the MPAA rating for the movie with the character named ""Peter Quill"" in it?",SELECT t1.`mpaa rating` FROM movie as t1 inner JOIN characters as t2 ON t1.movieid = t2.movieid WHERE t2.`character name` = 'Peter Quill',"CREATE TABLE `movie` (
  MovieID INTEGER,
  Title TEXT,
  MPAA Rating TEXT,
  Budget INTEGER,
  Gross INTEGER,
  Release Date TEXT,
  Genre TEXT,
  Runtime INTEGER,
  Rating REAL,
  Rating Count INTEGER,
  Summary TEXT
);
Sample rows from `movie`:
1, Look Who's Talking, PG-13, 7500000, 296000000, 1989-10-12, Romance, 93, 5.9, 73638, After a single, career-minded woman is left on her own to give birth to the child of a married man, she finds a new romantic chance in a cab driver. Meanwhile, the point-of-view of the newborn boy is narrated through voice-over.
2, Driving Miss Daisy, PG, 7500000, 145793296, 1989-12-13, Comedy, 99, 7.4, 91075, An old Jewish woman and her African-American chauffeur in the American South have a relationship that grows and improves over the years.
3, Turner & Hooch, PG, 13000000, 71079915, 1989-07-28, Crime, 100, 7.2, 91415, Det. Scott Turner (Tom Hanks) is an uptight, by-the-book police officer. When his friend Amos Reed (John McIntire), the proprietor of a junkyard, is killed, Turner reluctantly inherits the man's dog. Turner adjusts to life with the dog to help solve a murder case.

CREATE TABLE `characters` (
  MovieID INTEGER PRIMARY KEY REFERENCES movie(MovieID),
  ActorID INTEGER PRIMARY KEY REFERENCES actor(ActorID),
  Character Name TEXT,
  creditOrder INTEGER,
  pay TEXT,
  screentime TEXT
);
Sample rows from `characters`:
1, 1, James, 1, None, None
1, 2, Mollie, 2, None, None
1, 3, Rosie, 3, None, None

","CREATE TABLE `actor` (
  ActorID INTEGER,
  Name TEXT,
  Date of Birth DATE,
  Birth City TEXT,
  Birth Country TEXT,
  Height (Inches) INTEGER,
  Biography TEXT,
  Gender TEXT,
  Ethnicity TEXT,
  NetWorth TEXT
);
Sample rows from `actor`:
1, John Travolta, 1954-02-18, Englewood, USA, 74, John Joseph Travolta was born in Englewood, New Jersey, one of six children of Helen Travolta (n�e Helen Cecilia Burke) and Salvatore/Samuel J. Travolta. His father was of Italian descent and his mother was of Irish ancestry. His father owned a tire repair shop called Travolta Tires in Hillsdale, NJ. Travolta started acting appearing in a local ..., Male, White, $250,000,000.00
2, Kirstie Alley, 1951-01-12, Wichita, USA, 67, None, Female, White, $40,000,000.00
3, Olympia Dukakis, 1931-06-20, Lowell, USA, 63, Long a vital, respected lady of the classic and contemporary stage this grand lady did not become a household name and sought-after film actress until age 56 when she turned in a glorious, Oscar-winning perf as Cher's sardonic mother in the romantic comedy Moonstruck (1987). Since then movie (and TV) fans have discovered what the East coast ..., Female, White, $6,000,000.00

CREATE TABLE `movie` (
  MovieID INTEGER,
  Title TEXT,
  MPAA Rating TEXT,
  Budget INTEGER,
  Gross INTEGER,
  Release Date TEXT,
  Genre TEXT,
  Runtime INTEGER,
  Rating REAL,
  Rating Count INTEGER,
  Summary TEXT
);
Sample rows from `movie`:
1, Look Who's Talking, PG-13, 7500000, 296000000, 1989-10-12, Romance, 93, 5.9, 73638, After a single, career-minded woman is left on her own to give birth to the child of a married man, she finds a new romantic chance in a cab driver. Meanwhile, the point-of-view of the newborn boy is narrated through voice-over.
2, Driving Miss Daisy, PG, 7500000, 145793296, 1989-12-13, Comedy, 99, 7.4, 91075, An old Jewish woman and her African-American chauffeur in the American South have a relationship that grows and improves over the years.
3, Turner & Hooch, PG, 13000000, 71079915, 1989-07-28, Crime, 100, 7.2, 91415, Det. Scott Turner (Tom Hanks) is an uptight, by-the-book police officer. When his friend Amos Reed (John McIntire), the proprietor of a junkyard, is killed, Turner reluctantly inherits the man's dog. Turner adjusts to life with the dog to help solve a murder case.

CREATE TABLE `characters` (
  MovieID INTEGER PRIMARY KEY REFERENCES movie(MovieID),
  ActorID INTEGER PRIMARY KEY REFERENCES actor(ActorID),
  Character Name TEXT,
  creditOrder INTEGER,
  pay TEXT,
  screentime TEXT
);
Sample rows from `characters`:
1, 1, James, 1, None, None
1, 2, Mollie, 2, None, None
1, 3, Rosie, 3, None, None

","movie, characters","movie.mpaa rating, movie.movieid, characters.movieid, characters.character name","actor, movie, characters"
simpson_episodes,What are the keywords of the episode which has title as Dangerous Curves?,SELECT t2.keyword FROM episode as t1 inner JOIN keyword as t2 ON t1.episode_id = t2.episode_id WHERE t1.title = 'Dangerous Curves';,"CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","episode, keyword","keyword.keyword, episode.episode_id, keyword.episode_id, episode.title","Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
ice_hockey_draft,List the names of all players in team Avangard Omsk in season 2000-2001.,SELECT DISTINCT t2.playername FROM seasonstatus as t1 inner JOIN playerinfo as t2 ON t1.eliteid = t2.eliteid WHERE t1.SEasON = '2000-2001' AND t1.team = 'Avangard Omsk',"CREATE TABLE `seasonstatus` (
  ELITEID INTEGER REFERENCES PlayerInfo(ELITEID),
  SEASON TEXT,
  TEAM TEXT,
  LEAGUE TEXT,
  GAMETYPE TEXT,
  GP INTEGER,
  G INTEGER,
  A INTEGER,
  P INTEGER,
  PIM INTEGER,
  PLUSMINUS INTEGER
);
Sample rows from `seasonstatus`:
3667, 1997-1998, Rimouski Oceanic, QMJHL, Regular Season, 58, 44, 71, 115, 117, 27
3667, 1997-1998, Rimouski Oceanic, QMJHL, Playoffs, 18, 15, 26, 41, 46, 4
3667, 1997-1998, Canada U20, WJC-20, Regular Season, 7, 1, 1, 2, 4, 0

CREATE TABLE `playerinfo` (
  ELITEID INTEGER,
  PlayerName TEXT,
  birthdate TEXT,
  birthyear DATE,
  birthmonth INTEGER,
  birthday INTEGER,
  birthplace TEXT,
  nation TEXT,
  height INTEGER REFERENCES height_info(height_id),
  weight INTEGER REFERENCES weight_info(weight_id),
  position_info TEXT,
  shoots TEXT,
  draftyear INTEGER,
  draftround INTEGER,
  overall INTEGER,
  overallby TEXT,
  CSS_rank INTEGER,
  sum_7yr_GP INTEGER,
  sum_7yr_TOI INTEGER,
  GP_greater_than_0 TEXT
);
Sample rows from `playerinfo`:
9, David Bornhammar, 1981-06-15, 1981, 6, 15, Lidingo, SWE, Sweden, 73, 198, D, L, 1999, 7, 192, Washington Capitals, 192, 0, 0, no
18, David Printz, 1980-07-24, 1980, 7, 24, Stockholm, SWE, Sweden, 76, 220, D, L, 2001, 7, 225, Philadelphia Flyers, 176, 13, 84, yes
27, Yared Hagos, 1983-03-27, 1983, 3, 27, Stockholm, SWE, Sweden, 73, 218, C, L, 2001, 3, 70, Dallas Stars, 24, 0, 0, no

","CREATE TABLE `height_info` (
  height_id INTEGER,
  height_in_cm INTEGER,
  height_in_inch TEXT
);
Sample rows from `height_info`:
65, 165, 5'5""
67, 170, 5'7""
68, 172, 5'8""

CREATE TABLE `weight_info` (
  weight_id INTEGER,
  weight_in_kg INTEGER,
  weight_in_lbs INTEGER
);
Sample rows from `weight_info`:
154, 70, 154
159, 72, 159
161, 73, 161

CREATE TABLE `PlayerInfo` (
  ELITEID INTEGER,
  PlayerName TEXT,
  birthdate TEXT,
  birthyear DATE,
  birthmonth INTEGER,
  birthday INTEGER,
  birthplace TEXT,
  nation TEXT,
  height INTEGER REFERENCES height_info(height_id),
  weight INTEGER REFERENCES weight_info(weight_id),
  position_info TEXT,
  shoots TEXT,
  draftyear INTEGER,
  draftround INTEGER,
  overall INTEGER,
  overallby TEXT,
  CSS_rank INTEGER,
  sum_7yr_GP INTEGER,
  sum_7yr_TOI INTEGER,
  GP_greater_than_0 TEXT
);
Sample rows from `PlayerInfo`:
9, David Bornhammar, 1981-06-15, 1981, 6, 15, Lidingo, SWE, Sweden, 73, 198, D, L, 1999, 7, 192, Washington Capitals, 192, 0, 0, no
18, David Printz, 1980-07-24, 1980, 7, 24, Stockholm, SWE, Sweden, 76, 220, D, L, 2001, 7, 225, Philadelphia Flyers, 176, 13, 84, yes
27, Yared Hagos, 1983-03-27, 1983, 3, 27, Stockholm, SWE, Sweden, 73, 218, C, L, 2001, 3, 70, Dallas Stars, 24, 0, 0, no

CREATE TABLE `SeasonStatus` (
  ELITEID INTEGER REFERENCES PlayerInfo(ELITEID),
  SEASON TEXT,
  TEAM TEXT,
  LEAGUE TEXT,
  GAMETYPE TEXT,
  GP INTEGER,
  G INTEGER,
  A INTEGER,
  P INTEGER,
  PIM INTEGER,
  PLUSMINUS INTEGER
);
Sample rows from `SeasonStatus`:
3667, 1997-1998, Rimouski Oceanic, QMJHL, Regular Season, 58, 44, 71, 115, 117, 27
3667, 1997-1998, Rimouski Oceanic, QMJHL, Playoffs, 18, 15, 26, 41, 46, 4
3667, 1997-1998, Canada U20, WJC-20, Regular Season, 7, 1, 1, 2, 4, 0

","seasonstatus, playerinfo","playerinfo.playername, seasonstatus.eliteid, playerinfo.eliteid, seasonstatus.SEasON, seasonstatus.team","height_info, weight_info, PlayerInfo, SeasonStatus"
public_review_platform,"Which closed/not running Yelp business in ""Sun City"" has got the most reviews? Give the business id.",SELECT t1.business_id FROM business as t1 inner JOIN reviews as t2 ON t1.business_id = t2.business_id WHERE t1.city LIKE 'Sun City' AND t1.active LIKE 'FALSE' GROUP BY t1.business_id ORDER BY COUNT(t2.review_length) DESC LIMIT 1,"CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","business, reviews","business.business_id, reviews.business_id, business.city, business.active, reviews.review_length","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
regional_sales,Indicate the name of the customers who have placed an order of 3 units in February 2018.,SELECt t FROM ( SELECt DistINCt case  when t2.`order quantity` = 3 AND t2.orderDate LIKE '2/%/18' tHEN t1.`customer names` end as t FROM customers t1 inner JOIN `sales orders` t2 ON t2._customerID = t1.customerID ) WHERE t is NOt null,"CREATE TABLE `customers` (
  CustomerID INTEGER,
  Customer Names TEXT
);
Sample rows from `customers`:
1, Avon Corp
2, WakeFern 
3, Elorac, Corp

CREATE TABLE `sales orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `sales orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  Customer Names TEXT
);
Sample rows from `Customers`:
1, Avon Corp
2, WakeFern 
3, Elorac, Corp

CREATE TABLE `Products` (
  ProductID INTEGER,
  Product Name TEXT
);
Sample rows from `Products`:
1, Cookware
2, Photo Frames
3, Table Lamps

CREATE TABLE `Regions` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `Regions`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `Sales Team` (
  SalesTeamID INTEGER,
  Sales Team TEXT,
  Region TEXT
);
Sample rows from `Sales Team`:
1, Adam Hernandez, Northeast
2, Keith Griffin, Northeast
3, Jerry Green, West

CREATE TABLE `Store Locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `Store Locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

CREATE TABLE `Sales Orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `Sales Orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

","customers, sales orders","sales orders.order quantity, sales orders.orderDate, customers.customer names, sales orders._customerID, customers.customerID","Customers, Products, Regions, Sales Team, Store Locations, Sales Orders"
university,Calculate the average number of students of all universities in 2012.,SELECT AVG(num_students) FROM university_year WHERE year = 2012,"CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

","CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

CREATE TABLE `ranking_system` (
  id INTEGER,
  system_name TEXT
);
Sample rows from `ranking_system`:
1, Times Higher Education World University Ranking
2, Shanghai Ranking
3, Center for World University Rankings

CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

",university_year,num_students,"country, ranking_system, ranking_criteria, university, university_ranking_year, university_year"
world,In which continent does the country with the smallest surface area belongs?,SELECT continent FROM country ORDER BY surfacearea LIMIT 1,"CREATE TABLE `country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
City, 4079

CREATE TABLE `City` (
  ID INTEGER,
  Name TEXT,
  CountryCode TEXT REFERENCES Country(Code),
  District TEXT,
  Population INTEGER
);
Sample rows from `City`:
1, Kabul, AFG, Kabol, 1780000
2, Qandahar, AFG, Qandahar, 237500
3, Herat, AFG, Herat, 186800

CREATE TABLE `Country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `Country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

CREATE TABLE `CountryLanguage` (
  CountryCode TEXT PRIMARY KEY REFERENCES Country(Code),
  Language TEXT PRIMARY KEY,
  IsOfficial TEXT,
  Percentage REAL
);
Sample rows from `CountryLanguage`:
ABW, Dutch, T, 5.3
ABW, English, F, 9.5
ABW, Papiamento, F, 76.7

",country,"continent, surfacearea","sqlite_sequence, City, Country, CountryLanguage"
retail_world,What is the country location of the employee who handled order id 10257?,SELECT t1.country FROM employees as t1 inner JOIN orders as t2 ON t1.employeeid = t2.employeeid WHERE t2.orderid = 10257,"CREATE TABLE `employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

","employees, orders","employees.country, employees.employeeid, orders.employeeid, orders.orderid","sqlite_sequence, Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails"
university,Calculate the number of international students of University of Wisconsin-Madison in 2013.,SELECT cast(t1.num_students * t1.pct_international_students as real) / 100 FROM university_year as t1 inner JOIN university as t2 ON t1.university_id = t2.id WHERE t1.year = 2013 AND t2.university_name = 'University of Wisconsin-Madison',"CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

","CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

CREATE TABLE `ranking_system` (
  id INTEGER,
  system_name TEXT
);
Sample rows from `ranking_system`:
1, Times Higher Education World University Ranking
2, Shanghai Ranking
3, Center for World University Rankings

CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

","university_year, university","university_year.num_students, university_year.pct_international_students, university_year.university_id, university.id, university_year.year, university.university_name","country, ranking_system, ranking_criteria, university, university_ranking_year, university_year"
retail_world,What is the average price of products with more than fifty units in stock?,SELECT SUM(unitprice) / COUNT(unitprice) FROM products WHERE unitsinstock > 50,"CREATE TABLE `products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

",products,"unitprice, unitsinstock","sqlite_sequence, Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails"
cookbook,List the names of alcohol free recipes.,SELECT t1.title FROM recipe as t1 inner JOIN nutrition as t2 ON t1.recipe_id = t2.recipe_id WHERE t2.alcohol = 0,"CREATE TABLE `recipe` (
  recipe_id INTEGER,
  title TEXT,
  subtitle TEXT,
  servings INTEGER,
  yield_unit TEXT,
  prep_min INTEGER,
  cook_min INTEGER,
  stnd_min INTEGER,
  source TEXT,
  intro TEXT,
  directions TEXT
);
Sample rows from `recipe`:
214, Raspberry Chiffon Pie, None, 10, 1 pie, 20, 8, 305, The California Tree Fruit Agreement, None, For crust, preheat oven to 375 degrees F.
In lightly greased 10-inch pie plate, combine graham cracker crumbs, melted butter and 1/4 cup sugar. Press evenly on bottom and up side of plate. Bake 5 minutes; cool.

For filling, in medium saucepan, combine juice or water and gelatin; let stand 5 minutes. Add 1/3 cup sugar and heat over medium heat, stirring to dissolve gelatin. In blender or food processor, puree 6 plums. Add puree and raspberries to gelatin mixture. Refrigerate until mixture begins to set about 1 hour. Stir yogurt into fruit mixture. In large bowl, beat egg whites until frothy. Gradually add cream of tartar and remaining 1/3 cup sugar and beat until stiff peaks form. Gently fold egg whites into fruit mixture so as not to reduce volume. Spoon into crust. Refrigerate 4 hours or overnight. Thinly slice remaining 2 plums and garnish top of pie.
215, Apricot Yogurt Parfaits, None, 4, None, 5, 2, 65, Produce for Better Health Foundation and 5 a Day, None, Drain canned apricots, pour 1/4 cup of the juice into saucepan or microwave-safe dish. Sprinkle gelatin over juice and let stand for 5 minutes to soften. Warm over low heat or microwave at medium (50% power) for 30 seconds or until gelatin has dissolved.
 
In food processor or blender, puree canned apricots; add lemon juice brandy, yogurt and gelatin mixture and process for 30 seconds or until combined.
 
Pour into parfait or stemmed glasses or champagne flutes. Cover and refrigerate until set, at least 1 hour or overnight.
 
Just before serving arrange fresh apricots on top. (If apricots are not available substitute kiwi slices or berries). Garnish each with a small spoonful of yogurt and sprinkling of brown sugar or mint.
216, Fresh Apricot Bavarian, None, 8, None, 5, 13, 0, The California Apricot Advisory Board, Serve in stemmed glasses and top with sliced apricots for elegant endings., Drop apricots into boiling water to cover. Return to boil and simmer for 5 minutes or until skins begin to split. Drain and rinse under cold water. Halve fruit and discard skins and pits. Puree apricots in electric blender. Combine water and gelatin in small saucepan; stir over low heat until dissolved. Mix sugar, apricot puree and yogurt with a wire whip until smooth; mix in dissolved gelatin. Sweeten to taste if desired. Chill mixture until thick. Spoon into stemmed glasses.

Note: One pound fresh apricots is 15 to 20. One and a half envelopes gelatin is 4 teaspoons.

CREATE TABLE `nutrition` (
  recipe_id INTEGER REFERENCES Recipe(recipe_id),
  protein REAL,
  carbo REAL,
  alcohol REAL,
  total_fat REAL,
  sat_fat REAL,
  cholestrl REAL,
  sodium REAL,
  iron REAL,
  vitamin_c REAL,
  vitamin_a REAL,
  fiber REAL,
  pcnt_cal_carb REAL,
  pcnt_cal_fat REAL,
  pcnt_cal_prot REAL,
  calories REAL
);
Sample rows from `nutrition`:
214, 5.47, 41.29, 0.0, 11.53, 2.21, 1.39, 260.78, 0.81, 8.89, 586.2, 0.87, 56.8, 35.68, 7.53, 290.79
215, 5.7, 23.75, 1.93, 1.08, 0.58, 3.48, 46.17, 0.57, 13.02, 2738.24, 0.62, 67.38, 6.89, 16.17, 141.01
216, 4.9, 26.88, 0.0, 1.1, 0.58, 3.46, 41.79, 0.37, 6.13, 1521.1, 0.34, 78.45, 7.24, 14.3, 137.06

","CREATE TABLE `Ingredient` (
  ingredient_id INTEGER,
  category TEXT,
  name TEXT,
  plural TEXT
);
Sample rows from `Ingredient`:
1, dairy, 1% lowfat cottage cheese, None
6, dairy, 1% lowfat milk, None
10, Mexican products, 10-inch flour tortilla, s

CREATE TABLE `Recipe` (
  recipe_id INTEGER,
  title TEXT,
  subtitle TEXT,
  servings INTEGER,
  yield_unit TEXT,
  prep_min INTEGER,
  cook_min INTEGER,
  stnd_min INTEGER,
  source TEXT,
  intro TEXT,
  directions TEXT
);
Sample rows from `Recipe`:
214, Raspberry Chiffon Pie, None, 10, 1 pie, 20, 8, 305, The California Tree Fruit Agreement, None, For crust, preheat oven to 375 degrees F.
In lightly greased 10-inch pie plate, combine graham cracker crumbs, melted butter and 1/4 cup sugar. Press evenly on bottom and up side of plate. Bake 5 minutes; cool.

For filling, in medium saucepan, combine juice or water and gelatin; let stand 5 minutes. Add 1/3 cup sugar and heat over medium heat, stirring to dissolve gelatin. In blender or food processor, puree 6 plums. Add puree and raspberries to gelatin mixture. Refrigerate until mixture begins to set about 1 hour. Stir yogurt into fruit mixture. In large bowl, beat egg whites until frothy. Gradually add cream of tartar and remaining 1/3 cup sugar and beat until stiff peaks form. Gently fold egg whites into fruit mixture so as not to reduce volume. Spoon into crust. Refrigerate 4 hours or overnight. Thinly slice remaining 2 plums and garnish top of pie.
215, Apricot Yogurt Parfaits, None, 4, None, 5, 2, 65, Produce for Better Health Foundation and 5 a Day, None, Drain canned apricots, pour 1/4 cup of the juice into saucepan or microwave-safe dish. Sprinkle gelatin over juice and let stand for 5 minutes to soften. Warm over low heat or microwave at medium (50% power) for 30 seconds or until gelatin has dissolved.
 
In food processor or blender, puree canned apricots; add lemon juice brandy, yogurt and gelatin mixture and process for 30 seconds or until combined.
 
Pour into parfait or stemmed glasses or champagne flutes. Cover and refrigerate until set, at least 1 hour or overnight.
 
Just before serving arrange fresh apricots on top. (If apricots are not available substitute kiwi slices or berries). Garnish each with a small spoonful of yogurt and sprinkling of brown sugar or mint.
216, Fresh Apricot Bavarian, None, 8, None, 5, 13, 0, The California Apricot Advisory Board, Serve in stemmed glasses and top with sliced apricots for elegant endings., Drop apricots into boiling water to cover. Return to boil and simmer for 5 minutes or until skins begin to split. Drain and rinse under cold water. Halve fruit and discard skins and pits. Puree apricots in electric blender. Combine water and gelatin in small saucepan; stir over low heat until dissolved. Mix sugar, apricot puree and yogurt with a wire whip until smooth; mix in dissolved gelatin. Sweeten to taste if desired. Chill mixture until thick. Spoon into stemmed glasses.

Note: One pound fresh apricots is 15 to 20. One and a half envelopes gelatin is 4 teaspoons.

CREATE TABLE `Nutrition` (
  recipe_id INTEGER REFERENCES Recipe(recipe_id),
  protein REAL,
  carbo REAL,
  alcohol REAL,
  total_fat REAL,
  sat_fat REAL,
  cholestrl REAL,
  sodium REAL,
  iron REAL,
  vitamin_c REAL,
  vitamin_a REAL,
  fiber REAL,
  pcnt_cal_carb REAL,
  pcnt_cal_fat REAL,
  pcnt_cal_prot REAL,
  calories REAL
);
Sample rows from `Nutrition`:
214, 5.47, 41.29, 0.0, 11.53, 2.21, 1.39, 260.78, 0.81, 8.89, 586.2, 0.87, 56.8, 35.68, 7.53, 290.79
215, 5.7, 23.75, 1.93, 1.08, 0.58, 3.48, 46.17, 0.57, 13.02, 2738.24, 0.62, 67.38, 6.89, 16.17, 141.01
216, 4.9, 26.88, 0.0, 1.1, 0.58, 3.46, 41.79, 0.37, 6.13, 1521.1, 0.34, 78.45, 7.24, 14.3, 137.06

CREATE TABLE `Quantity` (
  quantity_id INTEGER,
  recipe_id INTEGER REFERENCES Nutrition(recipe_id) REFERENCES Recipe(recipe_id),
  ingredient_id INTEGER REFERENCES Ingredient(ingredient_id),
  max_qty REAL,
  min_qty REAL,
  unit TEXT,
  preparation TEXT,
  optional TEXT
);
Sample rows from `Quantity`:
1, 214, 1613, 2.0, 2.0, cup(s), None, FALSE
2, 214, 3334, 0.25, 0.25, cup(s), None, FALSE
3, 214, 2222, 0.5, 0.5, cup(s), melted, FALSE

","recipe, nutrition","recipe.title, recipe.recipe_id, nutrition.recipe_id, nutrition.alcohol","Ingredient, Recipe, Nutrition, Quantity"
ice_hockey_draft,Identify the players with the same height as Brian Gionta. How tall are they?,"SELECT t2.playername, t1.height_in_cm FROM height_info as t1 inner JOIN playerinfo as t2 ON t1.height_id = t2.height WHERE t2.height = ( SELECT height FROM playerinfo WHERE playername = 'Brian Gionta' )","CREATE TABLE `height_info` (
  height_id INTEGER,
  height_in_cm INTEGER,
  height_in_inch TEXT
);
Sample rows from `height_info`:
65, 165, 5'5""
67, 170, 5'7""
68, 172, 5'8""

CREATE TABLE `playerinfo` (
  ELITEID INTEGER,
  PlayerName TEXT,
  birthdate TEXT,
  birthyear DATE,
  birthmonth INTEGER,
  birthday INTEGER,
  birthplace TEXT,
  nation TEXT,
  height INTEGER REFERENCES height_info(height_id),
  weight INTEGER REFERENCES weight_info(weight_id),
  position_info TEXT,
  shoots TEXT,
  draftyear INTEGER,
  draftround INTEGER,
  overall INTEGER,
  overallby TEXT,
  CSS_rank INTEGER,
  sum_7yr_GP INTEGER,
  sum_7yr_TOI INTEGER,
  GP_greater_than_0 TEXT
);
Sample rows from `playerinfo`:
9, David Bornhammar, 1981-06-15, 1981, 6, 15, Lidingo, SWE, Sweden, 73, 198, D, L, 1999, 7, 192, Washington Capitals, 192, 0, 0, no
18, David Printz, 1980-07-24, 1980, 7, 24, Stockholm, SWE, Sweden, 76, 220, D, L, 2001, 7, 225, Philadelphia Flyers, 176, 13, 84, yes
27, Yared Hagos, 1983-03-27, 1983, 3, 27, Stockholm, SWE, Sweden, 73, 218, C, L, 2001, 3, 70, Dallas Stars, 24, 0, 0, no

","CREATE TABLE `height_info` (
  height_id INTEGER,
  height_in_cm INTEGER,
  height_in_inch TEXT
);
Sample rows from `height_info`:
65, 165, 5'5""
67, 170, 5'7""
68, 172, 5'8""

CREATE TABLE `weight_info` (
  weight_id INTEGER,
  weight_in_kg INTEGER,
  weight_in_lbs INTEGER
);
Sample rows from `weight_info`:
154, 70, 154
159, 72, 159
161, 73, 161

CREATE TABLE `PlayerInfo` (
  ELITEID INTEGER,
  PlayerName TEXT,
  birthdate TEXT,
  birthyear DATE,
  birthmonth INTEGER,
  birthday INTEGER,
  birthplace TEXT,
  nation TEXT,
  height INTEGER REFERENCES height_info(height_id),
  weight INTEGER REFERENCES weight_info(weight_id),
  position_info TEXT,
  shoots TEXT,
  draftyear INTEGER,
  draftround INTEGER,
  overall INTEGER,
  overallby TEXT,
  CSS_rank INTEGER,
  sum_7yr_GP INTEGER,
  sum_7yr_TOI INTEGER,
  GP_greater_than_0 TEXT
);
Sample rows from `PlayerInfo`:
9, David Bornhammar, 1981-06-15, 1981, 6, 15, Lidingo, SWE, Sweden, 73, 198, D, L, 1999, 7, 192, Washington Capitals, 192, 0, 0, no
18, David Printz, 1980-07-24, 1980, 7, 24, Stockholm, SWE, Sweden, 76, 220, D, L, 2001, 7, 225, Philadelphia Flyers, 176, 13, 84, yes
27, Yared Hagos, 1983-03-27, 1983, 3, 27, Stockholm, SWE, Sweden, 73, 218, C, L, 2001, 3, 70, Dallas Stars, 24, 0, 0, no

CREATE TABLE `SeasonStatus` (
  ELITEID INTEGER REFERENCES PlayerInfo(ELITEID),
  SEASON TEXT,
  TEAM TEXT,
  LEAGUE TEXT,
  GAMETYPE TEXT,
  GP INTEGER,
  G INTEGER,
  A INTEGER,
  P INTEGER,
  PIM INTEGER,
  PLUSMINUS INTEGER
);
Sample rows from `SeasonStatus`:
3667, 1997-1998, Rimouski Oceanic, QMJHL, Regular Season, 58, 44, 71, 115, 117, 27
3667, 1997-1998, Rimouski Oceanic, QMJHL, Playoffs, 18, 15, 26, 41, 46, 4
3667, 1997-1998, Canada U20, WJC-20, Regular Season, 7, 1, 1, 2, 4, 0

","height_info, playerinfo","playerinfo.playername, height_info.height_in_cm, height_info.height_id, playerinfo.height, height, playername","height_info, weight_info, PlayerInfo, SeasonStatus"
simpson_episodes,What was the character that Dan Castellaneta did the voice over for and was awarded?,SELECT DISTINCT t2.character FROM award as t1 inner JOIN Character_award as t2 ON t1.award_id = t2.award_id WHERE t1.award LIKE '%Voice-Over%' AND t1.person = 'Dan Castellaneta';,"CREATE TABLE `award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","award, Character_award","Character_award.character, award.award_id, Character_award.award_id, award.award, award.person","Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
chicago_crime,Who is the commander of Morgan Park district?,SELECT commander FROM district WHERE district_name = 'Morgan Park',"CREATE TABLE `district` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `district`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

","CREATE TABLE `Community_Area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `Community_Area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `District` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `District`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `FBI_Code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `FBI_Code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `IUCR` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `IUCR`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `Neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `Neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `Ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `Ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `Crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `Crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

",district,"commander, district_name","Community_Area, District, FBI_Code, IUCR, Neighborhood, Ward, Crime"
beer_factory,"Among the root beer brands that do not advertise on Facebook and Twitter, which brand has the highest number of purchases?",SELECT t2.breweryname FROM rootbeer as t1 inner JOIN rootbeerbrand as t2 ON t1.brandid = t2.brandid WHERE t2.facebookpage is null AND t2.twitter is null GROUP BY t2.brandid ORDER BY COUNT(t1.brandid) DESC LIMIT 1,"CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

","CREATE TABLE `customers` (
  CustomerID INTEGER,
  First TEXT,
  Last TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER,
  Email TEXT,
  PhoneNumber TEXT,
  FirstPurchaseDate DATE,
  SubscribedToEmailList TEXT,
  Gender TEXT
);
Sample rows from `customers`:
101811, Kenneth, Walton, 6715 Commonwealth Dr, Sacramento, CA, 94256, walton.k76@fastmail.com, (916) 918-1561, 2013-05-30, FALSE, M
103508, Madeleine, Jones, 3603 Leola Way, Sacramento, CA, 94258, j_madeleine@gmail.com, (916) 186-9423, 2013-02-06, FALSE, F
104939, Damen, Wheeler, 6740 Branwood Way, Orangevale, CA, 95662, dwheeler@outlook.com, (916) 164-1156, 2013-04-11, FALSE, M

CREATE TABLE `geolocation` (
  LocationID INTEGER REFERENCES location(LocationID),
  Latitude REAL,
  Longitude REAL
);
Sample rows from `geolocation`:
0, 0.0, 0.0
1, 38.566129, -121.426432
2, 38.559615, -121.42243

CREATE TABLE `location` (
  LocationID INTEGER REFERENCES geolocation(LocationID),
  LocationName TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER
);
Sample rows from `location`:
0, LOST, None, None, None, None
1, Sac State American River Courtyard, 6000 J St, Sacramento, CA, 95819
2, Sac State Union, 6000 J St, Sacramento, CA, 95819

CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

CREATE TABLE `rootbeerreview` (
  CustomerID INTEGER PRIMARY KEY REFERENCES customers(CustomerID),
  BrandID INTEGER PRIMARY KEY REFERENCES rootbeerbrand(BrandID),
  StarRating INTEGER,
  ReviewDate DATE,
  Review TEXT
);
Sample rows from `rootbeerreview`:
101811, 10012, 5, 2013-07-15, None
101811, 10014, 1, 2013-07-08, None
101811, 10015, 3, 2013-07-25, None

CREATE TABLE `transaction` (
  TransactionID INTEGER,
  CreditCardNumber INTEGER,
  CustomerID INTEGER REFERENCES customers(CustomerID),
  TransactionDate DATE,
  CreditCardType TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  RootBeerID INTEGER REFERENCES rootbeer(RootBeerID),
  PurchasePrice REAL
);
Sample rows from `transaction`:
100000, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105661, 3.0
100001, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105798, 3.0
100002, 6011583832864739, 864896, 2014-07-07, Discover, 2, 102514, 3.0

","rootbeer, rootbeerbrand","rootbeerbrand.breweryname, rootbeer.brandid, rootbeerbrand.brandid, rootbeerbrand.facebookpage, rootbeerbrand.twitter","customers, geolocation, location, rootbeerbrand, rootbeer, rootbeerreview, transaction"
university,List the universities in Denmark.,SELECT t1.university_name FROM university as t1 inner JOIN country as t2 ON t1.country_id = t2.id WHERE t2.country_name = 'Denmark',"CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

","CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

CREATE TABLE `ranking_system` (
  id INTEGER,
  system_name TEXT
);
Sample rows from `ranking_system`:
1, Times Higher Education World University Ranking
2, Shanghai Ranking
3, Center for World University Rankings

CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

","university, country","university.university_name, university.country_id, country.id, country.country_name","country, ranking_system, ranking_criteria, university, university_ranking_year, university_year"
beer_factory,Which location sold more bottles of beer?,SELECT t2.locationname FROM rootbeer as t1 inner JOIN location as t2 ON t1.locationid = t2.locationid WHERE t1.containertype = 'Bottle' GROUP BY t2.locationid ORDER BY COUNT(t1.locationid) DESC LIMIT 1,"CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

CREATE TABLE `location` (
  LocationID INTEGER REFERENCES geolocation(LocationID),
  LocationName TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER
);
Sample rows from `location`:
0, LOST, None, None, None, None
1, Sac State American River Courtyard, 6000 J St, Sacramento, CA, 95819
2, Sac State Union, 6000 J St, Sacramento, CA, 95819

","CREATE TABLE `customers` (
  CustomerID INTEGER,
  First TEXT,
  Last TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER,
  Email TEXT,
  PhoneNumber TEXT,
  FirstPurchaseDate DATE,
  SubscribedToEmailList TEXT,
  Gender TEXT
);
Sample rows from `customers`:
101811, Kenneth, Walton, 6715 Commonwealth Dr, Sacramento, CA, 94256, walton.k76@fastmail.com, (916) 918-1561, 2013-05-30, FALSE, M
103508, Madeleine, Jones, 3603 Leola Way, Sacramento, CA, 94258, j_madeleine@gmail.com, (916) 186-9423, 2013-02-06, FALSE, F
104939, Damen, Wheeler, 6740 Branwood Way, Orangevale, CA, 95662, dwheeler@outlook.com, (916) 164-1156, 2013-04-11, FALSE, M

CREATE TABLE `geolocation` (
  LocationID INTEGER REFERENCES location(LocationID),
  Latitude REAL,
  Longitude REAL
);
Sample rows from `geolocation`:
0, 0.0, 0.0
1, 38.566129, -121.426432
2, 38.559615, -121.42243

CREATE TABLE `location` (
  LocationID INTEGER REFERENCES geolocation(LocationID),
  LocationName TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER
);
Sample rows from `location`:
0, LOST, None, None, None, None
1, Sac State American River Courtyard, 6000 J St, Sacramento, CA, 95819
2, Sac State Union, 6000 J St, Sacramento, CA, 95819

CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

CREATE TABLE `rootbeerreview` (
  CustomerID INTEGER PRIMARY KEY REFERENCES customers(CustomerID),
  BrandID INTEGER PRIMARY KEY REFERENCES rootbeerbrand(BrandID),
  StarRating INTEGER,
  ReviewDate DATE,
  Review TEXT
);
Sample rows from `rootbeerreview`:
101811, 10012, 5, 2013-07-15, None
101811, 10014, 1, 2013-07-08, None
101811, 10015, 3, 2013-07-25, None

CREATE TABLE `transaction` (
  TransactionID INTEGER,
  CreditCardNumber INTEGER,
  CustomerID INTEGER REFERENCES customers(CustomerID),
  TransactionDate DATE,
  CreditCardType TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  RootBeerID INTEGER REFERENCES rootbeer(RootBeerID),
  PurchasePrice REAL
);
Sample rows from `transaction`:
100000, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105661, 3.0
100001, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105798, 3.0
100002, 6011583832864739, 864896, 2014-07-07, Discover, 2, 102514, 3.0

","rootbeer, location","location.locationname, rootbeer.locationid, location.locationid, rootbeer.containertype","customers, geolocation, location, rootbeerbrand, rootbeer, rootbeerreview, transaction"
public_review_platform,Under which categories is Yelp_Business no. 1?,SELECT t1.category_name FROM categories as t1 inner JOIN Business_categories as t2 ON t1.category_id = t2.category_id WHERE t2.business_id = 1,"CREATE TABLE `categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Business_categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_categories`:
1, 8
1, 143
2, 18

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","categories, Business_categories","categories.category_name, categories.category_id, Business_categories.category_id, Business_categories.business_id","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
public_review_platform,"Among the businesses in Chandler, list the attribute of the business with a low review count.","SELECT DISTINCT t3.attribute_id, t3.attribute_name FROM business as t1 inner JOIN business_attributes as t2 ON t1.business_id = t2.attribute_id inner JOIN attributes as t3 ON t2.attribute_id = t3.attribute_id WHERE t1.review_count = 'Low' AND t1.city = 'Chandler'","CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `business_attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `business_attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","business, business_attributes, attributes","attributes.attribute_id, attributes.attribute_name, business.business_id, business_attributes.attribute_id, business.review_count, business.city","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
video_games,How many FIFA games are there across all platforms?,SELECt COUNT(*) FROM ( SELECt t.game_name FROM game as t WHERE t.game_name LIKE '%FIFA%' ),"CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

","CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

",game,game.game_name,"genre, game, platform, publisher, game_publisher, game_platform, region, region_sales"
books,Give the author's name of the books that cost 19 dollars and above.,SELECT DISTINCT t3.author_name FROM book as t1 inner JOIN book_author as t2 ON t1.book_id = t2.book_id inner JOIN author as t3 ON t3.author_id = t2.author_id inner JOIN order_line as t4 ON t4.book_id = t1.book_id WHERE t4.price > 19,"CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","book, book_author, author, order_line","author.author_name, book.book_id, book_author.book_id, author.author_id, book_author.author_id, order_line.book_id, order_line.price","address_status, author, book_language, country, address, customer, customer_address, order_status, publisher, book, book_author, shipping_method, cust_order, sqlite_sequence, order_history, order_line"
codebase_comments,What the percentage of the english methods among the methods whose comments is XML format?,SELECT cast(SUM(case when lang = 'en' then 1 else 0 end) as real) * 100 / COUNT(name) FROM method WHERE commentisxml = 1,"CREATE TABLE `method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Method, 10860640
MethodParameter, 17514858
Repo, 156550

CREATE TABLE `Method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `Method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

CREATE TABLE `MethodParameter` (
  Id INTEGER,
  MethodId TEXT,
  Type TEXT,
  Name TEXT
);
Sample rows from `MethodParameter`:
1, 1, System.String, data
2, 2, System.Int32, i
3, 2, System.Int32, declstartpos

CREATE TABLE `Repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `Repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

CREATE TABLE `Solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `Solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

",method,"lang, name, commentisxml","sqlite_sequence, Method, MethodParameter, Repo, Solution"
shakespeare,"In the Venus and Adonis, what is the description of the last scene listed?",SELECT t2.description FROM works as t1 right JOIN chapters as t2 ON t1.id = t2.work_id WHERE t1.title = 'Venus and Adonis' ORDER BY t2.scene DESC LIMIT 1,"CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

","CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
chapters, 19648
characters, 1266
paragraphs, 666327

CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

","works, chapters","chapters.description, works.id, chapters.work_id, works.title, chapters.scene","chapters, sqlite_sequence, characters, paragraphs, works"
retail_world,List out the phone number of the shipping company of order id 10296.,SELECT t2.phone FROM orders as t1 inner JOIN shippers as t2 ON t1.shipvia = t2.shipperid WHERE t1.orderid = 10260,"CREATE TABLE `orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

","orders, shippers","shippers.phone, orders.shipvia, shippers.shipperid, orders.orderid","sqlite_sequence, Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails"
world,What is the average life expentancy of countries that speak Arabic?,SELECT AVG(t1.lifeexpectancy) FROM country as t1 inner JOIN countrylanguage as t2 ON t1.code = t2.countrycode WHERE t2.language = 'Arabic',"CREATE TABLE `country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

CREATE TABLE `countrylanguage` (
  CountryCode TEXT PRIMARY KEY REFERENCES Country(Code),
  Language TEXT PRIMARY KEY,
  IsOfficial TEXT,
  Percentage REAL
);
Sample rows from `countrylanguage`:
ABW, Dutch, T, 5.3
ABW, English, F, 9.5
ABW, Papiamento, F, 76.7

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
City, 4079

CREATE TABLE `City` (
  ID INTEGER,
  Name TEXT,
  CountryCode TEXT REFERENCES Country(Code),
  District TEXT,
  Population INTEGER
);
Sample rows from `City`:
1, Kabul, AFG, Kabol, 1780000
2, Qandahar, AFG, Qandahar, 237500
3, Herat, AFG, Herat, 186800

CREATE TABLE `Country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `Country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

CREATE TABLE `CountryLanguage` (
  CountryCode TEXT PRIMARY KEY REFERENCES Country(Code),
  Language TEXT PRIMARY KEY,
  IsOfficial TEXT,
  Percentage REAL
);
Sample rows from `CountryLanguage`:
ABW, Dutch, T, 5.3
ABW, English, F, 9.5
ABW, Papiamento, F, 76.7

","country, countrylanguage","country.lifeexpectancy, country.code, countrylanguage.countrycode, countrylanguage.language","sqlite_sequence, City, Country, CountryLanguage"
retail_world,How many orders were shipped by Federal Shipping?,SELECT COUNT(t1.orderid) FROM orders as t1 inner JOIN shippers as t2 ON t1.shipvia = t2.shipperid WHERE t2.companyname = 'Federal Shipping',"CREATE TABLE `orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

","orders, shippers","orders.orderid, orders.shipvia, shippers.shipperid, shippers.companyname","sqlite_sequence, Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails"
app_store,What are the apps that users pretty like this app and how many installs amount of these apps?,"SELECT DISTINCT t1.app, t1.installs FROM playstore as t1 inner JOIN user_reviews as t2 ON t1.app = t2.app WHERE t2.sentiment_polarity > 0","CREATE TABLE `playstore` (
  App TEXT,
  Category TEXT,
  Rating REAL,
  Reviews INTEGER,
  Size TEXT,
  Installs TEXT,
  Type TEXT,
  Price TEXT,
  Content Rating TEXT,
  Genres TEXT
);
Sample rows from `playstore`:
Photo Editor & Candy Camera & Grid & ScrapBook, ART_AND_DESIGN, 4.1, 159, 19M, 10,000+, Free, 0, Everyone, Art & Design
Coloring book moana, ART_AND_DESIGN, 3.9, 967, 14M, 500,000+, Free, 0, Everyone, Art & Design;Pretend Play
U Launcher Lite – FREE Live Cool Themes, Hide Apps, ART_AND_DESIGN, 4.7, 87510, 8.7M, 5,000,000+, Free, 0, Everyone, Art & Design

CREATE TABLE `user_reviews` (
  App TEXT REFERENCES playstore(App),
  Translated_Review TEXT,
  Sentiment TEXT,
  Sentiment_Polarity TEXT,
  Sentiment_Subjectivity TEXT
);
Sample rows from `user_reviews`:
10 Best Foods for You, I like eat delicious food. That's I'm cooking food myself, case ""10 Best Foods"" helps lot, also ""Best Before (Shelf Life)"", Positive, 1.0, 0.5333333333333333
10 Best Foods for You, This help eating healthy exercise regular basis, Positive, 0.25, 0.28846153846153844
10 Best Foods for You, nan, nan, nan, nan

","CREATE TABLE `playstore` (
  App TEXT,
  Category TEXT,
  Rating REAL,
  Reviews INTEGER,
  Size TEXT,
  Installs TEXT,
  Type TEXT,
  Price TEXT,
  Content Rating TEXT,
  Genres TEXT
);
Sample rows from `playstore`:
Photo Editor & Candy Camera & Grid & ScrapBook, ART_AND_DESIGN, 4.1, 159, 19M, 10,000+, Free, 0, Everyone, Art & Design
Coloring book moana, ART_AND_DESIGN, 3.9, 967, 14M, 500,000+, Free, 0, Everyone, Art & Design;Pretend Play
U Launcher Lite – FREE Live Cool Themes, Hide Apps, ART_AND_DESIGN, 4.7, 87510, 8.7M, 5,000,000+, Free, 0, Everyone, Art & Design

CREATE TABLE `user_reviews` (
  App TEXT REFERENCES playstore(App),
  Translated_Review TEXT,
  Sentiment TEXT,
  Sentiment_Polarity TEXT,
  Sentiment_Subjectivity TEXT
);
Sample rows from `user_reviews`:
10 Best Foods for You, I like eat delicious food. That's I'm cooking food myself, case ""10 Best Foods"" helps lot, also ""Best Before (Shelf Life)"", Positive, 1.0, 0.5333333333333333
10 Best Foods for You, This help eating healthy exercise regular basis, Positive, 0.25, 0.28846153846153844
10 Best Foods for You, nan, nan, nan, nan

","playstore, user_reviews","playstore.app, playstore.installs, user_reviews.app, user_reviews.sentiment_polarity","playstore, user_reviews"
olympics,"What is the season of the game where a competitor who weighted 73 kg and 180 cm tall, participated?",SELECT DISTINCT t1.season FROM games as t1 inner JOIN games_competitor as t2 ON t1.id = t2.games_id inner JOIN person as t3 ON t2.person_id = t3.id WHERE t3.height = 180 AND t3.weight = 73,"CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

","CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `medal` (
  id INTEGER,
  medal_name TEXT
);
Sample rows from `medal`:
1, Gold
2, Silver
3, Bronze

CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `sport` (
  id INTEGER,
  sport_name TEXT
);
Sample rows from `sport`:
1, Aeronautics
2, Alpine Skiing
3, Alpinism

CREATE TABLE `event` (
  id INTEGER,
  sport_id INTEGER REFERENCES sport(id),
  event_name TEXT
);
Sample rows from `event`:
1, 9, Basketball Men's Basketball
2, 33, Judo Men's Extra-Lightweight
3, 25, Football Men's Football

CREATE TABLE `competitor_event` (
  event_id INTEGER REFERENCES event(id),
  competitor_id INTEGER REFERENCES games_competitor(id),
  medal_id INTEGER REFERENCES medal(id)
);
Sample rows from `competitor_event`:
1, 1, 4
2, 2, 4
3, 3, 4

","games, games_competitor, person","games.season, games.id, games_competitor.games_id, games_competitor.person_id, person.id, person.height, person.weight","city, games, games_city, medal, noc_region, person, games_competitor, person_region, sport, event, competitor_event"
coinmarketcap,State the transaction date whereby DigixDAO was transacted at the hightest price.,SELECT t2.date FROM coins as t1 inner JOIN historical as t2 ON t1.id = t2.coin_id WHERE t1.name = 'DigixDAO' ORDER BY t2.price DESC LIMIT 1,"CREATE TABLE `coins` (
  id INTEGER,
  name TEXT,
  slug TEXT,
  symbol TEXT,
  status TEXT,
  category TEXT,
  description TEXT,
  subreddit TEXT,
  notice TEXT,
  tags TEXT,
  tag_names TEXT,
  website TEXT,
  platform_id INTEGER,
  date_added TEXT,
  date_launched TEXT
);
Sample rows from `coins`:
1, Bitcoin, bitcoin, BTC, active, coin, ## **What Is Bitcoin (BTC)?**\n\nBitcoin is a decentralized cryptocurrency originally described in a 2008 [whitepaper](https://coinmarketcap.com/alexandria/glossary/whitepaper) by a person, or group of people, using the alias [Satoshi Nakamoto](https://co, bitcoin, None, mineable, pow, sha-256, store-of-value, state-channels, coinbase-ventures-portfolio, three-arrows-capital-portfolio, polychain-capital-portfolio, binance-labs-portfolio, arrington-xrp-capital, blockchain-capital-portfolio, boostvc-portfolio, cms-holdings-, Mineable, PoW, SHA-256, Store of Value, State channels, Coinbase Ventures Portfolio, Three Arrows Capital Portfolio, Polychain Capital Portfolio, Binance Labs Portfolio, Arrington XRP capital, Blockchain Capital Portfolio, BoostVC Portfolio, CMS Holdings , https://bitcoin.org/, None, 2013-04-28T00:00:00.000Z, None
2, Litecoin, litecoin, LTC, active, coin, ## What Is Litecoin (LTC)?\n\nLitecoin (LTC) is a cryptocurrency that was designed to provide fast, secure and low-cost payments by leveraging the unique properties of [blockchain](https://coinmarketcap.com/alexandria/glossary/blockchain) technology. \n\n, litecoin, None, mineable, pow, scrypt, medium-of-exchange, binance-chain, Mineable, PoW, Scrypt, Medium of Exchange, Binance Chain, https://litecoin.org/, None, 2013-04-28T00:00:00.000Z, None
3, Namecoin, namecoin, NMC, active, coin, Namecoin (NMC) is a cryptocurrency . Users are able to generate NMC through the process of mining. Namecoin has a current supply of 14,736,400. The last known price of Namecoin is 2.14833562 USD and is up 0.40 over the last 24 hours. It is currently tradi, namecoin, None, mineable, pow, sha-256, platform, Mineable, PoW, SHA-256, Platform, https://www.namecoin.org/, None, 2013-04-28T00:00:00.000Z, None

CREATE TABLE `historical` (
  date DATE,
  coin_id INTEGER,
  cmc_rank INTEGER,
  market_cap REAL,
  price REAL,
  open REAL,
  high REAL,
  low REAL,
  close REAL,
  time_high TEXT,
  time_low TEXT,
  volume_24h REAL,
  percent_change_1h REAL,
  percent_change_24h REAL,
  percent_change_7d REAL,
  circulating_supply REAL,
  total_supply REAL,
  max_supply REAL,
  num_market_pairs INTEGER
);
Sample rows from `historical`:
2013-04-28, 1, 1, 1488566971.9558687, 134.210021972656, None, None, None, None, None, None, 0.0, 0.639231, None, None, 11091325.0, 11091325.0, 21000000.0, None
2013-04-28, 2, 2, 74637021.56790735, 4.34840488433838, None, None, None, None, None, None, 0.0, 0.799273, None, None, 17164230.0, 17164230.0, 84000000.0, None
2013-04-28, 5, 3, 7250186.647688276, 0.386524856090546, None, None, None, None, None, None, 0.0, -0.934763, None, None, 18757362.0, 18757362.0, None, None

","CREATE TABLE `coins` (
  id INTEGER,
  name TEXT,
  slug TEXT,
  symbol TEXT,
  status TEXT,
  category TEXT,
  description TEXT,
  subreddit TEXT,
  notice TEXT,
  tags TEXT,
  tag_names TEXT,
  website TEXT,
  platform_id INTEGER,
  date_added TEXT,
  date_launched TEXT
);
Sample rows from `coins`:
1, Bitcoin, bitcoin, BTC, active, coin, ## **What Is Bitcoin (BTC)?**\n\nBitcoin is a decentralized cryptocurrency originally described in a 2008 [whitepaper](https://coinmarketcap.com/alexandria/glossary/whitepaper) by a person, or group of people, using the alias [Satoshi Nakamoto](https://co, bitcoin, None, mineable, pow, sha-256, store-of-value, state-channels, coinbase-ventures-portfolio, three-arrows-capital-portfolio, polychain-capital-portfolio, binance-labs-portfolio, arrington-xrp-capital, blockchain-capital-portfolio, boostvc-portfolio, cms-holdings-, Mineable, PoW, SHA-256, Store of Value, State channels, Coinbase Ventures Portfolio, Three Arrows Capital Portfolio, Polychain Capital Portfolio, Binance Labs Portfolio, Arrington XRP capital, Blockchain Capital Portfolio, BoostVC Portfolio, CMS Holdings , https://bitcoin.org/, None, 2013-04-28T00:00:00.000Z, None
2, Litecoin, litecoin, LTC, active, coin, ## What Is Litecoin (LTC)?\n\nLitecoin (LTC) is a cryptocurrency that was designed to provide fast, secure and low-cost payments by leveraging the unique properties of [blockchain](https://coinmarketcap.com/alexandria/glossary/blockchain) technology. \n\n, litecoin, None, mineable, pow, scrypt, medium-of-exchange, binance-chain, Mineable, PoW, Scrypt, Medium of Exchange, Binance Chain, https://litecoin.org/, None, 2013-04-28T00:00:00.000Z, None
3, Namecoin, namecoin, NMC, active, coin, Namecoin (NMC) is a cryptocurrency . Users are able to generate NMC through the process of mining. Namecoin has a current supply of 14,736,400. The last known price of Namecoin is 2.14833562 USD and is up 0.40 over the last 24 hours. It is currently tradi, namecoin, None, mineable, pow, sha-256, platform, Mineable, PoW, SHA-256, Platform, https://www.namecoin.org/, None, 2013-04-28T00:00:00.000Z, None

CREATE TABLE `historical` (
  date DATE,
  coin_id INTEGER,
  cmc_rank INTEGER,
  market_cap REAL,
  price REAL,
  open REAL,
  high REAL,
  low REAL,
  close REAL,
  time_high TEXT,
  time_low TEXT,
  volume_24h REAL,
  percent_change_1h REAL,
  percent_change_24h REAL,
  percent_change_7d REAL,
  circulating_supply REAL,
  total_supply REAL,
  max_supply REAL,
  num_market_pairs INTEGER
);
Sample rows from `historical`:
2013-04-28, 1, 1, 1488566971.9558687, 134.210021972656, None, None, None, None, None, None, 0.0, 0.639231, None, None, 11091325.0, 11091325.0, 21000000.0, None
2013-04-28, 2, 2, 74637021.56790735, 4.34840488433838, None, None, None, None, None, None, 0.0, 0.799273, None, None, 17164230.0, 17164230.0, 84000000.0, None
2013-04-28, 5, 3, 7250186.647688276, 0.386524856090546, None, None, None, None, None, None, 0.0, -0.934763, None, None, 18757362.0, 18757362.0, None, None

","coins, historical","historical.date, coins.id, historical.coin_id, coins.name, historical.price","coins, historical"
codebase_comments,"What is the repository number for the solution of method ""SCore.Poisson.ngtIndex""?",SELECT t1.repoid FROM solution as t1 inner JOIN method as t2 ON t1.id = t2.solutionid WHERE t2.name = 'SCore.Poisson.ngtIndex',"CREATE TABLE `solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

CREATE TABLE `method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Method, 10860640
MethodParameter, 17514858
Repo, 156550

CREATE TABLE `Method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `Method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

CREATE TABLE `MethodParameter` (
  Id INTEGER,
  MethodId TEXT,
  Type TEXT,
  Name TEXT
);
Sample rows from `MethodParameter`:
1, 1, System.String, data
2, 2, System.Int32, i
3, 2, System.Int32, declstartpos

CREATE TABLE `Repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `Repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

CREATE TABLE `Solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `Solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

","solution, method","solution.repoid, solution.id, method.solutionid, method.name","sqlite_sequence, Method, MethodParameter, Repo, Solution"
language_corpus,"How many biwords pairs are there whose second word is ""grec""?",SELECT COUNT(t2.w1st) FROM words as t1 inner JOIN biwords as t2 ON t1.wid = t2.w2nd WHERE t1.word = 'grec',"CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

","CREATE TABLE `langs` (
  lid INTEGER,
  lang TEXT PRIMARY KEY,
  locale TEXT PRIMARY KEY,
  pages INTEGER,
  words INTEGER
);
Sample rows from `langs`:
1, ca, ca_ES, 1129144, 2764996

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
langs, 1
pages, 1129144
words, 2764996

CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `langs_words` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `langs_words`:
1, 1, 242
1, 2, 16841
1, 3, 48700

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

","words, biwords","biwords.w1st, words.wid, biwords.w2nd, words.word","langs, sqlite_sequence, pages, words, langs_words, pages_words, biwords"
music_platform_2,What is the rating and category of the podcast entitled Sitcomadon?,"SELECT DISTINCT t3.rating, t1.category FROM categories as t1 inner JOIN podcasts as t2 ON t2.podcast_id = t1.podcast_id inner JOIN reviews as t3 ON t3.podcast_id = t2.podcast_id WHERE t2.title = 'Sitcomadon'","CREATE TABLE `categories` (
  podcast_id TEXT PRIMARY KEY REFERENCES podcasts(None),
  category TEXT PRIMARY KEY
);
Sample rows from `categories`:
c61aa81c9b929a66f0c1db6cbe5d8548, arts
c61aa81c9b929a66f0c1db6cbe5d8548, arts-performing-arts
c61aa81c9b929a66f0c1db6cbe5d8548, music

CREATE TABLE `podcasts` (
  podcast_id TEXT PRIMARY KEY,
  itunes_id INTEGER,
  slug TEXT,
  itunes_url TEXT,
  title TEXT
);
Sample rows from `podcasts`:
a00018b54eb342567c94dacfb2a3e504, 1313466221, scaling-global, https://podcasts.apple.com/us/podcast/scaling-global/id1313466221, Scaling Global
a00043d34e734b09246d17dc5d56f63c, 158973461, cornerstone-baptist-church-of-orlando, https://podcasts.apple.com/us/podcast/cornerstone-baptist-church-of-orlando/id158973461, Cornerstone Baptist Church of Orlando
a0004b1ef445af9dc84dad1e7821b1e3, 139076942, mystery-dancing-in-the-dark, https://podcasts.apple.com/us/podcast/mystery-dancing-in-the-dark/id139076942, Mystery: Dancing in the Dark

CREATE TABLE `reviews` (
  podcast_id TEXT REFERENCES podcasts(None),
  title TEXT,
  content TEXT,
  rating INTEGER,
  author_id TEXT,
  created_at TEXT
);
Sample rows from `reviews`:
c61aa81c9b929a66f0c1db6cbe5d8548, really interesting!, Thanks for providing these insights.  Really enjoy the variety and depth -- please keep them coming!, 5, F7E5A318989779D, 2018-04-24T12:05:16-07:00
c61aa81c9b929a66f0c1db6cbe5d8548, Must listen for anyone interested in the arts!!!, Super excited to see this podcast grow. So many fun topics to talk about...Shari is really engaging. Definitely subscribing and would recommend to anyone interested in the arts!!, 5, F6BF5472689BD12, 2018-05-09T18:14:32-07:00
ad4f2bf69c72b8db75978423c25f379e, nauseatingly left, I'm a liberal myself, but its pretty obvious and annoying that they're trying to push their beliefs on the listeners. Get a more politically diverse production staff, we like to see issues from multiple point of views not just yours., 1, 1AB95B8E6E1309E, 2019-06-11T14:53:39-07:00

","CREATE TABLE `runs` (
  run_at TEXT,
  max_rowid INTEGER,
  reviews_added INTEGER
);
Sample rows from `runs`:
2021-05-10 02:53:00, 3266481, 1215223
2021-06-06 21:34:36, 3300773, 13139
2021-07-02 18:04:55, 3329699, 11561

CREATE TABLE `podcasts` (
  podcast_id TEXT PRIMARY KEY,
  itunes_id INTEGER,
  slug TEXT,
  itunes_url TEXT,
  title TEXT
);
Sample rows from `podcasts`:
a00018b54eb342567c94dacfb2a3e504, 1313466221, scaling-global, https://podcasts.apple.com/us/podcast/scaling-global/id1313466221, Scaling Global
a00043d34e734b09246d17dc5d56f63c, 158973461, cornerstone-baptist-church-of-orlando, https://podcasts.apple.com/us/podcast/cornerstone-baptist-church-of-orlando/id158973461, Cornerstone Baptist Church of Orlando
a0004b1ef445af9dc84dad1e7821b1e3, 139076942, mystery-dancing-in-the-dark, https://podcasts.apple.com/us/podcast/mystery-dancing-in-the-dark/id139076942, Mystery: Dancing in the Dark

CREATE TABLE `reviews` (
  podcast_id TEXT REFERENCES podcasts(None),
  title TEXT,
  content TEXT,
  rating INTEGER,
  author_id TEXT,
  created_at TEXT
);
Sample rows from `reviews`:
c61aa81c9b929a66f0c1db6cbe5d8548, really interesting!, Thanks for providing these insights.  Really enjoy the variety and depth -- please keep them coming!, 5, F7E5A318989779D, 2018-04-24T12:05:16-07:00
c61aa81c9b929a66f0c1db6cbe5d8548, Must listen for anyone interested in the arts!!!, Super excited to see this podcast grow. So many fun topics to talk about...Shari is really engaging. Definitely subscribing and would recommend to anyone interested in the arts!!, 5, F6BF5472689BD12, 2018-05-09T18:14:32-07:00
ad4f2bf69c72b8db75978423c25f379e, nauseatingly left, I'm a liberal myself, but its pretty obvious and annoying that they're trying to push their beliefs on the listeners. Get a more politically diverse production staff, we like to see issues from multiple point of views not just yours., 1, 1AB95B8E6E1309E, 2019-06-11T14:53:39-07:00

CREATE TABLE `categories` (
  podcast_id TEXT PRIMARY KEY REFERENCES podcasts(None),
  category TEXT PRIMARY KEY
);
Sample rows from `categories`:
c61aa81c9b929a66f0c1db6cbe5d8548, arts
c61aa81c9b929a66f0c1db6cbe5d8548, arts-performing-arts
c61aa81c9b929a66f0c1db6cbe5d8548, music

","categories, podcasts, reviews","reviews.rating, categories.category, podcasts.podcast_id, categories.podcast_id, reviews.podcast_id, podcasts.title","runs, podcasts, reviews, categories"
bike_share_1,Calculate the average usage of each bike in the third quarter of year 2013. Find the average wind direction within the same period.,"SELECT AVG(t1.duration), AVG(t2.wind_dir_degrees) FROM trip as t1 inner JOIN weather as t2 ON t2.zip_code = t1.zip_code WHERE substr(CasT(t2.date as text), 1, instr(t2.date, '/') - 1) IN ('7', '8', '9') AND substr(CasT(t2.date as text), -4) = '2013'","CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);
Sample rows from `trip`:
4069, 174, 8/29/2013 9:08, 2nd at South Park, 64, 8/29/2013 9:11, 2nd at South Park, 64, 288, Subscriber, 94114
4073, 1067, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:42, San Francisco Caltrain 2 (330 Townsend), 69, 321, Subscriber, 94703
4074, 1131, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:43, San Francisco Caltrain 2 (330 Townsend), 69, 317, Subscriber, 94115

CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches REAL,
  mean_sea_level_pressure_inches REAL,
  min_sea_level_pressure_inches REAL,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches TEXT,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code TEXT
);
Sample rows from `weather`:
8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107
8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30.0, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107
8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30.0, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107

","CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat REAL,
  long REAL,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);
Sample rows from `station`:
2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013
3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013
4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013

CREATE TABLE `status` (
  station_id INTEGER,
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);
Sample rows from `status`:
2, 2, 25, 2013/08/29 12:06:01
2, 2, 25, 2013/08/29 12:07:01
2, 2, 25, 2013/08/29 12:08:01

CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);
Sample rows from `trip`:
4069, 174, 8/29/2013 9:08, 2nd at South Park, 64, 8/29/2013 9:11, 2nd at South Park, 64, 288, Subscriber, 94114
4073, 1067, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:42, San Francisco Caltrain 2 (330 Townsend), 69, 321, Subscriber, 94703
4074, 1131, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:43, San Francisco Caltrain 2 (330 Townsend), 69, 317, Subscriber, 94115

CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches REAL,
  mean_sea_level_pressure_inches REAL,
  min_sea_level_pressure_inches REAL,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches TEXT,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code TEXT
);
Sample rows from `weather`:
8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107
8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30.0, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107
8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30.0, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107

","trip, weather","trip.duration, weather.wind_dir_degrees, weather.zip_code, trip.zip_code, weather.date","station, status, trip, weather"
sales_in_weather,State the max temperature of the weather station which has the no.21 store on 2012/11/9.,SELECT tmax FROM weather as t1 inner JOIN relation as t2 ON t1.station_nbr = t2.station_nbr WHERE t2.store_nbr = 21 AND t1.`date` = '2012-11-09',"CREATE TABLE `weather` (
  station_nbr INTEGER PRIMARY KEY,
  date DATE PRIMARY KEY,
  tmax INTEGER,
  tmin INTEGER,
  tavg INTEGER,
  depart INTEGER,
  dewpoint INTEGER,
  wetbulb INTEGER,
  heat INTEGER,
  cool INTEGER,
  sunrise TEXT,
  sunset TEXT,
  codesum TEXT,
  snowfall REAL,
  preciptotal REAL,
  stnpressure REAL,
  sealevel REAL,
  resultspeed REAL,
  resultdir INTEGER,
  avgspeed REAL
);
Sample rows from `weather`:
1, 2012-01-01, 52, 31, 42, None, 36, 40, 23, 0, None, None, RA FZFG BR, None, 0.05, 29.78, 29.92, 3.6, 20, 4.6
1, 2012-01-02, 50, 31, 41, None, 26, 35, 24, 0, None, None,  , None, 0.01, 29.44, 29.62, 9.8, 24, 10.3
1, 2012-01-03, 32, 11, 22, None, 4, 18, 43, 0, None, None,  , None, 0.0, 29.67, 29.87, 10.8, 31, 11.6

CREATE TABLE `relation` (
  store_nbr INTEGER REFERENCES sales_in_weather(store_nbr),
  station_nbr INTEGER REFERENCES weather(station_nbr)
);
Sample rows from `relation`:
1, 1
2, 14
3, 7

","CREATE TABLE `sales_in_weather` (
  date DATE PRIMARY KEY,
  store_nbr INTEGER PRIMARY KEY,
  item_nbr INTEGER PRIMARY KEY,
  units INTEGER
);
Sample rows from `sales_in_weather`:
2012-01-01, 1, 1, 0
2012-01-01, 1, 2, 0
2012-01-01, 1, 3, 0

CREATE TABLE `weather` (
  station_nbr INTEGER PRIMARY KEY,
  date DATE PRIMARY KEY,
  tmax INTEGER,
  tmin INTEGER,
  tavg INTEGER,
  depart INTEGER,
  dewpoint INTEGER,
  wetbulb INTEGER,
  heat INTEGER,
  cool INTEGER,
  sunrise TEXT,
  sunset TEXT,
  codesum TEXT,
  snowfall REAL,
  preciptotal REAL,
  stnpressure REAL,
  sealevel REAL,
  resultspeed REAL,
  resultdir INTEGER,
  avgspeed REAL
);
Sample rows from `weather`:
1, 2012-01-01, 52, 31, 42, None, 36, 40, 23, 0, None, None, RA FZFG BR, None, 0.05, 29.78, 29.92, 3.6, 20, 4.6
1, 2012-01-02, 50, 31, 41, None, 26, 35, 24, 0, None, None,  , None, 0.01, 29.44, 29.62, 9.8, 24, 10.3
1, 2012-01-03, 32, 11, 22, None, 4, 18, 43, 0, None, None,  , None, 0.0, 29.67, 29.87, 10.8, 31, 11.6

CREATE TABLE `relation` (
  store_nbr INTEGER REFERENCES sales_in_weather(store_nbr),
  station_nbr INTEGER REFERENCES weather(station_nbr)
);
Sample rows from `relation`:
1, 1
2, 14
3, 7

","weather, relation","tmax, weather.station_nbr, relation.station_nbr, relation.store_nbr, weather.date","sales_in_weather, weather, relation"
beer_factory,List the brand names of bottled root beer whose first brewing year is no later than 1930.,SELECT t2.brandname FROM rootbeer as t1 inner JOIN rootbeerbrand as t2 ON t1.brandid = t2.brandid WHERE t2.firstbrewedyear < '1930-01-01' AND t1.containertype = 'Bottle' ORDER BY t2.firstbrewedyear LIMIT 1,"CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

","CREATE TABLE `customers` (
  CustomerID INTEGER,
  First TEXT,
  Last TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER,
  Email TEXT,
  PhoneNumber TEXT,
  FirstPurchaseDate DATE,
  SubscribedToEmailList TEXT,
  Gender TEXT
);
Sample rows from `customers`:
101811, Kenneth, Walton, 6715 Commonwealth Dr, Sacramento, CA, 94256, walton.k76@fastmail.com, (916) 918-1561, 2013-05-30, FALSE, M
103508, Madeleine, Jones, 3603 Leola Way, Sacramento, CA, 94258, j_madeleine@gmail.com, (916) 186-9423, 2013-02-06, FALSE, F
104939, Damen, Wheeler, 6740 Branwood Way, Orangevale, CA, 95662, dwheeler@outlook.com, (916) 164-1156, 2013-04-11, FALSE, M

CREATE TABLE `geolocation` (
  LocationID INTEGER REFERENCES location(LocationID),
  Latitude REAL,
  Longitude REAL
);
Sample rows from `geolocation`:
0, 0.0, 0.0
1, 38.566129, -121.426432
2, 38.559615, -121.42243

CREATE TABLE `location` (
  LocationID INTEGER REFERENCES geolocation(LocationID),
  LocationName TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER
);
Sample rows from `location`:
0, LOST, None, None, None, None
1, Sac State American River Courtyard, 6000 J St, Sacramento, CA, 95819
2, Sac State Union, 6000 J St, Sacramento, CA, 95819

CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

CREATE TABLE `rootbeerreview` (
  CustomerID INTEGER PRIMARY KEY REFERENCES customers(CustomerID),
  BrandID INTEGER PRIMARY KEY REFERENCES rootbeerbrand(BrandID),
  StarRating INTEGER,
  ReviewDate DATE,
  Review TEXT
);
Sample rows from `rootbeerreview`:
101811, 10012, 5, 2013-07-15, None
101811, 10014, 1, 2013-07-08, None
101811, 10015, 3, 2013-07-25, None

CREATE TABLE `transaction` (
  TransactionID INTEGER,
  CreditCardNumber INTEGER,
  CustomerID INTEGER REFERENCES customers(CustomerID),
  TransactionDate DATE,
  CreditCardType TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  RootBeerID INTEGER REFERENCES rootbeer(RootBeerID),
  PurchasePrice REAL
);
Sample rows from `transaction`:
100000, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105661, 3.0
100001, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105798, 3.0
100002, 6011583832864739, 864896, 2014-07-07, Discover, 2, 102514, 3.0

","rootbeer, rootbeerbrand","rootbeerbrand.brandname, rootbeer.brandid, rootbeerbrand.brandid, rootbeerbrand.firstbrewedyear, rootbeer.containertype","customers, geolocation, location, rootbeerbrand, rootbeer, rootbeerreview, transaction"
public_review_platform,"Among all the users with the average ratings of at least 4 and above of all reviews, calculate the percent that have no fans or followers.",SELECT cast(SUM(case when user_fans = 'None' then 1 else 0 end) as real) * 100 / COUNT(user_id) FROM users WHERE user_average_stars >= 4,"CREATE TABLE `users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

",users,"user_fans, user_id, user_average_stars","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
video_games,"How many games are not of the genres 'Role-Playing', 'Shooter' and 'Simulation'?","SELECT COUNT(t2.id) FROM genre as t1 inner JOIN game as t2 ON t1.id = t2.genre_id WHERE t1.genre_name NOT IN ('Role-Playing', 'Shooter', 'Simulation')","CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

","CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

","genre, game","game.id, genre.id, game.genre_id, genre.genre_name","genre, game, platform, publisher, game_publisher, game_platform, region, region_sales"
shakespeare,"How many paragraphs are there in the scene whose description is ""A Sea-port in Cyprus. An open place near the quay.""?",SELECT SUM(t2.paragraphnum) FROM chapters as t1 inner JOIN paragraphs as t2 ON t1.id = t2.chapter_id WHERE t1.description = 'A Sea-port in Cyprus. An open place near the quay.',"CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

","CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
chapters, 19648
characters, 1266
paragraphs, 666327

CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

","chapters, paragraphs","paragraphs.paragraphnum, chapters.id, paragraphs.chapter_id, chapters.description","chapters, sqlite_sequence, characters, paragraphs, works"
image_and_language,Define the bounding box of the object sample no. 7 on image no. 42.,"SELECT x, y, w, h FROM img_obj whERE img_id = 42 AND obj_sample_id = 7","CREATE TABLE `img_obj` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `img_obj`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

","CREATE TABLE `ATT_CLASSES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `ATT_CLASSES`:
0, building s
1, indoors
2, cluttered

CREATE TABLE `OBJ_CLASSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLASSES`:
0, awning
1, goggles
2, dot

CREATE TABLE `IMG_OBJ` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `IMG_OBJ`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `IMG_OBJ_ATT` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_OBJ_ATT`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `PRED_CLASSES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `PRED_CLASSES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `IMG_REL` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_REL`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

",img_obj,"x, y, w, h, img_id, obj_sample_id","ATT_CLASSES, OBJ_CLASSES, IMG_OBJ, IMG_OBJ_ATT, PRED_CLASSES, IMG_REL"
olympics,Which city was the 1992 Summer Olympic held?,SELECT t2.city_name FROM games_city as t1 inner JOIN city as t2 ON t1.city_id = t2.id inner JOIN games as t3 ON t1.games_id = t3.id WHERE t3.games_name = '1992 Summer',"CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

","CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `medal` (
  id INTEGER,
  medal_name TEXT
);
Sample rows from `medal`:
1, Gold
2, Silver
3, Bronze

CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `sport` (
  id INTEGER,
  sport_name TEXT
);
Sample rows from `sport`:
1, Aeronautics
2, Alpine Skiing
3, Alpinism

CREATE TABLE `event` (
  id INTEGER,
  sport_id INTEGER REFERENCES sport(id),
  event_name TEXT
);
Sample rows from `event`:
1, 9, Basketball Men's Basketball
2, 33, Judo Men's Extra-Lightweight
3, 25, Football Men's Football

CREATE TABLE `competitor_event` (
  event_id INTEGER REFERENCES event(id),
  competitor_id INTEGER REFERENCES games_competitor(id),
  medal_id INTEGER REFERENCES medal(id)
);
Sample rows from `competitor_event`:
1, 1, 4
2, 2, 4
3, 3, 4

","games_city, city, games","city.city_name, games_city.city_id, city.id, games_city.games_id, games.id, games.games_name","city, games, games_city, medal, noc_region, person, games_competitor, person_region, sport, event, competitor_event"
mental_health_survey,How many users participated in the mental health survey for 2014?,SELECT COUNT(DISTINCT t1.userid) FROM answer as t1 inner JOIN survey as t2 ON t1.surveyID = t2.surveyID WHERE t2.description = 'mental health survey for 2014',"CREATE TABLE `answer` (
  AnswerText TEXT,
  SurveyID INTEGER REFERENCES Survey(None),
  UserID INTEGER PRIMARY KEY,
  QuestionID INTEGER PRIMARY KEY REFERENCES Question(None)
);
Sample rows from `answer`:
37, 2014, 1, 1
44, 2014, 2, 1
32, 2014, 3, 1

CREATE TABLE `survey` (
  SurveyID INTEGER,
  Description TEXT
);
Sample rows from `survey`:
2014, mental health survey for 2014
2016, mental health survey for 2016
2017, mental health survey for 2017

","CREATE TABLE `Question` (
  questiontext TEXT,
  questionid INTEGER
);
Sample rows from `Question`:
What is your age?, 1
What is your gender?, 2
What country do you live in?, 3

CREATE TABLE `Survey` (
  SurveyID INTEGER,
  Description TEXT
);
Sample rows from `Survey`:
2014, mental health survey for 2014
2016, mental health survey for 2016
2017, mental health survey for 2017

CREATE TABLE `Answer` (
  AnswerText TEXT,
  SurveyID INTEGER REFERENCES Survey(None),
  UserID INTEGER PRIMARY KEY,
  QuestionID INTEGER PRIMARY KEY REFERENCES Question(None)
);
Sample rows from `Answer`:
37, 2014, 1, 1
44, 2014, 2, 1
32, 2014, 3, 1

","answer, survey","answer.userid, answer.surveyID, survey.surveyID, survey.description","Question, Survey, Answer"
food_inspection_2,What is the percentage of restaurants that paid a fine of 250 among all establishments?,SELECT cast(COUNT(case when t3.fine = 250 then t1.license_no end) as real) * 100 / COUNT(t1.license_no) FROM establishment as t1 inner JOIN inspection as t2 ON t1.license_no = t2.license_no inner JOIN violation as t3 ON t2.inspection_id = t3.inspection_id WHERE t1.facility_type = 'Restaurant',"CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

","establishment, inspection, violation","violation.fine, establishment.license_no, inspection.license_no, inspection.inspection_id, violation.inspection_id, establishment.facility_type","employee, establishment, inspection, inspection_point, violation"
sales,Calculate the percentage of sold blades in the total number of transactions.,"SELECT cast(SUM(iif(t1.name = 'Blade', t2.quantity, 0)) as real) * 100 / SUM(t2.quantity) FROM products as t1 inner JOIN sales as t2 ON t1.productid = t2.productid","CREATE TABLE `products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

CREATE TABLE `sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Employees`:
1, Abraham, e, Bennet
2, Reginald, l, Blotchet-Halls
3, Cheryl, a, Carson

CREATE TABLE `Products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

CREATE TABLE `Sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `Sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

","products, sales","products.name, sales.quantity, products.productid, sales.productid","Customers, Employees, Products, Sales"
university,How many students attended universities were there in 2011?,SELECT SUM(num_students) FROM university_year WHERE year = 2011,"CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

","CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

CREATE TABLE `ranking_system` (
  id INTEGER,
  system_name TEXT
);
Sample rows from `ranking_system`:
1, Times Higher Education World University Ranking
2, Shanghai Ranking
3, Center for World University Rankings

CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

",university_year,num_students,"country, ranking_system, ranking_criteria, university, university_ranking_year, university_year"
mental_health_survey,"Among respondents who participated in the survey in 2016, what percentage had a mental health disorder in the past?",SELECT cast(SUM(case  when t1.answertext LIKE 'Yes' then 1 else 0 end) as real) * 100 / COUNT(t1.surveyid) FROM answer as t1 inner JOIN question as t2 ON t1.questionID = t2.questionid WHERE t1.questionID = 32 AND t1.surveyid = 2016,"CREATE TABLE `answer` (
  AnswerText TEXT,
  SurveyID INTEGER REFERENCES Survey(None),
  UserID INTEGER PRIMARY KEY,
  QuestionID INTEGER PRIMARY KEY REFERENCES Question(None)
);
Sample rows from `answer`:
37, 2014, 1, 1
44, 2014, 2, 1
32, 2014, 3, 1

CREATE TABLE `question` (
  questiontext TEXT,
  questionid INTEGER
);
Sample rows from `question`:
What is your age?, 1
What is your gender?, 2
What country do you live in?, 3

","CREATE TABLE `Question` (
  questiontext TEXT,
  questionid INTEGER
);
Sample rows from `Question`:
What is your age?, 1
What is your gender?, 2
What country do you live in?, 3

CREATE TABLE `Survey` (
  SurveyID INTEGER,
  Description TEXT
);
Sample rows from `Survey`:
2014, mental health survey for 2014
2016, mental health survey for 2016
2017, mental health survey for 2017

CREATE TABLE `Answer` (
  AnswerText TEXT,
  SurveyID INTEGER REFERENCES Survey(None),
  UserID INTEGER PRIMARY KEY,
  QuestionID INTEGER PRIMARY KEY REFERENCES Question(None)
);
Sample rows from `Answer`:
37, 2014, 1, 1
44, 2014, 2, 1
32, 2014, 3, 1

","answer, question","answer.answertext, answer.surveyid, answer.questionID, question.questionid","Question, Survey, Answer"
world,List down the languages of the countries that have population below 8000.,SELECT t2.language FROM country as t1 inner JOIN countrylanguage as t2 ON t1.code = t2.countrycode WHERE t1.population < 8000,"CREATE TABLE `country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

CREATE TABLE `countrylanguage` (
  CountryCode TEXT PRIMARY KEY REFERENCES Country(Code),
  Language TEXT PRIMARY KEY,
  IsOfficial TEXT,
  Percentage REAL
);
Sample rows from `countrylanguage`:
ABW, Dutch, T, 5.3
ABW, English, F, 9.5
ABW, Papiamento, F, 76.7

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
City, 4079

CREATE TABLE `City` (
  ID INTEGER,
  Name TEXT,
  CountryCode TEXT REFERENCES Country(Code),
  District TEXT,
  Population INTEGER
);
Sample rows from `City`:
1, Kabul, AFG, Kabol, 1780000
2, Qandahar, AFG, Qandahar, 237500
3, Herat, AFG, Herat, 186800

CREATE TABLE `Country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `Country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

CREATE TABLE `CountryLanguage` (
  CountryCode TEXT PRIMARY KEY REFERENCES Country(Code),
  Language TEXT PRIMARY KEY,
  IsOfficial TEXT,
  Percentage REAL
);
Sample rows from `CountryLanguage`:
ABW, Dutch, T, 5.3
ABW, English, F, 9.5
ABW, Papiamento, F, 76.7

","country, countrylanguage","countrylanguage.language, country.code, countrylanguage.countrycode, country.population","sqlite_sequence, City, Country, CountryLanguage"
student_loan,How many students enlisted in the navy?,SELECT COUNT(name) FROM enlist WHERE organ = 'navy',"CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

",enlist,"name, organ","bool, person, disabled, enlist, filed_for_bankrupcy, longest_absense_from_school, male, no_payment_due, unemployed, enrolled"
disney,Who is the director of the movie Pinocchio?,SELECT director FROM director WHERE name = 'Pinocchio',"CREATE TABLE `director` (
  name TEXT PRIMARY KEY REFERENCES characters(movie_title),
  director TEXT
);
Sample rows from `director`:
Snow White and the Seven Dwarfs, David Hand
Pinocchio, Ben Sharpsteen
Fantasia, full credits

","CREATE TABLE `characters` (
  movie_title TEXT PRIMARY KEY,
  release_date TEXT,
  hero TEXT REFERENCES voice-actors(character),
  villian TEXT,
  song TEXT
);
Sample rows from `characters`:
Snow White and the Seven Dwarfs, 21-Dec-37, Snow White, Evil Queen, Some Day My Prince Will Come
Pinocchio, 7-Feb-40, Pinocchio, Stromboli, When You Wish upon a Star
Fantasia, 13-Nov-40, None, Chernabog, None

CREATE TABLE `director` (
  name TEXT PRIMARY KEY REFERENCES characters(movie_title),
  director TEXT
);
Sample rows from `director`:
Snow White and the Seven Dwarfs, David Hand
Pinocchio, Ben Sharpsteen
Fantasia, full credits

CREATE TABLE `movies_total_gross` (
  movie_title TEXT PRIMARY KEY REFERENCES characters(movie_title),
  release_date TEXT PRIMARY KEY,
  genre TEXT,
  MPAA_rating TEXT,
  total_gross TEXT,
  inflation_adjusted_gross TEXT
);
Sample rows from `movies_total_gross`:
Snow White and the Seven Dwarfs, Dec 21, 1937, Musical, G, $184,925,485, $5,228,953,251
Pinocchio, Feb 9, 1940, Adventure, G, $84,300,000, $2,188,229,052
Fantasia, Nov 13, 1940, Musical, G, $83,320,000, $2,187,090,808

CREATE TABLE `revenue` (
  Year INTEGER,
  Studio Entertainment[NI 1] REAL,
  Disney Consumer Products[NI 2] REAL,
  Disney Interactive[NI 3][Rev 1] INTEGER,
  Walt Disney Parks and Resorts REAL,
  Disney Media Networks TEXT,
  Total INTEGER
);
Sample rows from `revenue`:
1991, 2593.0, 724.0, None, 2794.0, None, 6111
1992, 3115.0, 1081.0, None, 3306.0, None, 7502
1993, 3673.4, 1415.1, None, 3440.7, None, 8529

CREATE TABLE `voice-actors` (
  character TEXT PRIMARY KEY,
  voice-actor TEXT,
  movie TEXT REFERENCES characters(movie_title)
);
Sample rows from `voice-actors`:
Abby Mallard, Joan Cusack, Chicken Little
Abigail Gabble, Monica Evans, The Aristocats
Abis Mal, Jason Alexander, The Return of Jafar

",director,"director, name","characters, director, movies_total_gross, revenue, voice-actors"
ice_hockey_draft,List out the nation of players who played for the 1997-1998 season .,SELECT DISTINCT t2.nation FROM seasonstatus as t1 inner JOIN playerinfo as t2 ON t1.eliteid = t2.eliteid WHERE t1.SEasON = '1997-1998',"CREATE TABLE `seasonstatus` (
  ELITEID INTEGER REFERENCES PlayerInfo(ELITEID),
  SEASON TEXT,
  TEAM TEXT,
  LEAGUE TEXT,
  GAMETYPE TEXT,
  GP INTEGER,
  G INTEGER,
  A INTEGER,
  P INTEGER,
  PIM INTEGER,
  PLUSMINUS INTEGER
);
Sample rows from `seasonstatus`:
3667, 1997-1998, Rimouski Oceanic, QMJHL, Regular Season, 58, 44, 71, 115, 117, 27
3667, 1997-1998, Rimouski Oceanic, QMJHL, Playoffs, 18, 15, 26, 41, 46, 4
3667, 1997-1998, Canada U20, WJC-20, Regular Season, 7, 1, 1, 2, 4, 0

CREATE TABLE `playerinfo` (
  ELITEID INTEGER,
  PlayerName TEXT,
  birthdate TEXT,
  birthyear DATE,
  birthmonth INTEGER,
  birthday INTEGER,
  birthplace TEXT,
  nation TEXT,
  height INTEGER REFERENCES height_info(height_id),
  weight INTEGER REFERENCES weight_info(weight_id),
  position_info TEXT,
  shoots TEXT,
  draftyear INTEGER,
  draftround INTEGER,
  overall INTEGER,
  overallby TEXT,
  CSS_rank INTEGER,
  sum_7yr_GP INTEGER,
  sum_7yr_TOI INTEGER,
  GP_greater_than_0 TEXT
);
Sample rows from `playerinfo`:
9, David Bornhammar, 1981-06-15, 1981, 6, 15, Lidingo, SWE, Sweden, 73, 198, D, L, 1999, 7, 192, Washington Capitals, 192, 0, 0, no
18, David Printz, 1980-07-24, 1980, 7, 24, Stockholm, SWE, Sweden, 76, 220, D, L, 2001, 7, 225, Philadelphia Flyers, 176, 13, 84, yes
27, Yared Hagos, 1983-03-27, 1983, 3, 27, Stockholm, SWE, Sweden, 73, 218, C, L, 2001, 3, 70, Dallas Stars, 24, 0, 0, no

","CREATE TABLE `height_info` (
  height_id INTEGER,
  height_in_cm INTEGER,
  height_in_inch TEXT
);
Sample rows from `height_info`:
65, 165, 5'5""
67, 170, 5'7""
68, 172, 5'8""

CREATE TABLE `weight_info` (
  weight_id INTEGER,
  weight_in_kg INTEGER,
  weight_in_lbs INTEGER
);
Sample rows from `weight_info`:
154, 70, 154
159, 72, 159
161, 73, 161

CREATE TABLE `PlayerInfo` (
  ELITEID INTEGER,
  PlayerName TEXT,
  birthdate TEXT,
  birthyear DATE,
  birthmonth INTEGER,
  birthday INTEGER,
  birthplace TEXT,
  nation TEXT,
  height INTEGER REFERENCES height_info(height_id),
  weight INTEGER REFERENCES weight_info(weight_id),
  position_info TEXT,
  shoots TEXT,
  draftyear INTEGER,
  draftround INTEGER,
  overall INTEGER,
  overallby TEXT,
  CSS_rank INTEGER,
  sum_7yr_GP INTEGER,
  sum_7yr_TOI INTEGER,
  GP_greater_than_0 TEXT
);
Sample rows from `PlayerInfo`:
9, David Bornhammar, 1981-06-15, 1981, 6, 15, Lidingo, SWE, Sweden, 73, 198, D, L, 1999, 7, 192, Washington Capitals, 192, 0, 0, no
18, David Printz, 1980-07-24, 1980, 7, 24, Stockholm, SWE, Sweden, 76, 220, D, L, 2001, 7, 225, Philadelphia Flyers, 176, 13, 84, yes
27, Yared Hagos, 1983-03-27, 1983, 3, 27, Stockholm, SWE, Sweden, 73, 218, C, L, 2001, 3, 70, Dallas Stars, 24, 0, 0, no

CREATE TABLE `SeasonStatus` (
  ELITEID INTEGER REFERENCES PlayerInfo(ELITEID),
  SEASON TEXT,
  TEAM TEXT,
  LEAGUE TEXT,
  GAMETYPE TEXT,
  GP INTEGER,
  G INTEGER,
  A INTEGER,
  P INTEGER,
  PIM INTEGER,
  PLUSMINUS INTEGER
);
Sample rows from `SeasonStatus`:
3667, 1997-1998, Rimouski Oceanic, QMJHL, Regular Season, 58, 44, 71, 115, 117, 27
3667, 1997-1998, Rimouski Oceanic, QMJHL, Playoffs, 18, 15, 26, 41, 46, 4
3667, 1997-1998, Canada U20, WJC-20, Regular Season, 7, 1, 1, 2, 4, 0

","seasonstatus, playerinfo","playerinfo.nation, seasonstatus.eliteid, playerinfo.eliteid, seasonstatus.SEasON","height_info, weight_info, PlayerInfo, SeasonStatus"
menu,How much does the dish on page 2 of menu ID 12474 cost?,SELECT t1.price FROM menuitem as t1 inner JOIN menupage as t2 ON t2.id = t1.menu_page_id WHERE t2.menu_id = 12474 AND t2.page_number = 2,"CREATE TABLE `menuitem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `menuitem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

CREATE TABLE `menupage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `menupage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

","CREATE TABLE `Dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `Dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

CREATE TABLE `Menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `Menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

CREATE TABLE `MenuPage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `MenuPage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

CREATE TABLE `MenuItem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `MenuItem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

","menuitem, menupage","menuitem.price, menupage.id, menuitem.menu_page_id, menupage.menu_id, menupage.page_number","Dish, Menu, MenuPage, MenuItem"
cookbook,How many times is the sodium content in Lasagne-Spinach Spirals to Beef and Spinach Pita Pockets?,SELECT cast(SUM(case when t1.title = 'Lasagne-Spinach Spirals' then t2.sodium else 0 end) as real) * 100 / SUM(case when t1.title = 'Beef and Spinach Pita Pockets' then t2.sodium else 0 end) FROM recipe as t1 inner JOIN nutrition as t2 ON t1.recipe_id = t2.recipe_id,"CREATE TABLE `recipe` (
  recipe_id INTEGER,
  title TEXT,
  subtitle TEXT,
  servings INTEGER,
  yield_unit TEXT,
  prep_min INTEGER,
  cook_min INTEGER,
  stnd_min INTEGER,
  source TEXT,
  intro TEXT,
  directions TEXT
);
Sample rows from `recipe`:
214, Raspberry Chiffon Pie, None, 10, 1 pie, 20, 8, 305, The California Tree Fruit Agreement, None, For crust, preheat oven to 375 degrees F.
In lightly greased 10-inch pie plate, combine graham cracker crumbs, melted butter and 1/4 cup sugar. Press evenly on bottom and up side of plate. Bake 5 minutes; cool.

For filling, in medium saucepan, combine juice or water and gelatin; let stand 5 minutes. Add 1/3 cup sugar and heat over medium heat, stirring to dissolve gelatin. In blender or food processor, puree 6 plums. Add puree and raspberries to gelatin mixture. Refrigerate until mixture begins to set about 1 hour. Stir yogurt into fruit mixture. In large bowl, beat egg whites until frothy. Gradually add cream of tartar and remaining 1/3 cup sugar and beat until stiff peaks form. Gently fold egg whites into fruit mixture so as not to reduce volume. Spoon into crust. Refrigerate 4 hours or overnight. Thinly slice remaining 2 plums and garnish top of pie.
215, Apricot Yogurt Parfaits, None, 4, None, 5, 2, 65, Produce for Better Health Foundation and 5 a Day, None, Drain canned apricots, pour 1/4 cup of the juice into saucepan or microwave-safe dish. Sprinkle gelatin over juice and let stand for 5 minutes to soften. Warm over low heat or microwave at medium (50% power) for 30 seconds or until gelatin has dissolved.
 
In food processor or blender, puree canned apricots; add lemon juice brandy, yogurt and gelatin mixture and process for 30 seconds or until combined.
 
Pour into parfait or stemmed glasses or champagne flutes. Cover and refrigerate until set, at least 1 hour or overnight.
 
Just before serving arrange fresh apricots on top. (If apricots are not available substitute kiwi slices or berries). Garnish each with a small spoonful of yogurt and sprinkling of brown sugar or mint.
216, Fresh Apricot Bavarian, None, 8, None, 5, 13, 0, The California Apricot Advisory Board, Serve in stemmed glasses and top with sliced apricots for elegant endings., Drop apricots into boiling water to cover. Return to boil and simmer for 5 minutes or until skins begin to split. Drain and rinse under cold water. Halve fruit and discard skins and pits. Puree apricots in electric blender. Combine water and gelatin in small saucepan; stir over low heat until dissolved. Mix sugar, apricot puree and yogurt with a wire whip until smooth; mix in dissolved gelatin. Sweeten to taste if desired. Chill mixture until thick. Spoon into stemmed glasses.

Note: One pound fresh apricots is 15 to 20. One and a half envelopes gelatin is 4 teaspoons.

CREATE TABLE `nutrition` (
  recipe_id INTEGER REFERENCES Recipe(recipe_id),
  protein REAL,
  carbo REAL,
  alcohol REAL,
  total_fat REAL,
  sat_fat REAL,
  cholestrl REAL,
  sodium REAL,
  iron REAL,
  vitamin_c REAL,
  vitamin_a REAL,
  fiber REAL,
  pcnt_cal_carb REAL,
  pcnt_cal_fat REAL,
  pcnt_cal_prot REAL,
  calories REAL
);
Sample rows from `nutrition`:
214, 5.47, 41.29, 0.0, 11.53, 2.21, 1.39, 260.78, 0.81, 8.89, 586.2, 0.87, 56.8, 35.68, 7.53, 290.79
215, 5.7, 23.75, 1.93, 1.08, 0.58, 3.48, 46.17, 0.57, 13.02, 2738.24, 0.62, 67.38, 6.89, 16.17, 141.01
216, 4.9, 26.88, 0.0, 1.1, 0.58, 3.46, 41.79, 0.37, 6.13, 1521.1, 0.34, 78.45, 7.24, 14.3, 137.06

","CREATE TABLE `Ingredient` (
  ingredient_id INTEGER,
  category TEXT,
  name TEXT,
  plural TEXT
);
Sample rows from `Ingredient`:
1, dairy, 1% lowfat cottage cheese, None
6, dairy, 1% lowfat milk, None
10, Mexican products, 10-inch flour tortilla, s

CREATE TABLE `Recipe` (
  recipe_id INTEGER,
  title TEXT,
  subtitle TEXT,
  servings INTEGER,
  yield_unit TEXT,
  prep_min INTEGER,
  cook_min INTEGER,
  stnd_min INTEGER,
  source TEXT,
  intro TEXT,
  directions TEXT
);
Sample rows from `Recipe`:
214, Raspberry Chiffon Pie, None, 10, 1 pie, 20, 8, 305, The California Tree Fruit Agreement, None, For crust, preheat oven to 375 degrees F.
In lightly greased 10-inch pie plate, combine graham cracker crumbs, melted butter and 1/4 cup sugar. Press evenly on bottom and up side of plate. Bake 5 minutes; cool.

For filling, in medium saucepan, combine juice or water and gelatin; let stand 5 minutes. Add 1/3 cup sugar and heat over medium heat, stirring to dissolve gelatin. In blender or food processor, puree 6 plums. Add puree and raspberries to gelatin mixture. Refrigerate until mixture begins to set about 1 hour. Stir yogurt into fruit mixture. In large bowl, beat egg whites until frothy. Gradually add cream of tartar and remaining 1/3 cup sugar and beat until stiff peaks form. Gently fold egg whites into fruit mixture so as not to reduce volume. Spoon into crust. Refrigerate 4 hours or overnight. Thinly slice remaining 2 plums and garnish top of pie.
215, Apricot Yogurt Parfaits, None, 4, None, 5, 2, 65, Produce for Better Health Foundation and 5 a Day, None, Drain canned apricots, pour 1/4 cup of the juice into saucepan or microwave-safe dish. Sprinkle gelatin over juice and let stand for 5 minutes to soften. Warm over low heat or microwave at medium (50% power) for 30 seconds or until gelatin has dissolved.
 
In food processor or blender, puree canned apricots; add lemon juice brandy, yogurt and gelatin mixture and process for 30 seconds or until combined.
 
Pour into parfait or stemmed glasses or champagne flutes. Cover and refrigerate until set, at least 1 hour or overnight.
 
Just before serving arrange fresh apricots on top. (If apricots are not available substitute kiwi slices or berries). Garnish each with a small spoonful of yogurt and sprinkling of brown sugar or mint.
216, Fresh Apricot Bavarian, None, 8, None, 5, 13, 0, The California Apricot Advisory Board, Serve in stemmed glasses and top with sliced apricots for elegant endings., Drop apricots into boiling water to cover. Return to boil and simmer for 5 minutes or until skins begin to split. Drain and rinse under cold water. Halve fruit and discard skins and pits. Puree apricots in electric blender. Combine water and gelatin in small saucepan; stir over low heat until dissolved. Mix sugar, apricot puree and yogurt with a wire whip until smooth; mix in dissolved gelatin. Sweeten to taste if desired. Chill mixture until thick. Spoon into stemmed glasses.

Note: One pound fresh apricots is 15 to 20. One and a half envelopes gelatin is 4 teaspoons.

CREATE TABLE `Nutrition` (
  recipe_id INTEGER REFERENCES Recipe(recipe_id),
  protein REAL,
  carbo REAL,
  alcohol REAL,
  total_fat REAL,
  sat_fat REAL,
  cholestrl REAL,
  sodium REAL,
  iron REAL,
  vitamin_c REAL,
  vitamin_a REAL,
  fiber REAL,
  pcnt_cal_carb REAL,
  pcnt_cal_fat REAL,
  pcnt_cal_prot REAL,
  calories REAL
);
Sample rows from `Nutrition`:
214, 5.47, 41.29, 0.0, 11.53, 2.21, 1.39, 260.78, 0.81, 8.89, 586.2, 0.87, 56.8, 35.68, 7.53, 290.79
215, 5.7, 23.75, 1.93, 1.08, 0.58, 3.48, 46.17, 0.57, 13.02, 2738.24, 0.62, 67.38, 6.89, 16.17, 141.01
216, 4.9, 26.88, 0.0, 1.1, 0.58, 3.46, 41.79, 0.37, 6.13, 1521.1, 0.34, 78.45, 7.24, 14.3, 137.06

CREATE TABLE `Quantity` (
  quantity_id INTEGER,
  recipe_id INTEGER REFERENCES Nutrition(recipe_id) REFERENCES Recipe(recipe_id),
  ingredient_id INTEGER REFERENCES Ingredient(ingredient_id),
  max_qty REAL,
  min_qty REAL,
  unit TEXT,
  preparation TEXT,
  optional TEXT
);
Sample rows from `Quantity`:
1, 214, 1613, 2.0, 2.0, cup(s), None, FALSE
2, 214, 3334, 0.25, 0.25, cup(s), None, FALSE
3, 214, 2222, 0.5, 0.5, cup(s), melted, FALSE

","recipe, nutrition","recipe.title, nutrition.sodium, recipe.recipe_id, nutrition.recipe_id","Ingredient, Recipe, Nutrition, Quantity"
ice_hockey_draft,"What is the height in centimeter of the tallest player born in Edmonton, Alberta, Canada?","SELECT t2.height_in_cm FROM playerinfo as t1 inner JOIN height_info as t2 ON t1.height = t2.height_id WHERE t1.birthplace = 'Edmonton, AB, CAN' ORDER BY t2.height_in_cm DESC LIMIT 1","CREATE TABLE `playerinfo` (
  ELITEID INTEGER,
  PlayerName TEXT,
  birthdate TEXT,
  birthyear DATE,
  birthmonth INTEGER,
  birthday INTEGER,
  birthplace TEXT,
  nation TEXT,
  height INTEGER REFERENCES height_info(height_id),
  weight INTEGER REFERENCES weight_info(weight_id),
  position_info TEXT,
  shoots TEXT,
  draftyear INTEGER,
  draftround INTEGER,
  overall INTEGER,
  overallby TEXT,
  CSS_rank INTEGER,
  sum_7yr_GP INTEGER,
  sum_7yr_TOI INTEGER,
  GP_greater_than_0 TEXT
);
Sample rows from `playerinfo`:
9, David Bornhammar, 1981-06-15, 1981, 6, 15, Lidingo, SWE, Sweden, 73, 198, D, L, 1999, 7, 192, Washington Capitals, 192, 0, 0, no
18, David Printz, 1980-07-24, 1980, 7, 24, Stockholm, SWE, Sweden, 76, 220, D, L, 2001, 7, 225, Philadelphia Flyers, 176, 13, 84, yes
27, Yared Hagos, 1983-03-27, 1983, 3, 27, Stockholm, SWE, Sweden, 73, 218, C, L, 2001, 3, 70, Dallas Stars, 24, 0, 0, no

CREATE TABLE `height_info` (
  height_id INTEGER,
  height_in_cm INTEGER,
  height_in_inch TEXT
);
Sample rows from `height_info`:
65, 165, 5'5""
67, 170, 5'7""
68, 172, 5'8""

","CREATE TABLE `height_info` (
  height_id INTEGER,
  height_in_cm INTEGER,
  height_in_inch TEXT
);
Sample rows from `height_info`:
65, 165, 5'5""
67, 170, 5'7""
68, 172, 5'8""

CREATE TABLE `weight_info` (
  weight_id INTEGER,
  weight_in_kg INTEGER,
  weight_in_lbs INTEGER
);
Sample rows from `weight_info`:
154, 70, 154
159, 72, 159
161, 73, 161

CREATE TABLE `PlayerInfo` (
  ELITEID INTEGER,
  PlayerName TEXT,
  birthdate TEXT,
  birthyear DATE,
  birthmonth INTEGER,
  birthday INTEGER,
  birthplace TEXT,
  nation TEXT,
  height INTEGER REFERENCES height_info(height_id),
  weight INTEGER REFERENCES weight_info(weight_id),
  position_info TEXT,
  shoots TEXT,
  draftyear INTEGER,
  draftround INTEGER,
  overall INTEGER,
  overallby TEXT,
  CSS_rank INTEGER,
  sum_7yr_GP INTEGER,
  sum_7yr_TOI INTEGER,
  GP_greater_than_0 TEXT
);
Sample rows from `PlayerInfo`:
9, David Bornhammar, 1981-06-15, 1981, 6, 15, Lidingo, SWE, Sweden, 73, 198, D, L, 1999, 7, 192, Washington Capitals, 192, 0, 0, no
18, David Printz, 1980-07-24, 1980, 7, 24, Stockholm, SWE, Sweden, 76, 220, D, L, 2001, 7, 225, Philadelphia Flyers, 176, 13, 84, yes
27, Yared Hagos, 1983-03-27, 1983, 3, 27, Stockholm, SWE, Sweden, 73, 218, C, L, 2001, 3, 70, Dallas Stars, 24, 0, 0, no

CREATE TABLE `SeasonStatus` (
  ELITEID INTEGER REFERENCES PlayerInfo(ELITEID),
  SEASON TEXT,
  TEAM TEXT,
  LEAGUE TEXT,
  GAMETYPE TEXT,
  GP INTEGER,
  G INTEGER,
  A INTEGER,
  P INTEGER,
  PIM INTEGER,
  PLUSMINUS INTEGER
);
Sample rows from `SeasonStatus`:
3667, 1997-1998, Rimouski Oceanic, QMJHL, Regular Season, 58, 44, 71, 115, 117, 27
3667, 1997-1998, Rimouski Oceanic, QMJHL, Playoffs, 18, 15, 26, 41, 46, 4
3667, 1997-1998, Canada U20, WJC-20, Regular Season, 7, 1, 1, 2, 4, 0

","playerinfo, height_info","height_info.height_in_cm, playerinfo.height, height_info.height_id, playerinfo.birthplace","height_info, weight_info, PlayerInfo, SeasonStatus"
public_review_platform,Find the percentage of 5 stars rated business.,SELECT cast(SUM(case when stars = 5 then 1 else 0 end) as real) * 100 / COUNT(stars) FROM business,"CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

",business,stars,"Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
public_review_platform,How many active businesses are opened during late afternoon in the Phoenix city? List out the top 3 categories name for these businesses.,SELECT DISTINCT t4.category_name FROM business_hours as t1 inner JOIN business as t2 ON t1.business_id = t2.business_id inner JOIN business_categories as t3 ON t2.business_id = t3.business_id inner JOIN categories as t4 ON t3.category_id = t4.category_id WHERE t2.active = 'true' AND t2.city = 'Phoenix' AND t1.opening_time >= '5PM' LIMIT 3,"CREATE TABLE `business_hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `business_hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `business_categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `business_categories`:
1, 8
1, 143
2, 18

CREATE TABLE `categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","business_hours, business, business_categories, categories","categories.category_name, business_hours.business_id, business.business_id, business_categories.business_id, business_categories.category_id, categories.category_id, business.active, business.city, business_hours.opening_time","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
disney,What is Disney's highest grossing action movie?,"SELECT movie_title FROM movies_total_gross WHERE genre = 'Action' ORDER BY cast(replace(trim(total_gross, '$'), ',', '') as real) DESC LIMIT 1","CREATE TABLE `movies_total_gross` (
  movie_title TEXT PRIMARY KEY REFERENCES characters(movie_title),
  release_date TEXT PRIMARY KEY,
  genre TEXT,
  MPAA_rating TEXT,
  total_gross TEXT,
  inflation_adjusted_gross TEXT
);
Sample rows from `movies_total_gross`:
Snow White and the Seven Dwarfs, Dec 21, 1937, Musical, G, $184,925,485, $5,228,953,251
Pinocchio, Feb 9, 1940, Adventure, G, $84,300,000, $2,188,229,052
Fantasia, Nov 13, 1940, Musical, G, $83,320,000, $2,187,090,808

","CREATE TABLE `characters` (
  movie_title TEXT PRIMARY KEY,
  release_date TEXT,
  hero TEXT REFERENCES voice-actors(character),
  villian TEXT,
  song TEXT
);
Sample rows from `characters`:
Snow White and the Seven Dwarfs, 21-Dec-37, Snow White, Evil Queen, Some Day My Prince Will Come
Pinocchio, 7-Feb-40, Pinocchio, Stromboli, When You Wish upon a Star
Fantasia, 13-Nov-40, None, Chernabog, None

CREATE TABLE `director` (
  name TEXT PRIMARY KEY REFERENCES characters(movie_title),
  director TEXT
);
Sample rows from `director`:
Snow White and the Seven Dwarfs, David Hand
Pinocchio, Ben Sharpsteen
Fantasia, full credits

CREATE TABLE `movies_total_gross` (
  movie_title TEXT PRIMARY KEY REFERENCES characters(movie_title),
  release_date TEXT PRIMARY KEY,
  genre TEXT,
  MPAA_rating TEXT,
  total_gross TEXT,
  inflation_adjusted_gross TEXT
);
Sample rows from `movies_total_gross`:
Snow White and the Seven Dwarfs, Dec 21, 1937, Musical, G, $184,925,485, $5,228,953,251
Pinocchio, Feb 9, 1940, Adventure, G, $84,300,000, $2,188,229,052
Fantasia, Nov 13, 1940, Musical, G, $83,320,000, $2,187,090,808

CREATE TABLE `revenue` (
  Year INTEGER,
  Studio Entertainment[NI 1] REAL,
  Disney Consumer Products[NI 2] REAL,
  Disney Interactive[NI 3][Rev 1] INTEGER,
  Walt Disney Parks and Resorts REAL,
  Disney Media Networks TEXT,
  Total INTEGER
);
Sample rows from `revenue`:
1991, 2593.0, 724.0, None, 2794.0, None, 6111
1992, 3115.0, 1081.0, None, 3306.0, None, 7502
1993, 3673.4, 1415.1, None, 3440.7, None, 8529

CREATE TABLE `voice-actors` (
  character TEXT PRIMARY KEY,
  voice-actor TEXT,
  movie TEXT REFERENCES characters(movie_title)
);
Sample rows from `voice-actors`:
Abby Mallard, Joan Cusack, Chicken Little
Abigail Gabble, Monica Evans, The Aristocats
Abis Mal, Jason Alexander, The Return of Jafar

",movies_total_gross,"movie_title, genre, total_gross","characters, director, movies_total_gross, revenue, voice-actors"
shooting,"Among the cases dismissed by the grand jury disposition, what percentage of cases is where the subject is injured?",SELECT cast(SUM(subject_statuses = 'Injured') as real) * 100 / COUNT(case_number) FROM incidents WHERE grand_jury_disposition = 'No Bill',"CREATE TABLE `incidents` (
  case_number TEXT PRIMARY KEY,
  date DATE,
  location TEXT,
  subject_statuses TEXT,
  subject_weapon TEXT,
  subjects TEXT,
  subject_count INTEGER,
  officers TEXT
);
Sample rows from `incidents`:
031347-2015, 2015/2/9, 7400 Bonnie View Road, Deceased, Vehicle, Luster, Desmond Dwayne B/M, 1, Tollerton, Aaron W/M
072458-2016, 2016/3/26, 8218 Willoughby Boulevard, Shoot and Miss, Shotgun, Gilstrap, Bryan B/M, 1, Cardenas, Steven L/M
089985-2016, 2016/4/16, 4800 Columbia Ave, Shoot and Miss, Handgun, Unknown L/M, 1, Ruben, Fredirick W/M

","CREATE TABLE `incidents` (
  case_number TEXT PRIMARY KEY,
  date DATE,
  location TEXT,
  subject_statuses TEXT,
  subject_weapon TEXT,
  subjects TEXT,
  subject_count INTEGER,
  officers TEXT
);
Sample rows from `incidents`:
031347-2015, 2015/2/9, 7400 Bonnie View Road, Deceased, Vehicle, Luster, Desmond Dwayne B/M, 1, Tollerton, Aaron W/M
072458-2016, 2016/3/26, 8218 Willoughby Boulevard, Shoot and Miss, Shotgun, Gilstrap, Bryan B/M, 1, Cardenas, Steven L/M
089985-2016, 2016/4/16, 4800 Columbia Ave, Shoot and Miss, Handgun, Unknown L/M, 1, Ruben, Fredirick W/M

CREATE TABLE `officers` (
  case_number TEXT REFERENCES incidents(case_number),
  race TEXT,
  gender TEXT,
  last_name TEXT,
  first_name TEXT,
  full_name TEXT
);
Sample rows from `officers`:
44523A, L, M, Patino, Michael, Patino, Michael
44523A, W, M, Fillingim, Brian, Fillingim, Brian
121982X, L, M, Padilla, Gilbert, Padilla, Gilbert

CREATE TABLE `subjects` (
  case_number TEXT REFERENCES incidents(case_number),
  race TEXT,
  gender TEXT,
  last_name TEXT,
  first_name TEXT,
  full_name TEXT
);
Sample rows from `subjects`:
44523A, L, M, Curry, James, Curry, James
121982X, L, M, Chavez, Gabriel, Chavez, Gabriel
605484T, L, M, Salinas, Nick, Salinas, Nick

",incidents,"subject_statuses, case_number, grand_jury_disposition","incidents, officers, subjects"
codebase_comments,How many methods does solution 1 have? And please tell me if solution 1 needs to be compiled.,"SELECT COUNT(t2.solutionid) , case when t1.wascompiled = 0 then 'Needs' else 'NoNeeds' end needtocompile FROM solution as t1 inner JOIN method as t2 ON t1.id = t2.solutionid WHERE t2.solutionid = 1","CREATE TABLE `solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

CREATE TABLE `method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Method, 10860640
MethodParameter, 17514858
Repo, 156550

CREATE TABLE `Method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `Method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

CREATE TABLE `MethodParameter` (
  Id INTEGER,
  MethodId TEXT,
  Type TEXT,
  Name TEXT
);
Sample rows from `MethodParameter`:
1, 1, System.String, data
2, 2, System.Int32, i
3, 2, System.Int32, declstartpos

CREATE TABLE `Repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `Repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

CREATE TABLE `Solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `Solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

","solution, method","method.solutionid, solution.wascompiled, needtocompile, solution.id","sqlite_sequence, Method, MethodParameter, Repo, Solution"
beer_factory,"Which brand has the lowest star rating with a ""Too spicy!"" review?",SELECT t1.brandname FROM rootbeerbrand as t1 inner JOIN rootbeerreview as t2 ON t2.brandid = t1.brandid WHERE t2.starrating = 1 AND t2.review = 'Too Spicy!',"CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

CREATE TABLE `rootbeerreview` (
  CustomerID INTEGER PRIMARY KEY REFERENCES customers(CustomerID),
  BrandID INTEGER PRIMARY KEY REFERENCES rootbeerbrand(BrandID),
  StarRating INTEGER,
  ReviewDate DATE,
  Review TEXT
);
Sample rows from `rootbeerreview`:
101811, 10012, 5, 2013-07-15, None
101811, 10014, 1, 2013-07-08, None
101811, 10015, 3, 2013-07-25, None

","CREATE TABLE `customers` (
  CustomerID INTEGER,
  First TEXT,
  Last TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER,
  Email TEXT,
  PhoneNumber TEXT,
  FirstPurchaseDate DATE,
  SubscribedToEmailList TEXT,
  Gender TEXT
);
Sample rows from `customers`:
101811, Kenneth, Walton, 6715 Commonwealth Dr, Sacramento, CA, 94256, walton.k76@fastmail.com, (916) 918-1561, 2013-05-30, FALSE, M
103508, Madeleine, Jones, 3603 Leola Way, Sacramento, CA, 94258, j_madeleine@gmail.com, (916) 186-9423, 2013-02-06, FALSE, F
104939, Damen, Wheeler, 6740 Branwood Way, Orangevale, CA, 95662, dwheeler@outlook.com, (916) 164-1156, 2013-04-11, FALSE, M

CREATE TABLE `geolocation` (
  LocationID INTEGER REFERENCES location(LocationID),
  Latitude REAL,
  Longitude REAL
);
Sample rows from `geolocation`:
0, 0.0, 0.0
1, 38.566129, -121.426432
2, 38.559615, -121.42243

CREATE TABLE `location` (
  LocationID INTEGER REFERENCES geolocation(LocationID),
  LocationName TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER
);
Sample rows from `location`:
0, LOST, None, None, None, None
1, Sac State American River Courtyard, 6000 J St, Sacramento, CA, 95819
2, Sac State Union, 6000 J St, Sacramento, CA, 95819

CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

CREATE TABLE `rootbeerreview` (
  CustomerID INTEGER PRIMARY KEY REFERENCES customers(CustomerID),
  BrandID INTEGER PRIMARY KEY REFERENCES rootbeerbrand(BrandID),
  StarRating INTEGER,
  ReviewDate DATE,
  Review TEXT
);
Sample rows from `rootbeerreview`:
101811, 10012, 5, 2013-07-15, None
101811, 10014, 1, 2013-07-08, None
101811, 10015, 3, 2013-07-25, None

CREATE TABLE `transaction` (
  TransactionID INTEGER,
  CreditCardNumber INTEGER,
  CustomerID INTEGER REFERENCES customers(CustomerID),
  TransactionDate DATE,
  CreditCardType TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  RootBeerID INTEGER REFERENCES rootbeer(RootBeerID),
  PurchasePrice REAL
);
Sample rows from `transaction`:
100000, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105661, 3.0
100001, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105798, 3.0
100002, 6011583832864739, 864896, 2014-07-07, Discover, 2, 102514, 3.0

","rootbeerbrand, rootbeerreview","rootbeerbrand.brandname, rootbeerreview.brandid, rootbeerbrand.brandid, rootbeerreview.starrating, rootbeerreview.review","customers, geolocation, location, rootbeerbrand, rootbeer, rootbeerreview, transaction"
law_episode,"For season 9, episode 17 of the show Law and Order, how many roles have been included in the credit?",SELECT COUNT(t2.role) FROM episode as t1 inner JOIN credit as t2 ON t1.episode_id = t2.episode_id WHERE t1.series = 'Law and Order' AND t1.season = 9 AND t1.episode = 17 AND t2.credited = 'true',"CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `credit` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  person_id TEXT PRIMARY KEY REFERENCES Person(person_id),
  category TEXT,
  role TEXT,
  credited TEXT
);
Sample rows from `credit`:
tt0629204, nm0226352, Additional Crew, technical advisor, true
tt0629204, nm0506974, Additional Crew, production accountant, true
tt0629204, nm4103116, Additional Crew, production accountant, true

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
tt0629239, nun
tt0629239, priest
tt0629420, police officer

CREATE TABLE `Person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  series TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  person_id TEXT REFERENCES Person(person_id),
  role TEXT,
  result TEXT
);
Sample rows from `Award`:
258, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0937725, None, Winner
259, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0792309, None, Winner
260, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0049569, None, Winner

CREATE TABLE `Credit` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  person_id TEXT PRIMARY KEY REFERENCES Person(person_id),
  category TEXT,
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
tt0629204, nm0226352, Additional Crew, technical advisor, true
tt0629204, nm0506974, Additional Crew, production accountant, true
tt0629204, nm4103116, Additional Crew, production accountant, true

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
tt0629204, 10, 36, 17.7
tt0629204, 9, 39, 19.2
tt0629204, 8, 64, 31.5

","episode, credit","credit.role, episode.episode_id, credit.episode_id, episode.series, episode.season, episode.episode, credit.credited","Episode, Keyword, Person, Award, Credit, Vote"
public_review_platform,"In businesses with a category of ""DJs"", how many businesses are rated less than 5?",SELECT COUNT(t1.business_id) FROM business as t1 inner JOIN business_categories as t2 ON t1.business_id = t2.business_id inner JOIN categories as t3 ON t2.category_id = t3.category_id WHERE t3.category_name = 'DJs' AND t1.stars < 5,"CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `business_categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `business_categories`:
1, 8
1, 143
2, 18

CREATE TABLE `categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","business, business_categories, categories","business.business_id, business_categories.business_id, business_categories.category_id, categories.category_id, categories.category_name, business.stars","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
public_review_platform,"For all the Yelp businesses that allow customers bring their own beer, what percentage of them are in ""Phoenix""?","SELECT cast(SUM(case when t3.city LIKE 'Phoenix' then 1 else 0 end) as real) * 100 / COUNT(t2.business_id) as ""percentage"" FROM attributes as t1 inner JOIN business_attributes as t2 ON t1.attribute_id = t2.attribute_id inner JOIN business as t3 ON t2.business_id = t3.business_id WHERE t1.attribute_name LIKE 'BYOB' AND t2.attribute_value LIKE 'TRUE'","CREATE TABLE `attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `business_attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `business_attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","attributes, business_attributes, business","business.city, business_attributes.business_id, attributes.attribute_id, business_attributes.attribute_id, business.business_id, attributes.attribute_name, business_attributes.attribute_value","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
restaurant,"Among the bakeries, what is total number of bakery located at University Avenue, Palo Alto?",SELECT COUNT(t1.id_restaurant) FROM location as t1 inner JOIN generalinfo as t2 ON t1.id_restaurant = t2.id_restaurant WHERE t2.food_type = 'bakery' AND t2.city = 'palo alto' AND t1.street_name = 'university ave.',"CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

","CREATE TABLE `geographic` (
  city TEXT PRIMARY KEY,
  county TEXT,
  region TEXT
);
Sample rows from `geographic`:
alameda, alameda county, bay area
alamo, contra costa county, bay area
albany, alameda county, bay area

CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

","location, generalinfo","location.id_restaurant, generalinfo.id_restaurant, generalinfo.food_type, generalinfo.city, location.street_name","geographic, generalinfo, location"
airline,Provide the destinations of flight number 1596.,SELECT dest FROM airlines WHERE op_carrier_fl_num = 1596,"CREATE TABLE `airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

","CREATE TABLE `Air Carriers` (
  Code INTEGER,
  Description TEXT
);
Sample rows from `Air Carriers`:
19031, Mackey International Inc.: MAC
19032, Munz Northern Airlines Inc.: XY
19033, Cochise Airlines Inc.: COC

CREATE TABLE `Airports` (
  Code TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `Airports`:
01A, Afognak Lake, AK: Afognak Lake Airport
03A, Granite Mountain, AK: Bear Creek Mining Strip
04A, Lik, AK: Lik Mining Camp

CREATE TABLE `Airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `Airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

",airlines,"dest, op_carrier_fl_num","Air Carriers, Airports, Airlines"
image_and_language,Tell the attribute of the weeds in image no.2377988.,SELECT t2.att_class FROM img_obj_att as t1 inner JOIN att_classES as t2 ON t1.att_class_ID = t2.att_class_ID inner JOIN img_obj as t3 ON t1.img_id = t3.img_id inner JOIN OBJ_CLasSES as t4 ON t3.OBJ_CLasS_ID = t4.OBJ_CLasS_ID WHERE t4.OBJ_CLasS = 'weeds' AND t1.img_id = 2377988,"CREATE TABLE `img_obj_att` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `img_obj_att`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `att_classES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `att_classES`:
0, building s
1, indoors
2, cluttered

CREATE TABLE `img_obj` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `img_obj`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `OBJ_CLasSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLasSES`:
0, awning
1, goggles
2, dot

","CREATE TABLE `ATT_CLASSES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `ATT_CLASSES`:
0, building s
1, indoors
2, cluttered

CREATE TABLE `OBJ_CLASSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLASSES`:
0, awning
1, goggles
2, dot

CREATE TABLE `IMG_OBJ` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `IMG_OBJ`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `IMG_OBJ_ATT` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_OBJ_ATT`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `PRED_CLASSES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `PRED_CLASSES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `IMG_REL` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_REL`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

","img_obj_att, att_classES, img_obj, OBJ_CLasSES","att_classES.att_class, img_obj_att.att_class_ID, att_classES.att_class_ID, img_obj_att.img_id, img_obj.img_id, img_obj.OBJ_CLasS_ID, OBJ_CLasSES.OBJ_CLasS_ID, OBJ_CLasSES.OBJ_CLasS","ATT_CLASSES, OBJ_CLASSES, IMG_OBJ, IMG_OBJ_ATT, PRED_CLASSES, IMG_REL"
restaurant,What types of food are served at the 4 top-reviewed restaurants?,SELECT food_type FROM generalinfo WHERE review = ( SELECT MAX(review) FROM generalinfo ) LIMIT 4,"CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

","CREATE TABLE `geographic` (
  city TEXT PRIMARY KEY,
  county TEXT,
  region TEXT
);
Sample rows from `geographic`:
alameda, alameda county, bay area
alamo, contra costa county, bay area
albany, alameda county, bay area

CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

",generalinfo,"food_type, review","geographic, generalinfo, location"
shakespeare,Give the title and the characters name of the most recent work of Shakespeare.,"SELECT t1.title, t4.charname FROM works as t1 inner JOIN chapters as t2 ON t1.id = t2.work_id inner JOIN paragraphs as t3 ON t2.id = t3.chapter_id inner JOIN characters as t4 ON t3.character_id = t4.id ORDER BY t1.date DESC LIMIT 1","CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

","CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
chapters, 19648
characters, 1266
paragraphs, 666327

CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

","works, chapters, paragraphs, characters","works.title, characters.charname, works.id, chapters.work_id, chapters.id, paragraphs.chapter_id, paragraphs.character_id, characters.id, works.date","chapters, sqlite_sequence, characters, paragraphs, works"
cs_semester,"Among professors with the highest teachability, how many of their students have high salary?",SELECT COUNT(t1.student_id) FROM ra as t1 inner JOIN prof as t2 ON t1.prof_id = t2.prof_id WHERE t1.salary = 'high' ORDER BY t2.teachingability DESC LIMIT 1,"CREATE TABLE `ra` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `ra`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

CREATE TABLE `prof` (
  prof_id INTEGER,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  popularity INTEGER,
  teachingability INTEGER,
  graduate_from TEXT
);
Sample rows from `prof`:
1, Male, Nathaniel, Pigford, npigford0@hku.hk, 3, 5, University of Washington
2, Male, Zhihua, Zhou, zzhihua@hku.hk, 2, 1, Beijing Polytechnic University
3, Male, Ogdon, Zywicki, ozywicki2@hku.hk, 2, 2, University of Boston

","CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

CREATE TABLE `prof` (
  prof_id INTEGER,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  popularity INTEGER,
  teachingability INTEGER,
  graduate_from TEXT
);
Sample rows from `prof`:
1, Male, Nathaniel, Pigford, npigford0@hku.hk, 3, 5, University of Washington
2, Male, Zhihua, Zhou, zzhihua@hku.hk, 2, 1, Beijing Polytechnic University
3, Male, Ogdon, Zywicki, ozywicki2@hku.hk, 2, 2, University of Boston

CREATE TABLE `RA` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `RA`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

","ra, prof","ra.student_id, ra.prof_id, prof.prof_id, ra.salary, prof.teachingability","course, prof, RA, registration, student"
codebase_comments,"How many path does the github address ""https://github.com/jeffdik/tachy.git"" have?",SELECT COUNT(DISTINCT t2.path) FROM repo as t1 inner JOIN solution as t2 ON t1.id = t2.repoid WHERE t1.url = 'https://github.com/jeffdik/tachy.git',"CREATE TABLE `repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

CREATE TABLE `solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Method, 10860640
MethodParameter, 17514858
Repo, 156550

CREATE TABLE `Method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `Method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

CREATE TABLE `MethodParameter` (
  Id INTEGER,
  MethodId TEXT,
  Type TEXT,
  Name TEXT
);
Sample rows from `MethodParameter`:
1, 1, System.String, data
2, 2, System.Int32, i
3, 2, System.Int32, declstartpos

CREATE TABLE `Repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `Repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

CREATE TABLE `Solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `Solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

","repo, solution","solution.path, repo.id, solution.repoid, repo.url","sqlite_sequence, Method, MethodParameter, Repo, Solution"
video_games,List down the game platform IDs of games with a region ID of 1.,SELECt t.game_platform_id FROM region_sales as t WHERE t.region_id = 1,"CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

","CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

",region_sales,"region_sales.game_platform_id, region_sales.region_id","genre, game, platform, publisher, game_publisher, game_platform, region, region_sales"
beer_factory,At what latitude is the Thomas Kemper brand beer consumed the most?,SELECT t3.latitude FROM rootbeer as t1 inner JOIN rootbeerbrand as t2 ON t1.brandid = t2.brandid inner JOIN geolocation as t3 ON t1.locationid = t3.locationid WHERE t2.brandname = 'Thomas Kemper' GROUP BY t3.latitude ORDER BY COUNT(t1.brandid) DESC LIMIT 1,"CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

CREATE TABLE `geolocation` (
  LocationID INTEGER REFERENCES location(LocationID),
  Latitude REAL,
  Longitude REAL
);
Sample rows from `geolocation`:
0, 0.0, 0.0
1, 38.566129, -121.426432
2, 38.559615, -121.42243

","CREATE TABLE `customers` (
  CustomerID INTEGER,
  First TEXT,
  Last TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER,
  Email TEXT,
  PhoneNumber TEXT,
  FirstPurchaseDate DATE,
  SubscribedToEmailList TEXT,
  Gender TEXT
);
Sample rows from `customers`:
101811, Kenneth, Walton, 6715 Commonwealth Dr, Sacramento, CA, 94256, walton.k76@fastmail.com, (916) 918-1561, 2013-05-30, FALSE, M
103508, Madeleine, Jones, 3603 Leola Way, Sacramento, CA, 94258, j_madeleine@gmail.com, (916) 186-9423, 2013-02-06, FALSE, F
104939, Damen, Wheeler, 6740 Branwood Way, Orangevale, CA, 95662, dwheeler@outlook.com, (916) 164-1156, 2013-04-11, FALSE, M

CREATE TABLE `geolocation` (
  LocationID INTEGER REFERENCES location(LocationID),
  Latitude REAL,
  Longitude REAL
);
Sample rows from `geolocation`:
0, 0.0, 0.0
1, 38.566129, -121.426432
2, 38.559615, -121.42243

CREATE TABLE `location` (
  LocationID INTEGER REFERENCES geolocation(LocationID),
  LocationName TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER
);
Sample rows from `location`:
0, LOST, None, None, None, None
1, Sac State American River Courtyard, 6000 J St, Sacramento, CA, 95819
2, Sac State Union, 6000 J St, Sacramento, CA, 95819

CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

CREATE TABLE `rootbeerreview` (
  CustomerID INTEGER PRIMARY KEY REFERENCES customers(CustomerID),
  BrandID INTEGER PRIMARY KEY REFERENCES rootbeerbrand(BrandID),
  StarRating INTEGER,
  ReviewDate DATE,
  Review TEXT
);
Sample rows from `rootbeerreview`:
101811, 10012, 5, 2013-07-15, None
101811, 10014, 1, 2013-07-08, None
101811, 10015, 3, 2013-07-25, None

CREATE TABLE `transaction` (
  TransactionID INTEGER,
  CreditCardNumber INTEGER,
  CustomerID INTEGER REFERENCES customers(CustomerID),
  TransactionDate DATE,
  CreditCardType TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  RootBeerID INTEGER REFERENCES rootbeer(RootBeerID),
  PurchasePrice REAL
);
Sample rows from `transaction`:
100000, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105661, 3.0
100001, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105798, 3.0
100002, 6011583832864739, 864896, 2014-07-07, Discover, 2, 102514, 3.0

","rootbeer, rootbeerbrand, geolocation","geolocation.latitude, rootbeer.brandid, rootbeerbrand.brandid, rootbeer.locationid, geolocation.locationid, rootbeerbrand.brandname","customers, geolocation, location, rootbeerbrand, rootbeer, rootbeerreview, transaction"
bike_share_1,Find the average ride time of the bikes that started at Steuart at Market station and ended at Embarcadero at Sansome station in July 2014.,SELECT AVG(duration) FROM trip WHERE start_date = '7/1/2014%' AND end_date = '7/31/2014%' AND start_station_name = 'Steuart at Market' AND end_station_name = 'Embarcadero at Sansome',"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);
Sample rows from `trip`:
4069, 174, 8/29/2013 9:08, 2nd at South Park, 64, 8/29/2013 9:11, 2nd at South Park, 64, 288, Subscriber, 94114
4073, 1067, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:42, San Francisco Caltrain 2 (330 Townsend), 69, 321, Subscriber, 94703
4074, 1131, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:43, San Francisco Caltrain 2 (330 Townsend), 69, 317, Subscriber, 94115

","CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat REAL,
  long REAL,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);
Sample rows from `station`:
2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013
3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013
4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013

CREATE TABLE `status` (
  station_id INTEGER,
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);
Sample rows from `status`:
2, 2, 25, 2013/08/29 12:06:01
2, 2, 25, 2013/08/29 12:07:01
2, 2, 25, 2013/08/29 12:08:01

CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);
Sample rows from `trip`:
4069, 174, 8/29/2013 9:08, 2nd at South Park, 64, 8/29/2013 9:11, 2nd at South Park, 64, 288, Subscriber, 94114
4073, 1067, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:42, San Francisco Caltrain 2 (330 Townsend), 69, 321, Subscriber, 94703
4074, 1131, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:43, San Francisco Caltrain 2 (330 Townsend), 69, 317, Subscriber, 94115

CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches REAL,
  mean_sea_level_pressure_inches REAL,
  min_sea_level_pressure_inches REAL,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches TEXT,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code TEXT
);
Sample rows from `weather`:
8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107
8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30.0, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107
8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30.0, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107

",trip,"duration, start_date, end_date, start_station_name, end_station_name","station, status, trip, weather"
food_inspection_2,State the inspection pass rate of Pockets Restaurant.,SELECT cast(COUNT(case when t2.results = 'Pass' then t2.inspection_id else null end) as real) * 100 / COUNT(t2.inspection_id) FROM establishment as t1 inner JOIN inspection as t2 ON t1.license_no = t2.license_no WHERE t1.dba_name = 'POCKETS' AND t1.facility_type = 'Restaurant',"CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

","establishment, inspection","inspection.results, inspection.inspection_id, establishment.license_no, inspection.license_no, establishment.dba_name, establishment.facility_type","employee, establishment, inspection, inspection_point, violation"
chicago_crime,How many crimes described as 'The theft of a motor vehicle' by the FBI have taken place in the Lake View community?,SELECT SUM(case when t3.community_area_name = 'Lake View' then 1 else 0 end) FROM fbi_code as t1 inner JOIN crime as t2 ON t2.fbi_code_no = t1.fbi_code_no inner JOIN community_area as t3 ON t3.community_area_no = t2.community_area_no WHERE t1.description = 'The theft of a motor vehicle.',"CREATE TABLE `fbi_code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `fbi_code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

CREATE TABLE `community_area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `community_area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

","CREATE TABLE `Community_Area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `Community_Area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `District` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `District`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `FBI_Code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `FBI_Code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `IUCR` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `IUCR`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `Neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `Neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `Ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `Ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `Crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `Crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","fbi_code, crime, community_area","community_area.community_area_name, crime.fbi_code_no, fbi_code.fbi_code_no, community_area.community_area_no, crime.community_area_no, fbi_code.description","Community_Area, District, FBI_Code, IUCR, Neighborhood, Ward, Crime"
authors,What is the title of the paper published in 1995 and whose author included Thomas Wiegand?,SELECT t2.title FROM paperauthor as t1 inner JOIN paper as t2 ON t1.paperid = t2.id WHERE t1.name = 'Thomas Wiegand' AND t2.year = 1995,"CREATE TABLE `paperauthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `paperauthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

CREATE TABLE `paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

","CREATE TABLE `Author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `Author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

CREATE TABLE `Conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

CREATE TABLE `Journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `Paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `Paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `PaperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `PaperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

","paperauthor, paper","paper.title, paperauthor.paperid, paper.id, paperauthor.name, paper.year","Author, Conference, Journal, Paper, PaperAuthor"
public_review_platform,"Among the active businesses in Arizona, how many businesses work after 12PM?",SELECT COUNT(DISTINCT t2.business_id) FROM business_hours as t1 inner JOIN business as t2 ON t1.business_id = t2.business_id inner JOIN business_categories as t3 ON t2.business_id = t3.business_id inner JOIN categories as t4 ON t3.category_id = t4.category_id WHERE t2.active = 'true' AND t2.state = 'AZ' AND t1.opening_time > '12PM',"CREATE TABLE `business_hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `business_hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `business_categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `business_categories`:
1, 8
1, 143
2, 18

CREATE TABLE `categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","business_hours, business, business_categories, categories","business.business_id, business_hours.business_id, business_categories.business_id, business_categories.category_id, categories.category_id, business.active, business.state, business_hours.opening_time","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
sales,How many chainring bolts were sold under sales ID 551971?,SELECT t1.quantity FROM sales as t1 inner JOIN products as t2 ON t1.productid = t2.productid WHERE t2.name = 'Chainring Bolts' AND t1.salesID = 551971,"CREATE TABLE `sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

CREATE TABLE `products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Employees`:
1, Abraham, e, Bennet
2, Reginald, l, Blotchet-Halls
3, Cheryl, a, Carson

CREATE TABLE `Products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

CREATE TABLE `Sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `Sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

","sales, products","sales.quantity, sales.productid, products.productid, products.name, sales.salesID","Customers, Employees, Products, Sales"
cs_semester,"Which student is more satisfied with the course Machine Learning Theory, Willie Rechert or Laughton Antonio?","SELECT t1.f_name, t1.l_name FROM student as t1 inner JOIN registration as t2 ON t1.student_id = t2.student_id inner JOIN course as t3 ON t2.course_id = t3.course_id WHERE (t1.f_name = 'Laughton' OR t1.f_name = 'Willie') AND (t1.l_name = 'Antonio' OR t1.l_name = 'Rechert') AND t3.name = 'Machine Learning Theory' ORDER BY t2.sat DESC LIMIT 1","CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

","CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

CREATE TABLE `prof` (
  prof_id INTEGER,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  popularity INTEGER,
  teachingability INTEGER,
  graduate_from TEXT
);
Sample rows from `prof`:
1, Male, Nathaniel, Pigford, npigford0@hku.hk, 3, 5, University of Washington
2, Male, Zhihua, Zhou, zzhihua@hku.hk, 2, 1, Beijing Polytechnic University
3, Male, Ogdon, Zywicki, ozywicki2@hku.hk, 2, 2, University of Boston

CREATE TABLE `RA` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `RA`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

","student, registration, course","student.f_name, student.l_name, student.student_id, registration.student_id, registration.course_id, course.course_id, course.name, registration.sat","course, prof, RA, registration, student"
authors,"Among author ID of under 1000, who published the paper in affiliation with Zurich, ETH, provide paper ID, year and keyword if any.","SELECT t2.id, t2.year, t2.keyword FROM paperauthor as t1 inner JOIN paper as t2 ON t1.paperid = t2.id WHERE t1.Authorid < 1000 AND t1.affiliation = 'Zurich, ETH'","CREATE TABLE `paperauthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `paperauthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

CREATE TABLE `paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

","CREATE TABLE `Author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `Author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

CREATE TABLE `Conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

CREATE TABLE `Journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `Paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `Paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `PaperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `PaperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

","paperauthor, paper","paper.id, paper.year, paper.keyword, paperauthor.paperid, paperauthor.Authorid, paperauthor.affiliation","Author, Conference, Journal, Paper, PaperAuthor"
student_loan,How many students enlisted in the fire-department?,SELECT COUNT(name) FROM enlist WHERE organ = 'fire_department',"CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

",enlist,"name, organ","bool, person, disabled, enlist, filed_for_bankrupcy, longest_absense_from_school, male, no_payment_due, unemployed, enrolled"
chicago_crime,Give the neighborhood name of West Englewood community.,SELECT t1.neighborhood_name FROM neighborhood as t1 inner JOIN community_area as t2 ON t1.community_area_no = t2.community_area_no WHERE t2.community_area_name = 'West Englewood',"CREATE TABLE `neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `community_area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `community_area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

","CREATE TABLE `Community_Area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `Community_Area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `District` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `District`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `FBI_Code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `FBI_Code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `IUCR` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `IUCR`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `Neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `Neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `Ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `Ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `Crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `Crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","neighborhood, community_area","neighborhood.neighborhood_name, neighborhood.community_area_no, community_area.community_area_no, community_area.community_area_name","Community_Area, District, FBI_Code, IUCR, Neighborhood, Ward, Crime"
shipping,"Among the shipments done by Sue Newell, how many of them are for S K L Enterprises Inc?",SELECT COUNT(*) FROM customer as t1 inner JOIN shipment as t2 ON t1.cust_id = t2.cust_id inner JOIN driver as t3 ON t3.driver_id = t2.driver_id WHERE t1.cust_name = 'S K L Enterprises Inc' AND t3.first_name = 'Sue' AND t3.last_name = 'Newell',"CREATE TABLE `customer` (
  cust_id INTEGER,
  cust_name TEXT,
  annual_revenue INTEGER,
  cust_type TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip REAL,
  phone TEXT
);
Sample rows from `customer`:
193, Advanced Fabricators, 39588651, manufacturer, 5141 Summit Boulevard, West Palm Beach, FL, 33415.0, (561) 683-3535
304, Pard's Trailer Sales, 17158109, wholesaler, 5910 South 300 West, Salt Lake City, UT, 84107.0, (801) 262-4864
314, Saar Enterprises, Inc., 47403613, retailer, 11687 192nd Street, Council Bluffs, IA, 51503.0, (712) 366-4929

CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

CREATE TABLE `driver` (
  driver_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip_code INTEGER,
  phone TEXT
);
Sample rows from `driver`:
20, Sue, Newell, 268 Richmond Ave, Memphis, TN, 38106, (901) 774-6569
21, Andrea, Simons, 3574 Oak Limb Cv, Memphis, TN, 38135, (901) 384-0984
22, Roger, McHaney, 1839 S Orleans St, Memphis, TN, 38106, (901) 948-1043

","CREATE TABLE `city` (
  city_id INTEGER,
  city_name TEXT,
  state TEXT,
  population INTEGER,
  area REAL
);
Sample rows from `city`:
100, Union City, New Jersey, 67088, 1.3
101, Huntington Park, California, 61348, 3.0
102, Passaic, New Jersey, 67861, 3.1

CREATE TABLE `customer` (
  cust_id INTEGER,
  cust_name TEXT,
  annual_revenue INTEGER,
  cust_type TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip REAL,
  phone TEXT
);
Sample rows from `customer`:
193, Advanced Fabricators, 39588651, manufacturer, 5141 Summit Boulevard, West Palm Beach, FL, 33415.0, (561) 683-3535
304, Pard's Trailer Sales, 17158109, wholesaler, 5910 South 300 West, Salt Lake City, UT, 84107.0, (801) 262-4864
314, Saar Enterprises, Inc., 47403613, retailer, 11687 192nd Street, Council Bluffs, IA, 51503.0, (712) 366-4929

CREATE TABLE `driver` (
  driver_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip_code INTEGER,
  phone TEXT
);
Sample rows from `driver`:
20, Sue, Newell, 268 Richmond Ave, Memphis, TN, 38106, (901) 774-6569
21, Andrea, Simons, 3574 Oak Limb Cv, Memphis, TN, 38135, (901) 384-0984
22, Roger, McHaney, 1839 S Orleans St, Memphis, TN, 38106, (901) 948-1043

CREATE TABLE `truck` (
  truck_id INTEGER,
  make TEXT,
  model_year INTEGER
);
Sample rows from `truck`:
1, Peterbilt, 2005
2, Mack, 2006
3, Peterbilt, 2007

CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

","customer, shipment, driver","customer.cust_id, shipment.cust_id, driver.driver_id, shipment.driver_id, customer.cust_name, driver.first_name, driver.last_name","city, customer, driver, truck, shipment"
sales_in_weather,"Among the days on which over 100 units of item no.5 were sold in store no.3, on which date was the temperature range the biggest?",SELECT t2.`date` FROM relation as t1 inner JOIN sales_in_weather as t2 ON t1.store_nbr = t2.store_nbr inner JOIN weather as t3 ON t1.station_nbr = t3.station_nbr WHERE t2.store_nbr = 3 AND t2.item_nbr = 5 AND t2.units > 100 ORDER BY tmax - tmin DESC LIMIT 1,"CREATE TABLE `relation` (
  store_nbr INTEGER REFERENCES sales_in_weather(store_nbr),
  station_nbr INTEGER REFERENCES weather(station_nbr)
);
Sample rows from `relation`:
1, 1
2, 14
3, 7

CREATE TABLE `sales_in_weather` (
  date DATE PRIMARY KEY,
  store_nbr INTEGER PRIMARY KEY,
  item_nbr INTEGER PRIMARY KEY,
  units INTEGER
);
Sample rows from `sales_in_weather`:
2012-01-01, 1, 1, 0
2012-01-01, 1, 2, 0
2012-01-01, 1, 3, 0

CREATE TABLE `weather` (
  station_nbr INTEGER PRIMARY KEY,
  date DATE PRIMARY KEY,
  tmax INTEGER,
  tmin INTEGER,
  tavg INTEGER,
  depart INTEGER,
  dewpoint INTEGER,
  wetbulb INTEGER,
  heat INTEGER,
  cool INTEGER,
  sunrise TEXT,
  sunset TEXT,
  codesum TEXT,
  snowfall REAL,
  preciptotal REAL,
  stnpressure REAL,
  sealevel REAL,
  resultspeed REAL,
  resultdir INTEGER,
  avgspeed REAL
);
Sample rows from `weather`:
1, 2012-01-01, 52, 31, 42, None, 36, 40, 23, 0, None, None, RA FZFG BR, None, 0.05, 29.78, 29.92, 3.6, 20, 4.6
1, 2012-01-02, 50, 31, 41, None, 26, 35, 24, 0, None, None,  , None, 0.01, 29.44, 29.62, 9.8, 24, 10.3
1, 2012-01-03, 32, 11, 22, None, 4, 18, 43, 0, None, None,  , None, 0.0, 29.67, 29.87, 10.8, 31, 11.6

","CREATE TABLE `sales_in_weather` (
  date DATE PRIMARY KEY,
  store_nbr INTEGER PRIMARY KEY,
  item_nbr INTEGER PRIMARY KEY,
  units INTEGER
);
Sample rows from `sales_in_weather`:
2012-01-01, 1, 1, 0
2012-01-01, 1, 2, 0
2012-01-01, 1, 3, 0

CREATE TABLE `weather` (
  station_nbr INTEGER PRIMARY KEY,
  date DATE PRIMARY KEY,
  tmax INTEGER,
  tmin INTEGER,
  tavg INTEGER,
  depart INTEGER,
  dewpoint INTEGER,
  wetbulb INTEGER,
  heat INTEGER,
  cool INTEGER,
  sunrise TEXT,
  sunset TEXT,
  codesum TEXT,
  snowfall REAL,
  preciptotal REAL,
  stnpressure REAL,
  sealevel REAL,
  resultspeed REAL,
  resultdir INTEGER,
  avgspeed REAL
);
Sample rows from `weather`:
1, 2012-01-01, 52, 31, 42, None, 36, 40, 23, 0, None, None, RA FZFG BR, None, 0.05, 29.78, 29.92, 3.6, 20, 4.6
1, 2012-01-02, 50, 31, 41, None, 26, 35, 24, 0, None, None,  , None, 0.01, 29.44, 29.62, 9.8, 24, 10.3
1, 2012-01-03, 32, 11, 22, None, 4, 18, 43, 0, None, None,  , None, 0.0, 29.67, 29.87, 10.8, 31, 11.6

CREATE TABLE `relation` (
  store_nbr INTEGER REFERENCES sales_in_weather(store_nbr),
  station_nbr INTEGER REFERENCES weather(station_nbr)
);
Sample rows from `relation`:
1, 1
2, 14
3, 7

","relation, sales_in_weather, weather","sales_in_weather.date, relation.store_nbr, sales_in_weather.store_nbr, relation.station_nbr, weather.station_nbr, sales_in_weather.item_nbr, sales_in_weather.units, tmax, tmin","sales_in_weather, weather, relation"
olympics,Provide the name of competitors from Greece.,SELECT t3.full_name FROM noc_region as t1 inner JOIN person_region as t2 ON t1.id = t2.region_id inner JOIN person as t3 ON t2.person_id = t3.id WHERE t1.region_name = 'Greece',"CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

","CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `medal` (
  id INTEGER,
  medal_name TEXT
);
Sample rows from `medal`:
1, Gold
2, Silver
3, Bronze

CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `sport` (
  id INTEGER,
  sport_name TEXT
);
Sample rows from `sport`:
1, Aeronautics
2, Alpine Skiing
3, Alpinism

CREATE TABLE `event` (
  id INTEGER,
  sport_id INTEGER REFERENCES sport(id),
  event_name TEXT
);
Sample rows from `event`:
1, 9, Basketball Men's Basketball
2, 33, Judo Men's Extra-Lightweight
3, 25, Football Men's Football

CREATE TABLE `competitor_event` (
  event_id INTEGER REFERENCES event(id),
  competitor_id INTEGER REFERENCES games_competitor(id),
  medal_id INTEGER REFERENCES medal(id)
);
Sample rows from `competitor_event`:
1, 1, 4
2, 2, 4
3, 3, 4

","noc_region, person_region, person","person.full_name, noc_region.id, person_region.region_id, person_region.person_id, person.id, noc_region.region_name","city, games, games_city, medal, noc_region, person, games_competitor, person_region, sport, event, competitor_event"
software_company,What is the average education level of customers from the place with the highest average income per month?,SELECT AVG(t1.educationnum) FROM customers as t1 inner JOIN demog as t2 ON t1.geoid = t2.geoid ORDER BY t2.income_k DESC LIMIT 1,"CREATE TABLE `customers` (
  ID INTEGER,
  SEX TEXT,
  MARITAL_STATUS TEXT,
  GEOID INTEGER REFERENCES Demog(None),
  EDUCATIONNUM INTEGER,
  OCCUPATION TEXT,
  age INTEGER
);
Sample rows from `customers`:
0, Male, Never-married, 61, 7, Machine-op-inspct, 62
1, Male, Married-civ-spouse, 70, 3, Handlers-cleaners, 78
2, Male, Never-married, 53, 7, Machine-op-inspct, 69

CREATE TABLE `demog` (
  GEOID INTEGER,
  INHABITANTS_K REAL,
  INCOME_K REAL,
  A_VAR1 REAL,
  A_VAR2 REAL,
  A_VAR3 REAL,
  A_VAR4 REAL,
  A_VAR5 REAL,
  A_VAR6 REAL,
  A_VAR7 REAL,
  A_VAR8 REAL,
  A_VAR9 REAL,
  A_VAR10 REAL,
  A_VAR11 REAL,
  A_VAR12 REAL,
  A_VAR13 REAL,
  A_VAR14 REAL,
  A_VAR15 REAL,
  A_VAR16 REAL,
  A_VAR17 REAL,
  A_VAR18 REAL
);
Sample rows from `demog`:
0, 30.046, 2631.47, 6.084, 5.79, 8.595, 3.935, 6.362, 8.626, 4.624, 8.324, 5.233, 6.232, 5.205, 8.231, 6.746, 8.679, 5.292, 3.5, 5.512, 5.783
1, 36.25, 3012.75, 4.604, 8.309, 6.007, 5.938, 8.773, 3.579, 6.349, 4.694, 6.884, 7.062, 7.319, 3.72, 6.405, 7.202, 4.932, 7.969, 8.15, 5.633
2, 47.645, 2192.41, 4.911, 8.557, 5.934, 6.494, 9.172, 3.202, 6.157, 4.822, 7.942, 7.901, 7.928, 2.33, 6.029, 6.455, 4.72, 8.564, 8.342, 4.938

","CREATE TABLE `Demog` (
  GEOID INTEGER,
  INHABITANTS_K REAL,
  INCOME_K REAL,
  A_VAR1 REAL,
  A_VAR2 REAL,
  A_VAR3 REAL,
  A_VAR4 REAL,
  A_VAR5 REAL,
  A_VAR6 REAL,
  A_VAR7 REAL,
  A_VAR8 REAL,
  A_VAR9 REAL,
  A_VAR10 REAL,
  A_VAR11 REAL,
  A_VAR12 REAL,
  A_VAR13 REAL,
  A_VAR14 REAL,
  A_VAR15 REAL,
  A_VAR16 REAL,
  A_VAR17 REAL,
  A_VAR18 REAL
);
Sample rows from `Demog`:
0, 30.046, 2631.47, 6.084, 5.79, 8.595, 3.935, 6.362, 8.626, 4.624, 8.324, 5.233, 6.232, 5.205, 8.231, 6.746, 8.679, 5.292, 3.5, 5.512, 5.783
1, 36.25, 3012.75, 4.604, 8.309, 6.007, 5.938, 8.773, 3.579, 6.349, 4.694, 6.884, 7.062, 7.319, 3.72, 6.405, 7.202, 4.932, 7.969, 8.15, 5.633
2, 47.645, 2192.41, 4.911, 8.557, 5.934, 6.494, 9.172, 3.202, 6.157, 4.822, 7.942, 7.901, 7.928, 2.33, 6.029, 6.455, 4.72, 8.564, 8.342, 4.938

CREATE TABLE `mailings3` (
  REFID INTEGER,
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `mailings3`:
60000, 2007-07-01 12:00:00.0, false
60001, 2007-07-01 12:00:00.0, false
60002, 2007-07-01 12:00:00.0, false

CREATE TABLE `Customers` (
  ID INTEGER,
  SEX TEXT,
  MARITAL_STATUS TEXT,
  GEOID INTEGER REFERENCES Demog(None),
  EDUCATIONNUM INTEGER,
  OCCUPATION TEXT,
  age INTEGER
);
Sample rows from `Customers`:
0, Male, Never-married, 61, 7, Machine-op-inspct, 62
1, Male, Married-civ-spouse, 70, 3, Handlers-cleaners, 78
2, Male, Never-married, 53, 7, Machine-op-inspct, 69

CREATE TABLE `Mailings1_2` (
  REFID INTEGER REFERENCES Customers(None),
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `Mailings1_2`:
0, 2007-02-01 12:00:00.0, false
1, 2007-02-01 12:00:00.0, false
2, 2007-02-01 12:00:00.0, false

CREATE TABLE `Sales` (
  EVENTID INTEGER,
  REFID INTEGER REFERENCES Customers(None),
  EVENT_DATE DATETIME,
  AMOUNT REAL
);
Sample rows from `Sales`:
0, 0, 2006-12-21 12:00:00.0, 17.907
1, 0, 2006-12-25 12:00:00.0, 17.401
2, 0, 2007-01-26 12:00:00.0, 13.277

","customers, demog","customers.educationnum, customers.geoid, demog.geoid, demog.income_k","Demog, mailings3, Customers, Mailings1_2, Sales"
sales_in_weather,How many units of item no.5 were sold in store no.3 on the day in 2012 when the max temperature was the highest?,"SELECT t1.units FROM sales_in_weather as t1 inner JOIN relation as t2 ON t1.store_nbr = t2.store_nbr inner JOIN weather as t3 ON t2.station_nbr = t3.station_nbr WHERE t2.store_nbr = 3 AND substr(t1.`date`, 1, 4) = '2012' AND t1.item_nbr = 5 ORDER BY tmax DESC LIMIT 1","CREATE TABLE `sales_in_weather` (
  date DATE PRIMARY KEY,
  store_nbr INTEGER PRIMARY KEY,
  item_nbr INTEGER PRIMARY KEY,
  units INTEGER
);
Sample rows from `sales_in_weather`:
2012-01-01, 1, 1, 0
2012-01-01, 1, 2, 0
2012-01-01, 1, 3, 0

CREATE TABLE `relation` (
  store_nbr INTEGER REFERENCES sales_in_weather(store_nbr),
  station_nbr INTEGER REFERENCES weather(station_nbr)
);
Sample rows from `relation`:
1, 1
2, 14
3, 7

CREATE TABLE `weather` (
  station_nbr INTEGER PRIMARY KEY,
  date DATE PRIMARY KEY,
  tmax INTEGER,
  tmin INTEGER,
  tavg INTEGER,
  depart INTEGER,
  dewpoint INTEGER,
  wetbulb INTEGER,
  heat INTEGER,
  cool INTEGER,
  sunrise TEXT,
  sunset TEXT,
  codesum TEXT,
  snowfall REAL,
  preciptotal REAL,
  stnpressure REAL,
  sealevel REAL,
  resultspeed REAL,
  resultdir INTEGER,
  avgspeed REAL
);
Sample rows from `weather`:
1, 2012-01-01, 52, 31, 42, None, 36, 40, 23, 0, None, None, RA FZFG BR, None, 0.05, 29.78, 29.92, 3.6, 20, 4.6
1, 2012-01-02, 50, 31, 41, None, 26, 35, 24, 0, None, None,  , None, 0.01, 29.44, 29.62, 9.8, 24, 10.3
1, 2012-01-03, 32, 11, 22, None, 4, 18, 43, 0, None, None,  , None, 0.0, 29.67, 29.87, 10.8, 31, 11.6

","CREATE TABLE `sales_in_weather` (
  date DATE PRIMARY KEY,
  store_nbr INTEGER PRIMARY KEY,
  item_nbr INTEGER PRIMARY KEY,
  units INTEGER
);
Sample rows from `sales_in_weather`:
2012-01-01, 1, 1, 0
2012-01-01, 1, 2, 0
2012-01-01, 1, 3, 0

CREATE TABLE `weather` (
  station_nbr INTEGER PRIMARY KEY,
  date DATE PRIMARY KEY,
  tmax INTEGER,
  tmin INTEGER,
  tavg INTEGER,
  depart INTEGER,
  dewpoint INTEGER,
  wetbulb INTEGER,
  heat INTEGER,
  cool INTEGER,
  sunrise TEXT,
  sunset TEXT,
  codesum TEXT,
  snowfall REAL,
  preciptotal REAL,
  stnpressure REAL,
  sealevel REAL,
  resultspeed REAL,
  resultdir INTEGER,
  avgspeed REAL
);
Sample rows from `weather`:
1, 2012-01-01, 52, 31, 42, None, 36, 40, 23, 0, None, None, RA FZFG BR, None, 0.05, 29.78, 29.92, 3.6, 20, 4.6
1, 2012-01-02, 50, 31, 41, None, 26, 35, 24, 0, None, None,  , None, 0.01, 29.44, 29.62, 9.8, 24, 10.3
1, 2012-01-03, 32, 11, 22, None, 4, 18, 43, 0, None, None,  , None, 0.0, 29.67, 29.87, 10.8, 31, 11.6

CREATE TABLE `relation` (
  store_nbr INTEGER REFERENCES sales_in_weather(store_nbr),
  station_nbr INTEGER REFERENCES weather(station_nbr)
);
Sample rows from `relation`:
1, 1
2, 14
3, 7

","sales_in_weather, relation, weather","sales_in_weather.units, sales_in_weather.store_nbr, relation.store_nbr, relation.station_nbr, weather.station_nbr, sales_in_weather.date, sales_in_weather.item_nbr, tmax","sales_in_weather, weather, relation"
authors,Mention the name of author for paper id 5 and state the keyword of this page.,"SELECT t1.name, t3.keyword FROM author as t1 inner JOIN paperauthor as t2 ON t1.id = t2.authorid inner JOIN paper as t3 ON t2.paperid = t3.id WHERE t2.paperid = 5","CREATE TABLE `author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

CREATE TABLE `paperauthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `paperauthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

CREATE TABLE `paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

","CREATE TABLE `Author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `Author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

CREATE TABLE `Conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

CREATE TABLE `Journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `Paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `Paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `PaperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `PaperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

","author, paperauthor, paper","author.name, paper.keyword, author.id, paperauthor.authorid, paperauthor.paperid, paper.id","Author, Conference, Journal, Paper, PaperAuthor"
public_review_platform,"How many businesses are there in Scottsdale city under the category of ""Beauty & Spas""?",SELECT COUNT(t2.business_id) FROM categories as t1 inner JOIN business_categories as t2 ON t1.category_id = t2.category_id inner JOIN business as t3 ON t2.business_id = t3.business_id WHERE t3.city LIKE 'Scottsdale' AND t1.category_name LIKE 'Beauty & Spas',"CREATE TABLE `categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `business_categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `business_categories`:
1, 8
1, 143
2, 18

CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","categories, business_categories, business","business_categories.business_id, categories.category_id, business_categories.category_id, business.business_id, business.city, categories.category_name","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
video_games,List the names of all the publishers who published one game only.,"SELECt t.publisher_name FROM ( SELECt t2.publisher_name, COUNT(DIStINCt t1.game_id) FROM game_publisher as t1 inner JOIN publisher as t2 ON t1.publisher_id = t2.id GROUP BY t2.publisher_name HAVING COUNT(DIStINCt t1.game_id) = 1 ) t","CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

","CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

","game_publisher, publisher","publisher.publisher_name, game_publisher.game_id, game_publisher.publisher_id, publisher.id","genre, game, platform, publisher, game_publisher, game_platform, region, region_sales"
books,What are the languages of the first two published books?,SELECT t2.language_name FROM book as t1 inner JOIN book_language as t2 ON t1.language_id = t2.language_id ORDER BY t1.publication_date asC LIMIT 2,"CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","book, book_language","book_language.language_name, book.language_id, book_language.language_id, book.publication_date","address_status, author, book_language, country, address, customer, customer_address, order_status, publisher, book, book_author, shipping_method, cust_order, sqlite_sequence, order_history, order_line"
food_inspection,How many eateries applied in 2012?,"SELECT COUNT(business_id) FROM businesses WHERE strftime('%Y', application_date) = '2012'","CREATE TABLE `businesses` (
  business_id INTEGER,
  name TEXT,
  address TEXT,
  city TEXT,
  postal_code TEXT,
  latitude REAL,
  longitude REAL,
  phone_number INTEGER,
  tax_code TEXT,
  business_certificate INTEGER,
  application_date DATE,
  owner_name TEXT,
  owner_address TEXT,
  owner_city TEXT,
  owner_state TEXT,
  owner_zip TEXT
);
Sample rows from `businesses`:
10, Tiramisu Kitchen, 033 Belden Pl, San Francisco, 94104, 37.7911, -122.404, None, H24, 779059, None, Tiramisu LLC, 33 Belden St, San Francisco, CA, 94104
24, OMNI S.F. Hotel - 2nd Floor Pantry, 500 California St, 2nd  Floor, San Francisco, 94104, 37.7929, -122.403, None, H24, 352312, None, OMNI San Francisco Hotel Corp, 500 California St, 2nd Floor, San Francisco, CA, 94104
31, Norman's Ice Cream and Freezes, 2801 Leavenworth St, San Francisco, 94133, 37.8072, -122.419, None, H24, 346882, None, Norman Antiforda, 2801 Leavenworth St, San Francisco, CA, 94133

","CREATE TABLE `businesses` (
  business_id INTEGER,
  name TEXT,
  address TEXT,
  city TEXT,
  postal_code TEXT,
  latitude REAL,
  longitude REAL,
  phone_number INTEGER,
  tax_code TEXT,
  business_certificate INTEGER,
  application_date DATE,
  owner_name TEXT,
  owner_address TEXT,
  owner_city TEXT,
  owner_state TEXT,
  owner_zip TEXT
);
Sample rows from `businesses`:
10, Tiramisu Kitchen, 033 Belden Pl, San Francisco, 94104, 37.7911, -122.404, None, H24, 779059, None, Tiramisu LLC, 33 Belden St, San Francisco, CA, 94104
24, OMNI S.F. Hotel - 2nd Floor Pantry, 500 California St, 2nd  Floor, San Francisco, 94104, 37.7929, -122.403, None, H24, 352312, None, OMNI San Francisco Hotel Corp, 500 California St, 2nd Floor, San Francisco, CA, 94104
31, Norman's Ice Cream and Freezes, 2801 Leavenworth St, San Francisco, 94133, 37.8072, -122.419, None, H24, 346882, None, Norman Antiforda, 2801 Leavenworth St, San Francisco, CA, 94133

CREATE TABLE `inspections` (
  business_id INTEGER REFERENCES businesses(business_id),
  score INTEGER,
  date DATE,
  type TEXT
);
Sample rows from `inspections`:
10, 92, 2014-01-14, Routine - Unscheduled
10, None, 2014-01-24, Reinspection/Followup
10, 94, 2014-07-29, Routine - Unscheduled

CREATE TABLE `violations` (
  business_id INTEGER REFERENCES businesses(business_id),
  date DATE,
  violation_type_id TEXT,
  risk_category TEXT,
  description TEXT
);
Sample rows from `violations`:
10, 2014-07-29, 103129, Moderate Risk, Insufficient hot water or running water
10, 2014-07-29, 103144, Low Risk, Unapproved or unmaintained equipment or utensils
10, 2014-01-14, 103119, Moderate Risk, Inadequate and inaccessible handwashing facilities

",businesses,"business_id, application_date","businesses, inspections, violations"
shakespeare,"Among the history works written by Shakespeare, how many works whose 1st acts have no more than 2 scenes?",SELECT COUNT(DISTINCT t2.work_id) FROM works as t1 inner JOIN chapters as t2 ON t1.id = t2.work_id WHERE t2.act = 1 AND t2.scene < 2 AND t1.genretype = 'History',"CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

","CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
chapters, 19648
characters, 1266
paragraphs, 666327

CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

","works, chapters","chapters.work_id, works.id, chapters.act, chapters.scene, works.genretype","chapters, sqlite_sequence, characters, paragraphs, works"
law_episode,How many episodes have not won any Law & Order series awards?,SELECT COUNT(award_id) FROM award WHERE result = 'Nominee',"CREATE TABLE `award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  series TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  person_id TEXT REFERENCES Person(person_id),
  role TEXT,
  result TEXT
);
Sample rows from `award`:
258, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0937725, None, Winner
259, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0792309, None, Winner
260, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0049569, None, Winner

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
tt0629239, nun
tt0629239, priest
tt0629420, police officer

CREATE TABLE `Person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  series TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  person_id TEXT REFERENCES Person(person_id),
  role TEXT,
  result TEXT
);
Sample rows from `Award`:
258, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0937725, None, Winner
259, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0792309, None, Winner
260, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0049569, None, Winner

CREATE TABLE `Credit` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  person_id TEXT PRIMARY KEY REFERENCES Person(person_id),
  category TEXT,
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
tt0629204, nm0226352, Additional Crew, technical advisor, true
tt0629204, nm0506974, Additional Crew, production accountant, true
tt0629204, nm4103116, Additional Crew, production accountant, true

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
tt0629204, 10, 36, 17.7
tt0629204, 9, 39, 19.2
tt0629204, 8, 64, 31.5

",award,award_id,"Episode, Keyword, Person, Award, Credit, Vote"
books,List down the ISBN of the books purchased by the customer with an email of fsier3e@ihg.com.,SELECT t1.isbn13 FROM book as t1 inner JOIN order_line as t2 ON t1.book_id = t2.book_id inner JOIN cust_order as t3 ON t3.order_id = t2.order_id inner JOIN customer as t4 ON t4.customer_id = t3.customer_id WHERE t4.email = 'fsier3e@ihg.com',"CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","book, order_line, cust_order, customer","book.isbn13, book.book_id, order_line.book_id, cust_order.order_id, order_line.order_id, customer.customer_id, cust_order.customer_id, customer.email","address_status, author, book_language, country, address, customer, customer_address, order_status, publisher, book, book_author, shipping_method, cust_order, sqlite_sequence, order_history, order_line"
movielens,List the movie that has been rated most by 25 years old users.,SELECT t2.movieid FROM users as t1 inner JOIN u2base as t2 ON t1.userid = t2.userid WHERE t1.age = 25 GROUP BY t2.movieid ORDER BY COUNT(t1.userid) DESC LIMIT 1,"CREATE TABLE `users` (
  userid INTEGER,
  age TEXT,
  u_gender TEXT,
  occupation TEXT
);
Sample rows from `users`:
1, 1, F, 2
2, 56, M, 3
3, 25, M, 2

CREATE TABLE `u2base` (
  userid INTEGER PRIMARY KEY REFERENCES users(None),
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  rating TEXT
);
Sample rows from `u2base`:
2, 1964242, 1
2, 2219779, 1
3, 1856939, 1

","CREATE TABLE `users` (
  userid INTEGER,
  age TEXT,
  u_gender TEXT,
  occupation TEXT
);
Sample rows from `users`:
1, 1, F, 2
2, 56, M, 3
3, 25, M, 2

CREATE TABLE `directors` (
  directorid INTEGER,
  d_quality INTEGER PRIMARY KEY,
  avg_revenue INTEGER PRIMARY KEY
);
Sample rows from `directors`:
67, 4, 1
92, 2, 3
284, 4, 0

CREATE TABLE `actors` (
  actorid INTEGER,
  a_gender TEXT,
  a_quality INTEGER
);
Sample rows from `actors`:
4, M, 4
16, M, 0
28, M, 4

CREATE TABLE `movies` (
  movieid INTEGER,
  year INTEGER,
  isEnglish TEXT,
  country TEXT,
  runningtime INTEGER
);
Sample rows from `movies`:
1672052, 3, T, other, 2
1672111, 4, T, other, 2
1672580, 4, T, USA, 3

CREATE TABLE `movies2actors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  actorid INTEGER PRIMARY KEY REFERENCES actors(None),
  cast_num INTEGER
);
Sample rows from `movies2actors`:
1672580, 981535, 0
1672946, 1094968, 0
1673647, 149985, 0

CREATE TABLE `movies2directors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  directorid INTEGER PRIMARY KEY REFERENCES directors(None),
  genre TEXT
);
Sample rows from `movies2directors`:
1672111, 54934, Action
1672946, 188940, Action
1679461, 179783, Action

CREATE TABLE `u2base` (
  userid INTEGER PRIMARY KEY REFERENCES users(None),
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  rating TEXT
);
Sample rows from `u2base`:
2, 1964242, 1
2, 2219779, 1
3, 1856939, 1

","users, u2base","u2base.movieid, users.userid, u2base.userid, users.age","users, directors, actors, movies, movies2actors, movies2directors, u2base"
disney,"Who is the voice actor of the character ""Binkie Muddlefoot""?",SELECT `voice-actor` FROM `voice-actors` WHERE character = 'Binkie Muddlefoot',"CREATE TABLE `voice-actors` (
  character TEXT PRIMARY KEY,
  voice-actor TEXT,
  movie TEXT REFERENCES characters(movie_title)
);
Sample rows from `voice-actors`:
Abby Mallard, Joan Cusack, Chicken Little
Abigail Gabble, Monica Evans, The Aristocats
Abis Mal, Jason Alexander, The Return of Jafar

","CREATE TABLE `characters` (
  movie_title TEXT PRIMARY KEY,
  release_date TEXT,
  hero TEXT REFERENCES voice-actors(character),
  villian TEXT,
  song TEXT
);
Sample rows from `characters`:
Snow White and the Seven Dwarfs, 21-Dec-37, Snow White, Evil Queen, Some Day My Prince Will Come
Pinocchio, 7-Feb-40, Pinocchio, Stromboli, When You Wish upon a Star
Fantasia, 13-Nov-40, None, Chernabog, None

CREATE TABLE `director` (
  name TEXT PRIMARY KEY REFERENCES characters(movie_title),
  director TEXT
);
Sample rows from `director`:
Snow White and the Seven Dwarfs, David Hand
Pinocchio, Ben Sharpsteen
Fantasia, full credits

CREATE TABLE `movies_total_gross` (
  movie_title TEXT PRIMARY KEY REFERENCES characters(movie_title),
  release_date TEXT PRIMARY KEY,
  genre TEXT,
  MPAA_rating TEXT,
  total_gross TEXT,
  inflation_adjusted_gross TEXT
);
Sample rows from `movies_total_gross`:
Snow White and the Seven Dwarfs, Dec 21, 1937, Musical, G, $184,925,485, $5,228,953,251
Pinocchio, Feb 9, 1940, Adventure, G, $84,300,000, $2,188,229,052
Fantasia, Nov 13, 1940, Musical, G, $83,320,000, $2,187,090,808

CREATE TABLE `revenue` (
  Year INTEGER,
  Studio Entertainment[NI 1] REAL,
  Disney Consumer Products[NI 2] REAL,
  Disney Interactive[NI 3][Rev 1] INTEGER,
  Walt Disney Parks and Resorts REAL,
  Disney Media Networks TEXT,
  Total INTEGER
);
Sample rows from `revenue`:
1991, 2593.0, 724.0, None, 2794.0, None, 6111
1992, 3115.0, 1081.0, None, 3306.0, None, 7502
1993, 3673.4, 1415.1, None, 3440.7, None, 8529

CREATE TABLE `voice-actors` (
  character TEXT PRIMARY KEY,
  voice-actor TEXT,
  movie TEXT REFERENCES characters(movie_title)
);
Sample rows from `voice-actors`:
Abby Mallard, Joan Cusack, Chicken Little
Abigail Gabble, Monica Evans, The Aristocats
Abis Mal, Jason Alexander, The Return of Jafar

",voice-actors,voice-actor,"characters, director, movies_total_gross, revenue, voice-actors"
retail_world,What is the monthly average number of products shipped via Federal Shipping for the year 1996?,SELECT cast(SUM(t1.shipvia) as real) / 12 FROM orders as t1 inner JOIN shippers as t2 ON t1.shipvia = t2.shipperid WHERE t2.companyname = 'Federal Shipping' AND t1.shippeddate LIKE '1996%',"CREATE TABLE `orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

","orders, shippers","orders.shipvia, shippers.shipperid, shippers.companyname, orders.shippeddate","sqlite_sequence, Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails"
sales,List the first names of employees with trading quantity for more than 500.,SELECT DISTINCT t1.firstname FROM employees as t1 inner JOIN sales as t2 ON t1.employeeid = t2.salesPersonID WHERE t2.quantity > 500,"CREATE TABLE `employees` (
  EmployeeID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `employees`:
1, Abraham, e, Bennet
2, Reginald, l, Blotchet-Halls
3, Cheryl, a, Carson

CREATE TABLE `sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Employees`:
1, Abraham, e, Bennet
2, Reginald, l, Blotchet-Halls
3, Cheryl, a, Carson

CREATE TABLE `Products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

CREATE TABLE `Sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `Sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

","employees, sales","employees.firstname, employees.employeeid, sales.salesPersonID, sales.quantity","Customers, Employees, Products, Sales"
food_inspection_2,"What is the category of the inspection of the establishment named ""J & J FOOD""?",SELECT DISTINCT t4.category FROM establishment as t1 inner JOIN inspection as t2 ON t1.license_no = t2.license_no inner JOIN violation as t3 ON t2.inspection_id = t3.inspection_id inner JOIN inspection_point as t4 ON t3.point_id = t4.point_id WHERE t1.dba_name = 'J & J FOOD',"CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

","establishment, inspection, violation, inspection_point","inspection_point.category, establishment.license_no, inspection.license_no, inspection.inspection_id, violation.inspection_id, violation.point_id, inspection_point.point_id, establishment.dba_name","employee, establishment, inspection, inspection_point, violation"
language_corpus,"Please list the title of the pages on which the word ""grec"" occurred for over 20 times.",SELECT t3.title FROM words as t1 inner JOIN pages_words as t2 ON t1.wid = t2.wid inner JOIN pages as t3 ON t2.pid = t3.pid WHERE t1.word = 'grec' AND t2.occurrences > 20,"CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

","CREATE TABLE `langs` (
  lid INTEGER,
  lang TEXT PRIMARY KEY,
  locale TEXT PRIMARY KEY,
  pages INTEGER,
  words INTEGER
);
Sample rows from `langs`:
1, ca, ca_ES, 1129144, 2764996

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
langs, 1
pages, 1129144
words, 2764996

CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `langs_words` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `langs_words`:
1, 1, 242
1, 2, 16841
1, 3, 48700

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

","words, pages_words, pages","pages.title, words.wid, pages_words.wid, pages_words.pid, pages.pid, words.word, pages_words.occurrences","langs, sqlite_sequence, pages, words, langs_words, pages_words, biwords"
movie,What is the net worth of the actor starred in Misery who has a height ranging from 60 to 70 inches tall?,SELECT t3.networth FROM movie as t1 inner JOIN characters as t2 ON t1.movieid = t2.movieid inner JOIN actor as t3 ON t3.actorid = t2.actorid WHERE t1.title = 'Misery' AND t3.`height (inches)` BETWEEN 60 AND 70 AND t3.gender = 'Male',"CREATE TABLE `movie` (
  MovieID INTEGER,
  Title TEXT,
  MPAA Rating TEXT,
  Budget INTEGER,
  Gross INTEGER,
  Release Date TEXT,
  Genre TEXT,
  Runtime INTEGER,
  Rating REAL,
  Rating Count INTEGER,
  Summary TEXT
);
Sample rows from `movie`:
1, Look Who's Talking, PG-13, 7500000, 296000000, 1989-10-12, Romance, 93, 5.9, 73638, After a single, career-minded woman is left on her own to give birth to the child of a married man, she finds a new romantic chance in a cab driver. Meanwhile, the point-of-view of the newborn boy is narrated through voice-over.
2, Driving Miss Daisy, PG, 7500000, 145793296, 1989-12-13, Comedy, 99, 7.4, 91075, An old Jewish woman and her African-American chauffeur in the American South have a relationship that grows and improves over the years.
3, Turner & Hooch, PG, 13000000, 71079915, 1989-07-28, Crime, 100, 7.2, 91415, Det. Scott Turner (Tom Hanks) is an uptight, by-the-book police officer. When his friend Amos Reed (John McIntire), the proprietor of a junkyard, is killed, Turner reluctantly inherits the man's dog. Turner adjusts to life with the dog to help solve a murder case.

CREATE TABLE `characters` (
  MovieID INTEGER PRIMARY KEY REFERENCES movie(MovieID),
  ActorID INTEGER PRIMARY KEY REFERENCES actor(ActorID),
  Character Name TEXT,
  creditOrder INTEGER,
  pay TEXT,
  screentime TEXT
);
Sample rows from `characters`:
1, 1, James, 1, None, None
1, 2, Mollie, 2, None, None
1, 3, Rosie, 3, None, None

CREATE TABLE `actor` (
  ActorID INTEGER,
  Name TEXT,
  Date of Birth DATE,
  Birth City TEXT,
  Birth Country TEXT,
  Height (Inches) INTEGER,
  Biography TEXT,
  Gender TEXT,
  Ethnicity TEXT,
  NetWorth TEXT
);
Sample rows from `actor`:
1, John Travolta, 1954-02-18, Englewood, USA, 74, John Joseph Travolta was born in Englewood, New Jersey, one of six children of Helen Travolta (n�e Helen Cecilia Burke) and Salvatore/Samuel J. Travolta. His father was of Italian descent and his mother was of Irish ancestry. His father owned a tire repair shop called Travolta Tires in Hillsdale, NJ. Travolta started acting appearing in a local ..., Male, White, $250,000,000.00
2, Kirstie Alley, 1951-01-12, Wichita, USA, 67, None, Female, White, $40,000,000.00
3, Olympia Dukakis, 1931-06-20, Lowell, USA, 63, Long a vital, respected lady of the classic and contemporary stage this grand lady did not become a household name and sought-after film actress until age 56 when she turned in a glorious, Oscar-winning perf as Cher's sardonic mother in the romantic comedy Moonstruck (1987). Since then movie (and TV) fans have discovered what the East coast ..., Female, White, $6,000,000.00

","CREATE TABLE `actor` (
  ActorID INTEGER,
  Name TEXT,
  Date of Birth DATE,
  Birth City TEXT,
  Birth Country TEXT,
  Height (Inches) INTEGER,
  Biography TEXT,
  Gender TEXT,
  Ethnicity TEXT,
  NetWorth TEXT
);
Sample rows from `actor`:
1, John Travolta, 1954-02-18, Englewood, USA, 74, John Joseph Travolta was born in Englewood, New Jersey, one of six children of Helen Travolta (n�e Helen Cecilia Burke) and Salvatore/Samuel J. Travolta. His father was of Italian descent and his mother was of Irish ancestry. His father owned a tire repair shop called Travolta Tires in Hillsdale, NJ. Travolta started acting appearing in a local ..., Male, White, $250,000,000.00
2, Kirstie Alley, 1951-01-12, Wichita, USA, 67, None, Female, White, $40,000,000.00
3, Olympia Dukakis, 1931-06-20, Lowell, USA, 63, Long a vital, respected lady of the classic and contemporary stage this grand lady did not become a household name and sought-after film actress until age 56 when she turned in a glorious, Oscar-winning perf as Cher's sardonic mother in the romantic comedy Moonstruck (1987). Since then movie (and TV) fans have discovered what the East coast ..., Female, White, $6,000,000.00

CREATE TABLE `movie` (
  MovieID INTEGER,
  Title TEXT,
  MPAA Rating TEXT,
  Budget INTEGER,
  Gross INTEGER,
  Release Date TEXT,
  Genre TEXT,
  Runtime INTEGER,
  Rating REAL,
  Rating Count INTEGER,
  Summary TEXT
);
Sample rows from `movie`:
1, Look Who's Talking, PG-13, 7500000, 296000000, 1989-10-12, Romance, 93, 5.9, 73638, After a single, career-minded woman is left on her own to give birth to the child of a married man, she finds a new romantic chance in a cab driver. Meanwhile, the point-of-view of the newborn boy is narrated through voice-over.
2, Driving Miss Daisy, PG, 7500000, 145793296, 1989-12-13, Comedy, 99, 7.4, 91075, An old Jewish woman and her African-American chauffeur in the American South have a relationship that grows and improves over the years.
3, Turner & Hooch, PG, 13000000, 71079915, 1989-07-28, Crime, 100, 7.2, 91415, Det. Scott Turner (Tom Hanks) is an uptight, by-the-book police officer. When his friend Amos Reed (John McIntire), the proprietor of a junkyard, is killed, Turner reluctantly inherits the man's dog. Turner adjusts to life with the dog to help solve a murder case.

CREATE TABLE `characters` (
  MovieID INTEGER PRIMARY KEY REFERENCES movie(MovieID),
  ActorID INTEGER PRIMARY KEY REFERENCES actor(ActorID),
  Character Name TEXT,
  creditOrder INTEGER,
  pay TEXT,
  screentime TEXT
);
Sample rows from `characters`:
1, 1, James, 1, None, None
1, 2, Mollie, 2, None, None
1, 3, Rosie, 3, None, None

","movie, characters, actor","actor.networth, movie.movieid, characters.movieid, actor.actorid, characters.actorid, movie.title, actor.height (inches), actor.gender","actor, movie, characters"
disney,How many of Gary Trousdale's movies are adventure movies?,SELECt COUNT(t.name) FROM ( SELECt t1.name FROM director as t1 inner JOIN movies_total_gross as t2 ON t1.name = t2.movie_title WHERE t1.director = 'Gary trousdale' AND t2.genre = 'Adventure' GROUP BY t1.name ) t,"CREATE TABLE `director` (
  name TEXT PRIMARY KEY REFERENCES characters(movie_title),
  director TEXT
);
Sample rows from `director`:
Snow White and the Seven Dwarfs, David Hand
Pinocchio, Ben Sharpsteen
Fantasia, full credits

CREATE TABLE `movies_total_gross` (
  movie_title TEXT PRIMARY KEY REFERENCES characters(movie_title),
  release_date TEXT PRIMARY KEY,
  genre TEXT,
  MPAA_rating TEXT,
  total_gross TEXT,
  inflation_adjusted_gross TEXT
);
Sample rows from `movies_total_gross`:
Snow White and the Seven Dwarfs, Dec 21, 1937, Musical, G, $184,925,485, $5,228,953,251
Pinocchio, Feb 9, 1940, Adventure, G, $84,300,000, $2,188,229,052
Fantasia, Nov 13, 1940, Musical, G, $83,320,000, $2,187,090,808

","CREATE TABLE `characters` (
  movie_title TEXT PRIMARY KEY,
  release_date TEXT,
  hero TEXT REFERENCES voice-actors(character),
  villian TEXT,
  song TEXT
);
Sample rows from `characters`:
Snow White and the Seven Dwarfs, 21-Dec-37, Snow White, Evil Queen, Some Day My Prince Will Come
Pinocchio, 7-Feb-40, Pinocchio, Stromboli, When You Wish upon a Star
Fantasia, 13-Nov-40, None, Chernabog, None

CREATE TABLE `director` (
  name TEXT PRIMARY KEY REFERENCES characters(movie_title),
  director TEXT
);
Sample rows from `director`:
Snow White and the Seven Dwarfs, David Hand
Pinocchio, Ben Sharpsteen
Fantasia, full credits

CREATE TABLE `movies_total_gross` (
  movie_title TEXT PRIMARY KEY REFERENCES characters(movie_title),
  release_date TEXT PRIMARY KEY,
  genre TEXT,
  MPAA_rating TEXT,
  total_gross TEXT,
  inflation_adjusted_gross TEXT
);
Sample rows from `movies_total_gross`:
Snow White and the Seven Dwarfs, Dec 21, 1937, Musical, G, $184,925,485, $5,228,953,251
Pinocchio, Feb 9, 1940, Adventure, G, $84,300,000, $2,188,229,052
Fantasia, Nov 13, 1940, Musical, G, $83,320,000, $2,187,090,808

CREATE TABLE `revenue` (
  Year INTEGER,
  Studio Entertainment[NI 1] REAL,
  Disney Consumer Products[NI 2] REAL,
  Disney Interactive[NI 3][Rev 1] INTEGER,
  Walt Disney Parks and Resorts REAL,
  Disney Media Networks TEXT,
  Total INTEGER
);
Sample rows from `revenue`:
1991, 2593.0, 724.0, None, 2794.0, None, 6111
1992, 3115.0, 1081.0, None, 3306.0, None, 7502
1993, 3673.4, 1415.1, None, 3440.7, None, 8529

CREATE TABLE `voice-actors` (
  character TEXT PRIMARY KEY,
  voice-actor TEXT,
  movie TEXT REFERENCES characters(movie_title)
);
Sample rows from `voice-actors`:
Abby Mallard, Joan Cusack, Chicken Little
Abigail Gabble, Monica Evans, The Aristocats
Abis Mal, Jason Alexander, The Return of Jafar

","director, movies_total_gross","director.name, movies_total_gross.movie_title, director.director, movies_total_gross.genre","characters, director, movies_total_gross, revenue, voice-actors"
beer_factory,How many transactions were made to purchase a bottle of beer using American Express?,SELECT COUNT(t1.rootbeerid) FROM rootbeer as t1 inner JOIN `transaction` as t2 ON t1.rootbeerid = t2.rootbeerid WHERE t1.containertype = 'Bottle' AND t2.creditcardtype = 'American Express',"CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

CREATE TABLE `transaction` (
  TransactionID INTEGER,
  CreditCardNumber INTEGER,
  CustomerID INTEGER REFERENCES customers(CustomerID),
  TransactionDate DATE,
  CreditCardType TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  RootBeerID INTEGER REFERENCES rootbeer(RootBeerID),
  PurchasePrice REAL
);
Sample rows from `transaction`:
100000, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105661, 3.0
100001, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105798, 3.0
100002, 6011583832864739, 864896, 2014-07-07, Discover, 2, 102514, 3.0

","CREATE TABLE `customers` (
  CustomerID INTEGER,
  First TEXT,
  Last TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER,
  Email TEXT,
  PhoneNumber TEXT,
  FirstPurchaseDate DATE,
  SubscribedToEmailList TEXT,
  Gender TEXT
);
Sample rows from `customers`:
101811, Kenneth, Walton, 6715 Commonwealth Dr, Sacramento, CA, 94256, walton.k76@fastmail.com, (916) 918-1561, 2013-05-30, FALSE, M
103508, Madeleine, Jones, 3603 Leola Way, Sacramento, CA, 94258, j_madeleine@gmail.com, (916) 186-9423, 2013-02-06, FALSE, F
104939, Damen, Wheeler, 6740 Branwood Way, Orangevale, CA, 95662, dwheeler@outlook.com, (916) 164-1156, 2013-04-11, FALSE, M

CREATE TABLE `geolocation` (
  LocationID INTEGER REFERENCES location(LocationID),
  Latitude REAL,
  Longitude REAL
);
Sample rows from `geolocation`:
0, 0.0, 0.0
1, 38.566129, -121.426432
2, 38.559615, -121.42243

CREATE TABLE `location` (
  LocationID INTEGER REFERENCES geolocation(LocationID),
  LocationName TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER
);
Sample rows from `location`:
0, LOST, None, None, None, None
1, Sac State American River Courtyard, 6000 J St, Sacramento, CA, 95819
2, Sac State Union, 6000 J St, Sacramento, CA, 95819

CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

CREATE TABLE `rootbeerreview` (
  CustomerID INTEGER PRIMARY KEY REFERENCES customers(CustomerID),
  BrandID INTEGER PRIMARY KEY REFERENCES rootbeerbrand(BrandID),
  StarRating INTEGER,
  ReviewDate DATE,
  Review TEXT
);
Sample rows from `rootbeerreview`:
101811, 10012, 5, 2013-07-15, None
101811, 10014, 1, 2013-07-08, None
101811, 10015, 3, 2013-07-25, None

CREATE TABLE `transaction` (
  TransactionID INTEGER,
  CreditCardNumber INTEGER,
  CustomerID INTEGER REFERENCES customers(CustomerID),
  TransactionDate DATE,
  CreditCardType TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  RootBeerID INTEGER REFERENCES rootbeer(RootBeerID),
  PurchasePrice REAL
);
Sample rows from `transaction`:
100000, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105661, 3.0
100001, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105798, 3.0
100002, 6011583832864739, 864896, 2014-07-07, Discover, 2, 102514, 3.0

","rootbeer, transaction","rootbeer.rootbeerid, transaction.rootbeerid, rootbeer.containertype, transaction.creditcardtype","customers, geolocation, location, rootbeerbrand, rootbeer, rootbeerreview, transaction"
app_store,What is the average rating of Apps falling under the racing genre and what is the percentage ratio of positive sentiment reviews?,"SELECT AVG(t1.rating), cast(COUNT(case when t2.sentiment = 'Positive' then 1 else null end) as real) * 100 / COUNT(t2.sentiment) FROM playstore as t1 inner JOIN user_reviews as t2 ON t1.app = t2.app WHERE t1.genres = 'Racing'","CREATE TABLE `playstore` (
  App TEXT,
  Category TEXT,
  Rating REAL,
  Reviews INTEGER,
  Size TEXT,
  Installs TEXT,
  Type TEXT,
  Price TEXT,
  Content Rating TEXT,
  Genres TEXT
);
Sample rows from `playstore`:
Photo Editor & Candy Camera & Grid & ScrapBook, ART_AND_DESIGN, 4.1, 159, 19M, 10,000+, Free, 0, Everyone, Art & Design
Coloring book moana, ART_AND_DESIGN, 3.9, 967, 14M, 500,000+, Free, 0, Everyone, Art & Design;Pretend Play
U Launcher Lite – FREE Live Cool Themes, Hide Apps, ART_AND_DESIGN, 4.7, 87510, 8.7M, 5,000,000+, Free, 0, Everyone, Art & Design

CREATE TABLE `user_reviews` (
  App TEXT REFERENCES playstore(App),
  Translated_Review TEXT,
  Sentiment TEXT,
  Sentiment_Polarity TEXT,
  Sentiment_Subjectivity TEXT
);
Sample rows from `user_reviews`:
10 Best Foods for You, I like eat delicious food. That's I'm cooking food myself, case ""10 Best Foods"" helps lot, also ""Best Before (Shelf Life)"", Positive, 1.0, 0.5333333333333333
10 Best Foods for You, This help eating healthy exercise regular basis, Positive, 0.25, 0.28846153846153844
10 Best Foods for You, nan, nan, nan, nan

","CREATE TABLE `playstore` (
  App TEXT,
  Category TEXT,
  Rating REAL,
  Reviews INTEGER,
  Size TEXT,
  Installs TEXT,
  Type TEXT,
  Price TEXT,
  Content Rating TEXT,
  Genres TEXT
);
Sample rows from `playstore`:
Photo Editor & Candy Camera & Grid & ScrapBook, ART_AND_DESIGN, 4.1, 159, 19M, 10,000+, Free, 0, Everyone, Art & Design
Coloring book moana, ART_AND_DESIGN, 3.9, 967, 14M, 500,000+, Free, 0, Everyone, Art & Design;Pretend Play
U Launcher Lite – FREE Live Cool Themes, Hide Apps, ART_AND_DESIGN, 4.7, 87510, 8.7M, 5,000,000+, Free, 0, Everyone, Art & Design

CREATE TABLE `user_reviews` (
  App TEXT REFERENCES playstore(App),
  Translated_Review TEXT,
  Sentiment TEXT,
  Sentiment_Polarity TEXT,
  Sentiment_Subjectivity TEXT
);
Sample rows from `user_reviews`:
10 Best Foods for You, I like eat delicious food. That's I'm cooking food myself, case ""10 Best Foods"" helps lot, also ""Best Before (Shelf Life)"", Positive, 1.0, 0.5333333333333333
10 Best Foods for You, This help eating healthy exercise regular basis, Positive, 0.25, 0.28846153846153844
10 Best Foods for You, nan, nan, nan, nan

","playstore, user_reviews","playstore.rating, user_reviews.sentiment, playstore.app, user_reviews.app, playstore.genres","playstore, user_reviews"
olympics,How many athlete from China participate in the 2016 Summer Olympics?,SELECT COUNT(t3.id) FROM games as t1 inner JOIN games_competitor as t2 ON t1.id = t2.games_id inner JOIN person as t3 ON t2.person_id = t3.id inner JOIN person_region as t4 ON t3.id = t4.person_id inner JOIN noc_region as t5 ON t4.region_id = t5.id WHERE t1.games_name = '2016 Summer' AND t5.region_name = 'China',"CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

","CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `medal` (
  id INTEGER,
  medal_name TEXT
);
Sample rows from `medal`:
1, Gold
2, Silver
3, Bronze

CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `sport` (
  id INTEGER,
  sport_name TEXT
);
Sample rows from `sport`:
1, Aeronautics
2, Alpine Skiing
3, Alpinism

CREATE TABLE `event` (
  id INTEGER,
  sport_id INTEGER REFERENCES sport(id),
  event_name TEXT
);
Sample rows from `event`:
1, 9, Basketball Men's Basketball
2, 33, Judo Men's Extra-Lightweight
3, 25, Football Men's Football

CREATE TABLE `competitor_event` (
  event_id INTEGER REFERENCES event(id),
  competitor_id INTEGER REFERENCES games_competitor(id),
  medal_id INTEGER REFERENCES medal(id)
);
Sample rows from `competitor_event`:
1, 1, 4
2, 2, 4
3, 3, 4

","games, games_competitor, person, person_region, noc_region","person.id, games.id, games_competitor.games_id, games_competitor.person_id, person_region.person_id, person_region.region_id, noc_region.id, games.games_name, noc_region.region_name","city, games, games_city, medal, noc_region, person, games_competitor, person_region, sport, event, competitor_event"
restaurant,What is the full address of the most popular restaurant among the diners?,"SELECT t2.street_name, t2.street_num, t2.city FROM generalinfo as t1 inner JOIN location as t2 ON t1.id_restaurant = t2.id_restaurant ORDER BY t1.review DESC LIMIT 1","CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

","CREATE TABLE `geographic` (
  city TEXT PRIMARY KEY,
  county TEXT,
  region TEXT
);
Sample rows from `geographic`:
alameda, alameda county, bay area
alamo, contra costa county, bay area
albany, alameda county, bay area

CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

","generalinfo, location","location.street_name, location.street_num, location.city, generalinfo.id_restaurant, location.id_restaurant, generalinfo.review","geographic, generalinfo, location"
music_platform_2,What dates were the Don't Lie To Your Life Coach podcast reviews created?,SELECT created_at FROM reviews WHERE podcast_id = ( SELECT podcast_id FROM podcasts WHERE title = 'Don''t Lie To Your Life Coach' ),"CREATE TABLE `reviews` (
  podcast_id TEXT REFERENCES podcasts(None),
  title TEXT,
  content TEXT,
  rating INTEGER,
  author_id TEXT,
  created_at TEXT
);
Sample rows from `reviews`:
c61aa81c9b929a66f0c1db6cbe5d8548, really interesting!, Thanks for providing these insights.  Really enjoy the variety and depth -- please keep them coming!, 5, F7E5A318989779D, 2018-04-24T12:05:16-07:00
c61aa81c9b929a66f0c1db6cbe5d8548, Must listen for anyone interested in the arts!!!, Super excited to see this podcast grow. So many fun topics to talk about...Shari is really engaging. Definitely subscribing and would recommend to anyone interested in the arts!!, 5, F6BF5472689BD12, 2018-05-09T18:14:32-07:00
ad4f2bf69c72b8db75978423c25f379e, nauseatingly left, I'm a liberal myself, but its pretty obvious and annoying that they're trying to push their beliefs on the listeners. Get a more politically diverse production staff, we like to see issues from multiple point of views not just yours., 1, 1AB95B8E6E1309E, 2019-06-11T14:53:39-07:00

CREATE TABLE `podcasts` (
  podcast_id TEXT PRIMARY KEY,
  itunes_id INTEGER,
  slug TEXT,
  itunes_url TEXT,
  title TEXT
);
Sample rows from `podcasts`:
a00018b54eb342567c94dacfb2a3e504, 1313466221, scaling-global, https://podcasts.apple.com/us/podcast/scaling-global/id1313466221, Scaling Global
a00043d34e734b09246d17dc5d56f63c, 158973461, cornerstone-baptist-church-of-orlando, https://podcasts.apple.com/us/podcast/cornerstone-baptist-church-of-orlando/id158973461, Cornerstone Baptist Church of Orlando
a0004b1ef445af9dc84dad1e7821b1e3, 139076942, mystery-dancing-in-the-dark, https://podcasts.apple.com/us/podcast/mystery-dancing-in-the-dark/id139076942, Mystery: Dancing in the Dark

","CREATE TABLE `runs` (
  run_at TEXT,
  max_rowid INTEGER,
  reviews_added INTEGER
);
Sample rows from `runs`:
2021-05-10 02:53:00, 3266481, 1215223
2021-06-06 21:34:36, 3300773, 13139
2021-07-02 18:04:55, 3329699, 11561

CREATE TABLE `podcasts` (
  podcast_id TEXT PRIMARY KEY,
  itunes_id INTEGER,
  slug TEXT,
  itunes_url TEXT,
  title TEXT
);
Sample rows from `podcasts`:
a00018b54eb342567c94dacfb2a3e504, 1313466221, scaling-global, https://podcasts.apple.com/us/podcast/scaling-global/id1313466221, Scaling Global
a00043d34e734b09246d17dc5d56f63c, 158973461, cornerstone-baptist-church-of-orlando, https://podcasts.apple.com/us/podcast/cornerstone-baptist-church-of-orlando/id158973461, Cornerstone Baptist Church of Orlando
a0004b1ef445af9dc84dad1e7821b1e3, 139076942, mystery-dancing-in-the-dark, https://podcasts.apple.com/us/podcast/mystery-dancing-in-the-dark/id139076942, Mystery: Dancing in the Dark

CREATE TABLE `reviews` (
  podcast_id TEXT REFERENCES podcasts(None),
  title TEXT,
  content TEXT,
  rating INTEGER,
  author_id TEXT,
  created_at TEXT
);
Sample rows from `reviews`:
c61aa81c9b929a66f0c1db6cbe5d8548, really interesting!, Thanks for providing these insights.  Really enjoy the variety and depth -- please keep them coming!, 5, F7E5A318989779D, 2018-04-24T12:05:16-07:00
c61aa81c9b929a66f0c1db6cbe5d8548, Must listen for anyone interested in the arts!!!, Super excited to see this podcast grow. So many fun topics to talk about...Shari is really engaging. Definitely subscribing and would recommend to anyone interested in the arts!!, 5, F6BF5472689BD12, 2018-05-09T18:14:32-07:00
ad4f2bf69c72b8db75978423c25f379e, nauseatingly left, I'm a liberal myself, but its pretty obvious and annoying that they're trying to push their beliefs on the listeners. Get a more politically diverse production staff, we like to see issues from multiple point of views not just yours., 1, 1AB95B8E6E1309E, 2019-06-11T14:53:39-07:00

CREATE TABLE `categories` (
  podcast_id TEXT PRIMARY KEY REFERENCES podcasts(None),
  category TEXT PRIMARY KEY
);
Sample rows from `categories`:
c61aa81c9b929a66f0c1db6cbe5d8548, arts
c61aa81c9b929a66f0c1db6cbe5d8548, arts-performing-arts
c61aa81c9b929a66f0c1db6cbe5d8548, music

","reviews, podcasts","created_at, podcast_id, title","runs, podcasts, reviews, categories"
public_review_platform,List any five of user ID who became elite user in 2006.,SELECT user_id FROM elite WHERE year_id = 2006 LIMIT 5,"CREATE TABLE `elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `elite`:
3, 2010
3, 2011
3, 2012

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

",elite,"user_id, year_id","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
cs_semester,"Among research postgraduate students, give the name of the course with the student satisfaction value of 1.",SELECT t3.name FROM student as t1 inner JOIN registration as t2 ON t1.student_id = t2.student_id inner JOIN course as t3 ON t2.course_id = t3.course_id WHERE t2.sat = 1 AND t1.type = 'RPG',"CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

","CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

CREATE TABLE `prof` (
  prof_id INTEGER,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  popularity INTEGER,
  teachingability INTEGER,
  graduate_from TEXT
);
Sample rows from `prof`:
1, Male, Nathaniel, Pigford, npigford0@hku.hk, 3, 5, University of Washington
2, Male, Zhihua, Zhou, zzhihua@hku.hk, 2, 1, Beijing Polytechnic University
3, Male, Ogdon, Zywicki, ozywicki2@hku.hk, 2, 2, University of Boston

CREATE TABLE `RA` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `RA`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

","student, registration, course","course.name, student.student_id, registration.student_id, registration.course_id, course.course_id, registration.sat, student.type","course, prof, RA, registration, student"
food_inspection_2,Name the taverns that failed the inspection in January 2010.,"SELECT DISTINCT t1.dba_name FROM establishment as t1 inner JOIN inspection as t2 ON t1.license_no = t2.license_no inner JOIN violation as t3 ON t2.inspection_id = t3.inspection_id WHERE strftime('%Y-%m', t2.inspection_date) = '2010-01' AND t2.results = 'Fail' AND t1.facility_type = 'TAVERN'","CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

","establishment, inspection, violation","establishment.dba_name, establishment.license_no, inspection.license_no, inspection.inspection_id, violation.inspection_id, inspection.inspection_date, inspection.results, establishment.facility_type","employee, establishment, inspection, inspection_point, violation"
social_media,List down all the tweet text posted from Australia.,SELECT t1.text FROM twitter as t1 inner JOIN location as t2 ON t1.locationid = t2.locationid WHERE t2.country = 'Australia',"CREATE TABLE `twitter` (
  TweetID TEXT PRIMARY KEY,
  Weekday TEXT,
  Hour INTEGER,
  Day INTEGER,
  Lang TEXT,
  IsReshare TEXT,
  Reach INTEGER,
  RetweetCount INTEGER,
  Likes INTEGER,
  Klout INTEGER,
  Sentiment REAL,
  text TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  UserID TEXT REFERENCES user(UserID)
);
Sample rows from `twitter`:
tw-682712873332805633, Thursday, 17, 31, en, FALSE, 44, 0, 0, 35, 0.0, We are hiring: Senior Software Engineer - Proto http://www.reqcloud.com/jobs/719865/?k=0LaPxXuFwczs1e32ZURJKrgCIDMQtRO7BquFSQthUKY&utm_source=twitter&utm_campaign=reqCloud_JobPost #job @awscloud #job #protocol #networking #aws #mediastreaming, 3751, tw-40932430
tw-682713045357998080, Thursday, 17, 31, en, TRUE, 1810, 5, 0, 53, 2.0, RT @CodeMineStatus: This is true Amazon Web Services https://aws.amazon.com/ #php #html #html5 #css #webdesign #seo #java #javascript htt, 3989, tw-3179389829
tw-682713219375476736, Thursday, 17, 31, en, FALSE, 282, 0, 0, 47, 0.0, Devops Engineer Aws Ansible Cassandra Mysql Ubuntu Ruby On Rails Jobs in Austin TX #Austin #TX #jobs #jobsearch https://www.jobfindly.com/devops-engineer-aws-ansible-cassandra-mysql-ubuntu-ruby-on-rails-jobs-austin-tx.html, 3741, tw-4624808414

CREATE TABLE `location` (
  LocationID INTEGER,
  Country TEXT,
  State TEXT,
  StateCode TEXT,
  City TEXT
);
Sample rows from `location`:
1, Albania, Elbasan, AL, Elbasan
2, Albania, Tirane, AL, Tirana
3, Algeria, Souk Ahras, DZ, Souk Ahras

","CREATE TABLE `location` (
  LocationID INTEGER,
  Country TEXT,
  State TEXT,
  StateCode TEXT,
  City TEXT
);
Sample rows from `location`:
1, Albania, Elbasan, AL, Elbasan
2, Albania, Tirane, AL, Tirana
3, Algeria, Souk Ahras, DZ, Souk Ahras

CREATE TABLE `user` (
  UserID TEXT PRIMARY KEY,
  Gender TEXT
);
Sample rows from `user`:
tw-1267804344, Unknown
tw-27229880, Male
tw-199664730, Male

CREATE TABLE `twitter` (
  TweetID TEXT PRIMARY KEY,
  Weekday TEXT,
  Hour INTEGER,
  Day INTEGER,
  Lang TEXT,
  IsReshare TEXT,
  Reach INTEGER,
  RetweetCount INTEGER,
  Likes INTEGER,
  Klout INTEGER,
  Sentiment REAL,
  text TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  UserID TEXT REFERENCES user(UserID)
);
Sample rows from `twitter`:
tw-682712873332805633, Thursday, 17, 31, en, FALSE, 44, 0, 0, 35, 0.0, We are hiring: Senior Software Engineer - Proto http://www.reqcloud.com/jobs/719865/?k=0LaPxXuFwczs1e32ZURJKrgCIDMQtRO7BquFSQthUKY&utm_source=twitter&utm_campaign=reqCloud_JobPost #job @awscloud #job #protocol #networking #aws #mediastreaming, 3751, tw-40932430
tw-682713045357998080, Thursday, 17, 31, en, TRUE, 1810, 5, 0, 53, 2.0, RT @CodeMineStatus: This is true Amazon Web Services https://aws.amazon.com/ #php #html #html5 #css #webdesign #seo #java #javascript htt, 3989, tw-3179389829
tw-682713219375476736, Thursday, 17, 31, en, FALSE, 282, 0, 0, 47, 0.0, Devops Engineer Aws Ansible Cassandra Mysql Ubuntu Ruby On Rails Jobs in Austin TX #Austin #TX #jobs #jobsearch https://www.jobfindly.com/devops-engineer-aws-ansible-cassandra-mysql-ubuntu-ruby-on-rails-jobs-austin-tx.html, 3741, tw-4624808414

","twitter, location","twitter.text, twitter.locationid, location.locationid, location.country","location, user, twitter"
language_corpus,"Among the title with single digit word count, list down 5 revision page ID of these titles.",SELECT revision FROM pages WHERE words < 10 LIMIT 5,"CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

","CREATE TABLE `langs` (
  lid INTEGER,
  lang TEXT PRIMARY KEY,
  locale TEXT PRIMARY KEY,
  pages INTEGER,
  words INTEGER
);
Sample rows from `langs`:
1, ca, ca_ES, 1129144, 2764996

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
langs, 1
pages, 1129144
words, 2764996

CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `langs_words` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `langs_words`:
1, 1, 242
1, 2, 16841
1, 3, 48700

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

",pages,"revision, words","langs, sqlite_sequence, pages, words, langs_words, pages_words, biwords"
codebase_comments,"What is the language of the method ''PixieTests.SqlConnectionLayerTests.TestSqlCreateGuidColumn""?",SELECT lang FROM method WHERE name = 'PixieTests.SqlConnectionLayerTests.TestSqlCreateGuidColumn',"CREATE TABLE `method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Method, 10860640
MethodParameter, 17514858
Repo, 156550

CREATE TABLE `Method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `Method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

CREATE TABLE `MethodParameter` (
  Id INTEGER,
  MethodId TEXT,
  Type TEXT,
  Name TEXT
);
Sample rows from `MethodParameter`:
1, 1, System.String, data
2, 2, System.Int32, i
3, 2, System.Int32, declstartpos

CREATE TABLE `Repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `Repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

CREATE TABLE `Solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `Solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

",method,"lang, name","sqlite_sequence, Method, MethodParameter, Repo, Solution"
beer_factory,What brand of beer has been the worst rated most times?,SELECT t1.brandname FROM rootbeerbrand as t1 inner JOIN rootbeerreview as t2 ON t2.brandid = t1.brandid WHERE t2.starrating = 1 GROUP BY t1.brandname ORDER BY COUNT(t1.brandname) DESC LIMIT 1,"CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

CREATE TABLE `rootbeerreview` (
  CustomerID INTEGER PRIMARY KEY REFERENCES customers(CustomerID),
  BrandID INTEGER PRIMARY KEY REFERENCES rootbeerbrand(BrandID),
  StarRating INTEGER,
  ReviewDate DATE,
  Review TEXT
);
Sample rows from `rootbeerreview`:
101811, 10012, 5, 2013-07-15, None
101811, 10014, 1, 2013-07-08, None
101811, 10015, 3, 2013-07-25, None

","CREATE TABLE `customers` (
  CustomerID INTEGER,
  First TEXT,
  Last TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER,
  Email TEXT,
  PhoneNumber TEXT,
  FirstPurchaseDate DATE,
  SubscribedToEmailList TEXT,
  Gender TEXT
);
Sample rows from `customers`:
101811, Kenneth, Walton, 6715 Commonwealth Dr, Sacramento, CA, 94256, walton.k76@fastmail.com, (916) 918-1561, 2013-05-30, FALSE, M
103508, Madeleine, Jones, 3603 Leola Way, Sacramento, CA, 94258, j_madeleine@gmail.com, (916) 186-9423, 2013-02-06, FALSE, F
104939, Damen, Wheeler, 6740 Branwood Way, Orangevale, CA, 95662, dwheeler@outlook.com, (916) 164-1156, 2013-04-11, FALSE, M

CREATE TABLE `geolocation` (
  LocationID INTEGER REFERENCES location(LocationID),
  Latitude REAL,
  Longitude REAL
);
Sample rows from `geolocation`:
0, 0.0, 0.0
1, 38.566129, -121.426432
2, 38.559615, -121.42243

CREATE TABLE `location` (
  LocationID INTEGER REFERENCES geolocation(LocationID),
  LocationName TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER
);
Sample rows from `location`:
0, LOST, None, None, None, None
1, Sac State American River Courtyard, 6000 J St, Sacramento, CA, 95819
2, Sac State Union, 6000 J St, Sacramento, CA, 95819

CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

CREATE TABLE `rootbeerreview` (
  CustomerID INTEGER PRIMARY KEY REFERENCES customers(CustomerID),
  BrandID INTEGER PRIMARY KEY REFERENCES rootbeerbrand(BrandID),
  StarRating INTEGER,
  ReviewDate DATE,
  Review TEXT
);
Sample rows from `rootbeerreview`:
101811, 10012, 5, 2013-07-15, None
101811, 10014, 1, 2013-07-08, None
101811, 10015, 3, 2013-07-25, None

CREATE TABLE `transaction` (
  TransactionID INTEGER,
  CreditCardNumber INTEGER,
  CustomerID INTEGER REFERENCES customers(CustomerID),
  TransactionDate DATE,
  CreditCardType TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  RootBeerID INTEGER REFERENCES rootbeer(RootBeerID),
  PurchasePrice REAL
);
Sample rows from `transaction`:
100000, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105661, 3.0
100001, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105798, 3.0
100002, 6011583832864739, 864896, 2014-07-07, Discover, 2, 102514, 3.0

","rootbeerbrand, rootbeerreview","rootbeerbrand.brandname, rootbeerreview.brandid, rootbeerbrand.brandid, rootbeerreview.starrating","customers, geolocation, location, rootbeerbrand, rootbeer, rootbeerreview, transaction"
olympics,Who is the heaviest athlete from Russia?,SELECT t3.full_name FROM noc_region as t1 inner JOIN person_region as t2 ON t1.id = t2.region_id inner JOIN person as t3 ON t2.person_id = t3.id WHERE t1.region_name = 'Russia' ORDER BY t3.weight DESC LIMIT 1,"CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

","CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `medal` (
  id INTEGER,
  medal_name TEXT
);
Sample rows from `medal`:
1, Gold
2, Silver
3, Bronze

CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `sport` (
  id INTEGER,
  sport_name TEXT
);
Sample rows from `sport`:
1, Aeronautics
2, Alpine Skiing
3, Alpinism

CREATE TABLE `event` (
  id INTEGER,
  sport_id INTEGER REFERENCES sport(id),
  event_name TEXT
);
Sample rows from `event`:
1, 9, Basketball Men's Basketball
2, 33, Judo Men's Extra-Lightweight
3, 25, Football Men's Football

CREATE TABLE `competitor_event` (
  event_id INTEGER REFERENCES event(id),
  competitor_id INTEGER REFERENCES games_competitor(id),
  medal_id INTEGER REFERENCES medal(id)
);
Sample rows from `competitor_event`:
1, 1, 4
2, 2, 4
3, 3, 4

","noc_region, person_region, person","person.full_name, noc_region.id, person_region.region_id, person_region.person_id, person.id, noc_region.region_name, person.weight","city, games, games_city, medal, noc_region, person, games_competitor, person_region, sport, event, competitor_event"
simpson_episodes,Calculate the percentage of the nominees who were born in USA.,SELECT cast(SUM(case when t1.birth_country = 'USA' then 1 else 0 end) as real) * 100 / COUNT(*) FROM person as t1 inner JOIN award as t2 ON t1.name = t2.person WHERE t2.result = 'Nominee';,"CREATE TABLE `person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","person, award","person.birth_country, person.name, award.person, award.result","Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
shooting,What percentage of deaths were caused by rifles?,SELECT cast(SUM(subject_statuses = 'Deceased') as real) * 100 / COUNT(case_number) FROM incidents WHERE subject_weapon = 'Rifle',"CREATE TABLE `incidents` (
  case_number TEXT PRIMARY KEY,
  date DATE,
  location TEXT,
  subject_statuses TEXT,
  subject_weapon TEXT,
  subjects TEXT,
  subject_count INTEGER,
  officers TEXT
);
Sample rows from `incidents`:
031347-2015, 2015/2/9, 7400 Bonnie View Road, Deceased, Vehicle, Luster, Desmond Dwayne B/M, 1, Tollerton, Aaron W/M
072458-2016, 2016/3/26, 8218 Willoughby Boulevard, Shoot and Miss, Shotgun, Gilstrap, Bryan B/M, 1, Cardenas, Steven L/M
089985-2016, 2016/4/16, 4800 Columbia Ave, Shoot and Miss, Handgun, Unknown L/M, 1, Ruben, Fredirick W/M

","CREATE TABLE `incidents` (
  case_number TEXT PRIMARY KEY,
  date DATE,
  location TEXT,
  subject_statuses TEXT,
  subject_weapon TEXT,
  subjects TEXT,
  subject_count INTEGER,
  officers TEXT
);
Sample rows from `incidents`:
031347-2015, 2015/2/9, 7400 Bonnie View Road, Deceased, Vehicle, Luster, Desmond Dwayne B/M, 1, Tollerton, Aaron W/M
072458-2016, 2016/3/26, 8218 Willoughby Boulevard, Shoot and Miss, Shotgun, Gilstrap, Bryan B/M, 1, Cardenas, Steven L/M
089985-2016, 2016/4/16, 4800 Columbia Ave, Shoot and Miss, Handgun, Unknown L/M, 1, Ruben, Fredirick W/M

CREATE TABLE `officers` (
  case_number TEXT REFERENCES incidents(case_number),
  race TEXT,
  gender TEXT,
  last_name TEXT,
  first_name TEXT,
  full_name TEXT
);
Sample rows from `officers`:
44523A, L, M, Patino, Michael, Patino, Michael
44523A, W, M, Fillingim, Brian, Fillingim, Brian
121982X, L, M, Padilla, Gilbert, Padilla, Gilbert

CREATE TABLE `subjects` (
  case_number TEXT REFERENCES incidents(case_number),
  race TEXT,
  gender TEXT,
  last_name TEXT,
  first_name TEXT,
  full_name TEXT
);
Sample rows from `subjects`:
44523A, L, M, Curry, James, Curry, James
121982X, L, M, Chavez, Gabriel, Chavez, Gabriel
605484T, L, M, Salinas, Nick, Salinas, Nick

",incidents,"subject_statuses, case_number, subject_weapon","incidents, officers, subjects"
airline,"Among the flights with air carrier ""Southwest Airlines Co.: WN"", provide the tail number of flights with an actual elapsed time lower than the 80% of the average actual elapsed time of listed flights.",SELECT t2.tail_num FROM `air carriers` as t1 inner JOIN airlines as t2 ON t1.code = t2.op_carrier_airline_id WHERE t1.description = 'Southwest airlines Co.: WN' AND t2.actual_elapsed_time < ( SELECT AVG(actual_elapsed_time) * 0.8 FROM airlines ),"CREATE TABLE `air carriers` (
  Code INTEGER,
  Description TEXT
);
Sample rows from `air carriers`:
19031, Mackey International Inc.: MAC
19032, Munz Northern Airlines Inc.: XY
19033, Cochise Airlines Inc.: COC

CREATE TABLE `airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

","CREATE TABLE `Air Carriers` (
  Code INTEGER,
  Description TEXT
);
Sample rows from `Air Carriers`:
19031, Mackey International Inc.: MAC
19032, Munz Northern Airlines Inc.: XY
19033, Cochise Airlines Inc.: COC

CREATE TABLE `Airports` (
  Code TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `Airports`:
01A, Afognak Lake, AK: Afognak Lake Airport
03A, Granite Mountain, AK: Bear Creek Mining Strip
04A, Lik, AK: Lik Mining Camp

CREATE TABLE `Airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `Airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

","air carriers, airlines","airlines.tail_num, air carriers.code, airlines.op_carrier_airline_id, air carriers.description, airlines.actual_elapsed_time, actual_elapsed_time","Air Carriers, Airports, Airlines"
public_review_platform,"How many businesses operating in the ""Accessories"" category have received a ""wonderful experience"" review from users?",SELECT COUNT(t2.business_id) FROM categories as t1 inner JOIN business_categories as t2 ON t1.category_id = t2.category_id inner JOIN business as t3 ON t2.business_id = t3.business_id WHERE t3.stars > 3 AND t1.category_name LIKE 'Accessories',"CREATE TABLE `categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `business_categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `business_categories`:
1, 8
1, 143
2, 18

CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","categories, business_categories, business","business_categories.business_id, categories.category_id, business_categories.category_id, business.business_id, business.stars, categories.category_name","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
bike_share_1,Calculate the difference between the number of customers and the number of subscribers who did the trip in June 2013.,"SELECT SUM(iif(subscription_type = 'Subscriber', 1, 0)) - SUM(iif(subscription_type = 'Customer', 1, 0)) FROM trip WHERE start_date LIKE '6/%/2013%'","CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);
Sample rows from `trip`:
4069, 174, 8/29/2013 9:08, 2nd at South Park, 64, 8/29/2013 9:11, 2nd at South Park, 64, 288, Subscriber, 94114
4073, 1067, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:42, San Francisco Caltrain 2 (330 Townsend), 69, 321, Subscriber, 94703
4074, 1131, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:43, San Francisco Caltrain 2 (330 Townsend), 69, 317, Subscriber, 94115

","CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat REAL,
  long REAL,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);
Sample rows from `station`:
2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013
3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013
4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013

CREATE TABLE `status` (
  station_id INTEGER,
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);
Sample rows from `status`:
2, 2, 25, 2013/08/29 12:06:01
2, 2, 25, 2013/08/29 12:07:01
2, 2, 25, 2013/08/29 12:08:01

CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);
Sample rows from `trip`:
4069, 174, 8/29/2013 9:08, 2nd at South Park, 64, 8/29/2013 9:11, 2nd at South Park, 64, 288, Subscriber, 94114
4073, 1067, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:42, San Francisco Caltrain 2 (330 Townsend), 69, 321, Subscriber, 94703
4074, 1131, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:43, San Francisco Caltrain 2 (330 Townsend), 69, 317, Subscriber, 94115

CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches REAL,
  mean_sea_level_pressure_inches REAL,
  min_sea_level_pressure_inches REAL,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches TEXT,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code TEXT
);
Sample rows from `weather`:
8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107
8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30.0, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107
8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30.0, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107

",trip,"subscription_type, start_date","station, status, trip, weather"
simpson_episodes,"In between the episode 5 and10 of season 2, how many of them are credited for casting?","SELECT COUNT(credited) FROM credit WHERE episode_id IN ( 'S20-E5',  'S20-E6',  'S20-E7',  'S20-E8',  'S20-E9',  'S20-E10' ) AND credited = 'true' AND role = 'casting';","CREATE TABLE `credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

",credit,"credited, episode_id","Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
food_inspection,List owner's name of businesses with a 100 score.,SELECT DISTINCT t2.owner_name FROM inspections as t1 inner JOIN businesses as t2 ON t1.business_id = t2.business_id WHERE t1.score = 100,"CREATE TABLE `inspections` (
  business_id INTEGER REFERENCES businesses(business_id),
  score INTEGER,
  date DATE,
  type TEXT
);
Sample rows from `inspections`:
10, 92, 2014-01-14, Routine - Unscheduled
10, None, 2014-01-24, Reinspection/Followup
10, 94, 2014-07-29, Routine - Unscheduled

CREATE TABLE `businesses` (
  business_id INTEGER,
  name TEXT,
  address TEXT,
  city TEXT,
  postal_code TEXT,
  latitude REAL,
  longitude REAL,
  phone_number INTEGER,
  tax_code TEXT,
  business_certificate INTEGER,
  application_date DATE,
  owner_name TEXT,
  owner_address TEXT,
  owner_city TEXT,
  owner_state TEXT,
  owner_zip TEXT
);
Sample rows from `businesses`:
10, Tiramisu Kitchen, 033 Belden Pl, San Francisco, 94104, 37.7911, -122.404, None, H24, 779059, None, Tiramisu LLC, 33 Belden St, San Francisco, CA, 94104
24, OMNI S.F. Hotel - 2nd Floor Pantry, 500 California St, 2nd  Floor, San Francisco, 94104, 37.7929, -122.403, None, H24, 352312, None, OMNI San Francisco Hotel Corp, 500 California St, 2nd Floor, San Francisco, CA, 94104
31, Norman's Ice Cream and Freezes, 2801 Leavenworth St, San Francisco, 94133, 37.8072, -122.419, None, H24, 346882, None, Norman Antiforda, 2801 Leavenworth St, San Francisco, CA, 94133

","CREATE TABLE `businesses` (
  business_id INTEGER,
  name TEXT,
  address TEXT,
  city TEXT,
  postal_code TEXT,
  latitude REAL,
  longitude REAL,
  phone_number INTEGER,
  tax_code TEXT,
  business_certificate INTEGER,
  application_date DATE,
  owner_name TEXT,
  owner_address TEXT,
  owner_city TEXT,
  owner_state TEXT,
  owner_zip TEXT
);
Sample rows from `businesses`:
10, Tiramisu Kitchen, 033 Belden Pl, San Francisco, 94104, 37.7911, -122.404, None, H24, 779059, None, Tiramisu LLC, 33 Belden St, San Francisco, CA, 94104
24, OMNI S.F. Hotel - 2nd Floor Pantry, 500 California St, 2nd  Floor, San Francisco, 94104, 37.7929, -122.403, None, H24, 352312, None, OMNI San Francisco Hotel Corp, 500 California St, 2nd Floor, San Francisco, CA, 94104
31, Norman's Ice Cream and Freezes, 2801 Leavenworth St, San Francisco, 94133, 37.8072, -122.419, None, H24, 346882, None, Norman Antiforda, 2801 Leavenworth St, San Francisco, CA, 94133

CREATE TABLE `inspections` (
  business_id INTEGER REFERENCES businesses(business_id),
  score INTEGER,
  date DATE,
  type TEXT
);
Sample rows from `inspections`:
10, 92, 2014-01-14, Routine - Unscheduled
10, None, 2014-01-24, Reinspection/Followup
10, 94, 2014-07-29, Routine - Unscheduled

CREATE TABLE `violations` (
  business_id INTEGER REFERENCES businesses(business_id),
  date DATE,
  violation_type_id TEXT,
  risk_category TEXT,
  description TEXT
);
Sample rows from `violations`:
10, 2014-07-29, 103129, Moderate Risk, Insufficient hot water or running water
10, 2014-07-29, 103144, Low Risk, Unapproved or unmaintained equipment or utensils
10, 2014-01-14, 103119, Moderate Risk, Inadequate and inaccessible handwashing facilities

","inspections, businesses","businesses.owner_name, inspections.business_id, businesses.business_id, inspections.score","businesses, inspections, violations"
public_review_platform,"Sum up the number of business with ""ambience_romantic"" attribute.",SELECT COUNT(t2.business_id) FROM attributes as t1 inner JOIN Business_attributes as t2 ON t1.attribute_id = t2.attribute_id WHERE t1.attribute_name = 'ambience_romantic' AND t2.attribute_value = 'true',"CREATE TABLE `attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Business_attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_attributes`:
1, 2, none
1, 3, none
1, 13, none

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","attributes, Business_attributes","Business_attributes.business_id, attributes.attribute_id, Business_attributes.attribute_id, attributes.attribute_name, Business_attributes.attribute_value","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
shipping,How many shipments in 2017 were done by Sue Newell?,"SELECT COUNT(*) FROM shipment as t1 inner JOIN driver as t2 ON t1.driver_id = t2.driver_id WHERE strftime('%Y', t1.ship_date) = '2017' AND t2.first_name = 'Sue' AND t2.last_name = 'Newell'","CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

CREATE TABLE `driver` (
  driver_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip_code INTEGER,
  phone TEXT
);
Sample rows from `driver`:
20, Sue, Newell, 268 Richmond Ave, Memphis, TN, 38106, (901) 774-6569
21, Andrea, Simons, 3574 Oak Limb Cv, Memphis, TN, 38135, (901) 384-0984
22, Roger, McHaney, 1839 S Orleans St, Memphis, TN, 38106, (901) 948-1043

","CREATE TABLE `city` (
  city_id INTEGER,
  city_name TEXT,
  state TEXT,
  population INTEGER,
  area REAL
);
Sample rows from `city`:
100, Union City, New Jersey, 67088, 1.3
101, Huntington Park, California, 61348, 3.0
102, Passaic, New Jersey, 67861, 3.1

CREATE TABLE `customer` (
  cust_id INTEGER,
  cust_name TEXT,
  annual_revenue INTEGER,
  cust_type TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip REAL,
  phone TEXT
);
Sample rows from `customer`:
193, Advanced Fabricators, 39588651, manufacturer, 5141 Summit Boulevard, West Palm Beach, FL, 33415.0, (561) 683-3535
304, Pard's Trailer Sales, 17158109, wholesaler, 5910 South 300 West, Salt Lake City, UT, 84107.0, (801) 262-4864
314, Saar Enterprises, Inc., 47403613, retailer, 11687 192nd Street, Council Bluffs, IA, 51503.0, (712) 366-4929

CREATE TABLE `driver` (
  driver_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip_code INTEGER,
  phone TEXT
);
Sample rows from `driver`:
20, Sue, Newell, 268 Richmond Ave, Memphis, TN, 38106, (901) 774-6569
21, Andrea, Simons, 3574 Oak Limb Cv, Memphis, TN, 38135, (901) 384-0984
22, Roger, McHaney, 1839 S Orleans St, Memphis, TN, 38106, (901) 948-1043

CREATE TABLE `truck` (
  truck_id INTEGER,
  make TEXT,
  model_year INTEGER
);
Sample rows from `truck`:
1, Peterbilt, 2005
2, Mack, 2006
3, Peterbilt, 2007

CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

","shipment, driver","shipment.driver_id, driver.driver_id, shipment.ship_date, driver.first_name, driver.last_name","city, customer, driver, truck, shipment"
regional_sales,How many states located in the Midwest region?,SELECt COUNT(DistINCt t) FROM ( SELECt case  when region = 'Midwest' tHEN statecode else null end as t FROM regions ) WHERE t is NOt null,"CREATE TABLE `regions` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `regions`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  Customer Names TEXT
);
Sample rows from `Customers`:
1, Avon Corp
2, WakeFern 
3, Elorac, Corp

CREATE TABLE `Products` (
  ProductID INTEGER,
  Product Name TEXT
);
Sample rows from `Products`:
1, Cookware
2, Photo Frames
3, Table Lamps

CREATE TABLE `Regions` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `Regions`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `Sales Team` (
  SalesTeamID INTEGER,
  Sales Team TEXT,
  Region TEXT
);
Sample rows from `Sales Team`:
1, Adam Hernandez, Northeast
2, Keith Griffin, Northeast
3, Jerry Green, West

CREATE TABLE `Store Locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `Store Locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

CREATE TABLE `Sales Orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `Sales Orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

",regions,"region, statecode","Customers, Products, Regions, Sales Team, Store Locations, Sales Orders"
shakespeare,"In ""Florence. Without the walls. A tucket afar off"", what is the id of the character that was mentioned in ""His name, I pray you.""?","SELECT t1.character_id FROM paragraphs as t1 inner JOIN chapters as t2 ON t1.chapter_id = t2.id WHERE t1.plaintext = 'His name, I pray you.' AND t2.description = 'Florence. Without the walls. A tucket afar off.'","CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

","CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
chapters, 19648
characters, 1266
paragraphs, 666327

CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

","paragraphs, chapters","paragraphs.character_id, paragraphs.chapter_id, chapters.id, paragraphs.plaintext, chapters.description","chapters, sqlite_sequence, characters, paragraphs, works"
food_inspection_2,"How many inspections done by Lisa Tillman ended up with the result of ""Out of Business""?",SELECT COUNT(t1.inspection_id) FROM inspection as t1 inner JOIN employee as t2 ON t1.employee_id = t2.employee_id WHERE t2.first_name = 'Lisa' AND t2.last_name = 'Tillman' AND t1.results = 'Out of Business',"CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

","inspection, employee","inspection.inspection_id, inspection.employee_id, employee.employee_id, employee.first_name, employee.last_name, inspection.results","employee, establishment, inspection, inspection_point, violation"
world,What is the local name of Ukraine that they are also known for?,SELECT localname FROM country WHERE name = 'Ukraine',"CREATE TABLE `country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
City, 4079

CREATE TABLE `City` (
  ID INTEGER,
  Name TEXT,
  CountryCode TEXT REFERENCES Country(Code),
  District TEXT,
  Population INTEGER
);
Sample rows from `City`:
1, Kabul, AFG, Kabol, 1780000
2, Qandahar, AFG, Qandahar, 237500
3, Herat, AFG, Herat, 186800

CREATE TABLE `Country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `Country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

CREATE TABLE `CountryLanguage` (
  CountryCode TEXT PRIMARY KEY REFERENCES Country(Code),
  Language TEXT PRIMARY KEY,
  IsOfficial TEXT,
  Percentage REAL
);
Sample rows from `CountryLanguage`:
ABW, Dutch, T, 5.3
ABW, English, F, 9.5
ABW, Papiamento, F, 76.7

",country,"localname, name","sqlite_sequence, City, Country, CountryLanguage"
regional_sales,How many online orders were shipped during the month of June 2018?,"SELECT SUM(iif(shipdate LIKE '6/%/18' AND `sales channel` = 'Online', 1, 0)) FROM `sales orders`","CREATE TABLE `sales orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `sales orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  Customer Names TEXT
);
Sample rows from `Customers`:
1, Avon Corp
2, WakeFern 
3, Elorac, Corp

CREATE TABLE `Products` (
  ProductID INTEGER,
  Product Name TEXT
);
Sample rows from `Products`:
1, Cookware
2, Photo Frames
3, Table Lamps

CREATE TABLE `Regions` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `Regions`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `Sales Team` (
  SalesTeamID INTEGER,
  Sales Team TEXT,
  Region TEXT
);
Sample rows from `Sales Team`:
1, Adam Hernandez, Northeast
2, Keith Griffin, Northeast
3, Jerry Green, West

CREATE TABLE `Store Locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `Store Locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

CREATE TABLE `Sales Orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `Sales Orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

",sales orders,"shipdate, sales channel","Customers, Products, Regions, Sales Team, Store Locations, Sales Orders"
movie,List the height and net worth of actors starred in Three Men and a Little Lady.,"SELECT t3.`height (inches)`, t3.networth FROM movie as t1 inner JOIN characters as t2 ON t1.movieid = t2.movieid inner JOIN actor as t3 ON t3.actorid = t2.actorid WHERE t1.title = 'Three Men and a Little Lady'","CREATE TABLE `movie` (
  MovieID INTEGER,
  Title TEXT,
  MPAA Rating TEXT,
  Budget INTEGER,
  Gross INTEGER,
  Release Date TEXT,
  Genre TEXT,
  Runtime INTEGER,
  Rating REAL,
  Rating Count INTEGER,
  Summary TEXT
);
Sample rows from `movie`:
1, Look Who's Talking, PG-13, 7500000, 296000000, 1989-10-12, Romance, 93, 5.9, 73638, After a single, career-minded woman is left on her own to give birth to the child of a married man, she finds a new romantic chance in a cab driver. Meanwhile, the point-of-view of the newborn boy is narrated through voice-over.
2, Driving Miss Daisy, PG, 7500000, 145793296, 1989-12-13, Comedy, 99, 7.4, 91075, An old Jewish woman and her African-American chauffeur in the American South have a relationship that grows and improves over the years.
3, Turner & Hooch, PG, 13000000, 71079915, 1989-07-28, Crime, 100, 7.2, 91415, Det. Scott Turner (Tom Hanks) is an uptight, by-the-book police officer. When his friend Amos Reed (John McIntire), the proprietor of a junkyard, is killed, Turner reluctantly inherits the man's dog. Turner adjusts to life with the dog to help solve a murder case.

CREATE TABLE `characters` (
  MovieID INTEGER PRIMARY KEY REFERENCES movie(MovieID),
  ActorID INTEGER PRIMARY KEY REFERENCES actor(ActorID),
  Character Name TEXT,
  creditOrder INTEGER,
  pay TEXT,
  screentime TEXT
);
Sample rows from `characters`:
1, 1, James, 1, None, None
1, 2, Mollie, 2, None, None
1, 3, Rosie, 3, None, None

CREATE TABLE `actor` (
  ActorID INTEGER,
  Name TEXT,
  Date of Birth DATE,
  Birth City TEXT,
  Birth Country TEXT,
  Height (Inches) INTEGER,
  Biography TEXT,
  Gender TEXT,
  Ethnicity TEXT,
  NetWorth TEXT
);
Sample rows from `actor`:
1, John Travolta, 1954-02-18, Englewood, USA, 74, John Joseph Travolta was born in Englewood, New Jersey, one of six children of Helen Travolta (n�e Helen Cecilia Burke) and Salvatore/Samuel J. Travolta. His father was of Italian descent and his mother was of Irish ancestry. His father owned a tire repair shop called Travolta Tires in Hillsdale, NJ. Travolta started acting appearing in a local ..., Male, White, $250,000,000.00
2, Kirstie Alley, 1951-01-12, Wichita, USA, 67, None, Female, White, $40,000,000.00
3, Olympia Dukakis, 1931-06-20, Lowell, USA, 63, Long a vital, respected lady of the classic and contemporary stage this grand lady did not become a household name and sought-after film actress until age 56 when she turned in a glorious, Oscar-winning perf as Cher's sardonic mother in the romantic comedy Moonstruck (1987). Since then movie (and TV) fans have discovered what the East coast ..., Female, White, $6,000,000.00

","CREATE TABLE `actor` (
  ActorID INTEGER,
  Name TEXT,
  Date of Birth DATE,
  Birth City TEXT,
  Birth Country TEXT,
  Height (Inches) INTEGER,
  Biography TEXT,
  Gender TEXT,
  Ethnicity TEXT,
  NetWorth TEXT
);
Sample rows from `actor`:
1, John Travolta, 1954-02-18, Englewood, USA, 74, John Joseph Travolta was born in Englewood, New Jersey, one of six children of Helen Travolta (n�e Helen Cecilia Burke) and Salvatore/Samuel J. Travolta. His father was of Italian descent and his mother was of Irish ancestry. His father owned a tire repair shop called Travolta Tires in Hillsdale, NJ. Travolta started acting appearing in a local ..., Male, White, $250,000,000.00
2, Kirstie Alley, 1951-01-12, Wichita, USA, 67, None, Female, White, $40,000,000.00
3, Olympia Dukakis, 1931-06-20, Lowell, USA, 63, Long a vital, respected lady of the classic and contemporary stage this grand lady did not become a household name and sought-after film actress until age 56 when she turned in a glorious, Oscar-winning perf as Cher's sardonic mother in the romantic comedy Moonstruck (1987). Since then movie (and TV) fans have discovered what the East coast ..., Female, White, $6,000,000.00

CREATE TABLE `movie` (
  MovieID INTEGER,
  Title TEXT,
  MPAA Rating TEXT,
  Budget INTEGER,
  Gross INTEGER,
  Release Date TEXT,
  Genre TEXT,
  Runtime INTEGER,
  Rating REAL,
  Rating Count INTEGER,
  Summary TEXT
);
Sample rows from `movie`:
1, Look Who's Talking, PG-13, 7500000, 296000000, 1989-10-12, Romance, 93, 5.9, 73638, After a single, career-minded woman is left on her own to give birth to the child of a married man, she finds a new romantic chance in a cab driver. Meanwhile, the point-of-view of the newborn boy is narrated through voice-over.
2, Driving Miss Daisy, PG, 7500000, 145793296, 1989-12-13, Comedy, 99, 7.4, 91075, An old Jewish woman and her African-American chauffeur in the American South have a relationship that grows and improves over the years.
3, Turner & Hooch, PG, 13000000, 71079915, 1989-07-28, Crime, 100, 7.2, 91415, Det. Scott Turner (Tom Hanks) is an uptight, by-the-book police officer. When his friend Amos Reed (John McIntire), the proprietor of a junkyard, is killed, Turner reluctantly inherits the man's dog. Turner adjusts to life with the dog to help solve a murder case.

CREATE TABLE `characters` (
  MovieID INTEGER PRIMARY KEY REFERENCES movie(MovieID),
  ActorID INTEGER PRIMARY KEY REFERENCES actor(ActorID),
  Character Name TEXT,
  creditOrder INTEGER,
  pay TEXT,
  screentime TEXT
);
Sample rows from `characters`:
1, 1, James, 1, None, None
1, 2, Mollie, 2, None, None
1, 3, Rosie, 3, None, None

","movie, characters, actor","actor.height (inches), actor.networth, movie.movieid, characters.movieid, actor.actorid, characters.actorid, movie.title","actor, movie, characters"
cs_semester,Which professor advised Faina Mallinar to become a research assistant? Please give his or her full name.,"SELECT t1.first_name, t1.last_name FROM prof as t1 inner JOIN ra as t2 ON t1.prof_id = t2.prof_id inner JOIN student as t3 ON t2.student_id = t3.student_id WHERE t3.f_name = 'Faina' AND t3.l_name = 'Mallinar'","CREATE TABLE `prof` (
  prof_id INTEGER,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  popularity INTEGER,
  teachingability INTEGER,
  graduate_from TEXT
);
Sample rows from `prof`:
1, Male, Nathaniel, Pigford, npigford0@hku.hk, 3, 5, University of Washington
2, Male, Zhihua, Zhou, zzhihua@hku.hk, 2, 1, Beijing Polytechnic University
3, Male, Ogdon, Zywicki, ozywicki2@hku.hk, 2, 2, University of Boston

CREATE TABLE `ra` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `ra`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

","CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

CREATE TABLE `prof` (
  prof_id INTEGER,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  popularity INTEGER,
  teachingability INTEGER,
  graduate_from TEXT
);
Sample rows from `prof`:
1, Male, Nathaniel, Pigford, npigford0@hku.hk, 3, 5, University of Washington
2, Male, Zhihua, Zhou, zzhihua@hku.hk, 2, 1, Beijing Polytechnic University
3, Male, Ogdon, Zywicki, ozywicki2@hku.hk, 2, 2, University of Boston

CREATE TABLE `RA` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `RA`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

","prof, ra, student","prof.first_name, prof.last_name, prof.prof_id, ra.prof_id, ra.student_id, student.student_id, student.f_name, student.l_name","course, prof, RA, registration, student"
language_corpus,What is the total pages of Wikipedia in Catalan language?,SELECT pages FROM langs WHERE lang = 'ca',"CREATE TABLE `langs` (
  lid INTEGER,
  lang TEXT PRIMARY KEY,
  locale TEXT PRIMARY KEY,
  pages INTEGER,
  words INTEGER
);
Sample rows from `langs`:
1, ca, ca_ES, 1129144, 2764996

","CREATE TABLE `langs` (
  lid INTEGER,
  lang TEXT PRIMARY KEY,
  locale TEXT PRIMARY KEY,
  pages INTEGER,
  words INTEGER
);
Sample rows from `langs`:
1, ca, ca_ES, 1129144, 2764996

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
langs, 1
pages, 1129144
words, 2764996

CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `langs_words` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `langs_words`:
1, 1, 242
1, 2, 16841
1, 3, 48700

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

",langs,"pages, lang","langs, sqlite_sequence, pages, words, langs_words, pages_words, biwords"
food_inspection_2,Please list the assumed name of all the facilities inspected by Joshua Rosa.,SELECT DISTINCT t3.dba_name FROM employee as t1 inner JOIN inspection as t2 ON t1.employee_id = t2.employee_id inner JOIN establishment as t3 ON t2.license_no = t3.license_no WHERE t1.first_name = 'Joshua' AND t1.last_name = 'Rosa',"CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

","employee, inspection, establishment","establishment.dba_name, employee.employee_id, inspection.employee_id, inspection.license_no, establishment.license_no, employee.first_name, employee.last_name","employee, establishment, inspection, inspection_point, violation"
retail_world,Write the shipping company name with the telephone number of (503) 555-9931.,SELECT companyname FROM shippers WHERE phone = '(503) 555-9931',"CREATE TABLE `shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

",shippers,"companyname, phone","sqlite_sequence, Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails"
computer_student,"Among the courses that are basic or medium undergraduate courses, how many of them are taught by a faculty member?",SELECT COUNT(*) FROM course as t1 inner JOIN taughtby as t2 ON t1.course_id = t2.course_id inner JOIN person as t3 ON t2.p_id = t3.p_id WHERE t3.professor = 1 AND t1.courselevel = 'Level_300',"CREATE TABLE `course` (
  course_id INTEGER,
  courseLevel TEXT
);
Sample rows from `course`:
0, Level_500
1, Level_500
2, Level_500

CREATE TABLE `taughtby` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `taughtby`:
0, 40
1, 40
2, 180

CREATE TABLE `person` (
  p_id INTEGER,
  professor INTEGER,
  student INTEGER,
  hasPosition TEXT,
  inPhase TEXT,
  yearsInProgram TEXT
);
Sample rows from `person`:
3, 0, 1, 0, 0, 0
4, 0, 1, 0, 0, 0
5, 1, 0, Faculty, 0, 0

","CREATE TABLE `course` (
  course_id INTEGER,
  courseLevel TEXT
);
Sample rows from `course`:
0, Level_500
1, Level_500
2, Level_500

CREATE TABLE `person` (
  p_id INTEGER,
  professor INTEGER,
  student INTEGER,
  hasPosition TEXT,
  inPhase TEXT,
  yearsInProgram TEXT
);
Sample rows from `person`:
3, 0, 1, 0, 0, 0
4, 0, 1, 0, 0, 0
5, 1, 0, Faculty, 0, 0

CREATE TABLE `advisedBy` (
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id),
  p_id_dummy INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `advisedBy`:
96, 5
118, 5
183, 5

CREATE TABLE `taughtBy` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `taughtBy`:
0, 40
1, 40
2, 180

","course, taughtby, person","course.course_id, taughtby.course_id, taughtby.p_id, person.p_id, person.professor, course.courselevel","course, person, advisedBy, taughtBy"
shakespeare,What is the percentage of act number 5 in Titus Andronicus?,"SELECT cast(SUM(iif(t2.act = 5, 1, 0)) as real) * 100 / COUNT(t2.act) FROM works as t1 inner JOIN chapters as t2 ON t1.id = t2.work_id WHERE t1.title = 'Titus Andronicus'","CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

","CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
chapters, 19648
characters, 1266
paragraphs, 666327

CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

","works, chapters","chapters.act, works.id, chapters.work_id, works.title","chapters, sqlite_sequence, characters, paragraphs, works"
movie,Please list the names of the characters in the movie Look Who's Talking.,SELECT t2.`character name` FROM movie as t1 inner JOIN characters as t2 ON t1.movieid = t2.movieid WHERE t1.title = 'Look Who''s Talking',"CREATE TABLE `movie` (
  MovieID INTEGER,
  Title TEXT,
  MPAA Rating TEXT,
  Budget INTEGER,
  Gross INTEGER,
  Release Date TEXT,
  Genre TEXT,
  Runtime INTEGER,
  Rating REAL,
  Rating Count INTEGER,
  Summary TEXT
);
Sample rows from `movie`:
1, Look Who's Talking, PG-13, 7500000, 296000000, 1989-10-12, Romance, 93, 5.9, 73638, After a single, career-minded woman is left on her own to give birth to the child of a married man, she finds a new romantic chance in a cab driver. Meanwhile, the point-of-view of the newborn boy is narrated through voice-over.
2, Driving Miss Daisy, PG, 7500000, 145793296, 1989-12-13, Comedy, 99, 7.4, 91075, An old Jewish woman and her African-American chauffeur in the American South have a relationship that grows and improves over the years.
3, Turner & Hooch, PG, 13000000, 71079915, 1989-07-28, Crime, 100, 7.2, 91415, Det. Scott Turner (Tom Hanks) is an uptight, by-the-book police officer. When his friend Amos Reed (John McIntire), the proprietor of a junkyard, is killed, Turner reluctantly inherits the man's dog. Turner adjusts to life with the dog to help solve a murder case.

CREATE TABLE `characters` (
  MovieID INTEGER PRIMARY KEY REFERENCES movie(MovieID),
  ActorID INTEGER PRIMARY KEY REFERENCES actor(ActorID),
  Character Name TEXT,
  creditOrder INTEGER,
  pay TEXT,
  screentime TEXT
);
Sample rows from `characters`:
1, 1, James, 1, None, None
1, 2, Mollie, 2, None, None
1, 3, Rosie, 3, None, None

","CREATE TABLE `actor` (
  ActorID INTEGER,
  Name TEXT,
  Date of Birth DATE,
  Birth City TEXT,
  Birth Country TEXT,
  Height (Inches) INTEGER,
  Biography TEXT,
  Gender TEXT,
  Ethnicity TEXT,
  NetWorth TEXT
);
Sample rows from `actor`:
1, John Travolta, 1954-02-18, Englewood, USA, 74, John Joseph Travolta was born in Englewood, New Jersey, one of six children of Helen Travolta (n�e Helen Cecilia Burke) and Salvatore/Samuel J. Travolta. His father was of Italian descent and his mother was of Irish ancestry. His father owned a tire repair shop called Travolta Tires in Hillsdale, NJ. Travolta started acting appearing in a local ..., Male, White, $250,000,000.00
2, Kirstie Alley, 1951-01-12, Wichita, USA, 67, None, Female, White, $40,000,000.00
3, Olympia Dukakis, 1931-06-20, Lowell, USA, 63, Long a vital, respected lady of the classic and contemporary stage this grand lady did not become a household name and sought-after film actress until age 56 when she turned in a glorious, Oscar-winning perf as Cher's sardonic mother in the romantic comedy Moonstruck (1987). Since then movie (and TV) fans have discovered what the East coast ..., Female, White, $6,000,000.00

CREATE TABLE `movie` (
  MovieID INTEGER,
  Title TEXT,
  MPAA Rating TEXT,
  Budget INTEGER,
  Gross INTEGER,
  Release Date TEXT,
  Genre TEXT,
  Runtime INTEGER,
  Rating REAL,
  Rating Count INTEGER,
  Summary TEXT
);
Sample rows from `movie`:
1, Look Who's Talking, PG-13, 7500000, 296000000, 1989-10-12, Romance, 93, 5.9, 73638, After a single, career-minded woman is left on her own to give birth to the child of a married man, she finds a new romantic chance in a cab driver. Meanwhile, the point-of-view of the newborn boy is narrated through voice-over.
2, Driving Miss Daisy, PG, 7500000, 145793296, 1989-12-13, Comedy, 99, 7.4, 91075, An old Jewish woman and her African-American chauffeur in the American South have a relationship that grows and improves over the years.
3, Turner & Hooch, PG, 13000000, 71079915, 1989-07-28, Crime, 100, 7.2, 91415, Det. Scott Turner (Tom Hanks) is an uptight, by-the-book police officer. When his friend Amos Reed (John McIntire), the proprietor of a junkyard, is killed, Turner reluctantly inherits the man's dog. Turner adjusts to life with the dog to help solve a murder case.

CREATE TABLE `characters` (
  MovieID INTEGER PRIMARY KEY REFERENCES movie(MovieID),
  ActorID INTEGER PRIMARY KEY REFERENCES actor(ActorID),
  Character Name TEXT,
  creditOrder INTEGER,
  pay TEXT,
  screentime TEXT
);
Sample rows from `characters`:
1, 1, James, 1, None, None
1, 2, Mollie, 2, None, None
1, 3, Rosie, 3, None, None

","movie, characters","characters.character name, movie.movieid, characters.movieid, movie.title","actor, movie, characters"
olympics,How many persons participated in the Sapporo Olympics?,SELECT COUNT(t1.person_id) FROM games_competitor as t1 inner JOIN games_city as t2 ON t1.games_id = t2.games_id inner JOIN city as t3 ON t2.city_id = t3.id WHERE t3.city_name = 'Sapporo',"CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

","CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `medal` (
  id INTEGER,
  medal_name TEXT
);
Sample rows from `medal`:
1, Gold
2, Silver
3, Bronze

CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `sport` (
  id INTEGER,
  sport_name TEXT
);
Sample rows from `sport`:
1, Aeronautics
2, Alpine Skiing
3, Alpinism

CREATE TABLE `event` (
  id INTEGER,
  sport_id INTEGER REFERENCES sport(id),
  event_name TEXT
);
Sample rows from `event`:
1, 9, Basketball Men's Basketball
2, 33, Judo Men's Extra-Lightweight
3, 25, Football Men's Football

CREATE TABLE `competitor_event` (
  event_id INTEGER REFERENCES event(id),
  competitor_id INTEGER REFERENCES games_competitor(id),
  medal_id INTEGER REFERENCES medal(id)
);
Sample rows from `competitor_event`:
1, 1, 4
2, 2, 4
3, 3, 4

","games_competitor, games_city, city","games_competitor.person_id, games_competitor.games_id, games_city.games_id, games_city.city_id, city.id, city.city_name","city, games, games_city, medal, noc_region, person, games_competitor, person_region, sport, event, competitor_event"
trains,Please list the directions in which the trains with at least one empty-loaded car run.,SELECT t2.direction FROM cars as t1 inner JOIN trains as t2 ON t1.train_id = t2.id WHERE t1.load_num = 0,"CREATE TABLE `cars` (
  id INTEGER,
  train_id INTEGER REFERENCES trains(id),
  position INTEGER,
  shape TEXT,
  len TEXT,
  sides TEXT,
  roof TEXT,
  wheels INTEGER,
  load_shape TEXT,
  load_num INTEGER
);
Sample rows from `cars`:
1, 1, 1, rectangle, short, not_double, none, 2, circle, 1
2, 1, 2, rectangle, long, not_double, none, 3, hexagon, 1
3, 1, 3, rectangle, short, not_double, peaked, 2, triangle, 1

CREATE TABLE `trains` (
  id INTEGER,
  direction TEXT
);
Sample rows from `trains`:
1, east
2, east
3, east

","CREATE TABLE `cars` (
  id INTEGER,
  train_id INTEGER REFERENCES trains(id),
  position INTEGER,
  shape TEXT,
  len TEXT,
  sides TEXT,
  roof TEXT,
  wheels INTEGER,
  load_shape TEXT,
  load_num INTEGER
);
Sample rows from `cars`:
1, 1, 1, rectangle, short, not_double, none, 2, circle, 1
2, 1, 2, rectangle, long, not_double, none, 3, hexagon, 1
3, 1, 3, rectangle, short, not_double, peaked, 2, triangle, 1

CREATE TABLE `trains` (
  id INTEGER,
  direction TEXT
);
Sample rows from `trains`:
1, east
2, east
3, east

","cars, trains","trains.direction, cars.train_id, trains.id, cars.load_num","cars, trains"
olympics,What is the NOC code of the region of the competitors weighted 77 kg?,SELECT t1.noc FROM noc_region as t1 inner JOIN person_region as t2 ON t1.id = t2.region_id inner JOIN person as t3 ON t2.person_id = t3.id WHERE t3.weight = 77,"CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

","CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `medal` (
  id INTEGER,
  medal_name TEXT
);
Sample rows from `medal`:
1, Gold
2, Silver
3, Bronze

CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `sport` (
  id INTEGER,
  sport_name TEXT
);
Sample rows from `sport`:
1, Aeronautics
2, Alpine Skiing
3, Alpinism

CREATE TABLE `event` (
  id INTEGER,
  sport_id INTEGER REFERENCES sport(id),
  event_name TEXT
);
Sample rows from `event`:
1, 9, Basketball Men's Basketball
2, 33, Judo Men's Extra-Lightweight
3, 25, Football Men's Football

CREATE TABLE `competitor_event` (
  event_id INTEGER REFERENCES event(id),
  competitor_id INTEGER REFERENCES games_competitor(id),
  medal_id INTEGER REFERENCES medal(id)
);
Sample rows from `competitor_event`:
1, 1, 4
2, 2, 4
3, 3, 4

","noc_region, person_region, person","noc_region.noc, noc_region.id, person_region.region_id, person_region.person_id, person.id, person.weight","city, games, games_city, medal, noc_region, person, games_competitor, person_region, sport, event, competitor_event"
restaurant,How many restaurants in the city of Richmond serve Mediterranean food?,SELECT COUNT(id_restaurant) FROM generalinfo WHERE food_type = 'mediterranean' AND city = 'richmond',"CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

","CREATE TABLE `geographic` (
  city TEXT PRIMARY KEY,
  county TEXT,
  region TEXT
);
Sample rows from `geographic`:
alameda, alameda county, bay area
alamo, contra costa county, bay area
albany, alameda county, bay area

CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

",generalinfo,"id_restaurant, food_type, city","geographic, generalinfo, location"
olympics,What is the name of the game in which the oldest Olympian has ever participated?,SELECT t1.games_name FROM games as t1 inner JOIN games_competitor as t2 ON t1.id = t2.games_id ORDER BY t2.age LIMIT 1,"CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

","CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `medal` (
  id INTEGER,
  medal_name TEXT
);
Sample rows from `medal`:
1, Gold
2, Silver
3, Bronze

CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `sport` (
  id INTEGER,
  sport_name TEXT
);
Sample rows from `sport`:
1, Aeronautics
2, Alpine Skiing
3, Alpinism

CREATE TABLE `event` (
  id INTEGER,
  sport_id INTEGER REFERENCES sport(id),
  event_name TEXT
);
Sample rows from `event`:
1, 9, Basketball Men's Basketball
2, 33, Judo Men's Extra-Lightweight
3, 25, Football Men's Football

CREATE TABLE `competitor_event` (
  event_id INTEGER REFERENCES event(id),
  competitor_id INTEGER REFERENCES games_competitor(id),
  medal_id INTEGER REFERENCES medal(id)
);
Sample rows from `competitor_event`:
1, 1, 4
2, 2, 4
3, 3, 4

","games, games_competitor","games.games_name, games.id, games_competitor.games_id, games_competitor.age","city, games, games_city, medal, noc_region, person, games_competitor, person_region, sport, event, competitor_event"
ice_hockey_draft,"Among all goals scored by Calgary Hitmen in the 2007-2008 season, identify the percentage scored by Ian Schultz.",SELECT cast(SUM(case when t2.playername = 'Ian Schultz' then t1.g else 0 end) as real) * 100 / SUM(t1.g) FROM seasonstatus as t1 inner JOIN playerinfo as t2 ON t1.eliteid = t2.eliteid WHERE t1.SEasON = '2007-2008' AND t1.team = 'Calgary Hitmen',"CREATE TABLE `seasonstatus` (
  ELITEID INTEGER REFERENCES PlayerInfo(ELITEID),
  SEASON TEXT,
  TEAM TEXT,
  LEAGUE TEXT,
  GAMETYPE TEXT,
  GP INTEGER,
  G INTEGER,
  A INTEGER,
  P INTEGER,
  PIM INTEGER,
  PLUSMINUS INTEGER
);
Sample rows from `seasonstatus`:
3667, 1997-1998, Rimouski Oceanic, QMJHL, Regular Season, 58, 44, 71, 115, 117, 27
3667, 1997-1998, Rimouski Oceanic, QMJHL, Playoffs, 18, 15, 26, 41, 46, 4
3667, 1997-1998, Canada U20, WJC-20, Regular Season, 7, 1, 1, 2, 4, 0

CREATE TABLE `playerinfo` (
  ELITEID INTEGER,
  PlayerName TEXT,
  birthdate TEXT,
  birthyear DATE,
  birthmonth INTEGER,
  birthday INTEGER,
  birthplace TEXT,
  nation TEXT,
  height INTEGER REFERENCES height_info(height_id),
  weight INTEGER REFERENCES weight_info(weight_id),
  position_info TEXT,
  shoots TEXT,
  draftyear INTEGER,
  draftround INTEGER,
  overall INTEGER,
  overallby TEXT,
  CSS_rank INTEGER,
  sum_7yr_GP INTEGER,
  sum_7yr_TOI INTEGER,
  GP_greater_than_0 TEXT
);
Sample rows from `playerinfo`:
9, David Bornhammar, 1981-06-15, 1981, 6, 15, Lidingo, SWE, Sweden, 73, 198, D, L, 1999, 7, 192, Washington Capitals, 192, 0, 0, no
18, David Printz, 1980-07-24, 1980, 7, 24, Stockholm, SWE, Sweden, 76, 220, D, L, 2001, 7, 225, Philadelphia Flyers, 176, 13, 84, yes
27, Yared Hagos, 1983-03-27, 1983, 3, 27, Stockholm, SWE, Sweden, 73, 218, C, L, 2001, 3, 70, Dallas Stars, 24, 0, 0, no

","CREATE TABLE `height_info` (
  height_id INTEGER,
  height_in_cm INTEGER,
  height_in_inch TEXT
);
Sample rows from `height_info`:
65, 165, 5'5""
67, 170, 5'7""
68, 172, 5'8""

CREATE TABLE `weight_info` (
  weight_id INTEGER,
  weight_in_kg INTEGER,
  weight_in_lbs INTEGER
);
Sample rows from `weight_info`:
154, 70, 154
159, 72, 159
161, 73, 161

CREATE TABLE `PlayerInfo` (
  ELITEID INTEGER,
  PlayerName TEXT,
  birthdate TEXT,
  birthyear DATE,
  birthmonth INTEGER,
  birthday INTEGER,
  birthplace TEXT,
  nation TEXT,
  height INTEGER REFERENCES height_info(height_id),
  weight INTEGER REFERENCES weight_info(weight_id),
  position_info TEXT,
  shoots TEXT,
  draftyear INTEGER,
  draftround INTEGER,
  overall INTEGER,
  overallby TEXT,
  CSS_rank INTEGER,
  sum_7yr_GP INTEGER,
  sum_7yr_TOI INTEGER,
  GP_greater_than_0 TEXT
);
Sample rows from `PlayerInfo`:
9, David Bornhammar, 1981-06-15, 1981, 6, 15, Lidingo, SWE, Sweden, 73, 198, D, L, 1999, 7, 192, Washington Capitals, 192, 0, 0, no
18, David Printz, 1980-07-24, 1980, 7, 24, Stockholm, SWE, Sweden, 76, 220, D, L, 2001, 7, 225, Philadelphia Flyers, 176, 13, 84, yes
27, Yared Hagos, 1983-03-27, 1983, 3, 27, Stockholm, SWE, Sweden, 73, 218, C, L, 2001, 3, 70, Dallas Stars, 24, 0, 0, no

CREATE TABLE `SeasonStatus` (
  ELITEID INTEGER REFERENCES PlayerInfo(ELITEID),
  SEASON TEXT,
  TEAM TEXT,
  LEAGUE TEXT,
  GAMETYPE TEXT,
  GP INTEGER,
  G INTEGER,
  A INTEGER,
  P INTEGER,
  PIM INTEGER,
  PLUSMINUS INTEGER
);
Sample rows from `SeasonStatus`:
3667, 1997-1998, Rimouski Oceanic, QMJHL, Regular Season, 58, 44, 71, 115, 117, 27
3667, 1997-1998, Rimouski Oceanic, QMJHL, Playoffs, 18, 15, 26, 41, 46, 4
3667, 1997-1998, Canada U20, WJC-20, Regular Season, 7, 1, 1, 2, 4, 0

","seasonstatus, playerinfo","playerinfo.playername, seasonstatus.g, seasonstatus.eliteid, playerinfo.eliteid, seasonstatus.SEasON, seasonstatus.team","height_info, weight_info, PlayerInfo, SeasonStatus"
books,"List the author's and publisher's name of the book published on July 10, 1997.","SELECT t3.author_name, t4.publisher_name FROM book as t1 inner JOIN book_author as t2 ON t1.book_id = t2.book_id inner JOIN author as t3 ON t3.author_id = t2.author_id inner JOIN publisher as t4 ON t4.publisher_id = t1.publisher_id WHERE t1.publication_date = '1997-07-10'","CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","book, book_author, author, publisher","author.author_name, publisher.publisher_name, book.book_id, book_author.book_id, author.author_id, book_author.author_id, publisher.publisher_id, book.publisher_id, book.publication_date","address_status, author, book_language, country, address, customer, customer_address, order_status, publisher, book, book_author, shipping_method, cust_order, sqlite_sequence, order_history, order_line"
coinmarketcap,When is Devcoin most valuable in the market?,SELECT t2.date FROM coins as t1 inner JOIN historical as t2 ON t1.id = t2.coin_id WHERE t1.name = 'Devcoin' ORDER BY t2.market_cap DESC LIMIT 1,"CREATE TABLE `coins` (
  id INTEGER,
  name TEXT,
  slug TEXT,
  symbol TEXT,
  status TEXT,
  category TEXT,
  description TEXT,
  subreddit TEXT,
  notice TEXT,
  tags TEXT,
  tag_names TEXT,
  website TEXT,
  platform_id INTEGER,
  date_added TEXT,
  date_launched TEXT
);
Sample rows from `coins`:
1, Bitcoin, bitcoin, BTC, active, coin, ## **What Is Bitcoin (BTC)?**\n\nBitcoin is a decentralized cryptocurrency originally described in a 2008 [whitepaper](https://coinmarketcap.com/alexandria/glossary/whitepaper) by a person, or group of people, using the alias [Satoshi Nakamoto](https://co, bitcoin, None, mineable, pow, sha-256, store-of-value, state-channels, coinbase-ventures-portfolio, three-arrows-capital-portfolio, polychain-capital-portfolio, binance-labs-portfolio, arrington-xrp-capital, blockchain-capital-portfolio, boostvc-portfolio, cms-holdings-, Mineable, PoW, SHA-256, Store of Value, State channels, Coinbase Ventures Portfolio, Three Arrows Capital Portfolio, Polychain Capital Portfolio, Binance Labs Portfolio, Arrington XRP capital, Blockchain Capital Portfolio, BoostVC Portfolio, CMS Holdings , https://bitcoin.org/, None, 2013-04-28T00:00:00.000Z, None
2, Litecoin, litecoin, LTC, active, coin, ## What Is Litecoin (LTC)?\n\nLitecoin (LTC) is a cryptocurrency that was designed to provide fast, secure and low-cost payments by leveraging the unique properties of [blockchain](https://coinmarketcap.com/alexandria/glossary/blockchain) technology. \n\n, litecoin, None, mineable, pow, scrypt, medium-of-exchange, binance-chain, Mineable, PoW, Scrypt, Medium of Exchange, Binance Chain, https://litecoin.org/, None, 2013-04-28T00:00:00.000Z, None
3, Namecoin, namecoin, NMC, active, coin, Namecoin (NMC) is a cryptocurrency . Users are able to generate NMC through the process of mining. Namecoin has a current supply of 14,736,400. The last known price of Namecoin is 2.14833562 USD and is up 0.40 over the last 24 hours. It is currently tradi, namecoin, None, mineable, pow, sha-256, platform, Mineable, PoW, SHA-256, Platform, https://www.namecoin.org/, None, 2013-04-28T00:00:00.000Z, None

CREATE TABLE `historical` (
  date DATE,
  coin_id INTEGER,
  cmc_rank INTEGER,
  market_cap REAL,
  price REAL,
  open REAL,
  high REAL,
  low REAL,
  close REAL,
  time_high TEXT,
  time_low TEXT,
  volume_24h REAL,
  percent_change_1h REAL,
  percent_change_24h REAL,
  percent_change_7d REAL,
  circulating_supply REAL,
  total_supply REAL,
  max_supply REAL,
  num_market_pairs INTEGER
);
Sample rows from `historical`:
2013-04-28, 1, 1, 1488566971.9558687, 134.210021972656, None, None, None, None, None, None, 0.0, 0.639231, None, None, 11091325.0, 11091325.0, 21000000.0, None
2013-04-28, 2, 2, 74637021.56790735, 4.34840488433838, None, None, None, None, None, None, 0.0, 0.799273, None, None, 17164230.0, 17164230.0, 84000000.0, None
2013-04-28, 5, 3, 7250186.647688276, 0.386524856090546, None, None, None, None, None, None, 0.0, -0.934763, None, None, 18757362.0, 18757362.0, None, None

","CREATE TABLE `coins` (
  id INTEGER,
  name TEXT,
  slug TEXT,
  symbol TEXT,
  status TEXT,
  category TEXT,
  description TEXT,
  subreddit TEXT,
  notice TEXT,
  tags TEXT,
  tag_names TEXT,
  website TEXT,
  platform_id INTEGER,
  date_added TEXT,
  date_launched TEXT
);
Sample rows from `coins`:
1, Bitcoin, bitcoin, BTC, active, coin, ## **What Is Bitcoin (BTC)?**\n\nBitcoin is a decentralized cryptocurrency originally described in a 2008 [whitepaper](https://coinmarketcap.com/alexandria/glossary/whitepaper) by a person, or group of people, using the alias [Satoshi Nakamoto](https://co, bitcoin, None, mineable, pow, sha-256, store-of-value, state-channels, coinbase-ventures-portfolio, three-arrows-capital-portfolio, polychain-capital-portfolio, binance-labs-portfolio, arrington-xrp-capital, blockchain-capital-portfolio, boostvc-portfolio, cms-holdings-, Mineable, PoW, SHA-256, Store of Value, State channels, Coinbase Ventures Portfolio, Three Arrows Capital Portfolio, Polychain Capital Portfolio, Binance Labs Portfolio, Arrington XRP capital, Blockchain Capital Portfolio, BoostVC Portfolio, CMS Holdings , https://bitcoin.org/, None, 2013-04-28T00:00:00.000Z, None
2, Litecoin, litecoin, LTC, active, coin, ## What Is Litecoin (LTC)?\n\nLitecoin (LTC) is a cryptocurrency that was designed to provide fast, secure and low-cost payments by leveraging the unique properties of [blockchain](https://coinmarketcap.com/alexandria/glossary/blockchain) technology. \n\n, litecoin, None, mineable, pow, scrypt, medium-of-exchange, binance-chain, Mineable, PoW, Scrypt, Medium of Exchange, Binance Chain, https://litecoin.org/, None, 2013-04-28T00:00:00.000Z, None
3, Namecoin, namecoin, NMC, active, coin, Namecoin (NMC) is a cryptocurrency . Users are able to generate NMC through the process of mining. Namecoin has a current supply of 14,736,400. The last known price of Namecoin is 2.14833562 USD and is up 0.40 over the last 24 hours. It is currently tradi, namecoin, None, mineable, pow, sha-256, platform, Mineable, PoW, SHA-256, Platform, https://www.namecoin.org/, None, 2013-04-28T00:00:00.000Z, None

CREATE TABLE `historical` (
  date DATE,
  coin_id INTEGER,
  cmc_rank INTEGER,
  market_cap REAL,
  price REAL,
  open REAL,
  high REAL,
  low REAL,
  close REAL,
  time_high TEXT,
  time_low TEXT,
  volume_24h REAL,
  percent_change_1h REAL,
  percent_change_24h REAL,
  percent_change_7d REAL,
  circulating_supply REAL,
  total_supply REAL,
  max_supply REAL,
  num_market_pairs INTEGER
);
Sample rows from `historical`:
2013-04-28, 1, 1, 1488566971.9558687, 134.210021972656, None, None, None, None, None, None, 0.0, 0.639231, None, None, 11091325.0, 11091325.0, 21000000.0, None
2013-04-28, 2, 2, 74637021.56790735, 4.34840488433838, None, None, None, None, None, None, 0.0, 0.799273, None, None, 17164230.0, 17164230.0, 84000000.0, None
2013-04-28, 5, 3, 7250186.647688276, 0.386524856090546, None, None, None, None, None, None, 0.0, -0.934763, None, None, 18757362.0, 18757362.0, None, None

","coins, historical","historical.date, coins.id, historical.coin_id, coins.name, historical.market_cap","coins, historical"
computer_student,Calculate the percentage of high-level undergraduate course.,SELECT cast(SUM(case  when courselevel = 'Level_400' then 1 else 0 end) as real) * 100 / COUNT(*) as per FROM course,"CREATE TABLE `course` (
  course_id INTEGER,
  courseLevel TEXT
);
Sample rows from `course`:
0, Level_500
1, Level_500
2, Level_500

","CREATE TABLE `course` (
  course_id INTEGER,
  courseLevel TEXT
);
Sample rows from `course`:
0, Level_500
1, Level_500
2, Level_500

CREATE TABLE `person` (
  p_id INTEGER,
  professor INTEGER,
  student INTEGER,
  hasPosition TEXT,
  inPhase TEXT,
  yearsInProgram TEXT
);
Sample rows from `person`:
3, 0, 1, 0, 0, 0
4, 0, 1, 0, 0, 0
5, 1, 0, Faculty, 0, 0

CREATE TABLE `advisedBy` (
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id),
  p_id_dummy INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `advisedBy`:
96, 5
118, 5
183, 5

CREATE TABLE `taughtBy` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `taughtBy`:
0, 40
1, 40
2, 180

",course,courselevel,"course, person, advisedBy, taughtBy"
retail_complains,What are the issues of the complains of male clients and products from age 25 and below?,SELECT DISTINCT t2.issue FROM client as t1 inner JOIN events as t2 ON t1.client_id = t2.client_id WHERE t1.sex = 'Male' AND t1.age < 25,"CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

","CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

","client, events","events.issue, client.client_id, events.client_id, client.sex, client.age","state, callcenterlogs, client, district, events, reviews"
sales,"Among the customers whose first name is Cameron, who bought the product in the most quantity?","SELECT t1.firstname, t1.lastname FROM customers as t1 inner JOIN sales as t2 ON t1.customerid = t2.customerid WHERE t1.firstname = 'Cameron' ORDER BY t2.quantity DESC LIMIT 1","CREATE TABLE `customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

CREATE TABLE `sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Employees`:
1, Abraham, e, Bennet
2, Reginald, l, Blotchet-Halls
3, Cheryl, a, Carson

CREATE TABLE `Products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

CREATE TABLE `Sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `Sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

","customers, sales","customers.firstname, customers.lastname, customers.customerid, sales.customerid, sales.quantity","Customers, Employees, Products, Sales"
retail_world,Write down the notes of employee with the highest salary.,SELECT notes FROM employees WHERE salary = ( SELECT MAX(salary) FROM employees ),"CREATE TABLE `employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

",employees,"notes, salary","sqlite_sequence, Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails"
menu,"Name the dishes that cost 180,000.",SELECT t1.name FROM dish as t1 inner JOIN menuitem as t2 ON t1.id = t2.dish_id WHERE t2.price = 180000,"CREATE TABLE `dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

CREATE TABLE `menuitem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `menuitem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

","CREATE TABLE `Dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `Dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

CREATE TABLE `Menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `Menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

CREATE TABLE `MenuPage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `MenuPage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

CREATE TABLE `MenuItem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `MenuItem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

","dish, menuitem","dish.name, dish.id, menuitem.dish_id, menuitem.price","Dish, Menu, MenuPage, MenuItem"
restaurant,List all of the restaurant addresses from an unknown region.,SELECT t2.street_name FROM geographic as t1 inner JOIN location as t2 ON t1.city = t2.city WHERE t1.region = 'unknown',"CREATE TABLE `geographic` (
  city TEXT PRIMARY KEY,
  county TEXT,
  region TEXT
);
Sample rows from `geographic`:
alameda, alameda county, bay area
alamo, contra costa county, bay area
albany, alameda county, bay area

CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

","CREATE TABLE `geographic` (
  city TEXT PRIMARY KEY,
  county TEXT,
  region TEXT
);
Sample rows from `geographic`:
alameda, alameda county, bay area
alamo, contra costa county, bay area
albany, alameda county, bay area

CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

","geographic, location","location.street_name, geographic.city, location.city, geographic.region","geographic, generalinfo, location"
citeseer,What is the total number of word cited under that class labelled 'AI'?,SELECT COUNT(DISTINCT t2.word_cited_id) FROM paper as t1 inner JOIN content as t2 ON t1.paper_id = t2.paper_id WHERE t1.class_label = 'AI',"CREATE TABLE `paper` (
  paper_id TEXT PRIMARY KEY,
  class_label TEXT
);
Sample rows from `paper`:
100157, Agents
100598, IR
101570, ML

CREATE TABLE `content` (
  paper_id TEXT PRIMARY KEY REFERENCES paper(paper_id),
  word_cited_id TEXT PRIMARY KEY
);
Sample rows from `content`:
100157, word1163
100157, word1509
100157, word1614

","CREATE TABLE `cites` (
  cited_paper_id TEXT PRIMARY KEY,
  citing_paper_id TEXT PRIMARY KEY
);
Sample rows from `cites`:
100157, 100157
100157, 364207
100157, 38848

CREATE TABLE `paper` (
  paper_id TEXT PRIMARY KEY,
  class_label TEXT
);
Sample rows from `paper`:
100157, Agents
100598, IR
101570, ML

CREATE TABLE `content` (
  paper_id TEXT PRIMARY KEY REFERENCES paper(paper_id),
  word_cited_id TEXT PRIMARY KEY
);
Sample rows from `content`:
100157, word1163
100157, word1509
100157, word1614

","paper, content","content.word_cited_id, paper.paper_id, content.paper_id, paper.class_label","cites, paper, content"
restaurant,What percentage of streets named 11th Street are in Alameda County?,"SELECT cast(SUM(iif(t1.street_name = '11th st', 1, 0)) as real) * 100 / COUNT(t1.id_restaurant) FROM location as t1 inner JOIN geographic as t2 ON t1.city = t2.city WHERE t2.county = 'alameda county'","CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

CREATE TABLE `geographic` (
  city TEXT PRIMARY KEY,
  county TEXT,
  region TEXT
);
Sample rows from `geographic`:
alameda, alameda county, bay area
alamo, contra costa county, bay area
albany, alameda county, bay area

","CREATE TABLE `geographic` (
  city TEXT PRIMARY KEY,
  county TEXT,
  region TEXT
);
Sample rows from `geographic`:
alameda, alameda county, bay area
alamo, contra costa county, bay area
albany, alameda county, bay area

CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

","location, geographic","location.street_name, location.id_restaurant, location.city, geographic.city, geographic.county","geographic, generalinfo, location"
chicago_crime,Which commander has had to deal with more cases of criminal sexual abuse?,SELECT t3.commander FROM iucr as t1 inner JOIN crime as t2 ON t2.iucr_no = t1.iucr_no inner JOIN district as t3 ON t3.district_no = t2.district_no WHERE t1.secondary_description = 'CRIMINAL SEXUAL ABUSE' GROUP BY t3.commander ORDER BY COUNT(t1.secondary_description) DESC LIMIT 1,"CREATE TABLE `iucr` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `iucr`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

CREATE TABLE `district` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `district`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

","CREATE TABLE `Community_Area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `Community_Area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `District` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `District`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `FBI_Code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `FBI_Code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `IUCR` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `IUCR`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `Neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `Neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `Ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `Ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `Crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `Crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","iucr, crime, district","district.commander, crime.iucr_no, iucr.iucr_no, district.district_no, crime.district_no, iucr.secondary_description","Community_Area, District, FBI_Code, IUCR, Neighborhood, Ward, Crime"
ice_hockey_draft,How many playoffs did Per Mars participate in?,SELECT SUM(t2.gp) FROM playerinfo as t1 inner JOIN seasonstatus as t2 ON t1.eliteid = t2.eliteid WHERE t1.playername = 'Per Mars' AND t2.gametype = 'Playoffs',"CREATE TABLE `playerinfo` (
  ELITEID INTEGER,
  PlayerName TEXT,
  birthdate TEXT,
  birthyear DATE,
  birthmonth INTEGER,
  birthday INTEGER,
  birthplace TEXT,
  nation TEXT,
  height INTEGER REFERENCES height_info(height_id),
  weight INTEGER REFERENCES weight_info(weight_id),
  position_info TEXT,
  shoots TEXT,
  draftyear INTEGER,
  draftround INTEGER,
  overall INTEGER,
  overallby TEXT,
  CSS_rank INTEGER,
  sum_7yr_GP INTEGER,
  sum_7yr_TOI INTEGER,
  GP_greater_than_0 TEXT
);
Sample rows from `playerinfo`:
9, David Bornhammar, 1981-06-15, 1981, 6, 15, Lidingo, SWE, Sweden, 73, 198, D, L, 1999, 7, 192, Washington Capitals, 192, 0, 0, no
18, David Printz, 1980-07-24, 1980, 7, 24, Stockholm, SWE, Sweden, 76, 220, D, L, 2001, 7, 225, Philadelphia Flyers, 176, 13, 84, yes
27, Yared Hagos, 1983-03-27, 1983, 3, 27, Stockholm, SWE, Sweden, 73, 218, C, L, 2001, 3, 70, Dallas Stars, 24, 0, 0, no

CREATE TABLE `seasonstatus` (
  ELITEID INTEGER REFERENCES PlayerInfo(ELITEID),
  SEASON TEXT,
  TEAM TEXT,
  LEAGUE TEXT,
  GAMETYPE TEXT,
  GP INTEGER,
  G INTEGER,
  A INTEGER,
  P INTEGER,
  PIM INTEGER,
  PLUSMINUS INTEGER
);
Sample rows from `seasonstatus`:
3667, 1997-1998, Rimouski Oceanic, QMJHL, Regular Season, 58, 44, 71, 115, 117, 27
3667, 1997-1998, Rimouski Oceanic, QMJHL, Playoffs, 18, 15, 26, 41, 46, 4
3667, 1997-1998, Canada U20, WJC-20, Regular Season, 7, 1, 1, 2, 4, 0

","CREATE TABLE `height_info` (
  height_id INTEGER,
  height_in_cm INTEGER,
  height_in_inch TEXT
);
Sample rows from `height_info`:
65, 165, 5'5""
67, 170, 5'7""
68, 172, 5'8""

CREATE TABLE `weight_info` (
  weight_id INTEGER,
  weight_in_kg INTEGER,
  weight_in_lbs INTEGER
);
Sample rows from `weight_info`:
154, 70, 154
159, 72, 159
161, 73, 161

CREATE TABLE `PlayerInfo` (
  ELITEID INTEGER,
  PlayerName TEXT,
  birthdate TEXT,
  birthyear DATE,
  birthmonth INTEGER,
  birthday INTEGER,
  birthplace TEXT,
  nation TEXT,
  height INTEGER REFERENCES height_info(height_id),
  weight INTEGER REFERENCES weight_info(weight_id),
  position_info TEXT,
  shoots TEXT,
  draftyear INTEGER,
  draftround INTEGER,
  overall INTEGER,
  overallby TEXT,
  CSS_rank INTEGER,
  sum_7yr_GP INTEGER,
  sum_7yr_TOI INTEGER,
  GP_greater_than_0 TEXT
);
Sample rows from `PlayerInfo`:
9, David Bornhammar, 1981-06-15, 1981, 6, 15, Lidingo, SWE, Sweden, 73, 198, D, L, 1999, 7, 192, Washington Capitals, 192, 0, 0, no
18, David Printz, 1980-07-24, 1980, 7, 24, Stockholm, SWE, Sweden, 76, 220, D, L, 2001, 7, 225, Philadelphia Flyers, 176, 13, 84, yes
27, Yared Hagos, 1983-03-27, 1983, 3, 27, Stockholm, SWE, Sweden, 73, 218, C, L, 2001, 3, 70, Dallas Stars, 24, 0, 0, no

CREATE TABLE `SeasonStatus` (
  ELITEID INTEGER REFERENCES PlayerInfo(ELITEID),
  SEASON TEXT,
  TEAM TEXT,
  LEAGUE TEXT,
  GAMETYPE TEXT,
  GP INTEGER,
  G INTEGER,
  A INTEGER,
  P INTEGER,
  PIM INTEGER,
  PLUSMINUS INTEGER
);
Sample rows from `SeasonStatus`:
3667, 1997-1998, Rimouski Oceanic, QMJHL, Regular Season, 58, 44, 71, 115, 117, 27
3667, 1997-1998, Rimouski Oceanic, QMJHL, Playoffs, 18, 15, 26, 41, 46, 4
3667, 1997-1998, Canada U20, WJC-20, Regular Season, 7, 1, 1, 2, 4, 0

","playerinfo, seasonstatus","seasonstatus.gp, playerinfo.eliteid, seasonstatus.eliteid, playerinfo.playername, seasonstatus.gametype","height_info, weight_info, PlayerInfo, SeasonStatus"
menu,"How many dishes are there on the menu ""Zentral Theater Terrace""?",SELECT COUNT(*) FROM menu WHERE name = 'Zentral Theater Terrace',"CREATE TABLE `menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

","CREATE TABLE `Dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `Dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

CREATE TABLE `Menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `Menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

CREATE TABLE `MenuPage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `MenuPage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

CREATE TABLE `MenuItem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `MenuItem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

",menu,name,"Dish, Menu, MenuPage, MenuItem"
citeseer,"Among all the citation, what is the percentage of paper ID under the Agents classification?",SELECT cast(COUNT(case when class_label = 'Agents' then paper_id else null end) as real) * 100 / COUNT(paper_id) FROM paper,"CREATE TABLE `paper` (
  paper_id TEXT PRIMARY KEY,
  class_label TEXT
);
Sample rows from `paper`:
100157, Agents
100598, IR
101570, ML

","CREATE TABLE `cites` (
  cited_paper_id TEXT PRIMARY KEY,
  citing_paper_id TEXT PRIMARY KEY
);
Sample rows from `cites`:
100157, 100157
100157, 364207
100157, 38848

CREATE TABLE `paper` (
  paper_id TEXT PRIMARY KEY,
  class_label TEXT
);
Sample rows from `paper`:
100157, Agents
100598, IR
101570, ML

CREATE TABLE `content` (
  paper_id TEXT PRIMARY KEY REFERENCES paper(paper_id),
  word_cited_id TEXT PRIMARY KEY
);
Sample rows from `content`:
100157, word1163
100157, word1509
100157, word1614

",paper,"class_label, paper_id","cites, paper, content"
airline,Tell the number of fights landed earlier on Miami Airport on 2018/8/12.,SELECT COUNT(*) FROM airports as t1 inner JOIN airlines as t2 ON t1.code = t2.dest WHERE t2.fl_date = '2018/8/12' AND t2.dest = 'MIA' AND t2.arr_delay < 0,"CREATE TABLE `airports` (
  Code TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `airports`:
01A, Afognak Lake, AK: Afognak Lake Airport
03A, Granite Mountain, AK: Bear Creek Mining Strip
04A, Lik, AK: Lik Mining Camp

CREATE TABLE `airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

","CREATE TABLE `Air Carriers` (
  Code INTEGER,
  Description TEXT
);
Sample rows from `Air Carriers`:
19031, Mackey International Inc.: MAC
19032, Munz Northern Airlines Inc.: XY
19033, Cochise Airlines Inc.: COC

CREATE TABLE `Airports` (
  Code TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `Airports`:
01A, Afognak Lake, AK: Afognak Lake Airport
03A, Granite Mountain, AK: Bear Creek Mining Strip
04A, Lik, AK: Lik Mining Camp

CREATE TABLE `Airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `Airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

","airports, airlines","airports.code, airlines.dest, airlines.fl_date, airlines.arr_delay","Air Carriers, Airports, Airlines"
computer_student,Describe the course level and list of person IDs who taught course ID of 147.,"SELECT t1.courselevel, t1.course_id FROM course as t1 inner JOIN taughtby as t2 ON t1.course_id = t2.course_id WHERE t2.p_id = 141","CREATE TABLE `course` (
  course_id INTEGER,
  courseLevel TEXT
);
Sample rows from `course`:
0, Level_500
1, Level_500
2, Level_500

CREATE TABLE `taughtby` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `taughtby`:
0, 40
1, 40
2, 180

","CREATE TABLE `course` (
  course_id INTEGER,
  courseLevel TEXT
);
Sample rows from `course`:
0, Level_500
1, Level_500
2, Level_500

CREATE TABLE `person` (
  p_id INTEGER,
  professor INTEGER,
  student INTEGER,
  hasPosition TEXT,
  inPhase TEXT,
  yearsInProgram TEXT
);
Sample rows from `person`:
3, 0, 1, 0, 0, 0
4, 0, 1, 0, 0, 0
5, 1, 0, Faculty, 0, 0

CREATE TABLE `advisedBy` (
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id),
  p_id_dummy INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `advisedBy`:
96, 5
118, 5
183, 5

CREATE TABLE `taughtBy` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `taughtBy`:
0, 40
1, 40
2, 180

","course, taughtby","course.courselevel, course.course_id, taughtby.course_id, taughtby.p_id","course, person, advisedBy, taughtBy"
law_episode,What role was Julia Roberts nominated for?,SELECT t2.role FROM person as t1 inner JOIN award as t2 ON t1.person_id = t2.person_id WHERE t2.result = 'Nominee' AND t1.name = 'Julia Roberts',"CREATE TABLE `person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

CREATE TABLE `award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  series TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  person_id TEXT REFERENCES Person(person_id),
  role TEXT,
  result TEXT
);
Sample rows from `award`:
258, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0937725, None, Winner
259, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0792309, None, Winner
260, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0049569, None, Winner

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
tt0629239, nun
tt0629239, priest
tt0629420, police officer

CREATE TABLE `Person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  series TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  person_id TEXT REFERENCES Person(person_id),
  role TEXT,
  result TEXT
);
Sample rows from `Award`:
258, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0937725, None, Winner
259, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0792309, None, Winner
260, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0049569, None, Winner

CREATE TABLE `Credit` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  person_id TEXT PRIMARY KEY REFERENCES Person(person_id),
  category TEXT,
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
tt0629204, nm0226352, Additional Crew, technical advisor, true
tt0629204, nm0506974, Additional Crew, production accountant, true
tt0629204, nm4103116, Additional Crew, production accountant, true

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
tt0629204, 10, 36, 17.7
tt0629204, 9, 39, 19.2
tt0629204, 8, 64, 31.5

","person, award","award.role, person.person_id, award.person_id, award.result, person.name","Episode, Keyword, Person, Award, Credit, Vote"
software_company,"How many of the first 60,000 customers from the place with the highest average income per month have sent a true response to the incentive mailing sent by the marketing department?",SELECT COUNT(t1.id) FROM customers as t1 inner JOIN mailings1_2 as t2 ON t1.id = t2.REFid inner JOIN demog as t3 ON t1.GEOid = t3.GEOid WHERE t2.response = 'true' ORDER BY t3.income_k DESC LIMIT 1,"CREATE TABLE `customers` (
  ID INTEGER,
  SEX TEXT,
  MARITAL_STATUS TEXT,
  GEOID INTEGER REFERENCES Demog(None),
  EDUCATIONNUM INTEGER,
  OCCUPATION TEXT,
  age INTEGER
);
Sample rows from `customers`:
0, Male, Never-married, 61, 7, Machine-op-inspct, 62
1, Male, Married-civ-spouse, 70, 3, Handlers-cleaners, 78
2, Male, Never-married, 53, 7, Machine-op-inspct, 69

CREATE TABLE `mailings1_2` (
  REFID INTEGER REFERENCES Customers(None),
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `mailings1_2`:
0, 2007-02-01 12:00:00.0, false
1, 2007-02-01 12:00:00.0, false
2, 2007-02-01 12:00:00.0, false

CREATE TABLE `demog` (
  GEOID INTEGER,
  INHABITANTS_K REAL,
  INCOME_K REAL,
  A_VAR1 REAL,
  A_VAR2 REAL,
  A_VAR3 REAL,
  A_VAR4 REAL,
  A_VAR5 REAL,
  A_VAR6 REAL,
  A_VAR7 REAL,
  A_VAR8 REAL,
  A_VAR9 REAL,
  A_VAR10 REAL,
  A_VAR11 REAL,
  A_VAR12 REAL,
  A_VAR13 REAL,
  A_VAR14 REAL,
  A_VAR15 REAL,
  A_VAR16 REAL,
  A_VAR17 REAL,
  A_VAR18 REAL
);
Sample rows from `demog`:
0, 30.046, 2631.47, 6.084, 5.79, 8.595, 3.935, 6.362, 8.626, 4.624, 8.324, 5.233, 6.232, 5.205, 8.231, 6.746, 8.679, 5.292, 3.5, 5.512, 5.783
1, 36.25, 3012.75, 4.604, 8.309, 6.007, 5.938, 8.773, 3.579, 6.349, 4.694, 6.884, 7.062, 7.319, 3.72, 6.405, 7.202, 4.932, 7.969, 8.15, 5.633
2, 47.645, 2192.41, 4.911, 8.557, 5.934, 6.494, 9.172, 3.202, 6.157, 4.822, 7.942, 7.901, 7.928, 2.33, 6.029, 6.455, 4.72, 8.564, 8.342, 4.938

","CREATE TABLE `Demog` (
  GEOID INTEGER,
  INHABITANTS_K REAL,
  INCOME_K REAL,
  A_VAR1 REAL,
  A_VAR2 REAL,
  A_VAR3 REAL,
  A_VAR4 REAL,
  A_VAR5 REAL,
  A_VAR6 REAL,
  A_VAR7 REAL,
  A_VAR8 REAL,
  A_VAR9 REAL,
  A_VAR10 REAL,
  A_VAR11 REAL,
  A_VAR12 REAL,
  A_VAR13 REAL,
  A_VAR14 REAL,
  A_VAR15 REAL,
  A_VAR16 REAL,
  A_VAR17 REAL,
  A_VAR18 REAL
);
Sample rows from `Demog`:
0, 30.046, 2631.47, 6.084, 5.79, 8.595, 3.935, 6.362, 8.626, 4.624, 8.324, 5.233, 6.232, 5.205, 8.231, 6.746, 8.679, 5.292, 3.5, 5.512, 5.783
1, 36.25, 3012.75, 4.604, 8.309, 6.007, 5.938, 8.773, 3.579, 6.349, 4.694, 6.884, 7.062, 7.319, 3.72, 6.405, 7.202, 4.932, 7.969, 8.15, 5.633
2, 47.645, 2192.41, 4.911, 8.557, 5.934, 6.494, 9.172, 3.202, 6.157, 4.822, 7.942, 7.901, 7.928, 2.33, 6.029, 6.455, 4.72, 8.564, 8.342, 4.938

CREATE TABLE `mailings3` (
  REFID INTEGER,
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `mailings3`:
60000, 2007-07-01 12:00:00.0, false
60001, 2007-07-01 12:00:00.0, false
60002, 2007-07-01 12:00:00.0, false

CREATE TABLE `Customers` (
  ID INTEGER,
  SEX TEXT,
  MARITAL_STATUS TEXT,
  GEOID INTEGER REFERENCES Demog(None),
  EDUCATIONNUM INTEGER,
  OCCUPATION TEXT,
  age INTEGER
);
Sample rows from `Customers`:
0, Male, Never-married, 61, 7, Machine-op-inspct, 62
1, Male, Married-civ-spouse, 70, 3, Handlers-cleaners, 78
2, Male, Never-married, 53, 7, Machine-op-inspct, 69

CREATE TABLE `Mailings1_2` (
  REFID INTEGER REFERENCES Customers(None),
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `Mailings1_2`:
0, 2007-02-01 12:00:00.0, false
1, 2007-02-01 12:00:00.0, false
2, 2007-02-01 12:00:00.0, false

CREATE TABLE `Sales` (
  EVENTID INTEGER,
  REFID INTEGER REFERENCES Customers(None),
  EVENT_DATE DATETIME,
  AMOUNT REAL
);
Sample rows from `Sales`:
0, 0, 2006-12-21 12:00:00.0, 17.907
1, 0, 2006-12-25 12:00:00.0, 17.401
2, 0, 2007-01-26 12:00:00.0, 13.277

","customers, mailings1_2, demog","customers.id, mailings1_2.REFid, customers.GEOid, demog.GEOid, mailings1_2.response, demog.income_k","Demog, mailings3, Customers, Mailings1_2, Sales"
cs_semester,"For the professors who advise more than 2 students, which professor has a higher teaching ability? Give the full name.","SELECt t.first_name, t.last_name FROM ( SELECt t2.first_name, t2.last_name, t2.teachingability FROM ra as t1 inner JOIN prof as t2 ON t1.prof_id = t2.prof_id GROUP BY t1.prof_id HAVING COUNT(student_id) > 2 ) t ORDER BY t.teachingability DESC LIMIt 1","CREATE TABLE `ra` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `ra`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

CREATE TABLE `prof` (
  prof_id INTEGER,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  popularity INTEGER,
  teachingability INTEGER,
  graduate_from TEXT
);
Sample rows from `prof`:
1, Male, Nathaniel, Pigford, npigford0@hku.hk, 3, 5, University of Washington
2, Male, Zhihua, Zhou, zzhihua@hku.hk, 2, 1, Beijing Polytechnic University
3, Male, Ogdon, Zywicki, ozywicki2@hku.hk, 2, 2, University of Boston

","CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

CREATE TABLE `prof` (
  prof_id INTEGER,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  popularity INTEGER,
  teachingability INTEGER,
  graduate_from TEXT
);
Sample rows from `prof`:
1, Male, Nathaniel, Pigford, npigford0@hku.hk, 3, 5, University of Washington
2, Male, Zhihua, Zhou, zzhihua@hku.hk, 2, 1, Beijing Polytechnic University
3, Male, Ogdon, Zywicki, ozywicki2@hku.hk, 2, 2, University of Boston

CREATE TABLE `RA` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `RA`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

","ra, prof","prof.first_name, prof.last_name, prof.teachingability, ra.prof_id, prof.prof_id, student_id","course, prof, RA, registration, student"
food_inspection,"In 2016, which city has the highest number of establishments with the highest health and safety hazards?","SELECT t2.city FROM violations as t1 inner JOIN businesses as t2 ON t1.business_id = t2.business_id WHERE strftime('%Y', t1.`date`) = '2016' AND t1.risk_category = 'High Risk' GROUP BY t2.city ORDER BY COUNT(t2.city) DESC LIMIT 1","CREATE TABLE `violations` (
  business_id INTEGER REFERENCES businesses(business_id),
  date DATE,
  violation_type_id TEXT,
  risk_category TEXT,
  description TEXT
);
Sample rows from `violations`:
10, 2014-07-29, 103129, Moderate Risk, Insufficient hot water or running water
10, 2014-07-29, 103144, Low Risk, Unapproved or unmaintained equipment or utensils
10, 2014-01-14, 103119, Moderate Risk, Inadequate and inaccessible handwashing facilities

CREATE TABLE `businesses` (
  business_id INTEGER,
  name TEXT,
  address TEXT,
  city TEXT,
  postal_code TEXT,
  latitude REAL,
  longitude REAL,
  phone_number INTEGER,
  tax_code TEXT,
  business_certificate INTEGER,
  application_date DATE,
  owner_name TEXT,
  owner_address TEXT,
  owner_city TEXT,
  owner_state TEXT,
  owner_zip TEXT
);
Sample rows from `businesses`:
10, Tiramisu Kitchen, 033 Belden Pl, San Francisco, 94104, 37.7911, -122.404, None, H24, 779059, None, Tiramisu LLC, 33 Belden St, San Francisco, CA, 94104
24, OMNI S.F. Hotel - 2nd Floor Pantry, 500 California St, 2nd  Floor, San Francisco, 94104, 37.7929, -122.403, None, H24, 352312, None, OMNI San Francisco Hotel Corp, 500 California St, 2nd Floor, San Francisco, CA, 94104
31, Norman's Ice Cream and Freezes, 2801 Leavenworth St, San Francisco, 94133, 37.8072, -122.419, None, H24, 346882, None, Norman Antiforda, 2801 Leavenworth St, San Francisco, CA, 94133

","CREATE TABLE `businesses` (
  business_id INTEGER,
  name TEXT,
  address TEXT,
  city TEXT,
  postal_code TEXT,
  latitude REAL,
  longitude REAL,
  phone_number INTEGER,
  tax_code TEXT,
  business_certificate INTEGER,
  application_date DATE,
  owner_name TEXT,
  owner_address TEXT,
  owner_city TEXT,
  owner_state TEXT,
  owner_zip TEXT
);
Sample rows from `businesses`:
10, Tiramisu Kitchen, 033 Belden Pl, San Francisco, 94104, 37.7911, -122.404, None, H24, 779059, None, Tiramisu LLC, 33 Belden St, San Francisco, CA, 94104
24, OMNI S.F. Hotel - 2nd Floor Pantry, 500 California St, 2nd  Floor, San Francisco, 94104, 37.7929, -122.403, None, H24, 352312, None, OMNI San Francisco Hotel Corp, 500 California St, 2nd Floor, San Francisco, CA, 94104
31, Norman's Ice Cream and Freezes, 2801 Leavenworth St, San Francisco, 94133, 37.8072, -122.419, None, H24, 346882, None, Norman Antiforda, 2801 Leavenworth St, San Francisco, CA, 94133

CREATE TABLE `inspections` (
  business_id INTEGER REFERENCES businesses(business_id),
  score INTEGER,
  date DATE,
  type TEXT
);
Sample rows from `inspections`:
10, 92, 2014-01-14, Routine - Unscheduled
10, None, 2014-01-24, Reinspection/Followup
10, 94, 2014-07-29, Routine - Unscheduled

CREATE TABLE `violations` (
  business_id INTEGER REFERENCES businesses(business_id),
  date DATE,
  violation_type_id TEXT,
  risk_category TEXT,
  description TEXT
);
Sample rows from `violations`:
10, 2014-07-29, 103129, Moderate Risk, Insufficient hot water or running water
10, 2014-07-29, 103144, Low Risk, Unapproved or unmaintained equipment or utensils
10, 2014-01-14, 103119, Moderate Risk, Inadequate and inaccessible handwashing facilities

","violations, businesses","businesses.city, violations.business_id, businesses.business_id, violations.date, violations.risk_category","businesses, inspections, violations"
video_games,What is the total number of sales across all regions?,SELECt SUM(t.num_sales) * 100000 FROM region_sales t,"CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

","CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

",region_sales,region_sales.num_sales,"genre, game, platform, publisher, game_publisher, game_platform, region, region_sales"
authors,What is the ratio of author with affiliation and without affiliation?,SELECT cast(SUM(case when affiliation is null then 1 else 0 end) as real) / COUNT(*) FROM author,"CREATE TABLE `author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

","CREATE TABLE `Author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `Author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

CREATE TABLE `Conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

CREATE TABLE `Journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `Paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `Paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `PaperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `PaperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

",author,affiliation,"Author, Conference, Journal, Paper, PaperAuthor"
simpson_episodes,How many stars did most of the voters give in star score for the episode Lost Verizon?,SELECT t2.stars FROM episode as t1 inner JOIN vote as t2 ON t2.episode_id = t1.episode_id WHERE t1.title = 'Lost Verizon' ORDER BY t2.votes DESC LIMIT 1;,"CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","episode, vote","vote.stars, vote.episode_id, episode.episode_id, episode.title, vote.votes","Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
cs_semester,"Provide the number of students enrolled in the ""Statistical Learning"" course.",SELECT COUNT(t2.student_id) FROM course as t1 inner JOIN registration as t2 ON t1.course_id = t2.course_id WHERE t1.name = 'Statistical learning',"CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

","CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

CREATE TABLE `prof` (
  prof_id INTEGER,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  popularity INTEGER,
  teachingability INTEGER,
  graduate_from TEXT
);
Sample rows from `prof`:
1, Male, Nathaniel, Pigford, npigford0@hku.hk, 3, 5, University of Washington
2, Male, Zhihua, Zhou, zzhihua@hku.hk, 2, 1, Beijing Polytechnic University
3, Male, Ogdon, Zywicki, ozywicki2@hku.hk, 2, 2, University of Boston

CREATE TABLE `RA` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `RA`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

","course, registration","registration.student_id, course.course_id, registration.course_id, course.name","course, prof, RA, registration, student"
public_review_platform,How many businesses with the category named Stadiums & Arenas are rated highest?,SELECT COUNT(t1.business_id) FROM business_categories as t1 inner JOIN categories as t2 ON t1.category_id = t2.category_id inner JOIN business as t3 ON t1.business_id = t3.business_id WHERE t2.category_name = 'Stadiums & Arenas' AND t3.stars = ( SELECT MAX(stars) FROM business ),"CREATE TABLE `business_categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `business_categories`:
1, 8
1, 143
2, 18

CREATE TABLE `categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","business_categories, categories, business","business_categories.business_id, business_categories.category_id, categories.category_id, business.business_id, categories.category_name, business.stars, stars","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
movielens,What is the average number of casts of movies that are from the USA?,SELECT AVG(t2.cast_num) FROM movies as t1 inner JOIN movies2actors as t2 ON t1.movieid = t2.movieid WHERE t1.country = 'USA',"CREATE TABLE `movies` (
  movieid INTEGER,
  year INTEGER,
  isEnglish TEXT,
  country TEXT,
  runningtime INTEGER
);
Sample rows from `movies`:
1672052, 3, T, other, 2
1672111, 4, T, other, 2
1672580, 4, T, USA, 3

CREATE TABLE `movies2actors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  actorid INTEGER PRIMARY KEY REFERENCES actors(None),
  cast_num INTEGER
);
Sample rows from `movies2actors`:
1672580, 981535, 0
1672946, 1094968, 0
1673647, 149985, 0

","CREATE TABLE `users` (
  userid INTEGER,
  age TEXT,
  u_gender TEXT,
  occupation TEXT
);
Sample rows from `users`:
1, 1, F, 2
2, 56, M, 3
3, 25, M, 2

CREATE TABLE `directors` (
  directorid INTEGER,
  d_quality INTEGER PRIMARY KEY,
  avg_revenue INTEGER PRIMARY KEY
);
Sample rows from `directors`:
67, 4, 1
92, 2, 3
284, 4, 0

CREATE TABLE `actors` (
  actorid INTEGER,
  a_gender TEXT,
  a_quality INTEGER
);
Sample rows from `actors`:
4, M, 4
16, M, 0
28, M, 4

CREATE TABLE `movies` (
  movieid INTEGER,
  year INTEGER,
  isEnglish TEXT,
  country TEXT,
  runningtime INTEGER
);
Sample rows from `movies`:
1672052, 3, T, other, 2
1672111, 4, T, other, 2
1672580, 4, T, USA, 3

CREATE TABLE `movies2actors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  actorid INTEGER PRIMARY KEY REFERENCES actors(None),
  cast_num INTEGER
);
Sample rows from `movies2actors`:
1672580, 981535, 0
1672946, 1094968, 0
1673647, 149985, 0

CREATE TABLE `movies2directors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  directorid INTEGER PRIMARY KEY REFERENCES directors(None),
  genre TEXT
);
Sample rows from `movies2directors`:
1672111, 54934, Action
1672946, 188940, Action
1679461, 179783, Action

CREATE TABLE `u2base` (
  userid INTEGER PRIMARY KEY REFERENCES users(None),
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  rating TEXT
);
Sample rows from `u2base`:
2, 1964242, 1
2, 2219779, 1
3, 1856939, 1

","movies, movies2actors","movies2actors.cast_num, movies.movieid, movies2actors.movieid, movies.country","users, directors, actors, movies, movies2actors, movies2directors, u2base"
mental_health_survey,"Give the number of users who took the ""mental health survey for 2018"".",SELECT COUNT(DISTINCT t1.userid) FROM answer as t1 inner JOIN survey as t2 ON t1.surveyID = t2.surveyID WHERE t2.description = 'mental health survey for 2018',"CREATE TABLE `answer` (
  AnswerText TEXT,
  SurveyID INTEGER REFERENCES Survey(None),
  UserID INTEGER PRIMARY KEY,
  QuestionID INTEGER PRIMARY KEY REFERENCES Question(None)
);
Sample rows from `answer`:
37, 2014, 1, 1
44, 2014, 2, 1
32, 2014, 3, 1

CREATE TABLE `survey` (
  SurveyID INTEGER,
  Description TEXT
);
Sample rows from `survey`:
2014, mental health survey for 2014
2016, mental health survey for 2016
2017, mental health survey for 2017

","CREATE TABLE `Question` (
  questiontext TEXT,
  questionid INTEGER
);
Sample rows from `Question`:
What is your age?, 1
What is your gender?, 2
What country do you live in?, 3

CREATE TABLE `Survey` (
  SurveyID INTEGER,
  Description TEXT
);
Sample rows from `Survey`:
2014, mental health survey for 2014
2016, mental health survey for 2016
2017, mental health survey for 2017

CREATE TABLE `Answer` (
  AnswerText TEXT,
  SurveyID INTEGER REFERENCES Survey(None),
  UserID INTEGER PRIMARY KEY,
  QuestionID INTEGER PRIMARY KEY REFERENCES Question(None)
);
Sample rows from `Answer`:
37, 2014, 1, 1
44, 2014, 2, 1
32, 2014, 3, 1

","answer, survey","answer.userid, answer.surveyID, survey.surveyID, survey.description","Question, Survey, Answer"
chicago_crime,How many arrests have been made due to forcible entry burglary that took place in a day care center?,SELECT SUM(case when t2.arrest = 'TRUE' then 1 else 0 end) FROM iucr as t1 inner JOIN crime as t2 ON t1.iucr_no = t2.iucr_no WHERE t2.location_description = 'DAY CARE CENTER' AND t1.secondary_description = 'FORCIBLE ENTRY' AND t1.primary_description = 'BURGLARY',"CREATE TABLE `iucr` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `iucr`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","CREATE TABLE `Community_Area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `Community_Area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `District` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `District`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `FBI_Code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `FBI_Code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `IUCR` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `IUCR`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `Neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `Neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `Ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `Ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `Crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `Crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","iucr, crime","crime.arrest, iucr.iucr_no, crime.iucr_no, crime.location_description, iucr.secondary_description, iucr.primary_description","Community_Area, District, FBI_Code, IUCR, Neighborhood, Ward, Crime"
university,What is the criteria name of the university ID 32 in 2015?,SELECT t1.criteria_name FROM ranking_criteria as t1 inner JOIN university_ranking_year as t2 ON t1.id = t2.ranking_criteria_id WHERE t2.university_id = 32 AND t2.year = 2015,"CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

","CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

CREATE TABLE `ranking_system` (
  id INTEGER,
  system_name TEXT
);
Sample rows from `ranking_system`:
1, Times Higher Education World University Ranking
2, Shanghai Ranking
3, Center for World University Rankings

CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

","ranking_criteria, university_ranking_year","ranking_criteria.criteria_name, ranking_criteria.id, university_ranking_year.ranking_criteria_id, university_ranking_year.university_id, university_ranking_year.year","country, ranking_system, ranking_criteria, university, university_ranking_year, university_year"
chicago_crime,How many different neighborhoods are there in Roseland community?,SELECT SUM(case when t1.community_area_name = 'Roseland' then 1 else 0 end) FROM community_area as t1 inner JOIN neighborhood as t2 ON t1.community_area_no = t2.community_area_no,"CREATE TABLE `community_area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `community_area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

","CREATE TABLE `Community_Area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `Community_Area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `District` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `District`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `FBI_Code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `FBI_Code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `IUCR` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `IUCR`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `Neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `Neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `Ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `Ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `Crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `Crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","community_area, neighborhood","community_area.community_area_name, community_area.community_area_no, neighborhood.community_area_no","Community_Area, District, FBI_Code, IUCR, Neighborhood, Ward, Crime"
disney,How many movies did Wolfgang Reitherman direct?,SELECT COUNT(name) FROM director WHERE director = 'Wolfgang Reitherman',"CREATE TABLE `director` (
  name TEXT PRIMARY KEY REFERENCES characters(movie_title),
  director TEXT
);
Sample rows from `director`:
Snow White and the Seven Dwarfs, David Hand
Pinocchio, Ben Sharpsteen
Fantasia, full credits

","CREATE TABLE `characters` (
  movie_title TEXT PRIMARY KEY,
  release_date TEXT,
  hero TEXT REFERENCES voice-actors(character),
  villian TEXT,
  song TEXT
);
Sample rows from `characters`:
Snow White and the Seven Dwarfs, 21-Dec-37, Snow White, Evil Queen, Some Day My Prince Will Come
Pinocchio, 7-Feb-40, Pinocchio, Stromboli, When You Wish upon a Star
Fantasia, 13-Nov-40, None, Chernabog, None

CREATE TABLE `director` (
  name TEXT PRIMARY KEY REFERENCES characters(movie_title),
  director TEXT
);
Sample rows from `director`:
Snow White and the Seven Dwarfs, David Hand
Pinocchio, Ben Sharpsteen
Fantasia, full credits

CREATE TABLE `movies_total_gross` (
  movie_title TEXT PRIMARY KEY REFERENCES characters(movie_title),
  release_date TEXT PRIMARY KEY,
  genre TEXT,
  MPAA_rating TEXT,
  total_gross TEXT,
  inflation_adjusted_gross TEXT
);
Sample rows from `movies_total_gross`:
Snow White and the Seven Dwarfs, Dec 21, 1937, Musical, G, $184,925,485, $5,228,953,251
Pinocchio, Feb 9, 1940, Adventure, G, $84,300,000, $2,188,229,052
Fantasia, Nov 13, 1940, Musical, G, $83,320,000, $2,187,090,808

CREATE TABLE `revenue` (
  Year INTEGER,
  Studio Entertainment[NI 1] REAL,
  Disney Consumer Products[NI 2] REAL,
  Disney Interactive[NI 3][Rev 1] INTEGER,
  Walt Disney Parks and Resorts REAL,
  Disney Media Networks TEXT,
  Total INTEGER
);
Sample rows from `revenue`:
1991, 2593.0, 724.0, None, 2794.0, None, 6111
1992, 3115.0, 1081.0, None, 3306.0, None, 7502
1993, 3673.4, 1415.1, None, 3440.7, None, 8529

CREATE TABLE `voice-actors` (
  character TEXT PRIMARY KEY,
  voice-actor TEXT,
  movie TEXT REFERENCES characters(movie_title)
);
Sample rows from `voice-actors`:
Abby Mallard, Joan Cusack, Chicken Little
Abigail Gabble, Monica Evans, The Aristocats
Abis Mal, Jason Alexander, The Return of Jafar

",director,"name, director","characters, director, movies_total_gross, revenue, voice-actors"
retail_world,"What are the products by the company ""Bigfoot Breweries""?",SELECT t1.productname FROM products as t1 inner JOIN suppliers as t2 ON t1.supplierid = t2.supplierid WHERE t2.companyname = 'Bigfoot Breweries',"CREATE TABLE `products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

","products, suppliers","products.productname, products.supplierid, suppliers.supplierid, suppliers.companyname","sqlite_sequence, Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails"
cs_semester,"List the research assistants' full names, capabilities and GPAs who were under the supervision of Merwyn Conkay.","SELECT t3.f_name, t3.l_name, t2.capability, t3.gpa FROM prof as t1 inner JOIN ra as t2 ON t1.prof_id = t2.prof_id inner JOIN student as t3 ON t2.student_id = t3.student_id WHERE t1.first_name = 'Merwyn' AND t1.last_name = 'Conkay'","CREATE TABLE `prof` (
  prof_id INTEGER,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  popularity INTEGER,
  teachingability INTEGER,
  graduate_from TEXT
);
Sample rows from `prof`:
1, Male, Nathaniel, Pigford, npigford0@hku.hk, 3, 5, University of Washington
2, Male, Zhihua, Zhou, zzhihua@hku.hk, 2, 1, Beijing Polytechnic University
3, Male, Ogdon, Zywicki, ozywicki2@hku.hk, 2, 2, University of Boston

CREATE TABLE `ra` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `ra`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

","CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

CREATE TABLE `prof` (
  prof_id INTEGER,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  popularity INTEGER,
  teachingability INTEGER,
  graduate_from TEXT
);
Sample rows from `prof`:
1, Male, Nathaniel, Pigford, npigford0@hku.hk, 3, 5, University of Washington
2, Male, Zhihua, Zhou, zzhihua@hku.hk, 2, 1, Beijing Polytechnic University
3, Male, Ogdon, Zywicki, ozywicki2@hku.hk, 2, 2, University of Boston

CREATE TABLE `RA` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `RA`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

","prof, ra, student","student.f_name, student.l_name, ra.capability, student.gpa, prof.prof_id, ra.prof_id, ra.student_id, student.student_id, prof.first_name, prof.last_name","course, prof, RA, registration, student"
restaurant,Please indicate which labels have the city located in Santa Cruz.,SELECT t1.label FROM generalinfo as t1 inner JOIN geographic as t2 ON t1.city = t2.city WHERE t2.county = 'Santa Cruz county',"CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

CREATE TABLE `geographic` (
  city TEXT PRIMARY KEY,
  county TEXT,
  region TEXT
);
Sample rows from `geographic`:
alameda, alameda county, bay area
alamo, contra costa county, bay area
albany, alameda county, bay area

","CREATE TABLE `geographic` (
  city TEXT PRIMARY KEY,
  county TEXT,
  region TEXT
);
Sample rows from `geographic`:
alameda, alameda county, bay area
alamo, contra costa county, bay area
albany, alameda county, bay area

CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

","generalinfo, geographic","generalinfo.label, generalinfo.city, geographic.city, geographic.county","geographic, generalinfo, location"
shipping,List all the cities where Zachery Hicks transported goods.,SELECT DISTINCT t3.city_name FROM shipment as t1 inner JOIN driver as t2 ON t1.driver_id = t2.driver_id inner JOIN city as t3 ON t1.city_id = t3.city_id WHERE t2.first_name = 'Zachery' AND t2.last_name = 'Hicks',"CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

CREATE TABLE `driver` (
  driver_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip_code INTEGER,
  phone TEXT
);
Sample rows from `driver`:
20, Sue, Newell, 268 Richmond Ave, Memphis, TN, 38106, (901) 774-6569
21, Andrea, Simons, 3574 Oak Limb Cv, Memphis, TN, 38135, (901) 384-0984
22, Roger, McHaney, 1839 S Orleans St, Memphis, TN, 38106, (901) 948-1043

CREATE TABLE `city` (
  city_id INTEGER,
  city_name TEXT,
  state TEXT,
  population INTEGER,
  area REAL
);
Sample rows from `city`:
100, Union City, New Jersey, 67088, 1.3
101, Huntington Park, California, 61348, 3.0
102, Passaic, New Jersey, 67861, 3.1

","CREATE TABLE `city` (
  city_id INTEGER,
  city_name TEXT,
  state TEXT,
  population INTEGER,
  area REAL
);
Sample rows from `city`:
100, Union City, New Jersey, 67088, 1.3
101, Huntington Park, California, 61348, 3.0
102, Passaic, New Jersey, 67861, 3.1

CREATE TABLE `customer` (
  cust_id INTEGER,
  cust_name TEXT,
  annual_revenue INTEGER,
  cust_type TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip REAL,
  phone TEXT
);
Sample rows from `customer`:
193, Advanced Fabricators, 39588651, manufacturer, 5141 Summit Boulevard, West Palm Beach, FL, 33415.0, (561) 683-3535
304, Pard's Trailer Sales, 17158109, wholesaler, 5910 South 300 West, Salt Lake City, UT, 84107.0, (801) 262-4864
314, Saar Enterprises, Inc., 47403613, retailer, 11687 192nd Street, Council Bluffs, IA, 51503.0, (712) 366-4929

CREATE TABLE `driver` (
  driver_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip_code INTEGER,
  phone TEXT
);
Sample rows from `driver`:
20, Sue, Newell, 268 Richmond Ave, Memphis, TN, 38106, (901) 774-6569
21, Andrea, Simons, 3574 Oak Limb Cv, Memphis, TN, 38135, (901) 384-0984
22, Roger, McHaney, 1839 S Orleans St, Memphis, TN, 38106, (901) 948-1043

CREATE TABLE `truck` (
  truck_id INTEGER,
  make TEXT,
  model_year INTEGER
);
Sample rows from `truck`:
1, Peterbilt, 2005
2, Mack, 2006
3, Peterbilt, 2007

CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

","shipment, driver, city","city.city_name, shipment.driver_id, driver.driver_id, shipment.city_id, city.city_id, driver.first_name, driver.last_name","city, customer, driver, truck, shipment"
movie,How many movies starring Morgan Freeman are suggested by parental guidance?,SELECT COUNT(*) FROM movie as t1 inner JOIN characters as t2 ON t1.movieid = t2.movieid inner JOIN actor as t3 ON t3.actorid = t2.actorid WHERE t3.name = 'Morgan Freeman' AND t1.`mpaa rating` = 'PG',"CREATE TABLE `movie` (
  MovieID INTEGER,
  Title TEXT,
  MPAA Rating TEXT,
  Budget INTEGER,
  Gross INTEGER,
  Release Date TEXT,
  Genre TEXT,
  Runtime INTEGER,
  Rating REAL,
  Rating Count INTEGER,
  Summary TEXT
);
Sample rows from `movie`:
1, Look Who's Talking, PG-13, 7500000, 296000000, 1989-10-12, Romance, 93, 5.9, 73638, After a single, career-minded woman is left on her own to give birth to the child of a married man, she finds a new romantic chance in a cab driver. Meanwhile, the point-of-view of the newborn boy is narrated through voice-over.
2, Driving Miss Daisy, PG, 7500000, 145793296, 1989-12-13, Comedy, 99, 7.4, 91075, An old Jewish woman and her African-American chauffeur in the American South have a relationship that grows and improves over the years.
3, Turner & Hooch, PG, 13000000, 71079915, 1989-07-28, Crime, 100, 7.2, 91415, Det. Scott Turner (Tom Hanks) is an uptight, by-the-book police officer. When his friend Amos Reed (John McIntire), the proprietor of a junkyard, is killed, Turner reluctantly inherits the man's dog. Turner adjusts to life with the dog to help solve a murder case.

CREATE TABLE `characters` (
  MovieID INTEGER PRIMARY KEY REFERENCES movie(MovieID),
  ActorID INTEGER PRIMARY KEY REFERENCES actor(ActorID),
  Character Name TEXT,
  creditOrder INTEGER,
  pay TEXT,
  screentime TEXT
);
Sample rows from `characters`:
1, 1, James, 1, None, None
1, 2, Mollie, 2, None, None
1, 3, Rosie, 3, None, None

CREATE TABLE `actor` (
  ActorID INTEGER,
  Name TEXT,
  Date of Birth DATE,
  Birth City TEXT,
  Birth Country TEXT,
  Height (Inches) INTEGER,
  Biography TEXT,
  Gender TEXT,
  Ethnicity TEXT,
  NetWorth TEXT
);
Sample rows from `actor`:
1, John Travolta, 1954-02-18, Englewood, USA, 74, John Joseph Travolta was born in Englewood, New Jersey, one of six children of Helen Travolta (n�e Helen Cecilia Burke) and Salvatore/Samuel J. Travolta. His father was of Italian descent and his mother was of Irish ancestry. His father owned a tire repair shop called Travolta Tires in Hillsdale, NJ. Travolta started acting appearing in a local ..., Male, White, $250,000,000.00
2, Kirstie Alley, 1951-01-12, Wichita, USA, 67, None, Female, White, $40,000,000.00
3, Olympia Dukakis, 1931-06-20, Lowell, USA, 63, Long a vital, respected lady of the classic and contemporary stage this grand lady did not become a household name and sought-after film actress until age 56 when she turned in a glorious, Oscar-winning perf as Cher's sardonic mother in the romantic comedy Moonstruck (1987). Since then movie (and TV) fans have discovered what the East coast ..., Female, White, $6,000,000.00

","CREATE TABLE `actor` (
  ActorID INTEGER,
  Name TEXT,
  Date of Birth DATE,
  Birth City TEXT,
  Birth Country TEXT,
  Height (Inches) INTEGER,
  Biography TEXT,
  Gender TEXT,
  Ethnicity TEXT,
  NetWorth TEXT
);
Sample rows from `actor`:
1, John Travolta, 1954-02-18, Englewood, USA, 74, John Joseph Travolta was born in Englewood, New Jersey, one of six children of Helen Travolta (n�e Helen Cecilia Burke) and Salvatore/Samuel J. Travolta. His father was of Italian descent and his mother was of Irish ancestry. His father owned a tire repair shop called Travolta Tires in Hillsdale, NJ. Travolta started acting appearing in a local ..., Male, White, $250,000,000.00
2, Kirstie Alley, 1951-01-12, Wichita, USA, 67, None, Female, White, $40,000,000.00
3, Olympia Dukakis, 1931-06-20, Lowell, USA, 63, Long a vital, respected lady of the classic and contemporary stage this grand lady did not become a household name and sought-after film actress until age 56 when she turned in a glorious, Oscar-winning perf as Cher's sardonic mother in the romantic comedy Moonstruck (1987). Since then movie (and TV) fans have discovered what the East coast ..., Female, White, $6,000,000.00

CREATE TABLE `movie` (
  MovieID INTEGER,
  Title TEXT,
  MPAA Rating TEXT,
  Budget INTEGER,
  Gross INTEGER,
  Release Date TEXT,
  Genre TEXT,
  Runtime INTEGER,
  Rating REAL,
  Rating Count INTEGER,
  Summary TEXT
);
Sample rows from `movie`:
1, Look Who's Talking, PG-13, 7500000, 296000000, 1989-10-12, Romance, 93, 5.9, 73638, After a single, career-minded woman is left on her own to give birth to the child of a married man, she finds a new romantic chance in a cab driver. Meanwhile, the point-of-view of the newborn boy is narrated through voice-over.
2, Driving Miss Daisy, PG, 7500000, 145793296, 1989-12-13, Comedy, 99, 7.4, 91075, An old Jewish woman and her African-American chauffeur in the American South have a relationship that grows and improves over the years.
3, Turner & Hooch, PG, 13000000, 71079915, 1989-07-28, Crime, 100, 7.2, 91415, Det. Scott Turner (Tom Hanks) is an uptight, by-the-book police officer. When his friend Amos Reed (John McIntire), the proprietor of a junkyard, is killed, Turner reluctantly inherits the man's dog. Turner adjusts to life with the dog to help solve a murder case.

CREATE TABLE `characters` (
  MovieID INTEGER PRIMARY KEY REFERENCES movie(MovieID),
  ActorID INTEGER PRIMARY KEY REFERENCES actor(ActorID),
  Character Name TEXT,
  creditOrder INTEGER,
  pay TEXT,
  screentime TEXT
);
Sample rows from `characters`:
1, 1, James, 1, None, None
1, 2, Mollie, 2, None, None
1, 3, Rosie, 3, None, None

","movie, characters, actor","movie.movieid, characters.movieid, actor.actorid, characters.actorid, actor.name, movie.mpaa rating","actor, movie, characters"
cs_semester,"What is the credit of the course named ""Computer Vision""?",SELECT credit FROM course WHERE name = 'Computer Vision',"CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

","CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

CREATE TABLE `prof` (
  prof_id INTEGER,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  popularity INTEGER,
  teachingability INTEGER,
  graduate_from TEXT
);
Sample rows from `prof`:
1, Male, Nathaniel, Pigford, npigford0@hku.hk, 3, 5, University of Washington
2, Male, Zhihua, Zhou, zzhihua@hku.hk, 2, 1, Beijing Polytechnic University
3, Male, Ogdon, Zywicki, ozywicki2@hku.hk, 2, 2, University of Boston

CREATE TABLE `RA` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `RA`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

",course,"credit, name","course, prof, RA, registration, student"
cookbook,"Among all recipes containing cheese, what is the percentage of recipes with calories greater than 200?",SELECT cast(SUM(case when t4.calories > 200 then 1 else 0 end) as real) * 100 / COUNT(*) FROM recipe as t1 inner JOIN quantity as t2 ON t1.recipe_id = t2.recipe_id inner JOIN ingredient as t3 ON t3.ingredient_id = t2.ingredient_id inner JOIN nutrition as t4 ON t4.recipe_id = t1.recipe_id WHERE t3.category = 'cheese',"CREATE TABLE `recipe` (
  recipe_id INTEGER,
  title TEXT,
  subtitle TEXT,
  servings INTEGER,
  yield_unit TEXT,
  prep_min INTEGER,
  cook_min INTEGER,
  stnd_min INTEGER,
  source TEXT,
  intro TEXT,
  directions TEXT
);
Sample rows from `recipe`:
214, Raspberry Chiffon Pie, None, 10, 1 pie, 20, 8, 305, The California Tree Fruit Agreement, None, For crust, preheat oven to 375 degrees F.
In lightly greased 10-inch pie plate, combine graham cracker crumbs, melted butter and 1/4 cup sugar. Press evenly on bottom and up side of plate. Bake 5 minutes; cool.

For filling, in medium saucepan, combine juice or water and gelatin; let stand 5 minutes. Add 1/3 cup sugar and heat over medium heat, stirring to dissolve gelatin. In blender or food processor, puree 6 plums. Add puree and raspberries to gelatin mixture. Refrigerate until mixture begins to set about 1 hour. Stir yogurt into fruit mixture. In large bowl, beat egg whites until frothy. Gradually add cream of tartar and remaining 1/3 cup sugar and beat until stiff peaks form. Gently fold egg whites into fruit mixture so as not to reduce volume. Spoon into crust. Refrigerate 4 hours or overnight. Thinly slice remaining 2 plums and garnish top of pie.
215, Apricot Yogurt Parfaits, None, 4, None, 5, 2, 65, Produce for Better Health Foundation and 5 a Day, None, Drain canned apricots, pour 1/4 cup of the juice into saucepan or microwave-safe dish. Sprinkle gelatin over juice and let stand for 5 minutes to soften. Warm over low heat or microwave at medium (50% power) for 30 seconds or until gelatin has dissolved.
 
In food processor or blender, puree canned apricots; add lemon juice brandy, yogurt and gelatin mixture and process for 30 seconds or until combined.
 
Pour into parfait or stemmed glasses or champagne flutes. Cover and refrigerate until set, at least 1 hour or overnight.
 
Just before serving arrange fresh apricots on top. (If apricots are not available substitute kiwi slices or berries). Garnish each with a small spoonful of yogurt and sprinkling of brown sugar or mint.
216, Fresh Apricot Bavarian, None, 8, None, 5, 13, 0, The California Apricot Advisory Board, Serve in stemmed glasses and top with sliced apricots for elegant endings., Drop apricots into boiling water to cover. Return to boil and simmer for 5 minutes or until skins begin to split. Drain and rinse under cold water. Halve fruit and discard skins and pits. Puree apricots in electric blender. Combine water and gelatin in small saucepan; stir over low heat until dissolved. Mix sugar, apricot puree and yogurt with a wire whip until smooth; mix in dissolved gelatin. Sweeten to taste if desired. Chill mixture until thick. Spoon into stemmed glasses.

Note: One pound fresh apricots is 15 to 20. One and a half envelopes gelatin is 4 teaspoons.

CREATE TABLE `quantity` (
  quantity_id INTEGER,
  recipe_id INTEGER REFERENCES Nutrition(recipe_id) REFERENCES Recipe(recipe_id),
  ingredient_id INTEGER REFERENCES Ingredient(ingredient_id),
  max_qty REAL,
  min_qty REAL,
  unit TEXT,
  preparation TEXT,
  optional TEXT
);
Sample rows from `quantity`:
1, 214, 1613, 2.0, 2.0, cup(s), None, FALSE
2, 214, 3334, 0.25, 0.25, cup(s), None, FALSE
3, 214, 2222, 0.5, 0.5, cup(s), melted, FALSE

CREATE TABLE `ingredient` (
  ingredient_id INTEGER,
  category TEXT,
  name TEXT,
  plural TEXT
);
Sample rows from `ingredient`:
1, dairy, 1% lowfat cottage cheese, None
6, dairy, 1% lowfat milk, None
10, Mexican products, 10-inch flour tortilla, s

CREATE TABLE `nutrition` (
  recipe_id INTEGER REFERENCES Recipe(recipe_id),
  protein REAL,
  carbo REAL,
  alcohol REAL,
  total_fat REAL,
  sat_fat REAL,
  cholestrl REAL,
  sodium REAL,
  iron REAL,
  vitamin_c REAL,
  vitamin_a REAL,
  fiber REAL,
  pcnt_cal_carb REAL,
  pcnt_cal_fat REAL,
  pcnt_cal_prot REAL,
  calories REAL
);
Sample rows from `nutrition`:
214, 5.47, 41.29, 0.0, 11.53, 2.21, 1.39, 260.78, 0.81, 8.89, 586.2, 0.87, 56.8, 35.68, 7.53, 290.79
215, 5.7, 23.75, 1.93, 1.08, 0.58, 3.48, 46.17, 0.57, 13.02, 2738.24, 0.62, 67.38, 6.89, 16.17, 141.01
216, 4.9, 26.88, 0.0, 1.1, 0.58, 3.46, 41.79, 0.37, 6.13, 1521.1, 0.34, 78.45, 7.24, 14.3, 137.06

","CREATE TABLE `Ingredient` (
  ingredient_id INTEGER,
  category TEXT,
  name TEXT,
  plural TEXT
);
Sample rows from `Ingredient`:
1, dairy, 1% lowfat cottage cheese, None
6, dairy, 1% lowfat milk, None
10, Mexican products, 10-inch flour tortilla, s

CREATE TABLE `Recipe` (
  recipe_id INTEGER,
  title TEXT,
  subtitle TEXT,
  servings INTEGER,
  yield_unit TEXT,
  prep_min INTEGER,
  cook_min INTEGER,
  stnd_min INTEGER,
  source TEXT,
  intro TEXT,
  directions TEXT
);
Sample rows from `Recipe`:
214, Raspberry Chiffon Pie, None, 10, 1 pie, 20, 8, 305, The California Tree Fruit Agreement, None, For crust, preheat oven to 375 degrees F.
In lightly greased 10-inch pie plate, combine graham cracker crumbs, melted butter and 1/4 cup sugar. Press evenly on bottom and up side of plate. Bake 5 minutes; cool.

For filling, in medium saucepan, combine juice or water and gelatin; let stand 5 minutes. Add 1/3 cup sugar and heat over medium heat, stirring to dissolve gelatin. In blender or food processor, puree 6 plums. Add puree and raspberries to gelatin mixture. Refrigerate until mixture begins to set about 1 hour. Stir yogurt into fruit mixture. In large bowl, beat egg whites until frothy. Gradually add cream of tartar and remaining 1/3 cup sugar and beat until stiff peaks form. Gently fold egg whites into fruit mixture so as not to reduce volume. Spoon into crust. Refrigerate 4 hours or overnight. Thinly slice remaining 2 plums and garnish top of pie.
215, Apricot Yogurt Parfaits, None, 4, None, 5, 2, 65, Produce for Better Health Foundation and 5 a Day, None, Drain canned apricots, pour 1/4 cup of the juice into saucepan or microwave-safe dish. Sprinkle gelatin over juice and let stand for 5 minutes to soften. Warm over low heat or microwave at medium (50% power) for 30 seconds or until gelatin has dissolved.
 
In food processor or blender, puree canned apricots; add lemon juice brandy, yogurt and gelatin mixture and process for 30 seconds or until combined.
 
Pour into parfait or stemmed glasses or champagne flutes. Cover and refrigerate until set, at least 1 hour or overnight.
 
Just before serving arrange fresh apricots on top. (If apricots are not available substitute kiwi slices or berries). Garnish each with a small spoonful of yogurt and sprinkling of brown sugar or mint.
216, Fresh Apricot Bavarian, None, 8, None, 5, 13, 0, The California Apricot Advisory Board, Serve in stemmed glasses and top with sliced apricots for elegant endings., Drop apricots into boiling water to cover. Return to boil and simmer for 5 minutes or until skins begin to split. Drain and rinse under cold water. Halve fruit and discard skins and pits. Puree apricots in electric blender. Combine water and gelatin in small saucepan; stir over low heat until dissolved. Mix sugar, apricot puree and yogurt with a wire whip until smooth; mix in dissolved gelatin. Sweeten to taste if desired. Chill mixture until thick. Spoon into stemmed glasses.

Note: One pound fresh apricots is 15 to 20. One and a half envelopes gelatin is 4 teaspoons.

CREATE TABLE `Nutrition` (
  recipe_id INTEGER REFERENCES Recipe(recipe_id),
  protein REAL,
  carbo REAL,
  alcohol REAL,
  total_fat REAL,
  sat_fat REAL,
  cholestrl REAL,
  sodium REAL,
  iron REAL,
  vitamin_c REAL,
  vitamin_a REAL,
  fiber REAL,
  pcnt_cal_carb REAL,
  pcnt_cal_fat REAL,
  pcnt_cal_prot REAL,
  calories REAL
);
Sample rows from `Nutrition`:
214, 5.47, 41.29, 0.0, 11.53, 2.21, 1.39, 260.78, 0.81, 8.89, 586.2, 0.87, 56.8, 35.68, 7.53, 290.79
215, 5.7, 23.75, 1.93, 1.08, 0.58, 3.48, 46.17, 0.57, 13.02, 2738.24, 0.62, 67.38, 6.89, 16.17, 141.01
216, 4.9, 26.88, 0.0, 1.1, 0.58, 3.46, 41.79, 0.37, 6.13, 1521.1, 0.34, 78.45, 7.24, 14.3, 137.06

CREATE TABLE `Quantity` (
  quantity_id INTEGER,
  recipe_id INTEGER REFERENCES Nutrition(recipe_id) REFERENCES Recipe(recipe_id),
  ingredient_id INTEGER REFERENCES Ingredient(ingredient_id),
  max_qty REAL,
  min_qty REAL,
  unit TEXT,
  preparation TEXT,
  optional TEXT
);
Sample rows from `Quantity`:
1, 214, 1613, 2.0, 2.0, cup(s), None, FALSE
2, 214, 3334, 0.25, 0.25, cup(s), None, FALSE
3, 214, 2222, 0.5, 0.5, cup(s), melted, FALSE

","recipe, quantity, ingredient, nutrition","nutrition.calories, recipe.recipe_id, quantity.recipe_id, ingredient.ingredient_id, quantity.ingredient_id, nutrition.recipe_id, ingredient.category","Ingredient, Recipe, Nutrition, Quantity"
image_and_language,Please list all the predicted relation classes of object sample no.14 in image no.1.,SELECT t1.pred_class FROM pred_classES as t1 inner JOIN img_rel as t2 ON t1.pred_class_ID = t2.pred_class_ID WHERE t2.obj1_sample_id = 14 AND t2.obj2_sample_id = 14,"CREATE TABLE `pred_classES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `pred_classES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `img_rel` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `img_rel`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

","CREATE TABLE `ATT_CLASSES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `ATT_CLASSES`:
0, building s
1, indoors
2, cluttered

CREATE TABLE `OBJ_CLASSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLASSES`:
0, awning
1, goggles
2, dot

CREATE TABLE `IMG_OBJ` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `IMG_OBJ`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `IMG_OBJ_ATT` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_OBJ_ATT`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `PRED_CLASSES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `PRED_CLASSES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `IMG_REL` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_REL`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

","pred_classES, img_rel","pred_classES.pred_class, pred_classES.pred_class_ID, img_rel.pred_class_ID, img_rel.obj1_sample_id, img_rel.obj2_sample_id","ATT_CLASSES, OBJ_CLASSES, IMG_OBJ, IMG_OBJ_ATT, PRED_CLASSES, IMG_REL"
books,Provide the customers' names who ordered the Fantasmas.,"SELECT t4.first_name, t4.last_name FROM book as t1 inner JOIN order_line as t2 ON t1.book_id = t2.book_id inner JOIN cust_order as t3 ON t3.order_id = t2.order_id inner JOIN customer as t4 ON t4.customer_id = t3.customer_id WHERE t1.title = 'Fantasmas'","CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","book, order_line, cust_order, customer","customer.first_name, customer.last_name, book.book_id, order_line.book_id, cust_order.order_id, order_line.order_id, customer.customer_id, cust_order.customer_id, book.title","address_status, author, book_language, country, address, customer, customer_address, order_status, publisher, book, book_author, shipping_method, cust_order, sqlite_sequence, order_history, order_line"
cs_semester,List the student's email with grade of B in a course with difficulty greater than the 80% of average difficulty of all courses.,SELECT t2.email FROM registration as t1 inner JOIN student as t2 ON t1.student_id = t2.student_id inner JOIN course as t3 ON t1.course_id = t3.course_id WHERE t1.grade = 'B' GROUP BY t3.diff HAVING t3.diff > AVG(t3.diff) * 0.8,"CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

","CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

CREATE TABLE `prof` (
  prof_id INTEGER,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  popularity INTEGER,
  teachingability INTEGER,
  graduate_from TEXT
);
Sample rows from `prof`:
1, Male, Nathaniel, Pigford, npigford0@hku.hk, 3, 5, University of Washington
2, Male, Zhihua, Zhou, zzhihua@hku.hk, 2, 1, Beijing Polytechnic University
3, Male, Ogdon, Zywicki, ozywicki2@hku.hk, 2, 2, University of Boston

CREATE TABLE `RA` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `RA`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

","registration, student, course","student.email, registration.student_id, student.student_id, registration.course_id, course.course_id, registration.grade, course.diff","course, prof, RA, registration, student"
european_football_1,Which division had the most draft matches in the 2008 season?,SELECT div FROM matchs WHERE season = 2008 ANd ftr = 'd' GROUP BY div ORdER BY COUNT(ftr) dESC LIMIT 1,"CREATE TABLE `matchs` (
  Div TEXT REFERENCES divisions(division),
  Date DATE,
  HomeTeam TEXT,
  AwayTeam TEXT,
  FTHG INTEGER,
  FTAG INTEGER,
  FTR TEXT,
  season INTEGER
);
Sample rows from `matchs`:
B1, 2020-08-08, Club Brugge, Charleroi, 0, 1, A, 2021
B1, 2020-08-08, Antwerp, Mouscron, 1, 1, D, 2021
B1, 2020-08-08, Standard, Cercle Brugge, 1, 0, H, 2021

","CREATE TABLE `divisions` (
  division TEXT PRIMARY KEY,
  name TEXT,
  country TEXT
);
Sample rows from `divisions`:
B1, Division 1A, Belgium
D1, Bundesliga, Deutschland
D2, 2. Bundesliga, Deutschland

CREATE TABLE `matchs` (
  Div TEXT REFERENCES divisions(division),
  Date DATE,
  HomeTeam TEXT,
  AwayTeam TEXT,
  FTHG INTEGER,
  FTAG INTEGER,
  FTR TEXT,
  season INTEGER
);
Sample rows from `matchs`:
B1, 2020-08-08, Club Brugge, Charleroi, 0, 1, A, 2021
B1, 2020-08-08, Antwerp, Mouscron, 1, 1, D, 2021
B1, 2020-08-08, Standard, Cercle Brugge, 1, 0, H, 2021

",matchs,"season, ftr","divisions, matchs"
movie,What is the name of the character played by Tom Cruise in the movie Born on the Fourth of July?,SELECT t2.`character name` FROM movie as t1 inner JOIN characters as t2 ON t1.movieid = t2.movieid inner JOIN actor as t3 ON t3.actorid = t2.actorid WHERE t3.name = 'Tom Cruise' AND t1.title = 'Born on the Fourth of July',"CREATE TABLE `movie` (
  MovieID INTEGER,
  Title TEXT,
  MPAA Rating TEXT,
  Budget INTEGER,
  Gross INTEGER,
  Release Date TEXT,
  Genre TEXT,
  Runtime INTEGER,
  Rating REAL,
  Rating Count INTEGER,
  Summary TEXT
);
Sample rows from `movie`:
1, Look Who's Talking, PG-13, 7500000, 296000000, 1989-10-12, Romance, 93, 5.9, 73638, After a single, career-minded woman is left on her own to give birth to the child of a married man, she finds a new romantic chance in a cab driver. Meanwhile, the point-of-view of the newborn boy is narrated through voice-over.
2, Driving Miss Daisy, PG, 7500000, 145793296, 1989-12-13, Comedy, 99, 7.4, 91075, An old Jewish woman and her African-American chauffeur in the American South have a relationship that grows and improves over the years.
3, Turner & Hooch, PG, 13000000, 71079915, 1989-07-28, Crime, 100, 7.2, 91415, Det. Scott Turner (Tom Hanks) is an uptight, by-the-book police officer. When his friend Amos Reed (John McIntire), the proprietor of a junkyard, is killed, Turner reluctantly inherits the man's dog. Turner adjusts to life with the dog to help solve a murder case.

CREATE TABLE `characters` (
  MovieID INTEGER PRIMARY KEY REFERENCES movie(MovieID),
  ActorID INTEGER PRIMARY KEY REFERENCES actor(ActorID),
  Character Name TEXT,
  creditOrder INTEGER,
  pay TEXT,
  screentime TEXT
);
Sample rows from `characters`:
1, 1, James, 1, None, None
1, 2, Mollie, 2, None, None
1, 3, Rosie, 3, None, None

CREATE TABLE `actor` (
  ActorID INTEGER,
  Name TEXT,
  Date of Birth DATE,
  Birth City TEXT,
  Birth Country TEXT,
  Height (Inches) INTEGER,
  Biography TEXT,
  Gender TEXT,
  Ethnicity TEXT,
  NetWorth TEXT
);
Sample rows from `actor`:
1, John Travolta, 1954-02-18, Englewood, USA, 74, John Joseph Travolta was born in Englewood, New Jersey, one of six children of Helen Travolta (n�e Helen Cecilia Burke) and Salvatore/Samuel J. Travolta. His father was of Italian descent and his mother was of Irish ancestry. His father owned a tire repair shop called Travolta Tires in Hillsdale, NJ. Travolta started acting appearing in a local ..., Male, White, $250,000,000.00
2, Kirstie Alley, 1951-01-12, Wichita, USA, 67, None, Female, White, $40,000,000.00
3, Olympia Dukakis, 1931-06-20, Lowell, USA, 63, Long a vital, respected lady of the classic and contemporary stage this grand lady did not become a household name and sought-after film actress until age 56 when she turned in a glorious, Oscar-winning perf as Cher's sardonic mother in the romantic comedy Moonstruck (1987). Since then movie (and TV) fans have discovered what the East coast ..., Female, White, $6,000,000.00

","CREATE TABLE `actor` (
  ActorID INTEGER,
  Name TEXT,
  Date of Birth DATE,
  Birth City TEXT,
  Birth Country TEXT,
  Height (Inches) INTEGER,
  Biography TEXT,
  Gender TEXT,
  Ethnicity TEXT,
  NetWorth TEXT
);
Sample rows from `actor`:
1, John Travolta, 1954-02-18, Englewood, USA, 74, John Joseph Travolta was born in Englewood, New Jersey, one of six children of Helen Travolta (n�e Helen Cecilia Burke) and Salvatore/Samuel J. Travolta. His father was of Italian descent and his mother was of Irish ancestry. His father owned a tire repair shop called Travolta Tires in Hillsdale, NJ. Travolta started acting appearing in a local ..., Male, White, $250,000,000.00
2, Kirstie Alley, 1951-01-12, Wichita, USA, 67, None, Female, White, $40,000,000.00
3, Olympia Dukakis, 1931-06-20, Lowell, USA, 63, Long a vital, respected lady of the classic and contemporary stage this grand lady did not become a household name and sought-after film actress until age 56 when she turned in a glorious, Oscar-winning perf as Cher's sardonic mother in the romantic comedy Moonstruck (1987). Since then movie (and TV) fans have discovered what the East coast ..., Female, White, $6,000,000.00

CREATE TABLE `movie` (
  MovieID INTEGER,
  Title TEXT,
  MPAA Rating TEXT,
  Budget INTEGER,
  Gross INTEGER,
  Release Date TEXT,
  Genre TEXT,
  Runtime INTEGER,
  Rating REAL,
  Rating Count INTEGER,
  Summary TEXT
);
Sample rows from `movie`:
1, Look Who's Talking, PG-13, 7500000, 296000000, 1989-10-12, Romance, 93, 5.9, 73638, After a single, career-minded woman is left on her own to give birth to the child of a married man, she finds a new romantic chance in a cab driver. Meanwhile, the point-of-view of the newborn boy is narrated through voice-over.
2, Driving Miss Daisy, PG, 7500000, 145793296, 1989-12-13, Comedy, 99, 7.4, 91075, An old Jewish woman and her African-American chauffeur in the American South have a relationship that grows and improves over the years.
3, Turner & Hooch, PG, 13000000, 71079915, 1989-07-28, Crime, 100, 7.2, 91415, Det. Scott Turner (Tom Hanks) is an uptight, by-the-book police officer. When his friend Amos Reed (John McIntire), the proprietor of a junkyard, is killed, Turner reluctantly inherits the man's dog. Turner adjusts to life with the dog to help solve a murder case.

CREATE TABLE `characters` (
  MovieID INTEGER PRIMARY KEY REFERENCES movie(MovieID),
  ActorID INTEGER PRIMARY KEY REFERENCES actor(ActorID),
  Character Name TEXT,
  creditOrder INTEGER,
  pay TEXT,
  screentime TEXT
);
Sample rows from `characters`:
1, 1, James, 1, None, None
1, 2, Mollie, 2, None, None
1, 3, Rosie, 3, None, None

","movie, characters, actor","characters.character name, movie.movieid, characters.movieid, actor.actorid, characters.actorid, actor.name, movie.title","actor, movie, characters"
movies_4,Provide the ID and ISO code of Belgium.,"SELECT country_id, country_iso_code FROM country WHERE country_name = 'Belgium'","CREATE TABLE `country` (
  country_id INTEGER,
  country_iso_code TEXT,
  country_name TEXT
);
Sample rows from `country`:
128, AE, United Arab Emirates
129, AF, Afghanistan
130, AO, Angola

","CREATE TABLE `country` (
  country_id INTEGER,
  country_iso_code TEXT,
  country_name TEXT
);
Sample rows from `country`:
128, AE, United Arab Emirates
129, AF, Afghanistan
130, AO, Angola

CREATE TABLE `department` (
  department_id INTEGER,
  department_name TEXT
);
Sample rows from `department`:
1, Camera
2, Directing
3, Production

CREATE TABLE `gender` (
  gender_id INTEGER,
  gender TEXT
);
Sample rows from `gender`:
0, Unspecified
1, Female
2, Male

CREATE TABLE `genre` (
  genre_id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
12, Adventure
14, Fantasy
16, Animation

CREATE TABLE `keyword` (
  keyword_id INTEGER,
  keyword_name TEXT
);
Sample rows from `keyword`:
30, individual
65, holiday
74, germany

CREATE TABLE `language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `language`:
24574, en, English
24575, sv, svenska
24576, de, Deutsch

CREATE TABLE `language_role` (
  role_id INTEGER,
  language_role TEXT
);
Sample rows from `language_role`:
1, Original
2, Spoken

CREATE TABLE `movie` (
  movie_id INTEGER,
  title TEXT,
  budget INTEGER,
  homepage TEXT,
  overview TEXT,
  popularity REAL,
  release_date DATE,
  revenue INTEGER,
  runtime INTEGER,
  movie_status TEXT,
  tagline TEXT,
  vote_average REAL,
  vote_count INTEGER
);
Sample rows from `movie`:
5, Four Rooms, 4000000, , It's Ted the Bellhop's first night on the job...and the hotel's very unusual guests are about to place him in some outrageous predicaments. It seems that this evening's room service is serving up one unbelievable happening after another., 22.87623, 1995-12-09, 4300000, 98, Released, Twelve outrageous guests. Four scandalous requests. And one lone bellhop, in his first day on the job, who's in for the wildest New year's Eve of his life., 6.5, 530
11, Star Wars, 11000000, http://www.starwars.com/films/star-wars-episode-iv-a-new-hope, Princess Leia is captured and held hostage by the evil Imperial forces in their effort to take over the galactic Empire. Venturesome Luke Skywalker and dashing captain Han Solo team together with the loveable robot duo R2-D2 and C-3PO to rescue the beauti, 126.393695, 1977-05-25, 775398007, 121, Released, A long time ago in a galaxy far, far away..., 8.1, 6624
12, Finding Nemo, 94000000, http://movies.disney.com/finding-nemo, Nemo, an adventurous young clownfish, is unexpectedly taken from his Great Barrier Reef home to a dentist's office aquarium. It's up to his worrisome father Marlin and a friendly but forgetful fish Dory to bring Nemo home -- meeting vegetarian sharks, sur, 85.688789, 2003-05-30, 940335536, 100, Released, There are 3.7 trillion fish in the ocean, they're looking for one., 7.6, 6122

CREATE TABLE `movie_genres` (
  movie_id INTEGER REFERENCES movie(movie_id),
  genre_id INTEGER REFERENCES genre(genre_id)
);
Sample rows from `movie_genres`:
5, 35
5, 80
11, 12

CREATE TABLE `movie_languages` (
  movie_id INTEGER REFERENCES movie(movie_id),
  language_id INTEGER REFERENCES language(language_id),
  language_role_id INTEGER REFERENCES language_role(role_id)
);
Sample rows from `movie_languages`:
5, 24574, 2
11, 24574, 2
12, 24574, 2

CREATE TABLE `person` (
  person_id INTEGER,
  person_name TEXT
);
Sample rows from `person`:
1, George Lucas
2, Mark Hamill
3, Harrison Ford

CREATE TABLE `movie_crew` (
  movie_id INTEGER REFERENCES movie(movie_id),
  person_id INTEGER REFERENCES person(person_id),
  department_id INTEGER REFERENCES department(department_id),
  job TEXT
);
Sample rows from `movie_crew`:
285, 120, 1, Director of Photography
285, 1704, 2, Director
285, 770, 3, Producer

CREATE TABLE `production_company` (
  company_id INTEGER,
  company_name TEXT
);
Sample rows from `production_company`:
1, Lucasfilm
2, Walt Disney Pictures
3, Pixar Animation Studios

CREATE TABLE `production_country` (
  movie_id INTEGER REFERENCES movie(movie_id),
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `production_country`:
5, 214
11, 214
12, 214

CREATE TABLE `movie_cast` (
  movie_id INTEGER REFERENCES movie(movie_id),
  person_id INTEGER REFERENCES person(person_id),
  character_name TEXT,
  gender_id INTEGER REFERENCES gender(gender_id),
  cast_order INTEGER
);
Sample rows from `movie_cast`:
285, 85, Captain Jack Sparrow, 2, 0
285, 114, Will Turner, 2, 1
285, 116, Elizabeth Swann, 1, 2

CREATE TABLE `movie_keywords` (
  movie_id INTEGER REFERENCES movie(None),
  keyword_id INTEGER REFERENCES keyword(None)
);
Sample rows from `movie_keywords`:
5, 612
5, 613
5, 616

CREATE TABLE `movie_company` (
  movie_id INTEGER REFERENCES movie(None),
  company_id INTEGER REFERENCES production_company(None)
);
Sample rows from `movie_company`:
5, 14
5, 59
11, 1

",country,"country_id, country_iso_code, country_name","country, department, gender, genre, keyword, language, language_role, movie, movie_genres, movie_languages, person, movie_crew, production_company, production_country, movie_cast, movie_keywords, movie_company"
mental_health_survey,How many questions in 2014's survey had more than 200 answers?,SELECT COUNT(questionid) FROM answer WHERE surveyid LIKE 2014 GROUP BY questionid ORDER BY COUNT(questionid) > 200 LIMIT 1,"CREATE TABLE `answer` (
  AnswerText TEXT,
  SurveyID INTEGER REFERENCES Survey(None),
  UserID INTEGER PRIMARY KEY,
  QuestionID INTEGER PRIMARY KEY REFERENCES Question(None)
);
Sample rows from `answer`:
37, 2014, 1, 1
44, 2014, 2, 1
32, 2014, 3, 1

","CREATE TABLE `Question` (
  questiontext TEXT,
  questionid INTEGER
);
Sample rows from `Question`:
What is your age?, 1
What is your gender?, 2
What country do you live in?, 3

CREATE TABLE `Survey` (
  SurveyID INTEGER,
  Description TEXT
);
Sample rows from `Survey`:
2014, mental health survey for 2014
2016, mental health survey for 2016
2017, mental health survey for 2017

CREATE TABLE `Answer` (
  AnswerText TEXT,
  SurveyID INTEGER REFERENCES Survey(None),
  UserID INTEGER PRIMARY KEY,
  QuestionID INTEGER PRIMARY KEY REFERENCES Question(None)
);
Sample rows from `Answer`:
37, 2014, 1, 1
44, 2014, 2, 1
32, 2014, 3, 1

",answer,"questionid, surveyid","Question, Survey, Answer"
student_loan,Find the average number of absences for each student.,SELECT AVG(month) FROM longest_absense_from_school,"CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

",longest_absense_from_school,,"bool, person, disabled, enlist, filed_for_bankrupcy, longest_absense_from_school, male, no_payment_due, unemployed, enrolled"
regional_sales,What were the total orders of Medsep Group from 2018 to 2020?,"SELECT SUM(case when substr(t1.orderdate, -2) IN ('18', '19', '20') AND t2.`customer names` = 'Medsep Group' then 1 else 0 end) FROM `sales orders` as t1 inner JOIN customers as t2 ON t2.customerID = t1._customerID","CREATE TABLE `sales orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `sales orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

CREATE TABLE `customers` (
  CustomerID INTEGER,
  Customer Names TEXT
);
Sample rows from `customers`:
1, Avon Corp
2, WakeFern 
3, Elorac, Corp

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  Customer Names TEXT
);
Sample rows from `Customers`:
1, Avon Corp
2, WakeFern 
3, Elorac, Corp

CREATE TABLE `Products` (
  ProductID INTEGER,
  Product Name TEXT
);
Sample rows from `Products`:
1, Cookware
2, Photo Frames
3, Table Lamps

CREATE TABLE `Regions` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `Regions`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `Sales Team` (
  SalesTeamID INTEGER,
  Sales Team TEXT,
  Region TEXT
);
Sample rows from `Sales Team`:
1, Adam Hernandez, Northeast
2, Keith Griffin, Northeast
3, Jerry Green, West

CREATE TABLE `Store Locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `Store Locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

CREATE TABLE `Sales Orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `Sales Orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

","sales orders, customers","sales orders.orderdate, customers.customer names, customers.customerID, sales orders._customerID","Customers, Products, Regions, Sales Team, Store Locations, Sales Orders"
shipping,What is the name of the customer of ship ID 1147?,SELECT t2.cust_name FROM shipment as t1 inner JOIN customer as t2 ON t1.cust_id = t2.cust_id WHERE t1.ship_id = '1147',"CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

CREATE TABLE `customer` (
  cust_id INTEGER,
  cust_name TEXT,
  annual_revenue INTEGER,
  cust_type TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip REAL,
  phone TEXT
);
Sample rows from `customer`:
193, Advanced Fabricators, 39588651, manufacturer, 5141 Summit Boulevard, West Palm Beach, FL, 33415.0, (561) 683-3535
304, Pard's Trailer Sales, 17158109, wholesaler, 5910 South 300 West, Salt Lake City, UT, 84107.0, (801) 262-4864
314, Saar Enterprises, Inc., 47403613, retailer, 11687 192nd Street, Council Bluffs, IA, 51503.0, (712) 366-4929

","CREATE TABLE `city` (
  city_id INTEGER,
  city_name TEXT,
  state TEXT,
  population INTEGER,
  area REAL
);
Sample rows from `city`:
100, Union City, New Jersey, 67088, 1.3
101, Huntington Park, California, 61348, 3.0
102, Passaic, New Jersey, 67861, 3.1

CREATE TABLE `customer` (
  cust_id INTEGER,
  cust_name TEXT,
  annual_revenue INTEGER,
  cust_type TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip REAL,
  phone TEXT
);
Sample rows from `customer`:
193, Advanced Fabricators, 39588651, manufacturer, 5141 Summit Boulevard, West Palm Beach, FL, 33415.0, (561) 683-3535
304, Pard's Trailer Sales, 17158109, wholesaler, 5910 South 300 West, Salt Lake City, UT, 84107.0, (801) 262-4864
314, Saar Enterprises, Inc., 47403613, retailer, 11687 192nd Street, Council Bluffs, IA, 51503.0, (712) 366-4929

CREATE TABLE `driver` (
  driver_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip_code INTEGER,
  phone TEXT
);
Sample rows from `driver`:
20, Sue, Newell, 268 Richmond Ave, Memphis, TN, 38106, (901) 774-6569
21, Andrea, Simons, 3574 Oak Limb Cv, Memphis, TN, 38135, (901) 384-0984
22, Roger, McHaney, 1839 S Orleans St, Memphis, TN, 38106, (901) 948-1043

CREATE TABLE `truck` (
  truck_id INTEGER,
  make TEXT,
  model_year INTEGER
);
Sample rows from `truck`:
1, Peterbilt, 2005
2, Mack, 2006
3, Peterbilt, 2007

CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

","shipment, customer","customer.cust_name, shipment.cust_id, customer.cust_id, shipment.ship_id","city, customer, driver, truck, shipment"
cookbook,"What is the unsaturated fat content in the recipe ""Raspberry Chiffon Pie""?",SELECT t2.total_fat - t2.sat_fat FROM recipe as t1 inner JOIN nutrition as t2 ON t1.recipe_id = t2.recipe_id WHERE t1.title = 'Raspberry Chiffon Pie',"CREATE TABLE `recipe` (
  recipe_id INTEGER,
  title TEXT,
  subtitle TEXT,
  servings INTEGER,
  yield_unit TEXT,
  prep_min INTEGER,
  cook_min INTEGER,
  stnd_min INTEGER,
  source TEXT,
  intro TEXT,
  directions TEXT
);
Sample rows from `recipe`:
214, Raspberry Chiffon Pie, None, 10, 1 pie, 20, 8, 305, The California Tree Fruit Agreement, None, For crust, preheat oven to 375 degrees F.
In lightly greased 10-inch pie plate, combine graham cracker crumbs, melted butter and 1/4 cup sugar. Press evenly on bottom and up side of plate. Bake 5 minutes; cool.

For filling, in medium saucepan, combine juice or water and gelatin; let stand 5 minutes. Add 1/3 cup sugar and heat over medium heat, stirring to dissolve gelatin. In blender or food processor, puree 6 plums. Add puree and raspberries to gelatin mixture. Refrigerate until mixture begins to set about 1 hour. Stir yogurt into fruit mixture. In large bowl, beat egg whites until frothy. Gradually add cream of tartar and remaining 1/3 cup sugar and beat until stiff peaks form. Gently fold egg whites into fruit mixture so as not to reduce volume. Spoon into crust. Refrigerate 4 hours or overnight. Thinly slice remaining 2 plums and garnish top of pie.
215, Apricot Yogurt Parfaits, None, 4, None, 5, 2, 65, Produce for Better Health Foundation and 5 a Day, None, Drain canned apricots, pour 1/4 cup of the juice into saucepan or microwave-safe dish. Sprinkle gelatin over juice and let stand for 5 minutes to soften. Warm over low heat or microwave at medium (50% power) for 30 seconds or until gelatin has dissolved.
 
In food processor or blender, puree canned apricots; add lemon juice brandy, yogurt and gelatin mixture and process for 30 seconds or until combined.
 
Pour into parfait or stemmed glasses or champagne flutes. Cover and refrigerate until set, at least 1 hour or overnight.
 
Just before serving arrange fresh apricots on top. (If apricots are not available substitute kiwi slices or berries). Garnish each with a small spoonful of yogurt and sprinkling of brown sugar or mint.
216, Fresh Apricot Bavarian, None, 8, None, 5, 13, 0, The California Apricot Advisory Board, Serve in stemmed glasses and top with sliced apricots for elegant endings., Drop apricots into boiling water to cover. Return to boil and simmer for 5 minutes or until skins begin to split. Drain and rinse under cold water. Halve fruit and discard skins and pits. Puree apricots in electric blender. Combine water and gelatin in small saucepan; stir over low heat until dissolved. Mix sugar, apricot puree and yogurt with a wire whip until smooth; mix in dissolved gelatin. Sweeten to taste if desired. Chill mixture until thick. Spoon into stemmed glasses.

Note: One pound fresh apricots is 15 to 20. One and a half envelopes gelatin is 4 teaspoons.

CREATE TABLE `nutrition` (
  recipe_id INTEGER REFERENCES Recipe(recipe_id),
  protein REAL,
  carbo REAL,
  alcohol REAL,
  total_fat REAL,
  sat_fat REAL,
  cholestrl REAL,
  sodium REAL,
  iron REAL,
  vitamin_c REAL,
  vitamin_a REAL,
  fiber REAL,
  pcnt_cal_carb REAL,
  pcnt_cal_fat REAL,
  pcnt_cal_prot REAL,
  calories REAL
);
Sample rows from `nutrition`:
214, 5.47, 41.29, 0.0, 11.53, 2.21, 1.39, 260.78, 0.81, 8.89, 586.2, 0.87, 56.8, 35.68, 7.53, 290.79
215, 5.7, 23.75, 1.93, 1.08, 0.58, 3.48, 46.17, 0.57, 13.02, 2738.24, 0.62, 67.38, 6.89, 16.17, 141.01
216, 4.9, 26.88, 0.0, 1.1, 0.58, 3.46, 41.79, 0.37, 6.13, 1521.1, 0.34, 78.45, 7.24, 14.3, 137.06

","CREATE TABLE `Ingredient` (
  ingredient_id INTEGER,
  category TEXT,
  name TEXT,
  plural TEXT
);
Sample rows from `Ingredient`:
1, dairy, 1% lowfat cottage cheese, None
6, dairy, 1% lowfat milk, None
10, Mexican products, 10-inch flour tortilla, s

CREATE TABLE `Recipe` (
  recipe_id INTEGER,
  title TEXT,
  subtitle TEXT,
  servings INTEGER,
  yield_unit TEXT,
  prep_min INTEGER,
  cook_min INTEGER,
  stnd_min INTEGER,
  source TEXT,
  intro TEXT,
  directions TEXT
);
Sample rows from `Recipe`:
214, Raspberry Chiffon Pie, None, 10, 1 pie, 20, 8, 305, The California Tree Fruit Agreement, None, For crust, preheat oven to 375 degrees F.
In lightly greased 10-inch pie plate, combine graham cracker crumbs, melted butter and 1/4 cup sugar. Press evenly on bottom and up side of plate. Bake 5 minutes; cool.

For filling, in medium saucepan, combine juice or water and gelatin; let stand 5 minutes. Add 1/3 cup sugar and heat over medium heat, stirring to dissolve gelatin. In blender or food processor, puree 6 plums. Add puree and raspberries to gelatin mixture. Refrigerate until mixture begins to set about 1 hour. Stir yogurt into fruit mixture. In large bowl, beat egg whites until frothy. Gradually add cream of tartar and remaining 1/3 cup sugar and beat until stiff peaks form. Gently fold egg whites into fruit mixture so as not to reduce volume. Spoon into crust. Refrigerate 4 hours or overnight. Thinly slice remaining 2 plums and garnish top of pie.
215, Apricot Yogurt Parfaits, None, 4, None, 5, 2, 65, Produce for Better Health Foundation and 5 a Day, None, Drain canned apricots, pour 1/4 cup of the juice into saucepan or microwave-safe dish. Sprinkle gelatin over juice and let stand for 5 minutes to soften. Warm over low heat or microwave at medium (50% power) for 30 seconds or until gelatin has dissolved.
 
In food processor or blender, puree canned apricots; add lemon juice brandy, yogurt and gelatin mixture and process for 30 seconds or until combined.
 
Pour into parfait or stemmed glasses or champagne flutes. Cover and refrigerate until set, at least 1 hour or overnight.
 
Just before serving arrange fresh apricots on top. (If apricots are not available substitute kiwi slices or berries). Garnish each with a small spoonful of yogurt and sprinkling of brown sugar or mint.
216, Fresh Apricot Bavarian, None, 8, None, 5, 13, 0, The California Apricot Advisory Board, Serve in stemmed glasses and top with sliced apricots for elegant endings., Drop apricots into boiling water to cover. Return to boil and simmer for 5 minutes or until skins begin to split. Drain and rinse under cold water. Halve fruit and discard skins and pits. Puree apricots in electric blender. Combine water and gelatin in small saucepan; stir over low heat until dissolved. Mix sugar, apricot puree and yogurt with a wire whip until smooth; mix in dissolved gelatin. Sweeten to taste if desired. Chill mixture until thick. Spoon into stemmed glasses.

Note: One pound fresh apricots is 15 to 20. One and a half envelopes gelatin is 4 teaspoons.

CREATE TABLE `Nutrition` (
  recipe_id INTEGER REFERENCES Recipe(recipe_id),
  protein REAL,
  carbo REAL,
  alcohol REAL,
  total_fat REAL,
  sat_fat REAL,
  cholestrl REAL,
  sodium REAL,
  iron REAL,
  vitamin_c REAL,
  vitamin_a REAL,
  fiber REAL,
  pcnt_cal_carb REAL,
  pcnt_cal_fat REAL,
  pcnt_cal_prot REAL,
  calories REAL
);
Sample rows from `Nutrition`:
214, 5.47, 41.29, 0.0, 11.53, 2.21, 1.39, 260.78, 0.81, 8.89, 586.2, 0.87, 56.8, 35.68, 7.53, 290.79
215, 5.7, 23.75, 1.93, 1.08, 0.58, 3.48, 46.17, 0.57, 13.02, 2738.24, 0.62, 67.38, 6.89, 16.17, 141.01
216, 4.9, 26.88, 0.0, 1.1, 0.58, 3.46, 41.79, 0.37, 6.13, 1521.1, 0.34, 78.45, 7.24, 14.3, 137.06

CREATE TABLE `Quantity` (
  quantity_id INTEGER,
  recipe_id INTEGER REFERENCES Nutrition(recipe_id) REFERENCES Recipe(recipe_id),
  ingredient_id INTEGER REFERENCES Ingredient(ingredient_id),
  max_qty REAL,
  min_qty REAL,
  unit TEXT,
  preparation TEXT,
  optional TEXT
);
Sample rows from `Quantity`:
1, 214, 1613, 2.0, 2.0, cup(s), None, FALSE
2, 214, 3334, 0.25, 0.25, cup(s), None, FALSE
3, 214, 2222, 0.5, 0.5, cup(s), melted, FALSE

","recipe, nutrition","nutrition.total_fat, recipe.recipe_id, nutrition.recipe_id, recipe.title","Ingredient, Recipe, Nutrition, Quantity"
app_store,"For the Honkai Impact 3rd App, what is the highest sentiment polarity score and what genre does it belong to?","SELECT MAX(t2.sentiment_polarity), t1.genres FROM playstore as t1 inner JOIN user_reviews as t2 ON t1.app = t2.app WHERE t1.app = 'Honkai Impact 3rd' AND t2.sentiment_polarity > 0.5 GROUP BY t1.genres","CREATE TABLE `playstore` (
  App TEXT,
  Category TEXT,
  Rating REAL,
  Reviews INTEGER,
  Size TEXT,
  Installs TEXT,
  Type TEXT,
  Price TEXT,
  Content Rating TEXT,
  Genres TEXT
);
Sample rows from `playstore`:
Photo Editor & Candy Camera & Grid & ScrapBook, ART_AND_DESIGN, 4.1, 159, 19M, 10,000+, Free, 0, Everyone, Art & Design
Coloring book moana, ART_AND_DESIGN, 3.9, 967, 14M, 500,000+, Free, 0, Everyone, Art & Design;Pretend Play
U Launcher Lite – FREE Live Cool Themes, Hide Apps, ART_AND_DESIGN, 4.7, 87510, 8.7M, 5,000,000+, Free, 0, Everyone, Art & Design

CREATE TABLE `user_reviews` (
  App TEXT REFERENCES playstore(App),
  Translated_Review TEXT,
  Sentiment TEXT,
  Sentiment_Polarity TEXT,
  Sentiment_Subjectivity TEXT
);
Sample rows from `user_reviews`:
10 Best Foods for You, I like eat delicious food. That's I'm cooking food myself, case ""10 Best Foods"" helps lot, also ""Best Before (Shelf Life)"", Positive, 1.0, 0.5333333333333333
10 Best Foods for You, This help eating healthy exercise regular basis, Positive, 0.25, 0.28846153846153844
10 Best Foods for You, nan, nan, nan, nan

","CREATE TABLE `playstore` (
  App TEXT,
  Category TEXT,
  Rating REAL,
  Reviews INTEGER,
  Size TEXT,
  Installs TEXT,
  Type TEXT,
  Price TEXT,
  Content Rating TEXT,
  Genres TEXT
);
Sample rows from `playstore`:
Photo Editor & Candy Camera & Grid & ScrapBook, ART_AND_DESIGN, 4.1, 159, 19M, 10,000+, Free, 0, Everyone, Art & Design
Coloring book moana, ART_AND_DESIGN, 3.9, 967, 14M, 500,000+, Free, 0, Everyone, Art & Design;Pretend Play
U Launcher Lite – FREE Live Cool Themes, Hide Apps, ART_AND_DESIGN, 4.7, 87510, 8.7M, 5,000,000+, Free, 0, Everyone, Art & Design

CREATE TABLE `user_reviews` (
  App TEXT REFERENCES playstore(App),
  Translated_Review TEXT,
  Sentiment TEXT,
  Sentiment_Polarity TEXT,
  Sentiment_Subjectivity TEXT
);
Sample rows from `user_reviews`:
10 Best Foods for You, I like eat delicious food. That's I'm cooking food myself, case ""10 Best Foods"" helps lot, also ""Best Before (Shelf Life)"", Positive, 1.0, 0.5333333333333333
10 Best Foods for You, This help eating healthy exercise regular basis, Positive, 0.25, 0.28846153846153844
10 Best Foods for You, nan, nan, nan, nan

","playstore, user_reviews","user_reviews.sentiment_polarity, playstore.genres, playstore.app, user_reviews.app","playstore, user_reviews"
mental_health_survey,"Provide the number of users who took part in the ""mental health survey for 2016"".",SELECT COUNT(DISTINCT t1.userid) FROM answer as t1 inner JOIN survey as t2 ON t1.surveyID = t2.surveyID WHERE t2.description = 'mental health survey for 2016',"CREATE TABLE `answer` (
  AnswerText TEXT,
  SurveyID INTEGER REFERENCES Survey(None),
  UserID INTEGER PRIMARY KEY,
  QuestionID INTEGER PRIMARY KEY REFERENCES Question(None)
);
Sample rows from `answer`:
37, 2014, 1, 1
44, 2014, 2, 1
32, 2014, 3, 1

CREATE TABLE `survey` (
  SurveyID INTEGER,
  Description TEXT
);
Sample rows from `survey`:
2014, mental health survey for 2014
2016, mental health survey for 2016
2017, mental health survey for 2017

","CREATE TABLE `Question` (
  questiontext TEXT,
  questionid INTEGER
);
Sample rows from `Question`:
What is your age?, 1
What is your gender?, 2
What country do you live in?, 3

CREATE TABLE `Survey` (
  SurveyID INTEGER,
  Description TEXT
);
Sample rows from `Survey`:
2014, mental health survey for 2014
2016, mental health survey for 2016
2017, mental health survey for 2017

CREATE TABLE `Answer` (
  AnswerText TEXT,
  SurveyID INTEGER REFERENCES Survey(None),
  UserID INTEGER PRIMARY KEY,
  QuestionID INTEGER PRIMARY KEY REFERENCES Question(None)
);
Sample rows from `Answer`:
37, 2014, 1, 1
44, 2014, 2, 1
32, 2014, 3, 1

","answer, survey","answer.userid, answer.surveyID, survey.surveyID, survey.description","Question, Survey, Answer"
shakespeare,"What is the character and work ID of the text ""Fear not thou, man, thou shalt lose nothing here.""?","SELECT t2.character_id, t1.work_id FROM chapters as t1 inner JOIN paragraphs as t2 ON t1.id = t2.chapter_id WHERE t2.plaintext = 'Fear not thou, man, thou shalt lose nothing here.'","CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

","CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
chapters, 19648
characters, 1266
paragraphs, 666327

CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

","chapters, paragraphs","paragraphs.character_id, chapters.work_id, chapters.id, paragraphs.chapter_id, paragraphs.plaintext","chapters, sqlite_sequence, characters, paragraphs, works"
retail_world,How many orders were from Hanna Moos company in 1999?,"SELECT COUNT(t2.orderid) FROM customers as t1 inner JOIN orders as t2 ON t1.customerid = t2.customerid WHERE strftime('%Y', t2.orderdate) = '1999' AND t1.companyname = 'Hanna Moos'","CREATE TABLE `customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

","customers, orders","orders.orderid, customers.customerid, orders.customerid, orders.orderdate, customers.companyname","sqlite_sequence, Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails"
food_inspection,Which establishment has the highest number of inspections done? Give the name of the establishment and calculate for its average score per inspection.,"SELECT t2.name, AVG(t1.score) FROM inspections as t1 inner JOIN businesses as t2 ON t1.business_id = t2.business_id GROUP BY t2.name ORDER BY COUNT(t2.business_id) DESC LIMIT 1","CREATE TABLE `inspections` (
  business_id INTEGER REFERENCES businesses(business_id),
  score INTEGER,
  date DATE,
  type TEXT
);
Sample rows from `inspections`:
10, 92, 2014-01-14, Routine - Unscheduled
10, None, 2014-01-24, Reinspection/Followup
10, 94, 2014-07-29, Routine - Unscheduled

CREATE TABLE `businesses` (
  business_id INTEGER,
  name TEXT,
  address TEXT,
  city TEXT,
  postal_code TEXT,
  latitude REAL,
  longitude REAL,
  phone_number INTEGER,
  tax_code TEXT,
  business_certificate INTEGER,
  application_date DATE,
  owner_name TEXT,
  owner_address TEXT,
  owner_city TEXT,
  owner_state TEXT,
  owner_zip TEXT
);
Sample rows from `businesses`:
10, Tiramisu Kitchen, 033 Belden Pl, San Francisco, 94104, 37.7911, -122.404, None, H24, 779059, None, Tiramisu LLC, 33 Belden St, San Francisco, CA, 94104
24, OMNI S.F. Hotel - 2nd Floor Pantry, 500 California St, 2nd  Floor, San Francisco, 94104, 37.7929, -122.403, None, H24, 352312, None, OMNI San Francisco Hotel Corp, 500 California St, 2nd Floor, San Francisco, CA, 94104
31, Norman's Ice Cream and Freezes, 2801 Leavenworth St, San Francisco, 94133, 37.8072, -122.419, None, H24, 346882, None, Norman Antiforda, 2801 Leavenworth St, San Francisco, CA, 94133

","CREATE TABLE `businesses` (
  business_id INTEGER,
  name TEXT,
  address TEXT,
  city TEXT,
  postal_code TEXT,
  latitude REAL,
  longitude REAL,
  phone_number INTEGER,
  tax_code TEXT,
  business_certificate INTEGER,
  application_date DATE,
  owner_name TEXT,
  owner_address TEXT,
  owner_city TEXT,
  owner_state TEXT,
  owner_zip TEXT
);
Sample rows from `businesses`:
10, Tiramisu Kitchen, 033 Belden Pl, San Francisco, 94104, 37.7911, -122.404, None, H24, 779059, None, Tiramisu LLC, 33 Belden St, San Francisco, CA, 94104
24, OMNI S.F. Hotel - 2nd Floor Pantry, 500 California St, 2nd  Floor, San Francisco, 94104, 37.7929, -122.403, None, H24, 352312, None, OMNI San Francisco Hotel Corp, 500 California St, 2nd Floor, San Francisco, CA, 94104
31, Norman's Ice Cream and Freezes, 2801 Leavenworth St, San Francisco, 94133, 37.8072, -122.419, None, H24, 346882, None, Norman Antiforda, 2801 Leavenworth St, San Francisco, CA, 94133

CREATE TABLE `inspections` (
  business_id INTEGER REFERENCES businesses(business_id),
  score INTEGER,
  date DATE,
  type TEXT
);
Sample rows from `inspections`:
10, 92, 2014-01-14, Routine - Unscheduled
10, None, 2014-01-24, Reinspection/Followup
10, 94, 2014-07-29, Routine - Unscheduled

CREATE TABLE `violations` (
  business_id INTEGER REFERENCES businesses(business_id),
  date DATE,
  violation_type_id TEXT,
  risk_category TEXT,
  description TEXT
);
Sample rows from `violations`:
10, 2014-07-29, 103129, Moderate Risk, Insufficient hot water or running water
10, 2014-07-29, 103144, Low Risk, Unapproved or unmaintained equipment or utensils
10, 2014-01-14, 103119, Moderate Risk, Inadequate and inaccessible handwashing facilities

","inspections, businesses","businesses.name, inspections.score, inspections.business_id, businesses.business_id","businesses, inspections, violations"
public_review_platform,"List down the business ID and attribute value of the attribute name of ""payment_types_visa"".","SELECT t2.business_id, t2.attribute_value FROM attributes as t1 inner JOIN Business_attributes as t2 ON t1.attribute_id = t2.attribute_id WHERE t1.attribute_name = 'payment_types_visa'","CREATE TABLE `attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Business_attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_attributes`:
1, 2, none
1, 3, none
1, 13, none

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","attributes, Business_attributes","Business_attributes.business_id, Business_attributes.attribute_value, attributes.attribute_id, Business_attributes.attribute_id, attributes.attribute_name","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
public_review_platform,What is the category of the business with short review length and highest review stars within business ID from 7 to 14?,SELECT DISTINCT t3.category_name FROM reviews as t1 inner JOIN business_categories as t2 ON t1.business_id = t2.business_id inner JOIN categories as t3 ON t2.category_id = t3.category_id WHERE t2.business_id >= 7 AND t2.business_id < 15 AND t1.review_length = 'Short' AND t1.review_stars = ( SELECT MAX(review_stars) FROM reviews ),"CREATE TABLE `reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `business_categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `business_categories`:
1, 8
1, 143
2, 18

CREATE TABLE `categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","reviews, business_categories, categories","categories.category_name, reviews.business_id, business_categories.business_id, business_categories.category_id, categories.category_id, reviews.review_length, reviews.review_stars, review_stars","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
public_review_platform,"Based on business in Phoenix, calculate the percentage of business with low funny votes.",SELECT cast(SUM(case when t2.review_votes_funny = 'Low' then 1 else 0 end) as real) * 100 / COUNT(t1.business_id) FROM business as t1 inner JOIN reviews as t2 ON t1.business_id = t2.business_id WHERE t1.city = 'Phoenix',"CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","business, reviews","reviews.review_votes_funny, business.business_id, reviews.business_id, business.city","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
public_review_platform,List the closing time and day of week of active businesses in Scottsdale with stars greater than the 60% of average age of star rating.,"SELECT t2.closing_time, t3.day_of_week FROM business as t1 inner JOIN business_Hours as t2 ON t1.business_id = t2.business_id inner JOIN days as t3 ON t2.day_id = t3.day_id WHERE t1.city LIKE 'Scottsdale' AND t1.active LIKE 'TRUE' AND t1.stars > 0.6 * ( SELECT AVG(t1.stars) FROM business as t1 inner JOIN business_Hours as t2 ON t1.business_id = t2.business_id inner JOIN days as t3 ON t2.day_id = t3.day_id WHERE t1.city LIKE 'Scottsdale' AND t1.active LIKE 'TRUE' )","CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `days`:
1, Sunday
2, Monday
3, Tuesday

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","business, business_Hours, days","business_Hours.closing_time, days.day_of_week, business.business_id, business_Hours.business_id, business_Hours.day_id, days.day_id, business.city, business.active, business.stars","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
airline,Give the number of planes that took off from Los Angeles International airport on 2018/8/27.,"SELECT SUM(case when t2.fl_date = '2018/8/27' then 1 else 0 end) as count FROM airports as t1 inner JOIN airlines as t2 ON t1.code = t2.origin WHERE t1.description = 'Los Angeles, CA: Los Angeles International'","CREATE TABLE `airports` (
  Code TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `airports`:
01A, Afognak Lake, AK: Afognak Lake Airport
03A, Granite Mountain, AK: Bear Creek Mining Strip
04A, Lik, AK: Lik Mining Camp

CREATE TABLE `airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

","CREATE TABLE `Air Carriers` (
  Code INTEGER,
  Description TEXT
);
Sample rows from `Air Carriers`:
19031, Mackey International Inc.: MAC
19032, Munz Northern Airlines Inc.: XY
19033, Cochise Airlines Inc.: COC

CREATE TABLE `Airports` (
  Code TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `Airports`:
01A, Afognak Lake, AK: Afognak Lake Airport
03A, Granite Mountain, AK: Bear Creek Mining Strip
04A, Lik, AK: Lik Mining Camp

CREATE TABLE `Airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `Airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

","airports, airlines","airlines.fl_date, airports.code, airlines.origin, airports.description","Air Carriers, Airports, Airlines"
cars,List the name of the cars with model year 1975.,SELECT t1.car_name FROM data as t1 inner JOIN production as t2 ON t1.id = t2.id WHERE t2.model_year = 1975,"CREATE TABLE `data` (
  ID INTEGER REFERENCES price(ID),
  mpg REAL,
  cylinders INTEGER,
  displacement REAL,
  horsepower INTEGER,
  weight INTEGER,
  acceleration REAL,
  model INTEGER,
  car_name TEXT
);
Sample rows from `data`:
1, 18.0, 8, 307.0, 130, 3504, 12.0, 70, chevrolet chevelle malibu
2, 15.0, 8, 350.0, 165, 3693, 11.5, 70, buick skylark 320
3, 18.0, 8, 318.0, 150, 3436, 11.0, 70, plymouth satellite

CREATE TABLE `production` (
  ID INTEGER PRIMARY KEY REFERENCES price(ID) REFERENCES data(ID),
  model_year INTEGER PRIMARY KEY,
  country INTEGER REFERENCES country(origin)
);
Sample rows from `production`:
1, 1970, 1
1, 1971, 1
2, 1970, 1

","CREATE TABLE `country` (
  origin INTEGER,
  country TEXT
);
Sample rows from `country`:
1, USA
2, Europe
3, Japan

CREATE TABLE `price` (
  ID INTEGER,
  price REAL
);
Sample rows from `price`:
1, 25561.59078
2, 24221.42273
3, 27240.84373

CREATE TABLE `data` (
  ID INTEGER REFERENCES price(ID),
  mpg REAL,
  cylinders INTEGER,
  displacement REAL,
  horsepower INTEGER,
  weight INTEGER,
  acceleration REAL,
  model INTEGER,
  car_name TEXT
);
Sample rows from `data`:
1, 18.0, 8, 307.0, 130, 3504, 12.0, 70, chevrolet chevelle malibu
2, 15.0, 8, 350.0, 165, 3693, 11.5, 70, buick skylark 320
3, 18.0, 8, 318.0, 150, 3436, 11.0, 70, plymouth satellite

CREATE TABLE `production` (
  ID INTEGER PRIMARY KEY REFERENCES price(ID) REFERENCES data(ID),
  model_year INTEGER PRIMARY KEY,
  country INTEGER REFERENCES country(origin)
);
Sample rows from `production`:
1, 1970, 1
1, 1971, 1
2, 1970, 1

","data, production","data.car_name, data.id, production.id, production.model_year","country, price, data, production"
shipping,How many of the shipments bound for New York City were shipped to Harry's Hot Rod Auto and Truck Accessories?,SELECT COUNT(*) FROM customer as t1 inner JOIN shipment as t2 ON t1.cust_id = t2.cust_id inner JOIN city as t3 ON t3.city_id = t2.city_id WHERE t3.city_name = 'New York' AND t1.cust_name = 'Harry''s Hot Rod Auto & Truck Accessories',"CREATE TABLE `customer` (
  cust_id INTEGER,
  cust_name TEXT,
  annual_revenue INTEGER,
  cust_type TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip REAL,
  phone TEXT
);
Sample rows from `customer`:
193, Advanced Fabricators, 39588651, manufacturer, 5141 Summit Boulevard, West Palm Beach, FL, 33415.0, (561) 683-3535
304, Pard's Trailer Sales, 17158109, wholesaler, 5910 South 300 West, Salt Lake City, UT, 84107.0, (801) 262-4864
314, Saar Enterprises, Inc., 47403613, retailer, 11687 192nd Street, Council Bluffs, IA, 51503.0, (712) 366-4929

CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

CREATE TABLE `city` (
  city_id INTEGER,
  city_name TEXT,
  state TEXT,
  population INTEGER,
  area REAL
);
Sample rows from `city`:
100, Union City, New Jersey, 67088, 1.3
101, Huntington Park, California, 61348, 3.0
102, Passaic, New Jersey, 67861, 3.1

","CREATE TABLE `city` (
  city_id INTEGER,
  city_name TEXT,
  state TEXT,
  population INTEGER,
  area REAL
);
Sample rows from `city`:
100, Union City, New Jersey, 67088, 1.3
101, Huntington Park, California, 61348, 3.0
102, Passaic, New Jersey, 67861, 3.1

CREATE TABLE `customer` (
  cust_id INTEGER,
  cust_name TEXT,
  annual_revenue INTEGER,
  cust_type TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip REAL,
  phone TEXT
);
Sample rows from `customer`:
193, Advanced Fabricators, 39588651, manufacturer, 5141 Summit Boulevard, West Palm Beach, FL, 33415.0, (561) 683-3535
304, Pard's Trailer Sales, 17158109, wholesaler, 5910 South 300 West, Salt Lake City, UT, 84107.0, (801) 262-4864
314, Saar Enterprises, Inc., 47403613, retailer, 11687 192nd Street, Council Bluffs, IA, 51503.0, (712) 366-4929

CREATE TABLE `driver` (
  driver_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip_code INTEGER,
  phone TEXT
);
Sample rows from `driver`:
20, Sue, Newell, 268 Richmond Ave, Memphis, TN, 38106, (901) 774-6569
21, Andrea, Simons, 3574 Oak Limb Cv, Memphis, TN, 38135, (901) 384-0984
22, Roger, McHaney, 1839 S Orleans St, Memphis, TN, 38106, (901) 948-1043

CREATE TABLE `truck` (
  truck_id INTEGER,
  make TEXT,
  model_year INTEGER
);
Sample rows from `truck`:
1, Peterbilt, 2005
2, Mack, 2006
3, Peterbilt, 2007

CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

","customer, shipment, city","customer.cust_id, shipment.cust_id, city.city_id, shipment.city_id, city.city_name, customer.cust_name","city, customer, driver, truck, shipment"
simpson_episodes,"What is the percentage of star score 5 that was collected by title ""Sex, Pies and Idiot Scrapes""?","SELECT cast(SUM(case when t2.stars = 5 then 1 else 0 end) as real) * 100 / COUNT(*) FROM episode as t1 inner JOIN vote as t2 ON t2.episode_id = t1.episode_id WHERE t1.title = 'Sex, Pies and Idiot Scrapes';","CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","episode, vote","vote.stars, vote.episode_id, episode.episode_id, episode.title","Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
bike_share_1,What is the average coldest temperature for the zip code of 94301 and what stations are within the zip code? Include the latitude and longitude as well.,"SELECT AVG(t3.min_temperature_f), t1.long, t1.lat FROM station as t1 inner JOIN trip as t2 ON t2.start_station_name = t1.name inner JOIN weather as t3 ON t3.zip_code = t2.zip_code WHERE t3.zip_code = 94301","CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat REAL,
  long REAL,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);
Sample rows from `station`:
2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013
3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013
4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013

CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);
Sample rows from `trip`:
4069, 174, 8/29/2013 9:08, 2nd at South Park, 64, 8/29/2013 9:11, 2nd at South Park, 64, 288, Subscriber, 94114
4073, 1067, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:42, San Francisco Caltrain 2 (330 Townsend), 69, 321, Subscriber, 94703
4074, 1131, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:43, San Francisco Caltrain 2 (330 Townsend), 69, 317, Subscriber, 94115

CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches REAL,
  mean_sea_level_pressure_inches REAL,
  min_sea_level_pressure_inches REAL,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches TEXT,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code TEXT
);
Sample rows from `weather`:
8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107
8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30.0, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107
8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30.0, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107

","CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat REAL,
  long REAL,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);
Sample rows from `station`:
2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013
3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013
4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013

CREATE TABLE `status` (
  station_id INTEGER,
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);
Sample rows from `status`:
2, 2, 25, 2013/08/29 12:06:01
2, 2, 25, 2013/08/29 12:07:01
2, 2, 25, 2013/08/29 12:08:01

CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);
Sample rows from `trip`:
4069, 174, 8/29/2013 9:08, 2nd at South Park, 64, 8/29/2013 9:11, 2nd at South Park, 64, 288, Subscriber, 94114
4073, 1067, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:42, San Francisco Caltrain 2 (330 Townsend), 69, 321, Subscriber, 94703
4074, 1131, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:43, San Francisco Caltrain 2 (330 Townsend), 69, 317, Subscriber, 94115

CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches REAL,
  mean_sea_level_pressure_inches REAL,
  min_sea_level_pressure_inches REAL,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches TEXT,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code TEXT
);
Sample rows from `weather`:
8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107
8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30.0, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107
8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30.0, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107

","station, trip, weather","weather.min_temperature_f, station.long, station.lat, trip.start_station_name, station.name, weather.zip_code, trip.zip_code","station, status, trip, weather"
video_games,State the region id of Japan.,SELECt t.id FROM region as t WHERE t.region_name = 'Japan',"CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

","CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

",region,"region.id, region.region_name","genre, game, platform, publisher, game_publisher, game_platform, region, region_sales"
disney,"Who is the villain of the movie ""Beauty and the Beast""?",SELECT villian FROM characters WHERE movie_title = 'Beauty and the Beast',"CREATE TABLE `characters` (
  movie_title TEXT PRIMARY KEY,
  release_date TEXT,
  hero TEXT REFERENCES voice-actors(character),
  villian TEXT,
  song TEXT
);
Sample rows from `characters`:
Snow White and the Seven Dwarfs, 21-Dec-37, Snow White, Evil Queen, Some Day My Prince Will Come
Pinocchio, 7-Feb-40, Pinocchio, Stromboli, When You Wish upon a Star
Fantasia, 13-Nov-40, None, Chernabog, None

","CREATE TABLE `characters` (
  movie_title TEXT PRIMARY KEY,
  release_date TEXT,
  hero TEXT REFERENCES voice-actors(character),
  villian TEXT,
  song TEXT
);
Sample rows from `characters`:
Snow White and the Seven Dwarfs, 21-Dec-37, Snow White, Evil Queen, Some Day My Prince Will Come
Pinocchio, 7-Feb-40, Pinocchio, Stromboli, When You Wish upon a Star
Fantasia, 13-Nov-40, None, Chernabog, None

CREATE TABLE `director` (
  name TEXT PRIMARY KEY REFERENCES characters(movie_title),
  director TEXT
);
Sample rows from `director`:
Snow White and the Seven Dwarfs, David Hand
Pinocchio, Ben Sharpsteen
Fantasia, full credits

CREATE TABLE `movies_total_gross` (
  movie_title TEXT PRIMARY KEY REFERENCES characters(movie_title),
  release_date TEXT PRIMARY KEY,
  genre TEXT,
  MPAA_rating TEXT,
  total_gross TEXT,
  inflation_adjusted_gross TEXT
);
Sample rows from `movies_total_gross`:
Snow White and the Seven Dwarfs, Dec 21, 1937, Musical, G, $184,925,485, $5,228,953,251
Pinocchio, Feb 9, 1940, Adventure, G, $84,300,000, $2,188,229,052
Fantasia, Nov 13, 1940, Musical, G, $83,320,000, $2,187,090,808

CREATE TABLE `revenue` (
  Year INTEGER,
  Studio Entertainment[NI 1] REAL,
  Disney Consumer Products[NI 2] REAL,
  Disney Interactive[NI 3][Rev 1] INTEGER,
  Walt Disney Parks and Resorts REAL,
  Disney Media Networks TEXT,
  Total INTEGER
);
Sample rows from `revenue`:
1991, 2593.0, 724.0, None, 2794.0, None, 6111
1992, 3115.0, 1081.0, None, 3306.0, None, 7502
1993, 3673.4, 1415.1, None, 3440.7, None, 8529

CREATE TABLE `voice-actors` (
  character TEXT PRIMARY KEY,
  voice-actor TEXT,
  movie TEXT REFERENCES characters(movie_title)
);
Sample rows from `voice-actors`:
Abby Mallard, Joan Cusack, Chicken Little
Abigail Gabble, Monica Evans, The Aristocats
Abis Mal, Jason Alexander, The Return of Jafar

",characters,"villian, movie_title","characters, director, movies_total_gross, revenue, voice-actors"
regional_sales,Calculate the total net profit of the store located in highest median income city.,"SELECT SUM(replace(t1.`unit price`, ',', '') - replace(t1.`unit cost`, ',', '')) FROM `sales orders` as t1 inner JOIN `store locations` as t2 ON t2.storeID = t1._storeID ORDER BY t2.`median income` DESC LIMIT 1","CREATE TABLE `sales orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `sales orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

CREATE TABLE `store locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `store locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  Customer Names TEXT
);
Sample rows from `Customers`:
1, Avon Corp
2, WakeFern 
3, Elorac, Corp

CREATE TABLE `Products` (
  ProductID INTEGER,
  Product Name TEXT
);
Sample rows from `Products`:
1, Cookware
2, Photo Frames
3, Table Lamps

CREATE TABLE `Regions` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `Regions`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `Sales Team` (
  SalesTeamID INTEGER,
  Sales Team TEXT,
  Region TEXT
);
Sample rows from `Sales Team`:
1, Adam Hernandez, Northeast
2, Keith Griffin, Northeast
3, Jerry Green, West

CREATE TABLE `Store Locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `Store Locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

CREATE TABLE `Sales Orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `Sales Orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

","sales orders, store locations","sales orders.unit price, sales orders.unit cost, store locations.storeID, sales orders._storeID, store locations.median income","Customers, Products, Regions, Sales Team, Store Locations, Sales Orders"
world,What is the capital city of the Philippines?,SELECT t1.capital FROM country as t1 inner JOIN city as t2 ON t1.code = t2.countrycode WHERE t1.name = 'Philipiines',"CREATE TABLE `country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

CREATE TABLE `city` (
  ID INTEGER,
  Name TEXT,
  CountryCode TEXT REFERENCES Country(Code),
  District TEXT,
  Population INTEGER
);
Sample rows from `city`:
1, Kabul, AFG, Kabol, 1780000
2, Qandahar, AFG, Qandahar, 237500
3, Herat, AFG, Herat, 186800

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
City, 4079

CREATE TABLE `City` (
  ID INTEGER,
  Name TEXT,
  CountryCode TEXT REFERENCES Country(Code),
  District TEXT,
  Population INTEGER
);
Sample rows from `City`:
1, Kabul, AFG, Kabol, 1780000
2, Qandahar, AFG, Qandahar, 237500
3, Herat, AFG, Herat, 186800

CREATE TABLE `Country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `Country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

CREATE TABLE `CountryLanguage` (
  CountryCode TEXT PRIMARY KEY REFERENCES Country(Code),
  Language TEXT PRIMARY KEY,
  IsOfficial TEXT,
  Percentage REAL
);
Sample rows from `CountryLanguage`:
ABW, Dutch, T, 5.3
ABW, English, F, 9.5
ABW, Papiamento, F, 76.7

","country, city","country.capital, country.code, city.countrycode, country.name","sqlite_sequence, City, Country, CountryLanguage"
student_loan,List any five female students' names who enlisted for the air force.,SELECT t1.name FROM enlist as t1 left JOIN male as t2 ON t2.name = t1.name WHERE t2.name is null AND t1.organ = 'air_force' LIMIT 5,"CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

","enlist, male","enlist.name, male.name, enlist.organ","bool, person, disabled, enlist, filed_for_bankrupcy, longest_absense_from_school, male, no_payment_due, unemployed, enrolled"
public_review_platform,"How many ""5"" star reviews does the Yelp business No. ""10682"" get?",SELECT COUNT(review_length) FROM reviews WHERE business_id = 10682 AND review_stars = 5,"CREATE TABLE `reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

",reviews,"review_length, business_id, review_stars","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
restaurant,List street names in San Francisco city.,SELECT street_name FROM location WHERE city = 'San Francisco',"CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

","CREATE TABLE `geographic` (
  city TEXT PRIMARY KEY,
  county TEXT,
  region TEXT
);
Sample rows from `geographic`:
alameda, alameda county, bay area
alamo, contra costa county, bay area
albany, alameda county, bay area

CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

",location,"street_name, city","geographic, generalinfo, location"
mental_health_survey,"In 2019, how many users in the United States have a family history of mental illness?",SELECT COUNT(t1.userid) FROM answer as t1 inner JOIN ( SELECT t2.questionid FROM answer as t1 inner JOIN question as t2 ON t1.questionID = t2.questionid WHERE t1.surveyid = 2019 AND t2.questionid = 6 AND t1.answerText LIKE 'Yes' ) as t2 ON t1.questionID = t2.questionid WHERE t1.surveyid = 2019 AND t2.questionid = 3 AND t1.answerText LIKE 'United States',"CREATE TABLE `answer` (
  AnswerText TEXT,
  SurveyID INTEGER REFERENCES Survey(None),
  UserID INTEGER PRIMARY KEY,
  QuestionID INTEGER PRIMARY KEY REFERENCES Question(None)
);
Sample rows from `answer`:
37, 2014, 1, 1
44, 2014, 2, 1
32, 2014, 3, 1

CREATE TABLE `question` (
  questiontext TEXT,
  questionid INTEGER
);
Sample rows from `question`:
What is your age?, 1
What is your gender?, 2
What country do you live in?, 3

","CREATE TABLE `Question` (
  questiontext TEXT,
  questionid INTEGER
);
Sample rows from `Question`:
What is your age?, 1
What is your gender?, 2
What country do you live in?, 3

CREATE TABLE `Survey` (
  SurveyID INTEGER,
  Description TEXT
);
Sample rows from `Survey`:
2014, mental health survey for 2014
2016, mental health survey for 2016
2017, mental health survey for 2017

CREATE TABLE `Answer` (
  AnswerText TEXT,
  SurveyID INTEGER REFERENCES Survey(None),
  UserID INTEGER PRIMARY KEY,
  QuestionID INTEGER PRIMARY KEY REFERENCES Question(None)
);
Sample rows from `Answer`:
37, 2014, 1, 1
44, 2014, 2, 1
32, 2014, 3, 1

","answer, question","answer.userid, question.questionid, answer.questionID, answer.surveyid, answer.answerText","Question, Survey, Answer"
university,How many universities scored 40 in teaching criteria?,SELECT COUNT(*) FROM ranking_criteria as t1 inner JOIN university_ranking_year as t2 ON t1.id = t2.ranking_criteria_id WHERE t2.score = 40 AND t1.criteria_name = 'Teaching' AND t2.score = 40,"CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

","CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

CREATE TABLE `ranking_system` (
  id INTEGER,
  system_name TEXT
);
Sample rows from `ranking_system`:
1, Times Higher Education World University Ranking
2, Shanghai Ranking
3, Center for World University Rankings

CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

","ranking_criteria, university_ranking_year","ranking_criteria.id, university_ranking_year.ranking_criteria_id, university_ranking_year.score, ranking_criteria.criteria_name","country, ranking_system, ranking_criteria, university, university_ranking_year, university_year"
airline,What is the description of the airline code 19049?,SELECT description FROM `air carriers` WHERE code = 19049,"CREATE TABLE `air carriers` (
  Code INTEGER,
  Description TEXT
);
Sample rows from `air carriers`:
19031, Mackey International Inc.: MAC
19032, Munz Northern Airlines Inc.: XY
19033, Cochise Airlines Inc.: COC

","CREATE TABLE `Air Carriers` (
  Code INTEGER,
  Description TEXT
);
Sample rows from `Air Carriers`:
19031, Mackey International Inc.: MAC
19032, Munz Northern Airlines Inc.: XY
19033, Cochise Airlines Inc.: COC

CREATE TABLE `Airports` (
  Code TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `Airports`:
01A, Afognak Lake, AK: Afognak Lake Airport
03A, Granite Mountain, AK: Bear Creek Mining Strip
04A, Lik, AK: Lik Mining Camp

CREATE TABLE `Airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `Airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

",air carriers,"description, code","Air Carriers, Airports, Airlines"
restaurant,How many restaurants have more than 4 star reviews?,SELECT COUNT(id_restaurant) as cnt FROM generalinfo WHERE review > 4,"CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

","CREATE TABLE `geographic` (
  city TEXT PRIMARY KEY,
  county TEXT,
  region TEXT
);
Sample rows from `geographic`:
alameda, alameda county, bay area
alamo, contra costa county, bay area
albany, alameda county, bay area

CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

",generalinfo,"id_restaurant, review","geographic, generalinfo, location"
software_company,"Among the male customers, how many of them come from a place with over 30,000 inhabitants?",SELECT COUNT(t1.geoid) FROM customers as t1 inner JOIN demog as t2 ON t1.geoid = t2.geoid WHERE t1.sex = 'Male' AND t2.inhabitants_k > 30,"CREATE TABLE `customers` (
  ID INTEGER,
  SEX TEXT,
  MARITAL_STATUS TEXT,
  GEOID INTEGER REFERENCES Demog(None),
  EDUCATIONNUM INTEGER,
  OCCUPATION TEXT,
  age INTEGER
);
Sample rows from `customers`:
0, Male, Never-married, 61, 7, Machine-op-inspct, 62
1, Male, Married-civ-spouse, 70, 3, Handlers-cleaners, 78
2, Male, Never-married, 53, 7, Machine-op-inspct, 69

CREATE TABLE `demog` (
  GEOID INTEGER,
  INHABITANTS_K REAL,
  INCOME_K REAL,
  A_VAR1 REAL,
  A_VAR2 REAL,
  A_VAR3 REAL,
  A_VAR4 REAL,
  A_VAR5 REAL,
  A_VAR6 REAL,
  A_VAR7 REAL,
  A_VAR8 REAL,
  A_VAR9 REAL,
  A_VAR10 REAL,
  A_VAR11 REAL,
  A_VAR12 REAL,
  A_VAR13 REAL,
  A_VAR14 REAL,
  A_VAR15 REAL,
  A_VAR16 REAL,
  A_VAR17 REAL,
  A_VAR18 REAL
);
Sample rows from `demog`:
0, 30.046, 2631.47, 6.084, 5.79, 8.595, 3.935, 6.362, 8.626, 4.624, 8.324, 5.233, 6.232, 5.205, 8.231, 6.746, 8.679, 5.292, 3.5, 5.512, 5.783
1, 36.25, 3012.75, 4.604, 8.309, 6.007, 5.938, 8.773, 3.579, 6.349, 4.694, 6.884, 7.062, 7.319, 3.72, 6.405, 7.202, 4.932, 7.969, 8.15, 5.633
2, 47.645, 2192.41, 4.911, 8.557, 5.934, 6.494, 9.172, 3.202, 6.157, 4.822, 7.942, 7.901, 7.928, 2.33, 6.029, 6.455, 4.72, 8.564, 8.342, 4.938

","CREATE TABLE `Demog` (
  GEOID INTEGER,
  INHABITANTS_K REAL,
  INCOME_K REAL,
  A_VAR1 REAL,
  A_VAR2 REAL,
  A_VAR3 REAL,
  A_VAR4 REAL,
  A_VAR5 REAL,
  A_VAR6 REAL,
  A_VAR7 REAL,
  A_VAR8 REAL,
  A_VAR9 REAL,
  A_VAR10 REAL,
  A_VAR11 REAL,
  A_VAR12 REAL,
  A_VAR13 REAL,
  A_VAR14 REAL,
  A_VAR15 REAL,
  A_VAR16 REAL,
  A_VAR17 REAL,
  A_VAR18 REAL
);
Sample rows from `Demog`:
0, 30.046, 2631.47, 6.084, 5.79, 8.595, 3.935, 6.362, 8.626, 4.624, 8.324, 5.233, 6.232, 5.205, 8.231, 6.746, 8.679, 5.292, 3.5, 5.512, 5.783
1, 36.25, 3012.75, 4.604, 8.309, 6.007, 5.938, 8.773, 3.579, 6.349, 4.694, 6.884, 7.062, 7.319, 3.72, 6.405, 7.202, 4.932, 7.969, 8.15, 5.633
2, 47.645, 2192.41, 4.911, 8.557, 5.934, 6.494, 9.172, 3.202, 6.157, 4.822, 7.942, 7.901, 7.928, 2.33, 6.029, 6.455, 4.72, 8.564, 8.342, 4.938

CREATE TABLE `mailings3` (
  REFID INTEGER,
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `mailings3`:
60000, 2007-07-01 12:00:00.0, false
60001, 2007-07-01 12:00:00.0, false
60002, 2007-07-01 12:00:00.0, false

CREATE TABLE `Customers` (
  ID INTEGER,
  SEX TEXT,
  MARITAL_STATUS TEXT,
  GEOID INTEGER REFERENCES Demog(None),
  EDUCATIONNUM INTEGER,
  OCCUPATION TEXT,
  age INTEGER
);
Sample rows from `Customers`:
0, Male, Never-married, 61, 7, Machine-op-inspct, 62
1, Male, Married-civ-spouse, 70, 3, Handlers-cleaners, 78
2, Male, Never-married, 53, 7, Machine-op-inspct, 69

CREATE TABLE `Mailings1_2` (
  REFID INTEGER REFERENCES Customers(None),
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `Mailings1_2`:
0, 2007-02-01 12:00:00.0, false
1, 2007-02-01 12:00:00.0, false
2, 2007-02-01 12:00:00.0, false

CREATE TABLE `Sales` (
  EVENTID INTEGER,
  REFID INTEGER REFERENCES Customers(None),
  EVENT_DATE DATETIME,
  AMOUNT REAL
);
Sample rows from `Sales`:
0, 0, 2006-12-21 12:00:00.0, 17.907
1, 0, 2006-12-25 12:00:00.0, 17.401
2, 0, 2007-01-26 12:00:00.0, 13.277

","customers, demog","customers.geoid, demog.geoid, customers.sex, demog.inhabitants_k","Demog, mailings3, Customers, Mailings1_2, Sales"
image_and_language,What is the average width and height of the objects in image ID 47? List their object classes as well.,"SELECT t2.obj_class, AVG(t1.w), AVG(t1.h) FROM img_obj as t1 inner JOIN obj_classES as t2 ON t1.obj_class_ID = t2.obj_class_ID whERE t1.img_id = 47 GROUP BY t2.obj_class","CREATE TABLE `img_obj` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `img_obj`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `obj_classES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `obj_classES`:
0, awning
1, goggles
2, dot

","CREATE TABLE `ATT_CLASSES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `ATT_CLASSES`:
0, building s
1, indoors
2, cluttered

CREATE TABLE `OBJ_CLASSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLASSES`:
0, awning
1, goggles
2, dot

CREATE TABLE `IMG_OBJ` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `IMG_OBJ`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `IMG_OBJ_ATT` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_OBJ_ATT`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `PRED_CLASSES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `PRED_CLASSES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `IMG_REL` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_REL`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

","img_obj, obj_classES","obj_classES.obj_class, img_obj.w, img_obj.h, img_obj.obj_class_ID, obj_classES.obj_class_ID, img_obj.img_id","ATT_CLASSES, OBJ_CLASSES, IMG_OBJ, IMG_OBJ_ATT, PRED_CLASSES, IMG_REL"
authors,Who is the author of the publication named 'Real-Time Automata'?,SELECT t2.name FROM paper as t1 inner JOIN paperAuthor as t2 ON t1.id = t2.paperid WHERE t1.title = 'Real-Time Automata',"CREATE TABLE `paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `paperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `paperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

","CREATE TABLE `Author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `Author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

CREATE TABLE `Conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

CREATE TABLE `Journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `Paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `Paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `PaperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `PaperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

","paper, paperAuthor","paperAuthor.name, paper.id, paperAuthor.paperid, paper.title","Author, Conference, Journal, Paper, PaperAuthor"
retail_world,"Provide the contact person name, title and supplied products by ""Escargots Nouveaux"" company.","SELECT t2.contactname, t2.contacttitle, t1.productname FROM products as t1 inner JOIN suppliers as t2 ON t1.supplierid = t2.supplierid WHERE t2.companyname = 'Escargots Nouveaux'","CREATE TABLE `products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

","products, suppliers","suppliers.contactname, suppliers.contacttitle, products.productname, products.supplierid, suppliers.supplierid, suppliers.companyname","sqlite_sequence, Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails"
human_resources,Which position has the highest amount of poor performing employees?,SELECT t2.positiontitle FROM employee as t1  inner JOIN position as t2  ON t1.positionid = t2.positionid WHERE t1.performance = 'Poor' GROUP BY t2.positiontitle ORDER BY COUNT(t2.positiontitle) DESC LIMIT 1,"CREATE TABLE `employee` (
  ssn TEXT PRIMARY KEY,
  lastname TEXT,
  firstname TEXT,
  hiredate TEXT,
  salary TEXT,
  gender TEXT,
  performance TEXT,
  positionID INTEGER REFERENCES position(positionID),
  locationID INTEGER REFERENCES location(locationID)
);
Sample rows from `employee`:
000-01-0000, Milgrom, Patricia, 10/1/04, US$57,500.00, F, Average, 2, 2
000-02-2222, Adams, Sandy, 1/15/01, US$19,500.00, F, Average, 3, 1
109-87-6543, Wood, Emily, 3/12/97, US$69,000.00, F, Average, 2, 5

CREATE TABLE `position` (
  positionID INTEGER,
  positiontitle TEXT,
  educationrequired TEXT,
  minsalary TEXT,
  maxsalary TEXT
);
Sample rows from `position`:
1, Account Representative, 4 year degree, US$25,000.00, US$75,000.00
2, Manager, 4 year degree, US$50,000.00, US$150,000.00
3, Trainee, 2 year degree, US$18,000.00, US$25,000.00

","CREATE TABLE `location` (
  locationID INTEGER,
  locationcity TEXT,
  address TEXT,
  state TEXT,
  zipcode INTEGER,
  officephone TEXT
);
Sample rows from `location`:
1, Atlanta, 450 Peachtree Rd, GA, 30316, (404)333-5555
2, Boston, 3 Commons Blvd, MA, 2190, (617)123-4444
3, Chicago, 500 Loop Highway, IL, 60620, (312)444-6666

CREATE TABLE `position` (
  positionID INTEGER,
  positiontitle TEXT,
  educationrequired TEXT,
  minsalary TEXT,
  maxsalary TEXT
);
Sample rows from `position`:
1, Account Representative, 4 year degree, US$25,000.00, US$75,000.00
2, Manager, 4 year degree, US$50,000.00, US$150,000.00
3, Trainee, 2 year degree, US$18,000.00, US$25,000.00

CREATE TABLE `employee` (
  ssn TEXT PRIMARY KEY,
  lastname TEXT,
  firstname TEXT,
  hiredate TEXT,
  salary TEXT,
  gender TEXT,
  performance TEXT,
  positionID INTEGER REFERENCES position(positionID),
  locationID INTEGER REFERENCES location(locationID)
);
Sample rows from `employee`:
000-01-0000, Milgrom, Patricia, 10/1/04, US$57,500.00, F, Average, 2, 2
000-02-2222, Adams, Sandy, 1/15/01, US$19,500.00, F, Average, 3, 1
109-87-6543, Wood, Emily, 3/12/97, US$69,000.00, F, Average, 2, 5

","employee, position","position.positiontitle, employee.positionid, position.positionid, employee.performance","location, position, employee"
language_corpus,What is the title of Catalan language wikipedia page with revision page id '16203226'?,SELECT title FROM pages WHERE revision = 16203226,"CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

","CREATE TABLE `langs` (
  lid INTEGER,
  lang TEXT PRIMARY KEY,
  locale TEXT PRIMARY KEY,
  pages INTEGER,
  words INTEGER
);
Sample rows from `langs`:
1, ca, ca_ES, 1129144, 2764996

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
langs, 1
pages, 1129144
words, 2764996

CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `langs_words` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `langs_words`:
1, 1, 242
1, 2, 16841
1, 3, 48700

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

",pages,"title, revision","langs, sqlite_sequence, pages, words, langs_words, pages_words, biwords"
food_inspection_2,How many inspections did All Style Buffet Restaurant have?,SELECT COUNT(t2.inspection_id) FROM establishment as t1 inner JOIN inspection as t2 ON t1.license_no = t2.license_no WHERE t1.facility_type = 'Restaurant' AND t1.dba_name = 'All Style Buffet',"CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

","establishment, inspection","inspection.inspection_id, establishment.license_no, inspection.license_no, establishment.facility_type, establishment.dba_name","employee, establishment, inspection, inspection_point, violation"
image_and_language,How many images have objects with the attributes of polka dot?,SELECT COUNT(t2.obj_sample_id) FROM att_classes as t1 inner JOIN img_obj_att as t2 ON t1.ATT_CLasS_ID = t2.ATT_CLasS_ID WHERE t1.ATT_CLasS = 'polka dot',"CREATE TABLE `att_classes` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `att_classes`:
0, building s
1, indoors
2, cluttered

CREATE TABLE `img_obj_att` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `img_obj_att`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

","CREATE TABLE `ATT_CLASSES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `ATT_CLASSES`:
0, building s
1, indoors
2, cluttered

CREATE TABLE `OBJ_CLASSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLASSES`:
0, awning
1, goggles
2, dot

CREATE TABLE `IMG_OBJ` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `IMG_OBJ`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `IMG_OBJ_ATT` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_OBJ_ATT`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `PRED_CLASSES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `PRED_CLASSES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `IMG_REL` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_REL`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

","att_classes, img_obj_att","img_obj_att.obj_sample_id, att_classes.ATT_CLasS_ID, img_obj_att.ATT_CLasS_ID, att_classes.ATT_CLasS","ATT_CLASSES, OBJ_CLASSES, IMG_OBJ, IMG_OBJ_ATT, PRED_CLASSES, IMG_REL"
cars,Please list the names of the top 3 most expensive cars.,SELECT t1.car_name FROM data as t1 inner JOIN price as t2 ON t1.id = t2.id ORDER BY t2.price DESC LIMIT 3,"CREATE TABLE `data` (
  ID INTEGER REFERENCES price(ID),
  mpg REAL,
  cylinders INTEGER,
  displacement REAL,
  horsepower INTEGER,
  weight INTEGER,
  acceleration REAL,
  model INTEGER,
  car_name TEXT
);
Sample rows from `data`:
1, 18.0, 8, 307.0, 130, 3504, 12.0, 70, chevrolet chevelle malibu
2, 15.0, 8, 350.0, 165, 3693, 11.5, 70, buick skylark 320
3, 18.0, 8, 318.0, 150, 3436, 11.0, 70, plymouth satellite

CREATE TABLE `price` (
  ID INTEGER,
  price REAL
);
Sample rows from `price`:
1, 25561.59078
2, 24221.42273
3, 27240.84373

","CREATE TABLE `country` (
  origin INTEGER,
  country TEXT
);
Sample rows from `country`:
1, USA
2, Europe
3, Japan

CREATE TABLE `price` (
  ID INTEGER,
  price REAL
);
Sample rows from `price`:
1, 25561.59078
2, 24221.42273
3, 27240.84373

CREATE TABLE `data` (
  ID INTEGER REFERENCES price(ID),
  mpg REAL,
  cylinders INTEGER,
  displacement REAL,
  horsepower INTEGER,
  weight INTEGER,
  acceleration REAL,
  model INTEGER,
  car_name TEXT
);
Sample rows from `data`:
1, 18.0, 8, 307.0, 130, 3504, 12.0, 70, chevrolet chevelle malibu
2, 15.0, 8, 350.0, 165, 3693, 11.5, 70, buick skylark 320
3, 18.0, 8, 318.0, 150, 3436, 11.0, 70, plymouth satellite

CREATE TABLE `production` (
  ID INTEGER PRIMARY KEY REFERENCES price(ID) REFERENCES data(ID),
  model_year INTEGER PRIMARY KEY,
  country INTEGER REFERENCES country(origin)
);
Sample rows from `production`:
1, 1970, 1
1, 1971, 1
2, 1970, 1

","data, price","data.car_name, data.id, price.id, price.price","country, price, data, production"
regional_sales,Please give the order number and product name of the order which has the lowest unit price.,"SELECT t1.ordernumber, t2.`product name` FROM `sales orders` as t1 inner JOIN products as t2 ON t2.productID = t1._productID WHERE replace(t1.`unit price`, ',', '') = ( SELECT replace(t1.`unit price`, ',', '') FROM `sales orders` as t1 inner JOIN products as t2 ON t2.productID = t1._productID ORDER BY replace(t1.`unit price`, ',', '') LIMIT 1 )","CREATE TABLE `sales orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `sales orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

CREATE TABLE `products` (
  ProductID INTEGER,
  Product Name TEXT
);
Sample rows from `products`:
1, Cookware
2, Photo Frames
3, Table Lamps

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  Customer Names TEXT
);
Sample rows from `Customers`:
1, Avon Corp
2, WakeFern 
3, Elorac, Corp

CREATE TABLE `Products` (
  ProductID INTEGER,
  Product Name TEXT
);
Sample rows from `Products`:
1, Cookware
2, Photo Frames
3, Table Lamps

CREATE TABLE `Regions` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `Regions`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `Sales Team` (
  SalesTeamID INTEGER,
  Sales Team TEXT,
  Region TEXT
);
Sample rows from `Sales Team`:
1, Adam Hernandez, Northeast
2, Keith Griffin, Northeast
3, Jerry Green, West

CREATE TABLE `Store Locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `Store Locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

CREATE TABLE `Sales Orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `Sales Orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

","sales orders, products","sales orders.ordernumber, products.product name, products.productID, sales orders._productID, sales orders.unit price","Customers, Products, Regions, Sales Team, Store Locations, Sales Orders"
ice_hockey_draft,"Among all the teams that made the playoffs in the 2007-2008 season, identify the percentage that played over 20 games.",SELECT cast(COUNT(case when gp > 20 then team else null end) as real) * 100 / COUNT(team) FROM seasonstatus WHERE SEasON = '2007-2008' AND gametype = 'Playoffs',"CREATE TABLE `seasonstatus` (
  ELITEID INTEGER REFERENCES PlayerInfo(ELITEID),
  SEASON TEXT,
  TEAM TEXT,
  LEAGUE TEXT,
  GAMETYPE TEXT,
  GP INTEGER,
  G INTEGER,
  A INTEGER,
  P INTEGER,
  PIM INTEGER,
  PLUSMINUS INTEGER
);
Sample rows from `seasonstatus`:
3667, 1997-1998, Rimouski Oceanic, QMJHL, Regular Season, 58, 44, 71, 115, 117, 27
3667, 1997-1998, Rimouski Oceanic, QMJHL, Playoffs, 18, 15, 26, 41, 46, 4
3667, 1997-1998, Canada U20, WJC-20, Regular Season, 7, 1, 1, 2, 4, 0

","CREATE TABLE `height_info` (
  height_id INTEGER,
  height_in_cm INTEGER,
  height_in_inch TEXT
);
Sample rows from `height_info`:
65, 165, 5'5""
67, 170, 5'7""
68, 172, 5'8""

CREATE TABLE `weight_info` (
  weight_id INTEGER,
  weight_in_kg INTEGER,
  weight_in_lbs INTEGER
);
Sample rows from `weight_info`:
154, 70, 154
159, 72, 159
161, 73, 161

CREATE TABLE `PlayerInfo` (
  ELITEID INTEGER,
  PlayerName TEXT,
  birthdate TEXT,
  birthyear DATE,
  birthmonth INTEGER,
  birthday INTEGER,
  birthplace TEXT,
  nation TEXT,
  height INTEGER REFERENCES height_info(height_id),
  weight INTEGER REFERENCES weight_info(weight_id),
  position_info TEXT,
  shoots TEXT,
  draftyear INTEGER,
  draftround INTEGER,
  overall INTEGER,
  overallby TEXT,
  CSS_rank INTEGER,
  sum_7yr_GP INTEGER,
  sum_7yr_TOI INTEGER,
  GP_greater_than_0 TEXT
);
Sample rows from `PlayerInfo`:
9, David Bornhammar, 1981-06-15, 1981, 6, 15, Lidingo, SWE, Sweden, 73, 198, D, L, 1999, 7, 192, Washington Capitals, 192, 0, 0, no
18, David Printz, 1980-07-24, 1980, 7, 24, Stockholm, SWE, Sweden, 76, 220, D, L, 2001, 7, 225, Philadelphia Flyers, 176, 13, 84, yes
27, Yared Hagos, 1983-03-27, 1983, 3, 27, Stockholm, SWE, Sweden, 73, 218, C, L, 2001, 3, 70, Dallas Stars, 24, 0, 0, no

CREATE TABLE `SeasonStatus` (
  ELITEID INTEGER REFERENCES PlayerInfo(ELITEID),
  SEASON TEXT,
  TEAM TEXT,
  LEAGUE TEXT,
  GAMETYPE TEXT,
  GP INTEGER,
  G INTEGER,
  A INTEGER,
  P INTEGER,
  PIM INTEGER,
  PLUSMINUS INTEGER
);
Sample rows from `SeasonStatus`:
3667, 1997-1998, Rimouski Oceanic, QMJHL, Regular Season, 58, 44, 71, 115, 117, 27
3667, 1997-1998, Rimouski Oceanic, QMJHL, Playoffs, 18, 15, 26, 41, 46, 4
3667, 1997-1998, Canada U20, WJC-20, Regular Season, 7, 1, 1, 2, 4, 0

",seasonstatus,"gp, team, SEasON, gametype","height_info, weight_info, PlayerInfo, SeasonStatus"
olympics,What is the average height of the male Olympic competitors from Finland?,SELECT AVG(t3.height) FROm noc_region as t1 inner JOIN person_region as t2 ON t1.id = t2.region_id inner JOIN person as t3 ON t2.person_id = t3.id WHERE t1.region_name = 'Finland' AND t3.gender = 'm',"CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

","CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `medal` (
  id INTEGER,
  medal_name TEXT
);
Sample rows from `medal`:
1, Gold
2, Silver
3, Bronze

CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `sport` (
  id INTEGER,
  sport_name TEXT
);
Sample rows from `sport`:
1, Aeronautics
2, Alpine Skiing
3, Alpinism

CREATE TABLE `event` (
  id INTEGER,
  sport_id INTEGER REFERENCES sport(id),
  event_name TEXT
);
Sample rows from `event`:
1, 9, Basketball Men's Basketball
2, 33, Judo Men's Extra-Lightweight
3, 25, Football Men's Football

CREATE TABLE `competitor_event` (
  event_id INTEGER REFERENCES event(id),
  competitor_id INTEGER REFERENCES games_competitor(id),
  medal_id INTEGER REFERENCES medal(id)
);
Sample rows from `competitor_event`:
1, 1, 4
2, 2, 4
3, 3, 4

","noc_region, person_region, person","person.height, noc_region.id, person_region.region_id, person_region.person_id, person.id, noc_region.region_name, person.gender","city, games, games_city, medal, noc_region, person, games_competitor, person_region, sport, event, competitor_event"
mental_health_survey,How many users participated in the Survey No.2016?,SELECT COUNT(DISTINCT userid) FROM answer WHERE surveyid LIKE 2016,"CREATE TABLE `answer` (
  AnswerText TEXT,
  SurveyID INTEGER REFERENCES Survey(None),
  UserID INTEGER PRIMARY KEY,
  QuestionID INTEGER PRIMARY KEY REFERENCES Question(None)
);
Sample rows from `answer`:
37, 2014, 1, 1
44, 2014, 2, 1
32, 2014, 3, 1

","CREATE TABLE `Question` (
  questiontext TEXT,
  questionid INTEGER
);
Sample rows from `Question`:
What is your age?, 1
What is your gender?, 2
What country do you live in?, 3

CREATE TABLE `Survey` (
  SurveyID INTEGER,
  Description TEXT
);
Sample rows from `Survey`:
2014, mental health survey for 2014
2016, mental health survey for 2016
2017, mental health survey for 2017

CREATE TABLE `Answer` (
  AnswerText TEXT,
  SurveyID INTEGER REFERENCES Survey(None),
  UserID INTEGER PRIMARY KEY,
  QuestionID INTEGER PRIMARY KEY REFERENCES Question(None)
);
Sample rows from `Answer`:
37, 2014, 1, 1
44, 2014, 2, 1
32, 2014, 3, 1

",answer,"userid, surveyid","Question, Survey, Answer"
public_review_platform,Write down the number of running business with each review count in Cave Creek city.,"SELECT SUM(case when review_count = 'High' then 1 else 0 end) as high , SUM(case when review_count = 'Medium' then 1 else 0 end) as Medium , SUM(case when review_count = 'Low' then 1 else 0 end) as low FROM business WHERE city = 'Cave Creek' AND active = 'true'","CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

",business,"review_count, city, active","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
airline,"How many flights on the 1st of August 2018 were coming from Allentown, Pennsylvania?",SELECT COUNT(*) FROM airlines WHERE fl_date = '2018/8/1' AND origin = 'ABE',"CREATE TABLE `airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

","CREATE TABLE `Air Carriers` (
  Code INTEGER,
  Description TEXT
);
Sample rows from `Air Carriers`:
19031, Mackey International Inc.: MAC
19032, Munz Northern Airlines Inc.: XY
19033, Cochise Airlines Inc.: COC

CREATE TABLE `Airports` (
  Code TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `Airports`:
01A, Afognak Lake, AK: Afognak Lake Airport
03A, Granite Mountain, AK: Bear Creek Mining Strip
04A, Lik, AK: Lik Mining Camp

CREATE TABLE `Airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `Airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

",airlines,"fl_date, origin","Air Carriers, Airports, Airlines"
movie,"What is the percentage of the actors that showed up in the credit list of movie ""Dawn of the Planet of the Apes"" that were born after ""1970/1/1""?",SELECT cast(SUM(case when t3.`date of birth` > '1970-01-01' then 1 else 0 end) as real) * 100 / COUNT(t3.`date of birth`) FROM movie as t1 inner JOIN characters as t2 ON t1.movieid = t2.movieid inner JOIN actor as t3 ON t3.actorid = t2.actorid WHERE t1.title = 'Dawn of the Planet of the Apes',"CREATE TABLE `movie` (
  MovieID INTEGER,
  Title TEXT,
  MPAA Rating TEXT,
  Budget INTEGER,
  Gross INTEGER,
  Release Date TEXT,
  Genre TEXT,
  Runtime INTEGER,
  Rating REAL,
  Rating Count INTEGER,
  Summary TEXT
);
Sample rows from `movie`:
1, Look Who's Talking, PG-13, 7500000, 296000000, 1989-10-12, Romance, 93, 5.9, 73638, After a single, career-minded woman is left on her own to give birth to the child of a married man, she finds a new romantic chance in a cab driver. Meanwhile, the point-of-view of the newborn boy is narrated through voice-over.
2, Driving Miss Daisy, PG, 7500000, 145793296, 1989-12-13, Comedy, 99, 7.4, 91075, An old Jewish woman and her African-American chauffeur in the American South have a relationship that grows and improves over the years.
3, Turner & Hooch, PG, 13000000, 71079915, 1989-07-28, Crime, 100, 7.2, 91415, Det. Scott Turner (Tom Hanks) is an uptight, by-the-book police officer. When his friend Amos Reed (John McIntire), the proprietor of a junkyard, is killed, Turner reluctantly inherits the man's dog. Turner adjusts to life with the dog to help solve a murder case.

CREATE TABLE `characters` (
  MovieID INTEGER PRIMARY KEY REFERENCES movie(MovieID),
  ActorID INTEGER PRIMARY KEY REFERENCES actor(ActorID),
  Character Name TEXT,
  creditOrder INTEGER,
  pay TEXT,
  screentime TEXT
);
Sample rows from `characters`:
1, 1, James, 1, None, None
1, 2, Mollie, 2, None, None
1, 3, Rosie, 3, None, None

CREATE TABLE `actor` (
  ActorID INTEGER,
  Name TEXT,
  Date of Birth DATE,
  Birth City TEXT,
  Birth Country TEXT,
  Height (Inches) INTEGER,
  Biography TEXT,
  Gender TEXT,
  Ethnicity TEXT,
  NetWorth TEXT
);
Sample rows from `actor`:
1, John Travolta, 1954-02-18, Englewood, USA, 74, John Joseph Travolta was born in Englewood, New Jersey, one of six children of Helen Travolta (n�e Helen Cecilia Burke) and Salvatore/Samuel J. Travolta. His father was of Italian descent and his mother was of Irish ancestry. His father owned a tire repair shop called Travolta Tires in Hillsdale, NJ. Travolta started acting appearing in a local ..., Male, White, $250,000,000.00
2, Kirstie Alley, 1951-01-12, Wichita, USA, 67, None, Female, White, $40,000,000.00
3, Olympia Dukakis, 1931-06-20, Lowell, USA, 63, Long a vital, respected lady of the classic and contemporary stage this grand lady did not become a household name and sought-after film actress until age 56 when she turned in a glorious, Oscar-winning perf as Cher's sardonic mother in the romantic comedy Moonstruck (1987). Since then movie (and TV) fans have discovered what the East coast ..., Female, White, $6,000,000.00

","CREATE TABLE `actor` (
  ActorID INTEGER,
  Name TEXT,
  Date of Birth DATE,
  Birth City TEXT,
  Birth Country TEXT,
  Height (Inches) INTEGER,
  Biography TEXT,
  Gender TEXT,
  Ethnicity TEXT,
  NetWorth TEXT
);
Sample rows from `actor`:
1, John Travolta, 1954-02-18, Englewood, USA, 74, John Joseph Travolta was born in Englewood, New Jersey, one of six children of Helen Travolta (n�e Helen Cecilia Burke) and Salvatore/Samuel J. Travolta. His father was of Italian descent and his mother was of Irish ancestry. His father owned a tire repair shop called Travolta Tires in Hillsdale, NJ. Travolta started acting appearing in a local ..., Male, White, $250,000,000.00
2, Kirstie Alley, 1951-01-12, Wichita, USA, 67, None, Female, White, $40,000,000.00
3, Olympia Dukakis, 1931-06-20, Lowell, USA, 63, Long a vital, respected lady of the classic and contemporary stage this grand lady did not become a household name and sought-after film actress until age 56 when she turned in a glorious, Oscar-winning perf as Cher's sardonic mother in the romantic comedy Moonstruck (1987). Since then movie (and TV) fans have discovered what the East coast ..., Female, White, $6,000,000.00

CREATE TABLE `movie` (
  MovieID INTEGER,
  Title TEXT,
  MPAA Rating TEXT,
  Budget INTEGER,
  Gross INTEGER,
  Release Date TEXT,
  Genre TEXT,
  Runtime INTEGER,
  Rating REAL,
  Rating Count INTEGER,
  Summary TEXT
);
Sample rows from `movie`:
1, Look Who's Talking, PG-13, 7500000, 296000000, 1989-10-12, Romance, 93, 5.9, 73638, After a single, career-minded woman is left on her own to give birth to the child of a married man, she finds a new romantic chance in a cab driver. Meanwhile, the point-of-view of the newborn boy is narrated through voice-over.
2, Driving Miss Daisy, PG, 7500000, 145793296, 1989-12-13, Comedy, 99, 7.4, 91075, An old Jewish woman and her African-American chauffeur in the American South have a relationship that grows and improves over the years.
3, Turner & Hooch, PG, 13000000, 71079915, 1989-07-28, Crime, 100, 7.2, 91415, Det. Scott Turner (Tom Hanks) is an uptight, by-the-book police officer. When his friend Amos Reed (John McIntire), the proprietor of a junkyard, is killed, Turner reluctantly inherits the man's dog. Turner adjusts to life with the dog to help solve a murder case.

CREATE TABLE `characters` (
  MovieID INTEGER PRIMARY KEY REFERENCES movie(MovieID),
  ActorID INTEGER PRIMARY KEY REFERENCES actor(ActorID),
  Character Name TEXT,
  creditOrder INTEGER,
  pay TEXT,
  screentime TEXT
);
Sample rows from `characters`:
1, 1, James, 1, None, None
1, 2, Mollie, 2, None, None
1, 3, Rosie, 3, None, None

","movie, characters, actor","actor.date of birth, movie.movieid, characters.movieid, actor.actorid, characters.actorid, movie.title","actor, movie, characters"
simpson_episodes,What is the summary of the episode in which Emily Blunt is featured in?,SELECT t1.summary FROM episode as t1 inner JOIN credit as t2 ON t1.episode_id = t2.episode_id WHERE t2.person = 'Emily Blunt';,"CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","episode, credit","episode.summary, episode.episode_id, credit.episode_id, credit.person","Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
computer_student,Who are the top 5 professors who teaches the highest number of professional or master/undergraduate courses?,SELECT t2.p_id FROM course as t1 inner JOIN taughtby as t2 ON t1.course_id = t2.course_id WHERE t1.courselevel = 'Level_500' GROUP BY t2.p_id ORDER BY COUNT(t2.p_id) DESC LIMIT 5,"CREATE TABLE `course` (
  course_id INTEGER,
  courseLevel TEXT
);
Sample rows from `course`:
0, Level_500
1, Level_500
2, Level_500

CREATE TABLE `taughtby` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `taughtby`:
0, 40
1, 40
2, 180

","CREATE TABLE `course` (
  course_id INTEGER,
  courseLevel TEXT
);
Sample rows from `course`:
0, Level_500
1, Level_500
2, Level_500

CREATE TABLE `person` (
  p_id INTEGER,
  professor INTEGER,
  student INTEGER,
  hasPosition TEXT,
  inPhase TEXT,
  yearsInProgram TEXT
);
Sample rows from `person`:
3, 0, 1, 0, 0, 0
4, 0, 1, 0, 0, 0
5, 1, 0, Faculty, 0, 0

CREATE TABLE `advisedBy` (
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id),
  p_id_dummy INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `advisedBy`:
96, 5
118, 5
183, 5

CREATE TABLE `taughtBy` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `taughtBy`:
0, 40
1, 40
2, 180

","course, taughtby","taughtby.p_id, course.course_id, taughtby.course_id, course.courselevel","course, person, advisedBy, taughtBy"
simpson_episodes,"Among the episodes with excellent rating which were aired in 2008, describe the title, episode's image, award name and person who were nominated.","SELECT t2.title, t2.episode_image, t1.award, t1.person FROM award as t1 inner JOIN episode as t2 ON t1.episode_id = t2.episode_id WHERE t2.rating BETWEEN 7 AND 10 AND substr(t2.air_date, 1, 4) = '2008' AND t1.result = 'Nominee';","CREATE TABLE `award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","award, episode","episode.title, episode.episode_image, award.award, award.person, award.episode_id, episode.episode_id, episode.rating, episode.air_date, award.result","Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
retail_world,What is the position of Robert King?,SELECT title FROM employees WHERE firstname = 'Robert' AND lastname = 'King',"CREATE TABLE `employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

",employees,"title, firstname, lastname","sqlite_sequence, Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails"
retail_world,Indicate the category name of the product name with the highest units on order.,SELECT t2.categoryname FROM products as t1 inner JOIN categories as t2 ON t1.categoryid = t2.categoryid WHERE t1.unitsonorder = ( SELECT MAX(t1.unitsonorder) FROM products ),"CREATE TABLE `products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

","products, categories","categories.categoryname, products.categoryid, categories.categoryid, products.unitsonorder","sqlite_sequence, Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails"
food_inspection,List the business' name and risk category of businesses with a score greater than the 80% of average score of all businesses.,"SELECT DISTINCT t1.name, t3.risk_category FROM businesses as t1 inner JOIN inspections as t2 ON t1.business_id = t2.business_id inner JOIN violations as t3 ON t1.business_id = t3.business_id WHERE t2.score > 0.8 * ( SELECT AVG(score) FROM inspections )","CREATE TABLE `businesses` (
  business_id INTEGER,
  name TEXT,
  address TEXT,
  city TEXT,
  postal_code TEXT,
  latitude REAL,
  longitude REAL,
  phone_number INTEGER,
  tax_code TEXT,
  business_certificate INTEGER,
  application_date DATE,
  owner_name TEXT,
  owner_address TEXT,
  owner_city TEXT,
  owner_state TEXT,
  owner_zip TEXT
);
Sample rows from `businesses`:
10, Tiramisu Kitchen, 033 Belden Pl, San Francisco, 94104, 37.7911, -122.404, None, H24, 779059, None, Tiramisu LLC, 33 Belden St, San Francisco, CA, 94104
24, OMNI S.F. Hotel - 2nd Floor Pantry, 500 California St, 2nd  Floor, San Francisco, 94104, 37.7929, -122.403, None, H24, 352312, None, OMNI San Francisco Hotel Corp, 500 California St, 2nd Floor, San Francisco, CA, 94104
31, Norman's Ice Cream and Freezes, 2801 Leavenworth St, San Francisco, 94133, 37.8072, -122.419, None, H24, 346882, None, Norman Antiforda, 2801 Leavenworth St, San Francisco, CA, 94133

CREATE TABLE `inspections` (
  business_id INTEGER REFERENCES businesses(business_id),
  score INTEGER,
  date DATE,
  type TEXT
);
Sample rows from `inspections`:
10, 92, 2014-01-14, Routine - Unscheduled
10, None, 2014-01-24, Reinspection/Followup
10, 94, 2014-07-29, Routine - Unscheduled

CREATE TABLE `violations` (
  business_id INTEGER REFERENCES businesses(business_id),
  date DATE,
  violation_type_id TEXT,
  risk_category TEXT,
  description TEXT
);
Sample rows from `violations`:
10, 2014-07-29, 103129, Moderate Risk, Insufficient hot water or running water
10, 2014-07-29, 103144, Low Risk, Unapproved or unmaintained equipment or utensils
10, 2014-01-14, 103119, Moderate Risk, Inadequate and inaccessible handwashing facilities

","CREATE TABLE `businesses` (
  business_id INTEGER,
  name TEXT,
  address TEXT,
  city TEXT,
  postal_code TEXT,
  latitude REAL,
  longitude REAL,
  phone_number INTEGER,
  tax_code TEXT,
  business_certificate INTEGER,
  application_date DATE,
  owner_name TEXT,
  owner_address TEXT,
  owner_city TEXT,
  owner_state TEXT,
  owner_zip TEXT
);
Sample rows from `businesses`:
10, Tiramisu Kitchen, 033 Belden Pl, San Francisco, 94104, 37.7911, -122.404, None, H24, 779059, None, Tiramisu LLC, 33 Belden St, San Francisco, CA, 94104
24, OMNI S.F. Hotel - 2nd Floor Pantry, 500 California St, 2nd  Floor, San Francisco, 94104, 37.7929, -122.403, None, H24, 352312, None, OMNI San Francisco Hotel Corp, 500 California St, 2nd Floor, San Francisco, CA, 94104
31, Norman's Ice Cream and Freezes, 2801 Leavenworth St, San Francisco, 94133, 37.8072, -122.419, None, H24, 346882, None, Norman Antiforda, 2801 Leavenworth St, San Francisco, CA, 94133

CREATE TABLE `inspections` (
  business_id INTEGER REFERENCES businesses(business_id),
  score INTEGER,
  date DATE,
  type TEXT
);
Sample rows from `inspections`:
10, 92, 2014-01-14, Routine - Unscheduled
10, None, 2014-01-24, Reinspection/Followup
10, 94, 2014-07-29, Routine - Unscheduled

CREATE TABLE `violations` (
  business_id INTEGER REFERENCES businesses(business_id),
  date DATE,
  violation_type_id TEXT,
  risk_category TEXT,
  description TEXT
);
Sample rows from `violations`:
10, 2014-07-29, 103129, Moderate Risk, Insufficient hot water or running water
10, 2014-07-29, 103144, Low Risk, Unapproved or unmaintained equipment or utensils
10, 2014-01-14, 103119, Moderate Risk, Inadequate and inaccessible handwashing facilities

","businesses, inspections, violations","businesses.name, violations.risk_category, businesses.business_id, inspections.business_id, violations.business_id, inspections.score, score","businesses, inspections, violations"
beer_factory,"What is the full name of the customer who gave a 5-star rating and commented ""The quintessential dessert root beer. No ice cream required"" on his review?","SELECT t1.first, t1.last FROM customers as t1 inner JOIN rootbeerreview as t2 ON t1.customerid = t2.customerid WHERE t2.starrating = 5 AND t2.review = 'The quintessential dessert root beer. No ice cream required.'","CREATE TABLE `customers` (
  CustomerID INTEGER,
  First TEXT,
  Last TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER,
  Email TEXT,
  PhoneNumber TEXT,
  FirstPurchaseDate DATE,
  SubscribedToEmailList TEXT,
  Gender TEXT
);
Sample rows from `customers`:
101811, Kenneth, Walton, 6715 Commonwealth Dr, Sacramento, CA, 94256, walton.k76@fastmail.com, (916) 918-1561, 2013-05-30, FALSE, M
103508, Madeleine, Jones, 3603 Leola Way, Sacramento, CA, 94258, j_madeleine@gmail.com, (916) 186-9423, 2013-02-06, FALSE, F
104939, Damen, Wheeler, 6740 Branwood Way, Orangevale, CA, 95662, dwheeler@outlook.com, (916) 164-1156, 2013-04-11, FALSE, M

CREATE TABLE `rootbeerreview` (
  CustomerID INTEGER PRIMARY KEY REFERENCES customers(CustomerID),
  BrandID INTEGER PRIMARY KEY REFERENCES rootbeerbrand(BrandID),
  StarRating INTEGER,
  ReviewDate DATE,
  Review TEXT
);
Sample rows from `rootbeerreview`:
101811, 10012, 5, 2013-07-15, None
101811, 10014, 1, 2013-07-08, None
101811, 10015, 3, 2013-07-25, None

","CREATE TABLE `customers` (
  CustomerID INTEGER,
  First TEXT,
  Last TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER,
  Email TEXT,
  PhoneNumber TEXT,
  FirstPurchaseDate DATE,
  SubscribedToEmailList TEXT,
  Gender TEXT
);
Sample rows from `customers`:
101811, Kenneth, Walton, 6715 Commonwealth Dr, Sacramento, CA, 94256, walton.k76@fastmail.com, (916) 918-1561, 2013-05-30, FALSE, M
103508, Madeleine, Jones, 3603 Leola Way, Sacramento, CA, 94258, j_madeleine@gmail.com, (916) 186-9423, 2013-02-06, FALSE, F
104939, Damen, Wheeler, 6740 Branwood Way, Orangevale, CA, 95662, dwheeler@outlook.com, (916) 164-1156, 2013-04-11, FALSE, M

CREATE TABLE `geolocation` (
  LocationID INTEGER REFERENCES location(LocationID),
  Latitude REAL,
  Longitude REAL
);
Sample rows from `geolocation`:
0, 0.0, 0.0
1, 38.566129, -121.426432
2, 38.559615, -121.42243

CREATE TABLE `location` (
  LocationID INTEGER REFERENCES geolocation(LocationID),
  LocationName TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER
);
Sample rows from `location`:
0, LOST, None, None, None, None
1, Sac State American River Courtyard, 6000 J St, Sacramento, CA, 95819
2, Sac State Union, 6000 J St, Sacramento, CA, 95819

CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

CREATE TABLE `rootbeerreview` (
  CustomerID INTEGER PRIMARY KEY REFERENCES customers(CustomerID),
  BrandID INTEGER PRIMARY KEY REFERENCES rootbeerbrand(BrandID),
  StarRating INTEGER,
  ReviewDate DATE,
  Review TEXT
);
Sample rows from `rootbeerreview`:
101811, 10012, 5, 2013-07-15, None
101811, 10014, 1, 2013-07-08, None
101811, 10015, 3, 2013-07-25, None

CREATE TABLE `transaction` (
  TransactionID INTEGER,
  CreditCardNumber INTEGER,
  CustomerID INTEGER REFERENCES customers(CustomerID),
  TransactionDate DATE,
  CreditCardType TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  RootBeerID INTEGER REFERENCES rootbeer(RootBeerID),
  PurchasePrice REAL
);
Sample rows from `transaction`:
100000, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105661, 3.0
100001, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105798, 3.0
100002, 6011583832864739, 864896, 2014-07-07, Discover, 2, 102514, 3.0

","customers, rootbeerreview","customers.first, customers.last, customers.customerid, rootbeerreview.customerid, rootbeerreview.starrating, rootbeerreview.review","customers, geolocation, location, rootbeerbrand, rootbeer, rootbeerreview, transaction"
menu,How many menu items were created on 28th March 2011?,SELECT COUNT(*) FROM menuitem WHERE created_at LIKE '2011-03-28%',"CREATE TABLE `menuitem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `menuitem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

","CREATE TABLE `Dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `Dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

CREATE TABLE `Menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `Menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

CREATE TABLE `MenuPage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `MenuPage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

CREATE TABLE `MenuItem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `MenuItem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

",menuitem,created_at,"Dish, Menu, MenuPage, MenuItem"
ice_hockey_draft,What is the weight of the player with the longest time on ice in the player’s first 7 years of NHL career in kilograms?,SELECT t2.weight_in_kg FROM playerinfo as t1 inner JOIN weight_info as t2 ON t1.weight = t2.weight_id WHERE t1.sum_7yr_toi = ( SELECT MAX(t.sum_7yr_toi) FROM playerinfo t ),"CREATE TABLE `playerinfo` (
  ELITEID INTEGER,
  PlayerName TEXT,
  birthdate TEXT,
  birthyear DATE,
  birthmonth INTEGER,
  birthday INTEGER,
  birthplace TEXT,
  nation TEXT,
  height INTEGER REFERENCES height_info(height_id),
  weight INTEGER REFERENCES weight_info(weight_id),
  position_info TEXT,
  shoots TEXT,
  draftyear INTEGER,
  draftround INTEGER,
  overall INTEGER,
  overallby TEXT,
  CSS_rank INTEGER,
  sum_7yr_GP INTEGER,
  sum_7yr_TOI INTEGER,
  GP_greater_than_0 TEXT
);
Sample rows from `playerinfo`:
9, David Bornhammar, 1981-06-15, 1981, 6, 15, Lidingo, SWE, Sweden, 73, 198, D, L, 1999, 7, 192, Washington Capitals, 192, 0, 0, no
18, David Printz, 1980-07-24, 1980, 7, 24, Stockholm, SWE, Sweden, 76, 220, D, L, 2001, 7, 225, Philadelphia Flyers, 176, 13, 84, yes
27, Yared Hagos, 1983-03-27, 1983, 3, 27, Stockholm, SWE, Sweden, 73, 218, C, L, 2001, 3, 70, Dallas Stars, 24, 0, 0, no

CREATE TABLE `weight_info` (
  weight_id INTEGER,
  weight_in_kg INTEGER,
  weight_in_lbs INTEGER
);
Sample rows from `weight_info`:
154, 70, 154
159, 72, 159
161, 73, 161

","CREATE TABLE `height_info` (
  height_id INTEGER,
  height_in_cm INTEGER,
  height_in_inch TEXT
);
Sample rows from `height_info`:
65, 165, 5'5""
67, 170, 5'7""
68, 172, 5'8""

CREATE TABLE `weight_info` (
  weight_id INTEGER,
  weight_in_kg INTEGER,
  weight_in_lbs INTEGER
);
Sample rows from `weight_info`:
154, 70, 154
159, 72, 159
161, 73, 161

CREATE TABLE `PlayerInfo` (
  ELITEID INTEGER,
  PlayerName TEXT,
  birthdate TEXT,
  birthyear DATE,
  birthmonth INTEGER,
  birthday INTEGER,
  birthplace TEXT,
  nation TEXT,
  height INTEGER REFERENCES height_info(height_id),
  weight INTEGER REFERENCES weight_info(weight_id),
  position_info TEXT,
  shoots TEXT,
  draftyear INTEGER,
  draftround INTEGER,
  overall INTEGER,
  overallby TEXT,
  CSS_rank INTEGER,
  sum_7yr_GP INTEGER,
  sum_7yr_TOI INTEGER,
  GP_greater_than_0 TEXT
);
Sample rows from `PlayerInfo`:
9, David Bornhammar, 1981-06-15, 1981, 6, 15, Lidingo, SWE, Sweden, 73, 198, D, L, 1999, 7, 192, Washington Capitals, 192, 0, 0, no
18, David Printz, 1980-07-24, 1980, 7, 24, Stockholm, SWE, Sweden, 76, 220, D, L, 2001, 7, 225, Philadelphia Flyers, 176, 13, 84, yes
27, Yared Hagos, 1983-03-27, 1983, 3, 27, Stockholm, SWE, Sweden, 73, 218, C, L, 2001, 3, 70, Dallas Stars, 24, 0, 0, no

CREATE TABLE `SeasonStatus` (
  ELITEID INTEGER REFERENCES PlayerInfo(ELITEID),
  SEASON TEXT,
  TEAM TEXT,
  LEAGUE TEXT,
  GAMETYPE TEXT,
  GP INTEGER,
  G INTEGER,
  A INTEGER,
  P INTEGER,
  PIM INTEGER,
  PLUSMINUS INTEGER
);
Sample rows from `SeasonStatus`:
3667, 1997-1998, Rimouski Oceanic, QMJHL, Regular Season, 58, 44, 71, 115, 117, 27
3667, 1997-1998, Rimouski Oceanic, QMJHL, Playoffs, 18, 15, 26, 41, 46, 4
3667, 1997-1998, Canada U20, WJC-20, Regular Season, 7, 1, 1, 2, 4, 0

","playerinfo, weight_info","weight_info.weight_in_kg, playerinfo.weight, weight_info.weight_id, playerinfo.sum_7yr_toi","height_info, weight_info, PlayerInfo, SeasonStatus"
university,"How many institutions with over 50,000 students in 2011 had a percentage of oversea students of more than 10%?",SELECT COUNT(*) FROM university_year WHERE year = 2011 AND num_students > 50000 AND pct_international_students > 10,"CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

","CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

CREATE TABLE `ranking_system` (
  id INTEGER,
  system_name TEXT
);
Sample rows from `ranking_system`:
1, Times Higher Education World University Ranking
2, Shanghai Ranking
3, Center for World University Rankings

CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

",university_year,"num_students, pct_international_students","country, ranking_system, ranking_criteria, university, university_ranking_year, university_year"
world,How many percent of countries in North America use English?,"SELECT cast(SUM(iif(t2.language = 'English', 1, 0)) as real) * 100 / COUNT(t1.code) FROM country as t1 inner JOIN countrylanguage as t2 ON t1.code = t2.countrycode","CREATE TABLE `country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

CREATE TABLE `countrylanguage` (
  CountryCode TEXT PRIMARY KEY REFERENCES Country(Code),
  Language TEXT PRIMARY KEY,
  IsOfficial TEXT,
  Percentage REAL
);
Sample rows from `countrylanguage`:
ABW, Dutch, T, 5.3
ABW, English, F, 9.5
ABW, Papiamento, F, 76.7

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
City, 4079

CREATE TABLE `City` (
  ID INTEGER,
  Name TEXT,
  CountryCode TEXT REFERENCES Country(Code),
  District TEXT,
  Population INTEGER
);
Sample rows from `City`:
1, Kabul, AFG, Kabol, 1780000
2, Qandahar, AFG, Qandahar, 237500
3, Herat, AFG, Herat, 186800

CREATE TABLE `Country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `Country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

CREATE TABLE `CountryLanguage` (
  CountryCode TEXT PRIMARY KEY REFERENCES Country(Code),
  Language TEXT PRIMARY KEY,
  IsOfficial TEXT,
  Percentage REAL
);
Sample rows from `CountryLanguage`:
ABW, Dutch, T, 5.3
ABW, English, F, 9.5
ABW, Papiamento, F, 76.7

","country, countrylanguage","countrylanguage.language, country.code, countrylanguage.countrycode","sqlite_sequence, City, Country, CountryLanguage"
student_loan,How many students have absent from school?,SELECT COUNT(name) FROM longest_absense_from_school WHERE month > 1,"CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

",longest_absense_from_school,name,"bool, person, disabled, enlist, filed_for_bankrupcy, longest_absense_from_school, male, no_payment_due, unemployed, enrolled"
university,Provide the score of the most populated university in 2011.,SELECT t2.score FROM university_year as t1 inner JOIN university_ranking_year as t2 ON t1.university_id = t2.university_id WHERE t1.year = 2011 ORDER BY t1.num_students DESC LIMIT 1,"CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

","CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

CREATE TABLE `ranking_system` (
  id INTEGER,
  system_name TEXT
);
Sample rows from `ranking_system`:
1, Times Higher Education World University Ranking
2, Shanghai Ranking
3, Center for World University Rankings

CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

","university_year, university_ranking_year","university_ranking_year.score, university_year.university_id, university_ranking_year.university_id, university_year.year, university_year.num_students","country, ranking_system, ranking_criteria, university, university_ranking_year, university_year"
regional_sales,List all the cities where Shawn Torres sells Audio products.,SELECt t FROM ( SELECt DistINCt case  when t4.`product name` = 'Audio' AND t3.`sales team` = 'Shawn torres' tHEN t1.`city name` else null end as t FROM `store locations` t1 inner JOIN `sales orders` t2 ON t2._storeID = t1.storeID inner JOIN `sales team` t3 ON t3.salesteamID = t2._salesteamID inner JOIN products t4 ON t4.productID = t2._productID ) WHERE t is NOt null,"CREATE TABLE `store locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `store locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

CREATE TABLE `sales orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `sales orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

CREATE TABLE `sales team` (
  SalesTeamID INTEGER,
  Sales Team TEXT,
  Region TEXT
);
Sample rows from `sales team`:
1, Adam Hernandez, Northeast
2, Keith Griffin, Northeast
3, Jerry Green, West

CREATE TABLE `products` (
  ProductID INTEGER,
  Product Name TEXT
);
Sample rows from `products`:
1, Cookware
2, Photo Frames
3, Table Lamps

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  Customer Names TEXT
);
Sample rows from `Customers`:
1, Avon Corp
2, WakeFern 
3, Elorac, Corp

CREATE TABLE `Products` (
  ProductID INTEGER,
  Product Name TEXT
);
Sample rows from `Products`:
1, Cookware
2, Photo Frames
3, Table Lamps

CREATE TABLE `Regions` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `Regions`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `Sales Team` (
  SalesTeamID INTEGER,
  Sales Team TEXT,
  Region TEXT
);
Sample rows from `Sales Team`:
1, Adam Hernandez, Northeast
2, Keith Griffin, Northeast
3, Jerry Green, West

CREATE TABLE `Store Locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `Store Locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

CREATE TABLE `Sales Orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `Sales Orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

","store locations, sales orders, sales team, products","products.product name, sales team.sales team, store locations.city name, sales orders._storeID, store locations.storeID, sales team.salesteamID, sales orders._salesteamID, products.productID, sales orders._productID","Customers, Products, Regions, Sales Team, Store Locations, Sales Orders"
menu,"List the dishes that appeared at the left upper corner of the CHAS.BRADLEY'S OYSTER & DINING ROOM""s sponsored menu.",SELECT t4.name FROM menuitem as t1 inner JOIN menupage as t2 ON t1.menu_page_id = t2.id inner JOIN menu as t3 ON t2.menu_id = t3.id inner JOIN dish as t4 ON t1.dish_id = t4.id WHERE t3.sponsor = 'CHas.BRADLEY''S OYSTER & DINING ROOM' AND t1.xpos < 0.25 AND t1.ypos < 0.25,"CREATE TABLE `menuitem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `menuitem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

CREATE TABLE `menupage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `menupage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

CREATE TABLE `menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

CREATE TABLE `dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

","CREATE TABLE `Dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `Dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

CREATE TABLE `Menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `Menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

CREATE TABLE `MenuPage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `MenuPage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

CREATE TABLE `MenuItem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `MenuItem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

","menuitem, menupage, menu, dish","dish.name, menuitem.menu_page_id, menupage.id, menupage.menu_id, menu.id, menuitem.dish_id, dish.id, menu.sponsor, menuitem.xpos, menuitem.ypos","Dish, Menu, MenuPage, MenuItem"
simpson_episodes,List down the keyword and crew member's name for episode id S20-E1.,"SELECT t1.keyword, t2.person FROM keyword as t1 inner JOIN credit as t2 ON t1.episode_id = t2.episode_id WHERE t1.episode_id = 'S20-E1';","CREATE TABLE `keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","keyword, credit","keyword.keyword, credit.person, keyword.episode_id, credit.episode_id","Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
airline,"For the flight with the tail number 'N702SK', which air carrier does it belong to?",SELECT t2.description FROM airlines as t1 inner JOIN `air carriers` as t2 ON t1.op_carrier_airline_id = t2.code WHERE t1.tail_num = 'N702SK' GROUP BY t2.description,"CREATE TABLE `airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

CREATE TABLE `air carriers` (
  Code INTEGER,
  Description TEXT
);
Sample rows from `air carriers`:
19031, Mackey International Inc.: MAC
19032, Munz Northern Airlines Inc.: XY
19033, Cochise Airlines Inc.: COC

","CREATE TABLE `Air Carriers` (
  Code INTEGER,
  Description TEXT
);
Sample rows from `Air Carriers`:
19031, Mackey International Inc.: MAC
19032, Munz Northern Airlines Inc.: XY
19033, Cochise Airlines Inc.: COC

CREATE TABLE `Airports` (
  Code TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `Airports`:
01A, Afognak Lake, AK: Afognak Lake Airport
03A, Granite Mountain, AK: Bear Creek Mining Strip
04A, Lik, AK: Lik Mining Camp

CREATE TABLE `Airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `Airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

","airlines, air carriers","air carriers.description, airlines.op_carrier_airline_id, air carriers.code, airlines.tail_num","Air Carriers, Airports, Airlines"
food_inspection,Please list the names of all the restaurants that have met all requirements in one inspection.,SELECT DISTINCT t2.name FROM inspections as t1 inner JOIN businesses as t2 ON t1.business_id = t2.business_id WHERE t1.score = 100,"CREATE TABLE `inspections` (
  business_id INTEGER REFERENCES businesses(business_id),
  score INTEGER,
  date DATE,
  type TEXT
);
Sample rows from `inspections`:
10, 92, 2014-01-14, Routine - Unscheduled
10, None, 2014-01-24, Reinspection/Followup
10, 94, 2014-07-29, Routine - Unscheduled

CREATE TABLE `businesses` (
  business_id INTEGER,
  name TEXT,
  address TEXT,
  city TEXT,
  postal_code TEXT,
  latitude REAL,
  longitude REAL,
  phone_number INTEGER,
  tax_code TEXT,
  business_certificate INTEGER,
  application_date DATE,
  owner_name TEXT,
  owner_address TEXT,
  owner_city TEXT,
  owner_state TEXT,
  owner_zip TEXT
);
Sample rows from `businesses`:
10, Tiramisu Kitchen, 033 Belden Pl, San Francisco, 94104, 37.7911, -122.404, None, H24, 779059, None, Tiramisu LLC, 33 Belden St, San Francisco, CA, 94104
24, OMNI S.F. Hotel - 2nd Floor Pantry, 500 California St, 2nd  Floor, San Francisco, 94104, 37.7929, -122.403, None, H24, 352312, None, OMNI San Francisco Hotel Corp, 500 California St, 2nd Floor, San Francisco, CA, 94104
31, Norman's Ice Cream and Freezes, 2801 Leavenworth St, San Francisco, 94133, 37.8072, -122.419, None, H24, 346882, None, Norman Antiforda, 2801 Leavenworth St, San Francisco, CA, 94133

","CREATE TABLE `businesses` (
  business_id INTEGER,
  name TEXT,
  address TEXT,
  city TEXT,
  postal_code TEXT,
  latitude REAL,
  longitude REAL,
  phone_number INTEGER,
  tax_code TEXT,
  business_certificate INTEGER,
  application_date DATE,
  owner_name TEXT,
  owner_address TEXT,
  owner_city TEXT,
  owner_state TEXT,
  owner_zip TEXT
);
Sample rows from `businesses`:
10, Tiramisu Kitchen, 033 Belden Pl, San Francisco, 94104, 37.7911, -122.404, None, H24, 779059, None, Tiramisu LLC, 33 Belden St, San Francisco, CA, 94104
24, OMNI S.F. Hotel - 2nd Floor Pantry, 500 California St, 2nd  Floor, San Francisco, 94104, 37.7929, -122.403, None, H24, 352312, None, OMNI San Francisco Hotel Corp, 500 California St, 2nd Floor, San Francisco, CA, 94104
31, Norman's Ice Cream and Freezes, 2801 Leavenworth St, San Francisco, 94133, 37.8072, -122.419, None, H24, 346882, None, Norman Antiforda, 2801 Leavenworth St, San Francisco, CA, 94133

CREATE TABLE `inspections` (
  business_id INTEGER REFERENCES businesses(business_id),
  score INTEGER,
  date DATE,
  type TEXT
);
Sample rows from `inspections`:
10, 92, 2014-01-14, Routine - Unscheduled
10, None, 2014-01-24, Reinspection/Followup
10, 94, 2014-07-29, Routine - Unscheduled

CREATE TABLE `violations` (
  business_id INTEGER REFERENCES businesses(business_id),
  date DATE,
  violation_type_id TEXT,
  risk_category TEXT,
  description TEXT
);
Sample rows from `violations`:
10, 2014-07-29, 103129, Moderate Risk, Insufficient hot water or running water
10, 2014-07-29, 103144, Low Risk, Unapproved or unmaintained equipment or utensils
10, 2014-01-14, 103119, Moderate Risk, Inadequate and inaccessible handwashing facilities

","inspections, businesses","businesses.name, inspections.business_id, businesses.business_id, inspections.score","businesses, inspections, violations"
shakespeare,"Provide the character name, paragraph number, and plain text of ""cousin to the king"" description.","SELECT t1.charname, t2.paragraphnum, t2.plaintext FROM characters as t1 inner JOIN paragraphs as t2 ON t1.id = t2.character_id WHERE t1.description = 'cousin to the king'","CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

","CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
chapters, 19648
characters, 1266
paragraphs, 666327

CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

","characters, paragraphs","characters.charname, paragraphs.paragraphnum, paragraphs.plaintext, characters.id, paragraphs.character_id, characters.description","chapters, sqlite_sequence, characters, paragraphs, works"
ice_hockey_draft,What is the weight in kilograms of the player with the highest number of goal differential of all time?,SELECT t3.weight_in_kg FROM seasonstatus as t1 inner JOIN playerinfo as t2 ON t1.eliteid = t2.eliteid inner JOIN weight_info as t3 ON t2.weight = t3.weight_id ORDER BY t1.plusminus DESC LIMIT 1,"CREATE TABLE `seasonstatus` (
  ELITEID INTEGER REFERENCES PlayerInfo(ELITEID),
  SEASON TEXT,
  TEAM TEXT,
  LEAGUE TEXT,
  GAMETYPE TEXT,
  GP INTEGER,
  G INTEGER,
  A INTEGER,
  P INTEGER,
  PIM INTEGER,
  PLUSMINUS INTEGER
);
Sample rows from `seasonstatus`:
3667, 1997-1998, Rimouski Oceanic, QMJHL, Regular Season, 58, 44, 71, 115, 117, 27
3667, 1997-1998, Rimouski Oceanic, QMJHL, Playoffs, 18, 15, 26, 41, 46, 4
3667, 1997-1998, Canada U20, WJC-20, Regular Season, 7, 1, 1, 2, 4, 0

CREATE TABLE `playerinfo` (
  ELITEID INTEGER,
  PlayerName TEXT,
  birthdate TEXT,
  birthyear DATE,
  birthmonth INTEGER,
  birthday INTEGER,
  birthplace TEXT,
  nation TEXT,
  height INTEGER REFERENCES height_info(height_id),
  weight INTEGER REFERENCES weight_info(weight_id),
  position_info TEXT,
  shoots TEXT,
  draftyear INTEGER,
  draftround INTEGER,
  overall INTEGER,
  overallby TEXT,
  CSS_rank INTEGER,
  sum_7yr_GP INTEGER,
  sum_7yr_TOI INTEGER,
  GP_greater_than_0 TEXT
);
Sample rows from `playerinfo`:
9, David Bornhammar, 1981-06-15, 1981, 6, 15, Lidingo, SWE, Sweden, 73, 198, D, L, 1999, 7, 192, Washington Capitals, 192, 0, 0, no
18, David Printz, 1980-07-24, 1980, 7, 24, Stockholm, SWE, Sweden, 76, 220, D, L, 2001, 7, 225, Philadelphia Flyers, 176, 13, 84, yes
27, Yared Hagos, 1983-03-27, 1983, 3, 27, Stockholm, SWE, Sweden, 73, 218, C, L, 2001, 3, 70, Dallas Stars, 24, 0, 0, no

CREATE TABLE `weight_info` (
  weight_id INTEGER,
  weight_in_kg INTEGER,
  weight_in_lbs INTEGER
);
Sample rows from `weight_info`:
154, 70, 154
159, 72, 159
161, 73, 161

","CREATE TABLE `height_info` (
  height_id INTEGER,
  height_in_cm INTEGER,
  height_in_inch TEXT
);
Sample rows from `height_info`:
65, 165, 5'5""
67, 170, 5'7""
68, 172, 5'8""

CREATE TABLE `weight_info` (
  weight_id INTEGER,
  weight_in_kg INTEGER,
  weight_in_lbs INTEGER
);
Sample rows from `weight_info`:
154, 70, 154
159, 72, 159
161, 73, 161

CREATE TABLE `PlayerInfo` (
  ELITEID INTEGER,
  PlayerName TEXT,
  birthdate TEXT,
  birthyear DATE,
  birthmonth INTEGER,
  birthday INTEGER,
  birthplace TEXT,
  nation TEXT,
  height INTEGER REFERENCES height_info(height_id),
  weight INTEGER REFERENCES weight_info(weight_id),
  position_info TEXT,
  shoots TEXT,
  draftyear INTEGER,
  draftround INTEGER,
  overall INTEGER,
  overallby TEXT,
  CSS_rank INTEGER,
  sum_7yr_GP INTEGER,
  sum_7yr_TOI INTEGER,
  GP_greater_than_0 TEXT
);
Sample rows from `PlayerInfo`:
9, David Bornhammar, 1981-06-15, 1981, 6, 15, Lidingo, SWE, Sweden, 73, 198, D, L, 1999, 7, 192, Washington Capitals, 192, 0, 0, no
18, David Printz, 1980-07-24, 1980, 7, 24, Stockholm, SWE, Sweden, 76, 220, D, L, 2001, 7, 225, Philadelphia Flyers, 176, 13, 84, yes
27, Yared Hagos, 1983-03-27, 1983, 3, 27, Stockholm, SWE, Sweden, 73, 218, C, L, 2001, 3, 70, Dallas Stars, 24, 0, 0, no

CREATE TABLE `SeasonStatus` (
  ELITEID INTEGER REFERENCES PlayerInfo(ELITEID),
  SEASON TEXT,
  TEAM TEXT,
  LEAGUE TEXT,
  GAMETYPE TEXT,
  GP INTEGER,
  G INTEGER,
  A INTEGER,
  P INTEGER,
  PIM INTEGER,
  PLUSMINUS INTEGER
);
Sample rows from `SeasonStatus`:
3667, 1997-1998, Rimouski Oceanic, QMJHL, Regular Season, 58, 44, 71, 115, 117, 27
3667, 1997-1998, Rimouski Oceanic, QMJHL, Playoffs, 18, 15, 26, 41, 46, 4
3667, 1997-1998, Canada U20, WJC-20, Regular Season, 7, 1, 1, 2, 4, 0

","seasonstatus, playerinfo, weight_info","weight_info.weight_in_kg, seasonstatus.eliteid, playerinfo.eliteid, playerinfo.weight, weight_info.weight_id, seasonstatus.plusminus","height_info, weight_info, PlayerInfo, SeasonStatus"
cookbook,"Please list the names of all the ingredients needed for the recipe ""Raspberry Chiffon Pie"" that do not need preprocessing.",SELECT t3.name FROM recipe as t1 inner JOIN quantity as t2 ON t1.recipe_id = t2.recipe_id inner JOIN ingredient as t3 ON t3.ingredient_id = t2.ingredient_id WHERE t1.title = 'Raspberry Chiffon Pie' AND t2.preparation is null,"CREATE TABLE `recipe` (
  recipe_id INTEGER,
  title TEXT,
  subtitle TEXT,
  servings INTEGER,
  yield_unit TEXT,
  prep_min INTEGER,
  cook_min INTEGER,
  stnd_min INTEGER,
  source TEXT,
  intro TEXT,
  directions TEXT
);
Sample rows from `recipe`:
214, Raspberry Chiffon Pie, None, 10, 1 pie, 20, 8, 305, The California Tree Fruit Agreement, None, For crust, preheat oven to 375 degrees F.
In lightly greased 10-inch pie plate, combine graham cracker crumbs, melted butter and 1/4 cup sugar. Press evenly on bottom and up side of plate. Bake 5 minutes; cool.

For filling, in medium saucepan, combine juice or water and gelatin; let stand 5 minutes. Add 1/3 cup sugar and heat over medium heat, stirring to dissolve gelatin. In blender or food processor, puree 6 plums. Add puree and raspberries to gelatin mixture. Refrigerate until mixture begins to set about 1 hour. Stir yogurt into fruit mixture. In large bowl, beat egg whites until frothy. Gradually add cream of tartar and remaining 1/3 cup sugar and beat until stiff peaks form. Gently fold egg whites into fruit mixture so as not to reduce volume. Spoon into crust. Refrigerate 4 hours or overnight. Thinly slice remaining 2 plums and garnish top of pie.
215, Apricot Yogurt Parfaits, None, 4, None, 5, 2, 65, Produce for Better Health Foundation and 5 a Day, None, Drain canned apricots, pour 1/4 cup of the juice into saucepan or microwave-safe dish. Sprinkle gelatin over juice and let stand for 5 minutes to soften. Warm over low heat or microwave at medium (50% power) for 30 seconds or until gelatin has dissolved.
 
In food processor or blender, puree canned apricots; add lemon juice brandy, yogurt and gelatin mixture and process for 30 seconds or until combined.
 
Pour into parfait or stemmed glasses or champagne flutes. Cover and refrigerate until set, at least 1 hour or overnight.
 
Just before serving arrange fresh apricots on top. (If apricots are not available substitute kiwi slices or berries). Garnish each with a small spoonful of yogurt and sprinkling of brown sugar or mint.
216, Fresh Apricot Bavarian, None, 8, None, 5, 13, 0, The California Apricot Advisory Board, Serve in stemmed glasses and top with sliced apricots for elegant endings., Drop apricots into boiling water to cover. Return to boil and simmer for 5 minutes or until skins begin to split. Drain and rinse under cold water. Halve fruit and discard skins and pits. Puree apricots in electric blender. Combine water and gelatin in small saucepan; stir over low heat until dissolved. Mix sugar, apricot puree and yogurt with a wire whip until smooth; mix in dissolved gelatin. Sweeten to taste if desired. Chill mixture until thick. Spoon into stemmed glasses.

Note: One pound fresh apricots is 15 to 20. One and a half envelopes gelatin is 4 teaspoons.

CREATE TABLE `quantity` (
  quantity_id INTEGER,
  recipe_id INTEGER REFERENCES Nutrition(recipe_id) REFERENCES Recipe(recipe_id),
  ingredient_id INTEGER REFERENCES Ingredient(ingredient_id),
  max_qty REAL,
  min_qty REAL,
  unit TEXT,
  preparation TEXT,
  optional TEXT
);
Sample rows from `quantity`:
1, 214, 1613, 2.0, 2.0, cup(s), None, FALSE
2, 214, 3334, 0.25, 0.25, cup(s), None, FALSE
3, 214, 2222, 0.5, 0.5, cup(s), melted, FALSE

CREATE TABLE `ingredient` (
  ingredient_id INTEGER,
  category TEXT,
  name TEXT,
  plural TEXT
);
Sample rows from `ingredient`:
1, dairy, 1% lowfat cottage cheese, None
6, dairy, 1% lowfat milk, None
10, Mexican products, 10-inch flour tortilla, s

","CREATE TABLE `Ingredient` (
  ingredient_id INTEGER,
  category TEXT,
  name TEXT,
  plural TEXT
);
Sample rows from `Ingredient`:
1, dairy, 1% lowfat cottage cheese, None
6, dairy, 1% lowfat milk, None
10, Mexican products, 10-inch flour tortilla, s

CREATE TABLE `Recipe` (
  recipe_id INTEGER,
  title TEXT,
  subtitle TEXT,
  servings INTEGER,
  yield_unit TEXT,
  prep_min INTEGER,
  cook_min INTEGER,
  stnd_min INTEGER,
  source TEXT,
  intro TEXT,
  directions TEXT
);
Sample rows from `Recipe`:
214, Raspberry Chiffon Pie, None, 10, 1 pie, 20, 8, 305, The California Tree Fruit Agreement, None, For crust, preheat oven to 375 degrees F.
In lightly greased 10-inch pie plate, combine graham cracker crumbs, melted butter and 1/4 cup sugar. Press evenly on bottom and up side of plate. Bake 5 minutes; cool.

For filling, in medium saucepan, combine juice or water and gelatin; let stand 5 minutes. Add 1/3 cup sugar and heat over medium heat, stirring to dissolve gelatin. In blender or food processor, puree 6 plums. Add puree and raspberries to gelatin mixture. Refrigerate until mixture begins to set about 1 hour. Stir yogurt into fruit mixture. In large bowl, beat egg whites until frothy. Gradually add cream of tartar and remaining 1/3 cup sugar and beat until stiff peaks form. Gently fold egg whites into fruit mixture so as not to reduce volume. Spoon into crust. Refrigerate 4 hours or overnight. Thinly slice remaining 2 plums and garnish top of pie.
215, Apricot Yogurt Parfaits, None, 4, None, 5, 2, 65, Produce for Better Health Foundation and 5 a Day, None, Drain canned apricots, pour 1/4 cup of the juice into saucepan or microwave-safe dish. Sprinkle gelatin over juice and let stand for 5 minutes to soften. Warm over low heat or microwave at medium (50% power) for 30 seconds or until gelatin has dissolved.
 
In food processor or blender, puree canned apricots; add lemon juice brandy, yogurt and gelatin mixture and process for 30 seconds or until combined.
 
Pour into parfait or stemmed glasses or champagne flutes. Cover and refrigerate until set, at least 1 hour or overnight.
 
Just before serving arrange fresh apricots on top. (If apricots are not available substitute kiwi slices or berries). Garnish each with a small spoonful of yogurt and sprinkling of brown sugar or mint.
216, Fresh Apricot Bavarian, None, 8, None, 5, 13, 0, The California Apricot Advisory Board, Serve in stemmed glasses and top with sliced apricots for elegant endings., Drop apricots into boiling water to cover. Return to boil and simmer for 5 minutes or until skins begin to split. Drain and rinse under cold water. Halve fruit and discard skins and pits. Puree apricots in electric blender. Combine water and gelatin in small saucepan; stir over low heat until dissolved. Mix sugar, apricot puree and yogurt with a wire whip until smooth; mix in dissolved gelatin. Sweeten to taste if desired. Chill mixture until thick. Spoon into stemmed glasses.

Note: One pound fresh apricots is 15 to 20. One and a half envelopes gelatin is 4 teaspoons.

CREATE TABLE `Nutrition` (
  recipe_id INTEGER REFERENCES Recipe(recipe_id),
  protein REAL,
  carbo REAL,
  alcohol REAL,
  total_fat REAL,
  sat_fat REAL,
  cholestrl REAL,
  sodium REAL,
  iron REAL,
  vitamin_c REAL,
  vitamin_a REAL,
  fiber REAL,
  pcnt_cal_carb REAL,
  pcnt_cal_fat REAL,
  pcnt_cal_prot REAL,
  calories REAL
);
Sample rows from `Nutrition`:
214, 5.47, 41.29, 0.0, 11.53, 2.21, 1.39, 260.78, 0.81, 8.89, 586.2, 0.87, 56.8, 35.68, 7.53, 290.79
215, 5.7, 23.75, 1.93, 1.08, 0.58, 3.48, 46.17, 0.57, 13.02, 2738.24, 0.62, 67.38, 6.89, 16.17, 141.01
216, 4.9, 26.88, 0.0, 1.1, 0.58, 3.46, 41.79, 0.37, 6.13, 1521.1, 0.34, 78.45, 7.24, 14.3, 137.06

CREATE TABLE `Quantity` (
  quantity_id INTEGER,
  recipe_id INTEGER REFERENCES Nutrition(recipe_id) REFERENCES Recipe(recipe_id),
  ingredient_id INTEGER REFERENCES Ingredient(ingredient_id),
  max_qty REAL,
  min_qty REAL,
  unit TEXT,
  preparation TEXT,
  optional TEXT
);
Sample rows from `Quantity`:
1, 214, 1613, 2.0, 2.0, cup(s), None, FALSE
2, 214, 3334, 0.25, 0.25, cup(s), None, FALSE
3, 214, 2222, 0.5, 0.5, cup(s), melted, FALSE

","recipe, quantity, ingredient","ingredient.name, recipe.recipe_id, quantity.recipe_id, ingredient.ingredient_id, quantity.ingredient_id, recipe.title, quantity.preparation","Ingredient, Recipe, Nutrition, Quantity"
simpson_episodes,"Please indicate the keywords of the title ""Double, Double, Boy in Trouble"".","SELECT t2.keyword FROM episode as t1 inner JOIN keyword as t2 ON t1.episode_id = t2.episode_id WHERE t1.title = 'Double, Double, Boy in Trouble';","CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","episode, keyword","keyword.keyword, episode.episode_id, keyword.episode_id, episode.title","Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
olympics,Where was the 1920 Summer held?,SELECT t2.city_name FROM games_city as t1 inner JOIN city as t2 ON t1.city_id = t2.id inner JOIN games as t3 ON t1.games_id = t3.id WHERE t3.games_name = '1920 Summer',"CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

","CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `medal` (
  id INTEGER,
  medal_name TEXT
);
Sample rows from `medal`:
1, Gold
2, Silver
3, Bronze

CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `sport` (
  id INTEGER,
  sport_name TEXT
);
Sample rows from `sport`:
1, Aeronautics
2, Alpine Skiing
3, Alpinism

CREATE TABLE `event` (
  id INTEGER,
  sport_id INTEGER REFERENCES sport(id),
  event_name TEXT
);
Sample rows from `event`:
1, 9, Basketball Men's Basketball
2, 33, Judo Men's Extra-Lightweight
3, 25, Football Men's Football

CREATE TABLE `competitor_event` (
  event_id INTEGER REFERENCES event(id),
  competitor_id INTEGER REFERENCES games_competitor(id),
  medal_id INTEGER REFERENCES medal(id)
);
Sample rows from `competitor_event`:
1, 1, 4
2, 2, 4
3, 3, 4

","games_city, city, games","city.city_name, games_city.city_id, city.id, games_city.games_id, games.id, games.games_name","city, games, games_city, medal, noc_region, person, games_competitor, person_region, sport, event, competitor_event"
video_games,In which region where a game had the lowest number of sales?,SELECT DISTINCT t1.region_name FROM region as t1 inner JOIN region_sales as t2 ON t1.id = t2.region_id ORDER BY t2.num_sales LIMIT 1,"CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

","CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

","region, region_sales","region.region_name, region.id, region_sales.region_id, region_sales.num_sales","genre, game, platform, publisher, game_publisher, game_platform, region, region_sales"
shipping,What is the average shipment weight carried by the oldest Mack?,SELECT AVG(t2.weight) FROM truck as t1 inner JOIN shipment as t2 ON t1.truck_id = t2.truck_id WHERE t1.make = 'Mack',"CREATE TABLE `truck` (
  truck_id INTEGER,
  make TEXT,
  model_year INTEGER
);
Sample rows from `truck`:
1, Peterbilt, 2005
2, Mack, 2006
3, Peterbilt, 2007

CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

","CREATE TABLE `city` (
  city_id INTEGER,
  city_name TEXT,
  state TEXT,
  population INTEGER,
  area REAL
);
Sample rows from `city`:
100, Union City, New Jersey, 67088, 1.3
101, Huntington Park, California, 61348, 3.0
102, Passaic, New Jersey, 67861, 3.1

CREATE TABLE `customer` (
  cust_id INTEGER,
  cust_name TEXT,
  annual_revenue INTEGER,
  cust_type TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip REAL,
  phone TEXT
);
Sample rows from `customer`:
193, Advanced Fabricators, 39588651, manufacturer, 5141 Summit Boulevard, West Palm Beach, FL, 33415.0, (561) 683-3535
304, Pard's Trailer Sales, 17158109, wholesaler, 5910 South 300 West, Salt Lake City, UT, 84107.0, (801) 262-4864
314, Saar Enterprises, Inc., 47403613, retailer, 11687 192nd Street, Council Bluffs, IA, 51503.0, (712) 366-4929

CREATE TABLE `driver` (
  driver_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip_code INTEGER,
  phone TEXT
);
Sample rows from `driver`:
20, Sue, Newell, 268 Richmond Ave, Memphis, TN, 38106, (901) 774-6569
21, Andrea, Simons, 3574 Oak Limb Cv, Memphis, TN, 38135, (901) 384-0984
22, Roger, McHaney, 1839 S Orleans St, Memphis, TN, 38106, (901) 948-1043

CREATE TABLE `truck` (
  truck_id INTEGER,
  make TEXT,
  model_year INTEGER
);
Sample rows from `truck`:
1, Peterbilt, 2005
2, Mack, 2006
3, Peterbilt, 2007

CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

","truck, shipment","shipment.weight, truck.truck_id, shipment.truck_id, truck.make","city, customer, driver, truck, shipment"
student_loan,Provide the students' names and schools who enrolled for 15 months.,"SELECT name, school FROM enrolled WHERE month = 15","CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

",enrolled,"name, school","bool, person, disabled, enlist, filed_for_bankrupcy, longest_absense_from_school, male, no_payment_due, unemployed, enrolled"
image_and_language,"On image no. 5, name the attributes that are composed of multiple objects.",SELECT t2.att_class FROM img_obj_att as t1 inner JOIN att_classES as t2 ON t1.att_class_ID = t2.att_class_ID WHERE t1.img_id = 5 GROUP BY t2.att_class HAVING COUNT(t2.att_class) > 2,"CREATE TABLE `img_obj_att` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `img_obj_att`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `att_classES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `att_classES`:
0, building s
1, indoors
2, cluttered

","CREATE TABLE `ATT_CLASSES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `ATT_CLASSES`:
0, building s
1, indoors
2, cluttered

CREATE TABLE `OBJ_CLASSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLASSES`:
0, awning
1, goggles
2, dot

CREATE TABLE `IMG_OBJ` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `IMG_OBJ`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `IMG_OBJ_ATT` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_OBJ_ATT`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `PRED_CLASSES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `PRED_CLASSES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `IMG_REL` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_REL`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

","img_obj_att, att_classES","att_classES.att_class, img_obj_att.att_class_ID, att_classES.att_class_ID, img_obj_att.img_id","ATT_CLASSES, OBJ_CLASSES, IMG_OBJ, IMG_OBJ_ATT, PRED_CLASSES, IMG_REL"
mental_health_survey,"For which question did the user No.2183 gave the answer ""Mood Disorder (Depression, Bipolar Disorder, etc)""?","SELECT t1.answertext FROM answer as t1 inner JOIN question as t2 ON t1.questionID = t2.questionid WHERE t2.questionid = 2183 AND t1.answertext = 'Mood Disorder (Depression, Bipolar Disorder, etc)'","CREATE TABLE `answer` (
  AnswerText TEXT,
  SurveyID INTEGER REFERENCES Survey(None),
  UserID INTEGER PRIMARY KEY,
  QuestionID INTEGER PRIMARY KEY REFERENCES Question(None)
);
Sample rows from `answer`:
37, 2014, 1, 1
44, 2014, 2, 1
32, 2014, 3, 1

CREATE TABLE `question` (
  questiontext TEXT,
  questionid INTEGER
);
Sample rows from `question`:
What is your age?, 1
What is your gender?, 2
What country do you live in?, 3

","CREATE TABLE `Question` (
  questiontext TEXT,
  questionid INTEGER
);
Sample rows from `Question`:
What is your age?, 1
What is your gender?, 2
What country do you live in?, 3

CREATE TABLE `Survey` (
  SurveyID INTEGER,
  Description TEXT
);
Sample rows from `Survey`:
2014, mental health survey for 2014
2016, mental health survey for 2016
2017, mental health survey for 2017

CREATE TABLE `Answer` (
  AnswerText TEXT,
  SurveyID INTEGER REFERENCES Survey(None),
  UserID INTEGER PRIMARY KEY,
  QuestionID INTEGER PRIMARY KEY REFERENCES Question(None)
);
Sample rows from `Answer`:
37, 2014, 1, 1
44, 2014, 2, 1
32, 2014, 3, 1

","answer, question","answer.answertext, answer.questionID, question.questionid","Question, Survey, Answer"
human_resources,"Mention the full name, hired date and performance status of the employee whose location is in Utah state.","SELECT t1.firstname, t1.lastname, t1.hiredate, t1.performance FROM employee as t1  inner JOIN location as t2  ON t1.locationid = t2.locationid WHERE t2.state = 'UT'","CREATE TABLE `employee` (
  ssn TEXT PRIMARY KEY,
  lastname TEXT,
  firstname TEXT,
  hiredate TEXT,
  salary TEXT,
  gender TEXT,
  performance TEXT,
  positionID INTEGER REFERENCES position(positionID),
  locationID INTEGER REFERENCES location(locationID)
);
Sample rows from `employee`:
000-01-0000, Milgrom, Patricia, 10/1/04, US$57,500.00, F, Average, 2, 2
000-02-2222, Adams, Sandy, 1/15/01, US$19,500.00, F, Average, 3, 1
109-87-6543, Wood, Emily, 3/12/97, US$69,000.00, F, Average, 2, 5

CREATE TABLE `location` (
  locationID INTEGER,
  locationcity TEXT,
  address TEXT,
  state TEXT,
  zipcode INTEGER,
  officephone TEXT
);
Sample rows from `location`:
1, Atlanta, 450 Peachtree Rd, GA, 30316, (404)333-5555
2, Boston, 3 Commons Blvd, MA, 2190, (617)123-4444
3, Chicago, 500 Loop Highway, IL, 60620, (312)444-6666

","CREATE TABLE `location` (
  locationID INTEGER,
  locationcity TEXT,
  address TEXT,
  state TEXT,
  zipcode INTEGER,
  officephone TEXT
);
Sample rows from `location`:
1, Atlanta, 450 Peachtree Rd, GA, 30316, (404)333-5555
2, Boston, 3 Commons Blvd, MA, 2190, (617)123-4444
3, Chicago, 500 Loop Highway, IL, 60620, (312)444-6666

CREATE TABLE `position` (
  positionID INTEGER,
  positiontitle TEXT,
  educationrequired TEXT,
  minsalary TEXT,
  maxsalary TEXT
);
Sample rows from `position`:
1, Account Representative, 4 year degree, US$25,000.00, US$75,000.00
2, Manager, 4 year degree, US$50,000.00, US$150,000.00
3, Trainee, 2 year degree, US$18,000.00, US$25,000.00

CREATE TABLE `employee` (
  ssn TEXT PRIMARY KEY,
  lastname TEXT,
  firstname TEXT,
  hiredate TEXT,
  salary TEXT,
  gender TEXT,
  performance TEXT,
  positionID INTEGER REFERENCES position(positionID),
  locationID INTEGER REFERENCES location(locationID)
);
Sample rows from `employee`:
000-01-0000, Milgrom, Patricia, 10/1/04, US$57,500.00, F, Average, 2, 2
000-02-2222, Adams, Sandy, 1/15/01, US$19,500.00, F, Average, 3, 1
109-87-6543, Wood, Emily, 3/12/97, US$69,000.00, F, Average, 2, 5

","employee, location","employee.firstname, employee.lastname, employee.hiredate, employee.performance, employee.locationid, location.locationid, location.state","location, position, employee"
human_resources,What is the average salary of all employees with a 2 year degree position?,"SELECT AVG(cast(replace(substr(t1.salary, 4), ',', '') as real)) FROM employee as t1  inner JOIN position as t2  ON t1.positionid = t2.positionid WHERE t2.educationrequired = '2 year degree'","CREATE TABLE `employee` (
  ssn TEXT PRIMARY KEY,
  lastname TEXT,
  firstname TEXT,
  hiredate TEXT,
  salary TEXT,
  gender TEXT,
  performance TEXT,
  positionID INTEGER REFERENCES position(positionID),
  locationID INTEGER REFERENCES location(locationID)
);
Sample rows from `employee`:
000-01-0000, Milgrom, Patricia, 10/1/04, US$57,500.00, F, Average, 2, 2
000-02-2222, Adams, Sandy, 1/15/01, US$19,500.00, F, Average, 3, 1
109-87-6543, Wood, Emily, 3/12/97, US$69,000.00, F, Average, 2, 5

CREATE TABLE `position` (
  positionID INTEGER,
  positiontitle TEXT,
  educationrequired TEXT,
  minsalary TEXT,
  maxsalary TEXT
);
Sample rows from `position`:
1, Account Representative, 4 year degree, US$25,000.00, US$75,000.00
2, Manager, 4 year degree, US$50,000.00, US$150,000.00
3, Trainee, 2 year degree, US$18,000.00, US$25,000.00

","CREATE TABLE `location` (
  locationID INTEGER,
  locationcity TEXT,
  address TEXT,
  state TEXT,
  zipcode INTEGER,
  officephone TEXT
);
Sample rows from `location`:
1, Atlanta, 450 Peachtree Rd, GA, 30316, (404)333-5555
2, Boston, 3 Commons Blvd, MA, 2190, (617)123-4444
3, Chicago, 500 Loop Highway, IL, 60620, (312)444-6666

CREATE TABLE `position` (
  positionID INTEGER,
  positiontitle TEXT,
  educationrequired TEXT,
  minsalary TEXT,
  maxsalary TEXT
);
Sample rows from `position`:
1, Account Representative, 4 year degree, US$25,000.00, US$75,000.00
2, Manager, 4 year degree, US$50,000.00, US$150,000.00
3, Trainee, 2 year degree, US$18,000.00, US$25,000.00

CREATE TABLE `employee` (
  ssn TEXT PRIMARY KEY,
  lastname TEXT,
  firstname TEXT,
  hiredate TEXT,
  salary TEXT,
  gender TEXT,
  performance TEXT,
  positionID INTEGER REFERENCES position(positionID),
  locationID INTEGER REFERENCES location(locationID)
);
Sample rows from `employee`:
000-01-0000, Milgrom, Patricia, 10/1/04, US$57,500.00, F, Average, 2, 2
000-02-2222, Adams, Sandy, 1/15/01, US$19,500.00, F, Average, 3, 1
109-87-6543, Wood, Emily, 3/12/97, US$69,000.00, F, Average, 2, 5

","employee, position","employee.salary, employee.positionid, position.positionid, position.educationrequired","location, position, employee"
image_and_language,What attributes are used to describe the wall on image no. 27.,SELECT t4.att_class FROM img_obj as t1 inner JOIN OBJ_CLasSES as t2 ON t1.OBJ_CLasS_ID = t2.OBJ_CLasS_ID inner JOIN img_obj_ATT as t3 ON t1.img_id = t3.img_id inner JOIN att_classES as t4 ON t3.att_class_ID = t4.att_class_ID WHERE t2.OBJ_CLasS = 'wall' AND t1.img_id = 27 GROUP BY t4.att_class,"CREATE TABLE `img_obj` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `img_obj`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `OBJ_CLasSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLasSES`:
0, awning
1, goggles
2, dot

CREATE TABLE `img_obj_ATT` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `img_obj_ATT`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `att_classES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `att_classES`:
0, building s
1, indoors
2, cluttered

","CREATE TABLE `ATT_CLASSES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `ATT_CLASSES`:
0, building s
1, indoors
2, cluttered

CREATE TABLE `OBJ_CLASSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLASSES`:
0, awning
1, goggles
2, dot

CREATE TABLE `IMG_OBJ` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `IMG_OBJ`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `IMG_OBJ_ATT` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_OBJ_ATT`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `PRED_CLASSES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `PRED_CLASSES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `IMG_REL` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_REL`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

","img_obj, OBJ_CLasSES, img_obj_ATT, att_classES","att_classES.att_class, img_obj.OBJ_CLasS_ID, OBJ_CLasSES.OBJ_CLasS_ID, img_obj.img_id, img_obj_ATT.img_id, img_obj_ATT.att_class_ID, att_classES.att_class_ID, OBJ_CLasSES.OBJ_CLasS","ATT_CLASSES, OBJ_CLASSES, IMG_OBJ, IMG_OBJ_ATT, PRED_CLASSES, IMG_REL"
sales_in_weather,"For the weather station has store no.9, what was the increased percentage of the average temperature from 2012/2/2 to 2012/2/3?",SELECT cast((SUM(case when t1.`date` = '2012-02-03' then t1.tavg * 1 else 0 end) - SUM(case when t1.`date` = '2012-02-02' then t1.tavg * 1 else 0 end)) as real) * 100 / SUM(case when t1.`date` = '2012-02-02' then t1.tavg * 1 else 0 end) FROM weather as t1 inner JOIN relation as t2 ON t1.station_nbr = t2.station_nbr WHERE t2.store_nbr = 9,"CREATE TABLE `weather` (
  station_nbr INTEGER PRIMARY KEY,
  date DATE PRIMARY KEY,
  tmax INTEGER,
  tmin INTEGER,
  tavg INTEGER,
  depart INTEGER,
  dewpoint INTEGER,
  wetbulb INTEGER,
  heat INTEGER,
  cool INTEGER,
  sunrise TEXT,
  sunset TEXT,
  codesum TEXT,
  snowfall REAL,
  preciptotal REAL,
  stnpressure REAL,
  sealevel REAL,
  resultspeed REAL,
  resultdir INTEGER,
  avgspeed REAL
);
Sample rows from `weather`:
1, 2012-01-01, 52, 31, 42, None, 36, 40, 23, 0, None, None, RA FZFG BR, None, 0.05, 29.78, 29.92, 3.6, 20, 4.6
1, 2012-01-02, 50, 31, 41, None, 26, 35, 24, 0, None, None,  , None, 0.01, 29.44, 29.62, 9.8, 24, 10.3
1, 2012-01-03, 32, 11, 22, None, 4, 18, 43, 0, None, None,  , None, 0.0, 29.67, 29.87, 10.8, 31, 11.6

CREATE TABLE `relation` (
  store_nbr INTEGER REFERENCES sales_in_weather(store_nbr),
  station_nbr INTEGER REFERENCES weather(station_nbr)
);
Sample rows from `relation`:
1, 1
2, 14
3, 7

","CREATE TABLE `sales_in_weather` (
  date DATE PRIMARY KEY,
  store_nbr INTEGER PRIMARY KEY,
  item_nbr INTEGER PRIMARY KEY,
  units INTEGER
);
Sample rows from `sales_in_weather`:
2012-01-01, 1, 1, 0
2012-01-01, 1, 2, 0
2012-01-01, 1, 3, 0

CREATE TABLE `weather` (
  station_nbr INTEGER PRIMARY KEY,
  date DATE PRIMARY KEY,
  tmax INTEGER,
  tmin INTEGER,
  tavg INTEGER,
  depart INTEGER,
  dewpoint INTEGER,
  wetbulb INTEGER,
  heat INTEGER,
  cool INTEGER,
  sunrise TEXT,
  sunset TEXT,
  codesum TEXT,
  snowfall REAL,
  preciptotal REAL,
  stnpressure REAL,
  sealevel REAL,
  resultspeed REAL,
  resultdir INTEGER,
  avgspeed REAL
);
Sample rows from `weather`:
1, 2012-01-01, 52, 31, 42, None, 36, 40, 23, 0, None, None, RA FZFG BR, None, 0.05, 29.78, 29.92, 3.6, 20, 4.6
1, 2012-01-02, 50, 31, 41, None, 26, 35, 24, 0, None, None,  , None, 0.01, 29.44, 29.62, 9.8, 24, 10.3
1, 2012-01-03, 32, 11, 22, None, 4, 18, 43, 0, None, None,  , None, 0.0, 29.67, 29.87, 10.8, 31, 11.6

CREATE TABLE `relation` (
  store_nbr INTEGER REFERENCES sales_in_weather(store_nbr),
  station_nbr INTEGER REFERENCES weather(station_nbr)
);
Sample rows from `relation`:
1, 1
2, 14
3, 7

","weather, relation","weather.date, weather.tavg, weather.station_nbr, relation.station_nbr, relation.store_nbr","sales_in_weather, weather, relation"
authors,"List down the author ID of authors with a name of ""Peter"".",SELECT authorid FROM paperauthor WHERE name = 'Peter',"CREATE TABLE `paperauthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `paperauthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

","CREATE TABLE `Author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `Author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

CREATE TABLE `Conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

CREATE TABLE `Journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `Paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `Paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `PaperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `PaperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

",paperauthor,"authorid, name","Author, Conference, Journal, Paper, PaperAuthor"
trains,How many trains running west have double sided cars in 3rd position?,SELECt COUNT(t.train_id) FROM (SELECt t1.train_id FROM cars as t1 inner JOIN trains as t2 ON t1.train_id = t2.id WHERE t1.position = 3 AND t2.direction = 'west' AND t1.sides = 'double' GROUP BY t1.train_id)as t,"CREATE TABLE `cars` (
  id INTEGER,
  train_id INTEGER REFERENCES trains(id),
  position INTEGER,
  shape TEXT,
  len TEXT,
  sides TEXT,
  roof TEXT,
  wheels INTEGER,
  load_shape TEXT,
  load_num INTEGER
);
Sample rows from `cars`:
1, 1, 1, rectangle, short, not_double, none, 2, circle, 1
2, 1, 2, rectangle, long, not_double, none, 3, hexagon, 1
3, 1, 3, rectangle, short, not_double, peaked, 2, triangle, 1

CREATE TABLE `trains` (
  id INTEGER,
  direction TEXT
);
Sample rows from `trains`:
1, east
2, east
3, east

","CREATE TABLE `cars` (
  id INTEGER,
  train_id INTEGER REFERENCES trains(id),
  position INTEGER,
  shape TEXT,
  len TEXT,
  sides TEXT,
  roof TEXT,
  wheels INTEGER,
  load_shape TEXT,
  load_num INTEGER
);
Sample rows from `cars`:
1, 1, 1, rectangle, short, not_double, none, 2, circle, 1
2, 1, 2, rectangle, long, not_double, none, 3, hexagon, 1
3, 1, 3, rectangle, short, not_double, peaked, 2, triangle, 1

CREATE TABLE `trains` (
  id INTEGER,
  direction TEXT
);
Sample rows from `trains`:
1, east
2, east
3, east

","cars, trains","cars.train_id, trains.id, cars.position, trains.direction, cars.sides","cars, trains"
student_loan,What is the percentage difference between the attendence of disabled and non-disable students? Do the disable students show better attendance than non-disable students?,"SELECT cast((SUM(iif(t2.name is noT null AND t1.month = 0, 1, 0)) - SUM(iif(t2.name is null AND t1.month = 0, 1, 0))) as real) * 100 / COUNT(t1.name), iif(SUM(iif(t2.name is noT null AND t1.month = 0, 1, 0)) - SUM(iif(t2.name is null AND t1.month = 0, 1, 0)) > 0, 'YES', 'no') as ishigh FROM longest_absense_from_school as t1 left JOIN disabled as t2 ON t2.name = t1.name","CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

","longest_absense_from_school, disabled","disabled.name, longest_absense_from_school.month, longest_absense_from_school.name","bool, person, disabled, enlist, filed_for_bankrupcy, longest_absense_from_school, male, no_payment_due, unemployed, enrolled"
retail_world,What is the title of the employee who handled order id 10270?,SELECT t1.title FROM employees as t1 inner JOIN orders as t2 ON t1.employeeid = t2.employeeid WHERE t2.orderid = 10257,"CREATE TABLE `employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

","employees, orders","employees.title, employees.employeeid, orders.employeeid, orders.orderid","sqlite_sequence, Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails"
chicago_crime,"How many domestic violence cases were brought in the ward that uses ""ward13@cityofchicago.org""?",SELECT SUM(case when t2.domestic = 'TRUE' then 1 else 0 end) FROM ward as t1 inner JOIN crime as t2 ON t2.ward_no = t1.ward_no WHERE t1.ward_email = 'ward13@cityofchicago.org',"CREATE TABLE `ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","CREATE TABLE `Community_Area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `Community_Area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `District` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `District`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `FBI_Code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `FBI_Code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `IUCR` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `IUCR`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `Neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `Neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `Ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `Ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `Crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `Crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","ward, crime","crime.domestic, crime.ward_no, ward.ward_no, ward.ward_email","Community_Area, District, FBI_Code, IUCR, Neighborhood, Ward, Crime"
law_episode,"Who played the role of the ""president of NBC West Coast"" in the first episode?",SELECT t2.name FROM credit as t1 inner JOIN person as t2 ON t2.person_id = t1.person_id inner JOIN episode as t3 ON t1.episode_id = t3.episode_id WHERE t3.episode = 1 AND t1.role = 'president of NBC West Coast',"CREATE TABLE `credit` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  person_id TEXT PRIMARY KEY REFERENCES Person(person_id),
  category TEXT,
  role TEXT,
  credited TEXT
);
Sample rows from `credit`:
tt0629204, nm0226352, Additional Crew, technical advisor, true
tt0629204, nm0506974, Additional Crew, production accountant, true
tt0629204, nm4103116, Additional Crew, production accountant, true

CREATE TABLE `person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
tt0629239, nun
tt0629239, priest
tt0629420, police officer

CREATE TABLE `Person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  series TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  person_id TEXT REFERENCES Person(person_id),
  role TEXT,
  result TEXT
);
Sample rows from `Award`:
258, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0937725, None, Winner
259, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0792309, None, Winner
260, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0049569, None, Winner

CREATE TABLE `Credit` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  person_id TEXT PRIMARY KEY REFERENCES Person(person_id),
  category TEXT,
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
tt0629204, nm0226352, Additional Crew, technical advisor, true
tt0629204, nm0506974, Additional Crew, production accountant, true
tt0629204, nm4103116, Additional Crew, production accountant, true

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
tt0629204, 10, 36, 17.7
tt0629204, 9, 39, 19.2
tt0629204, 8, 64, 31.5

","credit, person, episode","person.name, person.person_id, credit.person_id, credit.episode_id, episode.episode_id, episode.episode, credit.role","Episode, Keyword, Person, Award, Credit, Vote"
shakespeare,"Between Rome and Juliet, which character was mentioned the most in the The Tragedy of Romeo and Juliet? Calculate for Romeo and Juliet's individual amount of appearance in percentage against the overall number of characters that appeared in the said work.","SELECT SUM(iif(t4.charname = 'Romeo', 1, 0)), SUM(iif(t4.charname = 'Juliet', 1, 0)), cast(SUM(iif(t4.charname = 'Romeo', 1, 0)) + SUM(iif(t4.charname = 'Juliet', 1, 0)) as real) * 100 / COUNT(t1.id) FROM works as t1 inner JOIN chapters as t2 ON t1.id = t2.work_id inner JOIN paragraphs as t3 ON t2.id = t3.chapter_id inner JOIN characters as t4 ON t3.character_id = t4.id","CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

","CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
chapters, 19648
characters, 1266
paragraphs, 666327

CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

","works, chapters, paragraphs, characters","characters.charname, works.id, chapters.work_id, chapters.id, paragraphs.chapter_id, paragraphs.character_id, characters.id","chapters, sqlite_sequence, characters, paragraphs, works"
chicago_crime,"Among the crimes located in the community area with the highest population, what is the percentage of domestic violence?",SELECT cast(COUNT(case when t2.domestic = 'TRUE' then t2.domestic end) as real) * 100 / COUNT(t2.domestic) FROM community_area as t1 inner JOIN crime as t2 ON t2.community_area_no = t1.community_area_no GROUP BY t1.community_area_no HAVING COUNT(t1.population) ORDER BY COUNT(t1.population) DESC LIMIT 1,"CREATE TABLE `community_area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `community_area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","CREATE TABLE `Community_Area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `Community_Area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `District` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `District`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `FBI_Code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `FBI_Code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `IUCR` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `IUCR`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `Neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `Neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `Ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `Ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `Crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `Crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","community_area, crime","crime.domestic, crime.community_area_no, community_area.community_area_no, community_area.population","Community_Area, District, FBI_Code, IUCR, Neighborhood, Ward, Crime"
music_tracker,Find the average number of downloads for Single-Tables released by '2Pac' between 2001 and 2013.,SELECT AVG(totalsnatched) FROM torrents WHERE artist LIKE '2Pac' AND releasetype LIKE 'Single' AND groupyear BETWEEN 2001 AND 2013,"CREATE TABLE `torrents` (
  groupName TEXT,
  totalSnatched INTEGER,
  artist TEXT,
  groupYear INTEGER,
  releaseType TEXT,
  groupId INTEGER,
  id INTEGER
);
Sample rows from `torrents`:
superappin&#39;, 239, grandmaster flash & the furious five, 1979, single, 720949, 0
spiderap / a corona jam, 156, ron hunt & ronnie g & the sm crew, 1979, single, 728752, 1
rapper&#39;s delight, 480, sugarhill gang, 1979, single, 18513, 2

","CREATE TABLE `torrents` (
  groupName TEXT,
  totalSnatched INTEGER,
  artist TEXT,
  groupYear INTEGER,
  releaseType TEXT,
  groupId INTEGER,
  id INTEGER
);
Sample rows from `torrents`:
superappin&#39;, 239, grandmaster flash & the furious five, 1979, single, 720949, 0
spiderap / a corona jam, 156, ron hunt & ronnie g & the sm crew, 1979, single, 728752, 1
rapper&#39;s delight, 480, sugarhill gang, 1979, single, 18513, 2

CREATE TABLE `tags` (
  index INTEGER PRIMARY KEY,
  id INTEGER REFERENCES torrents(None),
  tag TEXT
);
Sample rows from `tags`:
0, 0, 1970s
1, 0, funk
2, 0, disco

",torrents,"totalsnatched, artist, releasetype, groupyear","torrents, tags"
cars,What is the acceleration of the most expensive car?,SELECT t1.acceleration FROM data as t1 inner JOIN price as t2 ON t1.id = t2.id ORDER BY t2.price DESC LIMIT 1,"CREATE TABLE `data` (
  ID INTEGER REFERENCES price(ID),
  mpg REAL,
  cylinders INTEGER,
  displacement REAL,
  horsepower INTEGER,
  weight INTEGER,
  acceleration REAL,
  model INTEGER,
  car_name TEXT
);
Sample rows from `data`:
1, 18.0, 8, 307.0, 130, 3504, 12.0, 70, chevrolet chevelle malibu
2, 15.0, 8, 350.0, 165, 3693, 11.5, 70, buick skylark 320
3, 18.0, 8, 318.0, 150, 3436, 11.0, 70, plymouth satellite

CREATE TABLE `price` (
  ID INTEGER,
  price REAL
);
Sample rows from `price`:
1, 25561.59078
2, 24221.42273
3, 27240.84373

","CREATE TABLE `country` (
  origin INTEGER,
  country TEXT
);
Sample rows from `country`:
1, USA
2, Europe
3, Japan

CREATE TABLE `price` (
  ID INTEGER,
  price REAL
);
Sample rows from `price`:
1, 25561.59078
2, 24221.42273
3, 27240.84373

CREATE TABLE `data` (
  ID INTEGER REFERENCES price(ID),
  mpg REAL,
  cylinders INTEGER,
  displacement REAL,
  horsepower INTEGER,
  weight INTEGER,
  acceleration REAL,
  model INTEGER,
  car_name TEXT
);
Sample rows from `data`:
1, 18.0, 8, 307.0, 130, 3504, 12.0, 70, chevrolet chevelle malibu
2, 15.0, 8, 350.0, 165, 3693, 11.5, 70, buick skylark 320
3, 18.0, 8, 318.0, 150, 3436, 11.0, 70, plymouth satellite

CREATE TABLE `production` (
  ID INTEGER PRIMARY KEY REFERENCES price(ID) REFERENCES data(ID),
  model_year INTEGER PRIMARY KEY,
  country INTEGER REFERENCES country(origin)
);
Sample rows from `production`:
1, 1970, 1
1, 1971, 1
2, 1970, 1

","data, price","data.acceleration, data.id, price.id, price.price","country, price, data, production"
disney,How many voice actors for the movie Aladdin?,SELECT COUNT('voice-actor') FROM `voice-actors` WHERE movie = 'Aladdin',"CREATE TABLE `voice-actors` (
  character TEXT PRIMARY KEY,
  voice-actor TEXT,
  movie TEXT REFERENCES characters(movie_title)
);
Sample rows from `voice-actors`:
Abby Mallard, Joan Cusack, Chicken Little
Abigail Gabble, Monica Evans, The Aristocats
Abis Mal, Jason Alexander, The Return of Jafar

","CREATE TABLE `characters` (
  movie_title TEXT PRIMARY KEY,
  release_date TEXT,
  hero TEXT REFERENCES voice-actors(character),
  villian TEXT,
  song TEXT
);
Sample rows from `characters`:
Snow White and the Seven Dwarfs, 21-Dec-37, Snow White, Evil Queen, Some Day My Prince Will Come
Pinocchio, 7-Feb-40, Pinocchio, Stromboli, When You Wish upon a Star
Fantasia, 13-Nov-40, None, Chernabog, None

CREATE TABLE `director` (
  name TEXT PRIMARY KEY REFERENCES characters(movie_title),
  director TEXT
);
Sample rows from `director`:
Snow White and the Seven Dwarfs, David Hand
Pinocchio, Ben Sharpsteen
Fantasia, full credits

CREATE TABLE `movies_total_gross` (
  movie_title TEXT PRIMARY KEY REFERENCES characters(movie_title),
  release_date TEXT PRIMARY KEY,
  genre TEXT,
  MPAA_rating TEXT,
  total_gross TEXT,
  inflation_adjusted_gross TEXT
);
Sample rows from `movies_total_gross`:
Snow White and the Seven Dwarfs, Dec 21, 1937, Musical, G, $184,925,485, $5,228,953,251
Pinocchio, Feb 9, 1940, Adventure, G, $84,300,000, $2,188,229,052
Fantasia, Nov 13, 1940, Musical, G, $83,320,000, $2,187,090,808

CREATE TABLE `revenue` (
  Year INTEGER,
  Studio Entertainment[NI 1] REAL,
  Disney Consumer Products[NI 2] REAL,
  Disney Interactive[NI 3][Rev 1] INTEGER,
  Walt Disney Parks and Resorts REAL,
  Disney Media Networks TEXT,
  Total INTEGER
);
Sample rows from `revenue`:
1991, 2593.0, 724.0, None, 2794.0, None, 6111
1992, 3115.0, 1081.0, None, 3306.0, None, 7502
1993, 3673.4, 1415.1, None, 3440.7, None, 8529

CREATE TABLE `voice-actors` (
  character TEXT PRIMARY KEY,
  voice-actor TEXT,
  movie TEXT REFERENCES characters(movie_title)
);
Sample rows from `voice-actors`:
Abby Mallard, Joan Cusack, Chicken Little
Abigail Gabble, Monica Evans, The Aristocats
Abis Mal, Jason Alexander, The Return of Jafar

",voice-actors,movie,"characters, director, movies_total_gross, revenue, voice-actors"
coinmarketcap,"List the names of the top five coins traded on January 1, 2014.",SELECT t1.name FROM coins as t1 inner JOIN historical as t2 ON t1.id = t2.coin_id WHERE t2.date = '2014-01-01' AND t2.cmc_rank <= 5,"CREATE TABLE `coins` (
  id INTEGER,
  name TEXT,
  slug TEXT,
  symbol TEXT,
  status TEXT,
  category TEXT,
  description TEXT,
  subreddit TEXT,
  notice TEXT,
  tags TEXT,
  tag_names TEXT,
  website TEXT,
  platform_id INTEGER,
  date_added TEXT,
  date_launched TEXT
);
Sample rows from `coins`:
1, Bitcoin, bitcoin, BTC, active, coin, ## **What Is Bitcoin (BTC)?**\n\nBitcoin is a decentralized cryptocurrency originally described in a 2008 [whitepaper](https://coinmarketcap.com/alexandria/glossary/whitepaper) by a person, or group of people, using the alias [Satoshi Nakamoto](https://co, bitcoin, None, mineable, pow, sha-256, store-of-value, state-channels, coinbase-ventures-portfolio, three-arrows-capital-portfolio, polychain-capital-portfolio, binance-labs-portfolio, arrington-xrp-capital, blockchain-capital-portfolio, boostvc-portfolio, cms-holdings-, Mineable, PoW, SHA-256, Store of Value, State channels, Coinbase Ventures Portfolio, Three Arrows Capital Portfolio, Polychain Capital Portfolio, Binance Labs Portfolio, Arrington XRP capital, Blockchain Capital Portfolio, BoostVC Portfolio, CMS Holdings , https://bitcoin.org/, None, 2013-04-28T00:00:00.000Z, None
2, Litecoin, litecoin, LTC, active, coin, ## What Is Litecoin (LTC)?\n\nLitecoin (LTC) is a cryptocurrency that was designed to provide fast, secure and low-cost payments by leveraging the unique properties of [blockchain](https://coinmarketcap.com/alexandria/glossary/blockchain) technology. \n\n, litecoin, None, mineable, pow, scrypt, medium-of-exchange, binance-chain, Mineable, PoW, Scrypt, Medium of Exchange, Binance Chain, https://litecoin.org/, None, 2013-04-28T00:00:00.000Z, None
3, Namecoin, namecoin, NMC, active, coin, Namecoin (NMC) is a cryptocurrency . Users are able to generate NMC through the process of mining. Namecoin has a current supply of 14,736,400. The last known price of Namecoin is 2.14833562 USD and is up 0.40 over the last 24 hours. It is currently tradi, namecoin, None, mineable, pow, sha-256, platform, Mineable, PoW, SHA-256, Platform, https://www.namecoin.org/, None, 2013-04-28T00:00:00.000Z, None

CREATE TABLE `historical` (
  date DATE,
  coin_id INTEGER,
  cmc_rank INTEGER,
  market_cap REAL,
  price REAL,
  open REAL,
  high REAL,
  low REAL,
  close REAL,
  time_high TEXT,
  time_low TEXT,
  volume_24h REAL,
  percent_change_1h REAL,
  percent_change_24h REAL,
  percent_change_7d REAL,
  circulating_supply REAL,
  total_supply REAL,
  max_supply REAL,
  num_market_pairs INTEGER
);
Sample rows from `historical`:
2013-04-28, 1, 1, 1488566971.9558687, 134.210021972656, None, None, None, None, None, None, 0.0, 0.639231, None, None, 11091325.0, 11091325.0, 21000000.0, None
2013-04-28, 2, 2, 74637021.56790735, 4.34840488433838, None, None, None, None, None, None, 0.0, 0.799273, None, None, 17164230.0, 17164230.0, 84000000.0, None
2013-04-28, 5, 3, 7250186.647688276, 0.386524856090546, None, None, None, None, None, None, 0.0, -0.934763, None, None, 18757362.0, 18757362.0, None, None

","CREATE TABLE `coins` (
  id INTEGER,
  name TEXT,
  slug TEXT,
  symbol TEXT,
  status TEXT,
  category TEXT,
  description TEXT,
  subreddit TEXT,
  notice TEXT,
  tags TEXT,
  tag_names TEXT,
  website TEXT,
  platform_id INTEGER,
  date_added TEXT,
  date_launched TEXT
);
Sample rows from `coins`:
1, Bitcoin, bitcoin, BTC, active, coin, ## **What Is Bitcoin (BTC)?**\n\nBitcoin is a decentralized cryptocurrency originally described in a 2008 [whitepaper](https://coinmarketcap.com/alexandria/glossary/whitepaper) by a person, or group of people, using the alias [Satoshi Nakamoto](https://co, bitcoin, None, mineable, pow, sha-256, store-of-value, state-channels, coinbase-ventures-portfolio, three-arrows-capital-portfolio, polychain-capital-portfolio, binance-labs-portfolio, arrington-xrp-capital, blockchain-capital-portfolio, boostvc-portfolio, cms-holdings-, Mineable, PoW, SHA-256, Store of Value, State channels, Coinbase Ventures Portfolio, Three Arrows Capital Portfolio, Polychain Capital Portfolio, Binance Labs Portfolio, Arrington XRP capital, Blockchain Capital Portfolio, BoostVC Portfolio, CMS Holdings , https://bitcoin.org/, None, 2013-04-28T00:00:00.000Z, None
2, Litecoin, litecoin, LTC, active, coin, ## What Is Litecoin (LTC)?\n\nLitecoin (LTC) is a cryptocurrency that was designed to provide fast, secure and low-cost payments by leveraging the unique properties of [blockchain](https://coinmarketcap.com/alexandria/glossary/blockchain) technology. \n\n, litecoin, None, mineable, pow, scrypt, medium-of-exchange, binance-chain, Mineable, PoW, Scrypt, Medium of Exchange, Binance Chain, https://litecoin.org/, None, 2013-04-28T00:00:00.000Z, None
3, Namecoin, namecoin, NMC, active, coin, Namecoin (NMC) is a cryptocurrency . Users are able to generate NMC through the process of mining. Namecoin has a current supply of 14,736,400. The last known price of Namecoin is 2.14833562 USD and is up 0.40 over the last 24 hours. It is currently tradi, namecoin, None, mineable, pow, sha-256, platform, Mineable, PoW, SHA-256, Platform, https://www.namecoin.org/, None, 2013-04-28T00:00:00.000Z, None

CREATE TABLE `historical` (
  date DATE,
  coin_id INTEGER,
  cmc_rank INTEGER,
  market_cap REAL,
  price REAL,
  open REAL,
  high REAL,
  low REAL,
  close REAL,
  time_high TEXT,
  time_low TEXT,
  volume_24h REAL,
  percent_change_1h REAL,
  percent_change_24h REAL,
  percent_change_7d REAL,
  circulating_supply REAL,
  total_supply REAL,
  max_supply REAL,
  num_market_pairs INTEGER
);
Sample rows from `historical`:
2013-04-28, 1, 1, 1488566971.9558687, 134.210021972656, None, None, None, None, None, None, 0.0, 0.639231, None, None, 11091325.0, 11091325.0, 21000000.0, None
2013-04-28, 2, 2, 74637021.56790735, 4.34840488433838, None, None, None, None, None, None, 0.0, 0.799273, None, None, 17164230.0, 17164230.0, 84000000.0, None
2013-04-28, 5, 3, 7250186.647688276, 0.386524856090546, None, None, None, None, None, None, 0.0, -0.934763, None, None, 18757362.0, 18757362.0, None, None

","coins, historical","coins.name, coins.id, historical.coin_id, historical.date, historical.cmc_rank","coins, historical"
software_company,What percentage of elderly customers who are never married in the place with geographic ID 24?,SELECT cast(SUM(case when t1.marital_status = 'never married' then 1.0 else 0 end) as real) * 100 / COUNT(*) FROM customers as t1 inner JOIN demog as t2 ON t1.geoid = t2.geoid WHERE t1.geoid = 24,"CREATE TABLE `customers` (
  ID INTEGER,
  SEX TEXT,
  MARITAL_STATUS TEXT,
  GEOID INTEGER REFERENCES Demog(None),
  EDUCATIONNUM INTEGER,
  OCCUPATION TEXT,
  age INTEGER
);
Sample rows from `customers`:
0, Male, Never-married, 61, 7, Machine-op-inspct, 62
1, Male, Married-civ-spouse, 70, 3, Handlers-cleaners, 78
2, Male, Never-married, 53, 7, Machine-op-inspct, 69

CREATE TABLE `demog` (
  GEOID INTEGER,
  INHABITANTS_K REAL,
  INCOME_K REAL,
  A_VAR1 REAL,
  A_VAR2 REAL,
  A_VAR3 REAL,
  A_VAR4 REAL,
  A_VAR5 REAL,
  A_VAR6 REAL,
  A_VAR7 REAL,
  A_VAR8 REAL,
  A_VAR9 REAL,
  A_VAR10 REAL,
  A_VAR11 REAL,
  A_VAR12 REAL,
  A_VAR13 REAL,
  A_VAR14 REAL,
  A_VAR15 REAL,
  A_VAR16 REAL,
  A_VAR17 REAL,
  A_VAR18 REAL
);
Sample rows from `demog`:
0, 30.046, 2631.47, 6.084, 5.79, 8.595, 3.935, 6.362, 8.626, 4.624, 8.324, 5.233, 6.232, 5.205, 8.231, 6.746, 8.679, 5.292, 3.5, 5.512, 5.783
1, 36.25, 3012.75, 4.604, 8.309, 6.007, 5.938, 8.773, 3.579, 6.349, 4.694, 6.884, 7.062, 7.319, 3.72, 6.405, 7.202, 4.932, 7.969, 8.15, 5.633
2, 47.645, 2192.41, 4.911, 8.557, 5.934, 6.494, 9.172, 3.202, 6.157, 4.822, 7.942, 7.901, 7.928, 2.33, 6.029, 6.455, 4.72, 8.564, 8.342, 4.938

","CREATE TABLE `Demog` (
  GEOID INTEGER,
  INHABITANTS_K REAL,
  INCOME_K REAL,
  A_VAR1 REAL,
  A_VAR2 REAL,
  A_VAR3 REAL,
  A_VAR4 REAL,
  A_VAR5 REAL,
  A_VAR6 REAL,
  A_VAR7 REAL,
  A_VAR8 REAL,
  A_VAR9 REAL,
  A_VAR10 REAL,
  A_VAR11 REAL,
  A_VAR12 REAL,
  A_VAR13 REAL,
  A_VAR14 REAL,
  A_VAR15 REAL,
  A_VAR16 REAL,
  A_VAR17 REAL,
  A_VAR18 REAL
);
Sample rows from `Demog`:
0, 30.046, 2631.47, 6.084, 5.79, 8.595, 3.935, 6.362, 8.626, 4.624, 8.324, 5.233, 6.232, 5.205, 8.231, 6.746, 8.679, 5.292, 3.5, 5.512, 5.783
1, 36.25, 3012.75, 4.604, 8.309, 6.007, 5.938, 8.773, 3.579, 6.349, 4.694, 6.884, 7.062, 7.319, 3.72, 6.405, 7.202, 4.932, 7.969, 8.15, 5.633
2, 47.645, 2192.41, 4.911, 8.557, 5.934, 6.494, 9.172, 3.202, 6.157, 4.822, 7.942, 7.901, 7.928, 2.33, 6.029, 6.455, 4.72, 8.564, 8.342, 4.938

CREATE TABLE `mailings3` (
  REFID INTEGER,
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `mailings3`:
60000, 2007-07-01 12:00:00.0, false
60001, 2007-07-01 12:00:00.0, false
60002, 2007-07-01 12:00:00.0, false

CREATE TABLE `Customers` (
  ID INTEGER,
  SEX TEXT,
  MARITAL_STATUS TEXT,
  GEOID INTEGER REFERENCES Demog(None),
  EDUCATIONNUM INTEGER,
  OCCUPATION TEXT,
  age INTEGER
);
Sample rows from `Customers`:
0, Male, Never-married, 61, 7, Machine-op-inspct, 62
1, Male, Married-civ-spouse, 70, 3, Handlers-cleaners, 78
2, Male, Never-married, 53, 7, Machine-op-inspct, 69

CREATE TABLE `Mailings1_2` (
  REFID INTEGER REFERENCES Customers(None),
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `Mailings1_2`:
0, 2007-02-01 12:00:00.0, false
1, 2007-02-01 12:00:00.0, false
2, 2007-02-01 12:00:00.0, false

CREATE TABLE `Sales` (
  EVENTID INTEGER,
  REFID INTEGER REFERENCES Customers(None),
  EVENT_DATE DATETIME,
  AMOUNT REAL
);
Sample rows from `Sales`:
0, 0, 2006-12-21 12:00:00.0, 17.907
1, 0, 2006-12-25 12:00:00.0, 17.401
2, 0, 2007-01-26 12:00:00.0, 13.277

","customers, demog","customers.marital_status, customers.geoid, demog.geoid","Demog, mailings3, Customers, Mailings1_2, Sales"
coinmarketcap,Name the coin under the token category that gives the highest max profit.,SELECT t1.name FROM coins as t1 inner JOIN historical as t2 ON t1.id = t2.coin_id WHERE t1.category = 'token' ORDER BY t2.high - t2.low DESC LIMIT 1,"CREATE TABLE `coins` (
  id INTEGER,
  name TEXT,
  slug TEXT,
  symbol TEXT,
  status TEXT,
  category TEXT,
  description TEXT,
  subreddit TEXT,
  notice TEXT,
  tags TEXT,
  tag_names TEXT,
  website TEXT,
  platform_id INTEGER,
  date_added TEXT,
  date_launched TEXT
);
Sample rows from `coins`:
1, Bitcoin, bitcoin, BTC, active, coin, ## **What Is Bitcoin (BTC)?**\n\nBitcoin is a decentralized cryptocurrency originally described in a 2008 [whitepaper](https://coinmarketcap.com/alexandria/glossary/whitepaper) by a person, or group of people, using the alias [Satoshi Nakamoto](https://co, bitcoin, None, mineable, pow, sha-256, store-of-value, state-channels, coinbase-ventures-portfolio, three-arrows-capital-portfolio, polychain-capital-portfolio, binance-labs-portfolio, arrington-xrp-capital, blockchain-capital-portfolio, boostvc-portfolio, cms-holdings-, Mineable, PoW, SHA-256, Store of Value, State channels, Coinbase Ventures Portfolio, Three Arrows Capital Portfolio, Polychain Capital Portfolio, Binance Labs Portfolio, Arrington XRP capital, Blockchain Capital Portfolio, BoostVC Portfolio, CMS Holdings , https://bitcoin.org/, None, 2013-04-28T00:00:00.000Z, None
2, Litecoin, litecoin, LTC, active, coin, ## What Is Litecoin (LTC)?\n\nLitecoin (LTC) is a cryptocurrency that was designed to provide fast, secure and low-cost payments by leveraging the unique properties of [blockchain](https://coinmarketcap.com/alexandria/glossary/blockchain) technology. \n\n, litecoin, None, mineable, pow, scrypt, medium-of-exchange, binance-chain, Mineable, PoW, Scrypt, Medium of Exchange, Binance Chain, https://litecoin.org/, None, 2013-04-28T00:00:00.000Z, None
3, Namecoin, namecoin, NMC, active, coin, Namecoin (NMC) is a cryptocurrency . Users are able to generate NMC through the process of mining. Namecoin has a current supply of 14,736,400. The last known price of Namecoin is 2.14833562 USD and is up 0.40 over the last 24 hours. It is currently tradi, namecoin, None, mineable, pow, sha-256, platform, Mineable, PoW, SHA-256, Platform, https://www.namecoin.org/, None, 2013-04-28T00:00:00.000Z, None

CREATE TABLE `historical` (
  date DATE,
  coin_id INTEGER,
  cmc_rank INTEGER,
  market_cap REAL,
  price REAL,
  open REAL,
  high REAL,
  low REAL,
  close REAL,
  time_high TEXT,
  time_low TEXT,
  volume_24h REAL,
  percent_change_1h REAL,
  percent_change_24h REAL,
  percent_change_7d REAL,
  circulating_supply REAL,
  total_supply REAL,
  max_supply REAL,
  num_market_pairs INTEGER
);
Sample rows from `historical`:
2013-04-28, 1, 1, 1488566971.9558687, 134.210021972656, None, None, None, None, None, None, 0.0, 0.639231, None, None, 11091325.0, 11091325.0, 21000000.0, None
2013-04-28, 2, 2, 74637021.56790735, 4.34840488433838, None, None, None, None, None, None, 0.0, 0.799273, None, None, 17164230.0, 17164230.0, 84000000.0, None
2013-04-28, 5, 3, 7250186.647688276, 0.386524856090546, None, None, None, None, None, None, 0.0, -0.934763, None, None, 18757362.0, 18757362.0, None, None

","CREATE TABLE `coins` (
  id INTEGER,
  name TEXT,
  slug TEXT,
  symbol TEXT,
  status TEXT,
  category TEXT,
  description TEXT,
  subreddit TEXT,
  notice TEXT,
  tags TEXT,
  tag_names TEXT,
  website TEXT,
  platform_id INTEGER,
  date_added TEXT,
  date_launched TEXT
);
Sample rows from `coins`:
1, Bitcoin, bitcoin, BTC, active, coin, ## **What Is Bitcoin (BTC)?**\n\nBitcoin is a decentralized cryptocurrency originally described in a 2008 [whitepaper](https://coinmarketcap.com/alexandria/glossary/whitepaper) by a person, or group of people, using the alias [Satoshi Nakamoto](https://co, bitcoin, None, mineable, pow, sha-256, store-of-value, state-channels, coinbase-ventures-portfolio, three-arrows-capital-portfolio, polychain-capital-portfolio, binance-labs-portfolio, arrington-xrp-capital, blockchain-capital-portfolio, boostvc-portfolio, cms-holdings-, Mineable, PoW, SHA-256, Store of Value, State channels, Coinbase Ventures Portfolio, Three Arrows Capital Portfolio, Polychain Capital Portfolio, Binance Labs Portfolio, Arrington XRP capital, Blockchain Capital Portfolio, BoostVC Portfolio, CMS Holdings , https://bitcoin.org/, None, 2013-04-28T00:00:00.000Z, None
2, Litecoin, litecoin, LTC, active, coin, ## What Is Litecoin (LTC)?\n\nLitecoin (LTC) is a cryptocurrency that was designed to provide fast, secure and low-cost payments by leveraging the unique properties of [blockchain](https://coinmarketcap.com/alexandria/glossary/blockchain) technology. \n\n, litecoin, None, mineable, pow, scrypt, medium-of-exchange, binance-chain, Mineable, PoW, Scrypt, Medium of Exchange, Binance Chain, https://litecoin.org/, None, 2013-04-28T00:00:00.000Z, None
3, Namecoin, namecoin, NMC, active, coin, Namecoin (NMC) is a cryptocurrency . Users are able to generate NMC through the process of mining. Namecoin has a current supply of 14,736,400. The last known price of Namecoin is 2.14833562 USD and is up 0.40 over the last 24 hours. It is currently tradi, namecoin, None, mineable, pow, sha-256, platform, Mineable, PoW, SHA-256, Platform, https://www.namecoin.org/, None, 2013-04-28T00:00:00.000Z, None

CREATE TABLE `historical` (
  date DATE,
  coin_id INTEGER,
  cmc_rank INTEGER,
  market_cap REAL,
  price REAL,
  open REAL,
  high REAL,
  low REAL,
  close REAL,
  time_high TEXT,
  time_low TEXT,
  volume_24h REAL,
  percent_change_1h REAL,
  percent_change_24h REAL,
  percent_change_7d REAL,
  circulating_supply REAL,
  total_supply REAL,
  max_supply REAL,
  num_market_pairs INTEGER
);
Sample rows from `historical`:
2013-04-28, 1, 1, 1488566971.9558687, 134.210021972656, None, None, None, None, None, None, 0.0, 0.639231, None, None, 11091325.0, 11091325.0, 21000000.0, None
2013-04-28, 2, 2, 74637021.56790735, 4.34840488433838, None, None, None, None, None, None, 0.0, 0.799273, None, None, 17164230.0, 17164230.0, 84000000.0, None
2013-04-28, 5, 3, 7250186.647688276, 0.386524856090546, None, None, None, None, None, None, 0.0, -0.934763, None, None, 18757362.0, 18757362.0, None, None

","coins, historical","coins.name, coins.id, historical.coin_id, coins.category, historical.high, historical.low","coins, historical"
university,List the countries of universities that scored 70 and below in 2016.,SELECT DISTINCT t3.country_name FROM university as t1 inner JOIN university_ranking_year as t2 ON t1.id = t2.university_id inner JOIN country as t3 ON t3.id = t1.country_id WHERE t2.score < 70 AND t2.year = 2016,"CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

","CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

CREATE TABLE `ranking_system` (
  id INTEGER,
  system_name TEXT
);
Sample rows from `ranking_system`:
1, Times Higher Education World University Ranking
2, Shanghai Ranking
3, Center for World University Rankings

CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

","university, university_ranking_year, country","country.country_name, university.id, university_ranking_year.university_id, country.id, university.country_id, university_ranking_year.score, university_ranking_year.year","country, ranking_system, ranking_criteria, university, university_ranking_year, university_year"
university,Name the university that had the most students in 2011.,SELECT t2.university_name FROM university_year as t1 inner JOIN university as t2 ON t1.university_id = t2.id WHERE t1.year = 2011 ORDER BY t1.num_students DESC LIMIT 1,"CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

","CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

CREATE TABLE `ranking_system` (
  id INTEGER,
  system_name TEXT
);
Sample rows from `ranking_system`:
1, Times Higher Education World University Ranking
2, Shanghai Ranking
3, Center for World University Rankings

CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

","university_year, university","university.university_name, university_year.university_id, university.id, university_year.year, university_year.num_students","country, ranking_system, ranking_criteria, university, university_ranking_year, university_year"
olympics,What is the name of the oldest competitor?,SELECT t1.full_name FROM person as t1 inner JOIN games_competitor as t2 ON t1.id = t2.person_id ORDER BY t2.age DESC LIMIT 1,"CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

","CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `medal` (
  id INTEGER,
  medal_name TEXT
);
Sample rows from `medal`:
1, Gold
2, Silver
3, Bronze

CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `sport` (
  id INTEGER,
  sport_name TEXT
);
Sample rows from `sport`:
1, Aeronautics
2, Alpine Skiing
3, Alpinism

CREATE TABLE `event` (
  id INTEGER,
  sport_id INTEGER REFERENCES sport(id),
  event_name TEXT
);
Sample rows from `event`:
1, 9, Basketball Men's Basketball
2, 33, Judo Men's Extra-Lightweight
3, 25, Football Men's Football

CREATE TABLE `competitor_event` (
  event_id INTEGER REFERENCES event(id),
  competitor_id INTEGER REFERENCES games_competitor(id),
  medal_id INTEGER REFERENCES medal(id)
);
Sample rows from `competitor_event`:
1, 1, 4
2, 2, 4
3, 3, 4

","person, games_competitor","person.full_name, person.id, games_competitor.person_id, games_competitor.age","city, games, games_city, medal, noc_region, person, games_competitor, person_region, sport, event, competitor_event"
chicago_crime,How many neighborhoods can be found in the Forest Glen community area?,SELECT SUM(case when t2.community_area_name = 'Forest Glen' then 1 else 0 end) FROM neighborhood as t1 inner JOIN community_area as t2 ON t1.community_area_no = t2.community_area_no,"CREATE TABLE `neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `community_area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `community_area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

","CREATE TABLE `Community_Area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `Community_Area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `District` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `District`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `FBI_Code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `FBI_Code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `IUCR` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `IUCR`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `Neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `Neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `Ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `Ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `Crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `Crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","neighborhood, community_area","community_area.community_area_name, neighborhood.community_area_no, community_area.community_area_no","Community_Area, District, FBI_Code, IUCR, Neighborhood, Ward, Crime"
food_inspection_2,When did Renaldi's Pizza had its first inspection?,SELECT MIN(t2.inspection_date) FROM establishment as t1 inner JOIN inspection as t2 ON t1.license_no = t2.license_no WHERE t1.dba_name = 'RENALDI''S PIZZA',"CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

","establishment, inspection","inspection.inspection_date, establishment.license_no, inspection.license_no, establishment.dba_name","employee, establishment, inspection, inspection_point, violation"
student_loan,Name 5 students with due payments that are enlisted alongside which organization they were enlisted.,"SELECT t2.organ, t1.name FROM no_payment_due as t1 inner JOIN enlist as t2 ON t1.`name` = t2.`name` WHERE t1.bool = 'pos' LIMIT 5","CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

","no_payment_due, enlist","enlist.organ, no_payment_due.name, enlist.name, no_payment_due.bool","bool, person, disabled, enlist, filed_for_bankrupcy, longest_absense_from_school, male, no_payment_due, unemployed, enrolled"
codebase_comments,"What is the github address of the solution path ""joeyrobert_bloomfilter\DataTypes.BloomFilter.sln""?",SELECT t1.url FROM repo as t1 inner JOIN solution as t2 ON t1.id = t2.repoid WHERE t2.path = 'joeyrobert_bloomfilterDataTypes.BloomFilter.sln',"CREATE TABLE `repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

CREATE TABLE `solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Method, 10860640
MethodParameter, 17514858
Repo, 156550

CREATE TABLE `Method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `Method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

CREATE TABLE `MethodParameter` (
  Id INTEGER,
  MethodId TEXT,
  Type TEXT,
  Name TEXT
);
Sample rows from `MethodParameter`:
1, 1, System.String, data
2, 2, System.Int32, i
3, 2, System.Int32, declstartpos

CREATE TABLE `Repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `Repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

CREATE TABLE `Solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `Solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

","repo, solution","repo.url, repo.id, solution.repoid, solution.path","sqlite_sequence, Method, MethodParameter, Repo, Solution"
chicago_crime,Calculate the difference in the average number of vehicular hijackings and aggravated vehicular hijackings in the districts.,"SELECT round(cast(COUNT(case when t1.secondary_description = 'VEHICULAR HIJACKING' then t1.iucr_no end) as real) / cast(COUNT(DISTINCT case when t1.secondary_description = 'VEHICULAR HIJACKING' then t3.district_name end) as real) - cast(COUNT(case when t1.secondary_description = 'AGGRAVATED VEHICULAR HIJACKING' then t1.iucr_no end) as real) / cast(COUNT(DISTINCT case when t1.secondary_description = 'AGGRAVATED VEHICULAR HIJACKING' then t3.district_name end) as real), 4) as ""difference"" FROM iucr as t1 inner JOIN crime as t2 ON t2.iucr_no = t1.iucr_no inner JOIN district as t3 ON t3.district_no = t2.district_no","CREATE TABLE `iucr` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `iucr`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

CREATE TABLE `district` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `district`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

","CREATE TABLE `Community_Area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `Community_Area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `District` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `District`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `FBI_Code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `FBI_Code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `IUCR` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `IUCR`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `Neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `Neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `Ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `Ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `Crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `Crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","iucr, crime, district","iucr.secondary_description, iucr.iucr_no, district.district_name, crime.iucr_no, district.district_no, crime.district_no","Community_Area, District, FBI_Code, IUCR, Neighborhood, Ward, Crime"
cars,Tell the origin country of car no.382.,SELECT DISTINCT t2.country FROM production as t1 inner JOIN country as t2 ON t1.country = t2.origin WHERE t1.id = 382,"CREATE TABLE `production` (
  ID INTEGER PRIMARY KEY REFERENCES price(ID) REFERENCES data(ID),
  model_year INTEGER PRIMARY KEY,
  country INTEGER REFERENCES country(origin)
);
Sample rows from `production`:
1, 1970, 1
1, 1971, 1
2, 1970, 1

CREATE TABLE `country` (
  origin INTEGER,
  country TEXT
);
Sample rows from `country`:
1, USA
2, Europe
3, Japan

","CREATE TABLE `country` (
  origin INTEGER,
  country TEXT
);
Sample rows from `country`:
1, USA
2, Europe
3, Japan

CREATE TABLE `price` (
  ID INTEGER,
  price REAL
);
Sample rows from `price`:
1, 25561.59078
2, 24221.42273
3, 27240.84373

CREATE TABLE `data` (
  ID INTEGER REFERENCES price(ID),
  mpg REAL,
  cylinders INTEGER,
  displacement REAL,
  horsepower INTEGER,
  weight INTEGER,
  acceleration REAL,
  model INTEGER,
  car_name TEXT
);
Sample rows from `data`:
1, 18.0, 8, 307.0, 130, 3504, 12.0, 70, chevrolet chevelle malibu
2, 15.0, 8, 350.0, 165, 3693, 11.5, 70, buick skylark 320
3, 18.0, 8, 318.0, 150, 3436, 11.0, 70, plymouth satellite

CREATE TABLE `production` (
  ID INTEGER PRIMARY KEY REFERENCES price(ID) REFERENCES data(ID),
  model_year INTEGER PRIMARY KEY,
  country INTEGER REFERENCES country(origin)
);
Sample rows from `production`:
1, 1970, 1
1, 1971, 1
2, 1970, 1

","production, country","country.country, production.country, country.origin, production.id","country, price, data, production"
regional_sales,State the customer name of orders which has shipped date in 7/8/2018.,SELECt t FROM ( SELECt DistINCt case  when t2.shipdate = '7/8/18' tHEN t1.`customer names` end as t FROM customers t1 inner JOIN `sales orders` t2 ON t2._customerID = t1.customerID ) WHERE t is NOt null,"CREATE TABLE `customers` (
  CustomerID INTEGER,
  Customer Names TEXT
);
Sample rows from `customers`:
1, Avon Corp
2, WakeFern 
3, Elorac, Corp

CREATE TABLE `sales orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `sales orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  Customer Names TEXT
);
Sample rows from `Customers`:
1, Avon Corp
2, WakeFern 
3, Elorac, Corp

CREATE TABLE `Products` (
  ProductID INTEGER,
  Product Name TEXT
);
Sample rows from `Products`:
1, Cookware
2, Photo Frames
3, Table Lamps

CREATE TABLE `Regions` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `Regions`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `Sales Team` (
  SalesTeamID INTEGER,
  Sales Team TEXT,
  Region TEXT
);
Sample rows from `Sales Team`:
1, Adam Hernandez, Northeast
2, Keith Griffin, Northeast
3, Jerry Green, West

CREATE TABLE `Store Locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `Store Locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

CREATE TABLE `Sales Orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `Sales Orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

","customers, sales orders","sales orders.shipdate, customers.customer names, sales orders._customerID, customers.customerID","Customers, Products, Regions, Sales Team, Store Locations, Sales Orders"
food_inspection_2,What is the difference in the number of restaurants that passed and failed the canvass inspection type?,SELECT COUNT(case when t2.results = 'Pass' then t1.license_no end) - COUNT(case when t2.results = 'Fail' then t1.license_no end) as diff FROM establishment as t1 inner JOIN inspection as t2 ON t1.license_no = t2.license_no WHERE t2.inspection_type = 'Canvass' AND t1.facility_type = 'Restaurant',"CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

","establishment, inspection","inspection.results, establishment.license_no, inspection.license_no, inspection.inspection_type, establishment.facility_type","employee, establishment, inspection, inspection_point, violation"
student_loan,How many disabled students are male?,SELECT COUNT(t1.name) FROM male as t1 inner JOIN disabled as t2 ON t1.name = t2.name,"CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

","male, disabled","male.name, disabled.name","bool, person, disabled, enlist, filed_for_bankrupcy, longest_absense_from_school, male, no_payment_due, unemployed, enrolled"
simpson_episodes,"Who did ""The Tiny Canadian"" play as in the show?",SELECT t2.role FROM person as t1 inner JOIN credit as t2 ON t1.name = t2.person WHERE t1.nickname = 'The Tiny Canadian';,"CREATE TABLE `person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","person, credit","credit.role, person.name, credit.person, person.nickname","Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
simpson_episodes,List the stars of episodes aired in November 2008.,"SELECT t2.stars FROM episode as t1 inner JOIN vote as t2 ON t2.episode_id = t1.episode_id WHERE substr(t1.air_date, 1, 7) = '2008-11';","CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","episode, vote","vote.stars, vote.episode_id, episode.episode_id, episode.air_date","Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
authors,What is the full name of the conference where paper number 5 was published?,SELECT t2.fullname FROM paper as t1 inner JOIN conference as t2 ON t1.conferenceid = t2.id WHERE t1.id = 5,"CREATE TABLE `paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

","CREATE TABLE `Author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `Author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

CREATE TABLE `Conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

CREATE TABLE `Journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `Paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `Paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `PaperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `PaperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

","paper, conference","conference.fullname, paper.conferenceid, conference.id, paper.id","Author, Conference, Journal, Paper, PaperAuthor"
simpson_episodes,"Name the person, award, organization, result and credited status of the assistant director in S20-E13.","SELECT t1.person, t1.award, t1.organization, t1.result, t2.credited FROM award as t1 inner JOIN credit as t2 ON t2.episode_id = t1.episode_id WHERE t2.episode_id = 'S20-E13' AND t2.role = 'assistant director';","CREATE TABLE `award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","award, credit","award.person, award.award, award.organization, award.result, credit.credited, credit.episode_id, award.episode_id, credit.role","Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
world,How many cities are in the Philippines?,SELECT COUNT(id) FROM city WHERE name = 'PHL',"CREATE TABLE `city` (
  ID INTEGER,
  Name TEXT,
  CountryCode TEXT REFERENCES Country(Code),
  District TEXT,
  Population INTEGER
);
Sample rows from `city`:
1, Kabul, AFG, Kabol, 1780000
2, Qandahar, AFG, Qandahar, 237500
3, Herat, AFG, Herat, 186800

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
City, 4079

CREATE TABLE `City` (
  ID INTEGER,
  Name TEXT,
  CountryCode TEXT REFERENCES Country(Code),
  District TEXT,
  Population INTEGER
);
Sample rows from `City`:
1, Kabul, AFG, Kabol, 1780000
2, Qandahar, AFG, Qandahar, 237500
3, Herat, AFG, Herat, 186800

CREATE TABLE `Country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `Country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

CREATE TABLE `CountryLanguage` (
  CountryCode TEXT PRIMARY KEY REFERENCES Country(Code),
  Language TEXT PRIMARY KEY,
  IsOfficial TEXT,
  Percentage REAL
);
Sample rows from `CountryLanguage`:
ABW, Dutch, T, 5.3
ABW, English, F, 9.5
ABW, Papiamento, F, 76.7

",city,"id, name","sqlite_sequence, City, Country, CountryLanguage"
movies_4,Provide the most used keyword in the movies.,SELECT t1.keyword_name FROM keyword as t1 inner JOIN movie_keywords as t2 ON t1.keyword_id = t2.keyword_id GROUP BY t1.keyword_name ORDER BY COUNT(t1.keyword_name) DESC LIMIT 1,"CREATE TABLE `keyword` (
  keyword_id INTEGER,
  keyword_name TEXT
);
Sample rows from `keyword`:
30, individual
65, holiday
74, germany

CREATE TABLE `movie_keywords` (
  movie_id INTEGER REFERENCES movie(None),
  keyword_id INTEGER REFERENCES keyword(None)
);
Sample rows from `movie_keywords`:
5, 612
5, 613
5, 616

","CREATE TABLE `country` (
  country_id INTEGER,
  country_iso_code TEXT,
  country_name TEXT
);
Sample rows from `country`:
128, AE, United Arab Emirates
129, AF, Afghanistan
130, AO, Angola

CREATE TABLE `department` (
  department_id INTEGER,
  department_name TEXT
);
Sample rows from `department`:
1, Camera
2, Directing
3, Production

CREATE TABLE `gender` (
  gender_id INTEGER,
  gender TEXT
);
Sample rows from `gender`:
0, Unspecified
1, Female
2, Male

CREATE TABLE `genre` (
  genre_id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
12, Adventure
14, Fantasy
16, Animation

CREATE TABLE `keyword` (
  keyword_id INTEGER,
  keyword_name TEXT
);
Sample rows from `keyword`:
30, individual
65, holiday
74, germany

CREATE TABLE `language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `language`:
24574, en, English
24575, sv, svenska
24576, de, Deutsch

CREATE TABLE `language_role` (
  role_id INTEGER,
  language_role TEXT
);
Sample rows from `language_role`:
1, Original
2, Spoken

CREATE TABLE `movie` (
  movie_id INTEGER,
  title TEXT,
  budget INTEGER,
  homepage TEXT,
  overview TEXT,
  popularity REAL,
  release_date DATE,
  revenue INTEGER,
  runtime INTEGER,
  movie_status TEXT,
  tagline TEXT,
  vote_average REAL,
  vote_count INTEGER
);
Sample rows from `movie`:
5, Four Rooms, 4000000, , It's Ted the Bellhop's first night on the job...and the hotel's very unusual guests are about to place him in some outrageous predicaments. It seems that this evening's room service is serving up one unbelievable happening after another., 22.87623, 1995-12-09, 4300000, 98, Released, Twelve outrageous guests. Four scandalous requests. And one lone bellhop, in his first day on the job, who's in for the wildest New year's Eve of his life., 6.5, 530
11, Star Wars, 11000000, http://www.starwars.com/films/star-wars-episode-iv-a-new-hope, Princess Leia is captured and held hostage by the evil Imperial forces in their effort to take over the galactic Empire. Venturesome Luke Skywalker and dashing captain Han Solo team together with the loveable robot duo R2-D2 and C-3PO to rescue the beauti, 126.393695, 1977-05-25, 775398007, 121, Released, A long time ago in a galaxy far, far away..., 8.1, 6624
12, Finding Nemo, 94000000, http://movies.disney.com/finding-nemo, Nemo, an adventurous young clownfish, is unexpectedly taken from his Great Barrier Reef home to a dentist's office aquarium. It's up to his worrisome father Marlin and a friendly but forgetful fish Dory to bring Nemo home -- meeting vegetarian sharks, sur, 85.688789, 2003-05-30, 940335536, 100, Released, There are 3.7 trillion fish in the ocean, they're looking for one., 7.6, 6122

CREATE TABLE `movie_genres` (
  movie_id INTEGER REFERENCES movie(movie_id),
  genre_id INTEGER REFERENCES genre(genre_id)
);
Sample rows from `movie_genres`:
5, 35
5, 80
11, 12

CREATE TABLE `movie_languages` (
  movie_id INTEGER REFERENCES movie(movie_id),
  language_id INTEGER REFERENCES language(language_id),
  language_role_id INTEGER REFERENCES language_role(role_id)
);
Sample rows from `movie_languages`:
5, 24574, 2
11, 24574, 2
12, 24574, 2

CREATE TABLE `person` (
  person_id INTEGER,
  person_name TEXT
);
Sample rows from `person`:
1, George Lucas
2, Mark Hamill
3, Harrison Ford

CREATE TABLE `movie_crew` (
  movie_id INTEGER REFERENCES movie(movie_id),
  person_id INTEGER REFERENCES person(person_id),
  department_id INTEGER REFERENCES department(department_id),
  job TEXT
);
Sample rows from `movie_crew`:
285, 120, 1, Director of Photography
285, 1704, 2, Director
285, 770, 3, Producer

CREATE TABLE `production_company` (
  company_id INTEGER,
  company_name TEXT
);
Sample rows from `production_company`:
1, Lucasfilm
2, Walt Disney Pictures
3, Pixar Animation Studios

CREATE TABLE `production_country` (
  movie_id INTEGER REFERENCES movie(movie_id),
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `production_country`:
5, 214
11, 214
12, 214

CREATE TABLE `movie_cast` (
  movie_id INTEGER REFERENCES movie(movie_id),
  person_id INTEGER REFERENCES person(person_id),
  character_name TEXT,
  gender_id INTEGER REFERENCES gender(gender_id),
  cast_order INTEGER
);
Sample rows from `movie_cast`:
285, 85, Captain Jack Sparrow, 2, 0
285, 114, Will Turner, 2, 1
285, 116, Elizabeth Swann, 1, 2

CREATE TABLE `movie_keywords` (
  movie_id INTEGER REFERENCES movie(None),
  keyword_id INTEGER REFERENCES keyword(None)
);
Sample rows from `movie_keywords`:
5, 612
5, 613
5, 616

CREATE TABLE `movie_company` (
  movie_id INTEGER REFERENCES movie(None),
  company_id INTEGER REFERENCES production_company(None)
);
Sample rows from `movie_company`:
5, 14
5, 59
11, 1

","keyword, movie_keywords","keyword.keyword_name, keyword.keyword_id, movie_keywords.keyword_id","country, department, gender, genre, keyword, language, language_role, movie, movie_genres, movie_languages, person, movie_crew, production_company, production_country, movie_cast, movie_keywords, movie_company"
shakespeare,Calculate average scene per act in Antony and Cleopatra.,SELECT cast(SUM(t2.scene) as real) / COUNT(t2.act) FROM works as t1 inner JOIN chapters as t2 ON t1.id = t2.work_id WHERE t1.title = 'Antony and Cleopatra',"CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

","CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
chapters, 19648
characters, 1266
paragraphs, 666327

CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

","works, chapters","chapters.scene, chapters.act, works.id, chapters.work_id, works.title","chapters, sqlite_sequence, characters, paragraphs, works"
retail_complains,Which state has the most cities?,SELECT state_abbrev FROM district GROUP BY state_abbrev ORDER BY COUNT(city) DESC LIMIT 1,"CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

","CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

",district,"state_abbrev, city","state, callcenterlogs, client, district, events, reviews"
beer_factory,Please list the names of all the root beer brands that are advertised on facebook.,SELECT brandname FROM rootbeerbrand WHERE facebookpage is NOT null,"CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

","CREATE TABLE `customers` (
  CustomerID INTEGER,
  First TEXT,
  Last TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER,
  Email TEXT,
  PhoneNumber TEXT,
  FirstPurchaseDate DATE,
  SubscribedToEmailList TEXT,
  Gender TEXT
);
Sample rows from `customers`:
101811, Kenneth, Walton, 6715 Commonwealth Dr, Sacramento, CA, 94256, walton.k76@fastmail.com, (916) 918-1561, 2013-05-30, FALSE, M
103508, Madeleine, Jones, 3603 Leola Way, Sacramento, CA, 94258, j_madeleine@gmail.com, (916) 186-9423, 2013-02-06, FALSE, F
104939, Damen, Wheeler, 6740 Branwood Way, Orangevale, CA, 95662, dwheeler@outlook.com, (916) 164-1156, 2013-04-11, FALSE, M

CREATE TABLE `geolocation` (
  LocationID INTEGER REFERENCES location(LocationID),
  Latitude REAL,
  Longitude REAL
);
Sample rows from `geolocation`:
0, 0.0, 0.0
1, 38.566129, -121.426432
2, 38.559615, -121.42243

CREATE TABLE `location` (
  LocationID INTEGER REFERENCES geolocation(LocationID),
  LocationName TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER
);
Sample rows from `location`:
0, LOST, None, None, None, None
1, Sac State American River Courtyard, 6000 J St, Sacramento, CA, 95819
2, Sac State Union, 6000 J St, Sacramento, CA, 95819

CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

CREATE TABLE `rootbeerreview` (
  CustomerID INTEGER PRIMARY KEY REFERENCES customers(CustomerID),
  BrandID INTEGER PRIMARY KEY REFERENCES rootbeerbrand(BrandID),
  StarRating INTEGER,
  ReviewDate DATE,
  Review TEXT
);
Sample rows from `rootbeerreview`:
101811, 10012, 5, 2013-07-15, None
101811, 10014, 1, 2013-07-08, None
101811, 10015, 3, 2013-07-25, None

CREATE TABLE `transaction` (
  TransactionID INTEGER,
  CreditCardNumber INTEGER,
  CustomerID INTEGER REFERENCES customers(CustomerID),
  TransactionDate DATE,
  CreditCardType TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  RootBeerID INTEGER REFERENCES rootbeer(RootBeerID),
  PurchasePrice REAL
);
Sample rows from `transaction`:
100000, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105661, 3.0
100001, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105798, 3.0
100002, 6011583832864739, 864896, 2014-07-07, Discover, 2, 102514, 3.0

",rootbeerbrand,"brandname, facebookpage","customers, geolocation, location, rootbeerbrand, rootbeer, rootbeerreview, transaction"
image_and_language,Provide the dimensions of the bounding box that contains the keyboard that was spotted in image no. 3.,"SELECT t1.w, t1.h FROM img_obj as t1 inner JOIN OBJ_CLasSES as t2 ON t1.OBJ_CLasS_ID = t2.OBJ_CLasS_ID whERE t1.img_id = 3 AND t2.OBJ_CLasS = 'keyboard'","CREATE TABLE `img_obj` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `img_obj`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `OBJ_CLasSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLasSES`:
0, awning
1, goggles
2, dot

","CREATE TABLE `ATT_CLASSES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `ATT_CLASSES`:
0, building s
1, indoors
2, cluttered

CREATE TABLE `OBJ_CLASSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLASSES`:
0, awning
1, goggles
2, dot

CREATE TABLE `IMG_OBJ` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `IMG_OBJ`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `IMG_OBJ_ATT` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_OBJ_ATT`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `PRED_CLASSES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `PRED_CLASSES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `IMG_REL` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_REL`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

","img_obj, OBJ_CLasSES","img_obj.w, img_obj.h, img_obj.OBJ_CLasS_ID, OBJ_CLasSES.OBJ_CLasS_ID, img_obj.img_id, OBJ_CLasSES.OBJ_CLasS","ATT_CLASSES, OBJ_CLASSES, IMG_OBJ, IMG_OBJ_ATT, PRED_CLASSES, IMG_REL"
software_company,List down the number of inhabitants of customers with a divorced marital status and older than 50 years old.,SELECT COUNT(t1.id) FROM customers as t1 inner JOIN demog as t2 ON t1.GEOid = t2.GEOid WHERE t1.marital_status = 'Divorced' AND t1.age < 50,"CREATE TABLE `customers` (
  ID INTEGER,
  SEX TEXT,
  MARITAL_STATUS TEXT,
  GEOID INTEGER REFERENCES Demog(None),
  EDUCATIONNUM INTEGER,
  OCCUPATION TEXT,
  age INTEGER
);
Sample rows from `customers`:
0, Male, Never-married, 61, 7, Machine-op-inspct, 62
1, Male, Married-civ-spouse, 70, 3, Handlers-cleaners, 78
2, Male, Never-married, 53, 7, Machine-op-inspct, 69

CREATE TABLE `demog` (
  GEOID INTEGER,
  INHABITANTS_K REAL,
  INCOME_K REAL,
  A_VAR1 REAL,
  A_VAR2 REAL,
  A_VAR3 REAL,
  A_VAR4 REAL,
  A_VAR5 REAL,
  A_VAR6 REAL,
  A_VAR7 REAL,
  A_VAR8 REAL,
  A_VAR9 REAL,
  A_VAR10 REAL,
  A_VAR11 REAL,
  A_VAR12 REAL,
  A_VAR13 REAL,
  A_VAR14 REAL,
  A_VAR15 REAL,
  A_VAR16 REAL,
  A_VAR17 REAL,
  A_VAR18 REAL
);
Sample rows from `demog`:
0, 30.046, 2631.47, 6.084, 5.79, 8.595, 3.935, 6.362, 8.626, 4.624, 8.324, 5.233, 6.232, 5.205, 8.231, 6.746, 8.679, 5.292, 3.5, 5.512, 5.783
1, 36.25, 3012.75, 4.604, 8.309, 6.007, 5.938, 8.773, 3.579, 6.349, 4.694, 6.884, 7.062, 7.319, 3.72, 6.405, 7.202, 4.932, 7.969, 8.15, 5.633
2, 47.645, 2192.41, 4.911, 8.557, 5.934, 6.494, 9.172, 3.202, 6.157, 4.822, 7.942, 7.901, 7.928, 2.33, 6.029, 6.455, 4.72, 8.564, 8.342, 4.938

","CREATE TABLE `Demog` (
  GEOID INTEGER,
  INHABITANTS_K REAL,
  INCOME_K REAL,
  A_VAR1 REAL,
  A_VAR2 REAL,
  A_VAR3 REAL,
  A_VAR4 REAL,
  A_VAR5 REAL,
  A_VAR6 REAL,
  A_VAR7 REAL,
  A_VAR8 REAL,
  A_VAR9 REAL,
  A_VAR10 REAL,
  A_VAR11 REAL,
  A_VAR12 REAL,
  A_VAR13 REAL,
  A_VAR14 REAL,
  A_VAR15 REAL,
  A_VAR16 REAL,
  A_VAR17 REAL,
  A_VAR18 REAL
);
Sample rows from `Demog`:
0, 30.046, 2631.47, 6.084, 5.79, 8.595, 3.935, 6.362, 8.626, 4.624, 8.324, 5.233, 6.232, 5.205, 8.231, 6.746, 8.679, 5.292, 3.5, 5.512, 5.783
1, 36.25, 3012.75, 4.604, 8.309, 6.007, 5.938, 8.773, 3.579, 6.349, 4.694, 6.884, 7.062, 7.319, 3.72, 6.405, 7.202, 4.932, 7.969, 8.15, 5.633
2, 47.645, 2192.41, 4.911, 8.557, 5.934, 6.494, 9.172, 3.202, 6.157, 4.822, 7.942, 7.901, 7.928, 2.33, 6.029, 6.455, 4.72, 8.564, 8.342, 4.938

CREATE TABLE `mailings3` (
  REFID INTEGER,
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `mailings3`:
60000, 2007-07-01 12:00:00.0, false
60001, 2007-07-01 12:00:00.0, false
60002, 2007-07-01 12:00:00.0, false

CREATE TABLE `Customers` (
  ID INTEGER,
  SEX TEXT,
  MARITAL_STATUS TEXT,
  GEOID INTEGER REFERENCES Demog(None),
  EDUCATIONNUM INTEGER,
  OCCUPATION TEXT,
  age INTEGER
);
Sample rows from `Customers`:
0, Male, Never-married, 61, 7, Machine-op-inspct, 62
1, Male, Married-civ-spouse, 70, 3, Handlers-cleaners, 78
2, Male, Never-married, 53, 7, Machine-op-inspct, 69

CREATE TABLE `Mailings1_2` (
  REFID INTEGER REFERENCES Customers(None),
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `Mailings1_2`:
0, 2007-02-01 12:00:00.0, false
1, 2007-02-01 12:00:00.0, false
2, 2007-02-01 12:00:00.0, false

CREATE TABLE `Sales` (
  EVENTID INTEGER,
  REFID INTEGER REFERENCES Customers(None),
  EVENT_DATE DATETIME,
  AMOUNT REAL
);
Sample rows from `Sales`:
0, 0, 2006-12-21 12:00:00.0, 17.907
1, 0, 2006-12-25 12:00:00.0, 17.401
2, 0, 2007-01-26 12:00:00.0, 13.277

","customers, demog","customers.id, customers.GEOid, demog.GEOid, customers.marital_status, customers.age","Demog, mailings3, Customers, Mailings1_2, Sales"
sales,What is the full name of customers who dealt with sales person with id 5?,"SELECT t1.firstname, t1.middleinitial, t1.lastname FROM customers as t1 inner JOIN sales as t2 ON t1.customerid = t2.customerid WHERE t2.salesPersonID = 5","CREATE TABLE `customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

CREATE TABLE `sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Employees`:
1, Abraham, e, Bennet
2, Reginald, l, Blotchet-Halls
3, Cheryl, a, Carson

CREATE TABLE `Products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

CREATE TABLE `Sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `Sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

","customers, sales","customers.firstname, customers.middleinitial, customers.lastname, customers.customerid, sales.customerid, sales.salesPersonID","Customers, Employees, Products, Sales"
airline,"Among all the flights scheduled to depart from John F. Kennedy International on 2018/8/1, when was the earliest one scheduled to depart?","SELECT t2.dep_time FROM airports as t1 inner JOIN airlines as t2 ON t1.code = t2.origin WHERE t2.fl_date = '2018/8/1' AND t1.description = 'New York, NY: John F. Kennedy International' AND t2.dep_time is NOT null ORDER BY t2.dep_time asC LIMIT 1","CREATE TABLE `airports` (
  Code TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `airports`:
01A, Afognak Lake, AK: Afognak Lake Airport
03A, Granite Mountain, AK: Bear Creek Mining Strip
04A, Lik, AK: Lik Mining Camp

CREATE TABLE `airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

","CREATE TABLE `Air Carriers` (
  Code INTEGER,
  Description TEXT
);
Sample rows from `Air Carriers`:
19031, Mackey International Inc.: MAC
19032, Munz Northern Airlines Inc.: XY
19033, Cochise Airlines Inc.: COC

CREATE TABLE `Airports` (
  Code TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `Airports`:
01A, Afognak Lake, AK: Afognak Lake Airport
03A, Granite Mountain, AK: Bear Creek Mining Strip
04A, Lik, AK: Lik Mining Camp

CREATE TABLE `Airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `Airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

","airports, airlines","airlines.dep_time, airports.code, airlines.origin, airlines.fl_date, airports.description","Air Carriers, Airports, Airlines"
retail_world,Which company name in London city has the most stocked products?,SELECT t2.companyname FROM products as t1 inner JOIN suppliers as t2 ON t1.supplierid = t2.supplierid WHERE t2.city = 'London' ORDER BY t1.unitsinstock DESC LIMIT 1,"CREATE TABLE `products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

","products, suppliers","suppliers.companyname, products.supplierid, suppliers.supplierid, suppliers.city, products.unitsinstock","sqlite_sequence, Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails"
mental_health_survey,How many respondents who participated in the survey in 2014 work remotely at least 50% of the time?,SELECT COUNT(t1.answertext) FROM answer as t1 inner JOIN question as t2 ON t1.questionID = t2.questionid WHERE t1.questionID = 93 AND t1.surveyid = 2014 AND t1.answertext = 'Yes',"CREATE TABLE `answer` (
  AnswerText TEXT,
  SurveyID INTEGER REFERENCES Survey(None),
  UserID INTEGER PRIMARY KEY,
  QuestionID INTEGER PRIMARY KEY REFERENCES Question(None)
);
Sample rows from `answer`:
37, 2014, 1, 1
44, 2014, 2, 1
32, 2014, 3, 1

CREATE TABLE `question` (
  questiontext TEXT,
  questionid INTEGER
);
Sample rows from `question`:
What is your age?, 1
What is your gender?, 2
What country do you live in?, 3

","CREATE TABLE `Question` (
  questiontext TEXT,
  questionid INTEGER
);
Sample rows from `Question`:
What is your age?, 1
What is your gender?, 2
What country do you live in?, 3

CREATE TABLE `Survey` (
  SurveyID INTEGER,
  Description TEXT
);
Sample rows from `Survey`:
2014, mental health survey for 2014
2016, mental health survey for 2016
2017, mental health survey for 2017

CREATE TABLE `Answer` (
  AnswerText TEXT,
  SurveyID INTEGER REFERENCES Survey(None),
  UserID INTEGER PRIMARY KEY,
  QuestionID INTEGER PRIMARY KEY REFERENCES Question(None)
);
Sample rows from `Answer`:
37, 2014, 1, 1
44, 2014, 2, 1
32, 2014, 3, 1

","answer, question","answer.answertext, answer.questionID, question.questionid, answer.surveyid","Question, Survey, Answer"
chicago_crime,What is the population of the district with the least population?,SELECT SUM(population) FROM community_area GROUP BY side ORDER BY SUM(population) LIMIT 1,"CREATE TABLE `community_area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `community_area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

","CREATE TABLE `Community_Area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `Community_Area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `District` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `District`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `FBI_Code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `FBI_Code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `IUCR` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `IUCR`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `Neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `Neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `Ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `Ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `Crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `Crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

",community_area,"population, side","Community_Area, District, FBI_Code, IUCR, Neighborhood, Ward, Crime"
software_company,What is the number of inhabitants of the place the most customers are from?,SELECT DISTINCT t2.inhabitants_k FROM customers as t1 inner JOIN demog as t2 ON t1.geoid = t2.geoid ORDER BY t2.inhabitants_k DESC,"CREATE TABLE `customers` (
  ID INTEGER,
  SEX TEXT,
  MARITAL_STATUS TEXT,
  GEOID INTEGER REFERENCES Demog(None),
  EDUCATIONNUM INTEGER,
  OCCUPATION TEXT,
  age INTEGER
);
Sample rows from `customers`:
0, Male, Never-married, 61, 7, Machine-op-inspct, 62
1, Male, Married-civ-spouse, 70, 3, Handlers-cleaners, 78
2, Male, Never-married, 53, 7, Machine-op-inspct, 69

CREATE TABLE `demog` (
  GEOID INTEGER,
  INHABITANTS_K REAL,
  INCOME_K REAL,
  A_VAR1 REAL,
  A_VAR2 REAL,
  A_VAR3 REAL,
  A_VAR4 REAL,
  A_VAR5 REAL,
  A_VAR6 REAL,
  A_VAR7 REAL,
  A_VAR8 REAL,
  A_VAR9 REAL,
  A_VAR10 REAL,
  A_VAR11 REAL,
  A_VAR12 REAL,
  A_VAR13 REAL,
  A_VAR14 REAL,
  A_VAR15 REAL,
  A_VAR16 REAL,
  A_VAR17 REAL,
  A_VAR18 REAL
);
Sample rows from `demog`:
0, 30.046, 2631.47, 6.084, 5.79, 8.595, 3.935, 6.362, 8.626, 4.624, 8.324, 5.233, 6.232, 5.205, 8.231, 6.746, 8.679, 5.292, 3.5, 5.512, 5.783
1, 36.25, 3012.75, 4.604, 8.309, 6.007, 5.938, 8.773, 3.579, 6.349, 4.694, 6.884, 7.062, 7.319, 3.72, 6.405, 7.202, 4.932, 7.969, 8.15, 5.633
2, 47.645, 2192.41, 4.911, 8.557, 5.934, 6.494, 9.172, 3.202, 6.157, 4.822, 7.942, 7.901, 7.928, 2.33, 6.029, 6.455, 4.72, 8.564, 8.342, 4.938

","CREATE TABLE `Demog` (
  GEOID INTEGER,
  INHABITANTS_K REAL,
  INCOME_K REAL,
  A_VAR1 REAL,
  A_VAR2 REAL,
  A_VAR3 REAL,
  A_VAR4 REAL,
  A_VAR5 REAL,
  A_VAR6 REAL,
  A_VAR7 REAL,
  A_VAR8 REAL,
  A_VAR9 REAL,
  A_VAR10 REAL,
  A_VAR11 REAL,
  A_VAR12 REAL,
  A_VAR13 REAL,
  A_VAR14 REAL,
  A_VAR15 REAL,
  A_VAR16 REAL,
  A_VAR17 REAL,
  A_VAR18 REAL
);
Sample rows from `Demog`:
0, 30.046, 2631.47, 6.084, 5.79, 8.595, 3.935, 6.362, 8.626, 4.624, 8.324, 5.233, 6.232, 5.205, 8.231, 6.746, 8.679, 5.292, 3.5, 5.512, 5.783
1, 36.25, 3012.75, 4.604, 8.309, 6.007, 5.938, 8.773, 3.579, 6.349, 4.694, 6.884, 7.062, 7.319, 3.72, 6.405, 7.202, 4.932, 7.969, 8.15, 5.633
2, 47.645, 2192.41, 4.911, 8.557, 5.934, 6.494, 9.172, 3.202, 6.157, 4.822, 7.942, 7.901, 7.928, 2.33, 6.029, 6.455, 4.72, 8.564, 8.342, 4.938

CREATE TABLE `mailings3` (
  REFID INTEGER,
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `mailings3`:
60000, 2007-07-01 12:00:00.0, false
60001, 2007-07-01 12:00:00.0, false
60002, 2007-07-01 12:00:00.0, false

CREATE TABLE `Customers` (
  ID INTEGER,
  SEX TEXT,
  MARITAL_STATUS TEXT,
  GEOID INTEGER REFERENCES Demog(None),
  EDUCATIONNUM INTEGER,
  OCCUPATION TEXT,
  age INTEGER
);
Sample rows from `Customers`:
0, Male, Never-married, 61, 7, Machine-op-inspct, 62
1, Male, Married-civ-spouse, 70, 3, Handlers-cleaners, 78
2, Male, Never-married, 53, 7, Machine-op-inspct, 69

CREATE TABLE `Mailings1_2` (
  REFID INTEGER REFERENCES Customers(None),
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `Mailings1_2`:
0, 2007-02-01 12:00:00.0, false
1, 2007-02-01 12:00:00.0, false
2, 2007-02-01 12:00:00.0, false

CREATE TABLE `Sales` (
  EVENTID INTEGER,
  REFID INTEGER REFERENCES Customers(None),
  EVENT_DATE DATETIME,
  AMOUNT REAL
);
Sample rows from `Sales`:
0, 0, 2006-12-21 12:00:00.0, 17.907
1, 0, 2006-12-25 12:00:00.0, 17.401
2, 0, 2007-01-26 12:00:00.0, 13.277

","customers, demog","demog.inhabitants_k, customers.geoid, demog.geoid","Demog, mailings3, Customers, Mailings1_2, Sales"
restaurant,Indicate the address of the restaurant with the most popular reviews.,"SELECT t2.street_num, t2.street_name FROM generalinfo as t1 inner JOIN location as t2 ON t1.id_restaurant = t2.id_restaurant ORDER BY t1.review DESC LIMIT 1","CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

","CREATE TABLE `geographic` (
  city TEXT PRIMARY KEY,
  county TEXT,
  region TEXT
);
Sample rows from `geographic`:
alameda, alameda county, bay area
alamo, contra costa county, bay area
albany, alameda county, bay area

CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

","generalinfo, location","location.street_num, location.street_name, generalinfo.id_restaurant, location.id_restaurant, generalinfo.review","geographic, generalinfo, location"
cars,How many times was Ford Maverick introduced to the market?,SELECT COUNT(t2.model_year) FROM data as t1 inner JOIN production as t2 ON t1.id = t2.id WHERE t1.car_name = 'ford maverick',"CREATE TABLE `data` (
  ID INTEGER REFERENCES price(ID),
  mpg REAL,
  cylinders INTEGER,
  displacement REAL,
  horsepower INTEGER,
  weight INTEGER,
  acceleration REAL,
  model INTEGER,
  car_name TEXT
);
Sample rows from `data`:
1, 18.0, 8, 307.0, 130, 3504, 12.0, 70, chevrolet chevelle malibu
2, 15.0, 8, 350.0, 165, 3693, 11.5, 70, buick skylark 320
3, 18.0, 8, 318.0, 150, 3436, 11.0, 70, plymouth satellite

CREATE TABLE `production` (
  ID INTEGER PRIMARY KEY REFERENCES price(ID) REFERENCES data(ID),
  model_year INTEGER PRIMARY KEY,
  country INTEGER REFERENCES country(origin)
);
Sample rows from `production`:
1, 1970, 1
1, 1971, 1
2, 1970, 1

","CREATE TABLE `country` (
  origin INTEGER,
  country TEXT
);
Sample rows from `country`:
1, USA
2, Europe
3, Japan

CREATE TABLE `price` (
  ID INTEGER,
  price REAL
);
Sample rows from `price`:
1, 25561.59078
2, 24221.42273
3, 27240.84373

CREATE TABLE `data` (
  ID INTEGER REFERENCES price(ID),
  mpg REAL,
  cylinders INTEGER,
  displacement REAL,
  horsepower INTEGER,
  weight INTEGER,
  acceleration REAL,
  model INTEGER,
  car_name TEXT
);
Sample rows from `data`:
1, 18.0, 8, 307.0, 130, 3504, 12.0, 70, chevrolet chevelle malibu
2, 15.0, 8, 350.0, 165, 3693, 11.5, 70, buick skylark 320
3, 18.0, 8, 318.0, 150, 3436, 11.0, 70, plymouth satellite

CREATE TABLE `production` (
  ID INTEGER PRIMARY KEY REFERENCES price(ID) REFERENCES data(ID),
  model_year INTEGER PRIMARY KEY,
  country INTEGER REFERENCES country(origin)
);
Sample rows from `production`:
1, 1970, 1
1, 1971, 1
2, 1970, 1

","data, production","production.model_year, data.id, production.id, data.car_name","country, price, data, production"
app_store,Which apps have multiple genres and what is the total sentiment subjectivity of these apps?,SELECT SUM(t2.sentiment_subjectivity) FROM playstore as t1 inner JOIN user_reviews as t2 ON t1.app = t2.app WHERE t1.genres > 1,"CREATE TABLE `playstore` (
  App TEXT,
  Category TEXT,
  Rating REAL,
  Reviews INTEGER,
  Size TEXT,
  Installs TEXT,
  Type TEXT,
  Price TEXT,
  Content Rating TEXT,
  Genres TEXT
);
Sample rows from `playstore`:
Photo Editor & Candy Camera & Grid & ScrapBook, ART_AND_DESIGN, 4.1, 159, 19M, 10,000+, Free, 0, Everyone, Art & Design
Coloring book moana, ART_AND_DESIGN, 3.9, 967, 14M, 500,000+, Free, 0, Everyone, Art & Design;Pretend Play
U Launcher Lite – FREE Live Cool Themes, Hide Apps, ART_AND_DESIGN, 4.7, 87510, 8.7M, 5,000,000+, Free, 0, Everyone, Art & Design

CREATE TABLE `user_reviews` (
  App TEXT REFERENCES playstore(App),
  Translated_Review TEXT,
  Sentiment TEXT,
  Sentiment_Polarity TEXT,
  Sentiment_Subjectivity TEXT
);
Sample rows from `user_reviews`:
10 Best Foods for You, I like eat delicious food. That's I'm cooking food myself, case ""10 Best Foods"" helps lot, also ""Best Before (Shelf Life)"", Positive, 1.0, 0.5333333333333333
10 Best Foods for You, This help eating healthy exercise regular basis, Positive, 0.25, 0.28846153846153844
10 Best Foods for You, nan, nan, nan, nan

","CREATE TABLE `playstore` (
  App TEXT,
  Category TEXT,
  Rating REAL,
  Reviews INTEGER,
  Size TEXT,
  Installs TEXT,
  Type TEXT,
  Price TEXT,
  Content Rating TEXT,
  Genres TEXT
);
Sample rows from `playstore`:
Photo Editor & Candy Camera & Grid & ScrapBook, ART_AND_DESIGN, 4.1, 159, 19M, 10,000+, Free, 0, Everyone, Art & Design
Coloring book moana, ART_AND_DESIGN, 3.9, 967, 14M, 500,000+, Free, 0, Everyone, Art & Design;Pretend Play
U Launcher Lite – FREE Live Cool Themes, Hide Apps, ART_AND_DESIGN, 4.7, 87510, 8.7M, 5,000,000+, Free, 0, Everyone, Art & Design

CREATE TABLE `user_reviews` (
  App TEXT REFERENCES playstore(App),
  Translated_Review TEXT,
  Sentiment TEXT,
  Sentiment_Polarity TEXT,
  Sentiment_Subjectivity TEXT
);
Sample rows from `user_reviews`:
10 Best Foods for You, I like eat delicious food. That's I'm cooking food myself, case ""10 Best Foods"" helps lot, also ""Best Before (Shelf Life)"", Positive, 1.0, 0.5333333333333333
10 Best Foods for You, This help eating healthy exercise regular basis, Positive, 0.25, 0.28846153846153844
10 Best Foods for You, nan, nan, nan, nan

","playstore, user_reviews","user_reviews.sentiment_subjectivity, playstore.app, user_reviews.app, playstore.genres","playstore, user_reviews"
bike_share_1,List the name and city of starting stations which has an above-average duration trips.,"SELECT DISTINCT t1.start_station_name, t2.city FROM trip as t1 inner JOIN station as t2 ON t2.name = t1.start_station_name WHERE t1.duration > ( SELECT AVG(t1.duration) FROM trip as t1 left JOIN station as t2 ON t2.name = t1.start_station_name )","CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);
Sample rows from `trip`:
4069, 174, 8/29/2013 9:08, 2nd at South Park, 64, 8/29/2013 9:11, 2nd at South Park, 64, 288, Subscriber, 94114
4073, 1067, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:42, San Francisco Caltrain 2 (330 Townsend), 69, 321, Subscriber, 94703
4074, 1131, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:43, San Francisco Caltrain 2 (330 Townsend), 69, 317, Subscriber, 94115

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat REAL,
  long REAL,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);
Sample rows from `station`:
2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013
3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013
4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013

","CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat REAL,
  long REAL,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);
Sample rows from `station`:
2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013
3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013
4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013

CREATE TABLE `status` (
  station_id INTEGER,
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);
Sample rows from `status`:
2, 2, 25, 2013/08/29 12:06:01
2, 2, 25, 2013/08/29 12:07:01
2, 2, 25, 2013/08/29 12:08:01

CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);
Sample rows from `trip`:
4069, 174, 8/29/2013 9:08, 2nd at South Park, 64, 8/29/2013 9:11, 2nd at South Park, 64, 288, Subscriber, 94114
4073, 1067, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:42, San Francisco Caltrain 2 (330 Townsend), 69, 321, Subscriber, 94703
4074, 1131, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:43, San Francisco Caltrain 2 (330 Townsend), 69, 317, Subscriber, 94115

CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches REAL,
  mean_sea_level_pressure_inches REAL,
  min_sea_level_pressure_inches REAL,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches TEXT,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code TEXT
);
Sample rows from `weather`:
8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107
8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30.0, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107
8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30.0, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107

","trip, station","trip.start_station_name, station.city, station.name, trip.duration","station, status, trip, weather"
public_review_platform,"How many Yelp_Business in Anthem are under the category of ""Food""?",SELECT COUNT(t3.business_id) FROM categories as t1 inner JOIN business_categories as t2 ON t1.category_id = t2.category_id inner JOIN business as t3 ON t2.business_id = t3.business_id WHERE t1.category_name LIKE 'Food' AND t3.city LIKE 'Anthem',"CREATE TABLE `categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `business_categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `business_categories`:
1, 8
1, 143
2, 18

CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","categories, business_categories, business","business.business_id, categories.category_id, business_categories.category_id, business_categories.business_id, categories.category_name, business.city","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
video_games,"What is the id of the game ""Resident Evil Archives: Resident Evil""?",SELECt t.genre_id FROM game as t WHERE t.game_name = 'Resident Evil Archives: Resident Evil',"CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

","CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

",game,"game.genre_id, game.game_name","genre, game, platform, publisher, game_publisher, game_platform, region, region_sales"
social_media,Which state was the tweet `tw-685681052912873473` from? Give the state code.,SELECT t2.statecode FROM twitter as t1 inner JOIN location as t2 ON t2.locationid = t1.locationid WHERE t1.tweetid = 'tw-685681052912873473',"CREATE TABLE `twitter` (
  TweetID TEXT PRIMARY KEY,
  Weekday TEXT,
  Hour INTEGER,
  Day INTEGER,
  Lang TEXT,
  IsReshare TEXT,
  Reach INTEGER,
  RetweetCount INTEGER,
  Likes INTEGER,
  Klout INTEGER,
  Sentiment REAL,
  text TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  UserID TEXT REFERENCES user(UserID)
);
Sample rows from `twitter`:
tw-682712873332805633, Thursday, 17, 31, en, FALSE, 44, 0, 0, 35, 0.0, We are hiring: Senior Software Engineer - Proto http://www.reqcloud.com/jobs/719865/?k=0LaPxXuFwczs1e32ZURJKrgCIDMQtRO7BquFSQthUKY&utm_source=twitter&utm_campaign=reqCloud_JobPost #job @awscloud #job #protocol #networking #aws #mediastreaming, 3751, tw-40932430
tw-682713045357998080, Thursday, 17, 31, en, TRUE, 1810, 5, 0, 53, 2.0, RT @CodeMineStatus: This is true Amazon Web Services https://aws.amazon.com/ #php #html #html5 #css #webdesign #seo #java #javascript htt, 3989, tw-3179389829
tw-682713219375476736, Thursday, 17, 31, en, FALSE, 282, 0, 0, 47, 0.0, Devops Engineer Aws Ansible Cassandra Mysql Ubuntu Ruby On Rails Jobs in Austin TX #Austin #TX #jobs #jobsearch https://www.jobfindly.com/devops-engineer-aws-ansible-cassandra-mysql-ubuntu-ruby-on-rails-jobs-austin-tx.html, 3741, tw-4624808414

CREATE TABLE `location` (
  LocationID INTEGER,
  Country TEXT,
  State TEXT,
  StateCode TEXT,
  City TEXT
);
Sample rows from `location`:
1, Albania, Elbasan, AL, Elbasan
2, Albania, Tirane, AL, Tirana
3, Algeria, Souk Ahras, DZ, Souk Ahras

","CREATE TABLE `location` (
  LocationID INTEGER,
  Country TEXT,
  State TEXT,
  StateCode TEXT,
  City TEXT
);
Sample rows from `location`:
1, Albania, Elbasan, AL, Elbasan
2, Albania, Tirane, AL, Tirana
3, Algeria, Souk Ahras, DZ, Souk Ahras

CREATE TABLE `user` (
  UserID TEXT PRIMARY KEY,
  Gender TEXT
);
Sample rows from `user`:
tw-1267804344, Unknown
tw-27229880, Male
tw-199664730, Male

CREATE TABLE `twitter` (
  TweetID TEXT PRIMARY KEY,
  Weekday TEXT,
  Hour INTEGER,
  Day INTEGER,
  Lang TEXT,
  IsReshare TEXT,
  Reach INTEGER,
  RetweetCount INTEGER,
  Likes INTEGER,
  Klout INTEGER,
  Sentiment REAL,
  text TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  UserID TEXT REFERENCES user(UserID)
);
Sample rows from `twitter`:
tw-682712873332805633, Thursday, 17, 31, en, FALSE, 44, 0, 0, 35, 0.0, We are hiring: Senior Software Engineer - Proto http://www.reqcloud.com/jobs/719865/?k=0LaPxXuFwczs1e32ZURJKrgCIDMQtRO7BquFSQthUKY&utm_source=twitter&utm_campaign=reqCloud_JobPost #job @awscloud #job #protocol #networking #aws #mediastreaming, 3751, tw-40932430
tw-682713045357998080, Thursday, 17, 31, en, TRUE, 1810, 5, 0, 53, 2.0, RT @CodeMineStatus: This is true Amazon Web Services https://aws.amazon.com/ #php #html #html5 #css #webdesign #seo #java #javascript htt, 3989, tw-3179389829
tw-682713219375476736, Thursday, 17, 31, en, FALSE, 282, 0, 0, 47, 0.0, Devops Engineer Aws Ansible Cassandra Mysql Ubuntu Ruby On Rails Jobs in Austin TX #Austin #TX #jobs #jobsearch https://www.jobfindly.com/devops-engineer-aws-ansible-cassandra-mysql-ubuntu-ruby-on-rails-jobs-austin-tx.html, 3741, tw-4624808414

","twitter, location","location.statecode, location.locationid, twitter.locationid, twitter.tweetid","location, user, twitter"
sales,What is the last name of the customer who placed an order for sales id 178?,SELECT t1.lastname FROM customers as t1 inner JOIN sales as t2 ON t1.customerid = t2.customerid WHERE t2.salesID = 178,"CREATE TABLE `customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

CREATE TABLE `sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Employees`:
1, Abraham, e, Bennet
2, Reginald, l, Blotchet-Halls
3, Cheryl, a, Carson

CREATE TABLE `Products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

CREATE TABLE `Sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `Sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

","customers, sales","customers.lastname, customers.customerid, sales.customerid, sales.salesID","Customers, Employees, Products, Sales"
simpson_episodes,Name the organization which hold the award id 328.,SELECT organization FROM award WHERE award_id = 328;,"CREATE TABLE `award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

",award,award_id,"Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
public_review_platform,How many businesses in the fashion industry are rated 5 stars?,SELECT COUNT(t1.business_id) FROM business as t1 inner JOIN business_categories ON t1.business_id = business_categories.business_id inner JOIN categories as t3 ON business_categories.category_id = t3.category_id WHERE t1.stars = 5 AND t3.category_name LIKE 'Fashion',"CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `business_categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `business_categories`:
1, 8
1, 143
2, 18

CREATE TABLE `categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","business, business_categories, categories","business.business_id, business_categories.business_id, business_categories.category_id, categories.category_id, business.stars, categories.category_name","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
simpson_episodes,Who is the writer for the episode with the most 10 star votes?,SELECT t1.person FROM credit as t1 inner JOIN vote as t2 ON t1.episode_id = t2.episode_id WHERE t1.role = 'Writer' AND t2.stars = 10 GROUP BY t1.person ORDER BY COUNT(*) DESC LIMIT 1;,"CREATE TABLE `credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","credit, vote","credit.person, credit.episode_id, vote.episode_id, credit.role, vote.stars","Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
retail_world,How many employees have Andrew Fuller as their direct supervisor?,SELECT COUNT(employeeid) FROM employees WHERE reportsto = ( SELECT employeeid FROM employees WHERE lastname = 'Fuller' AND firstname = 'Andrew' ),"CREATE TABLE `employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

",employees,"employeeid, reportsto, lastname, firstname","sqlite_sequence, Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails"
world,What is the life expectancy of the countries that uses Japanese as their language?,SELECT AVG(t2.lifeexpectancy) FROM countrylanguage as t1 inner JOIN country as t2 ON t1.countrycode = t2.code WHERE t1.language = 'Japanese',"CREATE TABLE `countrylanguage` (
  CountryCode TEXT PRIMARY KEY REFERENCES Country(Code),
  Language TEXT PRIMARY KEY,
  IsOfficial TEXT,
  Percentage REAL
);
Sample rows from `countrylanguage`:
ABW, Dutch, T, 5.3
ABW, English, F, 9.5
ABW, Papiamento, F, 76.7

CREATE TABLE `country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
City, 4079

CREATE TABLE `City` (
  ID INTEGER,
  Name TEXT,
  CountryCode TEXT REFERENCES Country(Code),
  District TEXT,
  Population INTEGER
);
Sample rows from `City`:
1, Kabul, AFG, Kabol, 1780000
2, Qandahar, AFG, Qandahar, 237500
3, Herat, AFG, Herat, 186800

CREATE TABLE `Country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `Country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

CREATE TABLE `CountryLanguage` (
  CountryCode TEXT PRIMARY KEY REFERENCES Country(Code),
  Language TEXT PRIMARY KEY,
  IsOfficial TEXT,
  Percentage REAL
);
Sample rows from `CountryLanguage`:
ABW, Dutch, T, 5.3
ABW, English, F, 9.5
ABW, Papiamento, F, 76.7

","countrylanguage, country","country.lifeexpectancy, countrylanguage.countrycode, country.code, countrylanguage.language","sqlite_sequence, City, Country, CountryLanguage"
movielens,Please list the country of the movie that stars an actress who acts the worse.,SELECT t3.country fROM actors as t1 inner JOIN movies2actors as t2 ON t1.actorid = t2.actorid inner JOIN movies as t3 ON t2.movieid = t3.movieid WHERE t1.a_gender = 'f' AND t1.a_quality = 0,"CREATE TABLE `actors` (
  actorid INTEGER,
  a_gender TEXT,
  a_quality INTEGER
);
Sample rows from `actors`:
4, M, 4
16, M, 0
28, M, 4

CREATE TABLE `movies2actors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  actorid INTEGER PRIMARY KEY REFERENCES actors(None),
  cast_num INTEGER
);
Sample rows from `movies2actors`:
1672580, 981535, 0
1672946, 1094968, 0
1673647, 149985, 0

CREATE TABLE `movies` (
  movieid INTEGER,
  year INTEGER,
  isEnglish TEXT,
  country TEXT,
  runningtime INTEGER
);
Sample rows from `movies`:
1672052, 3, T, other, 2
1672111, 4, T, other, 2
1672580, 4, T, USA, 3

","CREATE TABLE `users` (
  userid INTEGER,
  age TEXT,
  u_gender TEXT,
  occupation TEXT
);
Sample rows from `users`:
1, 1, F, 2
2, 56, M, 3
3, 25, M, 2

CREATE TABLE `directors` (
  directorid INTEGER,
  d_quality INTEGER PRIMARY KEY,
  avg_revenue INTEGER PRIMARY KEY
);
Sample rows from `directors`:
67, 4, 1
92, 2, 3
284, 4, 0

CREATE TABLE `actors` (
  actorid INTEGER,
  a_gender TEXT,
  a_quality INTEGER
);
Sample rows from `actors`:
4, M, 4
16, M, 0
28, M, 4

CREATE TABLE `movies` (
  movieid INTEGER,
  year INTEGER,
  isEnglish TEXT,
  country TEXT,
  runningtime INTEGER
);
Sample rows from `movies`:
1672052, 3, T, other, 2
1672111, 4, T, other, 2
1672580, 4, T, USA, 3

CREATE TABLE `movies2actors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  actorid INTEGER PRIMARY KEY REFERENCES actors(None),
  cast_num INTEGER
);
Sample rows from `movies2actors`:
1672580, 981535, 0
1672946, 1094968, 0
1673647, 149985, 0

CREATE TABLE `movies2directors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  directorid INTEGER PRIMARY KEY REFERENCES directors(None),
  genre TEXT
);
Sample rows from `movies2directors`:
1672111, 54934, Action
1672946, 188940, Action
1679461, 179783, Action

CREATE TABLE `u2base` (
  userid INTEGER PRIMARY KEY REFERENCES users(None),
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  rating TEXT
);
Sample rows from `u2base`:
2, 1964242, 1
2, 2219779, 1
3, 1856939, 1

","actors, movies2actors, movies","movies.country, actors.actorid, movies2actors.actorid, movies2actors.movieid, movies.movieid, actors.a_gender, actors.a_quality","users, directors, actors, movies, movies2actors, movies2directors, u2base"
sales_in_weather,"For the home weather station of store no.15, what was the dew point on 2012/2/18?",SELECT t1.dewpoint FROM weather as t1 inner JOIN relation as t2 ON t1.station_nbr = t2.station_nbr WHERE t2.store_nbr = 15 AND t1.`date` = '2012-02-18',"CREATE TABLE `weather` (
  station_nbr INTEGER PRIMARY KEY,
  date DATE PRIMARY KEY,
  tmax INTEGER,
  tmin INTEGER,
  tavg INTEGER,
  depart INTEGER,
  dewpoint INTEGER,
  wetbulb INTEGER,
  heat INTEGER,
  cool INTEGER,
  sunrise TEXT,
  sunset TEXT,
  codesum TEXT,
  snowfall REAL,
  preciptotal REAL,
  stnpressure REAL,
  sealevel REAL,
  resultspeed REAL,
  resultdir INTEGER,
  avgspeed REAL
);
Sample rows from `weather`:
1, 2012-01-01, 52, 31, 42, None, 36, 40, 23, 0, None, None, RA FZFG BR, None, 0.05, 29.78, 29.92, 3.6, 20, 4.6
1, 2012-01-02, 50, 31, 41, None, 26, 35, 24, 0, None, None,  , None, 0.01, 29.44, 29.62, 9.8, 24, 10.3
1, 2012-01-03, 32, 11, 22, None, 4, 18, 43, 0, None, None,  , None, 0.0, 29.67, 29.87, 10.8, 31, 11.6

CREATE TABLE `relation` (
  store_nbr INTEGER REFERENCES sales_in_weather(store_nbr),
  station_nbr INTEGER REFERENCES weather(station_nbr)
);
Sample rows from `relation`:
1, 1
2, 14
3, 7

","CREATE TABLE `sales_in_weather` (
  date DATE PRIMARY KEY,
  store_nbr INTEGER PRIMARY KEY,
  item_nbr INTEGER PRIMARY KEY,
  units INTEGER
);
Sample rows from `sales_in_weather`:
2012-01-01, 1, 1, 0
2012-01-01, 1, 2, 0
2012-01-01, 1, 3, 0

CREATE TABLE `weather` (
  station_nbr INTEGER PRIMARY KEY,
  date DATE PRIMARY KEY,
  tmax INTEGER,
  tmin INTEGER,
  tavg INTEGER,
  depart INTEGER,
  dewpoint INTEGER,
  wetbulb INTEGER,
  heat INTEGER,
  cool INTEGER,
  sunrise TEXT,
  sunset TEXT,
  codesum TEXT,
  snowfall REAL,
  preciptotal REAL,
  stnpressure REAL,
  sealevel REAL,
  resultspeed REAL,
  resultdir INTEGER,
  avgspeed REAL
);
Sample rows from `weather`:
1, 2012-01-01, 52, 31, 42, None, 36, 40, 23, 0, None, None, RA FZFG BR, None, 0.05, 29.78, 29.92, 3.6, 20, 4.6
1, 2012-01-02, 50, 31, 41, None, 26, 35, 24, 0, None, None,  , None, 0.01, 29.44, 29.62, 9.8, 24, 10.3
1, 2012-01-03, 32, 11, 22, None, 4, 18, 43, 0, None, None,  , None, 0.0, 29.67, 29.87, 10.8, 31, 11.6

CREATE TABLE `relation` (
  store_nbr INTEGER REFERENCES sales_in_weather(store_nbr),
  station_nbr INTEGER REFERENCES weather(station_nbr)
);
Sample rows from `relation`:
1, 1
2, 14
3, 7

","weather, relation","weather.dewpoint, weather.station_nbr, relation.station_nbr, relation.store_nbr, weather.date","sales_in_weather, weather, relation"
retail_complains,How did Kyran Muller submit his complaint?,SELECT DISTINCT t2.`submitted via` FROM client as t1 inner JOIN events as t2 ON t1.client_id = t2.client_id WHERE t1.first = 'Kyran' AND t1.last = 'Muller',"CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

","CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

","client, events","events.submitted via, client.client_id, events.client_id, client.first, client.last","state, callcenterlogs, client, district, events, reviews"
shipping,Which headquarter's truck has the highest shipments in year 2016?,"SELECT case when t2.make = 'Peterbilt' then 'Texas (TX)' when t2.make = 'Mack' then 'North Carolina (NC)' when t2.make = 'Kenworth' then 'Washington (WA)' end as ""result"" FROM shipment as t1 inner JOIN truck as t2 ON t1.truck_id = t2.truck_id WHERE CasT(t1.ship_date as date) = 2016 GROUP BY t2.make ORDER BY COUNT(t1.ship_id) DESC LIMIT 1","CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

CREATE TABLE `truck` (
  truck_id INTEGER,
  make TEXT,
  model_year INTEGER
);
Sample rows from `truck`:
1, Peterbilt, 2005
2, Mack, 2006
3, Peterbilt, 2007

","CREATE TABLE `city` (
  city_id INTEGER,
  city_name TEXT,
  state TEXT,
  population INTEGER,
  area REAL
);
Sample rows from `city`:
100, Union City, New Jersey, 67088, 1.3
101, Huntington Park, California, 61348, 3.0
102, Passaic, New Jersey, 67861, 3.1

CREATE TABLE `customer` (
  cust_id INTEGER,
  cust_name TEXT,
  annual_revenue INTEGER,
  cust_type TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip REAL,
  phone TEXT
);
Sample rows from `customer`:
193, Advanced Fabricators, 39588651, manufacturer, 5141 Summit Boulevard, West Palm Beach, FL, 33415.0, (561) 683-3535
304, Pard's Trailer Sales, 17158109, wholesaler, 5910 South 300 West, Salt Lake City, UT, 84107.0, (801) 262-4864
314, Saar Enterprises, Inc., 47403613, retailer, 11687 192nd Street, Council Bluffs, IA, 51503.0, (712) 366-4929

CREATE TABLE `driver` (
  driver_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip_code INTEGER,
  phone TEXT
);
Sample rows from `driver`:
20, Sue, Newell, 268 Richmond Ave, Memphis, TN, 38106, (901) 774-6569
21, Andrea, Simons, 3574 Oak Limb Cv, Memphis, TN, 38135, (901) 384-0984
22, Roger, McHaney, 1839 S Orleans St, Memphis, TN, 38106, (901) 948-1043

CREATE TABLE `truck` (
  truck_id INTEGER,
  make TEXT,
  model_year INTEGER
);
Sample rows from `truck`:
1, Peterbilt, 2005
2, Mack, 2006
3, Peterbilt, 2007

CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

","shipment, truck","truck.make, shipment.truck_id, truck.truck_id, shipment.ship_date, shipment.ship_id","city, customer, driver, truck, shipment"
codebase_comments,How many percent more of the watchers for the repository of solution No.83855 than No.1502?,SELECT cast(SUM(case when t2.id = 83855 then t1.watchers else 0 end) - SUM(case when t2.id = 1502 then t1.watchers else 0 end) as real) * 100 / SUM(case when t2.id = 1502 then t1.watchers else 0 end) FROM repo as t1 inner JOIN solution as t2 ON t1.id = t2.repoid,"CREATE TABLE `repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

CREATE TABLE `solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Method, 10860640
MethodParameter, 17514858
Repo, 156550

CREATE TABLE `Method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `Method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

CREATE TABLE `MethodParameter` (
  Id INTEGER,
  MethodId TEXT,
  Type TEXT,
  Name TEXT
);
Sample rows from `MethodParameter`:
1, 1, System.String, data
2, 2, System.Int32, i
3, 2, System.Int32, declstartpos

CREATE TABLE `Repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `Repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

CREATE TABLE `Solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `Solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

","repo, solution","solution.id, repo.watchers, repo.id, solution.repoid","sqlite_sequence, Method, MethodParameter, Repo, Solution"
ice_hockey_draft,What is the percentage of Swedish players in playoffs games in the 1997 - 2000 season?,"SELECT DISTINCT cast(COUNT(case when t1.nation = 'Sweden' then t1.eliteid else null end) over (partition by t2.season) as real) * 100 / COUNT(t1.eliteid) over (partition by t2.season) FROM playerinfo as t1 inner JOIN seasonstatus as t2 ON t1.eliteid = t2.eliteid WHERE t2.season IN ('1997-1998', '1998-1999', '1999-2000')","CREATE TABLE `playerinfo` (
  ELITEID INTEGER,
  PlayerName TEXT,
  birthdate TEXT,
  birthyear DATE,
  birthmonth INTEGER,
  birthday INTEGER,
  birthplace TEXT,
  nation TEXT,
  height INTEGER REFERENCES height_info(height_id),
  weight INTEGER REFERENCES weight_info(weight_id),
  position_info TEXT,
  shoots TEXT,
  draftyear INTEGER,
  draftround INTEGER,
  overall INTEGER,
  overallby TEXT,
  CSS_rank INTEGER,
  sum_7yr_GP INTEGER,
  sum_7yr_TOI INTEGER,
  GP_greater_than_0 TEXT
);
Sample rows from `playerinfo`:
9, David Bornhammar, 1981-06-15, 1981, 6, 15, Lidingo, SWE, Sweden, 73, 198, D, L, 1999, 7, 192, Washington Capitals, 192, 0, 0, no
18, David Printz, 1980-07-24, 1980, 7, 24, Stockholm, SWE, Sweden, 76, 220, D, L, 2001, 7, 225, Philadelphia Flyers, 176, 13, 84, yes
27, Yared Hagos, 1983-03-27, 1983, 3, 27, Stockholm, SWE, Sweden, 73, 218, C, L, 2001, 3, 70, Dallas Stars, 24, 0, 0, no

CREATE TABLE `seasonstatus` (
  ELITEID INTEGER REFERENCES PlayerInfo(ELITEID),
  SEASON TEXT,
  TEAM TEXT,
  LEAGUE TEXT,
  GAMETYPE TEXT,
  GP INTEGER,
  G INTEGER,
  A INTEGER,
  P INTEGER,
  PIM INTEGER,
  PLUSMINUS INTEGER
);
Sample rows from `seasonstatus`:
3667, 1997-1998, Rimouski Oceanic, QMJHL, Regular Season, 58, 44, 71, 115, 117, 27
3667, 1997-1998, Rimouski Oceanic, QMJHL, Playoffs, 18, 15, 26, 41, 46, 4
3667, 1997-1998, Canada U20, WJC-20, Regular Season, 7, 1, 1, 2, 4, 0

","CREATE TABLE `height_info` (
  height_id INTEGER,
  height_in_cm INTEGER,
  height_in_inch TEXT
);
Sample rows from `height_info`:
65, 165, 5'5""
67, 170, 5'7""
68, 172, 5'8""

CREATE TABLE `weight_info` (
  weight_id INTEGER,
  weight_in_kg INTEGER,
  weight_in_lbs INTEGER
);
Sample rows from `weight_info`:
154, 70, 154
159, 72, 159
161, 73, 161

CREATE TABLE `PlayerInfo` (
  ELITEID INTEGER,
  PlayerName TEXT,
  birthdate TEXT,
  birthyear DATE,
  birthmonth INTEGER,
  birthday INTEGER,
  birthplace TEXT,
  nation TEXT,
  height INTEGER REFERENCES height_info(height_id),
  weight INTEGER REFERENCES weight_info(weight_id),
  position_info TEXT,
  shoots TEXT,
  draftyear INTEGER,
  draftround INTEGER,
  overall INTEGER,
  overallby TEXT,
  CSS_rank INTEGER,
  sum_7yr_GP INTEGER,
  sum_7yr_TOI INTEGER,
  GP_greater_than_0 TEXT
);
Sample rows from `PlayerInfo`:
9, David Bornhammar, 1981-06-15, 1981, 6, 15, Lidingo, SWE, Sweden, 73, 198, D, L, 1999, 7, 192, Washington Capitals, 192, 0, 0, no
18, David Printz, 1980-07-24, 1980, 7, 24, Stockholm, SWE, Sweden, 76, 220, D, L, 2001, 7, 225, Philadelphia Flyers, 176, 13, 84, yes
27, Yared Hagos, 1983-03-27, 1983, 3, 27, Stockholm, SWE, Sweden, 73, 218, C, L, 2001, 3, 70, Dallas Stars, 24, 0, 0, no

CREATE TABLE `SeasonStatus` (
  ELITEID INTEGER REFERENCES PlayerInfo(ELITEID),
  SEASON TEXT,
  TEAM TEXT,
  LEAGUE TEXT,
  GAMETYPE TEXT,
  GP INTEGER,
  G INTEGER,
  A INTEGER,
  P INTEGER,
  PIM INTEGER,
  PLUSMINUS INTEGER
);
Sample rows from `SeasonStatus`:
3667, 1997-1998, Rimouski Oceanic, QMJHL, Regular Season, 58, 44, 71, 115, 117, 27
3667, 1997-1998, Rimouski Oceanic, QMJHL, Playoffs, 18, 15, 26, 41, 46, 4
3667, 1997-1998, Canada U20, WJC-20, Regular Season, 7, 1, 1, 2, 4, 0

","playerinfo, seasonstatus","playerinfo.nation, playerinfo.eliteid, seasonstatus.season, seasonstatus.eliteid","height_info, weight_info, PlayerInfo, SeasonStatus"
airline,List the air carrier's description with arrival time lower than the 40% of the average arrival time of flights that flew to Phoenix.,SELECT t1.description FROM `air carriers` as t1 inner JOIN airlines as t2 ON t1.code = t2.op_carrier_airline_id WHERE t2.dest = 'PHX' AND t2.arr_time < ( SELECT AVG(arr_time) * 0.4 FROM airlines ) GROUP BY t1.description,"CREATE TABLE `air carriers` (
  Code INTEGER,
  Description TEXT
);
Sample rows from `air carriers`:
19031, Mackey International Inc.: MAC
19032, Munz Northern Airlines Inc.: XY
19033, Cochise Airlines Inc.: COC

CREATE TABLE `airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

","CREATE TABLE `Air Carriers` (
  Code INTEGER,
  Description TEXT
);
Sample rows from `Air Carriers`:
19031, Mackey International Inc.: MAC
19032, Munz Northern Airlines Inc.: XY
19033, Cochise Airlines Inc.: COC

CREATE TABLE `Airports` (
  Code TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `Airports`:
01A, Afognak Lake, AK: Afognak Lake Airport
03A, Granite Mountain, AK: Bear Creek Mining Strip
04A, Lik, AK: Lik Mining Camp

CREATE TABLE `Airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `Airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

","air carriers, airlines","air carriers.description, air carriers.code, airlines.op_carrier_airline_id, airlines.dest, airlines.arr_time, arr_time","Air Carriers, Airports, Airlines"
retail_world,Calculate the total production for each product which were supplied from Japan,SELECT SUM(t1.unitsinstock + t1.unitsonorder) FROM products as t1 inner JOIN suppliers as t2 ON t1.supplierid = t2.supplierid WHERE t2.country = 'Japan',"CREATE TABLE `products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

","products, suppliers","products.unitsinstock, products.unitsonorder, products.supplierid, suppliers.supplierid, suppliers.country","sqlite_sequence, Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails"
language_corpus,"Which Wikipedia page number does the Catalan language's name, Acampada, appear on?",SELECT page FROM pages WHERE title = 'Acampada',"CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

","CREATE TABLE `langs` (
  lid INTEGER,
  lang TEXT PRIMARY KEY,
  locale TEXT PRIMARY KEY,
  pages INTEGER,
  words INTEGER
);
Sample rows from `langs`:
1, ca, ca_ES, 1129144, 2764996

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
langs, 1
pages, 1129144
words, 2764996

CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `langs_words` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `langs_words`:
1, 1, 242
1, 2, 16841
1, 3, 48700

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

",pages,"page, title","langs, sqlite_sequence, pages, words, langs_words, pages_words, biwords"
retail_complains,"Among the female clients, how many of them have a complaint with a priority of 1?",SELECT COUNT(t1.client_id) FROM client as t1 inner JOIN callcenterlogs as t2 ON t1.client_id = t2.`rand client` WHERE t1.sex = 'Female' AND t2.priority = 1,"CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

","CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

","client, callcenterlogs","client.client_id, callcenterlogs.rand client, client.sex, callcenterlogs.priority","state, callcenterlogs, client, district, events, reviews"
app_store,"How many of the users hold neutral attitude on ""10 Best Foods for You"" app and what category is this app?","SELECT COUNT(t2.app), t1.category FROM playstore as t1 inner JOIN user_reviews as t2 ON t1.app = t2.app WHERE t1.app = '10 Best Foods for You' AND t2.sentiment = 'Neutral'","CREATE TABLE `playstore` (
  App TEXT,
  Category TEXT,
  Rating REAL,
  Reviews INTEGER,
  Size TEXT,
  Installs TEXT,
  Type TEXT,
  Price TEXT,
  Content Rating TEXT,
  Genres TEXT
);
Sample rows from `playstore`:
Photo Editor & Candy Camera & Grid & ScrapBook, ART_AND_DESIGN, 4.1, 159, 19M, 10,000+, Free, 0, Everyone, Art & Design
Coloring book moana, ART_AND_DESIGN, 3.9, 967, 14M, 500,000+, Free, 0, Everyone, Art & Design;Pretend Play
U Launcher Lite – FREE Live Cool Themes, Hide Apps, ART_AND_DESIGN, 4.7, 87510, 8.7M, 5,000,000+, Free, 0, Everyone, Art & Design

CREATE TABLE `user_reviews` (
  App TEXT REFERENCES playstore(App),
  Translated_Review TEXT,
  Sentiment TEXT,
  Sentiment_Polarity TEXT,
  Sentiment_Subjectivity TEXT
);
Sample rows from `user_reviews`:
10 Best Foods for You, I like eat delicious food. That's I'm cooking food myself, case ""10 Best Foods"" helps lot, also ""Best Before (Shelf Life)"", Positive, 1.0, 0.5333333333333333
10 Best Foods for You, This help eating healthy exercise regular basis, Positive, 0.25, 0.28846153846153844
10 Best Foods for You, nan, nan, nan, nan

","CREATE TABLE `playstore` (
  App TEXT,
  Category TEXT,
  Rating REAL,
  Reviews INTEGER,
  Size TEXT,
  Installs TEXT,
  Type TEXT,
  Price TEXT,
  Content Rating TEXT,
  Genres TEXT
);
Sample rows from `playstore`:
Photo Editor & Candy Camera & Grid & ScrapBook, ART_AND_DESIGN, 4.1, 159, 19M, 10,000+, Free, 0, Everyone, Art & Design
Coloring book moana, ART_AND_DESIGN, 3.9, 967, 14M, 500,000+, Free, 0, Everyone, Art & Design;Pretend Play
U Launcher Lite – FREE Live Cool Themes, Hide Apps, ART_AND_DESIGN, 4.7, 87510, 8.7M, 5,000,000+, Free, 0, Everyone, Art & Design

CREATE TABLE `user_reviews` (
  App TEXT REFERENCES playstore(App),
  Translated_Review TEXT,
  Sentiment TEXT,
  Sentiment_Polarity TEXT,
  Sentiment_Subjectivity TEXT
);
Sample rows from `user_reviews`:
10 Best Foods for You, I like eat delicious food. That's I'm cooking food myself, case ""10 Best Foods"" helps lot, also ""Best Before (Shelf Life)"", Positive, 1.0, 0.5333333333333333
10 Best Foods for You, This help eating healthy exercise regular basis, Positive, 0.25, 0.28846153846153844
10 Best Foods for You, nan, nan, nan, nan

","playstore, user_reviews","user_reviews.app, playstore.category, playstore.app, user_reviews.sentiment","playstore, user_reviews"
music_tracker,"From 1979 to 1982, what was the percentage of united.states albums out of total albums were released?",SELECT cast(SUM(case when t2.tag LIKE 'united.states' then 1 else 0 end) as real) * 100 / COUNT(t1.releasetype) FROM torrents as t1 inner JOIN tags as t2 ON t1.id = t2.id WHERE t1.groupyear BETWEEN 1979 AND 1982 AND t1.releasetype LIKE 'album',"CREATE TABLE `torrents` (
  groupName TEXT,
  totalSnatched INTEGER,
  artist TEXT,
  groupYear INTEGER,
  releaseType TEXT,
  groupId INTEGER,
  id INTEGER
);
Sample rows from `torrents`:
superappin&#39;, 239, grandmaster flash & the furious five, 1979, single, 720949, 0
spiderap / a corona jam, 156, ron hunt & ronnie g & the sm crew, 1979, single, 728752, 1
rapper&#39;s delight, 480, sugarhill gang, 1979, single, 18513, 2

CREATE TABLE `tags` (
  index INTEGER PRIMARY KEY,
  id INTEGER REFERENCES torrents(None),
  tag TEXT
);
Sample rows from `tags`:
0, 0, 1970s
1, 0, funk
2, 0, disco

","CREATE TABLE `torrents` (
  groupName TEXT,
  totalSnatched INTEGER,
  artist TEXT,
  groupYear INTEGER,
  releaseType TEXT,
  groupId INTEGER,
  id INTEGER
);
Sample rows from `torrents`:
superappin&#39;, 239, grandmaster flash & the furious five, 1979, single, 720949, 0
spiderap / a corona jam, 156, ron hunt & ronnie g & the sm crew, 1979, single, 728752, 1
rapper&#39;s delight, 480, sugarhill gang, 1979, single, 18513, 2

CREATE TABLE `tags` (
  index INTEGER PRIMARY KEY,
  id INTEGER REFERENCES torrents(None),
  tag TEXT
);
Sample rows from `tags`:
0, 0, 1970s
1, 0, funk
2, 0, disco

","torrents, tags","tags.tag, torrents.releasetype, torrents.id, tags.id, torrents.groupyear","torrents, tags"
music_platform_2,Which category does the podcast titled 'SciFi Tech Talk' belong to?,SELECT t1.category FROM categories as t1 inner JOIN podcasts as t2 ON t2.podcast_id = t1.podcast_id WHERE t2.title = 'SciFi Tech Talk',"CREATE TABLE `categories` (
  podcast_id TEXT PRIMARY KEY REFERENCES podcasts(None),
  category TEXT PRIMARY KEY
);
Sample rows from `categories`:
c61aa81c9b929a66f0c1db6cbe5d8548, arts
c61aa81c9b929a66f0c1db6cbe5d8548, arts-performing-arts
c61aa81c9b929a66f0c1db6cbe5d8548, music

CREATE TABLE `podcasts` (
  podcast_id TEXT PRIMARY KEY,
  itunes_id INTEGER,
  slug TEXT,
  itunes_url TEXT,
  title TEXT
);
Sample rows from `podcasts`:
a00018b54eb342567c94dacfb2a3e504, 1313466221, scaling-global, https://podcasts.apple.com/us/podcast/scaling-global/id1313466221, Scaling Global
a00043d34e734b09246d17dc5d56f63c, 158973461, cornerstone-baptist-church-of-orlando, https://podcasts.apple.com/us/podcast/cornerstone-baptist-church-of-orlando/id158973461, Cornerstone Baptist Church of Orlando
a0004b1ef445af9dc84dad1e7821b1e3, 139076942, mystery-dancing-in-the-dark, https://podcasts.apple.com/us/podcast/mystery-dancing-in-the-dark/id139076942, Mystery: Dancing in the Dark

","CREATE TABLE `runs` (
  run_at TEXT,
  max_rowid INTEGER,
  reviews_added INTEGER
);
Sample rows from `runs`:
2021-05-10 02:53:00, 3266481, 1215223
2021-06-06 21:34:36, 3300773, 13139
2021-07-02 18:04:55, 3329699, 11561

CREATE TABLE `podcasts` (
  podcast_id TEXT PRIMARY KEY,
  itunes_id INTEGER,
  slug TEXT,
  itunes_url TEXT,
  title TEXT
);
Sample rows from `podcasts`:
a00018b54eb342567c94dacfb2a3e504, 1313466221, scaling-global, https://podcasts.apple.com/us/podcast/scaling-global/id1313466221, Scaling Global
a00043d34e734b09246d17dc5d56f63c, 158973461, cornerstone-baptist-church-of-orlando, https://podcasts.apple.com/us/podcast/cornerstone-baptist-church-of-orlando/id158973461, Cornerstone Baptist Church of Orlando
a0004b1ef445af9dc84dad1e7821b1e3, 139076942, mystery-dancing-in-the-dark, https://podcasts.apple.com/us/podcast/mystery-dancing-in-the-dark/id139076942, Mystery: Dancing in the Dark

CREATE TABLE `reviews` (
  podcast_id TEXT REFERENCES podcasts(None),
  title TEXT,
  content TEXT,
  rating INTEGER,
  author_id TEXT,
  created_at TEXT
);
Sample rows from `reviews`:
c61aa81c9b929a66f0c1db6cbe5d8548, really interesting!, Thanks for providing these insights.  Really enjoy the variety and depth -- please keep them coming!, 5, F7E5A318989779D, 2018-04-24T12:05:16-07:00
c61aa81c9b929a66f0c1db6cbe5d8548, Must listen for anyone interested in the arts!!!, Super excited to see this podcast grow. So many fun topics to talk about...Shari is really engaging. Definitely subscribing and would recommend to anyone interested in the arts!!, 5, F6BF5472689BD12, 2018-05-09T18:14:32-07:00
ad4f2bf69c72b8db75978423c25f379e, nauseatingly left, I'm a liberal myself, but its pretty obvious and annoying that they're trying to push their beliefs on the listeners. Get a more politically diverse production staff, we like to see issues from multiple point of views not just yours., 1, 1AB95B8E6E1309E, 2019-06-11T14:53:39-07:00

CREATE TABLE `categories` (
  podcast_id TEXT PRIMARY KEY REFERENCES podcasts(None),
  category TEXT PRIMARY KEY
);
Sample rows from `categories`:
c61aa81c9b929a66f0c1db6cbe5d8548, arts
c61aa81c9b929a66f0c1db6cbe5d8548, arts-performing-arts
c61aa81c9b929a66f0c1db6cbe5d8548, music

","categories, podcasts","categories.category, podcasts.podcast_id, categories.podcast_id, podcasts.title","runs, podcasts, reviews, categories"
bike_share_1,Convert all temperature recorded at San Francisco city during August 2013 into degree Celsius.,"SELECT (max_temperature_f - 32) / 1.8000 , (mean_temperature_f - 32) / 1.8000 , (min_temperature_f - 32) / 1.8000 FROM weather WHERE substr(cast(date as text), 1, instr(date, '/') - 1) = '8' AND substr(cast(date as text), -4) = '2013' AND zip_code = 94107","CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches REAL,
  mean_sea_level_pressure_inches REAL,
  min_sea_level_pressure_inches REAL,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches TEXT,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code TEXT
);
Sample rows from `weather`:
8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107
8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30.0, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107
8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30.0, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107

","CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat REAL,
  long REAL,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);
Sample rows from `station`:
2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013
3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013
4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013

CREATE TABLE `status` (
  station_id INTEGER,
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);
Sample rows from `status`:
2, 2, 25, 2013/08/29 12:06:01
2, 2, 25, 2013/08/29 12:07:01
2, 2, 25, 2013/08/29 12:08:01

CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);
Sample rows from `trip`:
4069, 174, 8/29/2013 9:08, 2nd at South Park, 64, 8/29/2013 9:11, 2nd at South Park, 64, 288, Subscriber, 94114
4073, 1067, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:42, San Francisco Caltrain 2 (330 Townsend), 69, 321, Subscriber, 94703
4074, 1131, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:43, San Francisco Caltrain 2 (330 Townsend), 69, 317, Subscriber, 94115

CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches REAL,
  mean_sea_level_pressure_inches REAL,
  min_sea_level_pressure_inches REAL,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches TEXT,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code TEXT
);
Sample rows from `weather`:
8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107
8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30.0, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107
8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30.0, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107

",weather,"max_temperature_f, mean_temperature_f, min_temperature_f, zip_code","station, status, trip, weather"
trains,"Among the trains that run in the east direction, how many of them have at least one car in a non-regular shape?","SELECT SUM(case when t1.shape IN ('bucket', 'elipse') then 1 else 0 end)as count FROM cars as t1 inner JOIN trains as t2 ON t1.train_id = t2.id WHERE t2.direction = 'east'","CREATE TABLE `cars` (
  id INTEGER,
  train_id INTEGER REFERENCES trains(id),
  position INTEGER,
  shape TEXT,
  len TEXT,
  sides TEXT,
  roof TEXT,
  wheels INTEGER,
  load_shape TEXT,
  load_num INTEGER
);
Sample rows from `cars`:
1, 1, 1, rectangle, short, not_double, none, 2, circle, 1
2, 1, 2, rectangle, long, not_double, none, 3, hexagon, 1
3, 1, 3, rectangle, short, not_double, peaked, 2, triangle, 1

CREATE TABLE `trains` (
  id INTEGER,
  direction TEXT
);
Sample rows from `trains`:
1, east
2, east
3, east

","CREATE TABLE `cars` (
  id INTEGER,
  train_id INTEGER REFERENCES trains(id),
  position INTEGER,
  shape TEXT,
  len TEXT,
  sides TEXT,
  roof TEXT,
  wheels INTEGER,
  load_shape TEXT,
  load_num INTEGER
);
Sample rows from `cars`:
1, 1, 1, rectangle, short, not_double, none, 2, circle, 1
2, 1, 2, rectangle, long, not_double, none, 3, hexagon, 1
3, 1, 3, rectangle, short, not_double, peaked, 2, triangle, 1

CREATE TABLE `trains` (
  id INTEGER,
  direction TEXT
);
Sample rows from `trains`:
1, east
2, east
3, east

","cars, trains","cars.shape, cars.train_id, trains.id, trains.direction","cars, trains"
shipping,What is the percentage of wholesaler customers who have shipment weight of not greater than 70000 pounds?,SELECT cast(SUM(case when t2.weight < 70000 then 1 else 0 end) as real) * 100 / COUNT(*) FROM customer as t1 inner JOIN shipment as t2 ON t1.cust_id = t2.cust_id WHERE t1.cust_type = 'wholesaler',"CREATE TABLE `customer` (
  cust_id INTEGER,
  cust_name TEXT,
  annual_revenue INTEGER,
  cust_type TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip REAL,
  phone TEXT
);
Sample rows from `customer`:
193, Advanced Fabricators, 39588651, manufacturer, 5141 Summit Boulevard, West Palm Beach, FL, 33415.0, (561) 683-3535
304, Pard's Trailer Sales, 17158109, wholesaler, 5910 South 300 West, Salt Lake City, UT, 84107.0, (801) 262-4864
314, Saar Enterprises, Inc., 47403613, retailer, 11687 192nd Street, Council Bluffs, IA, 51503.0, (712) 366-4929

CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

","CREATE TABLE `city` (
  city_id INTEGER,
  city_name TEXT,
  state TEXT,
  population INTEGER,
  area REAL
);
Sample rows from `city`:
100, Union City, New Jersey, 67088, 1.3
101, Huntington Park, California, 61348, 3.0
102, Passaic, New Jersey, 67861, 3.1

CREATE TABLE `customer` (
  cust_id INTEGER,
  cust_name TEXT,
  annual_revenue INTEGER,
  cust_type TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip REAL,
  phone TEXT
);
Sample rows from `customer`:
193, Advanced Fabricators, 39588651, manufacturer, 5141 Summit Boulevard, West Palm Beach, FL, 33415.0, (561) 683-3535
304, Pard's Trailer Sales, 17158109, wholesaler, 5910 South 300 West, Salt Lake City, UT, 84107.0, (801) 262-4864
314, Saar Enterprises, Inc., 47403613, retailer, 11687 192nd Street, Council Bluffs, IA, 51503.0, (712) 366-4929

CREATE TABLE `driver` (
  driver_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip_code INTEGER,
  phone TEXT
);
Sample rows from `driver`:
20, Sue, Newell, 268 Richmond Ave, Memphis, TN, 38106, (901) 774-6569
21, Andrea, Simons, 3574 Oak Limb Cv, Memphis, TN, 38135, (901) 384-0984
22, Roger, McHaney, 1839 S Orleans St, Memphis, TN, 38106, (901) 948-1043

CREATE TABLE `truck` (
  truck_id INTEGER,
  make TEXT,
  model_year INTEGER
);
Sample rows from `truck`:
1, Peterbilt, 2005
2, Mack, 2006
3, Peterbilt, 2007

CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

","customer, shipment","shipment.weight, customer.cust_id, shipment.cust_id, customer.cust_type","city, customer, driver, truck, shipment"
student_loan,How many unemployed students still have payment due?,SELECT COUNT(t1.name) FROM unemployed as t1 inner JOIN no_payment_due as t2 ON t1.name = t2.name WHERE t2.bool = 'pos',"CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

","unemployed, no_payment_due","unemployed.name, no_payment_due.name, no_payment_due.bool","bool, person, disabled, enlist, filed_for_bankrupcy, longest_absense_from_school, male, no_payment_due, unemployed, enrolled"
shakespeare,How many paragraphs are there in the chapter with the highest amount of scenes in act 1?,SELECT t1.paragraphnum FROM paragraphs as t1 inner JOIN chapters as t2 ON t1.chapter_id = t2.id WHERE t2.act = 1 ORDER BY t2.scene DESC LIMIT 1,"CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

","CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
chapters, 19648
characters, 1266
paragraphs, 666327

CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

","paragraphs, chapters","paragraphs.paragraphnum, paragraphs.chapter_id, chapters.id, chapters.act, chapters.scene","chapters, sqlite_sequence, characters, paragraphs, works"
food_inspection_2,What is the precise location of the establishment with the highest number of failed inspections?,"SELECT t1.latitude, t1.longitude FROM establishment as t1 inner JOIN ( SELECT license_no FROM inspection WHERE results = 'Fail' GROUP BY license_no ORDER BY COUNT(results) DESC LIMIT 1 ) as t2 ON t1.license_no = t2.license_no","CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

","establishment, inspection","establishment.latitude, establishment.longitude, license_no, results, establishment.license_no","employee, establishment, inspection, inspection_point, violation"
books,Indicate the full name of all customers whose last name begins with the letter K.,"SELECT first_name, last_name FROM customer WHERE last_name LIKE 'K%'","CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

",customer,"first_name, last_name","address_status, author, book_language, country, address, customer, customer_address, order_status, publisher, book, book_author, shipping_method, cust_order, sqlite_sequence, order_history, order_line"
authors,Provide the number of publications published in the journal named 'Academic Medicine' between 2005 and 2010.,SELECT COUNT(t2.journalid) FROM journal as t1 inner JOIN paper as t2 ON t1.id = t2.journalid WHERE t1.fullname = 'Academic Medicine' AND t2.year BETWEEN 2005 AND 2010,"CREATE TABLE `journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

","CREATE TABLE `Author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `Author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

CREATE TABLE `Conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

CREATE TABLE `Journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `Paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `Paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `PaperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `PaperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

","journal, paper","paper.journalid, journal.id, journal.fullname, paper.year","Author, Conference, Journal, Paper, PaperAuthor"
language_corpus,"What are the total occurence of words that paired with ""nombre""?",SELECT SUM(t2.occurrences) FROM words as t1 inner JOIN biwords as t2 ON t1.wid = t2.w1st OR t1.wid = t2.w2nd WHERE t2.w1st IN (( SELECT wid FROM words WHERE word = 'nombre' ) OR t2.w2nd IN ( SELECT wid FROM words WHERE word = 'nombre' )),"CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

","CREATE TABLE `langs` (
  lid INTEGER,
  lang TEXT PRIMARY KEY,
  locale TEXT PRIMARY KEY,
  pages INTEGER,
  words INTEGER
);
Sample rows from `langs`:
1, ca, ca_ES, 1129144, 2764996

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
langs, 1
pages, 1129144
words, 2764996

CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `langs_words` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `langs_words`:
1, 1, 242
1, 2, 16841
1, 3, 48700

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

","words, biwords","biwords.occurrences, words.wid, biwords.w1st, biwords.w2nd, wid, word","langs, sqlite_sequence, pages, words, langs_words, pages_words, biwords"
mental_health_survey,"How many users answered the question ""Overall, how much importance does your employer place on physical health?""?","SELECT COUNT(t1.userid) FROM answer as t1 inner JOIN question as t2 ON t1.questionID = t2.questionid WHERE t2.questiontext LIKE 'Overall, how much importance does your employer place on physical health?'","CREATE TABLE `answer` (
  AnswerText TEXT,
  SurveyID INTEGER REFERENCES Survey(None),
  UserID INTEGER PRIMARY KEY,
  QuestionID INTEGER PRIMARY KEY REFERENCES Question(None)
);
Sample rows from `answer`:
37, 2014, 1, 1
44, 2014, 2, 1
32, 2014, 3, 1

CREATE TABLE `question` (
  questiontext TEXT,
  questionid INTEGER
);
Sample rows from `question`:
What is your age?, 1
What is your gender?, 2
What country do you live in?, 3

","CREATE TABLE `Question` (
  questiontext TEXT,
  questionid INTEGER
);
Sample rows from `Question`:
What is your age?, 1
What is your gender?, 2
What country do you live in?, 3

CREATE TABLE `Survey` (
  SurveyID INTEGER,
  Description TEXT
);
Sample rows from `Survey`:
2014, mental health survey for 2014
2016, mental health survey for 2016
2017, mental health survey for 2017

CREATE TABLE `Answer` (
  AnswerText TEXT,
  SurveyID INTEGER REFERENCES Survey(None),
  UserID INTEGER PRIMARY KEY,
  QuestionID INTEGER PRIMARY KEY REFERENCES Question(None)
);
Sample rows from `Answer`:
37, 2014, 1, 1
44, 2014, 2, 1
32, 2014, 3, 1

","answer, question","answer.userid, answer.questionID, question.questionid, question.questiontext","Question, Survey, Answer"
student_loan,How many unemployed disabled students have been absent for 8 months from school?,SELECT COUNT(t1.name) FROM longest_absense_from_school as t1 inner JOIN unemployed as t2 ON t1.name = t2.name inner JOIN disabled as t3 ON t2.name = t3.name WHERE t1.month = 8,"CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

","longest_absense_from_school, unemployed, disabled","longest_absense_from_school.name, unemployed.name, disabled.name, longest_absense_from_school.month","bool, person, disabled, enlist, filed_for_bankrupcy, longest_absense_from_school, male, no_payment_due, unemployed, enrolled"
shipping,"How many shipments with weight of no more than 1,000 pounds were shipped by the oldest truck?",SELECT COUNT(*) FROM truck as t1 inner JOIN shipment as t2 ON t1.truck_id = t2.truck_id WHERE t2.weight < 1000 ORDER BY t1.model_year asC LIMIT 1,"CREATE TABLE `truck` (
  truck_id INTEGER,
  make TEXT,
  model_year INTEGER
);
Sample rows from `truck`:
1, Peterbilt, 2005
2, Mack, 2006
3, Peterbilt, 2007

CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

","CREATE TABLE `city` (
  city_id INTEGER,
  city_name TEXT,
  state TEXT,
  population INTEGER,
  area REAL
);
Sample rows from `city`:
100, Union City, New Jersey, 67088, 1.3
101, Huntington Park, California, 61348, 3.0
102, Passaic, New Jersey, 67861, 3.1

CREATE TABLE `customer` (
  cust_id INTEGER,
  cust_name TEXT,
  annual_revenue INTEGER,
  cust_type TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip REAL,
  phone TEXT
);
Sample rows from `customer`:
193, Advanced Fabricators, 39588651, manufacturer, 5141 Summit Boulevard, West Palm Beach, FL, 33415.0, (561) 683-3535
304, Pard's Trailer Sales, 17158109, wholesaler, 5910 South 300 West, Salt Lake City, UT, 84107.0, (801) 262-4864
314, Saar Enterprises, Inc., 47403613, retailer, 11687 192nd Street, Council Bluffs, IA, 51503.0, (712) 366-4929

CREATE TABLE `driver` (
  driver_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip_code INTEGER,
  phone TEXT
);
Sample rows from `driver`:
20, Sue, Newell, 268 Richmond Ave, Memphis, TN, 38106, (901) 774-6569
21, Andrea, Simons, 3574 Oak Limb Cv, Memphis, TN, 38135, (901) 384-0984
22, Roger, McHaney, 1839 S Orleans St, Memphis, TN, 38106, (901) 948-1043

CREATE TABLE `truck` (
  truck_id INTEGER,
  make TEXT,
  model_year INTEGER
);
Sample rows from `truck`:
1, Peterbilt, 2005
2, Mack, 2006
3, Peterbilt, 2007

CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

","truck, shipment","truck.truck_id, shipment.truck_id, shipment.weight, truck.model_year","city, customer, driver, truck, shipment"
video_games,Calculate the difference between sales of games from region ID 2 and region ID 3.,SELECt SUM(case when t.region_id = 2 tHEN t.num_sales else 0 end) - SUM(case when t.region_id = 3 tHEN t.num_sales else 0 end) FROM region_sales t,"CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

","CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

",region_sales,"region_sales.region_id, region_sales.num_sales","genre, game, platform, publisher, game_publisher, game_platform, region, region_sales"
books,Indicate the ISBN13 of all the books that have less than 140 pages and more than 135.,SELECT isbn13 FROM book WHERE num_pages < 140 AND num_pages > 135,"CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

",book,"isbn13, num_pages","address_status, author, book_language, country, address, customer, customer_address, order_status, publisher, book, book_author, shipping_method, cust_order, sqlite_sequence, order_history, order_line"
university,Give the name of the university with the most number of students in 2015.,SELECT t2.university_name FROM university_year as t1 inner JOIN university as t2 ON t1.university_id = t2.id WHERE t1.year = 2015 ORDER BY t1.num_students DESC LIMIT 1,"CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

","CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

CREATE TABLE `ranking_system` (
  id INTEGER,
  system_name TEXT
);
Sample rows from `ranking_system`:
1, Times Higher Education World University Ranking
2, Shanghai Ranking
3, Center for World University Rankings

CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

","university_year, university","university.university_name, university_year.university_id, university.id, university_year.year, university_year.num_students","country, ranking_system, ranking_criteria, university, university_ranking_year, university_year"
human_resources,In which state can you find the highest amount of good performing Account Representatives?,SELECT t2.state FROM employee as t1  inner JOIN location as t2  ON t1.locationid = t2.locationid inner JOIN position as t3  ON t3.positionid = t1.positionid WHERE t3.positiontitle = 'Account Representative' AND t1.performance = 'Good' GROUP BY t2.state ORDER BY COUNT(t2.state) DESC LIMIT 1,"CREATE TABLE `employee` (
  ssn TEXT PRIMARY KEY,
  lastname TEXT,
  firstname TEXT,
  hiredate TEXT,
  salary TEXT,
  gender TEXT,
  performance TEXT,
  positionID INTEGER REFERENCES position(positionID),
  locationID INTEGER REFERENCES location(locationID)
);
Sample rows from `employee`:
000-01-0000, Milgrom, Patricia, 10/1/04, US$57,500.00, F, Average, 2, 2
000-02-2222, Adams, Sandy, 1/15/01, US$19,500.00, F, Average, 3, 1
109-87-6543, Wood, Emily, 3/12/97, US$69,000.00, F, Average, 2, 5

CREATE TABLE `location` (
  locationID INTEGER,
  locationcity TEXT,
  address TEXT,
  state TEXT,
  zipcode INTEGER,
  officephone TEXT
);
Sample rows from `location`:
1, Atlanta, 450 Peachtree Rd, GA, 30316, (404)333-5555
2, Boston, 3 Commons Blvd, MA, 2190, (617)123-4444
3, Chicago, 500 Loop Highway, IL, 60620, (312)444-6666

CREATE TABLE `position` (
  positionID INTEGER,
  positiontitle TEXT,
  educationrequired TEXT,
  minsalary TEXT,
  maxsalary TEXT
);
Sample rows from `position`:
1, Account Representative, 4 year degree, US$25,000.00, US$75,000.00
2, Manager, 4 year degree, US$50,000.00, US$150,000.00
3, Trainee, 2 year degree, US$18,000.00, US$25,000.00

","CREATE TABLE `location` (
  locationID INTEGER,
  locationcity TEXT,
  address TEXT,
  state TEXT,
  zipcode INTEGER,
  officephone TEXT
);
Sample rows from `location`:
1, Atlanta, 450 Peachtree Rd, GA, 30316, (404)333-5555
2, Boston, 3 Commons Blvd, MA, 2190, (617)123-4444
3, Chicago, 500 Loop Highway, IL, 60620, (312)444-6666

CREATE TABLE `position` (
  positionID INTEGER,
  positiontitle TEXT,
  educationrequired TEXT,
  minsalary TEXT,
  maxsalary TEXT
);
Sample rows from `position`:
1, Account Representative, 4 year degree, US$25,000.00, US$75,000.00
2, Manager, 4 year degree, US$50,000.00, US$150,000.00
3, Trainee, 2 year degree, US$18,000.00, US$25,000.00

CREATE TABLE `employee` (
  ssn TEXT PRIMARY KEY,
  lastname TEXT,
  firstname TEXT,
  hiredate TEXT,
  salary TEXT,
  gender TEXT,
  performance TEXT,
  positionID INTEGER REFERENCES position(positionID),
  locationID INTEGER REFERENCES location(locationID)
);
Sample rows from `employee`:
000-01-0000, Milgrom, Patricia, 10/1/04, US$57,500.00, F, Average, 2, 2
000-02-2222, Adams, Sandy, 1/15/01, US$19,500.00, F, Average, 3, 1
109-87-6543, Wood, Emily, 3/12/97, US$69,000.00, F, Average, 2, 5

","employee, location, position","location.state, employee.locationid, location.locationid, position.positionid, employee.positionid, position.positiontitle, employee.performance","location, position, employee"
language_corpus,What proportion of a pair of words in the Catalan language have been repeated less than 80 times?,SELECT cast(COUNT(case when occurrences < 80 then lid else null end) as real) * 100 / COUNT(lid) FROM biwords,"CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

","CREATE TABLE `langs` (
  lid INTEGER,
  lang TEXT PRIMARY KEY,
  locale TEXT PRIMARY KEY,
  pages INTEGER,
  words INTEGER
);
Sample rows from `langs`:
1, ca, ca_ES, 1129144, 2764996

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
langs, 1
pages, 1129144
words, 2764996

CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `langs_words` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `langs_words`:
1, 1, 242
1, 2, 16841
1, 3, 48700

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

",biwords,"occurrences, lid","langs, sqlite_sequence, pages, words, langs_words, pages_words, biwords"
ice_hockey_draft,List the name of players who have a height over 5'9.,"SELECT t1.playername FROM playerinfo as t1 inner JOIN height_info as t2 ON t1.height = t2.height_id WHERE t2.height_in_inch > '5''9""'","CREATE TABLE `playerinfo` (
  ELITEID INTEGER,
  PlayerName TEXT,
  birthdate TEXT,
  birthyear DATE,
  birthmonth INTEGER,
  birthday INTEGER,
  birthplace TEXT,
  nation TEXT,
  height INTEGER REFERENCES height_info(height_id),
  weight INTEGER REFERENCES weight_info(weight_id),
  position_info TEXT,
  shoots TEXT,
  draftyear INTEGER,
  draftround INTEGER,
  overall INTEGER,
  overallby TEXT,
  CSS_rank INTEGER,
  sum_7yr_GP INTEGER,
  sum_7yr_TOI INTEGER,
  GP_greater_than_0 TEXT
);
Sample rows from `playerinfo`:
9, David Bornhammar, 1981-06-15, 1981, 6, 15, Lidingo, SWE, Sweden, 73, 198, D, L, 1999, 7, 192, Washington Capitals, 192, 0, 0, no
18, David Printz, 1980-07-24, 1980, 7, 24, Stockholm, SWE, Sweden, 76, 220, D, L, 2001, 7, 225, Philadelphia Flyers, 176, 13, 84, yes
27, Yared Hagos, 1983-03-27, 1983, 3, 27, Stockholm, SWE, Sweden, 73, 218, C, L, 2001, 3, 70, Dallas Stars, 24, 0, 0, no

CREATE TABLE `height_info` (
  height_id INTEGER,
  height_in_cm INTEGER,
  height_in_inch TEXT
);
Sample rows from `height_info`:
65, 165, 5'5""
67, 170, 5'7""
68, 172, 5'8""

","CREATE TABLE `height_info` (
  height_id INTEGER,
  height_in_cm INTEGER,
  height_in_inch TEXT
);
Sample rows from `height_info`:
65, 165, 5'5""
67, 170, 5'7""
68, 172, 5'8""

CREATE TABLE `weight_info` (
  weight_id INTEGER,
  weight_in_kg INTEGER,
  weight_in_lbs INTEGER
);
Sample rows from `weight_info`:
154, 70, 154
159, 72, 159
161, 73, 161

CREATE TABLE `PlayerInfo` (
  ELITEID INTEGER,
  PlayerName TEXT,
  birthdate TEXT,
  birthyear DATE,
  birthmonth INTEGER,
  birthday INTEGER,
  birthplace TEXT,
  nation TEXT,
  height INTEGER REFERENCES height_info(height_id),
  weight INTEGER REFERENCES weight_info(weight_id),
  position_info TEXT,
  shoots TEXT,
  draftyear INTEGER,
  draftround INTEGER,
  overall INTEGER,
  overallby TEXT,
  CSS_rank INTEGER,
  sum_7yr_GP INTEGER,
  sum_7yr_TOI INTEGER,
  GP_greater_than_0 TEXT
);
Sample rows from `PlayerInfo`:
9, David Bornhammar, 1981-06-15, 1981, 6, 15, Lidingo, SWE, Sweden, 73, 198, D, L, 1999, 7, 192, Washington Capitals, 192, 0, 0, no
18, David Printz, 1980-07-24, 1980, 7, 24, Stockholm, SWE, Sweden, 76, 220, D, L, 2001, 7, 225, Philadelphia Flyers, 176, 13, 84, yes
27, Yared Hagos, 1983-03-27, 1983, 3, 27, Stockholm, SWE, Sweden, 73, 218, C, L, 2001, 3, 70, Dallas Stars, 24, 0, 0, no

CREATE TABLE `SeasonStatus` (
  ELITEID INTEGER REFERENCES PlayerInfo(ELITEID),
  SEASON TEXT,
  TEAM TEXT,
  LEAGUE TEXT,
  GAMETYPE TEXT,
  GP INTEGER,
  G INTEGER,
  A INTEGER,
  P INTEGER,
  PIM INTEGER,
  PLUSMINUS INTEGER
);
Sample rows from `SeasonStatus`:
3667, 1997-1998, Rimouski Oceanic, QMJHL, Regular Season, 58, 44, 71, 115, 117, 27
3667, 1997-1998, Rimouski Oceanic, QMJHL, Playoffs, 18, 15, 26, 41, 46, 4
3667, 1997-1998, Canada U20, WJC-20, Regular Season, 7, 1, 1, 2, 4, 0

","playerinfo, height_info","playerinfo.playername, playerinfo.height, height_info.height_id, height_info.height_in_inch","height_info, weight_info, PlayerInfo, SeasonStatus"
regional_sales,Indicate order numbers with an order date after 1/1/2018.,SELECt DistINCt t FROM ( SELECt case  when orderdate > '1/1/18' tHEN ordernumber else null end as t FROM `sales orders` ) WHERE t is NOt null,"CREATE TABLE `sales orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `sales orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  Customer Names TEXT
);
Sample rows from `Customers`:
1, Avon Corp
2, WakeFern 
3, Elorac, Corp

CREATE TABLE `Products` (
  ProductID INTEGER,
  Product Name TEXT
);
Sample rows from `Products`:
1, Cookware
2, Photo Frames
3, Table Lamps

CREATE TABLE `Regions` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `Regions`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `Sales Team` (
  SalesTeamID INTEGER,
  Sales Team TEXT,
  Region TEXT
);
Sample rows from `Sales Team`:
1, Adam Hernandez, Northeast
2, Keith Griffin, Northeast
3, Jerry Green, West

CREATE TABLE `Store Locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `Store Locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

CREATE TABLE `Sales Orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `Sales Orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

",sales orders,"orderdate, ordernumber","Customers, Products, Regions, Sales Team, Store Locations, Sales Orders"
image_and_language,What is the bounding box of the object with image id 4 and a prediction relationship class id of 144?,"SELECT t2.x, t2.y, t2.w, t2.h FROM img_rel as t1 inner JOIN img_obj as t2 ON t1.img_id = t2.img_id whERE t1.PRED_CLasS_ID = 144 AND t1.img_id = 3","CREATE TABLE `img_rel` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `img_rel`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

CREATE TABLE `img_obj` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `img_obj`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

","CREATE TABLE `ATT_CLASSES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `ATT_CLASSES`:
0, building s
1, indoors
2, cluttered

CREATE TABLE `OBJ_CLASSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLASSES`:
0, awning
1, goggles
2, dot

CREATE TABLE `IMG_OBJ` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `IMG_OBJ`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `IMG_OBJ_ATT` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_OBJ_ATT`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `PRED_CLASSES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `PRED_CLASSES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `IMG_REL` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_REL`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

","img_rel, img_obj","img_obj.x, img_obj.y, img_obj.w, img_obj.h, img_rel.img_id, img_obj.img_id, img_rel.PRED_CLasS_ID","ATT_CLASSES, OBJ_CLASSES, IMG_OBJ, IMG_OBJ_ATT, PRED_CLASSES, IMG_REL"
restaurant,List all of the restaurants on Park St.,SELECT t2.label FROM location as t1 inner JOIN generalinfo as t2 ON t1.id_restaurant = t2.id_restaurant WHERE t1.street_name = 'park st',"CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

","CREATE TABLE `geographic` (
  city TEXT PRIMARY KEY,
  county TEXT,
  region TEXT
);
Sample rows from `geographic`:
alameda, alameda county, bay area
alamo, contra costa county, bay area
albany, alameda county, bay area

CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

","location, generalinfo","generalinfo.label, location.id_restaurant, generalinfo.id_restaurant, location.street_name","geographic, generalinfo, location"
codebase_comments,"What is the average time needed for the solutions containing files within the repository whose url is ""https://github.com/jeffdik/tachy.git"" to be processd?",SELECT cast(SUM(t2.processedtime) as real) / COUNT(t2.repoid) FROM repo as t1 inner JOIN solution as t2 ON t1.id = t2.repoid WHERE t1.url = 'https://github.com/jeffdik/tachy.git',"CREATE TABLE `repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

CREATE TABLE `solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Method, 10860640
MethodParameter, 17514858
Repo, 156550

CREATE TABLE `Method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `Method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

CREATE TABLE `MethodParameter` (
  Id INTEGER,
  MethodId TEXT,
  Type TEXT,
  Name TEXT
);
Sample rows from `MethodParameter`:
1, 1, System.String, data
2, 2, System.Int32, i
3, 2, System.Int32, declstartpos

CREATE TABLE `Repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `Repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

CREATE TABLE `Solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `Solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

","repo, solution","solution.processedtime, solution.repoid, repo.id, repo.url","sqlite_sequence, Method, MethodParameter, Repo, Solution"
video_games,How many publishers in Japan released a game on X360 in 2011?,SELECT COUNT(t3.game_publisher_id) FROM region as t1 inner JOIN region_sales as t2 ON t1.id = t2.region_id inner JOIN game_platform as t3 ON t2.game_platform_id = t3.id inner JOIN platform as t4 ON t3.platform_id = t4.id WHERE t4.platform_name = 'X360' AND t3.release_year = 2011 AND t1.region_name = 'Japan',"CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

","CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

","region, region_sales, game_platform, platform","game_platform.game_publisher_id, region.id, region_sales.region_id, region_sales.game_platform_id, game_platform.id, game_platform.platform_id, platform.id, platform.platform_name, game_platform.release_year, region.region_name","genre, game, platform, publisher, game_publisher, game_platform, region, region_sales"
shakespeare,Please list all of the character descriptions in paragraph 20.,SELECT t1.description FROM characters as t1 inner JOIN paragraphs as t2 ON t1.id = t2.character_id WHERE t2.paragraphnum = 20,"CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

","CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
chapters, 19648
characters, 1266
paragraphs, 666327

CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

","characters, paragraphs","characters.description, characters.id, paragraphs.character_id, paragraphs.paragraphnum","chapters, sqlite_sequence, characters, paragraphs, works"
chicago_crime,What is the ward ID of the most crowded ward?,SELECT ward_no FROM ward ORDER BY population DESC LIMIT 1,"CREATE TABLE `ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

","CREATE TABLE `Community_Area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `Community_Area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `District` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `District`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `FBI_Code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `FBI_Code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `IUCR` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `IUCR`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `Neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `Neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `Ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `Ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `Crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `Crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

",ward,"ward_no, population","Community_Area, District, FBI_Code, IUCR, Neighborhood, Ward, Crime"
video_games,On which platform was Panzer Tactics released in 2007?,SELECT t5.platform_name FROM game_publisher as t1 inner JOIN publisher as t2 ON t1.publisher_id = t2.id inner JOIN game as t3 ON t1.game_id = t3.id inner JOIN game_platform as t4 ON t1.id = t4.game_publisher_id inner JOIN platform as t5 ON t4.platform_id = t5.id WHERE t3.game_name = 'Panzer Tactics' AND t4.release_year = 2007,"CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

","CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

","game_publisher, publisher, game, game_platform, platform","platform.platform_name, game_publisher.publisher_id, publisher.id, game_publisher.game_id, game.id, game_publisher.id, game_platform.game_publisher_id, game_platform.platform_id, platform.id, game.game_name, game_platform.release_year","genre, game, platform, publisher, game_publisher, game_platform, region, region_sales"
retail_complains,Identify by their ID all clients who did not give their consent permission.,SELECT client_id FROM events WHERE `consumer consent provided?` = 'N/A' OR 'consumer consent provided?' is null OR 'consumer consent provided?' = '',"CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

","CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

",events,"client_id, consumer consent provided?","state, callcenterlogs, client, district, events, reviews"
world,What are the official languages used in Belgium?,SELECt t2.language FROM country as t1 inner JOIN countrylanguage as t2 ON t1.code = t2.countrycode WHERE t1.name = 'Belgium' AND t2.isofficial = 't',"CREATE TABLE `country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

CREATE TABLE `countrylanguage` (
  CountryCode TEXT PRIMARY KEY REFERENCES Country(Code),
  Language TEXT PRIMARY KEY,
  IsOfficial TEXT,
  Percentage REAL
);
Sample rows from `countrylanguage`:
ABW, Dutch, T, 5.3
ABW, English, F, 9.5
ABW, Papiamento, F, 76.7

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
City, 4079

CREATE TABLE `City` (
  ID INTEGER,
  Name TEXT,
  CountryCode TEXT REFERENCES Country(Code),
  District TEXT,
  Population INTEGER
);
Sample rows from `City`:
1, Kabul, AFG, Kabol, 1780000
2, Qandahar, AFG, Qandahar, 237500
3, Herat, AFG, Herat, 186800

CREATE TABLE `Country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `Country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

CREATE TABLE `CountryLanguage` (
  CountryCode TEXT PRIMARY KEY REFERENCES Country(Code),
  Language TEXT PRIMARY KEY,
  IsOfficial TEXT,
  Percentage REAL
);
Sample rows from `CountryLanguage`:
ABW, Dutch, T, 5.3
ABW, English, F, 9.5
ABW, Papiamento, F, 76.7

","country, countrylanguage","countrylanguage.language, country.code, countrylanguage.countrycode, country.name, countrylanguage.isofficial","sqlite_sequence, City, Country, CountryLanguage"
food_inspection,What is the total number of businesses with a tax code H25?,SELECT COUNT(tax_code) FROM businesses WHERE tax_code = 'H25',"CREATE TABLE `businesses` (
  business_id INTEGER,
  name TEXT,
  address TEXT,
  city TEXT,
  postal_code TEXT,
  latitude REAL,
  longitude REAL,
  phone_number INTEGER,
  tax_code TEXT,
  business_certificate INTEGER,
  application_date DATE,
  owner_name TEXT,
  owner_address TEXT,
  owner_city TEXT,
  owner_state TEXT,
  owner_zip TEXT
);
Sample rows from `businesses`:
10, Tiramisu Kitchen, 033 Belden Pl, San Francisco, 94104, 37.7911, -122.404, None, H24, 779059, None, Tiramisu LLC, 33 Belden St, San Francisco, CA, 94104
24, OMNI S.F. Hotel - 2nd Floor Pantry, 500 California St, 2nd  Floor, San Francisco, 94104, 37.7929, -122.403, None, H24, 352312, None, OMNI San Francisco Hotel Corp, 500 California St, 2nd Floor, San Francisco, CA, 94104
31, Norman's Ice Cream and Freezes, 2801 Leavenworth St, San Francisco, 94133, 37.8072, -122.419, None, H24, 346882, None, Norman Antiforda, 2801 Leavenworth St, San Francisco, CA, 94133

","CREATE TABLE `businesses` (
  business_id INTEGER,
  name TEXT,
  address TEXT,
  city TEXT,
  postal_code TEXT,
  latitude REAL,
  longitude REAL,
  phone_number INTEGER,
  tax_code TEXT,
  business_certificate INTEGER,
  application_date DATE,
  owner_name TEXT,
  owner_address TEXT,
  owner_city TEXT,
  owner_state TEXT,
  owner_zip TEXT
);
Sample rows from `businesses`:
10, Tiramisu Kitchen, 033 Belden Pl, San Francisco, 94104, 37.7911, -122.404, None, H24, 779059, None, Tiramisu LLC, 33 Belden St, San Francisco, CA, 94104
24, OMNI S.F. Hotel - 2nd Floor Pantry, 500 California St, 2nd  Floor, San Francisco, 94104, 37.7929, -122.403, None, H24, 352312, None, OMNI San Francisco Hotel Corp, 500 California St, 2nd Floor, San Francisco, CA, 94104
31, Norman's Ice Cream and Freezes, 2801 Leavenworth St, San Francisco, 94133, 37.8072, -122.419, None, H24, 346882, None, Norman Antiforda, 2801 Leavenworth St, San Francisco, CA, 94133

CREATE TABLE `inspections` (
  business_id INTEGER REFERENCES businesses(business_id),
  score INTEGER,
  date DATE,
  type TEXT
);
Sample rows from `inspections`:
10, 92, 2014-01-14, Routine - Unscheduled
10, None, 2014-01-24, Reinspection/Followup
10, 94, 2014-07-29, Routine - Unscheduled

CREATE TABLE `violations` (
  business_id INTEGER REFERENCES businesses(business_id),
  date DATE,
  violation_type_id TEXT,
  risk_category TEXT,
  description TEXT
);
Sample rows from `violations`:
10, 2014-07-29, 103129, Moderate Risk, Insufficient hot water or running water
10, 2014-07-29, 103144, Low Risk, Unapproved or unmaintained equipment or utensils
10, 2014-01-14, 103119, Moderate Risk, Inadequate and inaccessible handwashing facilities

",businesses,tax_code,"businesses, inspections, violations"
codebase_comments,"For the repository which got '189' Stars, how many solutions which needs to be compiled does it contain?",SELECT COUNT(t2.repoid) FROM repo as t1 inner JOIN solution as t2 ON t1.id = t2.repoid WHERE t1.stars = 189 AND t2.wascompiled = 0,"CREATE TABLE `repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

CREATE TABLE `solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Method, 10860640
MethodParameter, 17514858
Repo, 156550

CREATE TABLE `Method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `Method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

CREATE TABLE `MethodParameter` (
  Id INTEGER,
  MethodId TEXT,
  Type TEXT,
  Name TEXT
);
Sample rows from `MethodParameter`:
1, 1, System.String, data
2, 2, System.Int32, i
3, 2, System.Int32, declstartpos

CREATE TABLE `Repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `Repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

CREATE TABLE `Solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `Solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

","repo, solution","solution.repoid, repo.id, repo.stars, solution.wascompiled","sqlite_sequence, Method, MethodParameter, Repo, Solution"
chicago_crime,Which district is the community area Lincoln Square grouped into?,SELECT side FROM community_area WHERE community_area_name = 'Lincoln Square',"CREATE TABLE `community_area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `community_area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

","CREATE TABLE `Community_Area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `Community_Area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `District` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `District`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `FBI_Code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `FBI_Code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `IUCR` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `IUCR`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `Neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `Neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `Ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `Ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `Crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `Crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

",community_area,"side, community_area_name","Community_Area, District, FBI_Code, IUCR, Neighborhood, Ward, Crime"
codebase_comments,"Which solution contains files within a more popular repository, the solution ID18 or solution ID19?",SELECT case when SUM(case when t2.id = 18 then t1.watchers else 0 end) > SUM(case when t2.id = 19 then t1.watchers else 0 end) then 'SolutionID18' when SUM(case when t2.id = 18 then t1.watchers else 0 end) < SUM(case when t2.id = 19 then t1.watchers else 0 end) then 'SolutionID19' end ismorepopular FROM repo as t1 inner JOIN Solution as t2 ON t1.id = t2.repoid,"CREATE TABLE `repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

CREATE TABLE `Solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `Solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Method, 10860640
MethodParameter, 17514858
Repo, 156550

CREATE TABLE `Method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `Method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

CREATE TABLE `MethodParameter` (
  Id INTEGER,
  MethodId TEXT,
  Type TEXT,
  Name TEXT
);
Sample rows from `MethodParameter`:
1, 1, System.String, data
2, 2, System.Int32, i
3, 2, System.Int32, declstartpos

CREATE TABLE `Repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `Repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

CREATE TABLE `Solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `Solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

","repo, Solution","Solution.id, repo.watchers, ismorepopular, repo.id, Solution.repoid","sqlite_sequence, Method, MethodParameter, Repo, Solution"
airline,How many flights on 2018/8/1 were operated by American Airlines Inc.?,SELECT COUNT(*) FROM airports as t1 inner JOIN airlines as t2 ON t1.code = t2.origin inner JOIN `air carriers` as t3 ON t2.op_carrier_airline_id = t3.code WHERE t2.fl_date = '2018/8/1' AND t3.description = 'American airlines Inc.: AA',"CREATE TABLE `airports` (
  Code TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `airports`:
01A, Afognak Lake, AK: Afognak Lake Airport
03A, Granite Mountain, AK: Bear Creek Mining Strip
04A, Lik, AK: Lik Mining Camp

CREATE TABLE `airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

CREATE TABLE `air carriers` (
  Code INTEGER,
  Description TEXT
);
Sample rows from `air carriers`:
19031, Mackey International Inc.: MAC
19032, Munz Northern Airlines Inc.: XY
19033, Cochise Airlines Inc.: COC

","CREATE TABLE `Air Carriers` (
  Code INTEGER,
  Description TEXT
);
Sample rows from `Air Carriers`:
19031, Mackey International Inc.: MAC
19032, Munz Northern Airlines Inc.: XY
19033, Cochise Airlines Inc.: COC

CREATE TABLE `Airports` (
  Code TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `Airports`:
01A, Afognak Lake, AK: Afognak Lake Airport
03A, Granite Mountain, AK: Bear Creek Mining Strip
04A, Lik, AK: Lik Mining Camp

CREATE TABLE `Airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `Airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

","airports, airlines, air carriers","airports.code, airlines.origin, airlines.op_carrier_airline_id, air carriers.code, airlines.fl_date, air carriers.description","Air Carriers, Airports, Airlines"
shipping,How many shipments were shipped to the most densely populated city?,SELECT COUNT(*) FROM shipment as t1 inner JOIN city as t2 ON t1.city_id = t2.city_id ORDER BY t2.area / t2.population DESC LIMIT 1,"CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

CREATE TABLE `city` (
  city_id INTEGER,
  city_name TEXT,
  state TEXT,
  population INTEGER,
  area REAL
);
Sample rows from `city`:
100, Union City, New Jersey, 67088, 1.3
101, Huntington Park, California, 61348, 3.0
102, Passaic, New Jersey, 67861, 3.1

","CREATE TABLE `city` (
  city_id INTEGER,
  city_name TEXT,
  state TEXT,
  population INTEGER,
  area REAL
);
Sample rows from `city`:
100, Union City, New Jersey, 67088, 1.3
101, Huntington Park, California, 61348, 3.0
102, Passaic, New Jersey, 67861, 3.1

CREATE TABLE `customer` (
  cust_id INTEGER,
  cust_name TEXT,
  annual_revenue INTEGER,
  cust_type TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip REAL,
  phone TEXT
);
Sample rows from `customer`:
193, Advanced Fabricators, 39588651, manufacturer, 5141 Summit Boulevard, West Palm Beach, FL, 33415.0, (561) 683-3535
304, Pard's Trailer Sales, 17158109, wholesaler, 5910 South 300 West, Salt Lake City, UT, 84107.0, (801) 262-4864
314, Saar Enterprises, Inc., 47403613, retailer, 11687 192nd Street, Council Bluffs, IA, 51503.0, (712) 366-4929

CREATE TABLE `driver` (
  driver_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip_code INTEGER,
  phone TEXT
);
Sample rows from `driver`:
20, Sue, Newell, 268 Richmond Ave, Memphis, TN, 38106, (901) 774-6569
21, Andrea, Simons, 3574 Oak Limb Cv, Memphis, TN, 38135, (901) 384-0984
22, Roger, McHaney, 1839 S Orleans St, Memphis, TN, 38106, (901) 948-1043

CREATE TABLE `truck` (
  truck_id INTEGER,
  make TEXT,
  model_year INTEGER
);
Sample rows from `truck`:
1, Peterbilt, 2005
2, Mack, 2006
3, Peterbilt, 2007

CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

","shipment, city","shipment.city_id, city.city_id, city.area, city.population","city, customer, driver, truck, shipment"
regional_sales,List all the customers with name containing the word 'Group'.,"SELECt t FROM ( SELECt iif(`customer names` LIKE '%Group%', `customer names`, null) as t FROM customers ) WHERE t is NOt null","CREATE TABLE `customers` (
  CustomerID INTEGER,
  Customer Names TEXT
);
Sample rows from `customers`:
1, Avon Corp
2, WakeFern 
3, Elorac, Corp

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  Customer Names TEXT
);
Sample rows from `Customers`:
1, Avon Corp
2, WakeFern 
3, Elorac, Corp

CREATE TABLE `Products` (
  ProductID INTEGER,
  Product Name TEXT
);
Sample rows from `Products`:
1, Cookware
2, Photo Frames
3, Table Lamps

CREATE TABLE `Regions` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `Regions`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `Sales Team` (
  SalesTeamID INTEGER,
  Sales Team TEXT,
  Region TEXT
);
Sample rows from `Sales Team`:
1, Adam Hernandez, Northeast
2, Keith Griffin, Northeast
3, Jerry Green, West

CREATE TABLE `Store Locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `Store Locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

CREATE TABLE `Sales Orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `Sales Orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

",customers,customer names,"Customers, Products, Regions, Sales Team, Store Locations, Sales Orders"
world,Calculate the average GNP of all countries that use Arabic language.,SELECT AVG(t1.gnp) FROM country as t1 inner JOIN countrylanguage as t2 ON t1.code = t2.countrycode WHERE t2.language = 'Arabic',"CREATE TABLE `country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

CREATE TABLE `countrylanguage` (
  CountryCode TEXT PRIMARY KEY REFERENCES Country(Code),
  Language TEXT PRIMARY KEY,
  IsOfficial TEXT,
  Percentage REAL
);
Sample rows from `countrylanguage`:
ABW, Dutch, T, 5.3
ABW, English, F, 9.5
ABW, Papiamento, F, 76.7

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
City, 4079

CREATE TABLE `City` (
  ID INTEGER,
  Name TEXT,
  CountryCode TEXT REFERENCES Country(Code),
  District TEXT,
  Population INTEGER
);
Sample rows from `City`:
1, Kabul, AFG, Kabol, 1780000
2, Qandahar, AFG, Qandahar, 237500
3, Herat, AFG, Herat, 186800

CREATE TABLE `Country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `Country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

CREATE TABLE `CountryLanguage` (
  CountryCode TEXT PRIMARY KEY REFERENCES Country(Code),
  Language TEXT PRIMARY KEY,
  IsOfficial TEXT,
  Percentage REAL
);
Sample rows from `CountryLanguage`:
ABW, Dutch, T, 5.3
ABW, English, F, 9.5
ABW, Papiamento, F, 76.7

","country, countrylanguage","country.gnp, country.code, countrylanguage.countrycode, countrylanguage.language","sqlite_sequence, City, Country, CountryLanguage"
public_review_platform,"How many ""cute"" type of compliments does user No. 57400 get?",SELECT COUNT(t1.compliment_type) FROM compliments as t1 inner JOIN Users_compliments as t2 ON t1.compliment_id = t2.compliment_id WHERE t1.compliment_type LIKE 'cute' AND t2.user_id = 57400,"CREATE TABLE `compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Users_compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","compliments, Users_compliments","compliments.compliment_type, compliments.compliment_id, Users_compliments.compliment_id, Users_compliments.user_id","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
beer_factory,"Among the transactions made in July, 2014, how many of them were made by a male customer?","SELECT COUNT(t1.customerid) FROm customers as t1 inner JOIN `transaction` as t2 ON t1.customerid = t2.customerid WHERE t1.gender = 'm' AND STRFTImE('%Y-%m', t2.transactiondate) = '2014-07'","CREATE TABLE `customers` (
  CustomerID INTEGER,
  First TEXT,
  Last TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER,
  Email TEXT,
  PhoneNumber TEXT,
  FirstPurchaseDate DATE,
  SubscribedToEmailList TEXT,
  Gender TEXT
);
Sample rows from `customers`:
101811, Kenneth, Walton, 6715 Commonwealth Dr, Sacramento, CA, 94256, walton.k76@fastmail.com, (916) 918-1561, 2013-05-30, FALSE, M
103508, Madeleine, Jones, 3603 Leola Way, Sacramento, CA, 94258, j_madeleine@gmail.com, (916) 186-9423, 2013-02-06, FALSE, F
104939, Damen, Wheeler, 6740 Branwood Way, Orangevale, CA, 95662, dwheeler@outlook.com, (916) 164-1156, 2013-04-11, FALSE, M

CREATE TABLE `transaction` (
  TransactionID INTEGER,
  CreditCardNumber INTEGER,
  CustomerID INTEGER REFERENCES customers(CustomerID),
  TransactionDate DATE,
  CreditCardType TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  RootBeerID INTEGER REFERENCES rootbeer(RootBeerID),
  PurchasePrice REAL
);
Sample rows from `transaction`:
100000, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105661, 3.0
100001, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105798, 3.0
100002, 6011583832864739, 864896, 2014-07-07, Discover, 2, 102514, 3.0

","CREATE TABLE `customers` (
  CustomerID INTEGER,
  First TEXT,
  Last TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER,
  Email TEXT,
  PhoneNumber TEXT,
  FirstPurchaseDate DATE,
  SubscribedToEmailList TEXT,
  Gender TEXT
);
Sample rows from `customers`:
101811, Kenneth, Walton, 6715 Commonwealth Dr, Sacramento, CA, 94256, walton.k76@fastmail.com, (916) 918-1561, 2013-05-30, FALSE, M
103508, Madeleine, Jones, 3603 Leola Way, Sacramento, CA, 94258, j_madeleine@gmail.com, (916) 186-9423, 2013-02-06, FALSE, F
104939, Damen, Wheeler, 6740 Branwood Way, Orangevale, CA, 95662, dwheeler@outlook.com, (916) 164-1156, 2013-04-11, FALSE, M

CREATE TABLE `geolocation` (
  LocationID INTEGER REFERENCES location(LocationID),
  Latitude REAL,
  Longitude REAL
);
Sample rows from `geolocation`:
0, 0.0, 0.0
1, 38.566129, -121.426432
2, 38.559615, -121.42243

CREATE TABLE `location` (
  LocationID INTEGER REFERENCES geolocation(LocationID),
  LocationName TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER
);
Sample rows from `location`:
0, LOST, None, None, None, None
1, Sac State American River Courtyard, 6000 J St, Sacramento, CA, 95819
2, Sac State Union, 6000 J St, Sacramento, CA, 95819

CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

CREATE TABLE `rootbeerreview` (
  CustomerID INTEGER PRIMARY KEY REFERENCES customers(CustomerID),
  BrandID INTEGER PRIMARY KEY REFERENCES rootbeerbrand(BrandID),
  StarRating INTEGER,
  ReviewDate DATE,
  Review TEXT
);
Sample rows from `rootbeerreview`:
101811, 10012, 5, 2013-07-15, None
101811, 10014, 1, 2013-07-08, None
101811, 10015, 3, 2013-07-25, None

CREATE TABLE `transaction` (
  TransactionID INTEGER,
  CreditCardNumber INTEGER,
  CustomerID INTEGER REFERENCES customers(CustomerID),
  TransactionDate DATE,
  CreditCardType TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  RootBeerID INTEGER REFERENCES rootbeer(RootBeerID),
  PurchasePrice REAL
);
Sample rows from `transaction`:
100000, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105661, 3.0
100001, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105798, 3.0
100002, 6011583832864739, 864896, 2014-07-07, Discover, 2, 102514, 3.0

","customers, transaction","customers.customerid, transaction.customerid, customers.gender, transaction.transactiondate","customers, geolocation, location, rootbeerbrand, rootbeer, rootbeerreview, transaction"
retail_world,Name the suppliers that supply products under the category 'cheeses.',SELECT DISTINCT t1.companyname FROM suppliers as t1 inner JOIN products as t2 ON t1.supplierid = t2.supplierid inner JOIN categories as t3 ON t2.categoryid = t3.categoryid WHERE t3.description = 'Cheeses',"CREATE TABLE `suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

","suppliers, products, categories","suppliers.companyname, suppliers.supplierid, products.supplierid, products.categoryid, categories.categoryid, categories.description","sqlite_sequence, Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails"
sales,"Calculate the total quantity of products with name starting with alphabet ""c"".","SELEcT SUM(t2.quantity) FROM products as t1 inner JOIN sales as t2 ON t1.productid = t2.productid WHERE substr(t1.name, 1, 1) = 'c'","CREATE TABLE `products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

CREATE TABLE `sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Employees`:
1, Abraham, e, Bennet
2, Reginald, l, Blotchet-Halls
3, Cheryl, a, Carson

CREATE TABLE `Products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

CREATE TABLE `Sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `Sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

","products, sales","sales.quantity, products.productid, sales.productid, products.name","Customers, Employees, Products, Sales"
student_loan,List 10 students that have no due payments and are not males.,SELECT t1.name FROM no_payment_due as t1 inner JOIN person as t2 ON t1.`name` = t2.`name` WHERE t2.`name` NOT IN ( SELECT name FROM male ) AND t1.bool = 'neg',"CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

","no_payment_due, person, male","no_payment_due.name, person.name, name","bool, person, disabled, enlist, filed_for_bankrupcy, longest_absense_from_school, male, no_payment_due, unemployed, enrolled"
image_and_language,What is the relation between object sample no.8 and object sample no.4 in image no.1?,SELECT t1.pred_class FROM pred_classES as t1 inner JOIN img_rel as t2 ON t1.pred_class_ID = t2.pred_class_ID WHERE t2.img_id = 1 AND t2.obj1_sample_id = 8 AND t2.obj2_sample_id = 4,"CREATE TABLE `pred_classES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `pred_classES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `img_rel` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `img_rel`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

","CREATE TABLE `ATT_CLASSES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `ATT_CLASSES`:
0, building s
1, indoors
2, cluttered

CREATE TABLE `OBJ_CLASSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLASSES`:
0, awning
1, goggles
2, dot

CREATE TABLE `IMG_OBJ` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `IMG_OBJ`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `IMG_OBJ_ATT` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_OBJ_ATT`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `PRED_CLASSES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `PRED_CLASSES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `IMG_REL` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_REL`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

","pred_classES, img_rel","pred_classES.pred_class, pred_classES.pred_class_ID, img_rel.pred_class_ID, img_rel.img_id, img_rel.obj1_sample_id, img_rel.obj2_sample_id","ATT_CLASSES, OBJ_CLASSES, IMG_OBJ, IMG_OBJ_ATT, PRED_CLASSES, IMG_REL"
olympics,Which city hosted the most games?,SELECT t2.city_name FROM games_city as t1 inner JOIN city as t2 ON t1.city_id = t2.id GROUP BY t2.city_name ORDER BY COUNT(t2.city_name) DESC LIMIT 1,"CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

","CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `medal` (
  id INTEGER,
  medal_name TEXT
);
Sample rows from `medal`:
1, Gold
2, Silver
3, Bronze

CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `sport` (
  id INTEGER,
  sport_name TEXT
);
Sample rows from `sport`:
1, Aeronautics
2, Alpine Skiing
3, Alpinism

CREATE TABLE `event` (
  id INTEGER,
  sport_id INTEGER REFERENCES sport(id),
  event_name TEXT
);
Sample rows from `event`:
1, 9, Basketball Men's Basketball
2, 33, Judo Men's Extra-Lightweight
3, 25, Football Men's Football

CREATE TABLE `competitor_event` (
  event_id INTEGER REFERENCES event(id),
  competitor_id INTEGER REFERENCES games_competitor(id),
  medal_id INTEGER REFERENCES medal(id)
);
Sample rows from `competitor_event`:
1, 1, 4
2, 2, 4
3, 3, 4

","games_city, city","city.city_name, games_city.city_id, city.id","city, games, games_city, medal, noc_region, person, games_competitor, person_region, sport, event, competitor_event"
disney,Who are the voice actors for all the heroes?,SELECT t2.`voice-actor` FROM characters as t1 inner JOIN `voice-actors` as t2 ON t2.character = t1.hero WHERE t2.movie = t1.movie_title,"CREATE TABLE `characters` (
  movie_title TEXT PRIMARY KEY,
  release_date TEXT,
  hero TEXT REFERENCES voice-actors(character),
  villian TEXT,
  song TEXT
);
Sample rows from `characters`:
Snow White and the Seven Dwarfs, 21-Dec-37, Snow White, Evil Queen, Some Day My Prince Will Come
Pinocchio, 7-Feb-40, Pinocchio, Stromboli, When You Wish upon a Star
Fantasia, 13-Nov-40, None, Chernabog, None

CREATE TABLE `voice-actors` (
  character TEXT PRIMARY KEY,
  voice-actor TEXT,
  movie TEXT REFERENCES characters(movie_title)
);
Sample rows from `voice-actors`:
Abby Mallard, Joan Cusack, Chicken Little
Abigail Gabble, Monica Evans, The Aristocats
Abis Mal, Jason Alexander, The Return of Jafar

","CREATE TABLE `characters` (
  movie_title TEXT PRIMARY KEY,
  release_date TEXT,
  hero TEXT REFERENCES voice-actors(character),
  villian TEXT,
  song TEXT
);
Sample rows from `characters`:
Snow White and the Seven Dwarfs, 21-Dec-37, Snow White, Evil Queen, Some Day My Prince Will Come
Pinocchio, 7-Feb-40, Pinocchio, Stromboli, When You Wish upon a Star
Fantasia, 13-Nov-40, None, Chernabog, None

CREATE TABLE `director` (
  name TEXT PRIMARY KEY REFERENCES characters(movie_title),
  director TEXT
);
Sample rows from `director`:
Snow White and the Seven Dwarfs, David Hand
Pinocchio, Ben Sharpsteen
Fantasia, full credits

CREATE TABLE `movies_total_gross` (
  movie_title TEXT PRIMARY KEY REFERENCES characters(movie_title),
  release_date TEXT PRIMARY KEY,
  genre TEXT,
  MPAA_rating TEXT,
  total_gross TEXT,
  inflation_adjusted_gross TEXT
);
Sample rows from `movies_total_gross`:
Snow White and the Seven Dwarfs, Dec 21, 1937, Musical, G, $184,925,485, $5,228,953,251
Pinocchio, Feb 9, 1940, Adventure, G, $84,300,000, $2,188,229,052
Fantasia, Nov 13, 1940, Musical, G, $83,320,000, $2,187,090,808

CREATE TABLE `revenue` (
  Year INTEGER,
  Studio Entertainment[NI 1] REAL,
  Disney Consumer Products[NI 2] REAL,
  Disney Interactive[NI 3][Rev 1] INTEGER,
  Walt Disney Parks and Resorts REAL,
  Disney Media Networks TEXT,
  Total INTEGER
);
Sample rows from `revenue`:
1991, 2593.0, 724.0, None, 2794.0, None, 6111
1992, 3115.0, 1081.0, None, 3306.0, None, 7502
1993, 3673.4, 1415.1, None, 3440.7, None, 8529

CREATE TABLE `voice-actors` (
  character TEXT PRIMARY KEY,
  voice-actor TEXT,
  movie TEXT REFERENCES characters(movie_title)
);
Sample rows from `voice-actors`:
Abby Mallard, Joan Cusack, Chicken Little
Abigail Gabble, Monica Evans, The Aristocats
Abis Mal, Jason Alexander, The Return of Jafar

","characters, voice-actors","voice-actors.voice-actor, voice-actors.character, characters.hero, voice-actors.movie, characters.movie_title","characters, director, movies_total_gross, revenue, voice-actors"
books,Provide the contact email of Moss Zarb.,SELECT email FROM customer WHERE first_name = 'Moss' AND last_name = 'Zarb',"CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

",customer,"email, first_name, last_name","address_status, author, book_language, country, address, customer, customer_address, order_status, publisher, book, book_author, shipping_method, cust_order, sqlite_sequence, order_history, order_line"
language_corpus,"For corpus title ""Atomium"", pick 3 words appear in the title and calculate the total occurence of these words.","SELECT t1.word, t1.occurrences FROM words as t1 inner JOIN pages_words as t2 ON t1.wid = t2.wid WHERE t2.pid = ( SELECT pid FROM pages WHERE title = 'Atomium' ) LIMIT 3","CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

","CREATE TABLE `langs` (
  lid INTEGER,
  lang TEXT PRIMARY KEY,
  locale TEXT PRIMARY KEY,
  pages INTEGER,
  words INTEGER
);
Sample rows from `langs`:
1, ca, ca_ES, 1129144, 2764996

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
langs, 1
pages, 1129144
words, 2764996

CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `langs_words` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `langs_words`:
1, 1, 242
1, 2, 16841
1, 3, 48700

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

","words, pages_words, pages","words.word, words.occurrences, words.wid, pages_words.wid, pages_words.pid, pid, title","langs, sqlite_sequence, pages, words, langs_words, pages_words, biwords"
language_corpus,"What is the title of corpus where word ""desena"" appear?",SELECT t1.title FROM pages as t1 inner JOIN pages_words as t2 ON t1.pid = t2.pid inner JOIN words as t3 ON t2.wid = t3.wid WHERE t3.word = 'desena',"CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

","CREATE TABLE `langs` (
  lid INTEGER,
  lang TEXT PRIMARY KEY,
  locale TEXT PRIMARY KEY,
  pages INTEGER,
  words INTEGER
);
Sample rows from `langs`:
1, ca, ca_ES, 1129144, 2764996

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
langs, 1
pages, 1129144
words, 2764996

CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `langs_words` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `langs_words`:
1, 1, 242
1, 2, 16841
1, 3, 48700

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

","pages, pages_words, words","pages.title, pages.pid, pages_words.pid, pages_words.wid, words.wid, words.word","langs, sqlite_sequence, pages, words, langs_words, pages_words, biwords"
cars,Show the origin country of Chevrolet Malibu.,SELECT t3.country FROM data as t1 inner JOIN production as t2 ON t1.id = t2.id inner JOIN country as t3 ON t3.origin = t2.country WHERE t1.car_name = 'chevrolet malibu',"CREATE TABLE `data` (
  ID INTEGER REFERENCES price(ID),
  mpg REAL,
  cylinders INTEGER,
  displacement REAL,
  horsepower INTEGER,
  weight INTEGER,
  acceleration REAL,
  model INTEGER,
  car_name TEXT
);
Sample rows from `data`:
1, 18.0, 8, 307.0, 130, 3504, 12.0, 70, chevrolet chevelle malibu
2, 15.0, 8, 350.0, 165, 3693, 11.5, 70, buick skylark 320
3, 18.0, 8, 318.0, 150, 3436, 11.0, 70, plymouth satellite

CREATE TABLE `production` (
  ID INTEGER PRIMARY KEY REFERENCES price(ID) REFERENCES data(ID),
  model_year INTEGER PRIMARY KEY,
  country INTEGER REFERENCES country(origin)
);
Sample rows from `production`:
1, 1970, 1
1, 1971, 1
2, 1970, 1

CREATE TABLE `country` (
  origin INTEGER,
  country TEXT
);
Sample rows from `country`:
1, USA
2, Europe
3, Japan

","CREATE TABLE `country` (
  origin INTEGER,
  country TEXT
);
Sample rows from `country`:
1, USA
2, Europe
3, Japan

CREATE TABLE `price` (
  ID INTEGER,
  price REAL
);
Sample rows from `price`:
1, 25561.59078
2, 24221.42273
3, 27240.84373

CREATE TABLE `data` (
  ID INTEGER REFERENCES price(ID),
  mpg REAL,
  cylinders INTEGER,
  displacement REAL,
  horsepower INTEGER,
  weight INTEGER,
  acceleration REAL,
  model INTEGER,
  car_name TEXT
);
Sample rows from `data`:
1, 18.0, 8, 307.0, 130, 3504, 12.0, 70, chevrolet chevelle malibu
2, 15.0, 8, 350.0, 165, 3693, 11.5, 70, buick skylark 320
3, 18.0, 8, 318.0, 150, 3436, 11.0, 70, plymouth satellite

CREATE TABLE `production` (
  ID INTEGER PRIMARY KEY REFERENCES price(ID) REFERENCES data(ID),
  model_year INTEGER PRIMARY KEY,
  country INTEGER REFERENCES country(origin)
);
Sample rows from `production`:
1, 1970, 1
1, 1971, 1
2, 1970, 1

","data, production, country","country.country, data.id, production.id, country.origin, production.country, data.car_name","country, price, data, production"
food_inspection_2,Tell the address of employee who did inspection ID 52238?,SELECT t1.address FROM employee as t1 inner JOIN inspection as t2 ON t1.employee_id = t2.employee_id WHERE t2.inspection_id = 52238,"CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

","employee, inspection","employee.address, employee.employee_id, inspection.employee_id, inspection.inspection_id","employee, establishment, inspection, inspection_point, violation"
human_resources,In which state does Emily Wood work?,SELECT t2.state FROM employee as t1  inner JOIN location as t2  ON t1.locationid = t2.locationid WHERE t1.firstname = 'Emily' AND t1.lastname = 'Wood',"CREATE TABLE `employee` (
  ssn TEXT PRIMARY KEY,
  lastname TEXT,
  firstname TEXT,
  hiredate TEXT,
  salary TEXT,
  gender TEXT,
  performance TEXT,
  positionID INTEGER REFERENCES position(positionID),
  locationID INTEGER REFERENCES location(locationID)
);
Sample rows from `employee`:
000-01-0000, Milgrom, Patricia, 10/1/04, US$57,500.00, F, Average, 2, 2
000-02-2222, Adams, Sandy, 1/15/01, US$19,500.00, F, Average, 3, 1
109-87-6543, Wood, Emily, 3/12/97, US$69,000.00, F, Average, 2, 5

CREATE TABLE `location` (
  locationID INTEGER,
  locationcity TEXT,
  address TEXT,
  state TEXT,
  zipcode INTEGER,
  officephone TEXT
);
Sample rows from `location`:
1, Atlanta, 450 Peachtree Rd, GA, 30316, (404)333-5555
2, Boston, 3 Commons Blvd, MA, 2190, (617)123-4444
3, Chicago, 500 Loop Highway, IL, 60620, (312)444-6666

","CREATE TABLE `location` (
  locationID INTEGER,
  locationcity TEXT,
  address TEXT,
  state TEXT,
  zipcode INTEGER,
  officephone TEXT
);
Sample rows from `location`:
1, Atlanta, 450 Peachtree Rd, GA, 30316, (404)333-5555
2, Boston, 3 Commons Blvd, MA, 2190, (617)123-4444
3, Chicago, 500 Loop Highway, IL, 60620, (312)444-6666

CREATE TABLE `position` (
  positionID INTEGER,
  positiontitle TEXT,
  educationrequired TEXT,
  minsalary TEXT,
  maxsalary TEXT
);
Sample rows from `position`:
1, Account Representative, 4 year degree, US$25,000.00, US$75,000.00
2, Manager, 4 year degree, US$50,000.00, US$150,000.00
3, Trainee, 2 year degree, US$18,000.00, US$25,000.00

CREATE TABLE `employee` (
  ssn TEXT PRIMARY KEY,
  lastname TEXT,
  firstname TEXT,
  hiredate TEXT,
  salary TEXT,
  gender TEXT,
  performance TEXT,
  positionID INTEGER REFERENCES position(positionID),
  locationID INTEGER REFERENCES location(locationID)
);
Sample rows from `employee`:
000-01-0000, Milgrom, Patricia, 10/1/04, US$57,500.00, F, Average, 2, 2
000-02-2222, Adams, Sandy, 1/15/01, US$19,500.00, F, Average, 3, 1
109-87-6543, Wood, Emily, 3/12/97, US$69,000.00, F, Average, 2, 5

","employee, location","location.state, employee.locationid, location.locationid, employee.firstname, employee.lastname","location, position, employee"
retail_complains,"In the complains received in 2012, how many of them are submitted through email?","SELECT COUNT(`submitted via`) FROM events WHERE strftime('%Y', `date received`) = '2012' AND `submitted via` = 'Email'","CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

","CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

",events,"submitted via, date received","state, callcenterlogs, client, district, events, reviews"
shipping,What is the full name of the driver who delivered the most shipments to the least populated city?,"SELECT t1.first_name, t1.last_name FROM driver as t1 inner JOIN shipment as t2 ON t1.driver_id = t2.driver_id inner JOIN city as t3 ON t3.city_id = t2.city_id GROUP BY t1.first_name, t1.last_name, t3.population HAVING t3.population = MAX(t3.population) ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE `driver` (
  driver_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip_code INTEGER,
  phone TEXT
);
Sample rows from `driver`:
20, Sue, Newell, 268 Richmond Ave, Memphis, TN, 38106, (901) 774-6569
21, Andrea, Simons, 3574 Oak Limb Cv, Memphis, TN, 38135, (901) 384-0984
22, Roger, McHaney, 1839 S Orleans St, Memphis, TN, 38106, (901) 948-1043

CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

CREATE TABLE `city` (
  city_id INTEGER,
  city_name TEXT,
  state TEXT,
  population INTEGER,
  area REAL
);
Sample rows from `city`:
100, Union City, New Jersey, 67088, 1.3
101, Huntington Park, California, 61348, 3.0
102, Passaic, New Jersey, 67861, 3.1

","CREATE TABLE `city` (
  city_id INTEGER,
  city_name TEXT,
  state TEXT,
  population INTEGER,
  area REAL
);
Sample rows from `city`:
100, Union City, New Jersey, 67088, 1.3
101, Huntington Park, California, 61348, 3.0
102, Passaic, New Jersey, 67861, 3.1

CREATE TABLE `customer` (
  cust_id INTEGER,
  cust_name TEXT,
  annual_revenue INTEGER,
  cust_type TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip REAL,
  phone TEXT
);
Sample rows from `customer`:
193, Advanced Fabricators, 39588651, manufacturer, 5141 Summit Boulevard, West Palm Beach, FL, 33415.0, (561) 683-3535
304, Pard's Trailer Sales, 17158109, wholesaler, 5910 South 300 West, Salt Lake City, UT, 84107.0, (801) 262-4864
314, Saar Enterprises, Inc., 47403613, retailer, 11687 192nd Street, Council Bluffs, IA, 51503.0, (712) 366-4929

CREATE TABLE `driver` (
  driver_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip_code INTEGER,
  phone TEXT
);
Sample rows from `driver`:
20, Sue, Newell, 268 Richmond Ave, Memphis, TN, 38106, (901) 774-6569
21, Andrea, Simons, 3574 Oak Limb Cv, Memphis, TN, 38135, (901) 384-0984
22, Roger, McHaney, 1839 S Orleans St, Memphis, TN, 38106, (901) 948-1043

CREATE TABLE `truck` (
  truck_id INTEGER,
  make TEXT,
  model_year INTEGER
);
Sample rows from `truck`:
1, Peterbilt, 2005
2, Mack, 2006
3, Peterbilt, 2007

CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

","driver, shipment, city","driver.first_name, driver.last_name, driver.driver_id, shipment.driver_id, city.city_id, shipment.city_id, city.population","city, customer, driver, truck, shipment"
law_episode,Who was the Law and Order series writer who also won the Television Silver Gavel Award at the American Bar Association Silver Gavel Awards for Media and the Arts for two consecutive years?,"SELECT t3.name FROM ( SELECT DISTINCT t2.year as years, t1.name, row_number() over (partition by t1.name ORDER BY t2.year) as rm FROM person as t1 inner JOIN award as t2 ON t1.person_id = t2.person_id WHERE t2.award = 'Television' AND t2.award_category = 'Silver Gavel award' AND t2.series = 'Law and Order' AND t2.result = 'Winner' AND t2.organization = 'American Bar Association Silver Gavel awards for Media and the Arts' ) as t3 GROUP BY t3.name HAVING COUNT(t3.years - t3.rm) >= 2","CREATE TABLE `person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

CREATE TABLE `award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  series TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  person_id TEXT REFERENCES Person(person_id),
  role TEXT,
  result TEXT
);
Sample rows from `award`:
258, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0937725, None, Winner
259, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0792309, None, Winner
260, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0049569, None, Winner

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
tt0629239, nun
tt0629239, priest
tt0629420, police officer

CREATE TABLE `Person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  series TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  person_id TEXT REFERENCES Person(person_id),
  role TEXT,
  result TEXT
);
Sample rows from `Award`:
258, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0937725, None, Winner
259, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0792309, None, Winner
260, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0049569, None, Winner

CREATE TABLE `Credit` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  person_id TEXT PRIMARY KEY REFERENCES Person(person_id),
  category TEXT,
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
tt0629204, nm0226352, Additional Crew, technical advisor, true
tt0629204, nm0506974, Additional Crew, production accountant, true
tt0629204, nm4103116, Additional Crew, production accountant, true

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
tt0629204, 10, 36, 17.7
tt0629204, 9, 39, 19.2
tt0629204, 8, 64, 31.5

","person, award","person.name, award.year, person.person_id, award.person_id, award.award, award.award_category, award.series, award.result, award.organization","Episode, Keyword, Person, Award, Credit, Vote"
chicago_crime,Please list any three criminal sexual assault cases against persons where the criminals have been arrested.,SELECT t2.case_number FROM fbi_code as t1 inner JOIN crime as t2 ON t1.fbi_code_no = t2.fbi_code_no WHERE t1.title = 'Criminal Sexual Assault' AND t2.arrest = 'TRUE' AND t1.crime_against = 'Persons' LIMIT 3,"CREATE TABLE `fbi_code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `fbi_code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","CREATE TABLE `Community_Area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `Community_Area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `District` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `District`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `FBI_Code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `FBI_Code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `IUCR` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `IUCR`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `Neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `Neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `Ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `Ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `Crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `Crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","fbi_code, crime","crime.case_number, fbi_code.fbi_code_no, crime.fbi_code_no, fbi_code.title, crime.arrest, fbi_code.crime_against","Community_Area, District, FBI_Code, IUCR, Neighborhood, Ward, Crime"
regional_sales,How many states are in the Midwest region?,SELECt COUNT(DistINCt t) FROM ( SELECt case  when region = 'Midwest' tHEN state else null end as t FROM regions ) WHERE t is NOt null,"CREATE TABLE `regions` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `regions`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  Customer Names TEXT
);
Sample rows from `Customers`:
1, Avon Corp
2, WakeFern 
3, Elorac, Corp

CREATE TABLE `Products` (
  ProductID INTEGER,
  Product Name TEXT
);
Sample rows from `Products`:
1, Cookware
2, Photo Frames
3, Table Lamps

CREATE TABLE `Regions` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `Regions`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `Sales Team` (
  SalesTeamID INTEGER,
  Sales Team TEXT,
  Region TEXT
);
Sample rows from `Sales Team`:
1, Adam Hernandez, Northeast
2, Keith Griffin, Northeast
3, Jerry Green, West

CREATE TABLE `Store Locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `Store Locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

CREATE TABLE `Sales Orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `Sales Orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

",regions,"region, state","Customers, Products, Regions, Sales Team, Store Locations, Sales Orders"
retail_world,Which company had the most orders in 1998?,"SELECT t1.companyname FROM customers as t1 inner JOIN orders as t2 ON t1.customerid = t2.customerid WHERE strftime('%Y', t2.orderdate) = '1998' GROUP BY t1.companyname ORDER BY COUNT(t2.orderid) DESC LIMIT 1","CREATE TABLE `customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

","customers, orders","customers.companyname, customers.customerid, orders.customerid, orders.orderdate, orders.orderid","sqlite_sequence, Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails"
chicago_crime,Provide at least 5 ward office addresses associated with the crimes that happened in the community of Montclare.,SELECT t3.ward_office_address FROM community_area as t1 inner JOIN crime as t2 ON t1.community_area_no = t2.community_area_no inner JOIN ward as t3 ON t2.ward_no = t3.ward_no WHERE t1.community_area_name = 'Montclare' GROUP BY t3.ward_office_address LIMIT 5,"CREATE TABLE `community_area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `community_area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

CREATE TABLE `ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

","CREATE TABLE `Community_Area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `Community_Area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `District` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `District`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `FBI_Code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `FBI_Code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `IUCR` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `IUCR`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `Neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `Neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `Ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `Ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `Crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `Crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","community_area, crime, ward","ward.ward_office_address, community_area.community_area_no, crime.community_area_no, crime.ward_no, ward.ward_no, community_area.community_area_name","Community_Area, District, FBI_Code, IUCR, Neighborhood, Ward, Crime"
restaurant,Provide a list of restaurants from Marin county.,SELECT t1.label FROM generalinfo as t1 inner JOIN geographic as t2 ON t1.city = t2.city WHERE t2.county = 'marin county',"CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

CREATE TABLE `geographic` (
  city TEXT PRIMARY KEY,
  county TEXT,
  region TEXT
);
Sample rows from `geographic`:
alameda, alameda county, bay area
alamo, contra costa county, bay area
albany, alameda county, bay area

","CREATE TABLE `geographic` (
  city TEXT PRIMARY KEY,
  county TEXT,
  region TEXT
);
Sample rows from `geographic`:
alameda, alameda county, bay area
alamo, contra costa county, bay area
albany, alameda county, bay area

CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

","generalinfo, geographic","generalinfo.label, generalinfo.city, geographic.city, geographic.county","geographic, generalinfo, location"
shipping,Please list the destination cities of all the shipments ordered by S K L Enterprises Inc.,SELECT DISTINCT t3.city_name FROM customer as t1 inner JOIN shipment as t2 ON t1.cust_id = t2.cust_id inner JOIN city as t3 ON t3.city_id = t2.city_id WHERE t1.cust_name = 'S K L Enterprises Inc',"CREATE TABLE `customer` (
  cust_id INTEGER,
  cust_name TEXT,
  annual_revenue INTEGER,
  cust_type TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip REAL,
  phone TEXT
);
Sample rows from `customer`:
193, Advanced Fabricators, 39588651, manufacturer, 5141 Summit Boulevard, West Palm Beach, FL, 33415.0, (561) 683-3535
304, Pard's Trailer Sales, 17158109, wholesaler, 5910 South 300 West, Salt Lake City, UT, 84107.0, (801) 262-4864
314, Saar Enterprises, Inc., 47403613, retailer, 11687 192nd Street, Council Bluffs, IA, 51503.0, (712) 366-4929

CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

CREATE TABLE `city` (
  city_id INTEGER,
  city_name TEXT,
  state TEXT,
  population INTEGER,
  area REAL
);
Sample rows from `city`:
100, Union City, New Jersey, 67088, 1.3
101, Huntington Park, California, 61348, 3.0
102, Passaic, New Jersey, 67861, 3.1

","CREATE TABLE `city` (
  city_id INTEGER,
  city_name TEXT,
  state TEXT,
  population INTEGER,
  area REAL
);
Sample rows from `city`:
100, Union City, New Jersey, 67088, 1.3
101, Huntington Park, California, 61348, 3.0
102, Passaic, New Jersey, 67861, 3.1

CREATE TABLE `customer` (
  cust_id INTEGER,
  cust_name TEXT,
  annual_revenue INTEGER,
  cust_type TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip REAL,
  phone TEXT
);
Sample rows from `customer`:
193, Advanced Fabricators, 39588651, manufacturer, 5141 Summit Boulevard, West Palm Beach, FL, 33415.0, (561) 683-3535
304, Pard's Trailer Sales, 17158109, wholesaler, 5910 South 300 West, Salt Lake City, UT, 84107.0, (801) 262-4864
314, Saar Enterprises, Inc., 47403613, retailer, 11687 192nd Street, Council Bluffs, IA, 51503.0, (712) 366-4929

CREATE TABLE `driver` (
  driver_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip_code INTEGER,
  phone TEXT
);
Sample rows from `driver`:
20, Sue, Newell, 268 Richmond Ave, Memphis, TN, 38106, (901) 774-6569
21, Andrea, Simons, 3574 Oak Limb Cv, Memphis, TN, 38135, (901) 384-0984
22, Roger, McHaney, 1839 S Orleans St, Memphis, TN, 38106, (901) 948-1043

CREATE TABLE `truck` (
  truck_id INTEGER,
  make TEXT,
  model_year INTEGER
);
Sample rows from `truck`:
1, Peterbilt, 2005
2, Mack, 2006
3, Peterbilt, 2007

CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

","customer, shipment, city","city.city_name, customer.cust_id, shipment.cust_id, city.city_id, shipment.city_id, customer.cust_name","city, customer, driver, truck, shipment"
olympics,What is the region id of Christine Jacoba Aaftink?,SELECT t1.region_id FROM person_region as t1 inner JOIN person as t2 ON t1.person_id = t2.id WHERE t2.full_name = 'Christine Jacoba Aaftink',"CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

","CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `medal` (
  id INTEGER,
  medal_name TEXT
);
Sample rows from `medal`:
1, Gold
2, Silver
3, Bronze

CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `sport` (
  id INTEGER,
  sport_name TEXT
);
Sample rows from `sport`:
1, Aeronautics
2, Alpine Skiing
3, Alpinism

CREATE TABLE `event` (
  id INTEGER,
  sport_id INTEGER REFERENCES sport(id),
  event_name TEXT
);
Sample rows from `event`:
1, 9, Basketball Men's Basketball
2, 33, Judo Men's Extra-Lightweight
3, 25, Football Men's Football

CREATE TABLE `competitor_event` (
  event_id INTEGER REFERENCES event(id),
  competitor_id INTEGER REFERENCES games_competitor(id),
  medal_id INTEGER REFERENCES medal(id)
);
Sample rows from `competitor_event`:
1, 1, 4
2, 2, 4
3, 3, 4

","person_region, person","person_region.region_id, person_region.person_id, person.id, person.full_name","city, games, games_city, medal, noc_region, person, games_competitor, person_region, sport, event, competitor_event"
authors,"How many papers were published in 2011 in the journal whose short name is ""Mol Brain""?",SELECT COUNT(t2.id) FROM journal as t1 inner JOIN paper as t2 ON t1.id = t2.journalid WHERE t2.year = 2011 AND t1.shortname = 'Mol Brain',"CREATE TABLE `journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

","CREATE TABLE `Author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `Author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

CREATE TABLE `Conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

CREATE TABLE `Journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `Paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `Paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `PaperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `PaperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

","journal, paper","paper.id, journal.id, paper.journalid, paper.year, journal.shortname","Author, Conference, Journal, Paper, PaperAuthor"
public_review_platform,"For the user who gave the most number of long reviews, what is his/her averge ratings of all review?",SELECT cast(SUM(t1.review_stars) as real) / COUNT(t1.review_stars) FROM reviews as t1 inner JOIN users as t2 ON t1.user_id = t2.user_id WHERE t1.review_length LIKE 'Long' GROUP BY t1.user_id ORDER BY COUNT(t1.review_length) DESC LIMIT 1,"CREATE TABLE `reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","reviews, users","reviews.review_stars, reviews.user_id, users.user_id, reviews.review_length","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
regional_sales,Name of customers who have ordered Cocktail Glasses by online sales channel.,SELECt t FROM ( SELECt DistINCt case  when t3.`product name` = 'Cocktail Glasses' AND t2.`sales channel` = 'Online' tHEN t1.`customer names` end as t FROM customers t1 inner JOIN `sales orders` t2 ON t2._customerID = t1.customerID inner JOIN products t3 ON t3.productID = t2._productID ) WHERE t is NOt null,"CREATE TABLE `customers` (
  CustomerID INTEGER,
  Customer Names TEXT
);
Sample rows from `customers`:
1, Avon Corp
2, WakeFern 
3, Elorac, Corp

CREATE TABLE `sales orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `sales orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

CREATE TABLE `products` (
  ProductID INTEGER,
  Product Name TEXT
);
Sample rows from `products`:
1, Cookware
2, Photo Frames
3, Table Lamps

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  Customer Names TEXT
);
Sample rows from `Customers`:
1, Avon Corp
2, WakeFern 
3, Elorac, Corp

CREATE TABLE `Products` (
  ProductID INTEGER,
  Product Name TEXT
);
Sample rows from `Products`:
1, Cookware
2, Photo Frames
3, Table Lamps

CREATE TABLE `Regions` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `Regions`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `Sales Team` (
  SalesTeamID INTEGER,
  Sales Team TEXT,
  Region TEXT
);
Sample rows from `Sales Team`:
1, Adam Hernandez, Northeast
2, Keith Griffin, Northeast
3, Jerry Green, West

CREATE TABLE `Store Locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `Store Locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

CREATE TABLE `Sales Orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `Sales Orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

","customers, sales orders, products","products.product name, sales orders.sales channel, customers.customer names, sales orders._customerID, customers.customerID, products.productID, sales orders._productID","Customers, Products, Regions, Sales Team, Store Locations, Sales Orders"
regional_sales,To which region does the sales team that has used the WARE-MKL1006 warehouse the most times for its shipments belong?,SELECT t2.region FROM `sales orders` as t1 inner JOIN `sales team` as t2 ON t2.salesteamID = t1._salesteamID WHERE t1.warehousecode = 'WARE-MKL1006' GROUP BY t2.region ORDER BY COUNT(t1.ordernumber) DESC LIMIT 1,"CREATE TABLE `sales orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `sales orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

CREATE TABLE `sales team` (
  SalesTeamID INTEGER,
  Sales Team TEXT,
  Region TEXT
);
Sample rows from `sales team`:
1, Adam Hernandez, Northeast
2, Keith Griffin, Northeast
3, Jerry Green, West

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  Customer Names TEXT
);
Sample rows from `Customers`:
1, Avon Corp
2, WakeFern 
3, Elorac, Corp

CREATE TABLE `Products` (
  ProductID INTEGER,
  Product Name TEXT
);
Sample rows from `Products`:
1, Cookware
2, Photo Frames
3, Table Lamps

CREATE TABLE `Regions` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `Regions`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `Sales Team` (
  SalesTeamID INTEGER,
  Sales Team TEXT,
  Region TEXT
);
Sample rows from `Sales Team`:
1, Adam Hernandez, Northeast
2, Keith Griffin, Northeast
3, Jerry Green, West

CREATE TABLE `Store Locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `Store Locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

CREATE TABLE `Sales Orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `Sales Orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

","sales orders, sales team","sales team.region, sales team.salesteamID, sales orders._salesteamID, sales orders.warehousecode, sales orders.ordernumber","Customers, Products, Regions, Sales Team, Store Locations, Sales Orders"
image_and_language,How many images have an x-coordinate of 5 and y-coordinate of 5?,SELECT COUNT(img_id) FROM img_obj WHERE x = 5 AND y = 5,"CREATE TABLE `img_obj` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `img_obj`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

","CREATE TABLE `ATT_CLASSES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `ATT_CLASSES`:
0, building s
1, indoors
2, cluttered

CREATE TABLE `OBJ_CLASSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLASSES`:
0, awning
1, goggles
2, dot

CREATE TABLE `IMG_OBJ` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `IMG_OBJ`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `IMG_OBJ_ATT` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_OBJ_ATT`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `PRED_CLASSES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `PRED_CLASSES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `IMG_REL` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_REL`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

",img_obj,"img_id, x, y","ATT_CLASSES, OBJ_CLASSES, IMG_OBJ, IMG_OBJ_ATT, PRED_CLASSES, IMG_REL"
public_review_platform,How many business have low check-in on Sunday at 10AM?,SELECT COUNT(t2.business_id) FROM days as t1 inner JOIN checkins as t2 ON t1.day_id = t2.day_id WHERE t1.day_of_week = 'Sunday' AND t2.label_time_10 = 'Low',"CREATE TABLE `days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","days, checkins","checkins.business_id, days.day_id, checkins.day_id, days.day_of_week, checkins.label_time_10","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
retail_world,Indicate which company is located in France?,SELECT companyname FROM customers WHERE country = 'France',"CREATE TABLE `customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

",customers,"companyname, country","sqlite_sequence, Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails"
music_platform_2,"What is the category for the ""Moist Boys"" podcast?",SELECT category FROM categories WHERE podcast_id IN ( SELECT podcast_id FROM podcasts WHERE title = 'Moist Boys' ),"CREATE TABLE `categories` (
  podcast_id TEXT PRIMARY KEY REFERENCES podcasts(None),
  category TEXT PRIMARY KEY
);
Sample rows from `categories`:
c61aa81c9b929a66f0c1db6cbe5d8548, arts
c61aa81c9b929a66f0c1db6cbe5d8548, arts-performing-arts
c61aa81c9b929a66f0c1db6cbe5d8548, music

CREATE TABLE `podcasts` (
  podcast_id TEXT PRIMARY KEY,
  itunes_id INTEGER,
  slug TEXT,
  itunes_url TEXT,
  title TEXT
);
Sample rows from `podcasts`:
a00018b54eb342567c94dacfb2a3e504, 1313466221, scaling-global, https://podcasts.apple.com/us/podcast/scaling-global/id1313466221, Scaling Global
a00043d34e734b09246d17dc5d56f63c, 158973461, cornerstone-baptist-church-of-orlando, https://podcasts.apple.com/us/podcast/cornerstone-baptist-church-of-orlando/id158973461, Cornerstone Baptist Church of Orlando
a0004b1ef445af9dc84dad1e7821b1e3, 139076942, mystery-dancing-in-the-dark, https://podcasts.apple.com/us/podcast/mystery-dancing-in-the-dark/id139076942, Mystery: Dancing in the Dark

","CREATE TABLE `runs` (
  run_at TEXT,
  max_rowid INTEGER,
  reviews_added INTEGER
);
Sample rows from `runs`:
2021-05-10 02:53:00, 3266481, 1215223
2021-06-06 21:34:36, 3300773, 13139
2021-07-02 18:04:55, 3329699, 11561

CREATE TABLE `podcasts` (
  podcast_id TEXT PRIMARY KEY,
  itunes_id INTEGER,
  slug TEXT,
  itunes_url TEXT,
  title TEXT
);
Sample rows from `podcasts`:
a00018b54eb342567c94dacfb2a3e504, 1313466221, scaling-global, https://podcasts.apple.com/us/podcast/scaling-global/id1313466221, Scaling Global
a00043d34e734b09246d17dc5d56f63c, 158973461, cornerstone-baptist-church-of-orlando, https://podcasts.apple.com/us/podcast/cornerstone-baptist-church-of-orlando/id158973461, Cornerstone Baptist Church of Orlando
a0004b1ef445af9dc84dad1e7821b1e3, 139076942, mystery-dancing-in-the-dark, https://podcasts.apple.com/us/podcast/mystery-dancing-in-the-dark/id139076942, Mystery: Dancing in the Dark

CREATE TABLE `reviews` (
  podcast_id TEXT REFERENCES podcasts(None),
  title TEXT,
  content TEXT,
  rating INTEGER,
  author_id TEXT,
  created_at TEXT
);
Sample rows from `reviews`:
c61aa81c9b929a66f0c1db6cbe5d8548, really interesting!, Thanks for providing these insights.  Really enjoy the variety and depth -- please keep them coming!, 5, F7E5A318989779D, 2018-04-24T12:05:16-07:00
c61aa81c9b929a66f0c1db6cbe5d8548, Must listen for anyone interested in the arts!!!, Super excited to see this podcast grow. So many fun topics to talk about...Shari is really engaging. Definitely subscribing and would recommend to anyone interested in the arts!!, 5, F6BF5472689BD12, 2018-05-09T18:14:32-07:00
ad4f2bf69c72b8db75978423c25f379e, nauseatingly left, I'm a liberal myself, but its pretty obvious and annoying that they're trying to push their beliefs on the listeners. Get a more politically diverse production staff, we like to see issues from multiple point of views not just yours., 1, 1AB95B8E6E1309E, 2019-06-11T14:53:39-07:00

CREATE TABLE `categories` (
  podcast_id TEXT PRIMARY KEY REFERENCES podcasts(None),
  category TEXT PRIMARY KEY
);
Sample rows from `categories`:
c61aa81c9b929a66f0c1db6cbe5d8548, arts
c61aa81c9b929a66f0c1db6cbe5d8548, arts-performing-arts
c61aa81c9b929a66f0c1db6cbe5d8548, music

","categories, podcasts","category, podcast_id, title","runs, podcasts, reviews, categories"
movie,How many movies has the highest networth actor acted in?,"SELECT COUNT(*) FROM characters as t1 inner JOIN actor as t2 ON t1.actorid = t2.actorid WHERE CasT(replace(replace(t2.networth, ',', ''), '$', '') as real) = ( SELECT MAX(CasT(replace(replace(networth, ',', ''), '$', '') as real)) FROM actor)","CREATE TABLE `characters` (
  MovieID INTEGER PRIMARY KEY REFERENCES movie(MovieID),
  ActorID INTEGER PRIMARY KEY REFERENCES actor(ActorID),
  Character Name TEXT,
  creditOrder INTEGER,
  pay TEXT,
  screentime TEXT
);
Sample rows from `characters`:
1, 1, James, 1, None, None
1, 2, Mollie, 2, None, None
1, 3, Rosie, 3, None, None

CREATE TABLE `actor` (
  ActorID INTEGER,
  Name TEXT,
  Date of Birth DATE,
  Birth City TEXT,
  Birth Country TEXT,
  Height (Inches) INTEGER,
  Biography TEXT,
  Gender TEXT,
  Ethnicity TEXT,
  NetWorth TEXT
);
Sample rows from `actor`:
1, John Travolta, 1954-02-18, Englewood, USA, 74, John Joseph Travolta was born in Englewood, New Jersey, one of six children of Helen Travolta (n�e Helen Cecilia Burke) and Salvatore/Samuel J. Travolta. His father was of Italian descent and his mother was of Irish ancestry. His father owned a tire repair shop called Travolta Tires in Hillsdale, NJ. Travolta started acting appearing in a local ..., Male, White, $250,000,000.00
2, Kirstie Alley, 1951-01-12, Wichita, USA, 67, None, Female, White, $40,000,000.00
3, Olympia Dukakis, 1931-06-20, Lowell, USA, 63, Long a vital, respected lady of the classic and contemporary stage this grand lady did not become a household name and sought-after film actress until age 56 when she turned in a glorious, Oscar-winning perf as Cher's sardonic mother in the romantic comedy Moonstruck (1987). Since then movie (and TV) fans have discovered what the East coast ..., Female, White, $6,000,000.00

","CREATE TABLE `actor` (
  ActorID INTEGER,
  Name TEXT,
  Date of Birth DATE,
  Birth City TEXT,
  Birth Country TEXT,
  Height (Inches) INTEGER,
  Biography TEXT,
  Gender TEXT,
  Ethnicity TEXT,
  NetWorth TEXT
);
Sample rows from `actor`:
1, John Travolta, 1954-02-18, Englewood, USA, 74, John Joseph Travolta was born in Englewood, New Jersey, one of six children of Helen Travolta (n�e Helen Cecilia Burke) and Salvatore/Samuel J. Travolta. His father was of Italian descent and his mother was of Irish ancestry. His father owned a tire repair shop called Travolta Tires in Hillsdale, NJ. Travolta started acting appearing in a local ..., Male, White, $250,000,000.00
2, Kirstie Alley, 1951-01-12, Wichita, USA, 67, None, Female, White, $40,000,000.00
3, Olympia Dukakis, 1931-06-20, Lowell, USA, 63, Long a vital, respected lady of the classic and contemporary stage this grand lady did not become a household name and sought-after film actress until age 56 when she turned in a glorious, Oscar-winning perf as Cher's sardonic mother in the romantic comedy Moonstruck (1987). Since then movie (and TV) fans have discovered what the East coast ..., Female, White, $6,000,000.00

CREATE TABLE `movie` (
  MovieID INTEGER,
  Title TEXT,
  MPAA Rating TEXT,
  Budget INTEGER,
  Gross INTEGER,
  Release Date TEXT,
  Genre TEXT,
  Runtime INTEGER,
  Rating REAL,
  Rating Count INTEGER,
  Summary TEXT
);
Sample rows from `movie`:
1, Look Who's Talking, PG-13, 7500000, 296000000, 1989-10-12, Romance, 93, 5.9, 73638, After a single, career-minded woman is left on her own to give birth to the child of a married man, she finds a new romantic chance in a cab driver. Meanwhile, the point-of-view of the newborn boy is narrated through voice-over.
2, Driving Miss Daisy, PG, 7500000, 145793296, 1989-12-13, Comedy, 99, 7.4, 91075, An old Jewish woman and her African-American chauffeur in the American South have a relationship that grows and improves over the years.
3, Turner & Hooch, PG, 13000000, 71079915, 1989-07-28, Crime, 100, 7.2, 91415, Det. Scott Turner (Tom Hanks) is an uptight, by-the-book police officer. When his friend Amos Reed (John McIntire), the proprietor of a junkyard, is killed, Turner reluctantly inherits the man's dog. Turner adjusts to life with the dog to help solve a murder case.

CREATE TABLE `characters` (
  MovieID INTEGER PRIMARY KEY REFERENCES movie(MovieID),
  ActorID INTEGER PRIMARY KEY REFERENCES actor(ActorID),
  Character Name TEXT,
  creditOrder INTEGER,
  pay TEXT,
  screentime TEXT
);
Sample rows from `characters`:
1, 1, James, 1, None, None
1, 2, Mollie, 2, None, None
1, 3, Rosie, 3, None, None

","characters, actor","characters.actorid, actor.actorid, actor.networth, networth","actor, movie, characters"
simpson_episodes,Which episode ids are rated 5 stars and have more than 100 votes?,SELECT episode_id FROM vote WHERE stars = 5 AND votes > 100;,"CREATE TABLE `vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

",vote,"episode_id, stars, votes","Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
restaurant,Which region has the highest number of restaurants?,SELECT t1.region FROM geographic as t1 inner JOIN location as t2 ON t1.city = t2.city GROUP BY t1.region ORDER BY COUNT(t2.id_restaurant) DESC LIMIT 1,"CREATE TABLE `geographic` (
  city TEXT PRIMARY KEY,
  county TEXT,
  region TEXT
);
Sample rows from `geographic`:
alameda, alameda county, bay area
alamo, contra costa county, bay area
albany, alameda county, bay area

CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

","CREATE TABLE `geographic` (
  city TEXT PRIMARY KEY,
  county TEXT,
  region TEXT
);
Sample rows from `geographic`:
alameda, alameda county, bay area
alamo, contra costa county, bay area
albany, alameda county, bay area

CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

","geographic, location","geographic.region, geographic.city, location.city, location.id_restaurant","geographic, generalinfo, location"
simpson_episodes,List the name of persons who were not included in the credit for the 'How the Test Was Won' episode.,SELECT t2.person FROM episode as t1 inner JOIN credit as t2 ON t1.episode_id = t2.episode_id WHERE t1.title = 'How the Test Was Won' AND t2.credited = 'false';,"CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","episode, credit","credit.person, episode.episode_id, credit.episode_id, episode.title, credit.credited","Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
codebase_comments,"What is the tokenized name of the solution whose path is ""maravillas_linq-to-delicious\tasty.sln""?",SELECT DISTINCT t2.nametokenized FROM solution as t1 inner JOIN method as t2 ON t1.id = t2.solutionid WHERE t1.path = 'maravillas_linq-to-delicious',"CREATE TABLE `solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

CREATE TABLE `method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Method, 10860640
MethodParameter, 17514858
Repo, 156550

CREATE TABLE `Method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `Method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

CREATE TABLE `MethodParameter` (
  Id INTEGER,
  MethodId TEXT,
  Type TEXT,
  Name TEXT
);
Sample rows from `MethodParameter`:
1, 1, System.String, data
2, 2, System.Int32, i
3, 2, System.Int32, declstartpos

CREATE TABLE `Repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `Repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

CREATE TABLE `Solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `Solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

","solution, method","method.nametokenized, solution.id, method.solutionid, solution.path","sqlite_sequence, Method, MethodParameter, Repo, Solution"
music_tracker,"Among the artists from 1980 to 1982. Which artist was tagged as ""disco""?",SELECT t1.artist FROM torrents as t1 inner JOIN tags as t2 ON t1.id = t2.id WHERE t2.tag = 'disco' AND t1.groupyear BETWEEN 1980 AND 1982,"CREATE TABLE `torrents` (
  groupName TEXT,
  totalSnatched INTEGER,
  artist TEXT,
  groupYear INTEGER,
  releaseType TEXT,
  groupId INTEGER,
  id INTEGER
);
Sample rows from `torrents`:
superappin&#39;, 239, grandmaster flash & the furious five, 1979, single, 720949, 0
spiderap / a corona jam, 156, ron hunt & ronnie g & the sm crew, 1979, single, 728752, 1
rapper&#39;s delight, 480, sugarhill gang, 1979, single, 18513, 2

CREATE TABLE `tags` (
  index INTEGER PRIMARY KEY,
  id INTEGER REFERENCES torrents(None),
  tag TEXT
);
Sample rows from `tags`:
0, 0, 1970s
1, 0, funk
2, 0, disco

","CREATE TABLE `torrents` (
  groupName TEXT,
  totalSnatched INTEGER,
  artist TEXT,
  groupYear INTEGER,
  releaseType TEXT,
  groupId INTEGER,
  id INTEGER
);
Sample rows from `torrents`:
superappin&#39;, 239, grandmaster flash & the furious five, 1979, single, 720949, 0
spiderap / a corona jam, 156, ron hunt & ronnie g & the sm crew, 1979, single, 728752, 1
rapper&#39;s delight, 480, sugarhill gang, 1979, single, 18513, 2

CREATE TABLE `tags` (
  index INTEGER PRIMARY KEY,
  id INTEGER REFERENCES torrents(None),
  tag TEXT
);
Sample rows from `tags`:
0, 0, 1970s
1, 0, funk
2, 0, disco

","torrents, tags","torrents.artist, torrents.id, tags.id, tags.tag, torrents.groupyear","torrents, tags"
bike_share_1,"Among the bike trips started on the days with a fog in 2013, how many of those trips started from the station ""2nd at Townsend""?",SELECT COUNT(t1.start_station_name) FROM trip as t1 inner JOIN weather as t2 ON t2.zip_code = t1.zip_code WHERE t2.date LIKE '%2013%' AND t2.events = 'Fog' AND t1.start_station_name = '2nd at Townsend' AND t2.zip_code = 94107,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);
Sample rows from `trip`:
4069, 174, 8/29/2013 9:08, 2nd at South Park, 64, 8/29/2013 9:11, 2nd at South Park, 64, 288, Subscriber, 94114
4073, 1067, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:42, San Francisco Caltrain 2 (330 Townsend), 69, 321, Subscriber, 94703
4074, 1131, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:43, San Francisco Caltrain 2 (330 Townsend), 69, 317, Subscriber, 94115

CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches REAL,
  mean_sea_level_pressure_inches REAL,
  min_sea_level_pressure_inches REAL,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches TEXT,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code TEXT
);
Sample rows from `weather`:
8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107
8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30.0, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107
8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30.0, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107

","CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat REAL,
  long REAL,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);
Sample rows from `station`:
2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013
3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013
4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013

CREATE TABLE `status` (
  station_id INTEGER,
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);
Sample rows from `status`:
2, 2, 25, 2013/08/29 12:06:01
2, 2, 25, 2013/08/29 12:07:01
2, 2, 25, 2013/08/29 12:08:01

CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);
Sample rows from `trip`:
4069, 174, 8/29/2013 9:08, 2nd at South Park, 64, 8/29/2013 9:11, 2nd at South Park, 64, 288, Subscriber, 94114
4073, 1067, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:42, San Francisco Caltrain 2 (330 Townsend), 69, 321, Subscriber, 94703
4074, 1131, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:43, San Francisco Caltrain 2 (330 Townsend), 69, 317, Subscriber, 94115

CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches REAL,
  mean_sea_level_pressure_inches REAL,
  min_sea_level_pressure_inches REAL,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches TEXT,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code TEXT
);
Sample rows from `weather`:
8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107
8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30.0, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107
8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30.0, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107

","trip, weather","trip.start_station_name, weather.zip_code, trip.zip_code, weather.date, weather.events","station, status, trip, weather"
cars,What are the names of the cars worth 20000?,SELECT t1.car_name FROM data as t1 inner JOIN price as t2 ON t1.id = t2.id WHERE t2.price = 20000,"CREATE TABLE `data` (
  ID INTEGER REFERENCES price(ID),
  mpg REAL,
  cylinders INTEGER,
  displacement REAL,
  horsepower INTEGER,
  weight INTEGER,
  acceleration REAL,
  model INTEGER,
  car_name TEXT
);
Sample rows from `data`:
1, 18.0, 8, 307.0, 130, 3504, 12.0, 70, chevrolet chevelle malibu
2, 15.0, 8, 350.0, 165, 3693, 11.5, 70, buick skylark 320
3, 18.0, 8, 318.0, 150, 3436, 11.0, 70, plymouth satellite

CREATE TABLE `price` (
  ID INTEGER,
  price REAL
);
Sample rows from `price`:
1, 25561.59078
2, 24221.42273
3, 27240.84373

","CREATE TABLE `country` (
  origin INTEGER,
  country TEXT
);
Sample rows from `country`:
1, USA
2, Europe
3, Japan

CREATE TABLE `price` (
  ID INTEGER,
  price REAL
);
Sample rows from `price`:
1, 25561.59078
2, 24221.42273
3, 27240.84373

CREATE TABLE `data` (
  ID INTEGER REFERENCES price(ID),
  mpg REAL,
  cylinders INTEGER,
  displacement REAL,
  horsepower INTEGER,
  weight INTEGER,
  acceleration REAL,
  model INTEGER,
  car_name TEXT
);
Sample rows from `data`:
1, 18.0, 8, 307.0, 130, 3504, 12.0, 70, chevrolet chevelle malibu
2, 15.0, 8, 350.0, 165, 3693, 11.5, 70, buick skylark 320
3, 18.0, 8, 318.0, 150, 3436, 11.0, 70, plymouth satellite

CREATE TABLE `production` (
  ID INTEGER PRIMARY KEY REFERENCES price(ID) REFERENCES data(ID),
  model_year INTEGER PRIMARY KEY,
  country INTEGER REFERENCES country(origin)
);
Sample rows from `production`:
1, 1970, 1
1, 1971, 1
2, 1970, 1

","data, price","data.car_name, data.id, price.id, price.price","country, price, data, production"
menu,List down the name of dishes that were positioned on the left upper corner.,SELECT t1.name FROM dish as t1 inner JOIN menuitem as t2 ON t1.id = t2.dish_id WHERE t2.xpos < 0.25 AND t2.ypos < 0.25,"CREATE TABLE `dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

CREATE TABLE `menuitem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `menuitem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

","CREATE TABLE `Dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `Dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

CREATE TABLE `Menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `Menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

CREATE TABLE `MenuPage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `MenuPage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

CREATE TABLE `MenuItem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `MenuItem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

","dish, menuitem","dish.name, dish.id, menuitem.dish_id, menuitem.xpos, menuitem.ypos","Dish, Menu, MenuPage, MenuItem"
shipping,What is the first name of the driver who transported shipment id 1028?,"SELECT t2.first_name, t2.last_name FROM shipment as t1 inner JOIN driver as t2 ON t1.driver_id = t2.driver_id WHERE t1.ship_id = 1028","CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

CREATE TABLE `driver` (
  driver_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip_code INTEGER,
  phone TEXT
);
Sample rows from `driver`:
20, Sue, Newell, 268 Richmond Ave, Memphis, TN, 38106, (901) 774-6569
21, Andrea, Simons, 3574 Oak Limb Cv, Memphis, TN, 38135, (901) 384-0984
22, Roger, McHaney, 1839 S Orleans St, Memphis, TN, 38106, (901) 948-1043

","CREATE TABLE `city` (
  city_id INTEGER,
  city_name TEXT,
  state TEXT,
  population INTEGER,
  area REAL
);
Sample rows from `city`:
100, Union City, New Jersey, 67088, 1.3
101, Huntington Park, California, 61348, 3.0
102, Passaic, New Jersey, 67861, 3.1

CREATE TABLE `customer` (
  cust_id INTEGER,
  cust_name TEXT,
  annual_revenue INTEGER,
  cust_type TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip REAL,
  phone TEXT
);
Sample rows from `customer`:
193, Advanced Fabricators, 39588651, manufacturer, 5141 Summit Boulevard, West Palm Beach, FL, 33415.0, (561) 683-3535
304, Pard's Trailer Sales, 17158109, wholesaler, 5910 South 300 West, Salt Lake City, UT, 84107.0, (801) 262-4864
314, Saar Enterprises, Inc., 47403613, retailer, 11687 192nd Street, Council Bluffs, IA, 51503.0, (712) 366-4929

CREATE TABLE `driver` (
  driver_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip_code INTEGER,
  phone TEXT
);
Sample rows from `driver`:
20, Sue, Newell, 268 Richmond Ave, Memphis, TN, 38106, (901) 774-6569
21, Andrea, Simons, 3574 Oak Limb Cv, Memphis, TN, 38135, (901) 384-0984
22, Roger, McHaney, 1839 S Orleans St, Memphis, TN, 38106, (901) 948-1043

CREATE TABLE `truck` (
  truck_id INTEGER,
  make TEXT,
  model_year INTEGER
);
Sample rows from `truck`:
1, Peterbilt, 2005
2, Mack, 2006
3, Peterbilt, 2007

CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

","shipment, driver","driver.first_name, driver.last_name, shipment.driver_id, driver.driver_id, shipment.ship_id","city, customer, driver, truck, shipment"
simpson_episodes,Write down the summary of episode whereby it has crew members that are not included in the credit list.,SELECT t1.summary FROM episode as t1 inner JOIN credit as t2 ON t1.episode_id = t2.episode_id WHERE t2.credited = 'false';,"CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","episode, credit","episode.summary, episode.episode_id, credit.episode_id, credit.credited","Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
menu,What is the event sponsored by the Republican House?,SELECT event FROM menu WHERE sponsor = 'REPUBLICAN HOUSE',"CREATE TABLE `menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

","CREATE TABLE `Dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `Dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

CREATE TABLE `Menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `Menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

CREATE TABLE `MenuPage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `MenuPage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

CREATE TABLE `MenuItem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `MenuItem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

",menu,"event, sponsor","Dish, Menu, MenuPage, MenuItem"
video_games,What are the names of games that were released in 2007?,SELECT t3.game_name FROM game_platform as t1 inner JOIN game_publisher as t2 ON t1.game_publisher_id = t2.id inner JOIN game as t3 ON t2.game_id = t3.id WHERE t1.release_year = 2007,"CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

","CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

","game_platform, game_publisher, game","game.game_name, game_platform.game_publisher_id, game_publisher.id, game_publisher.game_id, game.id, game_platform.release_year","genre, game, platform, publisher, game_publisher, game_platform, region, region_sales"
world,"In English speaking countries, provide the difference between the number of countries with republic and constitutional monarchy as its government form.",SELECT COUNT(t1.governmentform = 'Republic') - COUNT(t1.governmentform = 'ConstitutionalMonarchy') FROM country as t1 inner JOIN countrylanguage as t2 ON t1.code = t2.countrycode WHERE t2.language = 'English',"CREATE TABLE `country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

CREATE TABLE `countrylanguage` (
  CountryCode TEXT PRIMARY KEY REFERENCES Country(Code),
  Language TEXT PRIMARY KEY,
  IsOfficial TEXT,
  Percentage REAL
);
Sample rows from `countrylanguage`:
ABW, Dutch, T, 5.3
ABW, English, F, 9.5
ABW, Papiamento, F, 76.7

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
City, 4079

CREATE TABLE `City` (
  ID INTEGER,
  Name TEXT,
  CountryCode TEXT REFERENCES Country(Code),
  District TEXT,
  Population INTEGER
);
Sample rows from `City`:
1, Kabul, AFG, Kabol, 1780000
2, Qandahar, AFG, Qandahar, 237500
3, Herat, AFG, Herat, 186800

CREATE TABLE `Country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `Country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

CREATE TABLE `CountryLanguage` (
  CountryCode TEXT PRIMARY KEY REFERENCES Country(Code),
  Language TEXT PRIMARY KEY,
  IsOfficial TEXT,
  Percentage REAL
);
Sample rows from `CountryLanguage`:
ABW, Dutch, T, 5.3
ABW, English, F, 9.5
ABW, Papiamento, F, 76.7

","country, countrylanguage","country.governmentform, country.code, countrylanguage.countrycode, countrylanguage.language","sqlite_sequence, City, Country, CountryLanguage"
world,List any five countries which use English as an official language.,SELECt t1.name FROM country as t1 inner JOIN countrylanguage as t2 ON t1.code = t2.countrycode WHERE t2.language = 'English' AND t2.isofficial = 't' LIMIt 5,"CREATE TABLE `country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

CREATE TABLE `countrylanguage` (
  CountryCode TEXT PRIMARY KEY REFERENCES Country(Code),
  Language TEXT PRIMARY KEY,
  IsOfficial TEXT,
  Percentage REAL
);
Sample rows from `countrylanguage`:
ABW, Dutch, T, 5.3
ABW, English, F, 9.5
ABW, Papiamento, F, 76.7

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
City, 4079

CREATE TABLE `City` (
  ID INTEGER,
  Name TEXT,
  CountryCode TEXT REFERENCES Country(Code),
  District TEXT,
  Population INTEGER
);
Sample rows from `City`:
1, Kabul, AFG, Kabol, 1780000
2, Qandahar, AFG, Qandahar, 237500
3, Herat, AFG, Herat, 186800

CREATE TABLE `Country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `Country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

CREATE TABLE `CountryLanguage` (
  CountryCode TEXT PRIMARY KEY REFERENCES Country(Code),
  Language TEXT PRIMARY KEY,
  IsOfficial TEXT,
  Percentage REAL
);
Sample rows from `CountryLanguage`:
ABW, Dutch, T, 5.3
ABW, English, F, 9.5
ABW, Papiamento, F, 76.7

","country, countrylanguage","country.name, country.code, countrylanguage.countrycode, countrylanguage.language, countrylanguage.isofficial","sqlite_sequence, City, Country, CountryLanguage"
law_episode,"What is the date of birth of the actor who played the role of a ""writer""?",SELECT t2.birthdate FROM award as t1 inner JOIN person as t2 ON t1.person_id = t2.person_id WHERE t1.role = 'writer',"CREATE TABLE `award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  series TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  person_id TEXT REFERENCES Person(person_id),
  role TEXT,
  result TEXT
);
Sample rows from `award`:
258, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0937725, None, Winner
259, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0792309, None, Winner
260, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0049569, None, Winner

CREATE TABLE `person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
tt0629239, nun
tt0629239, priest
tt0629420, police officer

CREATE TABLE `Person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  series TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  person_id TEXT REFERENCES Person(person_id),
  role TEXT,
  result TEXT
);
Sample rows from `Award`:
258, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0937725, None, Winner
259, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0792309, None, Winner
260, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0049569, None, Winner

CREATE TABLE `Credit` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  person_id TEXT PRIMARY KEY REFERENCES Person(person_id),
  category TEXT,
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
tt0629204, nm0226352, Additional Crew, technical advisor, true
tt0629204, nm0506974, Additional Crew, production accountant, true
tt0629204, nm4103116, Additional Crew, production accountant, true

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
tt0629204, 10, 36, 17.7
tt0629204, 9, 39, 19.2
tt0629204, 8, 64, 31.5

","award, person","person.birthdate, award.person_id, person.person_id, award.role","Episode, Keyword, Person, Award, Credit, Vote"
simpson_episodes,"Find the winning rate of award in 2010. Describe the winner name, award name, episode title and role of the winner in that episode.","SELECT t3.rate, t4.person, t4.award, t5.title, t4.role FROM ( SELECT cast(SUM(case when t1.result = 'Winner' then 1 else 0 end) as real) / SUM(case when t1.result IN ('Winner', 'Nominee') then 1 else 0 end) as rate , t1.person, t1.award, t2.title, t1.role FROM award as t1 inner JOIN episode as t2 ON t1.episode_id = t2.episode_id WHERE substr(t1.year, 1, 4) = '2010' ) as t3 inner JOIN award as t4 inner JOIN episode as t5 ON t4.episode_id = t5.episode_id WHERE t4.year = 2010 AND t4.result = 'Winner';","CREATE TABLE `award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","award, episode","award.result, award.person, award.award, episode.title, award.role, award.episode_id, episode.episode_id, award.year","Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
chicago_crime,How many domestic violence cases were reported in May 2018?,SELECT COUNT(*) FROM crime WHERE date LIKE '5/%/2018%' AND domestic = 'TRUE',"CREATE TABLE `crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","CREATE TABLE `Community_Area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `Community_Area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `District` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `District`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `FBI_Code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `FBI_Code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `IUCR` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `IUCR`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `Neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `Neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `Ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `Ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `Crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `Crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

",crime,domestic,"Community_Area, District, FBI_Code, IUCR, Neighborhood, Ward, Crime"
bike_share_1,What is the total trip duration made within Palo Alto city? Convert the duration to hour.,SELECT cast(SUM(t1.duration) as real) / 3600 FROM trip as t1 left JOIN station as t2 ON t2.name = t1.start_station_name WHERE t2.city = 'Palo Alto',"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);
Sample rows from `trip`:
4069, 174, 8/29/2013 9:08, 2nd at South Park, 64, 8/29/2013 9:11, 2nd at South Park, 64, 288, Subscriber, 94114
4073, 1067, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:42, San Francisco Caltrain 2 (330 Townsend), 69, 321, Subscriber, 94703
4074, 1131, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:43, San Francisco Caltrain 2 (330 Townsend), 69, 317, Subscriber, 94115

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat REAL,
  long REAL,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);
Sample rows from `station`:
2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013
3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013
4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013

","CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat REAL,
  long REAL,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);
Sample rows from `station`:
2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013
3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013
4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013

CREATE TABLE `status` (
  station_id INTEGER,
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);
Sample rows from `status`:
2, 2, 25, 2013/08/29 12:06:01
2, 2, 25, 2013/08/29 12:07:01
2, 2, 25, 2013/08/29 12:08:01

CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);
Sample rows from `trip`:
4069, 174, 8/29/2013 9:08, 2nd at South Park, 64, 8/29/2013 9:11, 2nd at South Park, 64, 288, Subscriber, 94114
4073, 1067, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:42, San Francisco Caltrain 2 (330 Townsend), 69, 321, Subscriber, 94703
4074, 1131, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:43, San Francisco Caltrain 2 (330 Townsend), 69, 317, Subscriber, 94115

CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches REAL,
  mean_sea_level_pressure_inches REAL,
  min_sea_level_pressure_inches REAL,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches TEXT,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code TEXT
);
Sample rows from `weather`:
8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107
8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30.0, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107
8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30.0, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107

","trip, station","trip.duration, station.name, trip.start_station_name, station.city","station, status, trip, weather"
codebase_comments,What format does the method number 8's comment have?,SELECT case when commentisxml = 0 then 'isNotXMLFormat' when commentisxml = 1 then 'isXMLFormat' end format FROM method WHERE id = 8,"CREATE TABLE `method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Method, 10860640
MethodParameter, 17514858
Repo, 156550

CREATE TABLE `Method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `Method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

CREATE TABLE `MethodParameter` (
  Id INTEGER,
  MethodId TEXT,
  Type TEXT,
  Name TEXT
);
Sample rows from `MethodParameter`:
1, 1, System.String, data
2, 2, System.Int32, i
3, 2, System.Int32, declstartpos

CREATE TABLE `Repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `Repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

CREATE TABLE `Solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `Solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

",method,"commentisxml, format, id","sqlite_sequence, Method, MethodParameter, Repo, Solution"
movielens,Please list the actor IDs whose movies have the newest published date.,SELECT t1.actorid FROM movies2actors as t1 inner JOIN movies as t2 ON t1.movieid = t2.movieid WHERE t2.year = 4,"CREATE TABLE `movies2actors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  actorid INTEGER PRIMARY KEY REFERENCES actors(None),
  cast_num INTEGER
);
Sample rows from `movies2actors`:
1672580, 981535, 0
1672946, 1094968, 0
1673647, 149985, 0

CREATE TABLE `movies` (
  movieid INTEGER,
  year INTEGER,
  isEnglish TEXT,
  country TEXT,
  runningtime INTEGER
);
Sample rows from `movies`:
1672052, 3, T, other, 2
1672111, 4, T, other, 2
1672580, 4, T, USA, 3

","CREATE TABLE `users` (
  userid INTEGER,
  age TEXT,
  u_gender TEXT,
  occupation TEXT
);
Sample rows from `users`:
1, 1, F, 2
2, 56, M, 3
3, 25, M, 2

CREATE TABLE `directors` (
  directorid INTEGER,
  d_quality INTEGER PRIMARY KEY,
  avg_revenue INTEGER PRIMARY KEY
);
Sample rows from `directors`:
67, 4, 1
92, 2, 3
284, 4, 0

CREATE TABLE `actors` (
  actorid INTEGER,
  a_gender TEXT,
  a_quality INTEGER
);
Sample rows from `actors`:
4, M, 4
16, M, 0
28, M, 4

CREATE TABLE `movies` (
  movieid INTEGER,
  year INTEGER,
  isEnglish TEXT,
  country TEXT,
  runningtime INTEGER
);
Sample rows from `movies`:
1672052, 3, T, other, 2
1672111, 4, T, other, 2
1672580, 4, T, USA, 3

CREATE TABLE `movies2actors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  actorid INTEGER PRIMARY KEY REFERENCES actors(None),
  cast_num INTEGER
);
Sample rows from `movies2actors`:
1672580, 981535, 0
1672946, 1094968, 0
1673647, 149985, 0

CREATE TABLE `movies2directors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  directorid INTEGER PRIMARY KEY REFERENCES directors(None),
  genre TEXT
);
Sample rows from `movies2directors`:
1672111, 54934, Action
1672946, 188940, Action
1679461, 179783, Action

CREATE TABLE `u2base` (
  userid INTEGER PRIMARY KEY REFERENCES users(None),
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  rating TEXT
);
Sample rows from `u2base`:
2, 1964242, 1
2, 2219779, 1
3, 1856939, 1

","movies2actors, movies","movies2actors.actorid, movies2actors.movieid, movies.movieid, movies.year","users, directors, actors, movies, movies2actors, movies2directors, u2base"
university,Provide the country ID of Cyprus.,SELECT id FROM country WHERE country_name = 'Cyprus',"CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

","CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

CREATE TABLE `ranking_system` (
  id INTEGER,
  system_name TEXT
);
Sample rows from `ranking_system`:
1, Times Higher Education World University Ranking
2, Shanghai Ranking
3, Center for World University Rankings

CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

",country,"id, country_name","country, ranking_system, ranking_criteria, university, university_ranking_year, university_year"
social_media,What is the gender of the user who has posted the tweet that got the most likes?,SELECT t2.gender FROM twitter as t1 inner JOIN user as t2 ON t1.userid = t2.userid ORDER BY t1.likes DESC LIMIT 1,"CREATE TABLE `twitter` (
  TweetID TEXT PRIMARY KEY,
  Weekday TEXT,
  Hour INTEGER,
  Day INTEGER,
  Lang TEXT,
  IsReshare TEXT,
  Reach INTEGER,
  RetweetCount INTEGER,
  Likes INTEGER,
  Klout INTEGER,
  Sentiment REAL,
  text TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  UserID TEXT REFERENCES user(UserID)
);
Sample rows from `twitter`:
tw-682712873332805633, Thursday, 17, 31, en, FALSE, 44, 0, 0, 35, 0.0, We are hiring: Senior Software Engineer - Proto http://www.reqcloud.com/jobs/719865/?k=0LaPxXuFwczs1e32ZURJKrgCIDMQtRO7BquFSQthUKY&utm_source=twitter&utm_campaign=reqCloud_JobPost #job @awscloud #job #protocol #networking #aws #mediastreaming, 3751, tw-40932430
tw-682713045357998080, Thursday, 17, 31, en, TRUE, 1810, 5, 0, 53, 2.0, RT @CodeMineStatus: This is true Amazon Web Services https://aws.amazon.com/ #php #html #html5 #css #webdesign #seo #java #javascript htt, 3989, tw-3179389829
tw-682713219375476736, Thursday, 17, 31, en, FALSE, 282, 0, 0, 47, 0.0, Devops Engineer Aws Ansible Cassandra Mysql Ubuntu Ruby On Rails Jobs in Austin TX #Austin #TX #jobs #jobsearch https://www.jobfindly.com/devops-engineer-aws-ansible-cassandra-mysql-ubuntu-ruby-on-rails-jobs-austin-tx.html, 3741, tw-4624808414

CREATE TABLE `user` (
  UserID TEXT PRIMARY KEY,
  Gender TEXT
);
Sample rows from `user`:
tw-1267804344, Unknown
tw-27229880, Male
tw-199664730, Male

","CREATE TABLE `location` (
  LocationID INTEGER,
  Country TEXT,
  State TEXT,
  StateCode TEXT,
  City TEXT
);
Sample rows from `location`:
1, Albania, Elbasan, AL, Elbasan
2, Albania, Tirane, AL, Tirana
3, Algeria, Souk Ahras, DZ, Souk Ahras

CREATE TABLE `user` (
  UserID TEXT PRIMARY KEY,
  Gender TEXT
);
Sample rows from `user`:
tw-1267804344, Unknown
tw-27229880, Male
tw-199664730, Male

CREATE TABLE `twitter` (
  TweetID TEXT PRIMARY KEY,
  Weekday TEXT,
  Hour INTEGER,
  Day INTEGER,
  Lang TEXT,
  IsReshare TEXT,
  Reach INTEGER,
  RetweetCount INTEGER,
  Likes INTEGER,
  Klout INTEGER,
  Sentiment REAL,
  text TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  UserID TEXT REFERENCES user(UserID)
);
Sample rows from `twitter`:
tw-682712873332805633, Thursday, 17, 31, en, FALSE, 44, 0, 0, 35, 0.0, We are hiring: Senior Software Engineer - Proto http://www.reqcloud.com/jobs/719865/?k=0LaPxXuFwczs1e32ZURJKrgCIDMQtRO7BquFSQthUKY&utm_source=twitter&utm_campaign=reqCloud_JobPost #job @awscloud #job #protocol #networking #aws #mediastreaming, 3751, tw-40932430
tw-682713045357998080, Thursday, 17, 31, en, TRUE, 1810, 5, 0, 53, 2.0, RT @CodeMineStatus: This is true Amazon Web Services https://aws.amazon.com/ #php #html #html5 #css #webdesign #seo #java #javascript htt, 3989, tw-3179389829
tw-682713219375476736, Thursday, 17, 31, en, FALSE, 282, 0, 0, 47, 0.0, Devops Engineer Aws Ansible Cassandra Mysql Ubuntu Ruby On Rails Jobs in Austin TX #Austin #TX #jobs #jobsearch https://www.jobfindly.com/devops-engineer-aws-ansible-cassandra-mysql-ubuntu-ruby-on-rails-jobs-austin-tx.html, 3741, tw-4624808414

","twitter, user","user.gender, twitter.userid, user.userid, twitter.likes","location, user, twitter"
simpson_episodes,"How many votes of 5-star did the episode ""Lisa the Drama Queen"" receive?",SELECT SUM(t2.votes) FROM episode as t1 inner JOIN vote as t2 ON t2.episode_id = t1.episode_id WHERE t1.title = 'Lisa the Drama Queen' AND t2.stars = 5;,"CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","episode, vote","vote.votes, vote.episode_id, episode.episode_id, episode.title, vote.stars","Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
social_media,Calculate the average number of male users who posted tweets in a week.,SELECT COUNT(DISTINCT t1.tweetid) / COUNT(DISTINCT t1.userid) / 7 as avg FROM twitter as t1 inner JOIN user as t2 ON t1.userid = t2.userid WHERE t2.gender = 'Male' AND t1.day BETWEEN 1 AND 31,"CREATE TABLE `twitter` (
  TweetID TEXT PRIMARY KEY,
  Weekday TEXT,
  Hour INTEGER,
  Day INTEGER,
  Lang TEXT,
  IsReshare TEXT,
  Reach INTEGER,
  RetweetCount INTEGER,
  Likes INTEGER,
  Klout INTEGER,
  Sentiment REAL,
  text TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  UserID TEXT REFERENCES user(UserID)
);
Sample rows from `twitter`:
tw-682712873332805633, Thursday, 17, 31, en, FALSE, 44, 0, 0, 35, 0.0, We are hiring: Senior Software Engineer - Proto http://www.reqcloud.com/jobs/719865/?k=0LaPxXuFwczs1e32ZURJKrgCIDMQtRO7BquFSQthUKY&utm_source=twitter&utm_campaign=reqCloud_JobPost #job @awscloud #job #protocol #networking #aws #mediastreaming, 3751, tw-40932430
tw-682713045357998080, Thursday, 17, 31, en, TRUE, 1810, 5, 0, 53, 2.0, RT @CodeMineStatus: This is true Amazon Web Services https://aws.amazon.com/ #php #html #html5 #css #webdesign #seo #java #javascript htt, 3989, tw-3179389829
tw-682713219375476736, Thursday, 17, 31, en, FALSE, 282, 0, 0, 47, 0.0, Devops Engineer Aws Ansible Cassandra Mysql Ubuntu Ruby On Rails Jobs in Austin TX #Austin #TX #jobs #jobsearch https://www.jobfindly.com/devops-engineer-aws-ansible-cassandra-mysql-ubuntu-ruby-on-rails-jobs-austin-tx.html, 3741, tw-4624808414

CREATE TABLE `user` (
  UserID TEXT PRIMARY KEY,
  Gender TEXT
);
Sample rows from `user`:
tw-1267804344, Unknown
tw-27229880, Male
tw-199664730, Male

","CREATE TABLE `location` (
  LocationID INTEGER,
  Country TEXT,
  State TEXT,
  StateCode TEXT,
  City TEXT
);
Sample rows from `location`:
1, Albania, Elbasan, AL, Elbasan
2, Albania, Tirane, AL, Tirana
3, Algeria, Souk Ahras, DZ, Souk Ahras

CREATE TABLE `user` (
  UserID TEXT PRIMARY KEY,
  Gender TEXT
);
Sample rows from `user`:
tw-1267804344, Unknown
tw-27229880, Male
tw-199664730, Male

CREATE TABLE `twitter` (
  TweetID TEXT PRIMARY KEY,
  Weekday TEXT,
  Hour INTEGER,
  Day INTEGER,
  Lang TEXT,
  IsReshare TEXT,
  Reach INTEGER,
  RetweetCount INTEGER,
  Likes INTEGER,
  Klout INTEGER,
  Sentiment REAL,
  text TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  UserID TEXT REFERENCES user(UserID)
);
Sample rows from `twitter`:
tw-682712873332805633, Thursday, 17, 31, en, FALSE, 44, 0, 0, 35, 0.0, We are hiring: Senior Software Engineer - Proto http://www.reqcloud.com/jobs/719865/?k=0LaPxXuFwczs1e32ZURJKrgCIDMQtRO7BquFSQthUKY&utm_source=twitter&utm_campaign=reqCloud_JobPost #job @awscloud #job #protocol #networking #aws #mediastreaming, 3751, tw-40932430
tw-682713045357998080, Thursday, 17, 31, en, TRUE, 1810, 5, 0, 53, 2.0, RT @CodeMineStatus: This is true Amazon Web Services https://aws.amazon.com/ #php #html #html5 #css #webdesign #seo #java #javascript htt, 3989, tw-3179389829
tw-682713219375476736, Thursday, 17, 31, en, FALSE, 282, 0, 0, 47, 0.0, Devops Engineer Aws Ansible Cassandra Mysql Ubuntu Ruby On Rails Jobs in Austin TX #Austin #TX #jobs #jobsearch https://www.jobfindly.com/devops-engineer-aws-ansible-cassandra-mysql-ubuntu-ruby-on-rails-jobs-austin-tx.html, 3741, tw-4624808414

","twitter, user","twitter.tweetid, twitter.userid, user.userid, user.gender, twitter.day","location, user, twitter"
cs_semester,Give the number of research postgraduate students.,SELECT COUNT(student_id) FROM student WHERE type = 'RPG',"CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

","CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

CREATE TABLE `prof` (
  prof_id INTEGER,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  popularity INTEGER,
  teachingability INTEGER,
  graduate_from TEXT
);
Sample rows from `prof`:
1, Male, Nathaniel, Pigford, npigford0@hku.hk, 3, 5, University of Washington
2, Male, Zhihua, Zhou, zzhihua@hku.hk, 2, 1, Beijing Polytechnic University
3, Male, Ogdon, Zywicki, ozywicki2@hku.hk, 2, 2, University of Boston

CREATE TABLE `RA` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `RA`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

",student,student_id,"course, prof, RA, registration, student"
disney,List the movie titles with the voice actor Jeff Bennet,SELECT movie FROM `voice-actors` WHERE 'voice-actor' = 'Jeff Bennett',"CREATE TABLE `voice-actors` (
  character TEXT PRIMARY KEY,
  voice-actor TEXT,
  movie TEXT REFERENCES characters(movie_title)
);
Sample rows from `voice-actors`:
Abby Mallard, Joan Cusack, Chicken Little
Abigail Gabble, Monica Evans, The Aristocats
Abis Mal, Jason Alexander, The Return of Jafar

","CREATE TABLE `characters` (
  movie_title TEXT PRIMARY KEY,
  release_date TEXT,
  hero TEXT REFERENCES voice-actors(character),
  villian TEXT,
  song TEXT
);
Sample rows from `characters`:
Snow White and the Seven Dwarfs, 21-Dec-37, Snow White, Evil Queen, Some Day My Prince Will Come
Pinocchio, 7-Feb-40, Pinocchio, Stromboli, When You Wish upon a Star
Fantasia, 13-Nov-40, None, Chernabog, None

CREATE TABLE `director` (
  name TEXT PRIMARY KEY REFERENCES characters(movie_title),
  director TEXT
);
Sample rows from `director`:
Snow White and the Seven Dwarfs, David Hand
Pinocchio, Ben Sharpsteen
Fantasia, full credits

CREATE TABLE `movies_total_gross` (
  movie_title TEXT PRIMARY KEY REFERENCES characters(movie_title),
  release_date TEXT PRIMARY KEY,
  genre TEXT,
  MPAA_rating TEXT,
  total_gross TEXT,
  inflation_adjusted_gross TEXT
);
Sample rows from `movies_total_gross`:
Snow White and the Seven Dwarfs, Dec 21, 1937, Musical, G, $184,925,485, $5,228,953,251
Pinocchio, Feb 9, 1940, Adventure, G, $84,300,000, $2,188,229,052
Fantasia, Nov 13, 1940, Musical, G, $83,320,000, $2,187,090,808

CREATE TABLE `revenue` (
  Year INTEGER,
  Studio Entertainment[NI 1] REAL,
  Disney Consumer Products[NI 2] REAL,
  Disney Interactive[NI 3][Rev 1] INTEGER,
  Walt Disney Parks and Resorts REAL,
  Disney Media Networks TEXT,
  Total INTEGER
);
Sample rows from `revenue`:
1991, 2593.0, 724.0, None, 2794.0, None, 6111
1992, 3115.0, 1081.0, None, 3306.0, None, 7502
1993, 3673.4, 1415.1, None, 3440.7, None, 8529

CREATE TABLE `voice-actors` (
  character TEXT PRIMARY KEY,
  voice-actor TEXT,
  movie TEXT REFERENCES characters(movie_title)
);
Sample rows from `voice-actors`:
Abby Mallard, Joan Cusack, Chicken Little
Abigail Gabble, Monica Evans, The Aristocats
Abis Mal, Jason Alexander, The Return of Jafar

",voice-actors,movie,"characters, director, movies_total_gross, revenue, voice-actors"
airline,Give the name of the airline to which tail number N202NN belongs to.,SELECT t2.description FROM airlines as t1 inner JOIN `air carriers` as t2 ON t1.op_carrier_airline_id = t2.code WHERE t1.tail_num = 'N202NN' GROUP BY t2.description,"CREATE TABLE `airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

CREATE TABLE `air carriers` (
  Code INTEGER,
  Description TEXT
);
Sample rows from `air carriers`:
19031, Mackey International Inc.: MAC
19032, Munz Northern Airlines Inc.: XY
19033, Cochise Airlines Inc.: COC

","CREATE TABLE `Air Carriers` (
  Code INTEGER,
  Description TEXT
);
Sample rows from `Air Carriers`:
19031, Mackey International Inc.: MAC
19032, Munz Northern Airlines Inc.: XY
19033, Cochise Airlines Inc.: COC

CREATE TABLE `Airports` (
  Code TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `Airports`:
01A, Afognak Lake, AK: Afognak Lake Airport
03A, Granite Mountain, AK: Bear Creek Mining Strip
04A, Lik, AK: Lik Mining Camp

CREATE TABLE `Airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `Airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

","airlines, air carriers","air carriers.description, airlines.op_carrier_airline_id, air carriers.code, airlines.tail_num","Air Carriers, Airports, Airlines"
simpson_episodes,What award did the character Homer simpson 20 achieve in 2009?,SELECT DISTINCT t1.award FROM award as t1 inner JOIN Character_award as t2 ON t1.award_id = t2.award_id WHERE t1.year = 2009 AND t2.character = 'Homer Simpson';,"CREATE TABLE `award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","award, Character_award","award.award, award.award_id, Character_award.award_id, award.year, Character_award.character","Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
public_review_platform,"How many users who have joined Yelp since ""2005"" but have no fans?",SELECT COUNT(user_id) FROM users WHERE user_yelping_since_year = 2005 AND user_fans LIKE 'None',"CREATE TABLE `users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

",users,"user_id, user_yelping_since_year, user_fans","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
food_inspection,"For the business whose business certificate number is 304977, how many violations did it have on 2013/10/7?",SELECT COUNT(t1.business_id) FROM violations as t1 inner JOIN businesses as t2 ON t1.business_id = t2.business_id WHERE t2.business_certificate = '304977' AND t1.`date` = '2013-10-07',"CREATE TABLE `violations` (
  business_id INTEGER REFERENCES businesses(business_id),
  date DATE,
  violation_type_id TEXT,
  risk_category TEXT,
  description TEXT
);
Sample rows from `violations`:
10, 2014-07-29, 103129, Moderate Risk, Insufficient hot water or running water
10, 2014-07-29, 103144, Low Risk, Unapproved or unmaintained equipment or utensils
10, 2014-01-14, 103119, Moderate Risk, Inadequate and inaccessible handwashing facilities

CREATE TABLE `businesses` (
  business_id INTEGER,
  name TEXT,
  address TEXT,
  city TEXT,
  postal_code TEXT,
  latitude REAL,
  longitude REAL,
  phone_number INTEGER,
  tax_code TEXT,
  business_certificate INTEGER,
  application_date DATE,
  owner_name TEXT,
  owner_address TEXT,
  owner_city TEXT,
  owner_state TEXT,
  owner_zip TEXT
);
Sample rows from `businesses`:
10, Tiramisu Kitchen, 033 Belden Pl, San Francisco, 94104, 37.7911, -122.404, None, H24, 779059, None, Tiramisu LLC, 33 Belden St, San Francisco, CA, 94104
24, OMNI S.F. Hotel - 2nd Floor Pantry, 500 California St, 2nd  Floor, San Francisco, 94104, 37.7929, -122.403, None, H24, 352312, None, OMNI San Francisco Hotel Corp, 500 California St, 2nd Floor, San Francisco, CA, 94104
31, Norman's Ice Cream and Freezes, 2801 Leavenworth St, San Francisco, 94133, 37.8072, -122.419, None, H24, 346882, None, Norman Antiforda, 2801 Leavenworth St, San Francisco, CA, 94133

","CREATE TABLE `businesses` (
  business_id INTEGER,
  name TEXT,
  address TEXT,
  city TEXT,
  postal_code TEXT,
  latitude REAL,
  longitude REAL,
  phone_number INTEGER,
  tax_code TEXT,
  business_certificate INTEGER,
  application_date DATE,
  owner_name TEXT,
  owner_address TEXT,
  owner_city TEXT,
  owner_state TEXT,
  owner_zip TEXT
);
Sample rows from `businesses`:
10, Tiramisu Kitchen, 033 Belden Pl, San Francisco, 94104, 37.7911, -122.404, None, H24, 779059, None, Tiramisu LLC, 33 Belden St, San Francisco, CA, 94104
24, OMNI S.F. Hotel - 2nd Floor Pantry, 500 California St, 2nd  Floor, San Francisco, 94104, 37.7929, -122.403, None, H24, 352312, None, OMNI San Francisco Hotel Corp, 500 California St, 2nd Floor, San Francisco, CA, 94104
31, Norman's Ice Cream and Freezes, 2801 Leavenworth St, San Francisco, 94133, 37.8072, -122.419, None, H24, 346882, None, Norman Antiforda, 2801 Leavenworth St, San Francisco, CA, 94133

CREATE TABLE `inspections` (
  business_id INTEGER REFERENCES businesses(business_id),
  score INTEGER,
  date DATE,
  type TEXT
);
Sample rows from `inspections`:
10, 92, 2014-01-14, Routine - Unscheduled
10, None, 2014-01-24, Reinspection/Followup
10, 94, 2014-07-29, Routine - Unscheduled

CREATE TABLE `violations` (
  business_id INTEGER REFERENCES businesses(business_id),
  date DATE,
  violation_type_id TEXT,
  risk_category TEXT,
  description TEXT
);
Sample rows from `violations`:
10, 2014-07-29, 103129, Moderate Risk, Insufficient hot water or running water
10, 2014-07-29, 103144, Low Risk, Unapproved or unmaintained equipment or utensils
10, 2014-01-14, 103119, Moderate Risk, Inadequate and inaccessible handwashing facilities

","violations, businesses","violations.business_id, businesses.business_id, businesses.business_certificate, violations.date","businesses, inspections, violations"
books,Which language is 'El plan infinito' written in?,SELECT t2.language_name FROM book as t1 inner JOIN book_language as t2 ON t1.language_id = t2.language_id WHERE t1.title = 'El plan infinito',"CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","book, book_language","book_language.language_name, book.language_id, book_language.language_id, book.title","address_status, author, book_language, country, address, customer, customer_address, order_status, publisher, book, book_author, shipping_method, cust_order, sqlite_sequence, order_history, order_line"
public_review_platform,List by ID the businesses with the reviews with the lowest veracity of Paradise Valley.,SELECT business_id FROM business WHERE stars > 3 AND city = 'Paradise Valley' AND review_count = 'Low',"CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

",business,"business_id, stars, city, review_count","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
retail_world,Calculate the total number of orders placed by the company 'GROSELLA-Restaurante'.,SELECT COUNT(t2.orderid) FROM customers as t1 inner JOIN orders as t2 ON t1.customerid = t2.customerid WHERE t1.companyname = 'GROSELLA-Restaurante',"CREATE TABLE `customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

","customers, orders","orders.orderid, customers.customerid, orders.customerid, customers.companyname","sqlite_sequence, Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails"
european_football_1,What is the name of the home team in division P1 with the highest final time goal in all seasons?,SELECT hometeam FROM matchs WHERE div = 'P1' AND season = 2021 ORDER BY fthg DESC LIMIT 1,"CREATE TABLE `matchs` (
  Div TEXT REFERENCES divisions(division),
  Date DATE,
  HomeTeam TEXT,
  AwayTeam TEXT,
  FTHG INTEGER,
  FTAG INTEGER,
  FTR TEXT,
  season INTEGER
);
Sample rows from `matchs`:
B1, 2020-08-08, Club Brugge, Charleroi, 0, 1, A, 2021
B1, 2020-08-08, Antwerp, Mouscron, 1, 1, D, 2021
B1, 2020-08-08, Standard, Cercle Brugge, 1, 0, H, 2021

","CREATE TABLE `divisions` (
  division TEXT PRIMARY KEY,
  name TEXT,
  country TEXT
);
Sample rows from `divisions`:
B1, Division 1A, Belgium
D1, Bundesliga, Deutschland
D2, 2. Bundesliga, Deutschland

CREATE TABLE `matchs` (
  Div TEXT REFERENCES divisions(division),
  Date DATE,
  HomeTeam TEXT,
  AwayTeam TEXT,
  FTHG INTEGER,
  FTAG INTEGER,
  FTR TEXT,
  season INTEGER
);
Sample rows from `matchs`:
B1, 2020-08-08, Club Brugge, Charleroi, 0, 1, A, 2021
B1, 2020-08-08, Antwerp, Mouscron, 1, 1, D, 2021
B1, 2020-08-08, Standard, Cercle Brugge, 1, 0, H, 2021

",matchs,"hometeam, season, fthg","divisions, matchs"
image_and_language,"Calculate the average number of images with an attribute class of ""keyboard"".",SELECT AVG(t1.img_id) FROM img_obj as t1 inner JOIN OBJ_CLasSES as t2 ON t1.OBJ_CLasS_ID = t2.OBJ_CLasS_ID WHERE t2.OBJ_CLasS = 'keyboard',"CREATE TABLE `img_obj` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `img_obj`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `OBJ_CLasSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLasSES`:
0, awning
1, goggles
2, dot

","CREATE TABLE `ATT_CLASSES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `ATT_CLASSES`:
0, building s
1, indoors
2, cluttered

CREATE TABLE `OBJ_CLASSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLASSES`:
0, awning
1, goggles
2, dot

CREATE TABLE `IMG_OBJ` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `IMG_OBJ`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `IMG_OBJ_ATT` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_OBJ_ATT`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `PRED_CLASSES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `PRED_CLASSES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `IMG_REL` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_REL`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

","img_obj, OBJ_CLasSES","img_obj.img_id, img_obj.OBJ_CLasS_ID, OBJ_CLasSES.OBJ_CLasS_ID, OBJ_CLasSES.OBJ_CLasS","ATT_CLASSES, OBJ_CLASSES, IMG_OBJ, IMG_OBJ_ATT, PRED_CLASSES, IMG_REL"
beer_factory,Which brand of root beer was highly rated by customers?,SELECT t1.brandname FROM rootbeerbrand as t1 inner JOIN rootbeerreview as t2 ON t1.brandid = t2.brandid WHERE t2.starrating = 5,"CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

CREATE TABLE `rootbeerreview` (
  CustomerID INTEGER PRIMARY KEY REFERENCES customers(CustomerID),
  BrandID INTEGER PRIMARY KEY REFERENCES rootbeerbrand(BrandID),
  StarRating INTEGER,
  ReviewDate DATE,
  Review TEXT
);
Sample rows from `rootbeerreview`:
101811, 10012, 5, 2013-07-15, None
101811, 10014, 1, 2013-07-08, None
101811, 10015, 3, 2013-07-25, None

","CREATE TABLE `customers` (
  CustomerID INTEGER,
  First TEXT,
  Last TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER,
  Email TEXT,
  PhoneNumber TEXT,
  FirstPurchaseDate DATE,
  SubscribedToEmailList TEXT,
  Gender TEXT
);
Sample rows from `customers`:
101811, Kenneth, Walton, 6715 Commonwealth Dr, Sacramento, CA, 94256, walton.k76@fastmail.com, (916) 918-1561, 2013-05-30, FALSE, M
103508, Madeleine, Jones, 3603 Leola Way, Sacramento, CA, 94258, j_madeleine@gmail.com, (916) 186-9423, 2013-02-06, FALSE, F
104939, Damen, Wheeler, 6740 Branwood Way, Orangevale, CA, 95662, dwheeler@outlook.com, (916) 164-1156, 2013-04-11, FALSE, M

CREATE TABLE `geolocation` (
  LocationID INTEGER REFERENCES location(LocationID),
  Latitude REAL,
  Longitude REAL
);
Sample rows from `geolocation`:
0, 0.0, 0.0
1, 38.566129, -121.426432
2, 38.559615, -121.42243

CREATE TABLE `location` (
  LocationID INTEGER REFERENCES geolocation(LocationID),
  LocationName TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER
);
Sample rows from `location`:
0, LOST, None, None, None, None
1, Sac State American River Courtyard, 6000 J St, Sacramento, CA, 95819
2, Sac State Union, 6000 J St, Sacramento, CA, 95819

CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

CREATE TABLE `rootbeerreview` (
  CustomerID INTEGER PRIMARY KEY REFERENCES customers(CustomerID),
  BrandID INTEGER PRIMARY KEY REFERENCES rootbeerbrand(BrandID),
  StarRating INTEGER,
  ReviewDate DATE,
  Review TEXT
);
Sample rows from `rootbeerreview`:
101811, 10012, 5, 2013-07-15, None
101811, 10014, 1, 2013-07-08, None
101811, 10015, 3, 2013-07-25, None

CREATE TABLE `transaction` (
  TransactionID INTEGER,
  CreditCardNumber INTEGER,
  CustomerID INTEGER REFERENCES customers(CustomerID),
  TransactionDate DATE,
  CreditCardType TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  RootBeerID INTEGER REFERENCES rootbeer(RootBeerID),
  PurchasePrice REAL
);
Sample rows from `transaction`:
100000, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105661, 3.0
100001, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105798, 3.0
100002, 6011583832864739, 864896, 2014-07-07, Discover, 2, 102514, 3.0

","rootbeerbrand, rootbeerreview","rootbeerbrand.brandname, rootbeerbrand.brandid, rootbeerreview.brandid, rootbeerreview.starrating","customers, geolocation, location, rootbeerbrand, rootbeer, rootbeerreview, transaction"
sales_in_weather,What is the maximum and minimum temperature for station number 1 on 15 January 2012?,"SELECT tmax, tmin FROM weather WHERE station_nbr = 1 AND `date` = '2012-01-15'","CREATE TABLE `weather` (
  station_nbr INTEGER PRIMARY KEY,
  date DATE PRIMARY KEY,
  tmax INTEGER,
  tmin INTEGER,
  tavg INTEGER,
  depart INTEGER,
  dewpoint INTEGER,
  wetbulb INTEGER,
  heat INTEGER,
  cool INTEGER,
  sunrise TEXT,
  sunset TEXT,
  codesum TEXT,
  snowfall REAL,
  preciptotal REAL,
  stnpressure REAL,
  sealevel REAL,
  resultspeed REAL,
  resultdir INTEGER,
  avgspeed REAL
);
Sample rows from `weather`:
1, 2012-01-01, 52, 31, 42, None, 36, 40, 23, 0, None, None, RA FZFG BR, None, 0.05, 29.78, 29.92, 3.6, 20, 4.6
1, 2012-01-02, 50, 31, 41, None, 26, 35, 24, 0, None, None,  , None, 0.01, 29.44, 29.62, 9.8, 24, 10.3
1, 2012-01-03, 32, 11, 22, None, 4, 18, 43, 0, None, None,  , None, 0.0, 29.67, 29.87, 10.8, 31, 11.6

","CREATE TABLE `sales_in_weather` (
  date DATE PRIMARY KEY,
  store_nbr INTEGER PRIMARY KEY,
  item_nbr INTEGER PRIMARY KEY,
  units INTEGER
);
Sample rows from `sales_in_weather`:
2012-01-01, 1, 1, 0
2012-01-01, 1, 2, 0
2012-01-01, 1, 3, 0

CREATE TABLE `weather` (
  station_nbr INTEGER PRIMARY KEY,
  date DATE PRIMARY KEY,
  tmax INTEGER,
  tmin INTEGER,
  tavg INTEGER,
  depart INTEGER,
  dewpoint INTEGER,
  wetbulb INTEGER,
  heat INTEGER,
  cool INTEGER,
  sunrise TEXT,
  sunset TEXT,
  codesum TEXT,
  snowfall REAL,
  preciptotal REAL,
  stnpressure REAL,
  sealevel REAL,
  resultspeed REAL,
  resultdir INTEGER,
  avgspeed REAL
);
Sample rows from `weather`:
1, 2012-01-01, 52, 31, 42, None, 36, 40, 23, 0, None, None, RA FZFG BR, None, 0.05, 29.78, 29.92, 3.6, 20, 4.6
1, 2012-01-02, 50, 31, 41, None, 26, 35, 24, 0, None, None,  , None, 0.01, 29.44, 29.62, 9.8, 24, 10.3
1, 2012-01-03, 32, 11, 22, None, 4, 18, 43, 0, None, None,  , None, 0.0, 29.67, 29.87, 10.8, 31, 11.6

CREATE TABLE `relation` (
  store_nbr INTEGER REFERENCES sales_in_weather(store_nbr),
  station_nbr INTEGER REFERENCES weather(station_nbr)
);
Sample rows from `relation`:
1, 1
2, 14
3, 7

",weather,"tmax, tmin, station_nbr, date","sales_in_weather, weather, relation"
restaurant,List all the average reviews of Chinese restaurants for each county from highest to lowest.,SELECT AVG(t1.review) FROM generalinfo as t1 inner JOIN geographic as t2 ON t1.city = t2.city WHERE t1.food_type = 'chinese' GROUP BY t1.id_restaurant ORDER BY AVG(t1.review) DESC,"CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

CREATE TABLE `geographic` (
  city TEXT PRIMARY KEY,
  county TEXT,
  region TEXT
);
Sample rows from `geographic`:
alameda, alameda county, bay area
alamo, contra costa county, bay area
albany, alameda county, bay area

","CREATE TABLE `geographic` (
  city TEXT PRIMARY KEY,
  county TEXT,
  region TEXT
);
Sample rows from `geographic`:
alameda, alameda county, bay area
alamo, contra costa county, bay area
albany, alameda county, bay area

CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

","generalinfo, geographic","generalinfo.review, generalinfo.city, geographic.city, generalinfo.food_type, generalinfo.id_restaurant","geographic, generalinfo, location"
sales,"List the full name of customers who spend more than 50,000 in descending order the amount spend.","SELECT DISTINCT t3.firstname, t3.middleinitial, t3.lastname FROM products as t1 inner JOIN sales as t2 ON t1.productid = t2.productid inner JOIN customers as t3 ON t2.customerid = t3.customerid WHERE t2.quantity * t1.price > 50000","CREATE TABLE `products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

CREATE TABLE `sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

CREATE TABLE `customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Employees`:
1, Abraham, e, Bennet
2, Reginald, l, Blotchet-Halls
3, Cheryl, a, Carson

CREATE TABLE `Products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

CREATE TABLE `Sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `Sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

","products, sales, customers","customers.firstname, customers.middleinitial, customers.lastname, products.productid, sales.productid, sales.customerid, customers.customerid, sales.quantity, products.price","Customers, Employees, Products, Sales"
shakespeare,"How many acts can be found in the comedy ""Two Gentlemen of Verona""?",SELECT COUNT(t1.act) FROM chapters as t1 left JOIN works as t2 ON t1.work_id = t2.id WHERE t2.genretype = 'Comedy' AND t2.title = 'Two Gentlemen of Verona',"CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

","CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
chapters, 19648
characters, 1266
paragraphs, 666327

CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

","chapters, works","chapters.act, chapters.work_id, works.id, works.genretype, works.title","chapters, sqlite_sequence, characters, paragraphs, works"
codebase_comments,"For the repository with '8094' watchers , how many solutions does it contain?",SELECT COUNT(t2.repoid) FROM repo as t1 inner JOIN solution as t2 ON t1.id = t2.repoid WHERE t1.watchers = 8094,"CREATE TABLE `repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

CREATE TABLE `solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Method, 10860640
MethodParameter, 17514858
Repo, 156550

CREATE TABLE `Method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `Method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

CREATE TABLE `MethodParameter` (
  Id INTEGER,
  MethodId TEXT,
  Type TEXT,
  Name TEXT
);
Sample rows from `MethodParameter`:
1, 1, System.String, data
2, 2, System.Int32, i
3, 2, System.Int32, declstartpos

CREATE TABLE `Repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `Repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

CREATE TABLE `Solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `Solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

","repo, solution","solution.repoid, repo.id, repo.watchers","sqlite_sequence, Method, MethodParameter, Repo, Solution"
olympics,List the names of the games held in Paris.,SELECT t3.games_name FROM games_city as t1 inner JOIN city as t2 ON t1.city_id = t2.id inner JOIN games as t3 ON t1.games_id = t3.id WHERE t2.city_name = 'Paris',"CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

","CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `medal` (
  id INTEGER,
  medal_name TEXT
);
Sample rows from `medal`:
1, Gold
2, Silver
3, Bronze

CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `sport` (
  id INTEGER,
  sport_name TEXT
);
Sample rows from `sport`:
1, Aeronautics
2, Alpine Skiing
3, Alpinism

CREATE TABLE `event` (
  id INTEGER,
  sport_id INTEGER REFERENCES sport(id),
  event_name TEXT
);
Sample rows from `event`:
1, 9, Basketball Men's Basketball
2, 33, Judo Men's Extra-Lightweight
3, 25, Football Men's Football

CREATE TABLE `competitor_event` (
  event_id INTEGER REFERENCES event(id),
  competitor_id INTEGER REFERENCES games_competitor(id),
  medal_id INTEGER REFERENCES medal(id)
);
Sample rows from `competitor_event`:
1, 1, 4
2, 2, 4
3, 3, 4

","games_city, city, games","games.games_name, games_city.city_id, city.id, games_city.games_id, games.id, city.city_name","city, games, games_city, medal, noc_region, person, games_competitor, person_region, sport, event, competitor_event"
mental_health_survey,What is the average age of the survey respondents in the United States?,SELECT cast(SUM(t1.answertext) as real) / COUNT(t1.userid) FROM answer as t1 inner JOIN ( SELECT t1.userid FROM answer as t1 inner JOIN question as t2 ON t1.questionID = t2.questionid WHERE t2.questionid = 3 AND t1.answertext = 'United States' ) as t2 ON t1.userid = t2.userid inner JOIN question as t3 ON t1.questionID = t3.questionid WHERE t3.questionid = 1,"CREATE TABLE `answer` (
  AnswerText TEXT,
  SurveyID INTEGER REFERENCES Survey(None),
  UserID INTEGER PRIMARY KEY,
  QuestionID INTEGER PRIMARY KEY REFERENCES Question(None)
);
Sample rows from `answer`:
37, 2014, 1, 1
44, 2014, 2, 1
32, 2014, 3, 1

CREATE TABLE `question` (
  questiontext TEXT,
  questionid INTEGER
);
Sample rows from `question`:
What is your age?, 1
What is your gender?, 2
What country do you live in?, 3

","CREATE TABLE `Question` (
  questiontext TEXT,
  questionid INTEGER
);
Sample rows from `Question`:
What is your age?, 1
What is your gender?, 2
What country do you live in?, 3

CREATE TABLE `Survey` (
  SurveyID INTEGER,
  Description TEXT
);
Sample rows from `Survey`:
2014, mental health survey for 2014
2016, mental health survey for 2016
2017, mental health survey for 2017

CREATE TABLE `Answer` (
  AnswerText TEXT,
  SurveyID INTEGER REFERENCES Survey(None),
  UserID INTEGER PRIMARY KEY,
  QuestionID INTEGER PRIMARY KEY REFERENCES Question(None)
);
Sample rows from `Answer`:
37, 2014, 1, 1
44, 2014, 2, 1
32, 2014, 3, 1

","answer, question","answer.answertext, answer.userid, answer.questionID, question.questionid, question.userid","Question, Survey, Answer"
simpson_episodes,What is the percentage of Primetime Emmy nominated episodes with a rating over 7 to all the episodes that have a rating over 7?,SELECT cast(SUM(case when t1.award_category = 'Primetime Emmy' then 1 else 0 end) as real) * 100 / COUNT(*) FROM award as t1 inner JOIN episode as t2 ON t1.episode_id = t2.episode_id WHERE t2.rating > 7 AND t1.result = 'Nominee';,"CREATE TABLE `award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","award, episode","award.award_category, award.episode_id, episode.episode_id, episode.rating, award.result","Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
retail_world,How many suppliers does Northwind have in USA?,SELECT COUNT(supplierid) FROM suppliers WHERE country = 'USA',"CREATE TABLE `suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

",suppliers,"supplierid, country","sqlite_sequence, Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails"
shakespeare,How many characters are there in Titus Andronicus?,SELECT COUNT(DISTINCT t3.character_id) FROM works as t1 inner JOIN chapters as t2 ON t1.id = t2.work_id inner JOIN paragraphs as t3 ON t2.id = t3.chapter_id WHERE t1.title = 'Titus Andronicus',"CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

","CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
chapters, 19648
characters, 1266
paragraphs, 666327

CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

","works, chapters, paragraphs","paragraphs.character_id, works.id, chapters.work_id, chapters.id, paragraphs.chapter_id, works.title","chapters, sqlite_sequence, characters, paragraphs, works"
sales,Please provide sales ID for products named Hex Nut with a price greater than 100.,SELECT t2.salesid FROM products as t1 inner JOIN sales as t2 ON t1.productid = t2.productid WHERE t1.name LIKE 'Hex Nut%' AND t1.price > 100,"CREATE TABLE `products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

CREATE TABLE `sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Employees`:
1, Abraham, e, Bennet
2, Reginald, l, Blotchet-Halls
3, Cheryl, a, Carson

CREATE TABLE `Products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

CREATE TABLE `Sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `Sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

","products, sales","sales.salesid, products.productid, sales.productid, products.name, products.price","Customers, Employees, Products, Sales"
music_tracker,"From 1980 to 2000, which artist had the most disco releases?",SELECT t1.artist FROM torrents as t1 inner JOIN tags as t2 ON t1.id = t2.id WHERE t1.groupyear BETWEEN 1980 AND 2000 AND t2.tag LIKE 'disco' GROUP BY t1.artist ORDER BY COUNT(t2.tag) DESC LIMIT 1,"CREATE TABLE `torrents` (
  groupName TEXT,
  totalSnatched INTEGER,
  artist TEXT,
  groupYear INTEGER,
  releaseType TEXT,
  groupId INTEGER,
  id INTEGER
);
Sample rows from `torrents`:
superappin&#39;, 239, grandmaster flash & the furious five, 1979, single, 720949, 0
spiderap / a corona jam, 156, ron hunt & ronnie g & the sm crew, 1979, single, 728752, 1
rapper&#39;s delight, 480, sugarhill gang, 1979, single, 18513, 2

CREATE TABLE `tags` (
  index INTEGER PRIMARY KEY,
  id INTEGER REFERENCES torrents(None),
  tag TEXT
);
Sample rows from `tags`:
0, 0, 1970s
1, 0, funk
2, 0, disco

","CREATE TABLE `torrents` (
  groupName TEXT,
  totalSnatched INTEGER,
  artist TEXT,
  groupYear INTEGER,
  releaseType TEXT,
  groupId INTEGER,
  id INTEGER
);
Sample rows from `torrents`:
superappin&#39;, 239, grandmaster flash & the furious five, 1979, single, 720949, 0
spiderap / a corona jam, 156, ron hunt & ronnie g & the sm crew, 1979, single, 728752, 1
rapper&#39;s delight, 480, sugarhill gang, 1979, single, 18513, 2

CREATE TABLE `tags` (
  index INTEGER PRIMARY KEY,
  id INTEGER REFERENCES torrents(None),
  tag TEXT
);
Sample rows from `tags`:
0, 0, 1970s
1, 0, funk
2, 0, disco

","torrents, tags","torrents.artist, torrents.id, tags.id, torrents.groupyear, tags.tag","torrents, tags"
disney,What is the genre of the movie whose villain is Commander Rourke?,SELECT t2.genre FROM characters as t1 inner JOIN movies_total_gross as t2 ON t2.movie_title = t1.movie_title WHERE t1.villian = 'Commander Rourke',"CREATE TABLE `characters` (
  movie_title TEXT PRIMARY KEY,
  release_date TEXT,
  hero TEXT REFERENCES voice-actors(character),
  villian TEXT,
  song TEXT
);
Sample rows from `characters`:
Snow White and the Seven Dwarfs, 21-Dec-37, Snow White, Evil Queen, Some Day My Prince Will Come
Pinocchio, 7-Feb-40, Pinocchio, Stromboli, When You Wish upon a Star
Fantasia, 13-Nov-40, None, Chernabog, None

CREATE TABLE `movies_total_gross` (
  movie_title TEXT PRIMARY KEY REFERENCES characters(movie_title),
  release_date TEXT PRIMARY KEY,
  genre TEXT,
  MPAA_rating TEXT,
  total_gross TEXT,
  inflation_adjusted_gross TEXT
);
Sample rows from `movies_total_gross`:
Snow White and the Seven Dwarfs, Dec 21, 1937, Musical, G, $184,925,485, $5,228,953,251
Pinocchio, Feb 9, 1940, Adventure, G, $84,300,000, $2,188,229,052
Fantasia, Nov 13, 1940, Musical, G, $83,320,000, $2,187,090,808

","CREATE TABLE `characters` (
  movie_title TEXT PRIMARY KEY,
  release_date TEXT,
  hero TEXT REFERENCES voice-actors(character),
  villian TEXT,
  song TEXT
);
Sample rows from `characters`:
Snow White and the Seven Dwarfs, 21-Dec-37, Snow White, Evil Queen, Some Day My Prince Will Come
Pinocchio, 7-Feb-40, Pinocchio, Stromboli, When You Wish upon a Star
Fantasia, 13-Nov-40, None, Chernabog, None

CREATE TABLE `director` (
  name TEXT PRIMARY KEY REFERENCES characters(movie_title),
  director TEXT
);
Sample rows from `director`:
Snow White and the Seven Dwarfs, David Hand
Pinocchio, Ben Sharpsteen
Fantasia, full credits

CREATE TABLE `movies_total_gross` (
  movie_title TEXT PRIMARY KEY REFERENCES characters(movie_title),
  release_date TEXT PRIMARY KEY,
  genre TEXT,
  MPAA_rating TEXT,
  total_gross TEXT,
  inflation_adjusted_gross TEXT
);
Sample rows from `movies_total_gross`:
Snow White and the Seven Dwarfs, Dec 21, 1937, Musical, G, $184,925,485, $5,228,953,251
Pinocchio, Feb 9, 1940, Adventure, G, $84,300,000, $2,188,229,052
Fantasia, Nov 13, 1940, Musical, G, $83,320,000, $2,187,090,808

CREATE TABLE `revenue` (
  Year INTEGER,
  Studio Entertainment[NI 1] REAL,
  Disney Consumer Products[NI 2] REAL,
  Disney Interactive[NI 3][Rev 1] INTEGER,
  Walt Disney Parks and Resorts REAL,
  Disney Media Networks TEXT,
  Total INTEGER
);
Sample rows from `revenue`:
1991, 2593.0, 724.0, None, 2794.0, None, 6111
1992, 3115.0, 1081.0, None, 3306.0, None, 7502
1993, 3673.4, 1415.1, None, 3440.7, None, 8529

CREATE TABLE `voice-actors` (
  character TEXT PRIMARY KEY,
  voice-actor TEXT,
  movie TEXT REFERENCES characters(movie_title)
);
Sample rows from `voice-actors`:
Abby Mallard, Joan Cusack, Chicken Little
Abigail Gabble, Monica Evans, The Aristocats
Abis Mal, Jason Alexander, The Return of Jafar

","characters, movies_total_gross","movies_total_gross.genre, movies_total_gross.movie_title, characters.movie_title, characters.villian","characters, director, movies_total_gross, revenue, voice-actors"
codebase_comments,"Show the full Comment of the method ""DE2_UE_Fahrradkurier.de2_uebung_fahrradkurierDataSet1TableAdapters.TableAdapterManager.UpdateInsertedRows"".",SELECT fullcomment FROM method WHERE name = 'DE2_UE_Fahrradkurier.de2_uebung_fahrradkurierDataSet1TableAdapters.TableAdapterManager.UpdateInsertedRows',"CREATE TABLE `method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Method, 10860640
MethodParameter, 17514858
Repo, 156550

CREATE TABLE `Method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `Method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

CREATE TABLE `MethodParameter` (
  Id INTEGER,
  MethodId TEXT,
  Type TEXT,
  Name TEXT
);
Sample rows from `MethodParameter`:
1, 1, System.String, data
2, 2, System.Int32, i
3, 2, System.Int32, declstartpos

CREATE TABLE `Repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `Repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

CREATE TABLE `Solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `Solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

",method,"fullcomment, name","sqlite_sequence, Method, MethodParameter, Repo, Solution"
books,What is the title of the first book that was published in 1900?,"SELECT title FROM book WHERE strftime('%Y', publication_date) = '1900' ORDER BY publication_date LIMIT 1","CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

",book,"title, publication_date","address_status, author, book_language, country, address, customer, customer_address, order_status, publisher, book, book_author, shipping_method, cust_order, sqlite_sequence, order_history, order_line"
bike_share_1,How many trips which start station and end station are the same?,"SELECT SUM(iif(start_station_id = end_station_id, 1, 0)) FROM trip","CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);
Sample rows from `trip`:
4069, 174, 8/29/2013 9:08, 2nd at South Park, 64, 8/29/2013 9:11, 2nd at South Park, 64, 288, Subscriber, 94114
4073, 1067, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:42, San Francisco Caltrain 2 (330 Townsend), 69, 321, Subscriber, 94703
4074, 1131, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:43, San Francisco Caltrain 2 (330 Townsend), 69, 317, Subscriber, 94115

","CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat REAL,
  long REAL,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);
Sample rows from `station`:
2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013
3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013
4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013

CREATE TABLE `status` (
  station_id INTEGER,
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);
Sample rows from `status`:
2, 2, 25, 2013/08/29 12:06:01
2, 2, 25, 2013/08/29 12:07:01
2, 2, 25, 2013/08/29 12:08:01

CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);
Sample rows from `trip`:
4069, 174, 8/29/2013 9:08, 2nd at South Park, 64, 8/29/2013 9:11, 2nd at South Park, 64, 288, Subscriber, 94114
4073, 1067, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:42, San Francisco Caltrain 2 (330 Townsend), 69, 321, Subscriber, 94703
4074, 1131, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:43, San Francisco Caltrain 2 (330 Townsend), 69, 317, Subscriber, 94115

CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches REAL,
  mean_sea_level_pressure_inches REAL,
  min_sea_level_pressure_inches REAL,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches TEXT,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code TEXT
);
Sample rows from `weather`:
8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107
8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30.0, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107
8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30.0, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107

",trip,start_station_id,"station, status, trip, weather"
retail_complains,How many days delay for the complaint call from Mr. Brantley Julian Stanley on 2012/5/18?,"SELECT 365 * (strftime('%Y', t2.`date sent to company`) - strftime('%Y', t2.`date received`)) + 30 * (strftime('%M', t2.`date sent to company`) - strftime('%M', t2.`date received`)) + (strftime('%d', t2.`date sent to company`) - strftime('%d', t2.`date received`)) as days FROM client as t1 inner JOIN events as t2 ON t1.client_id = t2.client_id WHERE t2.`date received` = '2012-05-18' AND t1.sex = 'Male' AND t1.first = 'Brantley' AND t1.middle = 'Julian' AND t1.last = 'Stanley'","CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

","CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

","client, events","events.date sent to company, events.date received, client.client_id, events.client_id, client.sex, client.first, client.middle, client.last","state, callcenterlogs, client, district, events, reviews"
shakespeare,"What is the description of Act 1, Scene 2 in Twelfth Night?",SELECT t2.description FROM works as t1 inner JOIN chapters as t2 ON t1.id = t2.work_id WHERE t1.title = 'Twelfth Night' AND t2.act = 1 AND t2.scene = 2,"CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

","CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
chapters, 19648
characters, 1266
paragraphs, 666327

CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

","works, chapters","chapters.description, works.id, chapters.work_id, works.title, chapters.act, chapters.scene","chapters, sqlite_sequence, characters, paragraphs, works"
retail_complains,For how long was the complaint filed by Matthew Pierce on 2016/10/28 delayed?,"SELECT 365 * (strftime('%Y', t2.`date sent to company`) - strftime('%Y', t2.`date received`)) + 30 * (strftime('%M', t2.`date sent to company`) - strftime('%M', t2.`date received`)) + (strftime('%d', t2.`date sent to company`) - strftime('%d', t2.`date received`)) FROM client as t1 inner JOIN events as t2 ON t1.client_id = t2.client_id WHERE t1.first = 'Matthew' AND t1.last = 'Pierce' AND t2.`date received` = '2016-10-28'","CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

","CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

","client, events","events.date sent to company, events.date received, client.client_id, events.client_id, client.first, client.last","state, callcenterlogs, client, district, events, reviews"
airline,"Among the flights on 2018/8/1, how many of them were scheduled to depart from John F. Kennedy International in New York?","SELECT COUNT(t1.code) FROM airports as t1 inner JOIN airlines as t2 ON t1.code = t2.origin WHERE t2.fl_date = '2018/8/1' AND t1.description = 'New York, NY: John F. Kennedy International'","CREATE TABLE `airports` (
  Code TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `airports`:
01A, Afognak Lake, AK: Afognak Lake Airport
03A, Granite Mountain, AK: Bear Creek Mining Strip
04A, Lik, AK: Lik Mining Camp

CREATE TABLE `airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

","CREATE TABLE `Air Carriers` (
  Code INTEGER,
  Description TEXT
);
Sample rows from `Air Carriers`:
19031, Mackey International Inc.: MAC
19032, Munz Northern Airlines Inc.: XY
19033, Cochise Airlines Inc.: COC

CREATE TABLE `Airports` (
  Code TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `Airports`:
01A, Afognak Lake, AK: Afognak Lake Airport
03A, Granite Mountain, AK: Bear Creek Mining Strip
04A, Lik, AK: Lik Mining Camp

CREATE TABLE `Airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `Airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

","airports, airlines","airports.code, airlines.origin, airlines.fl_date, airports.description","Air Carriers, Airports, Airlines"
social_media,What is the average number of likes for a tweet posted by a male user on Mondays?,SELECT SUM(t1.likes) / COUNT(t1.tweetid) FROM twitter as t1 inner JOIN user as t2 ON t1.userid = t2.userid WHERE t2.gender = 'Male' AND t1.weekday = 'Monday',"CREATE TABLE `twitter` (
  TweetID TEXT PRIMARY KEY,
  Weekday TEXT,
  Hour INTEGER,
  Day INTEGER,
  Lang TEXT,
  IsReshare TEXT,
  Reach INTEGER,
  RetweetCount INTEGER,
  Likes INTEGER,
  Klout INTEGER,
  Sentiment REAL,
  text TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  UserID TEXT REFERENCES user(UserID)
);
Sample rows from `twitter`:
tw-682712873332805633, Thursday, 17, 31, en, FALSE, 44, 0, 0, 35, 0.0, We are hiring: Senior Software Engineer - Proto http://www.reqcloud.com/jobs/719865/?k=0LaPxXuFwczs1e32ZURJKrgCIDMQtRO7BquFSQthUKY&utm_source=twitter&utm_campaign=reqCloud_JobPost #job @awscloud #job #protocol #networking #aws #mediastreaming, 3751, tw-40932430
tw-682713045357998080, Thursday, 17, 31, en, TRUE, 1810, 5, 0, 53, 2.0, RT @CodeMineStatus: This is true Amazon Web Services https://aws.amazon.com/ #php #html #html5 #css #webdesign #seo #java #javascript htt, 3989, tw-3179389829
tw-682713219375476736, Thursday, 17, 31, en, FALSE, 282, 0, 0, 47, 0.0, Devops Engineer Aws Ansible Cassandra Mysql Ubuntu Ruby On Rails Jobs in Austin TX #Austin #TX #jobs #jobsearch https://www.jobfindly.com/devops-engineer-aws-ansible-cassandra-mysql-ubuntu-ruby-on-rails-jobs-austin-tx.html, 3741, tw-4624808414

CREATE TABLE `user` (
  UserID TEXT PRIMARY KEY,
  Gender TEXT
);
Sample rows from `user`:
tw-1267804344, Unknown
tw-27229880, Male
tw-199664730, Male

","CREATE TABLE `location` (
  LocationID INTEGER,
  Country TEXT,
  State TEXT,
  StateCode TEXT,
  City TEXT
);
Sample rows from `location`:
1, Albania, Elbasan, AL, Elbasan
2, Albania, Tirane, AL, Tirana
3, Algeria, Souk Ahras, DZ, Souk Ahras

CREATE TABLE `user` (
  UserID TEXT PRIMARY KEY,
  Gender TEXT
);
Sample rows from `user`:
tw-1267804344, Unknown
tw-27229880, Male
tw-199664730, Male

CREATE TABLE `twitter` (
  TweetID TEXT PRIMARY KEY,
  Weekday TEXT,
  Hour INTEGER,
  Day INTEGER,
  Lang TEXT,
  IsReshare TEXT,
  Reach INTEGER,
  RetweetCount INTEGER,
  Likes INTEGER,
  Klout INTEGER,
  Sentiment REAL,
  text TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  UserID TEXT REFERENCES user(UserID)
);
Sample rows from `twitter`:
tw-682712873332805633, Thursday, 17, 31, en, FALSE, 44, 0, 0, 35, 0.0, We are hiring: Senior Software Engineer - Proto http://www.reqcloud.com/jobs/719865/?k=0LaPxXuFwczs1e32ZURJKrgCIDMQtRO7BquFSQthUKY&utm_source=twitter&utm_campaign=reqCloud_JobPost #job @awscloud #job #protocol #networking #aws #mediastreaming, 3751, tw-40932430
tw-682713045357998080, Thursday, 17, 31, en, TRUE, 1810, 5, 0, 53, 2.0, RT @CodeMineStatus: This is true Amazon Web Services https://aws.amazon.com/ #php #html #html5 #css #webdesign #seo #java #javascript htt, 3989, tw-3179389829
tw-682713219375476736, Thursday, 17, 31, en, FALSE, 282, 0, 0, 47, 0.0, Devops Engineer Aws Ansible Cassandra Mysql Ubuntu Ruby On Rails Jobs in Austin TX #Austin #TX #jobs #jobsearch https://www.jobfindly.com/devops-engineer-aws-ansible-cassandra-mysql-ubuntu-ruby-on-rails-jobs-austin-tx.html, 3741, tw-4624808414

","twitter, user","twitter.likes, twitter.tweetid, twitter.userid, user.userid, user.gender, twitter.weekday","location, user, twitter"
bike_share_1,Which trip id had the longest duration and the start station is in Redwood City?,SELECT t1.id FROM trip as t1 left JOIN station as t2 ON t2.name = t1.start_station_name WHERE t2.city = 'Redwood City' AND t1.duration = ( SELECT MAX(t1.duration) FROM trip as t1 left JOIN station as t2 ON t2.name = t1.start_station_name WHERE t2.city = 'Redwood City' ),"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);
Sample rows from `trip`:
4069, 174, 8/29/2013 9:08, 2nd at South Park, 64, 8/29/2013 9:11, 2nd at South Park, 64, 288, Subscriber, 94114
4073, 1067, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:42, San Francisco Caltrain 2 (330 Townsend), 69, 321, Subscriber, 94703
4074, 1131, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:43, San Francisco Caltrain 2 (330 Townsend), 69, 317, Subscriber, 94115

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat REAL,
  long REAL,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);
Sample rows from `station`:
2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013
3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013
4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013

","CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat REAL,
  long REAL,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);
Sample rows from `station`:
2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013
3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013
4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013

CREATE TABLE `status` (
  station_id INTEGER,
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);
Sample rows from `status`:
2, 2, 25, 2013/08/29 12:06:01
2, 2, 25, 2013/08/29 12:07:01
2, 2, 25, 2013/08/29 12:08:01

CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);
Sample rows from `trip`:
4069, 174, 8/29/2013 9:08, 2nd at South Park, 64, 8/29/2013 9:11, 2nd at South Park, 64, 288, Subscriber, 94114
4073, 1067, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:42, San Francisco Caltrain 2 (330 Townsend), 69, 321, Subscriber, 94703
4074, 1131, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:43, San Francisco Caltrain 2 (330 Townsend), 69, 317, Subscriber, 94115

CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches REAL,
  mean_sea_level_pressure_inches REAL,
  min_sea_level_pressure_inches REAL,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches TEXT,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code TEXT
);
Sample rows from `weather`:
8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107
8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30.0, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107
8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30.0, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107

","trip, station","trip.id, station.name, trip.start_station_name, station.city, trip.duration","station, status, trip, weather"
european_football_1,"For the Ligue 2 game that made the most goals, who is the winner of that game?",SELECT case when t1.ftr = 'H' then t1.hometeam else t1.awayteam end winner FROM matchs as t1 inner JOIN divisions as t2 ON t1.div = t2.division WHERE t2.name = 'Ligue 2' ORDER BY t1.ftag + t1.fthg DESC LIMIT 1,"CREATE TABLE `matchs` (
  Div TEXT REFERENCES divisions(division),
  Date DATE,
  HomeTeam TEXT,
  AwayTeam TEXT,
  FTHG INTEGER,
  FTAG INTEGER,
  FTR TEXT,
  season INTEGER
);
Sample rows from `matchs`:
B1, 2020-08-08, Club Brugge, Charleroi, 0, 1, A, 2021
B1, 2020-08-08, Antwerp, Mouscron, 1, 1, D, 2021
B1, 2020-08-08, Standard, Cercle Brugge, 1, 0, H, 2021

CREATE TABLE `divisions` (
  division TEXT PRIMARY KEY,
  name TEXT,
  country TEXT
);
Sample rows from `divisions`:
B1, Division 1A, Belgium
D1, Bundesliga, Deutschland
D2, 2. Bundesliga, Deutschland

","CREATE TABLE `divisions` (
  division TEXT PRIMARY KEY,
  name TEXT,
  country TEXT
);
Sample rows from `divisions`:
B1, Division 1A, Belgium
D1, Bundesliga, Deutschland
D2, 2. Bundesliga, Deutschland

CREATE TABLE `matchs` (
  Div TEXT REFERENCES divisions(division),
  Date DATE,
  HomeTeam TEXT,
  AwayTeam TEXT,
  FTHG INTEGER,
  FTAG INTEGER,
  FTR TEXT,
  season INTEGER
);
Sample rows from `matchs`:
B1, 2020-08-08, Club Brugge, Charleroi, 0, 1, A, 2021
B1, 2020-08-08, Antwerp, Mouscron, 1, 1, D, 2021
B1, 2020-08-08, Standard, Cercle Brugge, 1, 0, H, 2021

","matchs, divisions","matchs.ftr, matchs.hometeam, matchs.awayteam, winner, matchs.div, divisions.division, divisions.name, matchs.ftag, matchs.fthg","divisions, matchs"
beer_factory,What is the email address of the customer who made a purchase in transaction 100016?,SELECT t1.email FROM customers as t1 inner JOIN `transaction` as t2 ON t1.customerid = t2.customerid WHERE t2.transactionid = '100016',"CREATE TABLE `customers` (
  CustomerID INTEGER,
  First TEXT,
  Last TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER,
  Email TEXT,
  PhoneNumber TEXT,
  FirstPurchaseDate DATE,
  SubscribedToEmailList TEXT,
  Gender TEXT
);
Sample rows from `customers`:
101811, Kenneth, Walton, 6715 Commonwealth Dr, Sacramento, CA, 94256, walton.k76@fastmail.com, (916) 918-1561, 2013-05-30, FALSE, M
103508, Madeleine, Jones, 3603 Leola Way, Sacramento, CA, 94258, j_madeleine@gmail.com, (916) 186-9423, 2013-02-06, FALSE, F
104939, Damen, Wheeler, 6740 Branwood Way, Orangevale, CA, 95662, dwheeler@outlook.com, (916) 164-1156, 2013-04-11, FALSE, M

CREATE TABLE `transaction` (
  TransactionID INTEGER,
  CreditCardNumber INTEGER,
  CustomerID INTEGER REFERENCES customers(CustomerID),
  TransactionDate DATE,
  CreditCardType TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  RootBeerID INTEGER REFERENCES rootbeer(RootBeerID),
  PurchasePrice REAL
);
Sample rows from `transaction`:
100000, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105661, 3.0
100001, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105798, 3.0
100002, 6011583832864739, 864896, 2014-07-07, Discover, 2, 102514, 3.0

","CREATE TABLE `customers` (
  CustomerID INTEGER,
  First TEXT,
  Last TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER,
  Email TEXT,
  PhoneNumber TEXT,
  FirstPurchaseDate DATE,
  SubscribedToEmailList TEXT,
  Gender TEXT
);
Sample rows from `customers`:
101811, Kenneth, Walton, 6715 Commonwealth Dr, Sacramento, CA, 94256, walton.k76@fastmail.com, (916) 918-1561, 2013-05-30, FALSE, M
103508, Madeleine, Jones, 3603 Leola Way, Sacramento, CA, 94258, j_madeleine@gmail.com, (916) 186-9423, 2013-02-06, FALSE, F
104939, Damen, Wheeler, 6740 Branwood Way, Orangevale, CA, 95662, dwheeler@outlook.com, (916) 164-1156, 2013-04-11, FALSE, M

CREATE TABLE `geolocation` (
  LocationID INTEGER REFERENCES location(LocationID),
  Latitude REAL,
  Longitude REAL
);
Sample rows from `geolocation`:
0, 0.0, 0.0
1, 38.566129, -121.426432
2, 38.559615, -121.42243

CREATE TABLE `location` (
  LocationID INTEGER REFERENCES geolocation(LocationID),
  LocationName TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER
);
Sample rows from `location`:
0, LOST, None, None, None, None
1, Sac State American River Courtyard, 6000 J St, Sacramento, CA, 95819
2, Sac State Union, 6000 J St, Sacramento, CA, 95819

CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

CREATE TABLE `rootbeerreview` (
  CustomerID INTEGER PRIMARY KEY REFERENCES customers(CustomerID),
  BrandID INTEGER PRIMARY KEY REFERENCES rootbeerbrand(BrandID),
  StarRating INTEGER,
  ReviewDate DATE,
  Review TEXT
);
Sample rows from `rootbeerreview`:
101811, 10012, 5, 2013-07-15, None
101811, 10014, 1, 2013-07-08, None
101811, 10015, 3, 2013-07-25, None

CREATE TABLE `transaction` (
  TransactionID INTEGER,
  CreditCardNumber INTEGER,
  CustomerID INTEGER REFERENCES customers(CustomerID),
  TransactionDate DATE,
  CreditCardType TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  RootBeerID INTEGER REFERENCES rootbeer(RootBeerID),
  PurchasePrice REAL
);
Sample rows from `transaction`:
100000, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105661, 3.0
100001, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105798, 3.0
100002, 6011583832864739, 864896, 2014-07-07, Discover, 2, 102514, 3.0

","customers, transaction","customers.email, customers.customerid, transaction.customerid, transaction.transactionid","customers, geolocation, location, rootbeerbrand, rootbeer, rootbeerreview, transaction"
shipping,How many shipments were delivered by the oldest truck model?,SELECT COUNT(*) FROM truck as t1 inner JOIN shipment as t2 ON t1.truck_id = t2.truck_id GROUP BY t1.model_year ORDER BY t1.model_year asC LIMIT 1,"CREATE TABLE `truck` (
  truck_id INTEGER,
  make TEXT,
  model_year INTEGER
);
Sample rows from `truck`:
1, Peterbilt, 2005
2, Mack, 2006
3, Peterbilt, 2007

CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

","CREATE TABLE `city` (
  city_id INTEGER,
  city_name TEXT,
  state TEXT,
  population INTEGER,
  area REAL
);
Sample rows from `city`:
100, Union City, New Jersey, 67088, 1.3
101, Huntington Park, California, 61348, 3.0
102, Passaic, New Jersey, 67861, 3.1

CREATE TABLE `customer` (
  cust_id INTEGER,
  cust_name TEXT,
  annual_revenue INTEGER,
  cust_type TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip REAL,
  phone TEXT
);
Sample rows from `customer`:
193, Advanced Fabricators, 39588651, manufacturer, 5141 Summit Boulevard, West Palm Beach, FL, 33415.0, (561) 683-3535
304, Pard's Trailer Sales, 17158109, wholesaler, 5910 South 300 West, Salt Lake City, UT, 84107.0, (801) 262-4864
314, Saar Enterprises, Inc., 47403613, retailer, 11687 192nd Street, Council Bluffs, IA, 51503.0, (712) 366-4929

CREATE TABLE `driver` (
  driver_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip_code INTEGER,
  phone TEXT
);
Sample rows from `driver`:
20, Sue, Newell, 268 Richmond Ave, Memphis, TN, 38106, (901) 774-6569
21, Andrea, Simons, 3574 Oak Limb Cv, Memphis, TN, 38135, (901) 384-0984
22, Roger, McHaney, 1839 S Orleans St, Memphis, TN, 38106, (901) 948-1043

CREATE TABLE `truck` (
  truck_id INTEGER,
  make TEXT,
  model_year INTEGER
);
Sample rows from `truck`:
1, Peterbilt, 2005
2, Mack, 2006
3, Peterbilt, 2007

CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

","truck, shipment","truck.truck_id, shipment.truck_id, truck.model_year","city, customer, driver, truck, shipment"
movies_4,List the person IDs of the second film editors in Movie No. 12.,SELECT person_id FROM movie_crew WHERE movie_id = 12 AND job = 'Second Film Editor',"CREATE TABLE `movie_crew` (
  movie_id INTEGER REFERENCES movie(movie_id),
  person_id INTEGER REFERENCES person(person_id),
  department_id INTEGER REFERENCES department(department_id),
  job TEXT
);
Sample rows from `movie_crew`:
285, 120, 1, Director of Photography
285, 1704, 2, Director
285, 770, 3, Producer

","CREATE TABLE `country` (
  country_id INTEGER,
  country_iso_code TEXT,
  country_name TEXT
);
Sample rows from `country`:
128, AE, United Arab Emirates
129, AF, Afghanistan
130, AO, Angola

CREATE TABLE `department` (
  department_id INTEGER,
  department_name TEXT
);
Sample rows from `department`:
1, Camera
2, Directing
3, Production

CREATE TABLE `gender` (
  gender_id INTEGER,
  gender TEXT
);
Sample rows from `gender`:
0, Unspecified
1, Female
2, Male

CREATE TABLE `genre` (
  genre_id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
12, Adventure
14, Fantasy
16, Animation

CREATE TABLE `keyword` (
  keyword_id INTEGER,
  keyword_name TEXT
);
Sample rows from `keyword`:
30, individual
65, holiday
74, germany

CREATE TABLE `language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `language`:
24574, en, English
24575, sv, svenska
24576, de, Deutsch

CREATE TABLE `language_role` (
  role_id INTEGER,
  language_role TEXT
);
Sample rows from `language_role`:
1, Original
2, Spoken

CREATE TABLE `movie` (
  movie_id INTEGER,
  title TEXT,
  budget INTEGER,
  homepage TEXT,
  overview TEXT,
  popularity REAL,
  release_date DATE,
  revenue INTEGER,
  runtime INTEGER,
  movie_status TEXT,
  tagline TEXT,
  vote_average REAL,
  vote_count INTEGER
);
Sample rows from `movie`:
5, Four Rooms, 4000000, , It's Ted the Bellhop's first night on the job...and the hotel's very unusual guests are about to place him in some outrageous predicaments. It seems that this evening's room service is serving up one unbelievable happening after another., 22.87623, 1995-12-09, 4300000, 98, Released, Twelve outrageous guests. Four scandalous requests. And one lone bellhop, in his first day on the job, who's in for the wildest New year's Eve of his life., 6.5, 530
11, Star Wars, 11000000, http://www.starwars.com/films/star-wars-episode-iv-a-new-hope, Princess Leia is captured and held hostage by the evil Imperial forces in their effort to take over the galactic Empire. Venturesome Luke Skywalker and dashing captain Han Solo team together with the loveable robot duo R2-D2 and C-3PO to rescue the beauti, 126.393695, 1977-05-25, 775398007, 121, Released, A long time ago in a galaxy far, far away..., 8.1, 6624
12, Finding Nemo, 94000000, http://movies.disney.com/finding-nemo, Nemo, an adventurous young clownfish, is unexpectedly taken from his Great Barrier Reef home to a dentist's office aquarium. It's up to his worrisome father Marlin and a friendly but forgetful fish Dory to bring Nemo home -- meeting vegetarian sharks, sur, 85.688789, 2003-05-30, 940335536, 100, Released, There are 3.7 trillion fish in the ocean, they're looking for one., 7.6, 6122

CREATE TABLE `movie_genres` (
  movie_id INTEGER REFERENCES movie(movie_id),
  genre_id INTEGER REFERENCES genre(genre_id)
);
Sample rows from `movie_genres`:
5, 35
5, 80
11, 12

CREATE TABLE `movie_languages` (
  movie_id INTEGER REFERENCES movie(movie_id),
  language_id INTEGER REFERENCES language(language_id),
  language_role_id INTEGER REFERENCES language_role(role_id)
);
Sample rows from `movie_languages`:
5, 24574, 2
11, 24574, 2
12, 24574, 2

CREATE TABLE `person` (
  person_id INTEGER,
  person_name TEXT
);
Sample rows from `person`:
1, George Lucas
2, Mark Hamill
3, Harrison Ford

CREATE TABLE `movie_crew` (
  movie_id INTEGER REFERENCES movie(movie_id),
  person_id INTEGER REFERENCES person(person_id),
  department_id INTEGER REFERENCES department(department_id),
  job TEXT
);
Sample rows from `movie_crew`:
285, 120, 1, Director of Photography
285, 1704, 2, Director
285, 770, 3, Producer

CREATE TABLE `production_company` (
  company_id INTEGER,
  company_name TEXT
);
Sample rows from `production_company`:
1, Lucasfilm
2, Walt Disney Pictures
3, Pixar Animation Studios

CREATE TABLE `production_country` (
  movie_id INTEGER REFERENCES movie(movie_id),
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `production_country`:
5, 214
11, 214
12, 214

CREATE TABLE `movie_cast` (
  movie_id INTEGER REFERENCES movie(movie_id),
  person_id INTEGER REFERENCES person(person_id),
  character_name TEXT,
  gender_id INTEGER REFERENCES gender(gender_id),
  cast_order INTEGER
);
Sample rows from `movie_cast`:
285, 85, Captain Jack Sparrow, 2, 0
285, 114, Will Turner, 2, 1
285, 116, Elizabeth Swann, 1, 2

CREATE TABLE `movie_keywords` (
  movie_id INTEGER REFERENCES movie(None),
  keyword_id INTEGER REFERENCES keyword(None)
);
Sample rows from `movie_keywords`:
5, 612
5, 613
5, 616

CREATE TABLE `movie_company` (
  movie_id INTEGER REFERENCES movie(None),
  company_id INTEGER REFERENCES production_company(None)
);
Sample rows from `movie_company`:
5, 14
5, 59
11, 1

",movie_crew,"person_id, movie_id, job","country, department, gender, genre, keyword, language, language_role, movie, movie_genres, movie_languages, person, movie_crew, production_company, production_country, movie_cast, movie_keywords, movie_company"
language_corpus,Indicate if there is any pair formed by the words fukunaga and d'egees.,SELECT case when COUNT(t1.wid) > 0 then 'yes' else 'no' end FROM words as t1 inner JOIN biwords as t2 ON t1.wid = t2.w1st OR t1.wid = t2.w2nd WHERE t2.w1st = ( SELECT wid FROM words WHERE t1.word = 'fukunaga' ) AND t2.w2nd = ( SELECT wid FROM words WHERE word LIKE 'd%egees' ),"CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

","CREATE TABLE `langs` (
  lid INTEGER,
  lang TEXT PRIMARY KEY,
  locale TEXT PRIMARY KEY,
  pages INTEGER,
  words INTEGER
);
Sample rows from `langs`:
1, ca, ca_ES, 1129144, 2764996

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
langs, 1
pages, 1129144
words, 2764996

CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `langs_words` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `langs_words`:
1, 1, 242
1, 2, 16841
1, 3, 48700

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

","words, biwords","words.wid, biwords.w1st, biwords.w2nd, wid, words.word, word","langs, sqlite_sequence, pages, words, langs_words, pages_words, biwords"
video_games,How many games were released in 1981?,SELECt COUNT(t.id) FROM game_platform as t WHERE t.release_year = 1981,"CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

","CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

",game_platform,"game_platform.id, game_platform.release_year","genre, game, platform, publisher, game_publisher, game_platform, region, region_sales"
app_store,What is the name and category of the app with the highest amount of -1 sentiment polarity score?,"SELECT DISTINCT t1.app, t1.category FROM playstore as t1 inner JOIN user_reviews as t2 ON t1.app = t2.app WHERE t2.sentiment_polarity = '-1.0'","CREATE TABLE `playstore` (
  App TEXT,
  Category TEXT,
  Rating REAL,
  Reviews INTEGER,
  Size TEXT,
  Installs TEXT,
  Type TEXT,
  Price TEXT,
  Content Rating TEXT,
  Genres TEXT
);
Sample rows from `playstore`:
Photo Editor & Candy Camera & Grid & ScrapBook, ART_AND_DESIGN, 4.1, 159, 19M, 10,000+, Free, 0, Everyone, Art & Design
Coloring book moana, ART_AND_DESIGN, 3.9, 967, 14M, 500,000+, Free, 0, Everyone, Art & Design;Pretend Play
U Launcher Lite – FREE Live Cool Themes, Hide Apps, ART_AND_DESIGN, 4.7, 87510, 8.7M, 5,000,000+, Free, 0, Everyone, Art & Design

CREATE TABLE `user_reviews` (
  App TEXT REFERENCES playstore(App),
  Translated_Review TEXT,
  Sentiment TEXT,
  Sentiment_Polarity TEXT,
  Sentiment_Subjectivity TEXT
);
Sample rows from `user_reviews`:
10 Best Foods for You, I like eat delicious food. That's I'm cooking food myself, case ""10 Best Foods"" helps lot, also ""Best Before (Shelf Life)"", Positive, 1.0, 0.5333333333333333
10 Best Foods for You, This help eating healthy exercise regular basis, Positive, 0.25, 0.28846153846153844
10 Best Foods for You, nan, nan, nan, nan

","CREATE TABLE `playstore` (
  App TEXT,
  Category TEXT,
  Rating REAL,
  Reviews INTEGER,
  Size TEXT,
  Installs TEXT,
  Type TEXT,
  Price TEXT,
  Content Rating TEXT,
  Genres TEXT
);
Sample rows from `playstore`:
Photo Editor & Candy Camera & Grid & ScrapBook, ART_AND_DESIGN, 4.1, 159, 19M, 10,000+, Free, 0, Everyone, Art & Design
Coloring book moana, ART_AND_DESIGN, 3.9, 967, 14M, 500,000+, Free, 0, Everyone, Art & Design;Pretend Play
U Launcher Lite – FREE Live Cool Themes, Hide Apps, ART_AND_DESIGN, 4.7, 87510, 8.7M, 5,000,000+, Free, 0, Everyone, Art & Design

CREATE TABLE `user_reviews` (
  App TEXT REFERENCES playstore(App),
  Translated_Review TEXT,
  Sentiment TEXT,
  Sentiment_Polarity TEXT,
  Sentiment_Subjectivity TEXT
);
Sample rows from `user_reviews`:
10 Best Foods for You, I like eat delicious food. That's I'm cooking food myself, case ""10 Best Foods"" helps lot, also ""Best Before (Shelf Life)"", Positive, 1.0, 0.5333333333333333
10 Best Foods for You, This help eating healthy exercise regular basis, Positive, 0.25, 0.28846153846153844
10 Best Foods for You, nan, nan, nan, nan

","playstore, user_reviews","playstore.app, playstore.category, user_reviews.app, user_reviews.sentiment_polarity","playstore, user_reviews"
regional_sales,How many CDP stores are there in California?,SELECT SUM(case when state = 'California' AND type = 'CDP' then 1 else 0 end) FROM `store locations`,"CREATE TABLE `store locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `store locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  Customer Names TEXT
);
Sample rows from `Customers`:
1, Avon Corp
2, WakeFern 
3, Elorac, Corp

CREATE TABLE `Products` (
  ProductID INTEGER,
  Product Name TEXT
);
Sample rows from `Products`:
1, Cookware
2, Photo Frames
3, Table Lamps

CREATE TABLE `Regions` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `Regions`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `Sales Team` (
  SalesTeamID INTEGER,
  Sales Team TEXT,
  Region TEXT
);
Sample rows from `Sales Team`:
1, Adam Hernandez, Northeast
2, Keith Griffin, Northeast
3, Jerry Green, West

CREATE TABLE `Store Locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `Store Locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

CREATE TABLE `Sales Orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `Sales Orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

",store locations,state,"Customers, Products, Regions, Sales Team, Store Locations, Sales Orders"
coinmarketcap,What is the average monthly circulating supply for Frozen in 2014.,"SELECT cast(SUM(t2.circulating_supply) as real) / 12 FROM coins as t1 inner JOIN historical as t2 ON t1.id = t2.coin_id WHERE t1.name = 'Frozen' AND strftime('%Y', t2.date) = '2014'","CREATE TABLE `coins` (
  id INTEGER,
  name TEXT,
  slug TEXT,
  symbol TEXT,
  status TEXT,
  category TEXT,
  description TEXT,
  subreddit TEXT,
  notice TEXT,
  tags TEXT,
  tag_names TEXT,
  website TEXT,
  platform_id INTEGER,
  date_added TEXT,
  date_launched TEXT
);
Sample rows from `coins`:
1, Bitcoin, bitcoin, BTC, active, coin, ## **What Is Bitcoin (BTC)?**\n\nBitcoin is a decentralized cryptocurrency originally described in a 2008 [whitepaper](https://coinmarketcap.com/alexandria/glossary/whitepaper) by a person, or group of people, using the alias [Satoshi Nakamoto](https://co, bitcoin, None, mineable, pow, sha-256, store-of-value, state-channels, coinbase-ventures-portfolio, three-arrows-capital-portfolio, polychain-capital-portfolio, binance-labs-portfolio, arrington-xrp-capital, blockchain-capital-portfolio, boostvc-portfolio, cms-holdings-, Mineable, PoW, SHA-256, Store of Value, State channels, Coinbase Ventures Portfolio, Three Arrows Capital Portfolio, Polychain Capital Portfolio, Binance Labs Portfolio, Arrington XRP capital, Blockchain Capital Portfolio, BoostVC Portfolio, CMS Holdings , https://bitcoin.org/, None, 2013-04-28T00:00:00.000Z, None
2, Litecoin, litecoin, LTC, active, coin, ## What Is Litecoin (LTC)?\n\nLitecoin (LTC) is a cryptocurrency that was designed to provide fast, secure and low-cost payments by leveraging the unique properties of [blockchain](https://coinmarketcap.com/alexandria/glossary/blockchain) technology. \n\n, litecoin, None, mineable, pow, scrypt, medium-of-exchange, binance-chain, Mineable, PoW, Scrypt, Medium of Exchange, Binance Chain, https://litecoin.org/, None, 2013-04-28T00:00:00.000Z, None
3, Namecoin, namecoin, NMC, active, coin, Namecoin (NMC) is a cryptocurrency . Users are able to generate NMC through the process of mining. Namecoin has a current supply of 14,736,400. The last known price of Namecoin is 2.14833562 USD and is up 0.40 over the last 24 hours. It is currently tradi, namecoin, None, mineable, pow, sha-256, platform, Mineable, PoW, SHA-256, Platform, https://www.namecoin.org/, None, 2013-04-28T00:00:00.000Z, None

CREATE TABLE `historical` (
  date DATE,
  coin_id INTEGER,
  cmc_rank INTEGER,
  market_cap REAL,
  price REAL,
  open REAL,
  high REAL,
  low REAL,
  close REAL,
  time_high TEXT,
  time_low TEXT,
  volume_24h REAL,
  percent_change_1h REAL,
  percent_change_24h REAL,
  percent_change_7d REAL,
  circulating_supply REAL,
  total_supply REAL,
  max_supply REAL,
  num_market_pairs INTEGER
);
Sample rows from `historical`:
2013-04-28, 1, 1, 1488566971.9558687, 134.210021972656, None, None, None, None, None, None, 0.0, 0.639231, None, None, 11091325.0, 11091325.0, 21000000.0, None
2013-04-28, 2, 2, 74637021.56790735, 4.34840488433838, None, None, None, None, None, None, 0.0, 0.799273, None, None, 17164230.0, 17164230.0, 84000000.0, None
2013-04-28, 5, 3, 7250186.647688276, 0.386524856090546, None, None, None, None, None, None, 0.0, -0.934763, None, None, 18757362.0, 18757362.0, None, None

","CREATE TABLE `coins` (
  id INTEGER,
  name TEXT,
  slug TEXT,
  symbol TEXT,
  status TEXT,
  category TEXT,
  description TEXT,
  subreddit TEXT,
  notice TEXT,
  tags TEXT,
  tag_names TEXT,
  website TEXT,
  platform_id INTEGER,
  date_added TEXT,
  date_launched TEXT
);
Sample rows from `coins`:
1, Bitcoin, bitcoin, BTC, active, coin, ## **What Is Bitcoin (BTC)?**\n\nBitcoin is a decentralized cryptocurrency originally described in a 2008 [whitepaper](https://coinmarketcap.com/alexandria/glossary/whitepaper) by a person, or group of people, using the alias [Satoshi Nakamoto](https://co, bitcoin, None, mineable, pow, sha-256, store-of-value, state-channels, coinbase-ventures-portfolio, three-arrows-capital-portfolio, polychain-capital-portfolio, binance-labs-portfolio, arrington-xrp-capital, blockchain-capital-portfolio, boostvc-portfolio, cms-holdings-, Mineable, PoW, SHA-256, Store of Value, State channels, Coinbase Ventures Portfolio, Three Arrows Capital Portfolio, Polychain Capital Portfolio, Binance Labs Portfolio, Arrington XRP capital, Blockchain Capital Portfolio, BoostVC Portfolio, CMS Holdings , https://bitcoin.org/, None, 2013-04-28T00:00:00.000Z, None
2, Litecoin, litecoin, LTC, active, coin, ## What Is Litecoin (LTC)?\n\nLitecoin (LTC) is a cryptocurrency that was designed to provide fast, secure and low-cost payments by leveraging the unique properties of [blockchain](https://coinmarketcap.com/alexandria/glossary/blockchain) technology. \n\n, litecoin, None, mineable, pow, scrypt, medium-of-exchange, binance-chain, Mineable, PoW, Scrypt, Medium of Exchange, Binance Chain, https://litecoin.org/, None, 2013-04-28T00:00:00.000Z, None
3, Namecoin, namecoin, NMC, active, coin, Namecoin (NMC) is a cryptocurrency . Users are able to generate NMC through the process of mining. Namecoin has a current supply of 14,736,400. The last known price of Namecoin is 2.14833562 USD and is up 0.40 over the last 24 hours. It is currently tradi, namecoin, None, mineable, pow, sha-256, platform, Mineable, PoW, SHA-256, Platform, https://www.namecoin.org/, None, 2013-04-28T00:00:00.000Z, None

CREATE TABLE `historical` (
  date DATE,
  coin_id INTEGER,
  cmc_rank INTEGER,
  market_cap REAL,
  price REAL,
  open REAL,
  high REAL,
  low REAL,
  close REAL,
  time_high TEXT,
  time_low TEXT,
  volume_24h REAL,
  percent_change_1h REAL,
  percent_change_24h REAL,
  percent_change_7d REAL,
  circulating_supply REAL,
  total_supply REAL,
  max_supply REAL,
  num_market_pairs INTEGER
);
Sample rows from `historical`:
2013-04-28, 1, 1, 1488566971.9558687, 134.210021972656, None, None, None, None, None, None, 0.0, 0.639231, None, None, 11091325.0, 11091325.0, 21000000.0, None
2013-04-28, 2, 2, 74637021.56790735, 4.34840488433838, None, None, None, None, None, None, 0.0, 0.799273, None, None, 17164230.0, 17164230.0, 84000000.0, None
2013-04-28, 5, 3, 7250186.647688276, 0.386524856090546, None, None, None, None, None, None, 0.0, -0.934763, None, None, 18757362.0, 18757362.0, None, None

","coins, historical","historical.circulating_supply, coins.id, historical.coin_id, coins.name, historical.date","coins, historical"
retail_world,Through which companies have products been shipped the most times to the city of Aachen?,SELECT t2.companyname FROM orders as t1 inner JOIN shippers as t2 ON t1.shipvia = t2.shipperid WHERE t1.shipcity = 'Aachen' GROUP BY t2.companyname ORDER BY COUNT(t1.shipvia) DESC LIMIT 1,"CREATE TABLE `orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

","orders, shippers","shippers.companyname, orders.shipvia, shippers.shipperid, orders.shipcity","sqlite_sequence, Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails"
image_and_language,What are the id of all the objects belonging to the transportation class?,"SELECT obj_class_id FROM obj_classes WHERE obj_class IN ('bus', 'train', 'aeroplane', 'car', 'etc')","CREATE TABLE `obj_classes` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `obj_classes`:
0, awning
1, goggles
2, dot

","CREATE TABLE `ATT_CLASSES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `ATT_CLASSES`:
0, building s
1, indoors
2, cluttered

CREATE TABLE `OBJ_CLASSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLASSES`:
0, awning
1, goggles
2, dot

CREATE TABLE `IMG_OBJ` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `IMG_OBJ`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `IMG_OBJ_ATT` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_OBJ_ATT`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `PRED_CLASSES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `PRED_CLASSES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `IMG_REL` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_REL`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

",obj_classes,"obj_class_id, obj_class","ATT_CLASSES, OBJ_CLASSES, IMG_OBJ, IMG_OBJ_ATT, PRED_CLASSES, IMG_REL"
cs_semester,Please list the full names of all the students who took the course Machine Learning Theory.,"SELECT t1.f_name, t1.l_name FROM student as t1 inner JOIN registration as t2 ON t1.student_id = t2.student_id inner JOIN course as t3 ON t2.course_id = t3.course_id WHERE t3.name = 'Machine Learning Theory'","CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

","CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

CREATE TABLE `prof` (
  prof_id INTEGER,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  popularity INTEGER,
  teachingability INTEGER,
  graduate_from TEXT
);
Sample rows from `prof`:
1, Male, Nathaniel, Pigford, npigford0@hku.hk, 3, 5, University of Washington
2, Male, Zhihua, Zhou, zzhihua@hku.hk, 2, 1, Beijing Polytechnic University
3, Male, Ogdon, Zywicki, ozywicki2@hku.hk, 2, 2, University of Boston

CREATE TABLE `RA` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `RA`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

","student, registration, course","student.f_name, student.l_name, student.student_id, registration.student_id, registration.course_id, course.course_id, course.name","course, prof, RA, registration, student"
cs_semester,"For the students with an intelligence of 5, list the full name and courses taken by them who have less than a 3 GPA.","SELECT t1.f_name, t1.l_name, t3.name FROM student as t1 inner JOIN registration as t2 ON t1.student_id = t2.student_id inner JOIN course as t3 ON t2.course_id = t3.course_id WHERE t1.intelligence = 5 AND t1.gpa < 3","CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

","CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

CREATE TABLE `prof` (
  prof_id INTEGER,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  popularity INTEGER,
  teachingability INTEGER,
  graduate_from TEXT
);
Sample rows from `prof`:
1, Male, Nathaniel, Pigford, npigford0@hku.hk, 3, 5, University of Washington
2, Male, Zhihua, Zhou, zzhihua@hku.hk, 2, 1, Beijing Polytechnic University
3, Male, Ogdon, Zywicki, ozywicki2@hku.hk, 2, 2, University of Boston

CREATE TABLE `RA` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `RA`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

","student, registration, course","student.f_name, student.l_name, course.name, student.student_id, registration.student_id, registration.course_id, course.course_id, student.intelligence, student.gpa","course, prof, RA, registration, student"
video_games,"Tell the genre of the game ""Resident Evil: Revelations"".",SELECT t2.genre_name FROM game as t1 inner JOIN genre as t2 ON t1.genre_id = t2.id WHERE t1.game_name = 'Resident Evil: Revelations',"CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

","CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

","game, genre","genre.genre_name, game.genre_id, genre.id, game.game_name","genre, game, platform, publisher, game_publisher, game_platform, region, region_sales"
public_review_platform,"For the only Yelp business in ""Yuma"" city, how many ""medium"" reviews did it get?",SELECT COUNT(t2.review_length) FROM business as t1 inner JOIN reviews as t2 ON t1.business_id = t2.business_id WHERE t1.city LIKE 'Yuma' AND t2.review_length LIKE 'Medium',"CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","business, reviews","reviews.review_length, business.business_id, reviews.business_id, business.city","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
menu,"On 1887-07-21, what was the event that lead to the creation of menu id 21380?",SELECT event FROM menu WHERE date = '1887-07-21' AND id = 21380,"CREATE TABLE `menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

","CREATE TABLE `Dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `Dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

CREATE TABLE `Menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `Menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

CREATE TABLE `MenuPage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `MenuPage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

CREATE TABLE `MenuItem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `MenuItem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

",menu,"event, id","Dish, Menu, MenuPage, MenuItem"
human_resources,"Which employee's job position requires a higher education level, Jose Rodriguez or Sandy Adams?","SELECT t1.firstname, t1.lastname FROM employee as t1  inner JOIN position as t2  ON t1.positionid = t2.positionid WHERE (t1.lastname = 'Adams' AND t1.firstname = 'Sandy') OR (t1.lastname = 'Rodriguez' AND t1.firstname = 'Jose') ORDER BY t2.educationrequired DESC LIMIT 1","CREATE TABLE `employee` (
  ssn TEXT PRIMARY KEY,
  lastname TEXT,
  firstname TEXT,
  hiredate TEXT,
  salary TEXT,
  gender TEXT,
  performance TEXT,
  positionID INTEGER REFERENCES position(positionID),
  locationID INTEGER REFERENCES location(locationID)
);
Sample rows from `employee`:
000-01-0000, Milgrom, Patricia, 10/1/04, US$57,500.00, F, Average, 2, 2
000-02-2222, Adams, Sandy, 1/15/01, US$19,500.00, F, Average, 3, 1
109-87-6543, Wood, Emily, 3/12/97, US$69,000.00, F, Average, 2, 5

CREATE TABLE `position` (
  positionID INTEGER,
  positiontitle TEXT,
  educationrequired TEXT,
  minsalary TEXT,
  maxsalary TEXT
);
Sample rows from `position`:
1, Account Representative, 4 year degree, US$25,000.00, US$75,000.00
2, Manager, 4 year degree, US$50,000.00, US$150,000.00
3, Trainee, 2 year degree, US$18,000.00, US$25,000.00

","CREATE TABLE `location` (
  locationID INTEGER,
  locationcity TEXT,
  address TEXT,
  state TEXT,
  zipcode INTEGER,
  officephone TEXT
);
Sample rows from `location`:
1, Atlanta, 450 Peachtree Rd, GA, 30316, (404)333-5555
2, Boston, 3 Commons Blvd, MA, 2190, (617)123-4444
3, Chicago, 500 Loop Highway, IL, 60620, (312)444-6666

CREATE TABLE `position` (
  positionID INTEGER,
  positiontitle TEXT,
  educationrequired TEXT,
  minsalary TEXT,
  maxsalary TEXT
);
Sample rows from `position`:
1, Account Representative, 4 year degree, US$25,000.00, US$75,000.00
2, Manager, 4 year degree, US$50,000.00, US$150,000.00
3, Trainee, 2 year degree, US$18,000.00, US$25,000.00

CREATE TABLE `employee` (
  ssn TEXT PRIMARY KEY,
  lastname TEXT,
  firstname TEXT,
  hiredate TEXT,
  salary TEXT,
  gender TEXT,
  performance TEXT,
  positionID INTEGER REFERENCES position(positionID),
  locationID INTEGER REFERENCES location(locationID)
);
Sample rows from `employee`:
000-01-0000, Milgrom, Patricia, 10/1/04, US$57,500.00, F, Average, 2, 2
000-02-2222, Adams, Sandy, 1/15/01, US$19,500.00, F, Average, 3, 1
109-87-6543, Wood, Emily, 3/12/97, US$69,000.00, F, Average, 2, 5

","employee, position","employee.firstname, employee.lastname, employee.positionid, position.positionid, position.educationrequired","location, position, employee"
bike_share_1,What is the average duration of trips for the starting station of Santa Clara at Almaden and what is the latitude and longitude of this station?,"SELECT AVG(t1.duration), t2.lat, t2.long FROM trip as t1 left JOIN station as t2 ON t2.name = t1.start_station_name left JOIN station as t3 ON t3.name = t1.end_station_name WHERE t1.start_station_name = 'Santa Clara at Almaden'","CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);
Sample rows from `trip`:
4069, 174, 8/29/2013 9:08, 2nd at South Park, 64, 8/29/2013 9:11, 2nd at South Park, 64, 288, Subscriber, 94114
4073, 1067, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:42, San Francisco Caltrain 2 (330 Townsend), 69, 321, Subscriber, 94703
4074, 1131, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:43, San Francisco Caltrain 2 (330 Townsend), 69, 317, Subscriber, 94115

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat REAL,
  long REAL,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);
Sample rows from `station`:
2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013
3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013
4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013

","CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat REAL,
  long REAL,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);
Sample rows from `station`:
2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013
3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013
4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013

CREATE TABLE `status` (
  station_id INTEGER,
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);
Sample rows from `status`:
2, 2, 25, 2013/08/29 12:06:01
2, 2, 25, 2013/08/29 12:07:01
2, 2, 25, 2013/08/29 12:08:01

CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);
Sample rows from `trip`:
4069, 174, 8/29/2013 9:08, 2nd at South Park, 64, 8/29/2013 9:11, 2nd at South Park, 64, 288, Subscriber, 94114
4073, 1067, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:42, San Francisco Caltrain 2 (330 Townsend), 69, 321, Subscriber, 94703
4074, 1131, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:43, San Francisco Caltrain 2 (330 Townsend), 69, 317, Subscriber, 94115

CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches REAL,
  mean_sea_level_pressure_inches REAL,
  min_sea_level_pressure_inches REAL,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches TEXT,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code TEXT
);
Sample rows from `weather`:
8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107
8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30.0, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107
8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30.0, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107

","trip, station","trip.duration, station.lat, station.long, station.name, trip.start_station_name, trip.end_station_name","station, status, trip, weather"
chicago_crime,"More crimes happened in which community area in January, 2018, Woodlawn or Lincoln Square?","SELECT t1.community_area_name FROM community_area as t1 inner JOIN crime as t2 ON t1.community_area_no = t2.community_area_no WHERE t1.community_area_name IN ('Woodlawn', 'Lincoln Square') AND t2.date LIKE '%1/2018%' GROUP BY t1.community_area_name ORDER BY COUNT(t1.community_area_name) DESC LIMIT 1","CREATE TABLE `community_area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `community_area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","CREATE TABLE `Community_Area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `Community_Area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `District` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `District`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `FBI_Code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `FBI_Code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `IUCR` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `IUCR`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `Neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `Neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `Ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `Ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `Crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `Crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","community_area, crime","community_area.community_area_name, community_area.community_area_no, crime.community_area_no, crime.date","Community_Area, District, FBI_Code, IUCR, Neighborhood, Ward, Crime"
law_episode,"How many people had filled a role in the episode titled ""Cherished"", but did not show up in the on-screen credits?",SELECT COUNT(t1.episode_id) FROM episode as t1 inner JOIN credit as t2 ON t1.episode_id = t2.episode_id WHERE t1.title = 'Cherished' AND t2.credited = 'false',"CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `credit` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  person_id TEXT PRIMARY KEY REFERENCES Person(person_id),
  category TEXT,
  role TEXT,
  credited TEXT
);
Sample rows from `credit`:
tt0629204, nm0226352, Additional Crew, technical advisor, true
tt0629204, nm0506974, Additional Crew, production accountant, true
tt0629204, nm4103116, Additional Crew, production accountant, true

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
tt0629239, nun
tt0629239, priest
tt0629420, police officer

CREATE TABLE `Person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  series TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  person_id TEXT REFERENCES Person(person_id),
  role TEXT,
  result TEXT
);
Sample rows from `Award`:
258, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0937725, None, Winner
259, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0792309, None, Winner
260, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0049569, None, Winner

CREATE TABLE `Credit` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  person_id TEXT PRIMARY KEY REFERENCES Person(person_id),
  category TEXT,
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
tt0629204, nm0226352, Additional Crew, technical advisor, true
tt0629204, nm0506974, Additional Crew, production accountant, true
tt0629204, nm4103116, Additional Crew, production accountant, true

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
tt0629204, 10, 36, 17.7
tt0629204, 9, 39, 19.2
tt0629204, 8, 64, 31.5

","episode, credit","episode.episode_id, credit.episode_id, episode.title, credit.credited","Episode, Keyword, Person, Award, Credit, Vote"
computer_student,List the person IDs and course levels of the affiliated professors in faculty.,"SELECT t1.p_id, t3.courselevel FROM person as t1 inner JOIN taughtby as t2 ON t1.p_id = t2.p_id inner JOIN course as t3 ON t3.course_id = t2.course_id WHERE t1.hasposition = 'Faculty_aff'","CREATE TABLE `person` (
  p_id INTEGER,
  professor INTEGER,
  student INTEGER,
  hasPosition TEXT,
  inPhase TEXT,
  yearsInProgram TEXT
);
Sample rows from `person`:
3, 0, 1, 0, 0, 0
4, 0, 1, 0, 0, 0
5, 1, 0, Faculty, 0, 0

CREATE TABLE `taughtby` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `taughtby`:
0, 40
1, 40
2, 180

CREATE TABLE `course` (
  course_id INTEGER,
  courseLevel TEXT
);
Sample rows from `course`:
0, Level_500
1, Level_500
2, Level_500

","CREATE TABLE `course` (
  course_id INTEGER,
  courseLevel TEXT
);
Sample rows from `course`:
0, Level_500
1, Level_500
2, Level_500

CREATE TABLE `person` (
  p_id INTEGER,
  professor INTEGER,
  student INTEGER,
  hasPosition TEXT,
  inPhase TEXT,
  yearsInProgram TEXT
);
Sample rows from `person`:
3, 0, 1, 0, 0, 0
4, 0, 1, 0, 0, 0
5, 1, 0, Faculty, 0, 0

CREATE TABLE `advisedBy` (
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id),
  p_id_dummy INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `advisedBy`:
96, 5
118, 5
183, 5

CREATE TABLE `taughtBy` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `taughtBy`:
0, 40
1, 40
2, 180

","person, taughtby, course","person.p_id, course.courselevel, taughtby.p_id, course.course_id, taughtby.course_id, person.hasposition","course, person, advisedBy, taughtBy"
disney,"In which segment did the Walt Disney Company earned a bigger revenue in 1998, Studio Entertainment or Disney Media Networks?",SELECT case when 'Studio Entertainment[NI 1]' > 'Disney Media Networks' then 'Studio Entertainment[NI 1]' else 'Disney Media Networks' end FROM revenue WHERE `year` = 1998,"CREATE TABLE `revenue` (
  Year INTEGER,
  Studio Entertainment[NI 1] REAL,
  Disney Consumer Products[NI 2] REAL,
  Disney Interactive[NI 3][Rev 1] INTEGER,
  Walt Disney Parks and Resorts REAL,
  Disney Media Networks TEXT,
  Total INTEGER
);
Sample rows from `revenue`:
1991, 2593.0, 724.0, None, 2794.0, None, 6111
1992, 3115.0, 1081.0, None, 3306.0, None, 7502
1993, 3673.4, 1415.1, None, 3440.7, None, 8529

","CREATE TABLE `characters` (
  movie_title TEXT PRIMARY KEY,
  release_date TEXT,
  hero TEXT REFERENCES voice-actors(character),
  villian TEXT,
  song TEXT
);
Sample rows from `characters`:
Snow White and the Seven Dwarfs, 21-Dec-37, Snow White, Evil Queen, Some Day My Prince Will Come
Pinocchio, 7-Feb-40, Pinocchio, Stromboli, When You Wish upon a Star
Fantasia, 13-Nov-40, None, Chernabog, None

CREATE TABLE `director` (
  name TEXT PRIMARY KEY REFERENCES characters(movie_title),
  director TEXT
);
Sample rows from `director`:
Snow White and the Seven Dwarfs, David Hand
Pinocchio, Ben Sharpsteen
Fantasia, full credits

CREATE TABLE `movies_total_gross` (
  movie_title TEXT PRIMARY KEY REFERENCES characters(movie_title),
  release_date TEXT PRIMARY KEY,
  genre TEXT,
  MPAA_rating TEXT,
  total_gross TEXT,
  inflation_adjusted_gross TEXT
);
Sample rows from `movies_total_gross`:
Snow White and the Seven Dwarfs, Dec 21, 1937, Musical, G, $184,925,485, $5,228,953,251
Pinocchio, Feb 9, 1940, Adventure, G, $84,300,000, $2,188,229,052
Fantasia, Nov 13, 1940, Musical, G, $83,320,000, $2,187,090,808

CREATE TABLE `revenue` (
  Year INTEGER,
  Studio Entertainment[NI 1] REAL,
  Disney Consumer Products[NI 2] REAL,
  Disney Interactive[NI 3][Rev 1] INTEGER,
  Walt Disney Parks and Resorts REAL,
  Disney Media Networks TEXT,
  Total INTEGER
);
Sample rows from `revenue`:
1991, 2593.0, 724.0, None, 2794.0, None, 6111
1992, 3115.0, 1081.0, None, 3306.0, None, 7502
1993, 3673.4, 1415.1, None, 3440.7, None, 8529

CREATE TABLE `voice-actors` (
  character TEXT PRIMARY KEY,
  voice-actor TEXT,
  movie TEXT REFERENCES characters(movie_title)
);
Sample rows from `voice-actors`:
Abby Mallard, Joan Cusack, Chicken Little
Abigail Gabble, Monica Evans, The Aristocats
Abis Mal, Jason Alexander, The Return of Jafar

",revenue,year,"characters, director, movies_total_gross, revenue, voice-actors"
authors,How many papers were preprinted between the years 1990 and 2000?,SELECT COUNT(id) FROM paper WHERE year BETWEEN '1990' AND '2000' AND conferenceid = 0 AND journalid = 0,"CREATE TABLE `paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

","CREATE TABLE `Author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `Author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

CREATE TABLE `Conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

CREATE TABLE `Journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `Paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `Paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `PaperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `PaperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

",paper,"id, conferenceid, journalid","Author, Conference, Journal, Paper, PaperAuthor"
student_loan,What is the longest students absence duration from school?,"SELECT name, month FROM longest_absense_from_school WHERE `month` = ( SELECT MAX(month) FROM longest_absense_from_school )","CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

",longest_absense_from_school,"name, month","bool, person, disabled, enlist, filed_for_bankrupcy, longest_absense_from_school, male, no_payment_due, unemployed, enrolled"
retail_world,What are the highest salary earn by the the employee and what is his/her position in the company?,"SELECT salary, title FROM employees WHERE salary = ( SELECT MAX(salary) FROM employees )","CREATE TABLE `employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

",employees,"salary, title","sqlite_sequence, Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails"
university,List the ranking criteria under the Shanghai Ranking system.,SELECT t2.criteria_name FROM ranking_system as t1 inner JOIN ranking_criteria as t2 ON t1.id = t2.ranking_system_id WHERE t1.system_name = 'Shanghai Ranking',"CREATE TABLE `ranking_system` (
  id INTEGER,
  system_name TEXT
);
Sample rows from `ranking_system`:
1, Times Higher Education World University Ranking
2, Shanghai Ranking
3, Center for World University Rankings

CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

","CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

CREATE TABLE `ranking_system` (
  id INTEGER,
  system_name TEXT
);
Sample rows from `ranking_system`:
1, Times Higher Education World University Ranking
2, Shanghai Ranking
3, Center for World University Rankings

CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

","ranking_system, ranking_criteria","ranking_criteria.criteria_name, ranking_system.id, ranking_criteria.ranking_system_id, ranking_system.system_name","country, ranking_system, ranking_criteria, university, university_ranking_year, university_year"
simpson_episodes,Indicate the name and category of the most recent award received by the show.,"SELECT award, award_category FROM award WHERE result = 'Winner' ORDER BY year DESC LIMIT 1;","CREATE TABLE `award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

",award,"award, award_category","Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
codebase_comments,"Provide the tokenized name of the method ""Sky.Excel.ExcelBook.TypeConvert"".",SELECT nametokenized FROM method WHERE name = 'Sky.Excel.ExcelBook.TypeConvert',"CREATE TABLE `method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Method, 10860640
MethodParameter, 17514858
Repo, 156550

CREATE TABLE `Method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `Method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

CREATE TABLE `MethodParameter` (
  Id INTEGER,
  MethodId TEXT,
  Type TEXT,
  Name TEXT
);
Sample rows from `MethodParameter`:
1, 1, System.String, data
2, 2, System.Int32, i
3, 2, System.Int32, declstartpos

CREATE TABLE `Repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `Repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

CREATE TABLE `Solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `Solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

",method,"nametokenized, name","sqlite_sequence, Method, MethodParameter, Repo, Solution"
software_company,How many of the customer's reference ID that has a TRUE response?,SELECT COUNT(refid) FROM mailings1_2 WHERE response = 'true',"CREATE TABLE `mailings1_2` (
  REFID INTEGER REFERENCES Customers(None),
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `mailings1_2`:
0, 2007-02-01 12:00:00.0, false
1, 2007-02-01 12:00:00.0, false
2, 2007-02-01 12:00:00.0, false

","CREATE TABLE `Demog` (
  GEOID INTEGER,
  INHABITANTS_K REAL,
  INCOME_K REAL,
  A_VAR1 REAL,
  A_VAR2 REAL,
  A_VAR3 REAL,
  A_VAR4 REAL,
  A_VAR5 REAL,
  A_VAR6 REAL,
  A_VAR7 REAL,
  A_VAR8 REAL,
  A_VAR9 REAL,
  A_VAR10 REAL,
  A_VAR11 REAL,
  A_VAR12 REAL,
  A_VAR13 REAL,
  A_VAR14 REAL,
  A_VAR15 REAL,
  A_VAR16 REAL,
  A_VAR17 REAL,
  A_VAR18 REAL
);
Sample rows from `Demog`:
0, 30.046, 2631.47, 6.084, 5.79, 8.595, 3.935, 6.362, 8.626, 4.624, 8.324, 5.233, 6.232, 5.205, 8.231, 6.746, 8.679, 5.292, 3.5, 5.512, 5.783
1, 36.25, 3012.75, 4.604, 8.309, 6.007, 5.938, 8.773, 3.579, 6.349, 4.694, 6.884, 7.062, 7.319, 3.72, 6.405, 7.202, 4.932, 7.969, 8.15, 5.633
2, 47.645, 2192.41, 4.911, 8.557, 5.934, 6.494, 9.172, 3.202, 6.157, 4.822, 7.942, 7.901, 7.928, 2.33, 6.029, 6.455, 4.72, 8.564, 8.342, 4.938

CREATE TABLE `mailings3` (
  REFID INTEGER,
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `mailings3`:
60000, 2007-07-01 12:00:00.0, false
60001, 2007-07-01 12:00:00.0, false
60002, 2007-07-01 12:00:00.0, false

CREATE TABLE `Customers` (
  ID INTEGER,
  SEX TEXT,
  MARITAL_STATUS TEXT,
  GEOID INTEGER REFERENCES Demog(None),
  EDUCATIONNUM INTEGER,
  OCCUPATION TEXT,
  age INTEGER
);
Sample rows from `Customers`:
0, Male, Never-married, 61, 7, Machine-op-inspct, 62
1, Male, Married-civ-spouse, 70, 3, Handlers-cleaners, 78
2, Male, Never-married, 53, 7, Machine-op-inspct, 69

CREATE TABLE `Mailings1_2` (
  REFID INTEGER REFERENCES Customers(None),
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `Mailings1_2`:
0, 2007-02-01 12:00:00.0, false
1, 2007-02-01 12:00:00.0, false
2, 2007-02-01 12:00:00.0, false

CREATE TABLE `Sales` (
  EVENTID INTEGER,
  REFID INTEGER REFERENCES Customers(None),
  EVENT_DATE DATETIME,
  AMOUNT REAL
);
Sample rows from `Sales`:
0, 0, 2006-12-21 12:00:00.0, 17.907
1, 0, 2006-12-25 12:00:00.0, 17.401
2, 0, 2007-01-26 12:00:00.0, 13.277

",mailings1_2,"refid, response","Demog, mailings3, Customers, Mailings1_2, Sales"
retail_world,What is the full name of the Vice President of Sales. Give me the URL of his/her photo.,"SELECT firstname, lastname FROM employees WHERE title = 'Vice President, Sales'","CREATE TABLE `employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

",employees,"firstname, lastname, title","sqlite_sequence, Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails"
student_loan,How many male stuents do not have payment due?,SELECT COUNT(t1.name) FROM male as t1 inner JOIN no_payment_due as t2 ON t1.name = t2.name WHERE t2.bool = 'neg',"CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

","male, no_payment_due","male.name, no_payment_due.name, no_payment_due.bool","bool, person, disabled, enlist, filed_for_bankrupcy, longest_absense_from_school, male, no_payment_due, unemployed, enrolled"
ice_hockey_draft,What is the difference in the number of goals scored by Pavel Brendl during the regular season versus the playoffs in the 1998-1999 season?,"SELECT t3.rs_g - t4.pf_g as diff FROM ( SELECT t2.playername, t1.g as rs_g FROM seasonstatus as t1 inner JOIN playerinfo as t2 ON t1.eliteid = t2.eliteid WHERE t2.playername = 'Pavel Brendl' AND t1.SEasON = '1998-1999' AND t1.gAMETYPE = 'Regular Season' ) as t3 inner JOIN ( SELECT t2.playername, t1.g as pf_g FROM seasonstatus as t1 inner JOIN playerinfo as t2 ON t1.eliteid = t2.eliteid WHERE t2.playername = 'Pavel Brendl' AND t1.SEasON = '1998-1999' AND t1.gAMETYPE = 'Playoffs' ) as t4 ON t3.playername = t4.playername","CREATE TABLE `seasonstatus` (
  ELITEID INTEGER REFERENCES PlayerInfo(ELITEID),
  SEASON TEXT,
  TEAM TEXT,
  LEAGUE TEXT,
  GAMETYPE TEXT,
  GP INTEGER,
  G INTEGER,
  A INTEGER,
  P INTEGER,
  PIM INTEGER,
  PLUSMINUS INTEGER
);
Sample rows from `seasonstatus`:
3667, 1997-1998, Rimouski Oceanic, QMJHL, Regular Season, 58, 44, 71, 115, 117, 27
3667, 1997-1998, Rimouski Oceanic, QMJHL, Playoffs, 18, 15, 26, 41, 46, 4
3667, 1997-1998, Canada U20, WJC-20, Regular Season, 7, 1, 1, 2, 4, 0

CREATE TABLE `playerinfo` (
  ELITEID INTEGER,
  PlayerName TEXT,
  birthdate TEXT,
  birthyear DATE,
  birthmonth INTEGER,
  birthday INTEGER,
  birthplace TEXT,
  nation TEXT,
  height INTEGER REFERENCES height_info(height_id),
  weight INTEGER REFERENCES weight_info(weight_id),
  position_info TEXT,
  shoots TEXT,
  draftyear INTEGER,
  draftround INTEGER,
  overall INTEGER,
  overallby TEXT,
  CSS_rank INTEGER,
  sum_7yr_GP INTEGER,
  sum_7yr_TOI INTEGER,
  GP_greater_than_0 TEXT
);
Sample rows from `playerinfo`:
9, David Bornhammar, 1981-06-15, 1981, 6, 15, Lidingo, SWE, Sweden, 73, 198, D, L, 1999, 7, 192, Washington Capitals, 192, 0, 0, no
18, David Printz, 1980-07-24, 1980, 7, 24, Stockholm, SWE, Sweden, 76, 220, D, L, 2001, 7, 225, Philadelphia Flyers, 176, 13, 84, yes
27, Yared Hagos, 1983-03-27, 1983, 3, 27, Stockholm, SWE, Sweden, 73, 218, C, L, 2001, 3, 70, Dallas Stars, 24, 0, 0, no

","CREATE TABLE `height_info` (
  height_id INTEGER,
  height_in_cm INTEGER,
  height_in_inch TEXT
);
Sample rows from `height_info`:
65, 165, 5'5""
67, 170, 5'7""
68, 172, 5'8""

CREATE TABLE `weight_info` (
  weight_id INTEGER,
  weight_in_kg INTEGER,
  weight_in_lbs INTEGER
);
Sample rows from `weight_info`:
154, 70, 154
159, 72, 159
161, 73, 161

CREATE TABLE `PlayerInfo` (
  ELITEID INTEGER,
  PlayerName TEXT,
  birthdate TEXT,
  birthyear DATE,
  birthmonth INTEGER,
  birthday INTEGER,
  birthplace TEXT,
  nation TEXT,
  height INTEGER REFERENCES height_info(height_id),
  weight INTEGER REFERENCES weight_info(weight_id),
  position_info TEXT,
  shoots TEXT,
  draftyear INTEGER,
  draftround INTEGER,
  overall INTEGER,
  overallby TEXT,
  CSS_rank INTEGER,
  sum_7yr_GP INTEGER,
  sum_7yr_TOI INTEGER,
  GP_greater_than_0 TEXT
);
Sample rows from `PlayerInfo`:
9, David Bornhammar, 1981-06-15, 1981, 6, 15, Lidingo, SWE, Sweden, 73, 198, D, L, 1999, 7, 192, Washington Capitals, 192, 0, 0, no
18, David Printz, 1980-07-24, 1980, 7, 24, Stockholm, SWE, Sweden, 76, 220, D, L, 2001, 7, 225, Philadelphia Flyers, 176, 13, 84, yes
27, Yared Hagos, 1983-03-27, 1983, 3, 27, Stockholm, SWE, Sweden, 73, 218, C, L, 2001, 3, 70, Dallas Stars, 24, 0, 0, no

CREATE TABLE `SeasonStatus` (
  ELITEID INTEGER REFERENCES PlayerInfo(ELITEID),
  SEASON TEXT,
  TEAM TEXT,
  LEAGUE TEXT,
  GAMETYPE TEXT,
  GP INTEGER,
  G INTEGER,
  A INTEGER,
  P INTEGER,
  PIM INTEGER,
  PLUSMINUS INTEGER
);
Sample rows from `SeasonStatus`:
3667, 1997-1998, Rimouski Oceanic, QMJHL, Regular Season, 58, 44, 71, 115, 117, 27
3667, 1997-1998, Rimouski Oceanic, QMJHL, Playoffs, 18, 15, 26, 41, 46, 4
3667, 1997-1998, Canada U20, WJC-20, Regular Season, 7, 1, 1, 2, 4, 0

","seasonstatus, playerinfo","seasonstatus.g, playerinfo.playername, seasonstatus.eliteid, playerinfo.eliteid, seasonstatus.SEasON, seasonstatus.gAMETYPE","height_info, weight_info, PlayerInfo, SeasonStatus"
public_review_platform,List the names of business in AZ with a rating of 5.,SELECT business_id FROM business WHERE state LIKE 'AZ' AND stars = 5,"CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

",business,"business_id, state, stars","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
cookbook,Which recipe needs the most frozen raspberries in light syrup? State its title.,SELECT t1.title FROM recipe as t1 inner JOIN quantity as t2 ON t1.recipe_id = t2.recipe_id inner JOIN ingredient as t3 ON t3.ingredient_id = t2.ingredient_id WHERE t3.name = 'frozen raspberries in light syrup' AND t2.max_qty = t2.min_qty,"CREATE TABLE `recipe` (
  recipe_id INTEGER,
  title TEXT,
  subtitle TEXT,
  servings INTEGER,
  yield_unit TEXT,
  prep_min INTEGER,
  cook_min INTEGER,
  stnd_min INTEGER,
  source TEXT,
  intro TEXT,
  directions TEXT
);
Sample rows from `recipe`:
214, Raspberry Chiffon Pie, None, 10, 1 pie, 20, 8, 305, The California Tree Fruit Agreement, None, For crust, preheat oven to 375 degrees F.
In lightly greased 10-inch pie plate, combine graham cracker crumbs, melted butter and 1/4 cup sugar. Press evenly on bottom and up side of plate. Bake 5 minutes; cool.

For filling, in medium saucepan, combine juice or water and gelatin; let stand 5 minutes. Add 1/3 cup sugar and heat over medium heat, stirring to dissolve gelatin. In blender or food processor, puree 6 plums. Add puree and raspberries to gelatin mixture. Refrigerate until mixture begins to set about 1 hour. Stir yogurt into fruit mixture. In large bowl, beat egg whites until frothy. Gradually add cream of tartar and remaining 1/3 cup sugar and beat until stiff peaks form. Gently fold egg whites into fruit mixture so as not to reduce volume. Spoon into crust. Refrigerate 4 hours or overnight. Thinly slice remaining 2 plums and garnish top of pie.
215, Apricot Yogurt Parfaits, None, 4, None, 5, 2, 65, Produce for Better Health Foundation and 5 a Day, None, Drain canned apricots, pour 1/4 cup of the juice into saucepan or microwave-safe dish. Sprinkle gelatin over juice and let stand for 5 minutes to soften. Warm over low heat or microwave at medium (50% power) for 30 seconds or until gelatin has dissolved.
 
In food processor or blender, puree canned apricots; add lemon juice brandy, yogurt and gelatin mixture and process for 30 seconds or until combined.
 
Pour into parfait or stemmed glasses or champagne flutes. Cover and refrigerate until set, at least 1 hour or overnight.
 
Just before serving arrange fresh apricots on top. (If apricots are not available substitute kiwi slices or berries). Garnish each with a small spoonful of yogurt and sprinkling of brown sugar or mint.
216, Fresh Apricot Bavarian, None, 8, None, 5, 13, 0, The California Apricot Advisory Board, Serve in stemmed glasses and top with sliced apricots for elegant endings., Drop apricots into boiling water to cover. Return to boil and simmer for 5 minutes or until skins begin to split. Drain and rinse under cold water. Halve fruit and discard skins and pits. Puree apricots in electric blender. Combine water and gelatin in small saucepan; stir over low heat until dissolved. Mix sugar, apricot puree and yogurt with a wire whip until smooth; mix in dissolved gelatin. Sweeten to taste if desired. Chill mixture until thick. Spoon into stemmed glasses.

Note: One pound fresh apricots is 15 to 20. One and a half envelopes gelatin is 4 teaspoons.

CREATE TABLE `quantity` (
  quantity_id INTEGER,
  recipe_id INTEGER REFERENCES Nutrition(recipe_id) REFERENCES Recipe(recipe_id),
  ingredient_id INTEGER REFERENCES Ingredient(ingredient_id),
  max_qty REAL,
  min_qty REAL,
  unit TEXT,
  preparation TEXT,
  optional TEXT
);
Sample rows from `quantity`:
1, 214, 1613, 2.0, 2.0, cup(s), None, FALSE
2, 214, 3334, 0.25, 0.25, cup(s), None, FALSE
3, 214, 2222, 0.5, 0.5, cup(s), melted, FALSE

CREATE TABLE `ingredient` (
  ingredient_id INTEGER,
  category TEXT,
  name TEXT,
  plural TEXT
);
Sample rows from `ingredient`:
1, dairy, 1% lowfat cottage cheese, None
6, dairy, 1% lowfat milk, None
10, Mexican products, 10-inch flour tortilla, s

","CREATE TABLE `Ingredient` (
  ingredient_id INTEGER,
  category TEXT,
  name TEXT,
  plural TEXT
);
Sample rows from `Ingredient`:
1, dairy, 1% lowfat cottage cheese, None
6, dairy, 1% lowfat milk, None
10, Mexican products, 10-inch flour tortilla, s

CREATE TABLE `Recipe` (
  recipe_id INTEGER,
  title TEXT,
  subtitle TEXT,
  servings INTEGER,
  yield_unit TEXT,
  prep_min INTEGER,
  cook_min INTEGER,
  stnd_min INTEGER,
  source TEXT,
  intro TEXT,
  directions TEXT
);
Sample rows from `Recipe`:
214, Raspberry Chiffon Pie, None, 10, 1 pie, 20, 8, 305, The California Tree Fruit Agreement, None, For crust, preheat oven to 375 degrees F.
In lightly greased 10-inch pie plate, combine graham cracker crumbs, melted butter and 1/4 cup sugar. Press evenly on bottom and up side of plate. Bake 5 minutes; cool.

For filling, in medium saucepan, combine juice or water and gelatin; let stand 5 minutes. Add 1/3 cup sugar and heat over medium heat, stirring to dissolve gelatin. In blender or food processor, puree 6 plums. Add puree and raspberries to gelatin mixture. Refrigerate until mixture begins to set about 1 hour. Stir yogurt into fruit mixture. In large bowl, beat egg whites until frothy. Gradually add cream of tartar and remaining 1/3 cup sugar and beat until stiff peaks form. Gently fold egg whites into fruit mixture so as not to reduce volume. Spoon into crust. Refrigerate 4 hours or overnight. Thinly slice remaining 2 plums and garnish top of pie.
215, Apricot Yogurt Parfaits, None, 4, None, 5, 2, 65, Produce for Better Health Foundation and 5 a Day, None, Drain canned apricots, pour 1/4 cup of the juice into saucepan or microwave-safe dish. Sprinkle gelatin over juice and let stand for 5 minutes to soften. Warm over low heat or microwave at medium (50% power) for 30 seconds or until gelatin has dissolved.
 
In food processor or blender, puree canned apricots; add lemon juice brandy, yogurt and gelatin mixture and process for 30 seconds or until combined.
 
Pour into parfait or stemmed glasses or champagne flutes. Cover and refrigerate until set, at least 1 hour or overnight.
 
Just before serving arrange fresh apricots on top. (If apricots are not available substitute kiwi slices or berries). Garnish each with a small spoonful of yogurt and sprinkling of brown sugar or mint.
216, Fresh Apricot Bavarian, None, 8, None, 5, 13, 0, The California Apricot Advisory Board, Serve in stemmed glasses and top with sliced apricots for elegant endings., Drop apricots into boiling water to cover. Return to boil and simmer for 5 minutes or until skins begin to split. Drain and rinse under cold water. Halve fruit and discard skins and pits. Puree apricots in electric blender. Combine water and gelatin in small saucepan; stir over low heat until dissolved. Mix sugar, apricot puree and yogurt with a wire whip until smooth; mix in dissolved gelatin. Sweeten to taste if desired. Chill mixture until thick. Spoon into stemmed glasses.

Note: One pound fresh apricots is 15 to 20. One and a half envelopes gelatin is 4 teaspoons.

CREATE TABLE `Nutrition` (
  recipe_id INTEGER REFERENCES Recipe(recipe_id),
  protein REAL,
  carbo REAL,
  alcohol REAL,
  total_fat REAL,
  sat_fat REAL,
  cholestrl REAL,
  sodium REAL,
  iron REAL,
  vitamin_c REAL,
  vitamin_a REAL,
  fiber REAL,
  pcnt_cal_carb REAL,
  pcnt_cal_fat REAL,
  pcnt_cal_prot REAL,
  calories REAL
);
Sample rows from `Nutrition`:
214, 5.47, 41.29, 0.0, 11.53, 2.21, 1.39, 260.78, 0.81, 8.89, 586.2, 0.87, 56.8, 35.68, 7.53, 290.79
215, 5.7, 23.75, 1.93, 1.08, 0.58, 3.48, 46.17, 0.57, 13.02, 2738.24, 0.62, 67.38, 6.89, 16.17, 141.01
216, 4.9, 26.88, 0.0, 1.1, 0.58, 3.46, 41.79, 0.37, 6.13, 1521.1, 0.34, 78.45, 7.24, 14.3, 137.06

CREATE TABLE `Quantity` (
  quantity_id INTEGER,
  recipe_id INTEGER REFERENCES Nutrition(recipe_id) REFERENCES Recipe(recipe_id),
  ingredient_id INTEGER REFERENCES Ingredient(ingredient_id),
  max_qty REAL,
  min_qty REAL,
  unit TEXT,
  preparation TEXT,
  optional TEXT
);
Sample rows from `Quantity`:
1, 214, 1613, 2.0, 2.0, cup(s), None, FALSE
2, 214, 3334, 0.25, 0.25, cup(s), None, FALSE
3, 214, 2222, 0.5, 0.5, cup(s), melted, FALSE

","recipe, quantity, ingredient","recipe.title, recipe.recipe_id, quantity.recipe_id, ingredient.ingredient_id, quantity.ingredient_id, ingredient.name, quantity.max_qty, quantity.min_qty","Ingredient, Recipe, Nutrition, Quantity"
chicago_crime,How many community areas are there in Central Chicago?,SELECT COUNT(*) FROM community_area WHERE side = 'Central',"CREATE TABLE `community_area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `community_area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

","CREATE TABLE `Community_Area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `Community_Area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `District` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `District`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `FBI_Code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `FBI_Code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `IUCR` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `IUCR`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `Neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `Neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `Ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `Ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `Crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `Crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

",community_area,side,"Community_Area, District, FBI_Code, IUCR, Neighborhood, Ward, Crime"
movielens,"Among the worst actresses, how many of them got a rating of more than 3 to the movies they starred?",SELECT COUNT(t1.userid) fROM u2base as t1 inner JOIN movies2actors as t2 ON t1.movieid = t2.movieid inner JOIN actors as t3 ON t2.actorid = t3.actorid inner JOIN users as t4 ON t1.userid = t4.userid WHERE t3.a_quality = 0 AND t1.rating > 3 AND t4.u_gender = 'f',"CREATE TABLE `u2base` (
  userid INTEGER PRIMARY KEY REFERENCES users(None),
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  rating TEXT
);
Sample rows from `u2base`:
2, 1964242, 1
2, 2219779, 1
3, 1856939, 1

CREATE TABLE `movies2actors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  actorid INTEGER PRIMARY KEY REFERENCES actors(None),
  cast_num INTEGER
);
Sample rows from `movies2actors`:
1672580, 981535, 0
1672946, 1094968, 0
1673647, 149985, 0

CREATE TABLE `actors` (
  actorid INTEGER,
  a_gender TEXT,
  a_quality INTEGER
);
Sample rows from `actors`:
4, M, 4
16, M, 0
28, M, 4

CREATE TABLE `users` (
  userid INTEGER,
  age TEXT,
  u_gender TEXT,
  occupation TEXT
);
Sample rows from `users`:
1, 1, F, 2
2, 56, M, 3
3, 25, M, 2

","CREATE TABLE `users` (
  userid INTEGER,
  age TEXT,
  u_gender TEXT,
  occupation TEXT
);
Sample rows from `users`:
1, 1, F, 2
2, 56, M, 3
3, 25, M, 2

CREATE TABLE `directors` (
  directorid INTEGER,
  d_quality INTEGER PRIMARY KEY,
  avg_revenue INTEGER PRIMARY KEY
);
Sample rows from `directors`:
67, 4, 1
92, 2, 3
284, 4, 0

CREATE TABLE `actors` (
  actorid INTEGER,
  a_gender TEXT,
  a_quality INTEGER
);
Sample rows from `actors`:
4, M, 4
16, M, 0
28, M, 4

CREATE TABLE `movies` (
  movieid INTEGER,
  year INTEGER,
  isEnglish TEXT,
  country TEXT,
  runningtime INTEGER
);
Sample rows from `movies`:
1672052, 3, T, other, 2
1672111, 4, T, other, 2
1672580, 4, T, USA, 3

CREATE TABLE `movies2actors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  actorid INTEGER PRIMARY KEY REFERENCES actors(None),
  cast_num INTEGER
);
Sample rows from `movies2actors`:
1672580, 981535, 0
1672946, 1094968, 0
1673647, 149985, 0

CREATE TABLE `movies2directors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  directorid INTEGER PRIMARY KEY REFERENCES directors(None),
  genre TEXT
);
Sample rows from `movies2directors`:
1672111, 54934, Action
1672946, 188940, Action
1679461, 179783, Action

CREATE TABLE `u2base` (
  userid INTEGER PRIMARY KEY REFERENCES users(None),
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  rating TEXT
);
Sample rows from `u2base`:
2, 1964242, 1
2, 2219779, 1
3, 1856939, 1

","u2base, movies2actors, actors, users","u2base.userid, u2base.movieid, movies2actors.movieid, movies2actors.actorid, actors.actorid, users.userid, actors.a_quality, u2base.rating, users.u_gender","users, directors, actors, movies, movies2actors, movies2directors, u2base"
video_games,"Which is the publisher for the game ""Prism: Light the Way""?",SELECT t1.publisher_name FROM publisher as t1 inner JOIN game_publisher as t2 ON t1.id = t2.publisher_id inner JOIN game as t3 ON t2.game_id = t3.id WHERE t3.game_name = 'Prism: Light the Way',"CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

","CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

","publisher, game_publisher, game","publisher.publisher_name, publisher.id, game_publisher.publisher_id, game_publisher.game_id, game.id, game.game_name","genre, game, platform, publisher, game_publisher, game_platform, region, region_sales"
airline,What is the code of Mississippi Valley Airlines?,SELECT code FROM `air carriers` WHERE description LIKE 'Mississippi Valley airlines%',"CREATE TABLE `air carriers` (
  Code INTEGER,
  Description TEXT
);
Sample rows from `air carriers`:
19031, Mackey International Inc.: MAC
19032, Munz Northern Airlines Inc.: XY
19033, Cochise Airlines Inc.: COC

","CREATE TABLE `Air Carriers` (
  Code INTEGER,
  Description TEXT
);
Sample rows from `Air Carriers`:
19031, Mackey International Inc.: MAC
19032, Munz Northern Airlines Inc.: XY
19033, Cochise Airlines Inc.: COC

CREATE TABLE `Airports` (
  Code TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `Airports`:
01A, Afognak Lake, AK: Afognak Lake Airport
03A, Granite Mountain, AK: Bear Creek Mining Strip
04A, Lik, AK: Lik Mining Camp

CREATE TABLE `Airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `Airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

",air carriers,"code, description","Air Carriers, Airports, Airlines"
sales_in_weather,List out dates when haze is recorded in store 35.,SELECT t1.`date` FROM weather as t1 inner JOIN relation as t2 ON t1.station_nbr = t2.station_nbr WHERE t2.store_nbr = 35 AND t1.codesum LIKE '%' OR 'HZ' OR '%',"CREATE TABLE `weather` (
  station_nbr INTEGER PRIMARY KEY,
  date DATE PRIMARY KEY,
  tmax INTEGER,
  tmin INTEGER,
  tavg INTEGER,
  depart INTEGER,
  dewpoint INTEGER,
  wetbulb INTEGER,
  heat INTEGER,
  cool INTEGER,
  sunrise TEXT,
  sunset TEXT,
  codesum TEXT,
  snowfall REAL,
  preciptotal REAL,
  stnpressure REAL,
  sealevel REAL,
  resultspeed REAL,
  resultdir INTEGER,
  avgspeed REAL
);
Sample rows from `weather`:
1, 2012-01-01, 52, 31, 42, None, 36, 40, 23, 0, None, None, RA FZFG BR, None, 0.05, 29.78, 29.92, 3.6, 20, 4.6
1, 2012-01-02, 50, 31, 41, None, 26, 35, 24, 0, None, None,  , None, 0.01, 29.44, 29.62, 9.8, 24, 10.3
1, 2012-01-03, 32, 11, 22, None, 4, 18, 43, 0, None, None,  , None, 0.0, 29.67, 29.87, 10.8, 31, 11.6

CREATE TABLE `relation` (
  store_nbr INTEGER REFERENCES sales_in_weather(store_nbr),
  station_nbr INTEGER REFERENCES weather(station_nbr)
);
Sample rows from `relation`:
1, 1
2, 14
3, 7

","CREATE TABLE `sales_in_weather` (
  date DATE PRIMARY KEY,
  store_nbr INTEGER PRIMARY KEY,
  item_nbr INTEGER PRIMARY KEY,
  units INTEGER
);
Sample rows from `sales_in_weather`:
2012-01-01, 1, 1, 0
2012-01-01, 1, 2, 0
2012-01-01, 1, 3, 0

CREATE TABLE `weather` (
  station_nbr INTEGER PRIMARY KEY,
  date DATE PRIMARY KEY,
  tmax INTEGER,
  tmin INTEGER,
  tavg INTEGER,
  depart INTEGER,
  dewpoint INTEGER,
  wetbulb INTEGER,
  heat INTEGER,
  cool INTEGER,
  sunrise TEXT,
  sunset TEXT,
  codesum TEXT,
  snowfall REAL,
  preciptotal REAL,
  stnpressure REAL,
  sealevel REAL,
  resultspeed REAL,
  resultdir INTEGER,
  avgspeed REAL
);
Sample rows from `weather`:
1, 2012-01-01, 52, 31, 42, None, 36, 40, 23, 0, None, None, RA FZFG BR, None, 0.05, 29.78, 29.92, 3.6, 20, 4.6
1, 2012-01-02, 50, 31, 41, None, 26, 35, 24, 0, None, None,  , None, 0.01, 29.44, 29.62, 9.8, 24, 10.3
1, 2012-01-03, 32, 11, 22, None, 4, 18, 43, 0, None, None,  , None, 0.0, 29.67, 29.87, 10.8, 31, 11.6

CREATE TABLE `relation` (
  store_nbr INTEGER REFERENCES sales_in_weather(store_nbr),
  station_nbr INTEGER REFERENCES weather(station_nbr)
);
Sample rows from `relation`:
1, 1
2, 14
3, 7

","weather, relation","weather.date, weather.station_nbr, relation.station_nbr, relation.store_nbr, weather.codesum","sales_in_weather, weather, relation"
coinmarketcap,What was the max profit a user can make on Bitcoin on 2013/4/28?,SELECT t2.high - t2.low FROM coins as t1 inner JOIN historical as t2 ON t1.id = t2.coin_id WHERE t2.date = '2013-04-28' AND t1.name = 'Bitcoin',"CREATE TABLE `coins` (
  id INTEGER,
  name TEXT,
  slug TEXT,
  symbol TEXT,
  status TEXT,
  category TEXT,
  description TEXT,
  subreddit TEXT,
  notice TEXT,
  tags TEXT,
  tag_names TEXT,
  website TEXT,
  platform_id INTEGER,
  date_added TEXT,
  date_launched TEXT
);
Sample rows from `coins`:
1, Bitcoin, bitcoin, BTC, active, coin, ## **What Is Bitcoin (BTC)?**\n\nBitcoin is a decentralized cryptocurrency originally described in a 2008 [whitepaper](https://coinmarketcap.com/alexandria/glossary/whitepaper) by a person, or group of people, using the alias [Satoshi Nakamoto](https://co, bitcoin, None, mineable, pow, sha-256, store-of-value, state-channels, coinbase-ventures-portfolio, three-arrows-capital-portfolio, polychain-capital-portfolio, binance-labs-portfolio, arrington-xrp-capital, blockchain-capital-portfolio, boostvc-portfolio, cms-holdings-, Mineable, PoW, SHA-256, Store of Value, State channels, Coinbase Ventures Portfolio, Three Arrows Capital Portfolio, Polychain Capital Portfolio, Binance Labs Portfolio, Arrington XRP capital, Blockchain Capital Portfolio, BoostVC Portfolio, CMS Holdings , https://bitcoin.org/, None, 2013-04-28T00:00:00.000Z, None
2, Litecoin, litecoin, LTC, active, coin, ## What Is Litecoin (LTC)?\n\nLitecoin (LTC) is a cryptocurrency that was designed to provide fast, secure and low-cost payments by leveraging the unique properties of [blockchain](https://coinmarketcap.com/alexandria/glossary/blockchain) technology. \n\n, litecoin, None, mineable, pow, scrypt, medium-of-exchange, binance-chain, Mineable, PoW, Scrypt, Medium of Exchange, Binance Chain, https://litecoin.org/, None, 2013-04-28T00:00:00.000Z, None
3, Namecoin, namecoin, NMC, active, coin, Namecoin (NMC) is a cryptocurrency . Users are able to generate NMC through the process of mining. Namecoin has a current supply of 14,736,400. The last known price of Namecoin is 2.14833562 USD and is up 0.40 over the last 24 hours. It is currently tradi, namecoin, None, mineable, pow, sha-256, platform, Mineable, PoW, SHA-256, Platform, https://www.namecoin.org/, None, 2013-04-28T00:00:00.000Z, None

CREATE TABLE `historical` (
  date DATE,
  coin_id INTEGER,
  cmc_rank INTEGER,
  market_cap REAL,
  price REAL,
  open REAL,
  high REAL,
  low REAL,
  close REAL,
  time_high TEXT,
  time_low TEXT,
  volume_24h REAL,
  percent_change_1h REAL,
  percent_change_24h REAL,
  percent_change_7d REAL,
  circulating_supply REAL,
  total_supply REAL,
  max_supply REAL,
  num_market_pairs INTEGER
);
Sample rows from `historical`:
2013-04-28, 1, 1, 1488566971.9558687, 134.210021972656, None, None, None, None, None, None, 0.0, 0.639231, None, None, 11091325.0, 11091325.0, 21000000.0, None
2013-04-28, 2, 2, 74637021.56790735, 4.34840488433838, None, None, None, None, None, None, 0.0, 0.799273, None, None, 17164230.0, 17164230.0, 84000000.0, None
2013-04-28, 5, 3, 7250186.647688276, 0.386524856090546, None, None, None, None, None, None, 0.0, -0.934763, None, None, 18757362.0, 18757362.0, None, None

","CREATE TABLE `coins` (
  id INTEGER,
  name TEXT,
  slug TEXT,
  symbol TEXT,
  status TEXT,
  category TEXT,
  description TEXT,
  subreddit TEXT,
  notice TEXT,
  tags TEXT,
  tag_names TEXT,
  website TEXT,
  platform_id INTEGER,
  date_added TEXT,
  date_launched TEXT
);
Sample rows from `coins`:
1, Bitcoin, bitcoin, BTC, active, coin, ## **What Is Bitcoin (BTC)?**\n\nBitcoin is a decentralized cryptocurrency originally described in a 2008 [whitepaper](https://coinmarketcap.com/alexandria/glossary/whitepaper) by a person, or group of people, using the alias [Satoshi Nakamoto](https://co, bitcoin, None, mineable, pow, sha-256, store-of-value, state-channels, coinbase-ventures-portfolio, three-arrows-capital-portfolio, polychain-capital-portfolio, binance-labs-portfolio, arrington-xrp-capital, blockchain-capital-portfolio, boostvc-portfolio, cms-holdings-, Mineable, PoW, SHA-256, Store of Value, State channels, Coinbase Ventures Portfolio, Three Arrows Capital Portfolio, Polychain Capital Portfolio, Binance Labs Portfolio, Arrington XRP capital, Blockchain Capital Portfolio, BoostVC Portfolio, CMS Holdings , https://bitcoin.org/, None, 2013-04-28T00:00:00.000Z, None
2, Litecoin, litecoin, LTC, active, coin, ## What Is Litecoin (LTC)?\n\nLitecoin (LTC) is a cryptocurrency that was designed to provide fast, secure and low-cost payments by leveraging the unique properties of [blockchain](https://coinmarketcap.com/alexandria/glossary/blockchain) technology. \n\n, litecoin, None, mineable, pow, scrypt, medium-of-exchange, binance-chain, Mineable, PoW, Scrypt, Medium of Exchange, Binance Chain, https://litecoin.org/, None, 2013-04-28T00:00:00.000Z, None
3, Namecoin, namecoin, NMC, active, coin, Namecoin (NMC) is a cryptocurrency . Users are able to generate NMC through the process of mining. Namecoin has a current supply of 14,736,400. The last known price of Namecoin is 2.14833562 USD and is up 0.40 over the last 24 hours. It is currently tradi, namecoin, None, mineable, pow, sha-256, platform, Mineable, PoW, SHA-256, Platform, https://www.namecoin.org/, None, 2013-04-28T00:00:00.000Z, None

CREATE TABLE `historical` (
  date DATE,
  coin_id INTEGER,
  cmc_rank INTEGER,
  market_cap REAL,
  price REAL,
  open REAL,
  high REAL,
  low REAL,
  close REAL,
  time_high TEXT,
  time_low TEXT,
  volume_24h REAL,
  percent_change_1h REAL,
  percent_change_24h REAL,
  percent_change_7d REAL,
  circulating_supply REAL,
  total_supply REAL,
  max_supply REAL,
  num_market_pairs INTEGER
);
Sample rows from `historical`:
2013-04-28, 1, 1, 1488566971.9558687, 134.210021972656, None, None, None, None, None, None, 0.0, 0.639231, None, None, 11091325.0, 11091325.0, 21000000.0, None
2013-04-28, 2, 2, 74637021.56790735, 4.34840488433838, None, None, None, None, None, None, 0.0, 0.799273, None, None, 17164230.0, 17164230.0, 84000000.0, None
2013-04-28, 5, 3, 7250186.647688276, 0.386524856090546, None, None, None, None, None, None, 0.0, -0.934763, None, None, 18757362.0, 18757362.0, None, None

","coins, historical","historical.high, coins.id, historical.coin_id, historical.date, coins.name","coins, historical"
world,List down the cities that belong to the country with a life expectancy of 66.4.,SELECT t2.name FROM country as t1 inner JOIN city as t2 ON t1.code = t2.countrycode WHERE t1.lifeexpectancy = 66.4,"CREATE TABLE `country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

CREATE TABLE `city` (
  ID INTEGER,
  Name TEXT,
  CountryCode TEXT REFERENCES Country(Code),
  District TEXT,
  Population INTEGER
);
Sample rows from `city`:
1, Kabul, AFG, Kabol, 1780000
2, Qandahar, AFG, Qandahar, 237500
3, Herat, AFG, Herat, 186800

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
City, 4079

CREATE TABLE `City` (
  ID INTEGER,
  Name TEXT,
  CountryCode TEXT REFERENCES Country(Code),
  District TEXT,
  Population INTEGER
);
Sample rows from `City`:
1, Kabul, AFG, Kabol, 1780000
2, Qandahar, AFG, Qandahar, 237500
3, Herat, AFG, Herat, 186800

CREATE TABLE `Country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `Country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

CREATE TABLE `CountryLanguage` (
  CountryCode TEXT PRIMARY KEY REFERENCES Country(Code),
  Language TEXT PRIMARY KEY,
  IsOfficial TEXT,
  Percentage REAL
);
Sample rows from `CountryLanguage`:
ABW, Dutch, T, 5.3
ABW, English, F, 9.5
ABW, Papiamento, F, 76.7

","country, city","city.name, country.code, city.countrycode, country.lifeexpectancy","sqlite_sequence, City, Country, CountryLanguage"
law_episode,What are the names of all the people who worked on episode 19 of season 9?,SELECT t3.name FROM episode as t1 inner JOIN credit as t2 ON t1.episode_id = t2.episode_id inner JOIN person as t3 ON t3.person_id = t2.person_id WHERE t1.episode = 19 AND t1.season = 9,"CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `credit` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  person_id TEXT PRIMARY KEY REFERENCES Person(person_id),
  category TEXT,
  role TEXT,
  credited TEXT
);
Sample rows from `credit`:
tt0629204, nm0226352, Additional Crew, technical advisor, true
tt0629204, nm0506974, Additional Crew, production accountant, true
tt0629204, nm4103116, Additional Crew, production accountant, true

CREATE TABLE `person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
tt0629239, nun
tt0629239, priest
tt0629420, police officer

CREATE TABLE `Person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  series TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  person_id TEXT REFERENCES Person(person_id),
  role TEXT,
  result TEXT
);
Sample rows from `Award`:
258, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0937725, None, Winner
259, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0792309, None, Winner
260, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0049569, None, Winner

CREATE TABLE `Credit` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  person_id TEXT PRIMARY KEY REFERENCES Person(person_id),
  category TEXT,
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
tt0629204, nm0226352, Additional Crew, technical advisor, true
tt0629204, nm0506974, Additional Crew, production accountant, true
tt0629204, nm4103116, Additional Crew, production accountant, true

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
tt0629204, 10, 36, 17.7
tt0629204, 9, 39, 19.2
tt0629204, 8, 64, 31.5

","episode, credit, person","person.name, episode.episode_id, credit.episode_id, person.person_id, credit.person_id, episode.episode, episode.season","Episode, Keyword, Person, Award, Credit, Vote"
public_review_platform,"Among all attribute names, list down the ID and attribute name which start with ""music"".","SELECT attribute_id, attribute_name FROM attributes WHERE attribute_name LIKE 'music%'","CREATE TABLE `attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

",attributes,"attribute_id, attribute_name","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
chicago_crime,"Among all the incidents with no arrest made, what is the percentage of them having a generic description of ""BATTERY"" in the IUCR classification?",SELECT cast(SUM(case when t1.primary_description = 'BATTERY' then 1 else 0 end) as real) * 100 / COUNT(*)FROM iucr as t1 inner JOIN crime as t2 ON t1.iucr_no = t2.iucr_no WHERE t2.arrest = 'FALSE',"CREATE TABLE `iucr` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `iucr`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","CREATE TABLE `Community_Area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `Community_Area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `District` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `District`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `FBI_Code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `FBI_Code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `IUCR` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `IUCR`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `Neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `Neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `Ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `Ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `Crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `Crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","iucr, crime","iucr.primary_description, iucr.iucr_no, crime.iucr_no, crime.arrest","Community_Area, District, FBI_Code, IUCR, Neighborhood, Ward, Crime"
retail_complains,"What is the name of the state that the client with the email ""skylar.ramirez@gmail.com"" lives in?",SELECT t3.state FROM state as t1 inner JOIN district as t2 ON t1.statecode = t2.state_abbrev inner JOIN client as t3 ON t2.district_id = t3.district_id WHERE t3.email = 'skylar.ramirez@gmail.com',"CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

","CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

","state, district, client","client.state, state.statecode, district.state_abbrev, district.district_id, client.district_id, client.email","state, callcenterlogs, client, district, events, reviews"
student_loan,Please list all the female students that have filed for bankruptcy.,SELECT name FROM filed_for_bankrupcy WHERE name NOT IN ( SELECT name FROM male ),"CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

","filed_for_bankrupcy, male",name,"bool, person, disabled, enlist, filed_for_bankrupcy, longest_absense_from_school, male, no_payment_due, unemployed, enrolled"
authors,Where was the 'A context-based navigation paradigm for accessing Web data' paper published? State the name of the conference.,SELECT t2.fullname FROM paper as t1 inner JOIN conference as t2 ON t1.conferenceid = t2.id WHERE t1.title = 'A context-based navigation paradigm for accessing Web data',"CREATE TABLE `paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

","CREATE TABLE `Author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `Author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

CREATE TABLE `Conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

CREATE TABLE `Journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `Paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `Paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `PaperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `PaperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

","paper, conference","conference.fullname, paper.conferenceid, conference.id, paper.title","Author, Conference, Journal, Paper, PaperAuthor"
disney,List the PG-13 romantic comedy movie titles and their release dates.,"SELECT movie_title, release_date FROM movies_total_gross WHERE mpaa_rating = 'PG-13' AND genre = 'Romantic Comedy'","CREATE TABLE `movies_total_gross` (
  movie_title TEXT PRIMARY KEY REFERENCES characters(movie_title),
  release_date TEXT PRIMARY KEY,
  genre TEXT,
  MPAA_rating TEXT,
  total_gross TEXT,
  inflation_adjusted_gross TEXT
);
Sample rows from `movies_total_gross`:
Snow White and the Seven Dwarfs, Dec 21, 1937, Musical, G, $184,925,485, $5,228,953,251
Pinocchio, Feb 9, 1940, Adventure, G, $84,300,000, $2,188,229,052
Fantasia, Nov 13, 1940, Musical, G, $83,320,000, $2,187,090,808

","CREATE TABLE `characters` (
  movie_title TEXT PRIMARY KEY,
  release_date TEXT,
  hero TEXT REFERENCES voice-actors(character),
  villian TEXT,
  song TEXT
);
Sample rows from `characters`:
Snow White and the Seven Dwarfs, 21-Dec-37, Snow White, Evil Queen, Some Day My Prince Will Come
Pinocchio, 7-Feb-40, Pinocchio, Stromboli, When You Wish upon a Star
Fantasia, 13-Nov-40, None, Chernabog, None

CREATE TABLE `director` (
  name TEXT PRIMARY KEY REFERENCES characters(movie_title),
  director TEXT
);
Sample rows from `director`:
Snow White and the Seven Dwarfs, David Hand
Pinocchio, Ben Sharpsteen
Fantasia, full credits

CREATE TABLE `movies_total_gross` (
  movie_title TEXT PRIMARY KEY REFERENCES characters(movie_title),
  release_date TEXT PRIMARY KEY,
  genre TEXT,
  MPAA_rating TEXT,
  total_gross TEXT,
  inflation_adjusted_gross TEXT
);
Sample rows from `movies_total_gross`:
Snow White and the Seven Dwarfs, Dec 21, 1937, Musical, G, $184,925,485, $5,228,953,251
Pinocchio, Feb 9, 1940, Adventure, G, $84,300,000, $2,188,229,052
Fantasia, Nov 13, 1940, Musical, G, $83,320,000, $2,187,090,808

CREATE TABLE `revenue` (
  Year INTEGER,
  Studio Entertainment[NI 1] REAL,
  Disney Consumer Products[NI 2] REAL,
  Disney Interactive[NI 3][Rev 1] INTEGER,
  Walt Disney Parks and Resorts REAL,
  Disney Media Networks TEXT,
  Total INTEGER
);
Sample rows from `revenue`:
1991, 2593.0, 724.0, None, 2794.0, None, 6111
1992, 3115.0, 1081.0, None, 3306.0, None, 7502
1993, 3673.4, 1415.1, None, 3440.7, None, 8529

CREATE TABLE `voice-actors` (
  character TEXT PRIMARY KEY,
  voice-actor TEXT,
  movie TEXT REFERENCES characters(movie_title)
);
Sample rows from `voice-actors`:
Abby Mallard, Joan Cusack, Chicken Little
Abigail Gabble, Monica Evans, The Aristocats
Abis Mal, Jason Alexander, The Return of Jafar

",movies_total_gross,"movie_title, release_date, mpaa_rating, genre","characters, director, movies_total_gross, revenue, voice-actors"
restaurant,"What is the full address of the restaurant named ""Sanuki Restaurant""?","SELECT t2.city, t1.street_num, t1.street_name FROM location as t1 inner JOIN generalinfo as t2 ON t1.id_restaurant = t2.id_restaurant WHERE t2.label = 'sanuki restaurant'","CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

","CREATE TABLE `geographic` (
  city TEXT PRIMARY KEY,
  county TEXT,
  region TEXT
);
Sample rows from `geographic`:
alameda, alameda county, bay area
alamo, contra costa county, bay area
albany, alameda county, bay area

CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

","location, generalinfo","generalinfo.city, location.street_num, location.street_name, location.id_restaurant, generalinfo.id_restaurant, generalinfo.label","geographic, generalinfo, location"
olympics,Who has participated in the most Olympic Games in the database?,SELECT t1.full_name FROM person as t1 inner JOIN games_competitor as t2 ON t1.id = t2.person_id GROUP BY t2.person_id ORDER BY COUNT(t2.person_id) DESC LIMIT 1,"CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

","CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `medal` (
  id INTEGER,
  medal_name TEXT
);
Sample rows from `medal`:
1, Gold
2, Silver
3, Bronze

CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `sport` (
  id INTEGER,
  sport_name TEXT
);
Sample rows from `sport`:
1, Aeronautics
2, Alpine Skiing
3, Alpinism

CREATE TABLE `event` (
  id INTEGER,
  sport_id INTEGER REFERENCES sport(id),
  event_name TEXT
);
Sample rows from `event`:
1, 9, Basketball Men's Basketball
2, 33, Judo Men's Extra-Lightweight
3, 25, Football Men's Football

CREATE TABLE `competitor_event` (
  event_id INTEGER REFERENCES event(id),
  competitor_id INTEGER REFERENCES games_competitor(id),
  medal_id INTEGER REFERENCES medal(id)
);
Sample rows from `competitor_event`:
1, 1, 4
2, 2, 4
3, 3, 4

","person, games_competitor","person.full_name, person.id, games_competitor.person_id","city, games, games_city, medal, noc_region, person, games_competitor, person_region, sport, event, competitor_event"
regional_sales,What percentage of sell orders on 04/04/2020 were for the state of New York?,SELECT cast(SUM(case when t2.state = 'New York' then 1 else 0 end) as real) * 100 / COUNT(t1.ordernumber) FROM `sales orders` as t1 inner JOIN `store locations` as t2 ON t2.storeID = t1._storeID WHERE t1.orderdate = '4/4/20',"CREATE TABLE `sales orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `sales orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

CREATE TABLE `store locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `store locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  Customer Names TEXT
);
Sample rows from `Customers`:
1, Avon Corp
2, WakeFern 
3, Elorac, Corp

CREATE TABLE `Products` (
  ProductID INTEGER,
  Product Name TEXT
);
Sample rows from `Products`:
1, Cookware
2, Photo Frames
3, Table Lamps

CREATE TABLE `Regions` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `Regions`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `Sales Team` (
  SalesTeamID INTEGER,
  Sales Team TEXT,
  Region TEXT
);
Sample rows from `Sales Team`:
1, Adam Hernandez, Northeast
2, Keith Griffin, Northeast
3, Jerry Green, West

CREATE TABLE `Store Locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `Store Locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

CREATE TABLE `Sales Orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `Sales Orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

","sales orders, store locations","store locations.state, sales orders.ordernumber, store locations.storeID, sales orders._storeID, sales orders.orderdate","Customers, Products, Regions, Sales Team, Store Locations, Sales Orders"
public_review_platform,How many short tips were left for the business with ID no.2?,SELECT COUNT(business_id) FROM tips WHERE business_id = 2 AND tip_length = 'Short',"CREATE TABLE `tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

",tips,"business_id, tip_length","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
olympics,How many competitors were there who participated in 2000 Summer with age 31?,SELECT COUNT(t2.person_id) FROM games as t1 inner JOIN games_competitor as t2 ON t1.id = t2.games_id WHERE t1.games_name = '2000 Summer' AND t2.age = 31,"CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

","CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `medal` (
  id INTEGER,
  medal_name TEXT
);
Sample rows from `medal`:
1, Gold
2, Silver
3, Bronze

CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `sport` (
  id INTEGER,
  sport_name TEXT
);
Sample rows from `sport`:
1, Aeronautics
2, Alpine Skiing
3, Alpinism

CREATE TABLE `event` (
  id INTEGER,
  sport_id INTEGER REFERENCES sport(id),
  event_name TEXT
);
Sample rows from `event`:
1, 9, Basketball Men's Basketball
2, 33, Judo Men's Extra-Lightweight
3, 25, Football Men's Football

CREATE TABLE `competitor_event` (
  event_id INTEGER REFERENCES event(id),
  competitor_id INTEGER REFERENCES games_competitor(id),
  medal_id INTEGER REFERENCES medal(id)
);
Sample rows from `competitor_event`:
1, 1, 4
2, 2, 4
3, 3, 4

","games, games_competitor","games_competitor.person_id, games.id, games_competitor.games_id, games.games_name, games_competitor.age","city, games, games_city, medal, noc_region, person, games_competitor, person_region, sport, event, competitor_event"
cars,"Among the cars introduced in 1977, provide the names and the horse powers of cars from Europe.","SELECT t1.car_name, t1.horsepower FROM data as t1 inner JOIN production as t2 ON t1.id = t2.id inner JOIN country as t3 ON t3.origin = t2.country WHERE t2.model_year = 1977 AND t3.country = 'Europe'","CREATE TABLE `data` (
  ID INTEGER REFERENCES price(ID),
  mpg REAL,
  cylinders INTEGER,
  displacement REAL,
  horsepower INTEGER,
  weight INTEGER,
  acceleration REAL,
  model INTEGER,
  car_name TEXT
);
Sample rows from `data`:
1, 18.0, 8, 307.0, 130, 3504, 12.0, 70, chevrolet chevelle malibu
2, 15.0, 8, 350.0, 165, 3693, 11.5, 70, buick skylark 320
3, 18.0, 8, 318.0, 150, 3436, 11.0, 70, plymouth satellite

CREATE TABLE `production` (
  ID INTEGER PRIMARY KEY REFERENCES price(ID) REFERENCES data(ID),
  model_year INTEGER PRIMARY KEY,
  country INTEGER REFERENCES country(origin)
);
Sample rows from `production`:
1, 1970, 1
1, 1971, 1
2, 1970, 1

CREATE TABLE `country` (
  origin INTEGER,
  country TEXT
);
Sample rows from `country`:
1, USA
2, Europe
3, Japan

","CREATE TABLE `country` (
  origin INTEGER,
  country TEXT
);
Sample rows from `country`:
1, USA
2, Europe
3, Japan

CREATE TABLE `price` (
  ID INTEGER,
  price REAL
);
Sample rows from `price`:
1, 25561.59078
2, 24221.42273
3, 27240.84373

CREATE TABLE `data` (
  ID INTEGER REFERENCES price(ID),
  mpg REAL,
  cylinders INTEGER,
  displacement REAL,
  horsepower INTEGER,
  weight INTEGER,
  acceleration REAL,
  model INTEGER,
  car_name TEXT
);
Sample rows from `data`:
1, 18.0, 8, 307.0, 130, 3504, 12.0, 70, chevrolet chevelle malibu
2, 15.0, 8, 350.0, 165, 3693, 11.5, 70, buick skylark 320
3, 18.0, 8, 318.0, 150, 3436, 11.0, 70, plymouth satellite

CREATE TABLE `production` (
  ID INTEGER PRIMARY KEY REFERENCES price(ID) REFERENCES data(ID),
  model_year INTEGER PRIMARY KEY,
  country INTEGER REFERENCES country(origin)
);
Sample rows from `production`:
1, 1970, 1
1, 1971, 1
2, 1970, 1

","data, production, country","data.car_name, data.horsepower, data.id, production.id, country.origin, production.country, production.model_year, country.country","country, price, data, production"
shipping,What is the customer's address for the shipment with ship ID 1117?,SELECT t2.address FROM shipment as t1 inner JOIN customer as t2 ON t1.cust_id = t2.cust_id WHERE t1.ship_id = '1117',"CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

CREATE TABLE `customer` (
  cust_id INTEGER,
  cust_name TEXT,
  annual_revenue INTEGER,
  cust_type TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip REAL,
  phone TEXT
);
Sample rows from `customer`:
193, Advanced Fabricators, 39588651, manufacturer, 5141 Summit Boulevard, West Palm Beach, FL, 33415.0, (561) 683-3535
304, Pard's Trailer Sales, 17158109, wholesaler, 5910 South 300 West, Salt Lake City, UT, 84107.0, (801) 262-4864
314, Saar Enterprises, Inc., 47403613, retailer, 11687 192nd Street, Council Bluffs, IA, 51503.0, (712) 366-4929

","CREATE TABLE `city` (
  city_id INTEGER,
  city_name TEXT,
  state TEXT,
  population INTEGER,
  area REAL
);
Sample rows from `city`:
100, Union City, New Jersey, 67088, 1.3
101, Huntington Park, California, 61348, 3.0
102, Passaic, New Jersey, 67861, 3.1

CREATE TABLE `customer` (
  cust_id INTEGER,
  cust_name TEXT,
  annual_revenue INTEGER,
  cust_type TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip REAL,
  phone TEXT
);
Sample rows from `customer`:
193, Advanced Fabricators, 39588651, manufacturer, 5141 Summit Boulevard, West Palm Beach, FL, 33415.0, (561) 683-3535
304, Pard's Trailer Sales, 17158109, wholesaler, 5910 South 300 West, Salt Lake City, UT, 84107.0, (801) 262-4864
314, Saar Enterprises, Inc., 47403613, retailer, 11687 192nd Street, Council Bluffs, IA, 51503.0, (712) 366-4929

CREATE TABLE `driver` (
  driver_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip_code INTEGER,
  phone TEXT
);
Sample rows from `driver`:
20, Sue, Newell, 268 Richmond Ave, Memphis, TN, 38106, (901) 774-6569
21, Andrea, Simons, 3574 Oak Limb Cv, Memphis, TN, 38135, (901) 384-0984
22, Roger, McHaney, 1839 S Orleans St, Memphis, TN, 38106, (901) 948-1043

CREATE TABLE `truck` (
  truck_id INTEGER,
  make TEXT,
  model_year INTEGER
);
Sample rows from `truck`:
1, Peterbilt, 2005
2, Mack, 2006
3, Peterbilt, 2007

CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

","shipment, customer","customer.address, shipment.cust_id, customer.cust_id, shipment.ship_id","city, customer, driver, truck, shipment"
chicago_crime,Give the coordinate of the alleys where a crime was reported and an arrest was made.,"SELECT latitude, longitude FROM crime WHERE location_description = 'ALLEY' AND arrest = 'TRUE' GROUP BY latitude, longitude","CREATE TABLE `crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","CREATE TABLE `Community_Area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `Community_Area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `District` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `District`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `FBI_Code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `FBI_Code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `IUCR` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `IUCR`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `Neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `Neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `Ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `Ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `Crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `Crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

",crime,"latitude, longitude, location_description, arrest","Community_Area, District, FBI_Code, IUCR, Neighborhood, Ward, Crime"
university,How many universities had above 30% of international students in 2013?,SELECT COUNT(*) FROM university_year WHERE pct_international_students > 30 AND year = 2013,"CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

","CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

CREATE TABLE `ranking_system` (
  id INTEGER,
  system_name TEXT
);
Sample rows from `ranking_system`:
1, Times Higher Education World University Ranking
2, Shanghai Ranking
3, Center for World University Rankings

CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

",university_year,pct_international_students,"country, ranking_system, ranking_criteria, university, university_ranking_year, university_year"
computer_student,How many non-faculty members are not undergoing the phase of qualifications?,SELECT COUNT(*) FROM person WHERE hasposition = 0 AND inphase = 0,"CREATE TABLE `person` (
  p_id INTEGER,
  professor INTEGER,
  student INTEGER,
  hasPosition TEXT,
  inPhase TEXT,
  yearsInProgram TEXT
);
Sample rows from `person`:
3, 0, 1, 0, 0, 0
4, 0, 1, 0, 0, 0
5, 1, 0, Faculty, 0, 0

","CREATE TABLE `course` (
  course_id INTEGER,
  courseLevel TEXT
);
Sample rows from `course`:
0, Level_500
1, Level_500
2, Level_500

CREATE TABLE `person` (
  p_id INTEGER,
  professor INTEGER,
  student INTEGER,
  hasPosition TEXT,
  inPhase TEXT,
  yearsInProgram TEXT
);
Sample rows from `person`:
3, 0, 1, 0, 0, 0
4, 0, 1, 0, 0, 0
5, 1, 0, Faculty, 0, 0

CREATE TABLE `advisedBy` (
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id),
  p_id_dummy INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `advisedBy`:
96, 5
118, 5
183, 5

CREATE TABLE `taughtBy` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `taughtBy`:
0, 40
1, 40
2, 180

",person,"hasposition, inphase","course, person, advisedBy, taughtBy"
public_review_platform,How many businesses are registered in the database under 'Banks & Credit Unions' category?,SELECT COUNT(t2.business_id) FROM categories as t1 inner JOIN Business_categories as t2 ON t1.category_id = t2.category_id WHERE t1.category_name = 'Banks & Credit Unions',"CREATE TABLE `categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Business_categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_categories`:
1, 8
1, 143
2, 18

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","categories, Business_categories","Business_categories.business_id, categories.category_id, Business_categories.category_id, categories.category_name","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
student_loan,How many unemployed students have payment due?,SELECT COUNT(t1.name) FROM no_payment_due as t1 inner JOIN unemployed as t2 ON t2.name = t1.name WHERE t1.bool = 'pos',"CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

","no_payment_due, unemployed","no_payment_due.name, unemployed.name, no_payment_due.bool","bool, person, disabled, enlist, filed_for_bankrupcy, longest_absense_from_school, male, no_payment_due, unemployed, enrolled"
retail_complains,What are the complaint id of client who were born in 1931?,SELECT t2.`complaint id` FROM client as t1 inner JOIN callcenterlogs as t2 ON t1.client_id = t2.`rand client` WHERE t1.year = 1931,"CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

","CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

","client, callcenterlogs","callcenterlogs.complaint id, client.client_id, callcenterlogs.rand client, client.year","state, callcenterlogs, client, district, events, reviews"
retail_world,"How many kinds of products are there in the the category of ""dairy products""?",SELECT COUNT(t1.productid) FROM products as t1 inner JOIN categories as t2 ON t1.categoryid = t2.categoryid WHERE t2.categoryname = 'Dairy products',"CREATE TABLE `products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

","products, categories","products.productid, products.categoryid, categories.categoryid, categories.categoryname","sqlite_sequence, Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails"
video_games,How many action games are there in total?,SELECT COUNT(t1.id) FROM game as t1 inner JOIN genre as t2 ON t1.genre_id = t2.id WHERE t2.genre_name = 'Action',"CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

","CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

","game, genre","game.id, game.genre_id, genre.id, genre.genre_name","genre, game, platform, publisher, game_publisher, game_platform, region, region_sales"
language_corpus,"What is the word id for title ""Sometent""?",SELECT t2.wid FROM pages as t1 inner JOIN pages_words as t2 ON t1.pid = t2.pid WHERE t1.title = 'Sometent',"CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

","CREATE TABLE `langs` (
  lid INTEGER,
  lang TEXT PRIMARY KEY,
  locale TEXT PRIMARY KEY,
  pages INTEGER,
  words INTEGER
);
Sample rows from `langs`:
1, ca, ca_ES, 1129144, 2764996

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
langs, 1
pages, 1129144
words, 2764996

CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `langs_words` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `langs_words`:
1, 1, 242
1, 2, 16841
1, 3, 48700

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

","pages, pages_words","pages_words.wid, pages.pid, pages_words.pid, pages.title","langs, sqlite_sequence, pages, words, langs_words, pages_words, biwords"
books,What is the average of English books among all books published by Carole Marsh Mysteries?,SELECT cast(SUM(case when t1.language_name = 'English' then 1 else 0 end) as real) / COUNT(*) FROM book_language as t1 inner JOIN book as t2 ON t1.language_id = t2.language_id inner JOIN publisher as t3 ON t3.publisher_id = t2.publisher_id WHERE t3.publisher_name = 'Carole Marsh Mysteries',"CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","book_language, book, publisher","book_language.language_name, book_language.language_id, book.language_id, publisher.publisher_id, book.publisher_id, publisher.publisher_name","address_status, author, book_language, country, address, customer, customer_address, order_status, publisher, book, book_author, shipping_method, cust_order, sqlite_sequence, order_history, order_line"
beer_factory,How many transactions were paid through MasterCard in 2014?,SELECT COUNT(transactionid) FROM `transaction` WHERE creditcardtype = 'MasterCard' AND transactiondate LIKE '2014%',"CREATE TABLE `transaction` (
  TransactionID INTEGER,
  CreditCardNumber INTEGER,
  CustomerID INTEGER REFERENCES customers(CustomerID),
  TransactionDate DATE,
  CreditCardType TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  RootBeerID INTEGER REFERENCES rootbeer(RootBeerID),
  PurchasePrice REAL
);
Sample rows from `transaction`:
100000, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105661, 3.0
100001, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105798, 3.0
100002, 6011583832864739, 864896, 2014-07-07, Discover, 2, 102514, 3.0

","CREATE TABLE `customers` (
  CustomerID INTEGER,
  First TEXT,
  Last TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER,
  Email TEXT,
  PhoneNumber TEXT,
  FirstPurchaseDate DATE,
  SubscribedToEmailList TEXT,
  Gender TEXT
);
Sample rows from `customers`:
101811, Kenneth, Walton, 6715 Commonwealth Dr, Sacramento, CA, 94256, walton.k76@fastmail.com, (916) 918-1561, 2013-05-30, FALSE, M
103508, Madeleine, Jones, 3603 Leola Way, Sacramento, CA, 94258, j_madeleine@gmail.com, (916) 186-9423, 2013-02-06, FALSE, F
104939, Damen, Wheeler, 6740 Branwood Way, Orangevale, CA, 95662, dwheeler@outlook.com, (916) 164-1156, 2013-04-11, FALSE, M

CREATE TABLE `geolocation` (
  LocationID INTEGER REFERENCES location(LocationID),
  Latitude REAL,
  Longitude REAL
);
Sample rows from `geolocation`:
0, 0.0, 0.0
1, 38.566129, -121.426432
2, 38.559615, -121.42243

CREATE TABLE `location` (
  LocationID INTEGER REFERENCES geolocation(LocationID),
  LocationName TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER
);
Sample rows from `location`:
0, LOST, None, None, None, None
1, Sac State American River Courtyard, 6000 J St, Sacramento, CA, 95819
2, Sac State Union, 6000 J St, Sacramento, CA, 95819

CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

CREATE TABLE `rootbeerreview` (
  CustomerID INTEGER PRIMARY KEY REFERENCES customers(CustomerID),
  BrandID INTEGER PRIMARY KEY REFERENCES rootbeerbrand(BrandID),
  StarRating INTEGER,
  ReviewDate DATE,
  Review TEXT
);
Sample rows from `rootbeerreview`:
101811, 10012, 5, 2013-07-15, None
101811, 10014, 1, 2013-07-08, None
101811, 10015, 3, 2013-07-25, None

CREATE TABLE `transaction` (
  TransactionID INTEGER,
  CreditCardNumber INTEGER,
  CustomerID INTEGER REFERENCES customers(CustomerID),
  TransactionDate DATE,
  CreditCardType TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  RootBeerID INTEGER REFERENCES rootbeer(RootBeerID),
  PurchasePrice REAL
);
Sample rows from `transaction`:
100000, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105661, 3.0
100001, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105798, 3.0
100002, 6011583832864739, 864896, 2014-07-07, Discover, 2, 102514, 3.0

",transaction,"transactionid, creditcardtype, transactiondate","customers, geolocation, location, rootbeerbrand, rootbeer, rootbeerreview, transaction"
language_corpus,What number of words are there on revision page 27457362?,SELECT words FROM pages WHERE revision = 27457362,"CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

","CREATE TABLE `langs` (
  lid INTEGER,
  lang TEXT PRIMARY KEY,
  locale TEXT PRIMARY KEY,
  pages INTEGER,
  words INTEGER
);
Sample rows from `langs`:
1, ca, ca_ES, 1129144, 2764996

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
langs, 1
pages, 1129144
words, 2764996

CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `langs_words` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `langs_words`:
1, 1, 242
1, 2, 16841
1, 3, 48700

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

",pages,"words, revision","langs, sqlite_sequence, pages, words, langs_words, pages_words, biwords"
video_games,How many shooter games are there?,SELECT COUNT(t1.id) FROM game as t1 inner JOIN genre as t2 ON t1.genre_id = t2.id WHERE t2.genre_name = 'Shooter',"CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

","CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

","game, genre","game.id, game.genre_id, genre.id, genre.genre_name","genre, game, platform, publisher, game_publisher, game_platform, region, region_sales"
world,What is the GNP growth rate by the country of Shanghai?,SELECT cast((t1.gnp - t1.gnpOld) as real) / t1.gnpOld FROM country as t1 inner JOIN city as t2 ON t1.code = t2.countrycode WHERE t2.name = 'Shanghai',"CREATE TABLE `country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

CREATE TABLE `city` (
  ID INTEGER,
  Name TEXT,
  CountryCode TEXT REFERENCES Country(Code),
  District TEXT,
  Population INTEGER
);
Sample rows from `city`:
1, Kabul, AFG, Kabol, 1780000
2, Qandahar, AFG, Qandahar, 237500
3, Herat, AFG, Herat, 186800

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
City, 4079

CREATE TABLE `City` (
  ID INTEGER,
  Name TEXT,
  CountryCode TEXT REFERENCES Country(Code),
  District TEXT,
  Population INTEGER
);
Sample rows from `City`:
1, Kabul, AFG, Kabol, 1780000
2, Qandahar, AFG, Qandahar, 237500
3, Herat, AFG, Herat, 186800

CREATE TABLE `Country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `Country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

CREATE TABLE `CountryLanguage` (
  CountryCode TEXT PRIMARY KEY REFERENCES Country(Code),
  Language TEXT PRIMARY KEY,
  IsOfficial TEXT,
  Percentage REAL
);
Sample rows from `CountryLanguage`:
ABW, Dutch, T, 5.3
ABW, English, F, 9.5
ABW, Papiamento, F, 76.7

","country, city","country.gnp, country.gnpOld, country.code, city.countrycode, city.name","sqlite_sequence, City, Country, CountryLanguage"
authors,Write down the author's name and IDs who are affiliated with Univeristiy of Oulu.,"SELECT name, id FROM author WHERE affiliation = 'University of Oulu'","CREATE TABLE `author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

","CREATE TABLE `Author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `Author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

CREATE TABLE `Conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

CREATE TABLE `Journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `Paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `Paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `PaperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `PaperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

",author,"name, id, affiliation","Author, Conference, Journal, Paper, PaperAuthor"
cookbook,"How many ingredients must be rationed in the recipe ""Raspberry Chiffon Pie""?",SELECT COUNT(*) FROM recipe as t1 inner JOIN quantity as t2 ON t1.recipe_id = t2.recipe_id WHERE t1.title = 'Raspberry Chiffon Pie' AND t2.max_qty = t2.min_qty,"CREATE TABLE `recipe` (
  recipe_id INTEGER,
  title TEXT,
  subtitle TEXT,
  servings INTEGER,
  yield_unit TEXT,
  prep_min INTEGER,
  cook_min INTEGER,
  stnd_min INTEGER,
  source TEXT,
  intro TEXT,
  directions TEXT
);
Sample rows from `recipe`:
214, Raspberry Chiffon Pie, None, 10, 1 pie, 20, 8, 305, The California Tree Fruit Agreement, None, For crust, preheat oven to 375 degrees F.
In lightly greased 10-inch pie plate, combine graham cracker crumbs, melted butter and 1/4 cup sugar. Press evenly on bottom and up side of plate. Bake 5 minutes; cool.

For filling, in medium saucepan, combine juice or water and gelatin; let stand 5 minutes. Add 1/3 cup sugar and heat over medium heat, stirring to dissolve gelatin. In blender or food processor, puree 6 plums. Add puree and raspberries to gelatin mixture. Refrigerate until mixture begins to set about 1 hour. Stir yogurt into fruit mixture. In large bowl, beat egg whites until frothy. Gradually add cream of tartar and remaining 1/3 cup sugar and beat until stiff peaks form. Gently fold egg whites into fruit mixture so as not to reduce volume. Spoon into crust. Refrigerate 4 hours or overnight. Thinly slice remaining 2 plums and garnish top of pie.
215, Apricot Yogurt Parfaits, None, 4, None, 5, 2, 65, Produce for Better Health Foundation and 5 a Day, None, Drain canned apricots, pour 1/4 cup of the juice into saucepan or microwave-safe dish. Sprinkle gelatin over juice and let stand for 5 minutes to soften. Warm over low heat or microwave at medium (50% power) for 30 seconds or until gelatin has dissolved.
 
In food processor or blender, puree canned apricots; add lemon juice brandy, yogurt and gelatin mixture and process for 30 seconds or until combined.
 
Pour into parfait or stemmed glasses or champagne flutes. Cover and refrigerate until set, at least 1 hour or overnight.
 
Just before serving arrange fresh apricots on top. (If apricots are not available substitute kiwi slices or berries). Garnish each with a small spoonful of yogurt and sprinkling of brown sugar or mint.
216, Fresh Apricot Bavarian, None, 8, None, 5, 13, 0, The California Apricot Advisory Board, Serve in stemmed glasses and top with sliced apricots for elegant endings., Drop apricots into boiling water to cover. Return to boil and simmer for 5 minutes or until skins begin to split. Drain and rinse under cold water. Halve fruit and discard skins and pits. Puree apricots in electric blender. Combine water and gelatin in small saucepan; stir over low heat until dissolved. Mix sugar, apricot puree and yogurt with a wire whip until smooth; mix in dissolved gelatin. Sweeten to taste if desired. Chill mixture until thick. Spoon into stemmed glasses.

Note: One pound fresh apricots is 15 to 20. One and a half envelopes gelatin is 4 teaspoons.

CREATE TABLE `quantity` (
  quantity_id INTEGER,
  recipe_id INTEGER REFERENCES Nutrition(recipe_id) REFERENCES Recipe(recipe_id),
  ingredient_id INTEGER REFERENCES Ingredient(ingredient_id),
  max_qty REAL,
  min_qty REAL,
  unit TEXT,
  preparation TEXT,
  optional TEXT
);
Sample rows from `quantity`:
1, 214, 1613, 2.0, 2.0, cup(s), None, FALSE
2, 214, 3334, 0.25, 0.25, cup(s), None, FALSE
3, 214, 2222, 0.5, 0.5, cup(s), melted, FALSE

","CREATE TABLE `Ingredient` (
  ingredient_id INTEGER,
  category TEXT,
  name TEXT,
  plural TEXT
);
Sample rows from `Ingredient`:
1, dairy, 1% lowfat cottage cheese, None
6, dairy, 1% lowfat milk, None
10, Mexican products, 10-inch flour tortilla, s

CREATE TABLE `Recipe` (
  recipe_id INTEGER,
  title TEXT,
  subtitle TEXT,
  servings INTEGER,
  yield_unit TEXT,
  prep_min INTEGER,
  cook_min INTEGER,
  stnd_min INTEGER,
  source TEXT,
  intro TEXT,
  directions TEXT
);
Sample rows from `Recipe`:
214, Raspberry Chiffon Pie, None, 10, 1 pie, 20, 8, 305, The California Tree Fruit Agreement, None, For crust, preheat oven to 375 degrees F.
In lightly greased 10-inch pie plate, combine graham cracker crumbs, melted butter and 1/4 cup sugar. Press evenly on bottom and up side of plate. Bake 5 minutes; cool.

For filling, in medium saucepan, combine juice or water and gelatin; let stand 5 minutes. Add 1/3 cup sugar and heat over medium heat, stirring to dissolve gelatin. In blender or food processor, puree 6 plums. Add puree and raspberries to gelatin mixture. Refrigerate until mixture begins to set about 1 hour. Stir yogurt into fruit mixture. In large bowl, beat egg whites until frothy. Gradually add cream of tartar and remaining 1/3 cup sugar and beat until stiff peaks form. Gently fold egg whites into fruit mixture so as not to reduce volume. Spoon into crust. Refrigerate 4 hours or overnight. Thinly slice remaining 2 plums and garnish top of pie.
215, Apricot Yogurt Parfaits, None, 4, None, 5, 2, 65, Produce for Better Health Foundation and 5 a Day, None, Drain canned apricots, pour 1/4 cup of the juice into saucepan or microwave-safe dish. Sprinkle gelatin over juice and let stand for 5 minutes to soften. Warm over low heat or microwave at medium (50% power) for 30 seconds or until gelatin has dissolved.
 
In food processor or blender, puree canned apricots; add lemon juice brandy, yogurt and gelatin mixture and process for 30 seconds or until combined.
 
Pour into parfait or stemmed glasses or champagne flutes. Cover and refrigerate until set, at least 1 hour or overnight.
 
Just before serving arrange fresh apricots on top. (If apricots are not available substitute kiwi slices or berries). Garnish each with a small spoonful of yogurt and sprinkling of brown sugar or mint.
216, Fresh Apricot Bavarian, None, 8, None, 5, 13, 0, The California Apricot Advisory Board, Serve in stemmed glasses and top with sliced apricots for elegant endings., Drop apricots into boiling water to cover. Return to boil and simmer for 5 minutes or until skins begin to split. Drain and rinse under cold water. Halve fruit and discard skins and pits. Puree apricots in electric blender. Combine water and gelatin in small saucepan; stir over low heat until dissolved. Mix sugar, apricot puree and yogurt with a wire whip until smooth; mix in dissolved gelatin. Sweeten to taste if desired. Chill mixture until thick. Spoon into stemmed glasses.

Note: One pound fresh apricots is 15 to 20. One and a half envelopes gelatin is 4 teaspoons.

CREATE TABLE `Nutrition` (
  recipe_id INTEGER REFERENCES Recipe(recipe_id),
  protein REAL,
  carbo REAL,
  alcohol REAL,
  total_fat REAL,
  sat_fat REAL,
  cholestrl REAL,
  sodium REAL,
  iron REAL,
  vitamin_c REAL,
  vitamin_a REAL,
  fiber REAL,
  pcnt_cal_carb REAL,
  pcnt_cal_fat REAL,
  pcnt_cal_prot REAL,
  calories REAL
);
Sample rows from `Nutrition`:
214, 5.47, 41.29, 0.0, 11.53, 2.21, 1.39, 260.78, 0.81, 8.89, 586.2, 0.87, 56.8, 35.68, 7.53, 290.79
215, 5.7, 23.75, 1.93, 1.08, 0.58, 3.48, 46.17, 0.57, 13.02, 2738.24, 0.62, 67.38, 6.89, 16.17, 141.01
216, 4.9, 26.88, 0.0, 1.1, 0.58, 3.46, 41.79, 0.37, 6.13, 1521.1, 0.34, 78.45, 7.24, 14.3, 137.06

CREATE TABLE `Quantity` (
  quantity_id INTEGER,
  recipe_id INTEGER REFERENCES Nutrition(recipe_id) REFERENCES Recipe(recipe_id),
  ingredient_id INTEGER REFERENCES Ingredient(ingredient_id),
  max_qty REAL,
  min_qty REAL,
  unit TEXT,
  preparation TEXT,
  optional TEXT
);
Sample rows from `Quantity`:
1, 214, 1613, 2.0, 2.0, cup(s), None, FALSE
2, 214, 3334, 0.25, 0.25, cup(s), None, FALSE
3, 214, 2222, 0.5, 0.5, cup(s), melted, FALSE

","recipe, quantity","recipe.recipe_id, quantity.recipe_id, recipe.title, quantity.max_qty, quantity.min_qty","Ingredient, Recipe, Nutrition, Quantity"
language_corpus,What is the word id of the catalan language that was repeated no more than 10 times in the said language?,SELECT wid FROM langs_words WHERE occurrences <= 10,"CREATE TABLE `langs_words` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `langs_words`:
1, 1, 242
1, 2, 16841
1, 3, 48700

","CREATE TABLE `langs` (
  lid INTEGER,
  lang TEXT PRIMARY KEY,
  locale TEXT PRIMARY KEY,
  pages INTEGER,
  words INTEGER
);
Sample rows from `langs`:
1, ca, ca_ES, 1129144, 2764996

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
langs, 1
pages, 1129144
words, 2764996

CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `langs_words` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `langs_words`:
1, 1, 242
1, 2, 16841
1, 3, 48700

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

",langs_words,"wid, occurrences","langs, sqlite_sequence, pages, words, langs_words, pages_words, biwords"
university,"Among the universities in United States of America, what is the percentage of female students in year 2016?",SELECT SUM(cast(t2.pct_female_students * t2.num_students as real) / 100) * 100 / SUM(t2.num_students) FROM university as t1 inner JOIN university_year as t2 ON t1.id = t2.university_id inner JOIN country as t3 ON t3.id = t1.country_id WHERE t3.country_name = 'United States of America' AND t2.year = 2016,"CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

","CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

CREATE TABLE `ranking_system` (
  id INTEGER,
  system_name TEXT
);
Sample rows from `ranking_system`:
1, Times Higher Education World University Ranking
2, Shanghai Ranking
3, Center for World University Rankings

CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

","university, university_year, country","university_year.pct_female_students, university_year.num_students, university.id, university_year.university_id, country.id, university.country_id, country.country_name, university_year.year","country, ranking_system, ranking_criteria, university, university_ranking_year, university_year"
movie,What is the average rating of all the movies starring Tom Cruise?,SELECT AVG(t1.rating) FROM movie as t1 inner JOIN characters as t2 ON t1.movieid = t2.movieid inner JOIN actor as t3 ON t3.actorid = t2.actorid WHERE t3.name = 'Tom Cruise',"CREATE TABLE `movie` (
  MovieID INTEGER,
  Title TEXT,
  MPAA Rating TEXT,
  Budget INTEGER,
  Gross INTEGER,
  Release Date TEXT,
  Genre TEXT,
  Runtime INTEGER,
  Rating REAL,
  Rating Count INTEGER,
  Summary TEXT
);
Sample rows from `movie`:
1, Look Who's Talking, PG-13, 7500000, 296000000, 1989-10-12, Romance, 93, 5.9, 73638, After a single, career-minded woman is left on her own to give birth to the child of a married man, she finds a new romantic chance in a cab driver. Meanwhile, the point-of-view of the newborn boy is narrated through voice-over.
2, Driving Miss Daisy, PG, 7500000, 145793296, 1989-12-13, Comedy, 99, 7.4, 91075, An old Jewish woman and her African-American chauffeur in the American South have a relationship that grows and improves over the years.
3, Turner & Hooch, PG, 13000000, 71079915, 1989-07-28, Crime, 100, 7.2, 91415, Det. Scott Turner (Tom Hanks) is an uptight, by-the-book police officer. When his friend Amos Reed (John McIntire), the proprietor of a junkyard, is killed, Turner reluctantly inherits the man's dog. Turner adjusts to life with the dog to help solve a murder case.

CREATE TABLE `characters` (
  MovieID INTEGER PRIMARY KEY REFERENCES movie(MovieID),
  ActorID INTEGER PRIMARY KEY REFERENCES actor(ActorID),
  Character Name TEXT,
  creditOrder INTEGER,
  pay TEXT,
  screentime TEXT
);
Sample rows from `characters`:
1, 1, James, 1, None, None
1, 2, Mollie, 2, None, None
1, 3, Rosie, 3, None, None

CREATE TABLE `actor` (
  ActorID INTEGER,
  Name TEXT,
  Date of Birth DATE,
  Birth City TEXT,
  Birth Country TEXT,
  Height (Inches) INTEGER,
  Biography TEXT,
  Gender TEXT,
  Ethnicity TEXT,
  NetWorth TEXT
);
Sample rows from `actor`:
1, John Travolta, 1954-02-18, Englewood, USA, 74, John Joseph Travolta was born in Englewood, New Jersey, one of six children of Helen Travolta (n�e Helen Cecilia Burke) and Salvatore/Samuel J. Travolta. His father was of Italian descent and his mother was of Irish ancestry. His father owned a tire repair shop called Travolta Tires in Hillsdale, NJ. Travolta started acting appearing in a local ..., Male, White, $250,000,000.00
2, Kirstie Alley, 1951-01-12, Wichita, USA, 67, None, Female, White, $40,000,000.00
3, Olympia Dukakis, 1931-06-20, Lowell, USA, 63, Long a vital, respected lady of the classic and contemporary stage this grand lady did not become a household name and sought-after film actress until age 56 when she turned in a glorious, Oscar-winning perf as Cher's sardonic mother in the romantic comedy Moonstruck (1987). Since then movie (and TV) fans have discovered what the East coast ..., Female, White, $6,000,000.00

","CREATE TABLE `actor` (
  ActorID INTEGER,
  Name TEXT,
  Date of Birth DATE,
  Birth City TEXT,
  Birth Country TEXT,
  Height (Inches) INTEGER,
  Biography TEXT,
  Gender TEXT,
  Ethnicity TEXT,
  NetWorth TEXT
);
Sample rows from `actor`:
1, John Travolta, 1954-02-18, Englewood, USA, 74, John Joseph Travolta was born in Englewood, New Jersey, one of six children of Helen Travolta (n�e Helen Cecilia Burke) and Salvatore/Samuel J. Travolta. His father was of Italian descent and his mother was of Irish ancestry. His father owned a tire repair shop called Travolta Tires in Hillsdale, NJ. Travolta started acting appearing in a local ..., Male, White, $250,000,000.00
2, Kirstie Alley, 1951-01-12, Wichita, USA, 67, None, Female, White, $40,000,000.00
3, Olympia Dukakis, 1931-06-20, Lowell, USA, 63, Long a vital, respected lady of the classic and contemporary stage this grand lady did not become a household name and sought-after film actress until age 56 when she turned in a glorious, Oscar-winning perf as Cher's sardonic mother in the romantic comedy Moonstruck (1987). Since then movie (and TV) fans have discovered what the East coast ..., Female, White, $6,000,000.00

CREATE TABLE `movie` (
  MovieID INTEGER,
  Title TEXT,
  MPAA Rating TEXT,
  Budget INTEGER,
  Gross INTEGER,
  Release Date TEXT,
  Genre TEXT,
  Runtime INTEGER,
  Rating REAL,
  Rating Count INTEGER,
  Summary TEXT
);
Sample rows from `movie`:
1, Look Who's Talking, PG-13, 7500000, 296000000, 1989-10-12, Romance, 93, 5.9, 73638, After a single, career-minded woman is left on her own to give birth to the child of a married man, she finds a new romantic chance in a cab driver. Meanwhile, the point-of-view of the newborn boy is narrated through voice-over.
2, Driving Miss Daisy, PG, 7500000, 145793296, 1989-12-13, Comedy, 99, 7.4, 91075, An old Jewish woman and her African-American chauffeur in the American South have a relationship that grows and improves over the years.
3, Turner & Hooch, PG, 13000000, 71079915, 1989-07-28, Crime, 100, 7.2, 91415, Det. Scott Turner (Tom Hanks) is an uptight, by-the-book police officer. When his friend Amos Reed (John McIntire), the proprietor of a junkyard, is killed, Turner reluctantly inherits the man's dog. Turner adjusts to life with the dog to help solve a murder case.

CREATE TABLE `characters` (
  MovieID INTEGER PRIMARY KEY REFERENCES movie(MovieID),
  ActorID INTEGER PRIMARY KEY REFERENCES actor(ActorID),
  Character Name TEXT,
  creditOrder INTEGER,
  pay TEXT,
  screentime TEXT
);
Sample rows from `characters`:
1, 1, James, 1, None, None
1, 2, Mollie, 2, None, None
1, 3, Rosie, 3, None, None

","movie, characters, actor","movie.rating, movie.movieid, characters.movieid, actor.actorid, characters.actorid, actor.name","actor, movie, characters"
sales,Calculate the total number of sales closed by Michel E. DeFrance?,SELECT COUNT(t1.salesid) FROM sales as t1 inner JOIN employees as t2 ON t1.salesPersonID = t2.employeeid WHERE t2.firstname = 'Michel' AND t2.middleinitial = 'e' AND t2.lastname = 'DeFrance',"CREATE TABLE `sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

CREATE TABLE `employees` (
  EmployeeID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `employees`:
1, Abraham, e, Bennet
2, Reginald, l, Blotchet-Halls
3, Cheryl, a, Carson

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Employees`:
1, Abraham, e, Bennet
2, Reginald, l, Blotchet-Halls
3, Cheryl, a, Carson

CREATE TABLE `Products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

CREATE TABLE `Sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `Sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

","sales, employees","sales.salesid, sales.salesPersonID, employees.employeeid, employees.firstname, employees.middleinitial, employees.lastname","Customers, Employees, Products, Sales"
european_football_1,"Of all the teams that played as a team away against Caen in the 2010 season, which one has the highest winning percentage?",SELECT awayteam FROM matchs WHERE hometeam = 'Caen' aND season = 2010 aND ftr = 'a' GROUP BY awayteam ORDER BY COUNT(awayteam) DESC LIMIT 1,"CREATE TABLE `matchs` (
  Div TEXT REFERENCES divisions(division),
  Date DATE,
  HomeTeam TEXT,
  AwayTeam TEXT,
  FTHG INTEGER,
  FTAG INTEGER,
  FTR TEXT,
  season INTEGER
);
Sample rows from `matchs`:
B1, 2020-08-08, Club Brugge, Charleroi, 0, 1, A, 2021
B1, 2020-08-08, Antwerp, Mouscron, 1, 1, D, 2021
B1, 2020-08-08, Standard, Cercle Brugge, 1, 0, H, 2021

","CREATE TABLE `divisions` (
  division TEXT PRIMARY KEY,
  name TEXT,
  country TEXT
);
Sample rows from `divisions`:
B1, Division 1A, Belgium
D1, Bundesliga, Deutschland
D2, 2. Bundesliga, Deutschland

CREATE TABLE `matchs` (
  Div TEXT REFERENCES divisions(division),
  Date DATE,
  HomeTeam TEXT,
  AwayTeam TEXT,
  FTHG INTEGER,
  FTAG INTEGER,
  FTR TEXT,
  season INTEGER
);
Sample rows from `matchs`:
B1, 2020-08-08, Club Brugge, Charleroi, 0, 1, A, 2021
B1, 2020-08-08, Antwerp, Mouscron, 1, 1, D, 2021
B1, 2020-08-08, Standard, Cercle Brugge, 1, 0, H, 2021

",matchs,"awayteam, hometeam, season, ftr","divisions, matchs"
retail_complains,List down the full name of clients who have disputed the response from company.,"SELECT t1.first, t1.middle, t1.last FROM client as t1 inner JOIN events as t2 ON t1.client_id = t2.client_id WHERE t2.`consumer disputed?` = 'Yes'","CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

","CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

","client, events","client.first, client.middle, client.last, client.client_id, events.client_id, events.consumer disputed?","state, callcenterlogs, client, district, events, reviews"
restaurant,On which streets in the city of San Francisco are there restaurants with a review of 1.7?,SELECT t2.street_name FROM generalinfo as t1 inner JOIN location as t2 ON t1.id_restaurant = t2.id_restaurant WHERE t1.city = 'san francisco' AND t1.review = 1.7,"CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

","CREATE TABLE `geographic` (
  city TEXT PRIMARY KEY,
  county TEXT,
  region TEXT
);
Sample rows from `geographic`:
alameda, alameda county, bay area
alamo, contra costa county, bay area
albany, alameda county, bay area

CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

","generalinfo, location","location.street_name, generalinfo.id_restaurant, location.id_restaurant, generalinfo.city, generalinfo.review","geographic, generalinfo, location"
public_review_platform,How many Yelp_Businesses are there in Arizona in total?,SELECT COUNT(business_id) FROM business WHERE state LIKE 'AZ',"CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

",business,"business_id, state","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
chicago_crime,"Please list the area name of the communities in the Far north side, which has a population of more than 50000 but less than 70000.","SELECT community_area_name, side FROM community_area WHERE side = 'Far North ' AND population BETWEEN 50000 AND 70000","CREATE TABLE `community_area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `community_area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

","CREATE TABLE `Community_Area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `Community_Area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `District` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `District`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `FBI_Code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `FBI_Code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `IUCR` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `IUCR`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `Neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `Neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `Ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `Ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `Crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `Crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

",community_area,"community_area_name, side, population","Community_Area, District, FBI_Code, IUCR, Neighborhood, Ward, Crime"
public_review_platform,How many businesses are actively running in Gilbert City?,SELECT COUNT(business_id) FROM business WHERE city LIKE 'Gilbert' AND active LIKE 'True',"CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

",business,"business_id, city, active","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
public_review_platform,What are the categories of businesses that have opening time on Sunday?,SELECT DISTINCT t1.category_name FROM categories as t1 inner JOIN Business_categories as t2 ON t1.category_id = t2.category_id inner JOIN business_hours as t3 ON t2.business_id = t3.business_id inner JOIN days as t4 ON t3.day_id = t4.day_id WHERE t4.day_of_week = 'Sunday' AND t3.opening_time <> '',"CREATE TABLE `categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Business_categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_categories`:
1, 8
1, 143
2, 18

CREATE TABLE `business_hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `business_hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `days`:
1, Sunday
2, Monday
3, Tuesday

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","categories, Business_categories, business_hours, days","categories.category_name, categories.category_id, Business_categories.category_id, Business_categories.business_id, business_hours.business_id, business_hours.day_id, days.day_id, days.day_of_week, business_hours.opening_time","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
human_resources,What is the education required for David Whitehead to reach his current position?,SELECT t2.educationrequired FROm employee as t1  inner JOIN position as t2  ON t1.positionid = t2.positionid WHERE t1.firstname = 'David' AND t1.lastname = 'Whitehead' AND t1.gender = 'm',"CREATE TABLE `employee` (
  ssn TEXT PRIMARY KEY,
  lastname TEXT,
  firstname TEXT,
  hiredate TEXT,
  salary TEXT,
  gender TEXT,
  performance TEXT,
  positionID INTEGER REFERENCES position(positionID),
  locationID INTEGER REFERENCES location(locationID)
);
Sample rows from `employee`:
000-01-0000, Milgrom, Patricia, 10/1/04, US$57,500.00, F, Average, 2, 2
000-02-2222, Adams, Sandy, 1/15/01, US$19,500.00, F, Average, 3, 1
109-87-6543, Wood, Emily, 3/12/97, US$69,000.00, F, Average, 2, 5

CREATE TABLE `position` (
  positionID INTEGER,
  positiontitle TEXT,
  educationrequired TEXT,
  minsalary TEXT,
  maxsalary TEXT
);
Sample rows from `position`:
1, Account Representative, 4 year degree, US$25,000.00, US$75,000.00
2, Manager, 4 year degree, US$50,000.00, US$150,000.00
3, Trainee, 2 year degree, US$18,000.00, US$25,000.00

","CREATE TABLE `location` (
  locationID INTEGER,
  locationcity TEXT,
  address TEXT,
  state TEXT,
  zipcode INTEGER,
  officephone TEXT
);
Sample rows from `location`:
1, Atlanta, 450 Peachtree Rd, GA, 30316, (404)333-5555
2, Boston, 3 Commons Blvd, MA, 2190, (617)123-4444
3, Chicago, 500 Loop Highway, IL, 60620, (312)444-6666

CREATE TABLE `position` (
  positionID INTEGER,
  positiontitle TEXT,
  educationrequired TEXT,
  minsalary TEXT,
  maxsalary TEXT
);
Sample rows from `position`:
1, Account Representative, 4 year degree, US$25,000.00, US$75,000.00
2, Manager, 4 year degree, US$50,000.00, US$150,000.00
3, Trainee, 2 year degree, US$18,000.00, US$25,000.00

CREATE TABLE `employee` (
  ssn TEXT PRIMARY KEY,
  lastname TEXT,
  firstname TEXT,
  hiredate TEXT,
  salary TEXT,
  gender TEXT,
  performance TEXT,
  positionID INTEGER REFERENCES position(positionID),
  locationID INTEGER REFERENCES location(locationID)
);
Sample rows from `employee`:
000-01-0000, Milgrom, Patricia, 10/1/04, US$57,500.00, F, Average, 2, 2
000-02-2222, Adams, Sandy, 1/15/01, US$19,500.00, F, Average, 3, 1
109-87-6543, Wood, Emily, 3/12/97, US$69,000.00, F, Average, 2, 5

","employee, position","position.educationrequired, employee.positionid, position.positionid, employee.firstname, employee.lastname, employee.gender","location, position, employee"
law_episode,How many times was episode 20 of the Law and Order series nominated for the Primetime Emmy Awards in 1999?,SELECT COUNT(t2.award_id) FROM episode as t1 inner JOIN award as t2 ON t1.episode_id = t2.episode_id WHERE t2.year = 1999 AND t2.result = 'Nominee' AND t1.episode = 20 AND t2.organization = 'Primetime Emmy awards' AND t1.series = 'Law and Order',"CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  series TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  person_id TEXT REFERENCES Person(person_id),
  role TEXT,
  result TEXT
);
Sample rows from `award`:
258, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0937725, None, Winner
259, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0792309, None, Winner
260, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0049569, None, Winner

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
tt0629239, nun
tt0629239, priest
tt0629420, police officer

CREATE TABLE `Person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  series TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  person_id TEXT REFERENCES Person(person_id),
  role TEXT,
  result TEXT
);
Sample rows from `Award`:
258, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0937725, None, Winner
259, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0792309, None, Winner
260, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0049569, None, Winner

CREATE TABLE `Credit` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  person_id TEXT PRIMARY KEY REFERENCES Person(person_id),
  category TEXT,
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
tt0629204, nm0226352, Additional Crew, technical advisor, true
tt0629204, nm0506974, Additional Crew, production accountant, true
tt0629204, nm4103116, Additional Crew, production accountant, true

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
tt0629204, 10, 36, 17.7
tt0629204, 9, 39, 19.2
tt0629204, 8, 64, 31.5

","episode, award","award.award_id, episode.episode_id, award.episode_id, award.year, award.result, episode.episode, award.organization, episode.series","Episode, Keyword, Person, Award, Credit, Vote"
video_games,Which year has the most number of video game releases?,"SELECt t1.release_year FROM ( SELECt t.release_year, COUNT(id) FROM game_platform as t GROUP BY t.release_year ORDER BY COUNT(t.id) DESC LIMIt 1 ) t1","CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

","CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

",game_platform,"game_platform.release_year, id, game_platform.id","genre, game, platform, publisher, game_publisher, game_platform, region, region_sales"
cookbook,List the ingredients which measure in slices.,SELECT t1.name FROM ingredient as t1 inner JOIN quantity as t2 ON t1.ingredient_id = t2.ingredient_id WHERE t2.unit = 'slice(s)',"CREATE TABLE `ingredient` (
  ingredient_id INTEGER,
  category TEXT,
  name TEXT,
  plural TEXT
);
Sample rows from `ingredient`:
1, dairy, 1% lowfat cottage cheese, None
6, dairy, 1% lowfat milk, None
10, Mexican products, 10-inch flour tortilla, s

CREATE TABLE `quantity` (
  quantity_id INTEGER,
  recipe_id INTEGER REFERENCES Nutrition(recipe_id) REFERENCES Recipe(recipe_id),
  ingredient_id INTEGER REFERENCES Ingredient(ingredient_id),
  max_qty REAL,
  min_qty REAL,
  unit TEXT,
  preparation TEXT,
  optional TEXT
);
Sample rows from `quantity`:
1, 214, 1613, 2.0, 2.0, cup(s), None, FALSE
2, 214, 3334, 0.25, 0.25, cup(s), None, FALSE
3, 214, 2222, 0.5, 0.5, cup(s), melted, FALSE

","CREATE TABLE `Ingredient` (
  ingredient_id INTEGER,
  category TEXT,
  name TEXT,
  plural TEXT
);
Sample rows from `Ingredient`:
1, dairy, 1% lowfat cottage cheese, None
6, dairy, 1% lowfat milk, None
10, Mexican products, 10-inch flour tortilla, s

CREATE TABLE `Recipe` (
  recipe_id INTEGER,
  title TEXT,
  subtitle TEXT,
  servings INTEGER,
  yield_unit TEXT,
  prep_min INTEGER,
  cook_min INTEGER,
  stnd_min INTEGER,
  source TEXT,
  intro TEXT,
  directions TEXT
);
Sample rows from `Recipe`:
214, Raspberry Chiffon Pie, None, 10, 1 pie, 20, 8, 305, The California Tree Fruit Agreement, None, For crust, preheat oven to 375 degrees F.
In lightly greased 10-inch pie plate, combine graham cracker crumbs, melted butter and 1/4 cup sugar. Press evenly on bottom and up side of plate. Bake 5 minutes; cool.

For filling, in medium saucepan, combine juice or water and gelatin; let stand 5 minutes. Add 1/3 cup sugar and heat over medium heat, stirring to dissolve gelatin. In blender or food processor, puree 6 plums. Add puree and raspberries to gelatin mixture. Refrigerate until mixture begins to set about 1 hour. Stir yogurt into fruit mixture. In large bowl, beat egg whites until frothy. Gradually add cream of tartar and remaining 1/3 cup sugar and beat until stiff peaks form. Gently fold egg whites into fruit mixture so as not to reduce volume. Spoon into crust. Refrigerate 4 hours or overnight. Thinly slice remaining 2 plums and garnish top of pie.
215, Apricot Yogurt Parfaits, None, 4, None, 5, 2, 65, Produce for Better Health Foundation and 5 a Day, None, Drain canned apricots, pour 1/4 cup of the juice into saucepan or microwave-safe dish. Sprinkle gelatin over juice and let stand for 5 minutes to soften. Warm over low heat or microwave at medium (50% power) for 30 seconds or until gelatin has dissolved.
 
In food processor or blender, puree canned apricots; add lemon juice brandy, yogurt and gelatin mixture and process for 30 seconds or until combined.
 
Pour into parfait or stemmed glasses or champagne flutes. Cover and refrigerate until set, at least 1 hour or overnight.
 
Just before serving arrange fresh apricots on top. (If apricots are not available substitute kiwi slices or berries). Garnish each with a small spoonful of yogurt and sprinkling of brown sugar or mint.
216, Fresh Apricot Bavarian, None, 8, None, 5, 13, 0, The California Apricot Advisory Board, Serve in stemmed glasses and top with sliced apricots for elegant endings., Drop apricots into boiling water to cover. Return to boil and simmer for 5 minutes or until skins begin to split. Drain and rinse under cold water. Halve fruit and discard skins and pits. Puree apricots in electric blender. Combine water and gelatin in small saucepan; stir over low heat until dissolved. Mix sugar, apricot puree and yogurt with a wire whip until smooth; mix in dissolved gelatin. Sweeten to taste if desired. Chill mixture until thick. Spoon into stemmed glasses.

Note: One pound fresh apricots is 15 to 20. One and a half envelopes gelatin is 4 teaspoons.

CREATE TABLE `Nutrition` (
  recipe_id INTEGER REFERENCES Recipe(recipe_id),
  protein REAL,
  carbo REAL,
  alcohol REAL,
  total_fat REAL,
  sat_fat REAL,
  cholestrl REAL,
  sodium REAL,
  iron REAL,
  vitamin_c REAL,
  vitamin_a REAL,
  fiber REAL,
  pcnt_cal_carb REAL,
  pcnt_cal_fat REAL,
  pcnt_cal_prot REAL,
  calories REAL
);
Sample rows from `Nutrition`:
214, 5.47, 41.29, 0.0, 11.53, 2.21, 1.39, 260.78, 0.81, 8.89, 586.2, 0.87, 56.8, 35.68, 7.53, 290.79
215, 5.7, 23.75, 1.93, 1.08, 0.58, 3.48, 46.17, 0.57, 13.02, 2738.24, 0.62, 67.38, 6.89, 16.17, 141.01
216, 4.9, 26.88, 0.0, 1.1, 0.58, 3.46, 41.79, 0.37, 6.13, 1521.1, 0.34, 78.45, 7.24, 14.3, 137.06

CREATE TABLE `Quantity` (
  quantity_id INTEGER,
  recipe_id INTEGER REFERENCES Nutrition(recipe_id) REFERENCES Recipe(recipe_id),
  ingredient_id INTEGER REFERENCES Ingredient(ingredient_id),
  max_qty REAL,
  min_qty REAL,
  unit TEXT,
  preparation TEXT,
  optional TEXT
);
Sample rows from `Quantity`:
1, 214, 1613, 2.0, 2.0, cup(s), None, FALSE
2, 214, 3334, 0.25, 0.25, cup(s), None, FALSE
3, 214, 2222, 0.5, 0.5, cup(s), melted, FALSE

","ingredient, quantity","ingredient.name, ingredient.ingredient_id, quantity.ingredient_id, quantity.unit","Ingredient, Recipe, Nutrition, Quantity"
video_games,Calculate the average game sales for the PS2 platform.,SELECT SUM(t3.num_sales * 100000) / COUNT(t1.id) FROM platform as t1 inner JOIN game_platform as t2 ON t1.id = t2.platform_id inner JOIN region_sales as t3 ON t2.id = t3.game_platform_id WHERE t1.platform_name = 'PS2',"CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

","CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

","platform, game_platform, region_sales","region_sales.num_sales, platform.id, game_platform.platform_id, game_platform.id, region_sales.game_platform_id, platform.platform_name","genre, game, platform, publisher, game_publisher, game_platform, region, region_sales"
social_media,State the country where the most positive sentiment tweets were posted.,"SELECt t.country FROM ( SELECt t2.country, SUM(t1.sentiment) as num FROM twitter as t1 inner JOIN location as t2 ON t1.locationid = t2.locationid WHERE t1.sentiment > 0 GROUP BY t2.country ) t ORDER BY t.num DESC LIMIt 1","CREATE TABLE `twitter` (
  TweetID TEXT PRIMARY KEY,
  Weekday TEXT,
  Hour INTEGER,
  Day INTEGER,
  Lang TEXT,
  IsReshare TEXT,
  Reach INTEGER,
  RetweetCount INTEGER,
  Likes INTEGER,
  Klout INTEGER,
  Sentiment REAL,
  text TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  UserID TEXT REFERENCES user(UserID)
);
Sample rows from `twitter`:
tw-682712873332805633, Thursday, 17, 31, en, FALSE, 44, 0, 0, 35, 0.0, We are hiring: Senior Software Engineer - Proto http://www.reqcloud.com/jobs/719865/?k=0LaPxXuFwczs1e32ZURJKrgCIDMQtRO7BquFSQthUKY&utm_source=twitter&utm_campaign=reqCloud_JobPost #job @awscloud #job #protocol #networking #aws #mediastreaming, 3751, tw-40932430
tw-682713045357998080, Thursday, 17, 31, en, TRUE, 1810, 5, 0, 53, 2.0, RT @CodeMineStatus: This is true Amazon Web Services https://aws.amazon.com/ #php #html #html5 #css #webdesign #seo #java #javascript htt, 3989, tw-3179389829
tw-682713219375476736, Thursday, 17, 31, en, FALSE, 282, 0, 0, 47, 0.0, Devops Engineer Aws Ansible Cassandra Mysql Ubuntu Ruby On Rails Jobs in Austin TX #Austin #TX #jobs #jobsearch https://www.jobfindly.com/devops-engineer-aws-ansible-cassandra-mysql-ubuntu-ruby-on-rails-jobs-austin-tx.html, 3741, tw-4624808414

CREATE TABLE `location` (
  LocationID INTEGER,
  Country TEXT,
  State TEXT,
  StateCode TEXT,
  City TEXT
);
Sample rows from `location`:
1, Albania, Elbasan, AL, Elbasan
2, Albania, Tirane, AL, Tirana
3, Algeria, Souk Ahras, DZ, Souk Ahras

","CREATE TABLE `location` (
  LocationID INTEGER,
  Country TEXT,
  State TEXT,
  StateCode TEXT,
  City TEXT
);
Sample rows from `location`:
1, Albania, Elbasan, AL, Elbasan
2, Albania, Tirane, AL, Tirana
3, Algeria, Souk Ahras, DZ, Souk Ahras

CREATE TABLE `user` (
  UserID TEXT PRIMARY KEY,
  Gender TEXT
);
Sample rows from `user`:
tw-1267804344, Unknown
tw-27229880, Male
tw-199664730, Male

CREATE TABLE `twitter` (
  TweetID TEXT PRIMARY KEY,
  Weekday TEXT,
  Hour INTEGER,
  Day INTEGER,
  Lang TEXT,
  IsReshare TEXT,
  Reach INTEGER,
  RetweetCount INTEGER,
  Likes INTEGER,
  Klout INTEGER,
  Sentiment REAL,
  text TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  UserID TEXT REFERENCES user(UserID)
);
Sample rows from `twitter`:
tw-682712873332805633, Thursday, 17, 31, en, FALSE, 44, 0, 0, 35, 0.0, We are hiring: Senior Software Engineer - Proto http://www.reqcloud.com/jobs/719865/?k=0LaPxXuFwczs1e32ZURJKrgCIDMQtRO7BquFSQthUKY&utm_source=twitter&utm_campaign=reqCloud_JobPost #job @awscloud #job #protocol #networking #aws #mediastreaming, 3751, tw-40932430
tw-682713045357998080, Thursday, 17, 31, en, TRUE, 1810, 5, 0, 53, 2.0, RT @CodeMineStatus: This is true Amazon Web Services https://aws.amazon.com/ #php #html #html5 #css #webdesign #seo #java #javascript htt, 3989, tw-3179389829
tw-682713219375476736, Thursday, 17, 31, en, FALSE, 282, 0, 0, 47, 0.0, Devops Engineer Aws Ansible Cassandra Mysql Ubuntu Ruby On Rails Jobs in Austin TX #Austin #TX #jobs #jobsearch https://www.jobfindly.com/devops-engineer-aws-ansible-cassandra-mysql-ubuntu-ruby-on-rails-jobs-austin-tx.html, 3741, tw-4624808414

","twitter, location","location.country, twitter.sentiment, twitter.locationid, location.locationid","location, user, twitter"
simpson_episodes,"For the episode who won the award held by Jupiter Award, describe award name, aired date and rating of that episode.","SELECT t1.award, t2.air_date, t2.rating FROM award as t1 inner JOIN episode as t2 ON t1.episode_id = t2.episode_id WHERE t1.organization = 'Jupiter award' AND t1.result = 'Winner';","CREATE TABLE `award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","award, episode","award.award, episode.air_date, episode.rating, award.episode_id, episode.episode_id, award.organization, award.result","Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
olympics,In which Olympic Games have the largest number of women participation?,SELECT t1.games_name fROM games as t1 inner JOIN games_competitor as t2 ON t1.id = t2.games_id inner JOIN person as t3 ON t2.person_id = t3.id WHERE t3.gender = 'f' GROUP BY t1.games_name ORDER BY COUNT(t2.person_id) DESC LIMIT 1,"CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

","CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `medal` (
  id INTEGER,
  medal_name TEXT
);
Sample rows from `medal`:
1, Gold
2, Silver
3, Bronze

CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `sport` (
  id INTEGER,
  sport_name TEXT
);
Sample rows from `sport`:
1, Aeronautics
2, Alpine Skiing
3, Alpinism

CREATE TABLE `event` (
  id INTEGER,
  sport_id INTEGER REFERENCES sport(id),
  event_name TEXT
);
Sample rows from `event`:
1, 9, Basketball Men's Basketball
2, 33, Judo Men's Extra-Lightweight
3, 25, Football Men's Football

CREATE TABLE `competitor_event` (
  event_id INTEGER REFERENCES event(id),
  competitor_id INTEGER REFERENCES games_competitor(id),
  medal_id INTEGER REFERENCES medal(id)
);
Sample rows from `competitor_event`:
1, 1, 4
2, 2, 4
3, 3, 4

","games, games_competitor, person","games.games_name, games.id, games_competitor.games_id, games_competitor.person_id, person.id, person.gender","city, games, games_city, medal, noc_region, person, games_competitor, person_region, sport, event, competitor_event"
world,List the languages used in the USA.,SELECT language FROM Countrylanguage WHERE countrycode = 'USA',"CREATE TABLE `Countrylanguage` (
  CountryCode TEXT PRIMARY KEY REFERENCES Country(Code),
  Language TEXT PRIMARY KEY,
  IsOfficial TEXT,
  Percentage REAL
);
Sample rows from `Countrylanguage`:
ABW, Dutch, T, 5.3
ABW, English, F, 9.5
ABW, Papiamento, F, 76.7

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
City, 4079

CREATE TABLE `City` (
  ID INTEGER,
  Name TEXT,
  CountryCode TEXT REFERENCES Country(Code),
  District TEXT,
  Population INTEGER
);
Sample rows from `City`:
1, Kabul, AFG, Kabol, 1780000
2, Qandahar, AFG, Qandahar, 237500
3, Herat, AFG, Herat, 186800

CREATE TABLE `Country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `Country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

CREATE TABLE `CountryLanguage` (
  CountryCode TEXT PRIMARY KEY REFERENCES Country(Code),
  Language TEXT PRIMARY KEY,
  IsOfficial TEXT,
  Percentage REAL
);
Sample rows from `CountryLanguage`:
ABW, Dutch, T, 5.3
ABW, English, F, 9.5
ABW, Papiamento, F, 76.7

",Countrylanguage,countrycode,"sqlite_sequence, City, Country, CountryLanguage"
music_platform_2,"What is the category and itune url of the title ""Scaling Global""?","SELECT t1.category, t2.itunes_url FROM categories as t1 inner JOIN podcasts as t2 ON t2.podcast_id = t1.podcast_id WHERE t2.title = 'Scaling Global'","CREATE TABLE `categories` (
  podcast_id TEXT PRIMARY KEY REFERENCES podcasts(None),
  category TEXT PRIMARY KEY
);
Sample rows from `categories`:
c61aa81c9b929a66f0c1db6cbe5d8548, arts
c61aa81c9b929a66f0c1db6cbe5d8548, arts-performing-arts
c61aa81c9b929a66f0c1db6cbe5d8548, music

CREATE TABLE `podcasts` (
  podcast_id TEXT PRIMARY KEY,
  itunes_id INTEGER,
  slug TEXT,
  itunes_url TEXT,
  title TEXT
);
Sample rows from `podcasts`:
a00018b54eb342567c94dacfb2a3e504, 1313466221, scaling-global, https://podcasts.apple.com/us/podcast/scaling-global/id1313466221, Scaling Global
a00043d34e734b09246d17dc5d56f63c, 158973461, cornerstone-baptist-church-of-orlando, https://podcasts.apple.com/us/podcast/cornerstone-baptist-church-of-orlando/id158973461, Cornerstone Baptist Church of Orlando
a0004b1ef445af9dc84dad1e7821b1e3, 139076942, mystery-dancing-in-the-dark, https://podcasts.apple.com/us/podcast/mystery-dancing-in-the-dark/id139076942, Mystery: Dancing in the Dark

","CREATE TABLE `runs` (
  run_at TEXT,
  max_rowid INTEGER,
  reviews_added INTEGER
);
Sample rows from `runs`:
2021-05-10 02:53:00, 3266481, 1215223
2021-06-06 21:34:36, 3300773, 13139
2021-07-02 18:04:55, 3329699, 11561

CREATE TABLE `podcasts` (
  podcast_id TEXT PRIMARY KEY,
  itunes_id INTEGER,
  slug TEXT,
  itunes_url TEXT,
  title TEXT
);
Sample rows from `podcasts`:
a00018b54eb342567c94dacfb2a3e504, 1313466221, scaling-global, https://podcasts.apple.com/us/podcast/scaling-global/id1313466221, Scaling Global
a00043d34e734b09246d17dc5d56f63c, 158973461, cornerstone-baptist-church-of-orlando, https://podcasts.apple.com/us/podcast/cornerstone-baptist-church-of-orlando/id158973461, Cornerstone Baptist Church of Orlando
a0004b1ef445af9dc84dad1e7821b1e3, 139076942, mystery-dancing-in-the-dark, https://podcasts.apple.com/us/podcast/mystery-dancing-in-the-dark/id139076942, Mystery: Dancing in the Dark

CREATE TABLE `reviews` (
  podcast_id TEXT REFERENCES podcasts(None),
  title TEXT,
  content TEXT,
  rating INTEGER,
  author_id TEXT,
  created_at TEXT
);
Sample rows from `reviews`:
c61aa81c9b929a66f0c1db6cbe5d8548, really interesting!, Thanks for providing these insights.  Really enjoy the variety and depth -- please keep them coming!, 5, F7E5A318989779D, 2018-04-24T12:05:16-07:00
c61aa81c9b929a66f0c1db6cbe5d8548, Must listen for anyone interested in the arts!!!, Super excited to see this podcast grow. So many fun topics to talk about...Shari is really engaging. Definitely subscribing and would recommend to anyone interested in the arts!!, 5, F6BF5472689BD12, 2018-05-09T18:14:32-07:00
ad4f2bf69c72b8db75978423c25f379e, nauseatingly left, I'm a liberal myself, but its pretty obvious and annoying that they're trying to push their beliefs on the listeners. Get a more politically diverse production staff, we like to see issues from multiple point of views not just yours., 1, 1AB95B8E6E1309E, 2019-06-11T14:53:39-07:00

CREATE TABLE `categories` (
  podcast_id TEXT PRIMARY KEY REFERENCES podcasts(None),
  category TEXT PRIMARY KEY
);
Sample rows from `categories`:
c61aa81c9b929a66f0c1db6cbe5d8548, arts
c61aa81c9b929a66f0c1db6cbe5d8548, arts-performing-arts
c61aa81c9b929a66f0c1db6cbe5d8548, music

","categories, podcasts","categories.category, podcasts.itunes_url, podcasts.podcast_id, categories.podcast_id, podcasts.title","runs, podcasts, reviews, categories"
sales_in_weather,"In March 2014, which weather stations recorded the highest number of days whose temperature is below the 30-year normal?","SELECT station_nbr FROM weather WHERE substr(`date`, 1, 4) = '2014' AND substr(`date`, 6, 2) = '03' AND depart < 0 GROUP BY station_nbr HAVING COUNT(DISTINCT `date`) = ( SELECT COUNT(DISTINCT `date`) FROM weather WHERE substr(`date`, 1, 4) = '2014' AND substr(`date`, 6, 2) = '03' AND depart < 0 GROUP BY station_nbr ORDER BY COUNT(`date`) DESC LIMIT 1 )","CREATE TABLE `weather` (
  station_nbr INTEGER PRIMARY KEY,
  date DATE PRIMARY KEY,
  tmax INTEGER,
  tmin INTEGER,
  tavg INTEGER,
  depart INTEGER,
  dewpoint INTEGER,
  wetbulb INTEGER,
  heat INTEGER,
  cool INTEGER,
  sunrise TEXT,
  sunset TEXT,
  codesum TEXT,
  snowfall REAL,
  preciptotal REAL,
  stnpressure REAL,
  sealevel REAL,
  resultspeed REAL,
  resultdir INTEGER,
  avgspeed REAL
);
Sample rows from `weather`:
1, 2012-01-01, 52, 31, 42, None, 36, 40, 23, 0, None, None, RA FZFG BR, None, 0.05, 29.78, 29.92, 3.6, 20, 4.6
1, 2012-01-02, 50, 31, 41, None, 26, 35, 24, 0, None, None,  , None, 0.01, 29.44, 29.62, 9.8, 24, 10.3
1, 2012-01-03, 32, 11, 22, None, 4, 18, 43, 0, None, None,  , None, 0.0, 29.67, 29.87, 10.8, 31, 11.6

","CREATE TABLE `sales_in_weather` (
  date DATE PRIMARY KEY,
  store_nbr INTEGER PRIMARY KEY,
  item_nbr INTEGER PRIMARY KEY,
  units INTEGER
);
Sample rows from `sales_in_weather`:
2012-01-01, 1, 1, 0
2012-01-01, 1, 2, 0
2012-01-01, 1, 3, 0

CREATE TABLE `weather` (
  station_nbr INTEGER PRIMARY KEY,
  date DATE PRIMARY KEY,
  tmax INTEGER,
  tmin INTEGER,
  tavg INTEGER,
  depart INTEGER,
  dewpoint INTEGER,
  wetbulb INTEGER,
  heat INTEGER,
  cool INTEGER,
  sunrise TEXT,
  sunset TEXT,
  codesum TEXT,
  snowfall REAL,
  preciptotal REAL,
  stnpressure REAL,
  sealevel REAL,
  resultspeed REAL,
  resultdir INTEGER,
  avgspeed REAL
);
Sample rows from `weather`:
1, 2012-01-01, 52, 31, 42, None, 36, 40, 23, 0, None, None, RA FZFG BR, None, 0.05, 29.78, 29.92, 3.6, 20, 4.6
1, 2012-01-02, 50, 31, 41, None, 26, 35, 24, 0, None, None,  , None, 0.01, 29.44, 29.62, 9.8, 24, 10.3
1, 2012-01-03, 32, 11, 22, None, 4, 18, 43, 0, None, None,  , None, 0.0, 29.67, 29.87, 10.8, 31, 11.6

CREATE TABLE `relation` (
  store_nbr INTEGER REFERENCES sales_in_weather(store_nbr),
  station_nbr INTEGER REFERENCES weather(station_nbr)
);
Sample rows from `relation`:
1, 1
2, 14
3, 7

",weather,"station_nbr, date, depart","sales_in_weather, weather, relation"
public_review_platform,"What is the attribute value of an active business with a high review count and 3 stars which is located at Mesa, AZ?",SELECT t2.attribute_value FROM business as t1 inner JOIN business_attributes as t2 ON t1.business_id = t2.business_id inner JOIN attributes as t3 ON t2.attribute_id = t3.attribute_id WHERE t1.state LIKE 'AZ' AND t1.review_count LIKE 'High' AND t1.active LIKE 'TRUE' AND t1.city LIKE 'Mesa' AND t1.stars = 3,"CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `business_attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `business_attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","business, business_attributes, attributes","business_attributes.attribute_value, business.business_id, business_attributes.business_id, business_attributes.attribute_id, attributes.attribute_id, business.state, business.review_count, business.active, business.city, business.stars","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
public_review_platform,Please list all the categories of the Yelp_Business in Arizona.,SELECT t1.category_name FROM categories as t1 inner JOIN business_categories as t2 ON t1.category_id = t2.category_id inner JOIN business as t3 ON t2.business_id = t3.business_id WHERE t3.state LIKE 'AZ' GROUP BY t1.category_name,"CREATE TABLE `categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `business_categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `business_categories`:
1, 8
1, 143
2, 18

CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","categories, business_categories, business","categories.category_name, categories.category_id, business_categories.category_id, business_categories.business_id, business.business_id, business.state","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
olympics,"Among the Olympic games held in Los Angeles, what is the name of the Olympic game that has the most number of competitors?",SELECT t1.games_name FROM games as t1 inner JOIN games_competitor as t2 ON t1.id = t2.games_id inner JOIN games_city as t3 ON t2.games_id = t3.games_id inner JOIN city as t4 ON t3.city_id = t4.id WHERE t4.city_name = 'Los Angeles' GROUP BY t1.id ORDER BY COUNT(t2.person_id) DESC LIMIT 1,"CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

","CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `medal` (
  id INTEGER,
  medal_name TEXT
);
Sample rows from `medal`:
1, Gold
2, Silver
3, Bronze

CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `sport` (
  id INTEGER,
  sport_name TEXT
);
Sample rows from `sport`:
1, Aeronautics
2, Alpine Skiing
3, Alpinism

CREATE TABLE `event` (
  id INTEGER,
  sport_id INTEGER REFERENCES sport(id),
  event_name TEXT
);
Sample rows from `event`:
1, 9, Basketball Men's Basketball
2, 33, Judo Men's Extra-Lightweight
3, 25, Football Men's Football

CREATE TABLE `competitor_event` (
  event_id INTEGER REFERENCES event(id),
  competitor_id INTEGER REFERENCES games_competitor(id),
  medal_id INTEGER REFERENCES medal(id)
);
Sample rows from `competitor_event`:
1, 1, 4
2, 2, 4
3, 3, 4

","games, games_competitor, games_city, city","games.games_name, games.id, games_competitor.games_id, games_city.games_id, games_city.city_id, city.id, city.city_name, games_competitor.person_id","city, games, games_city, medal, noc_region, person, games_competitor, person_region, sport, event, competitor_event"
movielens,How many of the users who rate the movie with the id '2462959' are female?,SELECT COUNT(t1.userid) fROM users as t1 inner JOIN u2base as t2 ON t1.userid = t2.userid WHERE t2.userid = 2462959 AND t1.u_gender = 'f',"CREATE TABLE `users` (
  userid INTEGER,
  age TEXT,
  u_gender TEXT,
  occupation TEXT
);
Sample rows from `users`:
1, 1, F, 2
2, 56, M, 3
3, 25, M, 2

CREATE TABLE `u2base` (
  userid INTEGER PRIMARY KEY REFERENCES users(None),
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  rating TEXT
);
Sample rows from `u2base`:
2, 1964242, 1
2, 2219779, 1
3, 1856939, 1

","CREATE TABLE `users` (
  userid INTEGER,
  age TEXT,
  u_gender TEXT,
  occupation TEXT
);
Sample rows from `users`:
1, 1, F, 2
2, 56, M, 3
3, 25, M, 2

CREATE TABLE `directors` (
  directorid INTEGER,
  d_quality INTEGER PRIMARY KEY,
  avg_revenue INTEGER PRIMARY KEY
);
Sample rows from `directors`:
67, 4, 1
92, 2, 3
284, 4, 0

CREATE TABLE `actors` (
  actorid INTEGER,
  a_gender TEXT,
  a_quality INTEGER
);
Sample rows from `actors`:
4, M, 4
16, M, 0
28, M, 4

CREATE TABLE `movies` (
  movieid INTEGER,
  year INTEGER,
  isEnglish TEXT,
  country TEXT,
  runningtime INTEGER
);
Sample rows from `movies`:
1672052, 3, T, other, 2
1672111, 4, T, other, 2
1672580, 4, T, USA, 3

CREATE TABLE `movies2actors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  actorid INTEGER PRIMARY KEY REFERENCES actors(None),
  cast_num INTEGER
);
Sample rows from `movies2actors`:
1672580, 981535, 0
1672946, 1094968, 0
1673647, 149985, 0

CREATE TABLE `movies2directors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  directorid INTEGER PRIMARY KEY REFERENCES directors(None),
  genre TEXT
);
Sample rows from `movies2directors`:
1672111, 54934, Action
1672946, 188940, Action
1679461, 179783, Action

CREATE TABLE `u2base` (
  userid INTEGER PRIMARY KEY REFERENCES users(None),
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  rating TEXT
);
Sample rows from `u2base`:
2, 1964242, 1
2, 2219779, 1
3, 1856939, 1

","users, u2base","users.userid, u2base.userid, users.u_gender","users, directors, actors, movies, movies2actors, movies2directors, u2base"
video_games,Please list the names of all the games published by 10TACLE Studios.,SELECT t1.game_name FROM game as t1 inner JOIN game_publisher as t2 ON t1.id = t2.game_id inner JOIN publisher as t3 ON t2.publisher_id = t3.id WHERE t3.publisher_name = '10TACLE Studios',"CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

","CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

","game, game_publisher, publisher","game.game_name, game.id, game_publisher.game_id, game_publisher.publisher_id, publisher.id, publisher.publisher_name","genre, game, platform, publisher, game_publisher, game_platform, region, region_sales"
public_review_platform,Count the active businesses that has an attribute of caters with low review count.,SELECT COUNT(t1.business_id) FROM business as t1 inner JOIN business_attributes as t2 ON t1.business_id = t2.business_id inner JOIN attributes as t3 ON t2.attribute_id = t3.attribute_id WHERE t3.attribute_name LIKE 'Caters' AND t1.review_count LIKE 'Low' AND t1.active LIKE 'TRUE',"CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `business_attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `business_attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","business, business_attributes, attributes","business.business_id, business_attributes.business_id, business_attributes.attribute_id, attributes.attribute_id, attributes.attribute_name, business.review_count, business.active","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
public_review_platform,"Among the businesses with a category of Local Services, what is the percentage of the business with less than 3 stars?","SELECT cast(SUM(case when t1.stars < 3 then 1 else 0 end) as real) * 100 / COUNT(t1.stars) as ""percentage"" FROM business as t1 inner JOIN business_categories ON t1.business_id = business_categories.business_id inner JOIN categories as t3 ON business_categories.category_id = t3.category_id WHERE t3.category_name LIKE 'Local Services'","CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `business_categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `business_categories`:
1, 8
1, 143
2, 18

CREATE TABLE `categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","business, business_categories, categories","business.stars, business.business_id, business_categories.business_id, business_categories.category_id, categories.category_id, categories.category_name","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
trains,How many short cars are in the shape of hexagon?,SELECT COUNT(id) FROM cars WHERE shape = 'hexagon' AND len = 'short',"CREATE TABLE `cars` (
  id INTEGER,
  train_id INTEGER REFERENCES trains(id),
  position INTEGER,
  shape TEXT,
  len TEXT,
  sides TEXT,
  roof TEXT,
  wheels INTEGER,
  load_shape TEXT,
  load_num INTEGER
);
Sample rows from `cars`:
1, 1, 1, rectangle, short, not_double, none, 2, circle, 1
2, 1, 2, rectangle, long, not_double, none, 3, hexagon, 1
3, 1, 3, rectangle, short, not_double, peaked, 2, triangle, 1

","CREATE TABLE `cars` (
  id INTEGER,
  train_id INTEGER REFERENCES trains(id),
  position INTEGER,
  shape TEXT,
  len TEXT,
  sides TEXT,
  roof TEXT,
  wheels INTEGER,
  load_shape TEXT,
  load_num INTEGER
);
Sample rows from `cars`:
1, 1, 1, rectangle, short, not_double, none, 2, circle, 1
2, 1, 2, rectangle, long, not_double, none, 3, hexagon, 1
3, 1, 3, rectangle, short, not_double, peaked, 2, triangle, 1

CREATE TABLE `trains` (
  id INTEGER,
  direction TEXT
);
Sample rows from `trains`:
1, east
2, east
3, east

",cars,"id, shape","cars, trains"
ice_hockey_draft,What is the height of David Bornhammar in inches?,SELECT t2.height_in_inch FROM playerinfo as t1 inner JOIN height_info as t2 ON t1.height = t2.height_id WHERE t1.playername = 'David Bornhammar',"CREATE TABLE `playerinfo` (
  ELITEID INTEGER,
  PlayerName TEXT,
  birthdate TEXT,
  birthyear DATE,
  birthmonth INTEGER,
  birthday INTEGER,
  birthplace TEXT,
  nation TEXT,
  height INTEGER REFERENCES height_info(height_id),
  weight INTEGER REFERENCES weight_info(weight_id),
  position_info TEXT,
  shoots TEXT,
  draftyear INTEGER,
  draftround INTEGER,
  overall INTEGER,
  overallby TEXT,
  CSS_rank INTEGER,
  sum_7yr_GP INTEGER,
  sum_7yr_TOI INTEGER,
  GP_greater_than_0 TEXT
);
Sample rows from `playerinfo`:
9, David Bornhammar, 1981-06-15, 1981, 6, 15, Lidingo, SWE, Sweden, 73, 198, D, L, 1999, 7, 192, Washington Capitals, 192, 0, 0, no
18, David Printz, 1980-07-24, 1980, 7, 24, Stockholm, SWE, Sweden, 76, 220, D, L, 2001, 7, 225, Philadelphia Flyers, 176, 13, 84, yes
27, Yared Hagos, 1983-03-27, 1983, 3, 27, Stockholm, SWE, Sweden, 73, 218, C, L, 2001, 3, 70, Dallas Stars, 24, 0, 0, no

CREATE TABLE `height_info` (
  height_id INTEGER,
  height_in_cm INTEGER,
  height_in_inch TEXT
);
Sample rows from `height_info`:
65, 165, 5'5""
67, 170, 5'7""
68, 172, 5'8""

","CREATE TABLE `height_info` (
  height_id INTEGER,
  height_in_cm INTEGER,
  height_in_inch TEXT
);
Sample rows from `height_info`:
65, 165, 5'5""
67, 170, 5'7""
68, 172, 5'8""

CREATE TABLE `weight_info` (
  weight_id INTEGER,
  weight_in_kg INTEGER,
  weight_in_lbs INTEGER
);
Sample rows from `weight_info`:
154, 70, 154
159, 72, 159
161, 73, 161

CREATE TABLE `PlayerInfo` (
  ELITEID INTEGER,
  PlayerName TEXT,
  birthdate TEXT,
  birthyear DATE,
  birthmonth INTEGER,
  birthday INTEGER,
  birthplace TEXT,
  nation TEXT,
  height INTEGER REFERENCES height_info(height_id),
  weight INTEGER REFERENCES weight_info(weight_id),
  position_info TEXT,
  shoots TEXT,
  draftyear INTEGER,
  draftround INTEGER,
  overall INTEGER,
  overallby TEXT,
  CSS_rank INTEGER,
  sum_7yr_GP INTEGER,
  sum_7yr_TOI INTEGER,
  GP_greater_than_0 TEXT
);
Sample rows from `PlayerInfo`:
9, David Bornhammar, 1981-06-15, 1981, 6, 15, Lidingo, SWE, Sweden, 73, 198, D, L, 1999, 7, 192, Washington Capitals, 192, 0, 0, no
18, David Printz, 1980-07-24, 1980, 7, 24, Stockholm, SWE, Sweden, 76, 220, D, L, 2001, 7, 225, Philadelphia Flyers, 176, 13, 84, yes
27, Yared Hagos, 1983-03-27, 1983, 3, 27, Stockholm, SWE, Sweden, 73, 218, C, L, 2001, 3, 70, Dallas Stars, 24, 0, 0, no

CREATE TABLE `SeasonStatus` (
  ELITEID INTEGER REFERENCES PlayerInfo(ELITEID),
  SEASON TEXT,
  TEAM TEXT,
  LEAGUE TEXT,
  GAMETYPE TEXT,
  GP INTEGER,
  G INTEGER,
  A INTEGER,
  P INTEGER,
  PIM INTEGER,
  PLUSMINUS INTEGER
);
Sample rows from `SeasonStatus`:
3667, 1997-1998, Rimouski Oceanic, QMJHL, Regular Season, 58, 44, 71, 115, 117, 27
3667, 1997-1998, Rimouski Oceanic, QMJHL, Playoffs, 18, 15, 26, 41, 46, 4
3667, 1997-1998, Canada U20, WJC-20, Regular Season, 7, 1, 1, 2, 4, 0

","playerinfo, height_info","height_info.height_in_inch, playerinfo.height, height_info.height_id, playerinfo.playername","height_info, weight_info, PlayerInfo, SeasonStatus"
cars,How many models of Ford Maverick were produced?,SELECT COUNT(DISTINCT t2.model_year) FROM data as t1 inner JOIN production as t2 ON t1.id = t2.id WHERE t1.car_name = 'ford maverick',"CREATE TABLE `data` (
  ID INTEGER REFERENCES price(ID),
  mpg REAL,
  cylinders INTEGER,
  displacement REAL,
  horsepower INTEGER,
  weight INTEGER,
  acceleration REAL,
  model INTEGER,
  car_name TEXT
);
Sample rows from `data`:
1, 18.0, 8, 307.0, 130, 3504, 12.0, 70, chevrolet chevelle malibu
2, 15.0, 8, 350.0, 165, 3693, 11.5, 70, buick skylark 320
3, 18.0, 8, 318.0, 150, 3436, 11.0, 70, plymouth satellite

CREATE TABLE `production` (
  ID INTEGER PRIMARY KEY REFERENCES price(ID) REFERENCES data(ID),
  model_year INTEGER PRIMARY KEY,
  country INTEGER REFERENCES country(origin)
);
Sample rows from `production`:
1, 1970, 1
1, 1971, 1
2, 1970, 1

","CREATE TABLE `country` (
  origin INTEGER,
  country TEXT
);
Sample rows from `country`:
1, USA
2, Europe
3, Japan

CREATE TABLE `price` (
  ID INTEGER,
  price REAL
);
Sample rows from `price`:
1, 25561.59078
2, 24221.42273
3, 27240.84373

CREATE TABLE `data` (
  ID INTEGER REFERENCES price(ID),
  mpg REAL,
  cylinders INTEGER,
  displacement REAL,
  horsepower INTEGER,
  weight INTEGER,
  acceleration REAL,
  model INTEGER,
  car_name TEXT
);
Sample rows from `data`:
1, 18.0, 8, 307.0, 130, 3504, 12.0, 70, chevrolet chevelle malibu
2, 15.0, 8, 350.0, 165, 3693, 11.5, 70, buick skylark 320
3, 18.0, 8, 318.0, 150, 3436, 11.0, 70, plymouth satellite

CREATE TABLE `production` (
  ID INTEGER PRIMARY KEY REFERENCES price(ID) REFERENCES data(ID),
  model_year INTEGER PRIMARY KEY,
  country INTEGER REFERENCES country(origin)
);
Sample rows from `production`:
1, 1970, 1
1, 1971, 1
2, 1970, 1

","data, production","production.model_year, data.id, production.id, data.car_name","country, price, data, production"
books,Identify the publisher of the book Girls' Night In.,SELECT t2.publisher_name FROM book as t1 inner JOIN publisher as t2 ON t1.publisher_id = t2.publisher_id WHERE t1.title = 'Girls'' Night In',"CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","book, publisher","publisher.publisher_name, book.publisher_id, publisher.publisher_id, book.title","address_status, author, book_language, country, address, customer, customer_address, order_status, publisher, book, book_author, shipping_method, cust_order, sqlite_sequence, order_history, order_line"
authors,Please list the titles of the paper whose authors include Klaus Zimmermann.,SELECT t2.title FROM paperauthor as t1 inner JOIN paper as t2 ON t1.paperid = t2.id WHERE t1.name = 'Klaus Zimmermann',"CREATE TABLE `paperauthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `paperauthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

CREATE TABLE `paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

","CREATE TABLE `Author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `Author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

CREATE TABLE `Conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

CREATE TABLE `Journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `Paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `Paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `PaperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `PaperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

","paperauthor, paper","paper.title, paperauthor.paperid, paper.id, paperauthor.name","Author, Conference, Journal, Paper, PaperAuthor"
simpson_episodes,What are the episodes that have the average rating with more than 20 of 2-star votes?,SELECT DISTINCT t1.episode_id FROM episode as t1 inner JOIN vote as t2 ON t2.episode_id = t1.episode_id WHERE t2.stars = 2 AND t2.votes > 20 AND t1.rating > 5.0 AND t1.rating <= 7.0;,"CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","episode, vote","episode.episode_id, vote.episode_id, vote.stars, vote.votes, episode.rating","Episode, Person, Award, Character_Award, Credit, Keyword, Vote"
retail_world,Provide the list of product IDs and names under the meat/poultry category.,"SELECT t2.productname, t1.categoryname FROM categories as t1 inner JOIN products as t2 ON t1.categoryid = t2.categoryid WHERE t2.reorderlevel = ( SELECT MAX(reorderlevel) FROM products )","CREATE TABLE `categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

","categories, products","products.productname, categories.categoryname, categories.categoryid, products.categoryid, products.reorderlevel, reorderlevel","sqlite_sequence, Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails"
shipping,Give the full name of driver who transported the items on 3/2/2016.,"SELECT t2.first_name, t2.last_name FROM shipment as t1 inner JOIN driver as t2 ON t1.driver_id = t2.driver_id WHERE t1.ship_date = '2016-03-02'","CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

CREATE TABLE `driver` (
  driver_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip_code INTEGER,
  phone TEXT
);
Sample rows from `driver`:
20, Sue, Newell, 268 Richmond Ave, Memphis, TN, 38106, (901) 774-6569
21, Andrea, Simons, 3574 Oak Limb Cv, Memphis, TN, 38135, (901) 384-0984
22, Roger, McHaney, 1839 S Orleans St, Memphis, TN, 38106, (901) 948-1043

","CREATE TABLE `city` (
  city_id INTEGER,
  city_name TEXT,
  state TEXT,
  population INTEGER,
  area REAL
);
Sample rows from `city`:
100, Union City, New Jersey, 67088, 1.3
101, Huntington Park, California, 61348, 3.0
102, Passaic, New Jersey, 67861, 3.1

CREATE TABLE `customer` (
  cust_id INTEGER,
  cust_name TEXT,
  annual_revenue INTEGER,
  cust_type TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip REAL,
  phone TEXT
);
Sample rows from `customer`:
193, Advanced Fabricators, 39588651, manufacturer, 5141 Summit Boulevard, West Palm Beach, FL, 33415.0, (561) 683-3535
304, Pard's Trailer Sales, 17158109, wholesaler, 5910 South 300 West, Salt Lake City, UT, 84107.0, (801) 262-4864
314, Saar Enterprises, Inc., 47403613, retailer, 11687 192nd Street, Council Bluffs, IA, 51503.0, (712) 366-4929

CREATE TABLE `driver` (
  driver_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip_code INTEGER,
  phone TEXT
);
Sample rows from `driver`:
20, Sue, Newell, 268 Richmond Ave, Memphis, TN, 38106, (901) 774-6569
21, Andrea, Simons, 3574 Oak Limb Cv, Memphis, TN, 38135, (901) 384-0984
22, Roger, McHaney, 1839 S Orleans St, Memphis, TN, 38106, (901) 948-1043

CREATE TABLE `truck` (
  truck_id INTEGER,
  make TEXT,
  model_year INTEGER
);
Sample rows from `truck`:
1, Peterbilt, 2005
2, Mack, 2006
3, Peterbilt, 2007

CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

","shipment, driver","driver.first_name, driver.last_name, shipment.driver_id, driver.driver_id, shipment.ship_date","city, customer, driver, truck, shipment"
public_review_platform,How many of the businesses are in Surprise?,SELECT COUNT(business_id) FROM business WHERE city = 'Surprise',"CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

",business,"business_id, city","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
cookbook,"At least how many cups of graham cracker crumbs does the recipe ""Raspberry Chiffon Pie"" need?",SELECT t2.min_qty FROM recipe as t1 inner JOIN quantity as t2 ON t1.recipe_id = t2.recipe_id inner JOIN ingredient as t3 ON t3.ingredient_id = t2.ingredient_id WHERE t1.title = 'Raspberry Chiffon Pie' AND t3.name = 'graham cracker crumbs',"CREATE TABLE `recipe` (
  recipe_id INTEGER,
  title TEXT,
  subtitle TEXT,
  servings INTEGER,
  yield_unit TEXT,
  prep_min INTEGER,
  cook_min INTEGER,
  stnd_min INTEGER,
  source TEXT,
  intro TEXT,
  directions TEXT
);
Sample rows from `recipe`:
214, Raspberry Chiffon Pie, None, 10, 1 pie, 20, 8, 305, The California Tree Fruit Agreement, None, For crust, preheat oven to 375 degrees F.
In lightly greased 10-inch pie plate, combine graham cracker crumbs, melted butter and 1/4 cup sugar. Press evenly on bottom and up side of plate. Bake 5 minutes; cool.

For filling, in medium saucepan, combine juice or water and gelatin; let stand 5 minutes. Add 1/3 cup sugar and heat over medium heat, stirring to dissolve gelatin. In blender or food processor, puree 6 plums. Add puree and raspberries to gelatin mixture. Refrigerate until mixture begins to set about 1 hour. Stir yogurt into fruit mixture. In large bowl, beat egg whites until frothy. Gradually add cream of tartar and remaining 1/3 cup sugar and beat until stiff peaks form. Gently fold egg whites into fruit mixture so as not to reduce volume. Spoon into crust. Refrigerate 4 hours or overnight. Thinly slice remaining 2 plums and garnish top of pie.
215, Apricot Yogurt Parfaits, None, 4, None, 5, 2, 65, Produce for Better Health Foundation and 5 a Day, None, Drain canned apricots, pour 1/4 cup of the juice into saucepan or microwave-safe dish. Sprinkle gelatin over juice and let stand for 5 minutes to soften. Warm over low heat or microwave at medium (50% power) for 30 seconds or until gelatin has dissolved.
 
In food processor or blender, puree canned apricots; add lemon juice brandy, yogurt and gelatin mixture and process for 30 seconds or until combined.
 
Pour into parfait or stemmed glasses or champagne flutes. Cover and refrigerate until set, at least 1 hour or overnight.
 
Just before serving arrange fresh apricots on top. (If apricots are not available substitute kiwi slices or berries). Garnish each with a small spoonful of yogurt and sprinkling of brown sugar or mint.
216, Fresh Apricot Bavarian, None, 8, None, 5, 13, 0, The California Apricot Advisory Board, Serve in stemmed glasses and top with sliced apricots for elegant endings., Drop apricots into boiling water to cover. Return to boil and simmer for 5 minutes or until skins begin to split. Drain and rinse under cold water. Halve fruit and discard skins and pits. Puree apricots in electric blender. Combine water and gelatin in small saucepan; stir over low heat until dissolved. Mix sugar, apricot puree and yogurt with a wire whip until smooth; mix in dissolved gelatin. Sweeten to taste if desired. Chill mixture until thick. Spoon into stemmed glasses.

Note: One pound fresh apricots is 15 to 20. One and a half envelopes gelatin is 4 teaspoons.

CREATE TABLE `quantity` (
  quantity_id INTEGER,
  recipe_id INTEGER REFERENCES Nutrition(recipe_id) REFERENCES Recipe(recipe_id),
  ingredient_id INTEGER REFERENCES Ingredient(ingredient_id),
  max_qty REAL,
  min_qty REAL,
  unit TEXT,
  preparation TEXT,
  optional TEXT
);
Sample rows from `quantity`:
1, 214, 1613, 2.0, 2.0, cup(s), None, FALSE
2, 214, 3334, 0.25, 0.25, cup(s), None, FALSE
3, 214, 2222, 0.5, 0.5, cup(s), melted, FALSE

CREATE TABLE `ingredient` (
  ingredient_id INTEGER,
  category TEXT,
  name TEXT,
  plural TEXT
);
Sample rows from `ingredient`:
1, dairy, 1% lowfat cottage cheese, None
6, dairy, 1% lowfat milk, None
10, Mexican products, 10-inch flour tortilla, s

","CREATE TABLE `Ingredient` (
  ingredient_id INTEGER,
  category TEXT,
  name TEXT,
  plural TEXT
);
Sample rows from `Ingredient`:
1, dairy, 1% lowfat cottage cheese, None
6, dairy, 1% lowfat milk, None
10, Mexican products, 10-inch flour tortilla, s

CREATE TABLE `Recipe` (
  recipe_id INTEGER,
  title TEXT,
  subtitle TEXT,
  servings INTEGER,
  yield_unit TEXT,
  prep_min INTEGER,
  cook_min INTEGER,
  stnd_min INTEGER,
  source TEXT,
  intro TEXT,
  directions TEXT
);
Sample rows from `Recipe`:
214, Raspberry Chiffon Pie, None, 10, 1 pie, 20, 8, 305, The California Tree Fruit Agreement, None, For crust, preheat oven to 375 degrees F.
In lightly greased 10-inch pie plate, combine graham cracker crumbs, melted butter and 1/4 cup sugar. Press evenly on bottom and up side of plate. Bake 5 minutes; cool.

For filling, in medium saucepan, combine juice or water and gelatin; let stand 5 minutes. Add 1/3 cup sugar and heat over medium heat, stirring to dissolve gelatin. In blender or food processor, puree 6 plums. Add puree and raspberries to gelatin mixture. Refrigerate until mixture begins to set about 1 hour. Stir yogurt into fruit mixture. In large bowl, beat egg whites until frothy. Gradually add cream of tartar and remaining 1/3 cup sugar and beat until stiff peaks form. Gently fold egg whites into fruit mixture so as not to reduce volume. Spoon into crust. Refrigerate 4 hours or overnight. Thinly slice remaining 2 plums and garnish top of pie.
215, Apricot Yogurt Parfaits, None, 4, None, 5, 2, 65, Produce for Better Health Foundation and 5 a Day, None, Drain canned apricots, pour 1/4 cup of the juice into saucepan or microwave-safe dish. Sprinkle gelatin over juice and let stand for 5 minutes to soften. Warm over low heat or microwave at medium (50% power) for 30 seconds or until gelatin has dissolved.
 
In food processor or blender, puree canned apricots; add lemon juice brandy, yogurt and gelatin mixture and process for 30 seconds or until combined.
 
Pour into parfait or stemmed glasses or champagne flutes. Cover and refrigerate until set, at least 1 hour or overnight.
 
Just before serving arrange fresh apricots on top. (If apricots are not available substitute kiwi slices or berries). Garnish each with a small spoonful of yogurt and sprinkling of brown sugar or mint.
216, Fresh Apricot Bavarian, None, 8, None, 5, 13, 0, The California Apricot Advisory Board, Serve in stemmed glasses and top with sliced apricots for elegant endings., Drop apricots into boiling water to cover. Return to boil and simmer for 5 minutes or until skins begin to split. Drain and rinse under cold water. Halve fruit and discard skins and pits. Puree apricots in electric blender. Combine water and gelatin in small saucepan; stir over low heat until dissolved. Mix sugar, apricot puree and yogurt with a wire whip until smooth; mix in dissolved gelatin. Sweeten to taste if desired. Chill mixture until thick. Spoon into stemmed glasses.

Note: One pound fresh apricots is 15 to 20. One and a half envelopes gelatin is 4 teaspoons.

CREATE TABLE `Nutrition` (
  recipe_id INTEGER REFERENCES Recipe(recipe_id),
  protein REAL,
  carbo REAL,
  alcohol REAL,
  total_fat REAL,
  sat_fat REAL,
  cholestrl REAL,
  sodium REAL,
  iron REAL,
  vitamin_c REAL,
  vitamin_a REAL,
  fiber REAL,
  pcnt_cal_carb REAL,
  pcnt_cal_fat REAL,
  pcnt_cal_prot REAL,
  calories REAL
);
Sample rows from `Nutrition`:
214, 5.47, 41.29, 0.0, 11.53, 2.21, 1.39, 260.78, 0.81, 8.89, 586.2, 0.87, 56.8, 35.68, 7.53, 290.79
215, 5.7, 23.75, 1.93, 1.08, 0.58, 3.48, 46.17, 0.57, 13.02, 2738.24, 0.62, 67.38, 6.89, 16.17, 141.01
216, 4.9, 26.88, 0.0, 1.1, 0.58, 3.46, 41.79, 0.37, 6.13, 1521.1, 0.34, 78.45, 7.24, 14.3, 137.06

CREATE TABLE `Quantity` (
  quantity_id INTEGER,
  recipe_id INTEGER REFERENCES Nutrition(recipe_id) REFERENCES Recipe(recipe_id),
  ingredient_id INTEGER REFERENCES Ingredient(ingredient_id),
  max_qty REAL,
  min_qty REAL,
  unit TEXT,
  preparation TEXT,
  optional TEXT
);
Sample rows from `Quantity`:
1, 214, 1613, 2.0, 2.0, cup(s), None, FALSE
2, 214, 3334, 0.25, 0.25, cup(s), None, FALSE
3, 214, 2222, 0.5, 0.5, cup(s), melted, FALSE

","recipe, quantity, ingredient","quantity.min_qty, recipe.recipe_id, quantity.recipe_id, ingredient.ingredient_id, quantity.ingredient_id, recipe.title, ingredient.name","Ingredient, Recipe, Nutrition, Quantity"
food_inspection_2,What is the risk level of the establishment that Bob Benson inspected?,SELECT DISTINCT t3.risk_level FROM employee as t1 inner JOIN inspection as t2 ON t1.employee_id = t2.employee_id inner JOIN establishment as t3 ON t2.license_no = t3.license_no WHERE t1.first_name = 'Bob' AND t1.last_name = 'Benson',"CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

","employee, inspection, establishment","establishment.risk_level, employee.employee_id, inspection.employee_id, inspection.license_no, establishment.license_no, employee.first_name, employee.last_name","employee, establishment, inspection, inspection_point, violation"
cookbook,"How many calories on average does a recipe that comes from ""Produce for Better Health Foundation and 5 a Day"" contain?",SELECT AVG(t2.calories) FROM recipe as t1 inner JOIN nutrition as t2 ON t1.recipe_id = t2.recipe_id WHERE t1.source = 'Produce for Better Health Foundation and 5 a Day',"CREATE TABLE `recipe` (
  recipe_id INTEGER,
  title TEXT,
  subtitle TEXT,
  servings INTEGER,
  yield_unit TEXT,
  prep_min INTEGER,
  cook_min INTEGER,
  stnd_min INTEGER,
  source TEXT,
  intro TEXT,
  directions TEXT
);
Sample rows from `recipe`:
214, Raspberry Chiffon Pie, None, 10, 1 pie, 20, 8, 305, The California Tree Fruit Agreement, None, For crust, preheat oven to 375 degrees F.
In lightly greased 10-inch pie plate, combine graham cracker crumbs, melted butter and 1/4 cup sugar. Press evenly on bottom and up side of plate. Bake 5 minutes; cool.

For filling, in medium saucepan, combine juice or water and gelatin; let stand 5 minutes. Add 1/3 cup sugar and heat over medium heat, stirring to dissolve gelatin. In blender or food processor, puree 6 plums. Add puree and raspberries to gelatin mixture. Refrigerate until mixture begins to set about 1 hour. Stir yogurt into fruit mixture. In large bowl, beat egg whites until frothy. Gradually add cream of tartar and remaining 1/3 cup sugar and beat until stiff peaks form. Gently fold egg whites into fruit mixture so as not to reduce volume. Spoon into crust. Refrigerate 4 hours or overnight. Thinly slice remaining 2 plums and garnish top of pie.
215, Apricot Yogurt Parfaits, None, 4, None, 5, 2, 65, Produce for Better Health Foundation and 5 a Day, None, Drain canned apricots, pour 1/4 cup of the juice into saucepan or microwave-safe dish. Sprinkle gelatin over juice and let stand for 5 minutes to soften. Warm over low heat or microwave at medium (50% power) for 30 seconds or until gelatin has dissolved.
 
In food processor or blender, puree canned apricots; add lemon juice brandy, yogurt and gelatin mixture and process for 30 seconds or until combined.
 
Pour into parfait or stemmed glasses or champagne flutes. Cover and refrigerate until set, at least 1 hour or overnight.
 
Just before serving arrange fresh apricots on top. (If apricots are not available substitute kiwi slices or berries). Garnish each with a small spoonful of yogurt and sprinkling of brown sugar or mint.
216, Fresh Apricot Bavarian, None, 8, None, 5, 13, 0, The California Apricot Advisory Board, Serve in stemmed glasses and top with sliced apricots for elegant endings., Drop apricots into boiling water to cover. Return to boil and simmer for 5 minutes or until skins begin to split. Drain and rinse under cold water. Halve fruit and discard skins and pits. Puree apricots in electric blender. Combine water and gelatin in small saucepan; stir over low heat until dissolved. Mix sugar, apricot puree and yogurt with a wire whip until smooth; mix in dissolved gelatin. Sweeten to taste if desired. Chill mixture until thick. Spoon into stemmed glasses.

Note: One pound fresh apricots is 15 to 20. One and a half envelopes gelatin is 4 teaspoons.

CREATE TABLE `nutrition` (
  recipe_id INTEGER REFERENCES Recipe(recipe_id),
  protein REAL,
  carbo REAL,
  alcohol REAL,
  total_fat REAL,
  sat_fat REAL,
  cholestrl REAL,
  sodium REAL,
  iron REAL,
  vitamin_c REAL,
  vitamin_a REAL,
  fiber REAL,
  pcnt_cal_carb REAL,
  pcnt_cal_fat REAL,
  pcnt_cal_prot REAL,
  calories REAL
);
Sample rows from `nutrition`:
214, 5.47, 41.29, 0.0, 11.53, 2.21, 1.39, 260.78, 0.81, 8.89, 586.2, 0.87, 56.8, 35.68, 7.53, 290.79
215, 5.7, 23.75, 1.93, 1.08, 0.58, 3.48, 46.17, 0.57, 13.02, 2738.24, 0.62, 67.38, 6.89, 16.17, 141.01
216, 4.9, 26.88, 0.0, 1.1, 0.58, 3.46, 41.79, 0.37, 6.13, 1521.1, 0.34, 78.45, 7.24, 14.3, 137.06

","CREATE TABLE `Ingredient` (
  ingredient_id INTEGER,
  category TEXT,
  name TEXT,
  plural TEXT
);
Sample rows from `Ingredient`:
1, dairy, 1% lowfat cottage cheese, None
6, dairy, 1% lowfat milk, None
10, Mexican products, 10-inch flour tortilla, s

CREATE TABLE `Recipe` (
  recipe_id INTEGER,
  title TEXT,
  subtitle TEXT,
  servings INTEGER,
  yield_unit TEXT,
  prep_min INTEGER,
  cook_min INTEGER,
  stnd_min INTEGER,
  source TEXT,
  intro TEXT,
  directions TEXT
);
Sample rows from `Recipe`:
214, Raspberry Chiffon Pie, None, 10, 1 pie, 20, 8, 305, The California Tree Fruit Agreement, None, For crust, preheat oven to 375 degrees F.
In lightly greased 10-inch pie plate, combine graham cracker crumbs, melted butter and 1/4 cup sugar. Press evenly on bottom and up side of plate. Bake 5 minutes; cool.

For filling, in medium saucepan, combine juice or water and gelatin; let stand 5 minutes. Add 1/3 cup sugar and heat over medium heat, stirring to dissolve gelatin. In blender or food processor, puree 6 plums. Add puree and raspberries to gelatin mixture. Refrigerate until mixture begins to set about 1 hour. Stir yogurt into fruit mixture. In large bowl, beat egg whites until frothy. Gradually add cream of tartar and remaining 1/3 cup sugar and beat until stiff peaks form. Gently fold egg whites into fruit mixture so as not to reduce volume. Spoon into crust. Refrigerate 4 hours or overnight. Thinly slice remaining 2 plums and garnish top of pie.
215, Apricot Yogurt Parfaits, None, 4, None, 5, 2, 65, Produce for Better Health Foundation and 5 a Day, None, Drain canned apricots, pour 1/4 cup of the juice into saucepan or microwave-safe dish. Sprinkle gelatin over juice and let stand for 5 minutes to soften. Warm over low heat or microwave at medium (50% power) for 30 seconds or until gelatin has dissolved.
 
In food processor or blender, puree canned apricots; add lemon juice brandy, yogurt and gelatin mixture and process for 30 seconds or until combined.
 
Pour into parfait or stemmed glasses or champagne flutes. Cover and refrigerate until set, at least 1 hour or overnight.
 
Just before serving arrange fresh apricots on top. (If apricots are not available substitute kiwi slices or berries). Garnish each with a small spoonful of yogurt and sprinkling of brown sugar or mint.
216, Fresh Apricot Bavarian, None, 8, None, 5, 13, 0, The California Apricot Advisory Board, Serve in stemmed glasses and top with sliced apricots for elegant endings., Drop apricots into boiling water to cover. Return to boil and simmer for 5 minutes or until skins begin to split. Drain and rinse under cold water. Halve fruit and discard skins and pits. Puree apricots in electric blender. Combine water and gelatin in small saucepan; stir over low heat until dissolved. Mix sugar, apricot puree and yogurt with a wire whip until smooth; mix in dissolved gelatin. Sweeten to taste if desired. Chill mixture until thick. Spoon into stemmed glasses.

Note: One pound fresh apricots is 15 to 20. One and a half envelopes gelatin is 4 teaspoons.

CREATE TABLE `Nutrition` (
  recipe_id INTEGER REFERENCES Recipe(recipe_id),
  protein REAL,
  carbo REAL,
  alcohol REAL,
  total_fat REAL,
  sat_fat REAL,
  cholestrl REAL,
  sodium REAL,
  iron REAL,
  vitamin_c REAL,
  vitamin_a REAL,
  fiber REAL,
  pcnt_cal_carb REAL,
  pcnt_cal_fat REAL,
  pcnt_cal_prot REAL,
  calories REAL
);
Sample rows from `Nutrition`:
214, 5.47, 41.29, 0.0, 11.53, 2.21, 1.39, 260.78, 0.81, 8.89, 586.2, 0.87, 56.8, 35.68, 7.53, 290.79
215, 5.7, 23.75, 1.93, 1.08, 0.58, 3.48, 46.17, 0.57, 13.02, 2738.24, 0.62, 67.38, 6.89, 16.17, 141.01
216, 4.9, 26.88, 0.0, 1.1, 0.58, 3.46, 41.79, 0.37, 6.13, 1521.1, 0.34, 78.45, 7.24, 14.3, 137.06

CREATE TABLE `Quantity` (
  quantity_id INTEGER,
  recipe_id INTEGER REFERENCES Nutrition(recipe_id) REFERENCES Recipe(recipe_id),
  ingredient_id INTEGER REFERENCES Ingredient(ingredient_id),
  max_qty REAL,
  min_qty REAL,
  unit TEXT,
  preparation TEXT,
  optional TEXT
);
Sample rows from `Quantity`:
1, 214, 1613, 2.0, 2.0, cup(s), None, FALSE
2, 214, 3334, 0.25, 0.25, cup(s), None, FALSE
3, 214, 2222, 0.5, 0.5, cup(s), melted, FALSE

","recipe, nutrition","nutrition.calories, recipe.recipe_id, nutrition.recipe_id, recipe.source","Ingredient, Recipe, Nutrition, Quantity"
food_inspection_2,How many of the inspections with serious point levels have no fines?,SELECT COUNT(DISTINCT t2.inspection_id) FROM inspection_point as t1 inner JOIN violation as t2 ON t1.point_id = t2.point_id WHERE t1.point_level = 'Serious ' AND t2.fine = 0,"CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

","inspection_point, violation","violation.inspection_id, inspection_point.point_id, violation.point_id, inspection_point.point_level, violation.fine","employee, establishment, inspection, inspection_point, violation"
shipping,How many shipments were ordered by a customer in Florida?,SELECT COUNT(t1.cust_id) FROM customer as t1 inner JOIN shipment as t2 ON t1.cust_id = t2.cust_id WHERE t1.state = 'FL',"CREATE TABLE `customer` (
  cust_id INTEGER,
  cust_name TEXT,
  annual_revenue INTEGER,
  cust_type TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip REAL,
  phone TEXT
);
Sample rows from `customer`:
193, Advanced Fabricators, 39588651, manufacturer, 5141 Summit Boulevard, West Palm Beach, FL, 33415.0, (561) 683-3535
304, Pard's Trailer Sales, 17158109, wholesaler, 5910 South 300 West, Salt Lake City, UT, 84107.0, (801) 262-4864
314, Saar Enterprises, Inc., 47403613, retailer, 11687 192nd Street, Council Bluffs, IA, 51503.0, (712) 366-4929

CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

","CREATE TABLE `city` (
  city_id INTEGER,
  city_name TEXT,
  state TEXT,
  population INTEGER,
  area REAL
);
Sample rows from `city`:
100, Union City, New Jersey, 67088, 1.3
101, Huntington Park, California, 61348, 3.0
102, Passaic, New Jersey, 67861, 3.1

CREATE TABLE `customer` (
  cust_id INTEGER,
  cust_name TEXT,
  annual_revenue INTEGER,
  cust_type TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip REAL,
  phone TEXT
);
Sample rows from `customer`:
193, Advanced Fabricators, 39588651, manufacturer, 5141 Summit Boulevard, West Palm Beach, FL, 33415.0, (561) 683-3535
304, Pard's Trailer Sales, 17158109, wholesaler, 5910 South 300 West, Salt Lake City, UT, 84107.0, (801) 262-4864
314, Saar Enterprises, Inc., 47403613, retailer, 11687 192nd Street, Council Bluffs, IA, 51503.0, (712) 366-4929

CREATE TABLE `driver` (
  driver_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip_code INTEGER,
  phone TEXT
);
Sample rows from `driver`:
20, Sue, Newell, 268 Richmond Ave, Memphis, TN, 38106, (901) 774-6569
21, Andrea, Simons, 3574 Oak Limb Cv, Memphis, TN, 38135, (901) 384-0984
22, Roger, McHaney, 1839 S Orleans St, Memphis, TN, 38106, (901) 948-1043

CREATE TABLE `truck` (
  truck_id INTEGER,
  make TEXT,
  model_year INTEGER
);
Sample rows from `truck`:
1, Peterbilt, 2005
2, Mack, 2006
3, Peterbilt, 2007

CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

","customer, shipment","customer.cust_id, shipment.cust_id, customer.state","city, customer, driver, truck, shipment"
public_review_platform,"In users yelping since 2009 to 2011, how many of them have low count of fans?",SELECT COUNT(user_id) FROM users WHERE user_yelping_since_year >= 2009 AND user_yelping_since_year < 2012 AND user_fans = 'Low',"CREATE TABLE `users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

",users,"user_id, user_yelping_since_year, user_fans","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
public_review_platform,Which business in fashion category has the most review?,SELECT t3.business_id FROM categories as t1 inner JOIN business_categories as t2 ON t1.category_id = t2.category_id inner JOIN business as t3 ON t2.business_id = t3.business_id inner JOIN reviews as t4 ON t3.business_id = t4.business_id WHERE t1.category_name LIKE 'Fashion' AND t1.category_id = 7 GROUP BY t3.business_id ORDER BY COUNT(t4.user_id) DESC LIMIT 1,"CREATE TABLE `categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `business_categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `business_categories`:
1, 8
1, 143
2, 18

CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","categories, business_categories, business, reviews","business.business_id, categories.category_id, business_categories.category_id, business_categories.business_id, reviews.business_id, categories.category_name, reviews.user_id","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
chicago_crime,"What is the fax number for the district with the most number of crimes in January, 2018?",SELECT t1.fax FROM district as t1 inner JOIN crime as t2 ON t1.district_no = t2.district_no WHERE t2.date LIKE '%1/2018%' GROUP BY t2.district_no ORDER BY COUNT(case_number) DESC LIMIT 1,"CREATE TABLE `district` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `district`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","CREATE TABLE `Community_Area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `Community_Area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `District` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `District`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `FBI_Code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `FBI_Code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `IUCR` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `IUCR`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `Neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `Neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `Ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `Ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `Crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `Crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","district, crime","district.fax, district.district_no, crime.district_no, crime.date, case_number","Community_Area, District, FBI_Code, IUCR, Neighborhood, Ward, Crime"
shakespeare,"How many chapters are there in ""Midsummer Night's Dream""?",SELECT COUNT(t2.id) FROM works as t1 inner JOIN chapters as t2 ON t1.id = t2.work_id WHERE t1.title = 'Midsummer Night''s Dream',"CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

","CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
chapters, 19648
characters, 1266
paragraphs, 666327

CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

","works, chapters","chapters.id, works.id, chapters.work_id, works.title","chapters, sqlite_sequence, characters, paragraphs, works"
human_resources,"How many employees are there in the ""Miami"" office?",SELECT COUNT(*) FROM employee as t1  inner JOIN location as t2  ON t1.locationid = t2.locationid WHERE t2.locationcity = 'Miami',"CREATE TABLE `employee` (
  ssn TEXT PRIMARY KEY,
  lastname TEXT,
  firstname TEXT,
  hiredate TEXT,
  salary TEXT,
  gender TEXT,
  performance TEXT,
  positionID INTEGER REFERENCES position(positionID),
  locationID INTEGER REFERENCES location(locationID)
);
Sample rows from `employee`:
000-01-0000, Milgrom, Patricia, 10/1/04, US$57,500.00, F, Average, 2, 2
000-02-2222, Adams, Sandy, 1/15/01, US$19,500.00, F, Average, 3, 1
109-87-6543, Wood, Emily, 3/12/97, US$69,000.00, F, Average, 2, 5

CREATE TABLE `location` (
  locationID INTEGER,
  locationcity TEXT,
  address TEXT,
  state TEXT,
  zipcode INTEGER,
  officephone TEXT
);
Sample rows from `location`:
1, Atlanta, 450 Peachtree Rd, GA, 30316, (404)333-5555
2, Boston, 3 Commons Blvd, MA, 2190, (617)123-4444
3, Chicago, 500 Loop Highway, IL, 60620, (312)444-6666

","CREATE TABLE `location` (
  locationID INTEGER,
  locationcity TEXT,
  address TEXT,
  state TEXT,
  zipcode INTEGER,
  officephone TEXT
);
Sample rows from `location`:
1, Atlanta, 450 Peachtree Rd, GA, 30316, (404)333-5555
2, Boston, 3 Commons Blvd, MA, 2190, (617)123-4444
3, Chicago, 500 Loop Highway, IL, 60620, (312)444-6666

CREATE TABLE `position` (
  positionID INTEGER,
  positiontitle TEXT,
  educationrequired TEXT,
  minsalary TEXT,
  maxsalary TEXT
);
Sample rows from `position`:
1, Account Representative, 4 year degree, US$25,000.00, US$75,000.00
2, Manager, 4 year degree, US$50,000.00, US$150,000.00
3, Trainee, 2 year degree, US$18,000.00, US$25,000.00

CREATE TABLE `employee` (
  ssn TEXT PRIMARY KEY,
  lastname TEXT,
  firstname TEXT,
  hiredate TEXT,
  salary TEXT,
  gender TEXT,
  performance TEXT,
  positionID INTEGER REFERENCES position(positionID),
  locationID INTEGER REFERENCES location(locationID)
);
Sample rows from `employee`:
000-01-0000, Milgrom, Patricia, 10/1/04, US$57,500.00, F, Average, 2, 2
000-02-2222, Adams, Sandy, 1/15/01, US$19,500.00, F, Average, 3, 1
109-87-6543, Wood, Emily, 3/12/97, US$69,000.00, F, Average, 2, 5

","employee, location","employee.locationid, location.locationid, location.locationcity","location, position, employee"
olympics,What are the names of the cities where Carl Lewis Borack competed?,SELECT t4.city_name FROM person as t1 inner JOIN games_competitor as t2 ON t1.id = t2.person_id inner JOIN games_city as t3 ON t2.games_id = t3.games_id inner JOIN city as t4 ON t3.city_id = t4.id WHERE t1.full_name = 'Carl Lewis Borack',"CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

","CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `medal` (
  id INTEGER,
  medal_name TEXT
);
Sample rows from `medal`:
1, Gold
2, Silver
3, Bronze

CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `sport` (
  id INTEGER,
  sport_name TEXT
);
Sample rows from `sport`:
1, Aeronautics
2, Alpine Skiing
3, Alpinism

CREATE TABLE `event` (
  id INTEGER,
  sport_id INTEGER REFERENCES sport(id),
  event_name TEXT
);
Sample rows from `event`:
1, 9, Basketball Men's Basketball
2, 33, Judo Men's Extra-Lightweight
3, 25, Football Men's Football

CREATE TABLE `competitor_event` (
  event_id INTEGER REFERENCES event(id),
  competitor_id INTEGER REFERENCES games_competitor(id),
  medal_id INTEGER REFERENCES medal(id)
);
Sample rows from `competitor_event`:
1, 1, 4
2, 2, 4
3, 3, 4

","person, games_competitor, games_city, city","city.city_name, person.id, games_competitor.person_id, games_competitor.games_id, games_city.games_id, games_city.city_id, city.id, person.full_name","city, games, games_city, medal, noc_region, person, games_competitor, person_region, sport, event, competitor_event"
language_corpus,"What is the revision ID for the page on Catalan titled ""Arqueologia""?",SELECT revision FROM pages WHERE lid = 1 AND title = 'Arqueologia',"CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

","CREATE TABLE `langs` (
  lid INTEGER,
  lang TEXT PRIMARY KEY,
  locale TEXT PRIMARY KEY,
  pages INTEGER,
  words INTEGER
);
Sample rows from `langs`:
1, ca, ca_ES, 1129144, 2764996

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
langs, 1
pages, 1129144
words, 2764996

CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `langs_words` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `langs_words`:
1, 1, 242
1, 2, 16841
1, 3, 48700

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

",pages,"revision, lid, title","langs, sqlite_sequence, pages, words, langs_words, pages_words, biwords"
public_review_platform,"For businesses with long length reviews, which state are they located?",SELECT DISTINCT t1.state FROM business as t1 inner JOIN tips as t2 ON t1.business_id = t2.business_id WHERE t2.tip_length = 'Long',"CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","business, tips","business.state, business.business_id, tips.business_id, tips.tip_length","Attributes, Categories, Compliments, Days, Years, Business_Attributes, Business_Categories, Business_Hours, Checkins, Elite, Reviews, Tips, Users_Compliments, Business, Users"
video_games,How many game publisher IDs have published games on the X360 platform?,SELECT COUNT(t1.game_publisher_id) FROM game_platform as t1 inner JOIN platform as t2 ON t1.platform_id = t2.id WHERE t2.platform_name = 'X360',"CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

","CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

","game_platform, platform","game_platform.game_publisher_id, game_platform.platform_id, platform.id, platform.platform_name","genre, game, platform, publisher, game_publisher, game_platform, region, region_sales"
books,"How much time does it take to update the status of order ""2398""?","SELECT strftime('%J', t2.status_date) - strftime('%J', t1.order_date) FROM cust_order as t1 inner JOIN order_history as t2 ON t1.order_id = t2.order_id WHERE t1.order_id = 2398","CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","cust_order, order_history","order_history.status_date, cust_order.order_date, cust_order.order_id, order_history.order_id","address_status, author, book_language, country, address, customer, customer_address, order_status, publisher, book, book_author, shipping_method, cust_order, sqlite_sequence, order_history, order_line"
airline,How many planes of Spirit Air Lines took off on 2018/8/7?,SELECT COUNT(t2.code) FROM airlines as t1 inner JOIN `air carriers` as t2 ON t1.op_carrier_airline_id = t2.code WHERE t1.fl_date = '2018/8/7' AND t2.description = 'Spirit air Lines: NK',"CREATE TABLE `airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

CREATE TABLE `air carriers` (
  Code INTEGER,
  Description TEXT
);
Sample rows from `air carriers`:
19031, Mackey International Inc.: MAC
19032, Munz Northern Airlines Inc.: XY
19033, Cochise Airlines Inc.: COC

","CREATE TABLE `Air Carriers` (
  Code INTEGER,
  Description TEXT
);
Sample rows from `Air Carriers`:
19031, Mackey International Inc.: MAC
19032, Munz Northern Airlines Inc.: XY
19033, Cochise Airlines Inc.: COC

CREATE TABLE `Airports` (
  Code TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `Airports`:
01A, Afognak Lake, AK: Afognak Lake Airport
03A, Granite Mountain, AK: Bear Creek Mining Strip
04A, Lik, AK: Lik Mining Camp

CREATE TABLE `Airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `Airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

","airlines, air carriers","air carriers.code, airlines.op_carrier_airline_id, airlines.fl_date, air carriers.description","Air Carriers, Airports, Airlines"
university,How many universities scored 0 in Awards between 2005 to 2015?,SELECT COUNT(*) FROM ranking_criteria as t1 inner JOIN university_ranking_year as t2 ON t1.id = t2.ranking_criteria_id WHERE t1.criteria_name = 'Award' AND t2.year BETWEEN 2005 AND 2015 AND t2.score = 0,"CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

","CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

CREATE TABLE `ranking_system` (
  id INTEGER,
  system_name TEXT
);
Sample rows from `ranking_system`:
1, Times Higher Education World University Ranking
2, Shanghai Ranking
3, Center for World University Rankings

CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

","ranking_criteria, university_ranking_year","ranking_criteria.id, university_ranking_year.ranking_criteria_id, ranking_criteria.criteria_name, university_ranking_year.year, university_ranking_year.score","country, ranking_system, ranking_criteria, university, university_ranking_year, university_year"
disney,Who is the hero character of the Disney movie directed by Will Finn?,SELECT t1.hero FROM characters as t1 inner JOIN director as t2 ON t2.name = t1.movie_title WHERE t2.director = 'Will Finn',"CREATE TABLE `characters` (
  movie_title TEXT PRIMARY KEY,
  release_date TEXT,
  hero TEXT REFERENCES voice-actors(character),
  villian TEXT,
  song TEXT
);
Sample rows from `characters`:
Snow White and the Seven Dwarfs, 21-Dec-37, Snow White, Evil Queen, Some Day My Prince Will Come
Pinocchio, 7-Feb-40, Pinocchio, Stromboli, When You Wish upon a Star
Fantasia, 13-Nov-40, None, Chernabog, None

CREATE TABLE `director` (
  name TEXT PRIMARY KEY REFERENCES characters(movie_title),
  director TEXT
);
Sample rows from `director`:
Snow White and the Seven Dwarfs, David Hand
Pinocchio, Ben Sharpsteen
Fantasia, full credits

","CREATE TABLE `characters` (
  movie_title TEXT PRIMARY KEY,
  release_date TEXT,
  hero TEXT REFERENCES voice-actors(character),
  villian TEXT,
  song TEXT
);
Sample rows from `characters`:
Snow White and the Seven Dwarfs, 21-Dec-37, Snow White, Evil Queen, Some Day My Prince Will Come
Pinocchio, 7-Feb-40, Pinocchio, Stromboli, When You Wish upon a Star
Fantasia, 13-Nov-40, None, Chernabog, None

CREATE TABLE `director` (
  name TEXT PRIMARY KEY REFERENCES characters(movie_title),
  director TEXT
);
Sample rows from `director`:
Snow White and the Seven Dwarfs, David Hand
Pinocchio, Ben Sharpsteen
Fantasia, full credits

CREATE TABLE `movies_total_gross` (
  movie_title TEXT PRIMARY KEY REFERENCES characters(movie_title),
  release_date TEXT PRIMARY KEY,
  genre TEXT,
  MPAA_rating TEXT,
  total_gross TEXT,
  inflation_adjusted_gross TEXT
);
Sample rows from `movies_total_gross`:
Snow White and the Seven Dwarfs, Dec 21, 1937, Musical, G, $184,925,485, $5,228,953,251
Pinocchio, Feb 9, 1940, Adventure, G, $84,300,000, $2,188,229,052
Fantasia, Nov 13, 1940, Musical, G, $83,320,000, $2,187,090,808

CREATE TABLE `revenue` (
  Year INTEGER,
  Studio Entertainment[NI 1] REAL,
  Disney Consumer Products[NI 2] REAL,
  Disney Interactive[NI 3][Rev 1] INTEGER,
  Walt Disney Parks and Resorts REAL,
  Disney Media Networks TEXT,
  Total INTEGER
);
Sample rows from `revenue`:
1991, 2593.0, 724.0, None, 2794.0, None, 6111
1992, 3115.0, 1081.0, None, 3306.0, None, 7502
1993, 3673.4, 1415.1, None, 3440.7, None, 8529

CREATE TABLE `voice-actors` (
  character TEXT PRIMARY KEY,
  voice-actor TEXT,
  movie TEXT REFERENCES characters(movie_title)
);
Sample rows from `voice-actors`:
Abby Mallard, Joan Cusack, Chicken Little
Abigail Gabble, Monica Evans, The Aristocats
Abis Mal, Jason Alexander, The Return of Jafar

","characters, director","characters.hero, director.name, characters.movie_title, director.director","characters, director, movies_total_gross, revenue, voice-actors"
retail_complains,"Write down the call id of clients whose first name start with alphabet ""B"".",SELECT t2.call_id FROM client as t1 inner JOIN callcenterlogs as t2 ON t1.client_id = t2.`rand client` WHERE t1.first LIKE 'B%',"CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

","CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

","client, callcenterlogs","callcenterlogs.call_id, client.client_id, callcenterlogs.rand client, client.first","state, callcenterlogs, client, district, events, reviews"
shakespeare,"In Shakespeare's works before 1600, list down the title of the tragic story he had written that involved a character named ""Tybalt"".",SELECT DISTINCT t1.title FROM works as t1 inner JOIN chapters as t2 ON t1.id = t2.work_id inner JOIN paragraphs as t3 ON t2.id = t3.chapter_id inner JOIN characters as t4 ON t3.character_id = t4.id WHERE t1.date < 1600 AND t1.genretype = 'Tragedy' AND t4.charname = 'Tybalt',"CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

","CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
chapters, 19648
characters, 1266
paragraphs, 666327

CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

","works, chapters, paragraphs, characters","works.title, works.id, chapters.work_id, chapters.id, paragraphs.chapter_id, paragraphs.character_id, characters.id, works.date, works.genretype, characters.charname","chapters, sqlite_sequence, characters, paragraphs, works"
software_company,List the educationnum and response of customers within the age of 20 to 30 that has the highest number of inhabitants among the group.,"SELECT t1.educationnum, t2.response FROM customers as t1 inner JOIN mailings1_2 as t2 ON t1.id = t2.REFid inner JOIN demog as t3 ON t1.GEOid = t3.GEOid WHERE t1.age >= 20 AND t1.age <= 30 ORDER BY t3.inhabitants_k DESC LIMIT 1","CREATE TABLE `customers` (
  ID INTEGER,
  SEX TEXT,
  MARITAL_STATUS TEXT,
  GEOID INTEGER REFERENCES Demog(None),
  EDUCATIONNUM INTEGER,
  OCCUPATION TEXT,
  age INTEGER
);
Sample rows from `customers`:
0, Male, Never-married, 61, 7, Machine-op-inspct, 62
1, Male, Married-civ-spouse, 70, 3, Handlers-cleaners, 78
2, Male, Never-married, 53, 7, Machine-op-inspct, 69

CREATE TABLE `mailings1_2` (
  REFID INTEGER REFERENCES Customers(None),
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `mailings1_2`:
0, 2007-02-01 12:00:00.0, false
1, 2007-02-01 12:00:00.0, false
2, 2007-02-01 12:00:00.0, false

CREATE TABLE `demog` (
  GEOID INTEGER,
  INHABITANTS_K REAL,
  INCOME_K REAL,
  A_VAR1 REAL,
  A_VAR2 REAL,
  A_VAR3 REAL,
  A_VAR4 REAL,
  A_VAR5 REAL,
  A_VAR6 REAL,
  A_VAR7 REAL,
  A_VAR8 REAL,
  A_VAR9 REAL,
  A_VAR10 REAL,
  A_VAR11 REAL,
  A_VAR12 REAL,
  A_VAR13 REAL,
  A_VAR14 REAL,
  A_VAR15 REAL,
  A_VAR16 REAL,
  A_VAR17 REAL,
  A_VAR18 REAL
);
Sample rows from `demog`:
0, 30.046, 2631.47, 6.084, 5.79, 8.595, 3.935, 6.362, 8.626, 4.624, 8.324, 5.233, 6.232, 5.205, 8.231, 6.746, 8.679, 5.292, 3.5, 5.512, 5.783
1, 36.25, 3012.75, 4.604, 8.309, 6.007, 5.938, 8.773, 3.579, 6.349, 4.694, 6.884, 7.062, 7.319, 3.72, 6.405, 7.202, 4.932, 7.969, 8.15, 5.633
2, 47.645, 2192.41, 4.911, 8.557, 5.934, 6.494, 9.172, 3.202, 6.157, 4.822, 7.942, 7.901, 7.928, 2.33, 6.029, 6.455, 4.72, 8.564, 8.342, 4.938

","CREATE TABLE `Demog` (
  GEOID INTEGER,
  INHABITANTS_K REAL,
  INCOME_K REAL,
  A_VAR1 REAL,
  A_VAR2 REAL,
  A_VAR3 REAL,
  A_VAR4 REAL,
  A_VAR5 REAL,
  A_VAR6 REAL,
  A_VAR7 REAL,
  A_VAR8 REAL,
  A_VAR9 REAL,
  A_VAR10 REAL,
  A_VAR11 REAL,
  A_VAR12 REAL,
  A_VAR13 REAL,
  A_VAR14 REAL,
  A_VAR15 REAL,
  A_VAR16 REAL,
  A_VAR17 REAL,
  A_VAR18 REAL
);
Sample rows from `Demog`:
0, 30.046, 2631.47, 6.084, 5.79, 8.595, 3.935, 6.362, 8.626, 4.624, 8.324, 5.233, 6.232, 5.205, 8.231, 6.746, 8.679, 5.292, 3.5, 5.512, 5.783
1, 36.25, 3012.75, 4.604, 8.309, 6.007, 5.938, 8.773, 3.579, 6.349, 4.694, 6.884, 7.062, 7.319, 3.72, 6.405, 7.202, 4.932, 7.969, 8.15, 5.633
2, 47.645, 2192.41, 4.911, 8.557, 5.934, 6.494, 9.172, 3.202, 6.157, 4.822, 7.942, 7.901, 7.928, 2.33, 6.029, 6.455, 4.72, 8.564, 8.342, 4.938

CREATE TABLE `mailings3` (
  REFID INTEGER,
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `mailings3`:
60000, 2007-07-01 12:00:00.0, false
60001, 2007-07-01 12:00:00.0, false
60002, 2007-07-01 12:00:00.0, false

CREATE TABLE `Customers` (
  ID INTEGER,
  SEX TEXT,
  MARITAL_STATUS TEXT,
  GEOID INTEGER REFERENCES Demog(None),
  EDUCATIONNUM INTEGER,
  OCCUPATION TEXT,
  age INTEGER
);
Sample rows from `Customers`:
0, Male, Never-married, 61, 7, Machine-op-inspct, 62
1, Male, Married-civ-spouse, 70, 3, Handlers-cleaners, 78
2, Male, Never-married, 53, 7, Machine-op-inspct, 69

CREATE TABLE `Mailings1_2` (
  REFID INTEGER REFERENCES Customers(None),
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `Mailings1_2`:
0, 2007-02-01 12:00:00.0, false
1, 2007-02-01 12:00:00.0, false
2, 2007-02-01 12:00:00.0, false

CREATE TABLE `Sales` (
  EVENTID INTEGER,
  REFID INTEGER REFERENCES Customers(None),
  EVENT_DATE DATETIME,
  AMOUNT REAL
);
Sample rows from `Sales`:
0, 0, 2006-12-21 12:00:00.0, 17.907
1, 0, 2006-12-25 12:00:00.0, 17.401
2, 0, 2007-01-26 12:00:00.0, 13.277

","customers, mailings1_2, demog","customers.educationnum, mailings1_2.response, customers.id, mailings1_2.REFid, customers.GEOid, demog.GEOid, customers.age, demog.inhabitants_k","Demog, mailings3, Customers, Mailings1_2, Sales"
bike_share_1,"How many trips made by a subscriber started in August, 2013 from a station that can hold more than 20 bikes?",SELECT COUNT(t2.id) FROM station as t1 inner JOIN trip as t2 ON t1.id = t2.start_station_id WHERE t2.subscription_type = 'Subscriber' AND t2.start_date LIKE '8/%/2013%' AND t1.dock_count > 20,"CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat REAL,
  long REAL,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);
Sample rows from `station`:
2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013
3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013
4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013

CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);
Sample rows from `trip`:
4069, 174, 8/29/2013 9:08, 2nd at South Park, 64, 8/29/2013 9:11, 2nd at South Park, 64, 288, Subscriber, 94114
4073, 1067, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:42, San Francisco Caltrain 2 (330 Townsend), 69, 321, Subscriber, 94703
4074, 1131, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:43, San Francisco Caltrain 2 (330 Townsend), 69, 317, Subscriber, 94115

","CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat REAL,
  long REAL,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);
Sample rows from `station`:
2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013
3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013
4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013

CREATE TABLE `status` (
  station_id INTEGER,
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);
Sample rows from `status`:
2, 2, 25, 2013/08/29 12:06:01
2, 2, 25, 2013/08/29 12:07:01
2, 2, 25, 2013/08/29 12:08:01

CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);
Sample rows from `trip`:
4069, 174, 8/29/2013 9:08, 2nd at South Park, 64, 8/29/2013 9:11, 2nd at South Park, 64, 288, Subscriber, 94114
4073, 1067, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:42, San Francisco Caltrain 2 (330 Townsend), 69, 321, Subscriber, 94703
4074, 1131, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:43, San Francisco Caltrain 2 (330 Townsend), 69, 317, Subscriber, 94115

CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches REAL,
  mean_sea_level_pressure_inches REAL,
  min_sea_level_pressure_inches REAL,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches TEXT,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code TEXT
);
Sample rows from `weather`:
8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107
8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30.0, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107
8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30.0, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107

","station, trip","trip.id, station.id, trip.start_station_id, trip.subscription_type, trip.start_date, station.dock_count","station, status, trip, weather"
menu,Who is the sponsor of menu with ID 12463?,SELECT sponsor FROM menu WHERE id = 12463,"CREATE TABLE `menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

","CREATE TABLE `Dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `Dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

CREATE TABLE `Menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `Menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

CREATE TABLE `MenuPage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `MenuPage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

CREATE TABLE `MenuItem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `MenuItem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

",menu,"sponsor, id","Dish, Menu, MenuPage, MenuItem"
shakespeare,"How many paragraphs are there in ""Ay, surely, mere the truth: I know his lady.""?","SELECT paragraphnum FROM paragraphs WHERE plaintext = 'Ay, surely, mere the truth: I know his lady.'","CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

","CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
chapters, 19648
characters, 1266
paragraphs, 666327

CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

",paragraphs,"paragraphnum, plaintext","chapters, sqlite_sequence, characters, paragraphs, works"
cookbook,Provide the title and total time of the recipe which has the highest possibility of gaining weight.,"SELECT t1.title, t1.prep_min + t1.cook_min + t1.stnd_min FROM recipe as t1 inner JOIN nutrition as t2 ON t1.recipe_id = t2.recipe_id ORDER BY t2.total_fat DESC LIMIT 1","CREATE TABLE `recipe` (
  recipe_id INTEGER,
  title TEXT,
  subtitle TEXT,
  servings INTEGER,
  yield_unit TEXT,
  prep_min INTEGER,
  cook_min INTEGER,
  stnd_min INTEGER,
  source TEXT,
  intro TEXT,
  directions TEXT
);
Sample rows from `recipe`:
214, Raspberry Chiffon Pie, None, 10, 1 pie, 20, 8, 305, The California Tree Fruit Agreement, None, For crust, preheat oven to 375 degrees F.
In lightly greased 10-inch pie plate, combine graham cracker crumbs, melted butter and 1/4 cup sugar. Press evenly on bottom and up side of plate. Bake 5 minutes; cool.

For filling, in medium saucepan, combine juice or water and gelatin; let stand 5 minutes. Add 1/3 cup sugar and heat over medium heat, stirring to dissolve gelatin. In blender or food processor, puree 6 plums. Add puree and raspberries to gelatin mixture. Refrigerate until mixture begins to set about 1 hour. Stir yogurt into fruit mixture. In large bowl, beat egg whites until frothy. Gradually add cream of tartar and remaining 1/3 cup sugar and beat until stiff peaks form. Gently fold egg whites into fruit mixture so as not to reduce volume. Spoon into crust. Refrigerate 4 hours or overnight. Thinly slice remaining 2 plums and garnish top of pie.
215, Apricot Yogurt Parfaits, None, 4, None, 5, 2, 65, Produce for Better Health Foundation and 5 a Day, None, Drain canned apricots, pour 1/4 cup of the juice into saucepan or microwave-safe dish. Sprinkle gelatin over juice and let stand for 5 minutes to soften. Warm over low heat or microwave at medium (50% power) for 30 seconds or until gelatin has dissolved.
 
In food processor or blender, puree canned apricots; add lemon juice brandy, yogurt and gelatin mixture and process for 30 seconds or until combined.
 
Pour into parfait or stemmed glasses or champagne flutes. Cover and refrigerate until set, at least 1 hour or overnight.
 
Just before serving arrange fresh apricots on top. (If apricots are not available substitute kiwi slices or berries). Garnish each with a small spoonful of yogurt and sprinkling of brown sugar or mint.
216, Fresh Apricot Bavarian, None, 8, None, 5, 13, 0, The California Apricot Advisory Board, Serve in stemmed glasses and top with sliced apricots for elegant endings., Drop apricots into boiling water to cover. Return to boil and simmer for 5 minutes or until skins begin to split. Drain and rinse under cold water. Halve fruit and discard skins and pits. Puree apricots in electric blender. Combine water and gelatin in small saucepan; stir over low heat until dissolved. Mix sugar, apricot puree and yogurt with a wire whip until smooth; mix in dissolved gelatin. Sweeten to taste if desired. Chill mixture until thick. Spoon into stemmed glasses.

Note: One pound fresh apricots is 15 to 20. One and a half envelopes gelatin is 4 teaspoons.

CREATE TABLE `nutrition` (
  recipe_id INTEGER REFERENCES Recipe(recipe_id),
  protein REAL,
  carbo REAL,
  alcohol REAL,
  total_fat REAL,
  sat_fat REAL,
  cholestrl REAL,
  sodium REAL,
  iron REAL,
  vitamin_c REAL,
  vitamin_a REAL,
  fiber REAL,
  pcnt_cal_carb REAL,
  pcnt_cal_fat REAL,
  pcnt_cal_prot REAL,
  calories REAL
);
Sample rows from `nutrition`:
214, 5.47, 41.29, 0.0, 11.53, 2.21, 1.39, 260.78, 0.81, 8.89, 586.2, 0.87, 56.8, 35.68, 7.53, 290.79
215, 5.7, 23.75, 1.93, 1.08, 0.58, 3.48, 46.17, 0.57, 13.02, 2738.24, 0.62, 67.38, 6.89, 16.17, 141.01
216, 4.9, 26.88, 0.0, 1.1, 0.58, 3.46, 41.79, 0.37, 6.13, 1521.1, 0.34, 78.45, 7.24, 14.3, 137.06

","CREATE TABLE `Ingredient` (
  ingredient_id INTEGER,
  category TEXT,
  name TEXT,
  plural TEXT
);
Sample rows from `Ingredient`:
1, dairy, 1% lowfat cottage cheese, None
6, dairy, 1% lowfat milk, None
10, Mexican products, 10-inch flour tortilla, s

CREATE TABLE `Recipe` (
  recipe_id INTEGER,
  title TEXT,
  subtitle TEXT,
  servings INTEGER,
  yield_unit TEXT,
  prep_min INTEGER,
  cook_min INTEGER,
  stnd_min INTEGER,
  source TEXT,
  intro TEXT,
  directions TEXT
);
Sample rows from `Recipe`:
214, Raspberry Chiffon Pie, None, 10, 1 pie, 20, 8, 305, The California Tree Fruit Agreement, None, For crust, preheat oven to 375 degrees F.
In lightly greased 10-inch pie plate, combine graham cracker crumbs, melted butter and 1/4 cup sugar. Press evenly on bottom and up side of plate. Bake 5 minutes; cool.

For filling, in medium saucepan, combine juice or water and gelatin; let stand 5 minutes. Add 1/3 cup sugar and heat over medium heat, stirring to dissolve gelatin. In blender or food processor, puree 6 plums. Add puree and raspberries to gelatin mixture. Refrigerate until mixture begins to set about 1 hour. Stir yogurt into fruit mixture. In large bowl, beat egg whites until frothy. Gradually add cream of tartar and remaining 1/3 cup sugar and beat until stiff peaks form. Gently fold egg whites into fruit mixture so as not to reduce volume. Spoon into crust. Refrigerate 4 hours or overnight. Thinly slice remaining 2 plums and garnish top of pie.
215, Apricot Yogurt Parfaits, None, 4, None, 5, 2, 65, Produce for Better Health Foundation and 5 a Day, None, Drain canned apricots, pour 1/4 cup of the juice into saucepan or microwave-safe dish. Sprinkle gelatin over juice and let stand for 5 minutes to soften. Warm over low heat or microwave at medium (50% power) for 30 seconds or until gelatin has dissolved.
 
In food processor or blender, puree canned apricots; add lemon juice brandy, yogurt and gelatin mixture and process for 30 seconds or until combined.
 
Pour into parfait or stemmed glasses or champagne flutes. Cover and refrigerate until set, at least 1 hour or overnight.
 
Just before serving arrange fresh apricots on top. (If apricots are not available substitute kiwi slices or berries). Garnish each with a small spoonful of yogurt and sprinkling of brown sugar or mint.
216, Fresh Apricot Bavarian, None, 8, None, 5, 13, 0, The California Apricot Advisory Board, Serve in stemmed glasses and top with sliced apricots for elegant endings., Drop apricots into boiling water to cover. Return to boil and simmer for 5 minutes or until skins begin to split. Drain and rinse under cold water. Halve fruit and discard skins and pits. Puree apricots in electric blender. Combine water and gelatin in small saucepan; stir over low heat until dissolved. Mix sugar, apricot puree and yogurt with a wire whip until smooth; mix in dissolved gelatin. Sweeten to taste if desired. Chill mixture until thick. Spoon into stemmed glasses.

Note: One pound fresh apricots is 15 to 20. One and a half envelopes gelatin is 4 teaspoons.

CREATE TABLE `Nutrition` (
  recipe_id INTEGER REFERENCES Recipe(recipe_id),
  protein REAL,
  carbo REAL,
  alcohol REAL,
  total_fat REAL,
  sat_fat REAL,
  cholestrl REAL,
  sodium REAL,
  iron REAL,
  vitamin_c REAL,
  vitamin_a REAL,
  fiber REAL,
  pcnt_cal_carb REAL,
  pcnt_cal_fat REAL,
  pcnt_cal_prot REAL,
  calories REAL
);
Sample rows from `Nutrition`:
214, 5.47, 41.29, 0.0, 11.53, 2.21, 1.39, 260.78, 0.81, 8.89, 586.2, 0.87, 56.8, 35.68, 7.53, 290.79
215, 5.7, 23.75, 1.93, 1.08, 0.58, 3.48, 46.17, 0.57, 13.02, 2738.24, 0.62, 67.38, 6.89, 16.17, 141.01
216, 4.9, 26.88, 0.0, 1.1, 0.58, 3.46, 41.79, 0.37, 6.13, 1521.1, 0.34, 78.45, 7.24, 14.3, 137.06

CREATE TABLE `Quantity` (
  quantity_id INTEGER,
  recipe_id INTEGER REFERENCES Nutrition(recipe_id) REFERENCES Recipe(recipe_id),
  ingredient_id INTEGER REFERENCES Ingredient(ingredient_id),
  max_qty REAL,
  min_qty REAL,
  unit TEXT,
  preparation TEXT,
  optional TEXT
);
Sample rows from `Quantity`:
1, 214, 1613, 2.0, 2.0, cup(s), None, FALSE
2, 214, 3334, 0.25, 0.25, cup(s), None, FALSE
3, 214, 2222, 0.5, 0.5, cup(s), melted, FALSE

","recipe, nutrition","recipe.title, recipe.prep_min, recipe.cook_min, recipe.recipe_id, nutrition.recipe_id, nutrition.total_fat","Ingredient, Recipe, Nutrition, Quantity"
airline,How long was the longest minute delay caused by a weather problem in airport id 12264?,SELECT weather_delay FROM airlines WHERE origin_airport_id = 12264 ORDER BY weather_delay DESC LIMIT 1,"CREATE TABLE `airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

","CREATE TABLE `Air Carriers` (
  Code INTEGER,
  Description TEXT
);
Sample rows from `Air Carriers`:
19031, Mackey International Inc.: MAC
19032, Munz Northern Airlines Inc.: XY
19033, Cochise Airlines Inc.: COC

CREATE TABLE `Airports` (
  Code TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `Airports`:
01A, Afognak Lake, AK: Afognak Lake Airport
03A, Granite Mountain, AK: Bear Creek Mining Strip
04A, Lik, AK: Lik Mining Camp

CREATE TABLE `Airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `Airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

",airlines,"weather_delay, origin_airport_id","Air Carriers, Airports, Airlines"
university,Indicate the university's name with the highest ranking score in Teaching.,SELECT t1.university_name FROM university as t1 inner JOIN university_ranking_year as t2 ON t1.id = t2.university_id inner JOIN ranking_criteria as t3 ON t3.id = t2.ranking_criteria_id WHERE t3.criteria_name = 'Teaching' ORDER BY t2.score DESC LIMIT 1,"CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

","CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

CREATE TABLE `ranking_system` (
  id INTEGER,
  system_name TEXT
);
Sample rows from `ranking_system`:
1, Times Higher Education World University Ranking
2, Shanghai Ranking
3, Center for World University Rankings

CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

","university, university_ranking_year, ranking_criteria","university.university_name, university.id, university_ranking_year.university_id, ranking_criteria.id, university_ranking_year.ranking_criteria_id, ranking_criteria.criteria_name, university_ranking_year.score","country, ranking_system, ranking_criteria, university, university_ranking_year, university_year"
chicago_crime,What is the percentage of severe cases that are related to sexual assault?,SELECT cast(SUM(case when primary_description = 'CRiM SEXUAL asSAULT' then 1 else 0 end) as real) * 100 / COUNT(*) FROM iucr WHERE index_code = 'i',"CREATE TABLE `iucr` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `iucr`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

","CREATE TABLE `Community_Area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `Community_Area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `District` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `District`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `FBI_Code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `FBI_Code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `IUCR` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `IUCR`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `Neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `Neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `Ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `Ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `Crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `Crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

",iucr,"primary_description, index_code","Community_Area, District, FBI_Code, IUCR, Neighborhood, Ward, Crime"
regional_sales,What is the average household income of Glendale?,SELECT AVG(`household income`) FROM `store locations` WHERE `city name` = 'Glendale',"CREATE TABLE `store locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `store locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  Customer Names TEXT
);
Sample rows from `Customers`:
1, Avon Corp
2, WakeFern 
3, Elorac, Corp

CREATE TABLE `Products` (
  ProductID INTEGER,
  Product Name TEXT
);
Sample rows from `Products`:
1, Cookware
2, Photo Frames
3, Table Lamps

CREATE TABLE `Regions` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `Regions`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `Sales Team` (
  SalesTeamID INTEGER,
  Sales Team TEXT,
  Region TEXT
);
Sample rows from `Sales Team`:
1, Adam Hernandez, Northeast
2, Keith Griffin, Northeast
3, Jerry Green, West

CREATE TABLE `Store Locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `Store Locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

CREATE TABLE `Sales Orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `Sales Orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

",store locations,"household income, city name","Customers, Products, Regions, Sales Team, Store Locations, Sales Orders"
retail_world,How many customers are located in London?,SELECT COUNT(customerid) FROM customers WHERE city = 'London',"CREATE TABLE `customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

",customers,"customerid, city","sqlite_sequence, Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails"
image_and_language,What is the relationship between object sample no. 25 and object sample no. 2 on image no. 1?,SELECT t2.pred_class FROM img_rel as t1 inner JOIN pred_classES as t2 ON t1.pred_class_ID = t2.pred_class_ID WHERE t1.img_id = 1 AND t1.obj1_sample_id = 25 AND t1.obj2_sample_id = 2,"CREATE TABLE `img_rel` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `img_rel`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

CREATE TABLE `pred_classES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `pred_classES`:
0, playing on
1, looking a
2, to left of

","CREATE TABLE `ATT_CLASSES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `ATT_CLASSES`:
0, building s
1, indoors
2, cluttered

CREATE TABLE `OBJ_CLASSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLASSES`:
0, awning
1, goggles
2, dot

CREATE TABLE `IMG_OBJ` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `IMG_OBJ`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `IMG_OBJ_ATT` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_OBJ_ATT`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `PRED_CLASSES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `PRED_CLASSES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `IMG_REL` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_REL`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

","img_rel, pred_classES","pred_classES.pred_class, img_rel.pred_class_ID, pred_classES.pred_class_ID, img_rel.img_id, img_rel.obj1_sample_id, img_rel.obj2_sample_id","ATT_CLASSES, OBJ_CLASSES, IMG_OBJ, IMG_OBJ_ATT, PRED_CLASSES, IMG_REL"
olympics,In which city was the game held where the oldest competitor participated?,SELECT t4.city_name FROM games_competitor as t1 inner JOIN games as t2 ON t1.games_id = t2.id inner JOIN games_city as t3 ON t1.games_id = t3.games_id inner JOIN city as t4 ON t3.city_id = t4.id ORDER BY t1.age DESC LIMIT 1,"CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

","CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `medal` (
  id INTEGER,
  medal_name TEXT
);
Sample rows from `medal`:
1, Gold
2, Silver
3, Bronze

CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `sport` (
  id INTEGER,
  sport_name TEXT
);
Sample rows from `sport`:
1, Aeronautics
2, Alpine Skiing
3, Alpinism

CREATE TABLE `event` (
  id INTEGER,
  sport_id INTEGER REFERENCES sport(id),
  event_name TEXT
);
Sample rows from `event`:
1, 9, Basketball Men's Basketball
2, 33, Judo Men's Extra-Lightweight
3, 25, Football Men's Football

CREATE TABLE `competitor_event` (
  event_id INTEGER REFERENCES event(id),
  competitor_id INTEGER REFERENCES games_competitor(id),
  medal_id INTEGER REFERENCES medal(id)
);
Sample rows from `competitor_event`:
1, 1, 4
2, 2, 4
3, 3, 4

","games_competitor, games, games_city, city","city.city_name, games_competitor.games_id, games.id, games_city.games_id, games_city.city_id, city.id, games_competitor.age","city, games, games_city, medal, noc_region, person, games_competitor, person_region, sport, event, competitor_event"
cs_semester,"Among the students who took the course Machine Learning Theory, how many of them are undergraduates?",SELECT COUNT(t1.student_id) FROM student as t1 inner JOIN registration as t2 ON t1.student_id = t2.student_id inner JOIN course as t3 ON t2.course_id = t3.course_id WHERE t3.name = 'Machine Learning Theory' AND t1.type = 'UG',"CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

","CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

CREATE TABLE `prof` (
  prof_id INTEGER,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  popularity INTEGER,
  teachingability INTEGER,
  graduate_from TEXT
);
Sample rows from `prof`:
1, Male, Nathaniel, Pigford, npigford0@hku.hk, 3, 5, University of Washington
2, Male, Zhihua, Zhou, zzhihua@hku.hk, 2, 1, Beijing Polytechnic University
3, Male, Ogdon, Zywicki, ozywicki2@hku.hk, 2, 2, University of Boston

CREATE TABLE `RA` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `RA`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

","student, registration, course","student.student_id, registration.student_id, registration.course_id, course.course_id, course.name, student.type","course, prof, RA, registration, student"
university,What is the country ID of the University of Tokyo?,SELECT country_id FROM university WHERE university_name = 'University of Tokyo',"CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

","CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

CREATE TABLE `ranking_system` (
  id INTEGER,
  system_name TEXT
);
Sample rows from `ranking_system`:
1, Times Higher Education World University Ranking
2, Shanghai Ranking
3, Center for World University Rankings

CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

",university,"country_id, university_name","country, ranking_system, ranking_criteria, university, university_ranking_year, university_year"
retail_complains,How many clients who live in New York City submitted their complaints via fax?,SELECT COUNT(t1.client_id) FROM client as t1 inner JOIN events as t2 ON t1.client_id = t2.client_id WHERE t1.city = 'New York City' AND t2.`submitted via` = 'Fax',"CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

","CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

","client, events","client.client_id, events.client_id, client.city, events.submitted via","state, callcenterlogs, client, district, events, reviews"
retail_world,"List the products whose supplier is Pavlova, Ltd. Please include the product ID and re-order level.","SELECT t1.productname, t1.productid, t1.reorderlevel FROM products as t1 inner JOIN suppliers as t2 ON t1.supplierid = t2.supplierid WHERE t2.companyname = 'Pavlova, Ltd.'","CREATE TABLE `products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

","products, suppliers","products.productname, products.productid, products.reorderlevel, products.supplierid, suppliers.supplierid, suppliers.companyname","sqlite_sequence, Categories, Customers, Employees, Shippers, Suppliers, Products, Orders, OrderDetails"
student_loan,How many disabled students have payment due?,SELECT COUNT(t1.name) FROM no_payment_due as t1 inner JOIN disabled as t2 ON t1.name = t2.name WHERE t1.bool = 'pos',"CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

","no_payment_due, disabled","no_payment_due.name, disabled.name, no_payment_due.bool","bool, person, disabled, enlist, filed_for_bankrupcy, longest_absense_from_school, male, no_payment_due, unemployed, enrolled"
app_store,List the top 5 shopping apps with the most reviews.,SELECT DISTINCT app FROM playstore WHERE genres = 'Shopping' GROUP BY app ORDER BY COUNT(app) DESC LIMIT 5,"CREATE TABLE `playstore` (
  App TEXT,
  Category TEXT,
  Rating REAL,
  Reviews INTEGER,
  Size TEXT,
  Installs TEXT,
  Type TEXT,
  Price TEXT,
  Content Rating TEXT,
  Genres TEXT
);
Sample rows from `playstore`:
Photo Editor & Candy Camera & Grid & ScrapBook, ART_AND_DESIGN, 4.1, 159, 19M, 10,000+, Free, 0, Everyone, Art & Design
Coloring book moana, ART_AND_DESIGN, 3.9, 967, 14M, 500,000+, Free, 0, Everyone, Art & Design;Pretend Play
U Launcher Lite – FREE Live Cool Themes, Hide Apps, ART_AND_DESIGN, 4.7, 87510, 8.7M, 5,000,000+, Free, 0, Everyone, Art & Design

","CREATE TABLE `playstore` (
  App TEXT,
  Category TEXT,
  Rating REAL,
  Reviews INTEGER,
  Size TEXT,
  Installs TEXT,
  Type TEXT,
  Price TEXT,
  Content Rating TEXT,
  Genres TEXT
);
Sample rows from `playstore`:
Photo Editor & Candy Camera & Grid & ScrapBook, ART_AND_DESIGN, 4.1, 159, 19M, 10,000+, Free, 0, Everyone, Art & Design
Coloring book moana, ART_AND_DESIGN, 3.9, 967, 14M, 500,000+, Free, 0, Everyone, Art & Design;Pretend Play
U Launcher Lite – FREE Live Cool Themes, Hide Apps, ART_AND_DESIGN, 4.7, 87510, 8.7M, 5,000,000+, Free, 0, Everyone, Art & Design

CREATE TABLE `user_reviews` (
  App TEXT REFERENCES playstore(App),
  Translated_Review TEXT,
  Sentiment TEXT,
  Sentiment_Polarity TEXT,
  Sentiment_Subjectivity TEXT
);
Sample rows from `user_reviews`:
10 Best Foods for You, I like eat delicious food. That's I'm cooking food myself, case ""10 Best Foods"" helps lot, also ""Best Before (Shelf Life)"", Positive, 1.0, 0.5333333333333333
10 Best Foods for You, This help eating healthy exercise regular basis, Positive, 0.25, 0.28846153846153844
10 Best Foods for You, nan, nan, nan, nan

",playstore,"app, genres","playstore, user_reviews"
shipping,Identify the total weight of shipments transported in 2016 by the newest Peterbilt.,"SELECT SUM(t2.weight) FROM truck as t1 inner JOIN shipment as t2 ON t1.truck_id = t2.truck_id WHERE t1.make = 'Peterbilt' AND strftime('%Y', t2.ship_date) = '2016' ORDER BY t1.model_year DESC LIMIT 1","CREATE TABLE `truck` (
  truck_id INTEGER,
  make TEXT,
  model_year INTEGER
);
Sample rows from `truck`:
1, Peterbilt, 2005
2, Mack, 2006
3, Peterbilt, 2007

CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

","CREATE TABLE `city` (
  city_id INTEGER,
  city_name TEXT,
  state TEXT,
  population INTEGER,
  area REAL
);
Sample rows from `city`:
100, Union City, New Jersey, 67088, 1.3
101, Huntington Park, California, 61348, 3.0
102, Passaic, New Jersey, 67861, 3.1

CREATE TABLE `customer` (
  cust_id INTEGER,
  cust_name TEXT,
  annual_revenue INTEGER,
  cust_type TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip REAL,
  phone TEXT
);
Sample rows from `customer`:
193, Advanced Fabricators, 39588651, manufacturer, 5141 Summit Boulevard, West Palm Beach, FL, 33415.0, (561) 683-3535
304, Pard's Trailer Sales, 17158109, wholesaler, 5910 South 300 West, Salt Lake City, UT, 84107.0, (801) 262-4864
314, Saar Enterprises, Inc., 47403613, retailer, 11687 192nd Street, Council Bluffs, IA, 51503.0, (712) 366-4929

CREATE TABLE `driver` (
  driver_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip_code INTEGER,
  phone TEXT
);
Sample rows from `driver`:
20, Sue, Newell, 268 Richmond Ave, Memphis, TN, 38106, (901) 774-6569
21, Andrea, Simons, 3574 Oak Limb Cv, Memphis, TN, 38135, (901) 384-0984
22, Roger, McHaney, 1839 S Orleans St, Memphis, TN, 38106, (901) 948-1043

CREATE TABLE `truck` (
  truck_id INTEGER,
  make TEXT,
  model_year INTEGER
);
Sample rows from `truck`:
1, Peterbilt, 2005
2, Mack, 2006
3, Peterbilt, 2007

CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

","truck, shipment","shipment.weight, truck.truck_id, shipment.truck_id, truck.make, shipment.ship_date, truck.model_year","city, customer, driver, truck, shipment"
sales_in_weather,What are the top 3 stations that have sold the highest quantities for an item in a single day?,SELECT t2.station_nbr FROM sales_in_weather as t1 inner JOIN relation as t2 ON t1.store_nbr = t2.store_nbr ORDER BY t1.units DESC LIMIT 3,"CREATE TABLE `sales_in_weather` (
  date DATE PRIMARY KEY,
  store_nbr INTEGER PRIMARY KEY,
  item_nbr INTEGER PRIMARY KEY,
  units INTEGER
);
Sample rows from `sales_in_weather`:
2012-01-01, 1, 1, 0
2012-01-01, 1, 2, 0
2012-01-01, 1, 3, 0

CREATE TABLE `relation` (
  store_nbr INTEGER REFERENCES sales_in_weather(store_nbr),
  station_nbr INTEGER REFERENCES weather(station_nbr)
);
Sample rows from `relation`:
1, 1
2, 14
3, 7

","CREATE TABLE `sales_in_weather` (
  date DATE PRIMARY KEY,
  store_nbr INTEGER PRIMARY KEY,
  item_nbr INTEGER PRIMARY KEY,
  units INTEGER
);
Sample rows from `sales_in_weather`:
2012-01-01, 1, 1, 0
2012-01-01, 1, 2, 0
2012-01-01, 1, 3, 0

CREATE TABLE `weather` (
  station_nbr INTEGER PRIMARY KEY,
  date DATE PRIMARY KEY,
  tmax INTEGER,
  tmin INTEGER,
  tavg INTEGER,
  depart INTEGER,
  dewpoint INTEGER,
  wetbulb INTEGER,
  heat INTEGER,
  cool INTEGER,
  sunrise TEXT,
  sunset TEXT,
  codesum TEXT,
  snowfall REAL,
  preciptotal REAL,
  stnpressure REAL,
  sealevel REAL,
  resultspeed REAL,
  resultdir INTEGER,
  avgspeed REAL
);
Sample rows from `weather`:
1, 2012-01-01, 52, 31, 42, None, 36, 40, 23, 0, None, None, RA FZFG BR, None, 0.05, 29.78, 29.92, 3.6, 20, 4.6
1, 2012-01-02, 50, 31, 41, None, 26, 35, 24, 0, None, None,  , None, 0.01, 29.44, 29.62, 9.8, 24, 10.3
1, 2012-01-03, 32, 11, 22, None, 4, 18, 43, 0, None, None,  , None, 0.0, 29.67, 29.87, 10.8, 31, 11.6

CREATE TABLE `relation` (
  store_nbr INTEGER REFERENCES sales_in_weather(store_nbr),
  station_nbr INTEGER REFERENCES weather(station_nbr)
);
Sample rows from `relation`:
1, 1
2, 14
3, 7

","sales_in_weather, relation","relation.station_nbr, sales_in_weather.store_nbr, relation.store_nbr, sales_in_weather.units","sales_in_weather, weather, relation"
bike_share_1,Name the station and city with the most borrowed bike.,"SELECT t2.start_station_name, t1.city FROM station as t1 inner JOIN trip as t2 ON t2.start_station_name = t1.name GROUP BY t2.start_station_name ORDER BY COUNT(t2.start_station_name) DESC LIMIT 1","CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat REAL,
  long REAL,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);
Sample rows from `station`:
2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013
3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013
4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013

CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);
Sample rows from `trip`:
4069, 174, 8/29/2013 9:08, 2nd at South Park, 64, 8/29/2013 9:11, 2nd at South Park, 64, 288, Subscriber, 94114
4073, 1067, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:42, San Francisco Caltrain 2 (330 Townsend), 69, 321, Subscriber, 94703
4074, 1131, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:43, San Francisco Caltrain 2 (330 Townsend), 69, 317, Subscriber, 94115

","CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat REAL,
  long REAL,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);
Sample rows from `station`:
2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013
3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013
4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013

CREATE TABLE `status` (
  station_id INTEGER,
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);
Sample rows from `status`:
2, 2, 25, 2013/08/29 12:06:01
2, 2, 25, 2013/08/29 12:07:01
2, 2, 25, 2013/08/29 12:08:01

CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);
Sample rows from `trip`:
4069, 174, 8/29/2013 9:08, 2nd at South Park, 64, 8/29/2013 9:11, 2nd at South Park, 64, 288, Subscriber, 94114
4073, 1067, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:42, San Francisco Caltrain 2 (330 Townsend), 69, 321, Subscriber, 94703
4074, 1131, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:43, San Francisco Caltrain 2 (330 Townsend), 69, 317, Subscriber, 94115

CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches REAL,
  mean_sea_level_pressure_inches REAL,
  min_sea_level_pressure_inches REAL,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches TEXT,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code TEXT
);
Sample rows from `weather`:
8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107
8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30.0, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107
8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30.0, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107

","station, trip","trip.start_station_name, station.city, station.name","station, status, trip, weather"
food_inspection,"How many kinds of violations did ""Stacks Restaurant"" have on 2016/10/4?",SELECT COUNT(DISTINCT t1.violation_type_id) FROM violations as t1 inner JOIN businesses as t2 ON t1.business_id = t2.business_id WHERE t2.name = 'Stacks Restaurant' AND t1.`date` = '2016-10-04',"CREATE TABLE `violations` (
  business_id INTEGER REFERENCES businesses(business_id),
  date DATE,
  violation_type_id TEXT,
  risk_category TEXT,
  description TEXT
);
Sample rows from `violations`:
10, 2014-07-29, 103129, Moderate Risk, Insufficient hot water or running water
10, 2014-07-29, 103144, Low Risk, Unapproved or unmaintained equipment or utensils
10, 2014-01-14, 103119, Moderate Risk, Inadequate and inaccessible handwashing facilities

CREATE TABLE `businesses` (
  business_id INTEGER,
  name TEXT,
  address TEXT,
  city TEXT,
  postal_code TEXT,
  latitude REAL,
  longitude REAL,
  phone_number INTEGER,
  tax_code TEXT,
  business_certificate INTEGER,
  application_date DATE,
  owner_name TEXT,
  owner_address TEXT,
  owner_city TEXT,
  owner_state TEXT,
  owner_zip TEXT
);
Sample rows from `businesses`:
10, Tiramisu Kitchen, 033 Belden Pl, San Francisco, 94104, 37.7911, -122.404, None, H24, 779059, None, Tiramisu LLC, 33 Belden St, San Francisco, CA, 94104
24, OMNI S.F. Hotel - 2nd Floor Pantry, 500 California St, 2nd  Floor, San Francisco, 94104, 37.7929, -122.403, None, H24, 352312, None, OMNI San Francisco Hotel Corp, 500 California St, 2nd Floor, San Francisco, CA, 94104
31, Norman's Ice Cream and Freezes, 2801 Leavenworth St, San Francisco, 94133, 37.8072, -122.419, None, H24, 346882, None, Norman Antiforda, 2801 Leavenworth St, San Francisco, CA, 94133

","CREATE TABLE `businesses` (
  business_id INTEGER,
  name TEXT,
  address TEXT,
  city TEXT,
  postal_code TEXT,
  latitude REAL,
  longitude REAL,
  phone_number INTEGER,
  tax_code TEXT,
  business_certificate INTEGER,
  application_date DATE,
  owner_name TEXT,
  owner_address TEXT,
  owner_city TEXT,
  owner_state TEXT,
  owner_zip TEXT
);
Sample rows from `businesses`:
10, Tiramisu Kitchen, 033 Belden Pl, San Francisco, 94104, 37.7911, -122.404, None, H24, 779059, None, Tiramisu LLC, 33 Belden St, San Francisco, CA, 94104
24, OMNI S.F. Hotel - 2nd Floor Pantry, 500 California St, 2nd  Floor, San Francisco, 94104, 37.7929, -122.403, None, H24, 352312, None, OMNI San Francisco Hotel Corp, 500 California St, 2nd Floor, San Francisco, CA, 94104
31, Norman's Ice Cream and Freezes, 2801 Leavenworth St, San Francisco, 94133, 37.8072, -122.419, None, H24, 346882, None, Norman Antiforda, 2801 Leavenworth St, San Francisco, CA, 94133

CREATE TABLE `inspections` (
  business_id INTEGER REFERENCES businesses(business_id),
  score INTEGER,
  date DATE,
  type TEXT
);
Sample rows from `inspections`:
10, 92, 2014-01-14, Routine - Unscheduled
10, None, 2014-01-24, Reinspection/Followup
10, 94, 2014-07-29, Routine - Unscheduled

CREATE TABLE `violations` (
  business_id INTEGER REFERENCES businesses(business_id),
  date DATE,
  violation_type_id TEXT,
  risk_category TEXT,
  description TEXT
);
Sample rows from `violations`:
10, 2014-07-29, 103129, Moderate Risk, Insufficient hot water or running water
10, 2014-07-29, 103144, Low Risk, Unapproved or unmaintained equipment or utensils
10, 2014-01-14, 103119, Moderate Risk, Inadequate and inaccessible handwashing facilities

","violations, businesses","violations.violation_type_id, violations.business_id, businesses.business_id, businesses.name, violations.date","businesses, inspections, violations"
shipping,What is the total number of pounds being transported for S K L Enterprises Inc?,SELECT SUM(t2.weight) FROM customer as t1 inner JOIN shipment as t2 ON t1.cust_id = t2.cust_id WHERE t1.cust_name = 'S K L Enterprises Inc',"CREATE TABLE `customer` (
  cust_id INTEGER,
  cust_name TEXT,
  annual_revenue INTEGER,
  cust_type TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip REAL,
  phone TEXT
);
Sample rows from `customer`:
193, Advanced Fabricators, 39588651, manufacturer, 5141 Summit Boulevard, West Palm Beach, FL, 33415.0, (561) 683-3535
304, Pard's Trailer Sales, 17158109, wholesaler, 5910 South 300 West, Salt Lake City, UT, 84107.0, (801) 262-4864
314, Saar Enterprises, Inc., 47403613, retailer, 11687 192nd Street, Council Bluffs, IA, 51503.0, (712) 366-4929

CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

","CREATE TABLE `city` (
  city_id INTEGER,
  city_name TEXT,
  state TEXT,
  population INTEGER,
  area REAL
);
Sample rows from `city`:
100, Union City, New Jersey, 67088, 1.3
101, Huntington Park, California, 61348, 3.0
102, Passaic, New Jersey, 67861, 3.1

CREATE TABLE `customer` (
  cust_id INTEGER,
  cust_name TEXT,
  annual_revenue INTEGER,
  cust_type TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip REAL,
  phone TEXT
);
Sample rows from `customer`:
193, Advanced Fabricators, 39588651, manufacturer, 5141 Summit Boulevard, West Palm Beach, FL, 33415.0, (561) 683-3535
304, Pard's Trailer Sales, 17158109, wholesaler, 5910 South 300 West, Salt Lake City, UT, 84107.0, (801) 262-4864
314, Saar Enterprises, Inc., 47403613, retailer, 11687 192nd Street, Council Bluffs, IA, 51503.0, (712) 366-4929

CREATE TABLE `driver` (
  driver_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip_code INTEGER,
  phone TEXT
);
Sample rows from `driver`:
20, Sue, Newell, 268 Richmond Ave, Memphis, TN, 38106, (901) 774-6569
21, Andrea, Simons, 3574 Oak Limb Cv, Memphis, TN, 38135, (901) 384-0984
22, Roger, McHaney, 1839 S Orleans St, Memphis, TN, 38106, (901) 948-1043

CREATE TABLE `truck` (
  truck_id INTEGER,
  make TEXT,
  model_year INTEGER
);
Sample rows from `truck`:
1, Peterbilt, 2005
2, Mack, 2006
3, Peterbilt, 2007

CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

","customer, shipment","shipment.weight, customer.cust_id, shipment.cust_id, customer.cust_name","city, customer, driver, truck, shipment"
books,Name the title of books written by author A.J.Ayer.,SELECT t3.title FROM book_author as t1 inner JOIN author as t2 ON t1.author_id = t2.author_id inner JOIN book as t3 ON t3.book_id = t1.book_id WHERE t2.author_name = 'A.J. Ayer',"CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","book_author, author, book","book.title, book_author.author_id, author.author_id, book.book_id, book_author.book_id, author.author_name","address_status, author, book_language, country, address, customer, customer_address, order_status, publisher, book, book_author, shipping_method, cust_order, sqlite_sequence, order_history, order_line"
food_inspection_2,Provide the names and locations of the facilities that failed inspections on 29th July 2013.,"SELECT t2.dba_name, t2.longitude, t2.latitude FROM inspection as t1 inner JOIN establishment as t2 ON t1.license_no = t2.license_no WHERE t1.inspection_date = '2013-07-29' AND t1.results = 'Fail'","CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

","inspection, establishment","establishment.dba_name, establishment.longitude, establishment.latitude, inspection.license_no, establishment.license_no, inspection.inspection_date, inspection.results","employee, establishment, inspection, inspection_point, violation"
restaurant,"Give the review of the restaurant at 430, Broadway.",SELECT t1.review FROM generalinfo as t1 inner JOIN location as t2 ON t1.id_restaurant = t2.id_restaurant WHERE t2.street_name = 'Broadway' AND t2.street_num = 430,"CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

","CREATE TABLE `geographic` (
  city TEXT PRIMARY KEY,
  county TEXT,
  region TEXT
);
Sample rows from `geographic`:
alameda, alameda county, bay area
alamo, contra costa county, bay area
albany, alameda county, bay area

CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

","generalinfo, location","generalinfo.review, generalinfo.id_restaurant, location.id_restaurant, location.street_name, location.street_num","geographic, generalinfo, location"
cars,What is the average price per car produced in Japan?,SELECT AVG(t1.price) FROM price as t1 inner JOIN production as t2 ON t1.id = t2.id inner JOIN country as t3 ON t3.origin = t2.country WHERE t3.country = 'Japan',"CREATE TABLE `price` (
  ID INTEGER,
  price REAL
);
Sample rows from `price`:
1, 25561.59078
2, 24221.42273
3, 27240.84373

CREATE TABLE `production` (
  ID INTEGER PRIMARY KEY REFERENCES price(ID) REFERENCES data(ID),
  model_year INTEGER PRIMARY KEY,
  country INTEGER REFERENCES country(origin)
);
Sample rows from `production`:
1, 1970, 1
1, 1971, 1
2, 1970, 1

CREATE TABLE `country` (
  origin INTEGER,
  country TEXT
);
Sample rows from `country`:
1, USA
2, Europe
3, Japan

","CREATE TABLE `country` (
  origin INTEGER,
  country TEXT
);
Sample rows from `country`:
1, USA
2, Europe
3, Japan

CREATE TABLE `price` (
  ID INTEGER,
  price REAL
);
Sample rows from `price`:
1, 25561.59078
2, 24221.42273
3, 27240.84373

CREATE TABLE `data` (
  ID INTEGER REFERENCES price(ID),
  mpg REAL,
  cylinders INTEGER,
  displacement REAL,
  horsepower INTEGER,
  weight INTEGER,
  acceleration REAL,
  model INTEGER,
  car_name TEXT
);
Sample rows from `data`:
1, 18.0, 8, 307.0, 130, 3504, 12.0, 70, chevrolet chevelle malibu
2, 15.0, 8, 350.0, 165, 3693, 11.5, 70, buick skylark 320
3, 18.0, 8, 318.0, 150, 3436, 11.0, 70, plymouth satellite

CREATE TABLE `production` (
  ID INTEGER PRIMARY KEY REFERENCES price(ID) REFERENCES data(ID),
  model_year INTEGER PRIMARY KEY,
  country INTEGER REFERENCES country(origin)
);
Sample rows from `production`:
1, 1970, 1
1, 1971, 1
2, 1970, 1

","price, production, country","price.price, price.id, production.id, country.origin, production.country, country.country","country, price, data, production"
music_tracker,Please list the releases that have been downloaded for more than 20000 times.,SELECT groupname FROM torrents WHERE totalsnatched > 20000,"CREATE TABLE `torrents` (
  groupName TEXT,
  totalSnatched INTEGER,
  artist TEXT,
  groupYear INTEGER,
  releaseType TEXT,
  groupId INTEGER,
  id INTEGER
);
Sample rows from `torrents`:
superappin&#39;, 239, grandmaster flash & the furious five, 1979, single, 720949, 0
spiderap / a corona jam, 156, ron hunt & ronnie g & the sm crew, 1979, single, 728752, 1
rapper&#39;s delight, 480, sugarhill gang, 1979, single, 18513, 2

","CREATE TABLE `torrents` (
  groupName TEXT,
  totalSnatched INTEGER,
  artist TEXT,
  groupYear INTEGER,
  releaseType TEXT,
  groupId INTEGER,
  id INTEGER
);
Sample rows from `torrents`:
superappin&#39;, 239, grandmaster flash & the furious five, 1979, single, 720949, 0
spiderap / a corona jam, 156, ron hunt & ronnie g & the sm crew, 1979, single, 728752, 1
rapper&#39;s delight, 480, sugarhill gang, 1979, single, 18513, 2

CREATE TABLE `tags` (
  index INTEGER PRIMARY KEY,
  id INTEGER REFERENCES torrents(None),
  tag TEXT
);
Sample rows from `tags`:
0, 0, 1970s
1, 0, funk
2, 0, disco

",torrents,"groupname, totalsnatched","torrents, tags"
law_episode,"Who was credited as ""technical advisor"" in the episode titled ""Cherished""?",SELECT t3.name FROM episode as t1 inner JOIN credit as t2 ON t1.episode_id = t2.episode_id inner JOIN person as t3 ON t3.person_id = t2.person_id WHERE t1.title = 'Cherished' AND t2.credited = 'true' AND t2.role = 'technical advisor',"CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `credit` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  person_id TEXT PRIMARY KEY REFERENCES Person(person_id),
  category TEXT,
  role TEXT,
  credited TEXT
);
Sample rows from `credit`:
tt0629204, nm0226352, Additional Crew, technical advisor, true
tt0629204, nm0506974, Additional Crew, production accountant, true
tt0629204, nm4103116, Additional Crew, production accountant, true

CREATE TABLE `person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
tt0629239, nun
tt0629239, priest
tt0629420, police officer

CREATE TABLE `Person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  series TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  person_id TEXT REFERENCES Person(person_id),
  role TEXT,
  result TEXT
);
Sample rows from `Award`:
258, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0937725, None, Winner
259, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0792309, None, Winner
260, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0049569, None, Winner

CREATE TABLE `Credit` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  person_id TEXT PRIMARY KEY REFERENCES Person(person_id),
  category TEXT,
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
tt0629204, nm0226352, Additional Crew, technical advisor, true
tt0629204, nm0506974, Additional Crew, production accountant, true
tt0629204, nm4103116, Additional Crew, production accountant, true

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
tt0629204, 10, 36, 17.7
tt0629204, 9, 39, 19.2
tt0629204, 8, 64, 31.5

","episode, credit, person","person.name, episode.episode_id, credit.episode_id, person.person_id, credit.person_id, episode.title, credit.credited, credit.role","Episode, Keyword, Person, Award, Credit, Vote"
beer_factory,Which brewery does the most purchased root beer in 2016 belong to?,SELECT t2.breweryname FROM rootbeer as t1 inner JOIN rootbeerbrand as t2 ON t1.brandid = t2.brandid WHERE t1.purchasedate BETWEEN '2016-01-01' AND '2016-12-31' GROUP BY t2.brandid ORDER BY COUNT(t1.brandid) DESC LIMIT 1,"CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

","CREATE TABLE `customers` (
  CustomerID INTEGER,
  First TEXT,
  Last TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER,
  Email TEXT,
  PhoneNumber TEXT,
  FirstPurchaseDate DATE,
  SubscribedToEmailList TEXT,
  Gender TEXT
);
Sample rows from `customers`:
101811, Kenneth, Walton, 6715 Commonwealth Dr, Sacramento, CA, 94256, walton.k76@fastmail.com, (916) 918-1561, 2013-05-30, FALSE, M
103508, Madeleine, Jones, 3603 Leola Way, Sacramento, CA, 94258, j_madeleine@gmail.com, (916) 186-9423, 2013-02-06, FALSE, F
104939, Damen, Wheeler, 6740 Branwood Way, Orangevale, CA, 95662, dwheeler@outlook.com, (916) 164-1156, 2013-04-11, FALSE, M

CREATE TABLE `geolocation` (
  LocationID INTEGER REFERENCES location(LocationID),
  Latitude REAL,
  Longitude REAL
);
Sample rows from `geolocation`:
0, 0.0, 0.0
1, 38.566129, -121.426432
2, 38.559615, -121.42243

CREATE TABLE `location` (
  LocationID INTEGER REFERENCES geolocation(LocationID),
  LocationName TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER
);
Sample rows from `location`:
0, LOST, None, None, None, None
1, Sac State American River Courtyard, 6000 J St, Sacramento, CA, 95819
2, Sac State Union, 6000 J St, Sacramento, CA, 95819

CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

CREATE TABLE `rootbeerreview` (
  CustomerID INTEGER PRIMARY KEY REFERENCES customers(CustomerID),
  BrandID INTEGER PRIMARY KEY REFERENCES rootbeerbrand(BrandID),
  StarRating INTEGER,
  ReviewDate DATE,
  Review TEXT
);
Sample rows from `rootbeerreview`:
101811, 10012, 5, 2013-07-15, None
101811, 10014, 1, 2013-07-08, None
101811, 10015, 3, 2013-07-25, None

CREATE TABLE `transaction` (
  TransactionID INTEGER,
  CreditCardNumber INTEGER,
  CustomerID INTEGER REFERENCES customers(CustomerID),
  TransactionDate DATE,
  CreditCardType TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  RootBeerID INTEGER REFERENCES rootbeer(RootBeerID),
  PurchasePrice REAL
);
Sample rows from `transaction`:
100000, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105661, 3.0
100001, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105798, 3.0
100002, 6011583832864739, 864896, 2014-07-07, Discover, 2, 102514, 3.0

","rootbeer, rootbeerbrand","rootbeerbrand.breweryname, rootbeer.brandid, rootbeerbrand.brandid, rootbeer.purchasedate","customers, geolocation, location, rootbeerbrand, rootbeer, rootbeerreview, transaction"
language_corpus,In which Wikipedia page does the word ID No. 174 have the most appearances? Give the title.,SELECT title FROM pages WHERE pid = ( SELECT pid FROM pages_words WHERE wid = 174 ORDER BY occurrences DESC LIMIT 1 ),"CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

","CREATE TABLE `langs` (
  lid INTEGER,
  lang TEXT PRIMARY KEY,
  locale TEXT PRIMARY KEY,
  pages INTEGER,
  words INTEGER
);
Sample rows from `langs`:
1, ca, ca_ES, 1129144, 2764996

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
langs, 1
pages, 1129144
words, 2764996

CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `langs_words` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `langs_words`:
1, 1, 242
1, 2, 16841
1, 3, 48700

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

","pages, pages_words","title, pid, wid, occurrences","langs, sqlite_sequence, pages, words, langs_words, pages_words, biwords"
books,What is the average number of pages of David Coward's books?,SELECT AVG(t1.num_pages) FROM book as t1 inner JOIN book_author as t2 ON t1.book_id = t2.book_id inner JOIN author as t3 ON t3.author_id = t2.author_id WHERE t3.author_name = 'David Coward',"CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","book, book_author, author","book.num_pages, book.book_id, book_author.book_id, author.author_id, book_author.author_id, author.author_name","address_status, author, book_language, country, address, customer, customer_address, order_status, publisher, book, book_author, shipping_method, cust_order, sqlite_sequence, order_history, order_line"
food_inspection_2,Which facilities were inspected by Sarah Lindsey on 20th November 2012?,SELECT DISTINCT t1.dba_name FROM establishment as t1 inner JOIN inspection as t2 ON t1.license_no = t2.license_no inner JOIN employee as t3 ON t2.employee_id = t3.employee_id WHERE t2.inspection_date = '2012-11-20' AND t3.first_name = 'Sarah' AND t3.last_name = 'Lindsey',"CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

","establishment, inspection, employee","establishment.dba_name, establishment.license_no, inspection.license_no, inspection.employee_id, employee.employee_id, inspection.inspection_date, employee.first_name, employee.last_name","employee, establishment, inspection, inspection_point, violation"
sales,How many customers are named Madison?,SELECT COUNT(customerid) FROM customers WHERE firstname = 'Madison',"CREATE TABLE `customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Employees`:
1, Abraham, e, Bennet
2, Reginald, l, Blotchet-Halls
3, Cheryl, a, Carson

CREATE TABLE `Products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

CREATE TABLE `Sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `Sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

",customers,"customerid, firstname","Customers, Employees, Products, Sales"
food_inspection_2,List down the phone numbers of employees who did Canvass inspection.,SELECT DISTINCT t1.phone FROM employee as t1 inner JOIN inspection as t2 ON t1.employee_id = t2.employee_id WHERE t2.inspection_type = 'Canvass',"CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

","employee, inspection","employee.phone, employee.employee_id, inspection.employee_id, inspection.inspection_type","employee, establishment, inspection, inspection_point, violation"
movielens,What is the total amount male and female actors who were casted in movie ID 1684910 and what is the proportion between the highest quality actors against the worst quality of actors? Indicate your answer in percentage. List the the director as well as the genre.,"SELECT SUM(iif(a_gender = 'M', 1, 0)) , SUM(iif(a_gender = 'F', 1, 0)) , cast(SUM(iif(a_quality = 5, 1, 0)) as real) * 100 / COUNT(*) , cast(SUM(iif(a_quality = 0, 1, 0)) as real) * 100 / COUNT(*), ( SELECT directorid FROM movies2directors WHERE movieid = 1684910 ) , ( SELECT genre FROM movies2directors WHERE movieid = 1684910 ) FROM actors WHERE actorid IN ( SELECT actorid FROM movies2actors WHERE movieid = 1684910 )","CREATE TABLE `movies2directors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  directorid INTEGER PRIMARY KEY REFERENCES directors(None),
  genre TEXT
);
Sample rows from `movies2directors`:
1672111, 54934, Action
1672946, 188940, Action
1679461, 179783, Action

CREATE TABLE `actors` (
  actorid INTEGER,
  a_gender TEXT,
  a_quality INTEGER
);
Sample rows from `actors`:
4, M, 4
16, M, 0
28, M, 4

CREATE TABLE `movies2actors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  actorid INTEGER PRIMARY KEY REFERENCES actors(None),
  cast_num INTEGER
);
Sample rows from `movies2actors`:
1672580, 981535, 0
1672946, 1094968, 0
1673647, 149985, 0

","CREATE TABLE `users` (
  userid INTEGER,
  age TEXT,
  u_gender TEXT,
  occupation TEXT
);
Sample rows from `users`:
1, 1, F, 2
2, 56, M, 3
3, 25, M, 2

CREATE TABLE `directors` (
  directorid INTEGER,
  d_quality INTEGER PRIMARY KEY,
  avg_revenue INTEGER PRIMARY KEY
);
Sample rows from `directors`:
67, 4, 1
92, 2, 3
284, 4, 0

CREATE TABLE `actors` (
  actorid INTEGER,
  a_gender TEXT,
  a_quality INTEGER
);
Sample rows from `actors`:
4, M, 4
16, M, 0
28, M, 4

CREATE TABLE `movies` (
  movieid INTEGER,
  year INTEGER,
  isEnglish TEXT,
  country TEXT,
  runningtime INTEGER
);
Sample rows from `movies`:
1672052, 3, T, other, 2
1672111, 4, T, other, 2
1672580, 4, T, USA, 3

CREATE TABLE `movies2actors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  actorid INTEGER PRIMARY KEY REFERENCES actors(None),
  cast_num INTEGER
);
Sample rows from `movies2actors`:
1672580, 981535, 0
1672946, 1094968, 0
1673647, 149985, 0

CREATE TABLE `movies2directors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  directorid INTEGER PRIMARY KEY REFERENCES directors(None),
  genre TEXT
);
Sample rows from `movies2directors`:
1672111, 54934, Action
1672946, 188940, Action
1679461, 179783, Action

CREATE TABLE `u2base` (
  userid INTEGER PRIMARY KEY REFERENCES users(None),
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  rating TEXT
);
Sample rows from `u2base`:
2, 1964242, 1
2, 2219779, 1
3, 1856939, 1

","movies2directors, actors, movies2actors","a_gender, a_quality, directorid, movieid, genre, actorid","users, directors, actors, movies, movies2actors, movies2directors, u2base"
