db_id,question,query,filtered_database_schema,database_schema,correct_tables,correct_columns
retails,How many orders shipped via ship have a medium priority?,SELECT COUNT(t1.o_orderkey) FROM orders as t1 inner JOIN lineitem as t2 ON t1.o_orderkey = t2.l_orderkey WHERE t2.l_shipmode = 'SHIP' AND t1.o_orderpriority = '3-MEDIUM',"CREATE TABLE `orders` (
  o_orderdate DATE,
  o_orderkey INTEGER,
  o_custkey INTEGER REFERENCES customer(c_custkey),
  o_orderpriority TEXT,
  o_shippriority INTEGER,
  o_clerk TEXT,
  o_orderstatus TEXT,
  o_totalprice REAL,
  o_comment TEXT
);
Sample rows from `orders`:
1995-04-19, 1, 73100, 4-NOT SPECIFIED, 0, Clerk#000000916, P, 203198.56, final packages sleep blithely packa
1996-11-04, 2, 92861, 1-URGENT, 0, Clerk#000000373, O, 317719.99, final excuses about the ironic even deposits detect express request
1992-02-15, 3, 44875, 1-URGENT, 0, Clerk#000000485, F, 146674.98, final final deposits cajole foxes. blithely pendin

CREATE TABLE `lineitem` (
  l_shipdate DATE,
  l_orderkey INTEGER PRIMARY KEY REFERENCES orders(o_orderkey),
  l_discount REAL,
  l_extendedprice REAL,
  l_suppkey INTEGER REFERENCES partsupp(ps_suppkey),
  l_quantity INTEGER,
  l_returnflag TEXT,
  l_partkey INTEGER REFERENCES partsupp(ps_partkey),
  l_linestatus TEXT,
  l_tax REAL,
  l_commitdate DATE,
  l_receiptdate DATE,
  l_shipmode TEXT,
  l_linenumber INTEGER PRIMARY KEY,
  l_shipinstruct TEXT,
  l_comment TEXT
);
Sample rows from `lineitem`:
1995-08-16, 1, 0.1, 58303.08, 6296, 33, N, 98768, O, 0.06, 1995-07-12, 1995-09-14, RAIL, 1, NONE, carefully bo
1995-08-13, 1, 0.09, 16947.7, 8776, 10, N, 23771, O, 0.08, 1995-07-09, 1995-08-27, TRUCK, 2, TAKE BACK RETURN, blithely regular pac
1995-06-17, 1, 0.1, 63642.9, 3859, 34, N, 113858, O, 0.08, 1995-05-22, 1995-06-30, SHIP, 3, COLLECT COD, ironic accounts sleep furiously silen

","CREATE TABLE `customer` (
  c_custkey INTEGER,
  c_mktsegment TEXT,
  c_nationkey INTEGER REFERENCES nation(n_nationkey),
  c_name TEXT,
  c_address TEXT,
  c_phone TEXT,
  c_acctbal REAL,
  c_comment TEXT
);
Sample rows from `customer`:
1, BUILDING, 8, Customer#000000001, KwX3hMHjZ6, 937-241-3198, 3560.03, ironic excuses detect slyly silent requests. requests according to the exc
2, MACHINERY, 16, Customer#000000002, ioUn,eqTTXOdo, 906-965-7556, 7550.21, final express accounts mold slyly. ironic accounts cajole! quickly express a
3, FURNITURE, 11, Customer#000000003, YddJqmIdouNT9Yj, 328-750-7603, -926.96, carefully express foxes sleep carefully. pending platelets sleep thinly for t

CREATE TABLE `lineitem` (
  l_shipdate DATE,
  l_orderkey INTEGER PRIMARY KEY REFERENCES orders(o_orderkey),
  l_discount REAL,
  l_extendedprice REAL,
  l_suppkey INTEGER REFERENCES partsupp(ps_suppkey),
  l_quantity INTEGER,
  l_returnflag TEXT,
  l_partkey INTEGER REFERENCES partsupp(ps_partkey),
  l_linestatus TEXT,
  l_tax REAL,
  l_commitdate DATE,
  l_receiptdate DATE,
  l_shipmode TEXT,
  l_linenumber INTEGER PRIMARY KEY,
  l_shipinstruct TEXT,
  l_comment TEXT
);
Sample rows from `lineitem`:
1995-08-16, 1, 0.1, 58303.08, 6296, 33, N, 98768, O, 0.06, 1995-07-12, 1995-09-14, RAIL, 1, NONE, carefully bo
1995-08-13, 1, 0.09, 16947.7, 8776, 10, N, 23771, O, 0.08, 1995-07-09, 1995-08-27, TRUCK, 2, TAKE BACK RETURN, blithely regular pac
1995-06-17, 1, 0.1, 63642.9, 3859, 34, N, 113858, O, 0.08, 1995-05-22, 1995-06-30, SHIP, 3, COLLECT COD, ironic accounts sleep furiously silen

CREATE TABLE `nation` (
  n_nationkey INTEGER,
  n_name TEXT,
  n_regionkey INTEGER REFERENCES region(r_regionkey),
  n_comment TEXT
);
Sample rows from `nation`:
0, ALGERIA, 0, slyly express pinto beans cajole idly. deposits use blithely unusual packages? fluffily final accounts x-r
1, ARGENTINA, 1, instructions detect blithely stealthily pending packages
2, BRAZIL, 1, blithely unusual deposits are quickly--

CREATE TABLE `orders` (
  o_orderdate DATE,
  o_orderkey INTEGER,
  o_custkey INTEGER REFERENCES customer(c_custkey),
  o_orderpriority TEXT,
  o_shippriority INTEGER,
  o_clerk TEXT,
  o_orderstatus TEXT,
  o_totalprice REAL,
  o_comment TEXT
);
Sample rows from `orders`:
1995-04-19, 1, 73100, 4-NOT SPECIFIED, 0, Clerk#000000916, P, 203198.56, final packages sleep blithely packa
1996-11-04, 2, 92861, 1-URGENT, 0, Clerk#000000373, O, 317719.99, final excuses about the ironic even deposits detect express request
1992-02-15, 3, 44875, 1-URGENT, 0, Clerk#000000485, F, 146674.98, final final deposits cajole foxes. blithely pendin

CREATE TABLE `part` (
  p_partkey INTEGER,
  p_type TEXT,
  p_size INTEGER,
  p_brand TEXT,
  p_name TEXT,
  p_container TEXT,
  p_mfgr TEXT,
  p_retailprice REAL,
  p_comment TEXT
);
Sample rows from `part`:
1, LARGE PLATED TIN, 31, Brand#43, burlywood plum powder puff mint, LG BAG, Manufacturer#4, 901.0, blithely busy reque
2, LARGE POLISHED STEEL, 4, Brand#55, hot spring dodger dim light, LG CASE, Manufacturer#5, 902.0, even ironic requests s
3, STANDARD PLATED COPPER, 30, Brand#53, dark slate grey steel misty, WRAP CASE, Manufacturer#5, 903.0, slyly ironic fox

CREATE TABLE `partsupp` (
  ps_partkey INTEGER PRIMARY KEY REFERENCES part(p_partkey),
  ps_suppkey INTEGER PRIMARY KEY REFERENCES supplier(s_suppkey),
  ps_supplycost REAL,
  ps_availqty INTEGER,
  ps_comment TEXT
);
Sample rows from `partsupp`:
1, 2, 400.75, 1111, carefully ironic deposits use against the carefully unusual accounts. slyly silent platelets nag quickly even
1, 2502, 702.61, 3999, slyly regular accounts serve carefully. asymptotes after the slyly even instructions cajole quickly ironic requests. pending dugouts about the slyly 
1, 5002, 383.95, 7411, carefully special ideas are slyly. slyly ironic epitaphs use pending pending foxes. furiously express pinto beans lose quiet even requests: special final packages ar

CREATE TABLE `region` (
  r_regionkey INTEGER,
  r_name TEXT,
  r_comment TEXT
);
Sample rows from `region`:
0, AFRICA, asymptotes sublate after the r
1, AMERICA, requests affix quickly final tithes. blithely even packages above the a
2, ASIA, accounts cajole carefully according to the carefully exp

CREATE TABLE `supplier` (
  s_suppkey INTEGER,
  s_nationkey INTEGER REFERENCES nation(n_nationkey),
  s_comment TEXT,
  s_name TEXT,
  s_address TEXT,
  s_phone TEXT,
  s_acctbal REAL
);
Sample rows from `supplier`:
1, 13, blithely final pearls are. instructions thra, Supplier#000000001, ,wWs4pnykQOFl8mgVCU8EZMXqZs1w, 800-807-9579, 3082.86
2, 5, requests integrate fluffily. fluffily ironic deposits wake. bold, Supplier#000000002, WkXT6MSAJrp4qWq3W9N, 348-617-6055, 3009.73
3, 22, carefully express ideas shall have to unwin, Supplier#000000003, KjUqa42JEHaRDVQTHV6Yq2h, 471-986-9888, 9159.78

","orders, lineitem","orders.o_orderkey, lineitem.l_orderkey, lineitem.l_shipmode, orders.o_orderpriority"
music_platform_2,"What is the content of the earliest review for the ""Stuff You Should Know"" podcast?",SELECT t2.content FROM podcasts as t1 inner JOIN reviews as t2 ON t2.podcast_id = t1.podcast_id WHERE t1.title = 'Stuff You Should Know' ORDER BY t2.created_at asC LIMIT 1,"CREATE TABLE `podcasts` (
  podcast_id TEXT PRIMARY KEY,
  itunes_id INTEGER,
  slug TEXT,
  itunes_url TEXT,
  title TEXT
);
Sample rows from `podcasts`:
a00018b54eb342567c94dacfb2a3e504, 1313466221, scaling-global, https://podcasts.apple.com/us/podcast/scaling-global/id1313466221, Scaling Global
a00043d34e734b09246d17dc5d56f63c, 158973461, cornerstone-baptist-church-of-orlando, https://podcasts.apple.com/us/podcast/cornerstone-baptist-church-of-orlando/id158973461, Cornerstone Baptist Church of Orlando
a0004b1ef445af9dc84dad1e7821b1e3, 139076942, mystery-dancing-in-the-dark, https://podcasts.apple.com/us/podcast/mystery-dancing-in-the-dark/id139076942, Mystery: Dancing in the Dark

CREATE TABLE `reviews` (
  podcast_id TEXT REFERENCES podcasts(None),
  title TEXT,
  content TEXT,
  rating INTEGER,
  author_id TEXT,
  created_at TEXT
);
Sample rows from `reviews`:
c61aa81c9b929a66f0c1db6cbe5d8548, really interesting!, Thanks for providing these insights.  Really enjoy the variety and depth -- please keep them coming!, 5, F7E5A318989779D, 2018-04-24T12:05:16-07:00
c61aa81c9b929a66f0c1db6cbe5d8548, Must listen for anyone interested in the arts!!!, Super excited to see this podcast grow. So many fun topics to talk about...Shari is really engaging. Definitely subscribing and would recommend to anyone interested in the arts!!, 5, F6BF5472689BD12, 2018-05-09T18:14:32-07:00
ad4f2bf69c72b8db75978423c25f379e, nauseatingly left, I'm a liberal myself, but its pretty obvious and annoying that they're trying to push their beliefs on the listeners. Get a more politically diverse production staff, we like to see issues from multiple point of views not just yours., 1, 1AB95B8E6E1309E, 2019-06-11T14:53:39-07:00

","CREATE TABLE `runs` (
  run_at TEXT,
  max_rowid INTEGER,
  reviews_added INTEGER
);
Sample rows from `runs`:
2021-05-10 02:53:00, 3266481, 1215223
2021-06-06 21:34:36, 3300773, 13139
2021-07-02 18:04:55, 3329699, 11561

CREATE TABLE `podcasts` (
  podcast_id TEXT PRIMARY KEY,
  itunes_id INTEGER,
  slug TEXT,
  itunes_url TEXT,
  title TEXT
);
Sample rows from `podcasts`:
a00018b54eb342567c94dacfb2a3e504, 1313466221, scaling-global, https://podcasts.apple.com/us/podcast/scaling-global/id1313466221, Scaling Global
a00043d34e734b09246d17dc5d56f63c, 158973461, cornerstone-baptist-church-of-orlando, https://podcasts.apple.com/us/podcast/cornerstone-baptist-church-of-orlando/id158973461, Cornerstone Baptist Church of Orlando
a0004b1ef445af9dc84dad1e7821b1e3, 139076942, mystery-dancing-in-the-dark, https://podcasts.apple.com/us/podcast/mystery-dancing-in-the-dark/id139076942, Mystery: Dancing in the Dark

CREATE TABLE `reviews` (
  podcast_id TEXT REFERENCES podcasts(None),
  title TEXT,
  content TEXT,
  rating INTEGER,
  author_id TEXT,
  created_at TEXT
);
Sample rows from `reviews`:
c61aa81c9b929a66f0c1db6cbe5d8548, really interesting!, Thanks for providing these insights.  Really enjoy the variety and depth -- please keep them coming!, 5, F7E5A318989779D, 2018-04-24T12:05:16-07:00
c61aa81c9b929a66f0c1db6cbe5d8548, Must listen for anyone interested in the arts!!!, Super excited to see this podcast grow. So many fun topics to talk about...Shari is really engaging. Definitely subscribing and would recommend to anyone interested in the arts!!, 5, F6BF5472689BD12, 2018-05-09T18:14:32-07:00
ad4f2bf69c72b8db75978423c25f379e, nauseatingly left, I'm a liberal myself, but its pretty obvious and annoying that they're trying to push their beliefs on the listeners. Get a more politically diverse production staff, we like to see issues from multiple point of views not just yours., 1, 1AB95B8E6E1309E, 2019-06-11T14:53:39-07:00

CREATE TABLE `categories` (
  podcast_id TEXT PRIMARY KEY REFERENCES podcasts(None),
  category TEXT PRIMARY KEY
);
Sample rows from `categories`:
c61aa81c9b929a66f0c1db6cbe5d8548, arts
c61aa81c9b929a66f0c1db6cbe5d8548, arts-performing-arts
c61aa81c9b929a66f0c1db6cbe5d8548, music

","podcasts, reviews","reviews.content, reviews.podcast_id, podcasts.podcast_id, podcasts.title, reviews.created_at"
retail_complains,"Which state does the owner of ""wyatt.collins@gmail.com"" live in? Give the full name of the state.",SELECT t1.state FROM client as t1 inner JOIN district as t2 ON t1.district_id = t2.district_id WHERE t1.email = 'wyatt.collins@gmail.com',"CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

","CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

","client, district","client.state, client.district_id, district.district_id, client.email"
simpson_episodes,What are the keywords of the episodes which have the air date in 2008?,"SELECT t2.keyword FROM episode as t1 inner JOIN keyword as t2 ON t1.episode_id = t2.episode_id WHERE substr(t1.air_date, 1, 4) = '2008';","CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","episode, keyword","keyword.keyword, episode.episode_id, keyword.episode_id, episode.air_date"
address,How many counties are there in Virginia State?,SELECT COUNT(t2.county) FROM state as t1 inner JOIN country as t2 ON t1.abbreviation = t2.state WHERE t1.name = 'Virginia',"CREATE TABLE `state` (
  abbreviation TEXT PRIMARY KEY,
  name TEXT
);
Sample rows from `state`:
AA, Armed Forces Americas
AE, Armed Forces Europe
AK, Alaska

CREATE TABLE `country` (
  zip_code INTEGER PRIMARY KEY REFERENCES zip_data(zip_code),
  county TEXT PRIMARY KEY,
  state TEXT REFERENCES state(abbreviation)
);
Sample rows from `country`:
501, SUFFOLK, NY
544, SUFFOLK, NY
601, ADJUNTAS, PR

","CREATE TABLE `CBSA` (
  CBSA INTEGER,
  CBSA_name TEXT,
  CBSA_type TEXT
);
Sample rows from `CBSA`:
10300, Adrian, MI, Micro
10380, Aguadilla-Isabela, PR, Metro
10420, Akron, OH, Metro

CREATE TABLE `state` (
  abbreviation TEXT PRIMARY KEY,
  name TEXT
);
Sample rows from `state`:
AA, Armed Forces Americas
AE, Armed Forces Europe
AK, Alaska

CREATE TABLE `congress` (
  cognress_rep_id TEXT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  CID TEXT,
  party TEXT,
  state TEXT,
  abbreviation TEXT REFERENCES state(abbreviation),
  House TEXT,
  District INTEGER,
  land_area REAL
);
Sample rows from `congress`:
AK, Young, Don, N00008091, Republican, Alaska, AK, House of Repsentatives, None, 571951.26
AK-S1, Begich, Mark, N00009585, Democrat, Alaska, AK, Senate, None, 570641.0
AK-S2, Murkowski, Lisa, N00033101, Republican, Alaska, AK, Senate, None, 570641.0

CREATE TABLE `zip_data` (
  zip_code INTEGER,
  city TEXT,
  state TEXT REFERENCES state(abbreviation),
  multi_county TEXT,
  type TEXT,
  organization TEXT,
  time_zone TEXT,
  daylight_savings TEXT,
  latitude REAL,
  longitude REAL,
  elevation INTEGER,
  state_fips INTEGER,
  county_fips INTEGER,
  region TEXT,
  division TEXT,
  population_2020 INTEGER,
  population_2010 INTEGER,
  households INTEGER,
  avg_house_value INTEGER,
  avg_income_per_household INTEGER,
  persons_per_household REAL,
  white_population INTEGER,
  black_population INTEGER,
  hispanic_population INTEGER,
  asian_population INTEGER,
  american_indian_population INTEGER,
  hawaiian_population INTEGER,
  other_population INTEGER,
  male_population INTEGER,
  female_population INTEGER,
  median_age REAL,
  male_median_age REAL,
  female_median_age REAL,
  residential_mailboxes INTEGER,
  business_mailboxes INTEGER,
  total_delivery_receptacles INTEGER,
  businesses INTEGER,
  1st_quarter_payroll INTEGER,
  annual_payroll INTEGER,
  employees INTEGER,
  water_area REAL,
  land_area REAL,
  single_family_delivery_units INTEGER,
  multi_family_delivery_units INTEGER,
  total_beneficiaries INTEGER,
  retired_workers INTEGER,
  disabled_workers INTEGER,
  parents_and_widowed INTEGER,
  spouses INTEGER,
  children INTEGER,
  over_65 INTEGER,
  monthly_benefits_all INTEGER,
  monthly_benefits_retired_workers INTEGER,
  monthly_benefits_widowed INTEGER,
  CBSA INTEGER REFERENCES CBSA(CBSA)
);
Sample rows from `zip_data`:
501, Holtsville, NY, No, Unique Post Office, I R S Service Center, Eastern, Yes, 40.817923, -73.045317, 25, 36, 103, Northeast, Middle Atlantic, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0, 1, 1, 2, 0, 0, 0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35620
544, Holtsville, NY, No, Unique Post Office, Irs Service Center, Eastern, Yes, 40.788827, -73.039405, 25, 36, 103, Northeast, Middle Atlantic, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35620
601, Adjuntas, PR, No, Post Office, None, Atlantic, No, 18.196747, -66.736735, 0, 72, 1, None, None, 11737, 18570, 6525, 86200, 13092, 2.84, 17479, 663, 18486, 7, 113, 10, 558, 9078, 9492, 35.9, 34.5, 37.1, 4133, 221, 5173, 0, 0, 0, 0, 0.309, 64.348, 2419, 1264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38660

CREATE TABLE `alias` (
  zip_code INTEGER REFERENCES zip_data(zip_code),
  alias TEXT
);
Sample rows from `alias`:
501, Holtsville
544, Holtsville
601, Adjuntas

CREATE TABLE `area_code` (
  zip_code INTEGER PRIMARY KEY REFERENCES zip_data(zip_code),
  area_code INTEGER PRIMARY KEY
);
Sample rows from `area_code`:
501, 631
544, 631
601, 787

CREATE TABLE `avoid` (
  zip_code INTEGER PRIMARY KEY REFERENCES zip_data(zip_code),
  bad_alias TEXT PRIMARY KEY
);
Sample rows from `avoid`:
501, Internal Revenue Service
544, Internal Revenue Service
601, Colinas Del Gigante

CREATE TABLE `country` (
  zip_code INTEGER PRIMARY KEY REFERENCES zip_data(zip_code),
  county TEXT PRIMARY KEY,
  state TEXT REFERENCES state(abbreviation)
);
Sample rows from `country`:
501, SUFFOLK, NY
544, SUFFOLK, NY
601, ADJUNTAS, PR

CREATE TABLE `zip_congress` (
  zip_code INTEGER PRIMARY KEY REFERENCES zip_data(zip_code),
  district TEXT PRIMARY KEY REFERENCES congress(cognress_rep_id)
);
Sample rows from `zip_congress`:
501, NY-1
601, PR
602, PR

","state, country","country.county, state.abbreviation, country.state, state.name"
university,What is the ID of the university that has only 1% of international students between 2011 to 2015?,SELECT university_id FROM university_year WHERE pct_international_students = 1 AND year BETWEEN 2011 AND 2015,"CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

","CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

CREATE TABLE `ranking_system` (
  id INTEGER,
  system_name TEXT
);
Sample rows from `ranking_system`:
1, Times Higher Education World University Ranking
2, Shanghai Ranking
3, Center for World University Rankings

CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

",university_year,"university_id, pct_international_students"
world,What city has the highest population?,SELECT name FROM city ORDER BY population DESC LIMIT 1,"CREATE TABLE `city` (
  ID INTEGER,
  Name TEXT,
  CountryCode TEXT REFERENCES Country(Code),
  District TEXT,
  Population INTEGER
);
Sample rows from `city`:
1, Kabul, AFG, Kabol, 1780000
2, Qandahar, AFG, Qandahar, 237500
3, Herat, AFG, Herat, 186800

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
City, 4079

CREATE TABLE `City` (
  ID INTEGER,
  Name TEXT,
  CountryCode TEXT REFERENCES Country(Code),
  District TEXT,
  Population INTEGER
);
Sample rows from `City`:
1, Kabul, AFG, Kabol, 1780000
2, Qandahar, AFG, Qandahar, 237500
3, Herat, AFG, Herat, 186800

CREATE TABLE `Country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `Country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

CREATE TABLE `CountryLanguage` (
  CountryCode TEXT PRIMARY KEY REFERENCES Country(Code),
  Language TEXT PRIMARY KEY,
  IsOfficial TEXT,
  Percentage REAL
);
Sample rows from `CountryLanguage`:
ABW, Dutch, T, 5.3
ABW, English, F, 9.5
ABW, Papiamento, F, 76.7

",city,"name, population"
computer_student,List the professor ID who taught the course ID from 121 to 130 of basic undergraduate courses.,SELECT t2.p_id FROM course as t1 inner JOIN taughtby as t2 ON t1.course_id = t2.course_id WHERE t1.courselevel = 'Level_300' AND t1.course_id > 121 AND t1.course_id < 130,"CREATE TABLE `course` (
  course_id INTEGER,
  courseLevel TEXT
);
Sample rows from `course`:
0, Level_500
1, Level_500
2, Level_500

CREATE TABLE `taughtby` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `taughtby`:
0, 40
1, 40
2, 180

","CREATE TABLE `course` (
  course_id INTEGER,
  courseLevel TEXT
);
Sample rows from `course`:
0, Level_500
1, Level_500
2, Level_500

CREATE TABLE `person` (
  p_id INTEGER,
  professor INTEGER,
  student INTEGER,
  hasPosition TEXT,
  inPhase TEXT,
  yearsInProgram TEXT
);
Sample rows from `person`:
3, 0, 1, 0, 0, 0
4, 0, 1, 0, 0, 0
5, 1, 0, Faculty, 0, 0

CREATE TABLE `advisedBy` (
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id),
  p_id_dummy INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `advisedBy`:
96, 5
118, 5
183, 5

CREATE TABLE `taughtBy` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `taughtBy`:
0, 40
1, 40
2, 180

","course, taughtby","taughtby.p_id, course.course_id, taughtby.course_id, course.courselevel"
retail_world,How many orders was handled by employees who reported to employee id 5?,SELECT COUNT(t2.orderid) FROM employees as t1 inner JOIN orders as t2 ON t1.employeeid = t2.employeeid WHERE t1.reportsto = 5,"CREATE TABLE `employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

","employees, orders","orders.orderid, employees.employeeid, orders.employeeid, employees.reportsto"
language_corpus,"State the word ID for ""periodograma"".",SELECT wid FROM words WHERE word = 'periodograma',"CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

","CREATE TABLE `langs` (
  lid INTEGER,
  lang TEXT PRIMARY KEY,
  locale TEXT PRIMARY KEY,
  pages INTEGER,
  words INTEGER
);
Sample rows from `langs`:
1, ca, ca_ES, 1129144, 2764996

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
langs, 1
pages, 1129144
words, 2764996

CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `langs_words` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `langs_words`:
1, 1, 242
1, 2, 16841
1, 3, 48700

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

",words,"wid, word"
student_loan,How many unemployed students are there that have been absent for 6 months?,SELECT t1.name FROM longest_absense_from_school as t1 inner JOIN unemployed as t2 ON t1.`name` = t2.name WHERE t1.`month` = 6,"CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

","longest_absense_from_school, unemployed","longest_absense_from_school.name, unemployed.name, longest_absense_from_school.month"
language_corpus,What is the wikipedia page id of Arqueozoologia?,SELECT page FROM pages WHERE title = 'Arqueozoologia',"CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

","CREATE TABLE `langs` (
  lid INTEGER,
  lang TEXT PRIMARY KEY,
  locale TEXT PRIMARY KEY,
  pages INTEGER,
  words INTEGER
);
Sample rows from `langs`:
1, ca, ca_ES, 1129144, 2764996

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
langs, 1
pages, 1129144
words, 2764996

CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `langs_words` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `langs_words`:
1, 1, 242
1, 2, 16841
1, 3, 48700

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

",pages,"page, title"
simpson_episodes,What percentage of votes are from the nominated episodes?,SELECT cast(SUM(case when t1.result = 'Nominee' then t2.votes else 0 end) as real) * 100 / SUM(t2.votes) FROM award as t1 inner JOIN episode as t2 ON t1.episode_id = t2.episode_id;,"CREATE TABLE `award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","award, episode","award.result, episode.votes, award.episode_id, episode.episode_id"
university,"What is the id of the criteria ""Citations Rank""?",SELECT id FROM ranking_criteria WHERE criteria_name = 'Citations Rank',"CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

","CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

CREATE TABLE `ranking_system` (
  id INTEGER,
  system_name TEXT
);
Sample rows from `ranking_system`:
1, Times Higher Education World University Ranking
2, Shanghai Ranking
3, Center for World University Rankings

CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

",ranking_criteria,"id, criteria_name"
olympics,In which city the 2004 Summer was held?,SELECT t2.city_name FROM games_city as t1 inner JOIN city as t2 ON t1.city_id = t2.id inner JOIN games as t3 ON t1.games_id = t3.id WHERE t3.games_name = '2004 Summer',"CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

","CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `medal` (
  id INTEGER,
  medal_name TEXT
);
Sample rows from `medal`:
1, Gold
2, Silver
3, Bronze

CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `sport` (
  id INTEGER,
  sport_name TEXT
);
Sample rows from `sport`:
1, Aeronautics
2, Alpine Skiing
3, Alpinism

CREATE TABLE `event` (
  id INTEGER,
  sport_id INTEGER REFERENCES sport(id),
  event_name TEXT
);
Sample rows from `event`:
1, 9, Basketball Men's Basketball
2, 33, Judo Men's Extra-Lightweight
3, 25, Football Men's Football

CREATE TABLE `competitor_event` (
  event_id INTEGER REFERENCES event(id),
  competitor_id INTEGER REFERENCES games_competitor(id),
  medal_id INTEGER REFERENCES medal(id)
);
Sample rows from `competitor_event`:
1, 1, 4
2, 2, 4
3, 3, 4

","games_city, city, games","city.city_name, games_city.city_id, city.id, games_city.games_id, games.id, games.games_name"
retail_complains,What was the issue that the client with the longest server time faced?,SELECT t2.issue FROM callcenterlogs as t1 inner JOIN events as t2 ON t1.`complaint id` = t2.`complaint id` WHERE t1.ser_time = ( SELECT MAX(ser_time) FROM callcenterlogs ),"CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

","CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

","callcenterlogs, events","events.issue, callcenterlogs.complaint id, events.complaint id, callcenterlogs.ser_time, ser_time"
social_media,How many reshared tweets have over 100 likes?,SELECT COUNT(DISTINCT tweetid) FROM twitter WHERE isreshare = 'TRUE' AND likes > 100,"CREATE TABLE `twitter` (
  TweetID TEXT PRIMARY KEY,
  Weekday TEXT,
  Hour INTEGER,
  Day INTEGER,
  Lang TEXT,
  IsReshare TEXT,
  Reach INTEGER,
  RetweetCount INTEGER,
  Likes INTEGER,
  Klout INTEGER,
  Sentiment REAL,
  text TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  UserID TEXT REFERENCES user(UserID)
);
Sample rows from `twitter`:
tw-682712873332805633, Thursday, 17, 31, en, FALSE, 44, 0, 0, 35, 0.0, We are hiring: Senior Software Engineer - Proto http://www.reqcloud.com/jobs/719865/?k=0LaPxXuFwczs1e32ZURJKrgCIDMQtRO7BquFSQthUKY&utm_source=twitter&utm_campaign=reqCloud_JobPost #job @awscloud #job #protocol #networking #aws #mediastreaming, 3751, tw-40932430
tw-682713045357998080, Thursday, 17, 31, en, TRUE, 1810, 5, 0, 53, 2.0, RT @CodeMineStatus: This is true Amazon Web Services https://aws.amazon.com/ #php #html #html5 #css #webdesign #seo #java #javascript htt, 3989, tw-3179389829
tw-682713219375476736, Thursday, 17, 31, en, FALSE, 282, 0, 0, 47, 0.0, Devops Engineer Aws Ansible Cassandra Mysql Ubuntu Ruby On Rails Jobs in Austin TX #Austin #TX #jobs #jobsearch https://www.jobfindly.com/devops-engineer-aws-ansible-cassandra-mysql-ubuntu-ruby-on-rails-jobs-austin-tx.html, 3741, tw-4624808414

","CREATE TABLE `location` (
  LocationID INTEGER,
  Country TEXT,
  State TEXT,
  StateCode TEXT,
  City TEXT
);
Sample rows from `location`:
1, Albania, Elbasan, AL, Elbasan
2, Albania, Tirane, AL, Tirana
3, Algeria, Souk Ahras, DZ, Souk Ahras

CREATE TABLE `user` (
  UserID TEXT PRIMARY KEY,
  Gender TEXT
);
Sample rows from `user`:
tw-1267804344, Unknown
tw-27229880, Male
tw-199664730, Male

CREATE TABLE `twitter` (
  TweetID TEXT PRIMARY KEY,
  Weekday TEXT,
  Hour INTEGER,
  Day INTEGER,
  Lang TEXT,
  IsReshare TEXT,
  Reach INTEGER,
  RetweetCount INTEGER,
  Likes INTEGER,
  Klout INTEGER,
  Sentiment REAL,
  text TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  UserID TEXT REFERENCES user(UserID)
);
Sample rows from `twitter`:
tw-682712873332805633, Thursday, 17, 31, en, FALSE, 44, 0, 0, 35, 0.0, We are hiring: Senior Software Engineer - Proto http://www.reqcloud.com/jobs/719865/?k=0LaPxXuFwczs1e32ZURJKrgCIDMQtRO7BquFSQthUKY&utm_source=twitter&utm_campaign=reqCloud_JobPost #job @awscloud #job #protocol #networking #aws #mediastreaming, 3751, tw-40932430
tw-682713045357998080, Thursday, 17, 31, en, TRUE, 1810, 5, 0, 53, 2.0, RT @CodeMineStatus: This is true Amazon Web Services https://aws.amazon.com/ #php #html #html5 #css #webdesign #seo #java #javascript htt, 3989, tw-3179389829
tw-682713219375476736, Thursday, 17, 31, en, FALSE, 282, 0, 0, 47, 0.0, Devops Engineer Aws Ansible Cassandra Mysql Ubuntu Ruby On Rails Jobs in Austin TX #Austin #TX #jobs #jobsearch https://www.jobfindly.com/devops-engineer-aws-ansible-cassandra-mysql-ubuntu-ruby-on-rails-jobs-austin-tx.html, 3741, tw-4624808414

",twitter,"tweetid, isreshare, likes"
beer_factory,"For the root beer brand with the most 5 star ratings, what is the name of the brewery?",SELECT t1.breweryname FROM rootbeerbrand as t1 inner JOIN rootbeerreview as t2 ON t1.brandid = t2.brandid WHERE t2.starrating = 5 GROUP BY t1.brandid ORDER BY COUNT(t2.starrating) DESC LIMIT 1,"CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

CREATE TABLE `rootbeerreview` (
  CustomerID INTEGER PRIMARY KEY REFERENCES customers(CustomerID),
  BrandID INTEGER PRIMARY KEY REFERENCES rootbeerbrand(BrandID),
  StarRating INTEGER,
  ReviewDate DATE,
  Review TEXT
);
Sample rows from `rootbeerreview`:
101811, 10012, 5, 2013-07-15, None
101811, 10014, 1, 2013-07-08, None
101811, 10015, 3, 2013-07-25, None

","CREATE TABLE `customers` (
  CustomerID INTEGER,
  First TEXT,
  Last TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER,
  Email TEXT,
  PhoneNumber TEXT,
  FirstPurchaseDate DATE,
  SubscribedToEmailList TEXT,
  Gender TEXT
);
Sample rows from `customers`:
101811, Kenneth, Walton, 6715 Commonwealth Dr, Sacramento, CA, 94256, walton.k76@fastmail.com, (916) 918-1561, 2013-05-30, FALSE, M
103508, Madeleine, Jones, 3603 Leola Way, Sacramento, CA, 94258, j_madeleine@gmail.com, (916) 186-9423, 2013-02-06, FALSE, F
104939, Damen, Wheeler, 6740 Branwood Way, Orangevale, CA, 95662, dwheeler@outlook.com, (916) 164-1156, 2013-04-11, FALSE, M

CREATE TABLE `geolocation` (
  LocationID INTEGER REFERENCES location(LocationID),
  Latitude REAL,
  Longitude REAL
);
Sample rows from `geolocation`:
0, 0.0, 0.0
1, 38.566129, -121.426432
2, 38.559615, -121.42243

CREATE TABLE `location` (
  LocationID INTEGER REFERENCES geolocation(LocationID),
  LocationName TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER
);
Sample rows from `location`:
0, LOST, None, None, None, None
1, Sac State American River Courtyard, 6000 J St, Sacramento, CA, 95819
2, Sac State Union, 6000 J St, Sacramento, CA, 95819

CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

CREATE TABLE `rootbeerreview` (
  CustomerID INTEGER PRIMARY KEY REFERENCES customers(CustomerID),
  BrandID INTEGER PRIMARY KEY REFERENCES rootbeerbrand(BrandID),
  StarRating INTEGER,
  ReviewDate DATE,
  Review TEXT
);
Sample rows from `rootbeerreview`:
101811, 10012, 5, 2013-07-15, None
101811, 10014, 1, 2013-07-08, None
101811, 10015, 3, 2013-07-25, None

CREATE TABLE `transaction` (
  TransactionID INTEGER,
  CreditCardNumber INTEGER,
  CustomerID INTEGER REFERENCES customers(CustomerID),
  TransactionDate DATE,
  CreditCardType TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  RootBeerID INTEGER REFERENCES rootbeer(RootBeerID),
  PurchasePrice REAL
);
Sample rows from `transaction`:
100000, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105661, 3.0
100001, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105798, 3.0
100002, 6011583832864739, 864896, 2014-07-07, Discover, 2, 102514, 3.0

","rootbeerbrand, rootbeerreview","rootbeerbrand.breweryname, rootbeerbrand.brandid, rootbeerreview.brandid, rootbeerreview.starrating"
software_company,Give the level of education and occupation of customers ages from 20 to 35 with an income K of 2000 and below.,"SELECT t1.educationnum, t1.occupation FROM customers as t1 inner JOIN demog as t2 ON t1.geoid = t2.geoid WHERE t2.income_k < 2000 AND t1.age >= 20 AND t1.age <= 35","CREATE TABLE `customers` (
  ID INTEGER,
  SEX TEXT,
  MARITAL_STATUS TEXT,
  GEOID INTEGER REFERENCES Demog(None),
  EDUCATIONNUM INTEGER,
  OCCUPATION TEXT,
  age INTEGER
);
Sample rows from `customers`:
0, Male, Never-married, 61, 7, Machine-op-inspct, 62
1, Male, Married-civ-spouse, 70, 3, Handlers-cleaners, 78
2, Male, Never-married, 53, 7, Machine-op-inspct, 69

CREATE TABLE `demog` (
  GEOID INTEGER,
  INHABITANTS_K REAL,
  INCOME_K REAL,
  A_VAR1 REAL,
  A_VAR2 REAL,
  A_VAR3 REAL,
  A_VAR4 REAL,
  A_VAR5 REAL,
  A_VAR6 REAL,
  A_VAR7 REAL,
  A_VAR8 REAL,
  A_VAR9 REAL,
  A_VAR10 REAL,
  A_VAR11 REAL,
  A_VAR12 REAL,
  A_VAR13 REAL,
  A_VAR14 REAL,
  A_VAR15 REAL,
  A_VAR16 REAL,
  A_VAR17 REAL,
  A_VAR18 REAL
);
Sample rows from `demog`:
0, 30.046, 2631.47, 6.084, 5.79, 8.595, 3.935, 6.362, 8.626, 4.624, 8.324, 5.233, 6.232, 5.205, 8.231, 6.746, 8.679, 5.292, 3.5, 5.512, 5.783
1, 36.25, 3012.75, 4.604, 8.309, 6.007, 5.938, 8.773, 3.579, 6.349, 4.694, 6.884, 7.062, 7.319, 3.72, 6.405, 7.202, 4.932, 7.969, 8.15, 5.633
2, 47.645, 2192.41, 4.911, 8.557, 5.934, 6.494, 9.172, 3.202, 6.157, 4.822, 7.942, 7.901, 7.928, 2.33, 6.029, 6.455, 4.72, 8.564, 8.342, 4.938

","CREATE TABLE `Demog` (
  GEOID INTEGER,
  INHABITANTS_K REAL,
  INCOME_K REAL,
  A_VAR1 REAL,
  A_VAR2 REAL,
  A_VAR3 REAL,
  A_VAR4 REAL,
  A_VAR5 REAL,
  A_VAR6 REAL,
  A_VAR7 REAL,
  A_VAR8 REAL,
  A_VAR9 REAL,
  A_VAR10 REAL,
  A_VAR11 REAL,
  A_VAR12 REAL,
  A_VAR13 REAL,
  A_VAR14 REAL,
  A_VAR15 REAL,
  A_VAR16 REAL,
  A_VAR17 REAL,
  A_VAR18 REAL
);
Sample rows from `Demog`:
0, 30.046, 2631.47, 6.084, 5.79, 8.595, 3.935, 6.362, 8.626, 4.624, 8.324, 5.233, 6.232, 5.205, 8.231, 6.746, 8.679, 5.292, 3.5, 5.512, 5.783
1, 36.25, 3012.75, 4.604, 8.309, 6.007, 5.938, 8.773, 3.579, 6.349, 4.694, 6.884, 7.062, 7.319, 3.72, 6.405, 7.202, 4.932, 7.969, 8.15, 5.633
2, 47.645, 2192.41, 4.911, 8.557, 5.934, 6.494, 9.172, 3.202, 6.157, 4.822, 7.942, 7.901, 7.928, 2.33, 6.029, 6.455, 4.72, 8.564, 8.342, 4.938

CREATE TABLE `mailings3` (
  REFID INTEGER,
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `mailings3`:
60000, 2007-07-01 12:00:00.0, false
60001, 2007-07-01 12:00:00.0, false
60002, 2007-07-01 12:00:00.0, false

CREATE TABLE `Customers` (
  ID INTEGER,
  SEX TEXT,
  MARITAL_STATUS TEXT,
  GEOID INTEGER REFERENCES Demog(None),
  EDUCATIONNUM INTEGER,
  OCCUPATION TEXT,
  age INTEGER
);
Sample rows from `Customers`:
0, Male, Never-married, 61, 7, Machine-op-inspct, 62
1, Male, Married-civ-spouse, 70, 3, Handlers-cleaners, 78
2, Male, Never-married, 53, 7, Machine-op-inspct, 69

CREATE TABLE `Mailings1_2` (
  REFID INTEGER REFERENCES Customers(None),
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `Mailings1_2`:
0, 2007-02-01 12:00:00.0, false
1, 2007-02-01 12:00:00.0, false
2, 2007-02-01 12:00:00.0, false

CREATE TABLE `Sales` (
  EVENTID INTEGER,
  REFID INTEGER REFERENCES Customers(None),
  EVENT_DATE DATETIME,
  AMOUNT REAL
);
Sample rows from `Sales`:
0, 0, 2006-12-21 12:00:00.0, 17.907
1, 0, 2006-12-25 12:00:00.0, 17.401
2, 0, 2007-01-26 12:00:00.0, 13.277

","customers, demog","customers.educationnum, customers.occupation, customers.geoid, demog.geoid, demog.income_k, customers.age"
soccer_2016,Provide the names and birthdates of players who have left-arm fast skills.,"SELECT t1.player_name, t1.dob FROM player as t1 inner JOIN bowling_style as t2 ON t2.bowling_id = t1.bowling_skill WHERE t2.bowling_skill = 'Left-arm fast'","CREATE TABLE `player` (
  Player_Id INTEGER,
  Player_Name TEXT,
  DOB DATE,
  Batting_hand INTEGER REFERENCES Batting_Style(Batting_Id),
  Bowling_skill INTEGER REFERENCES Bowling_Style(Bowling_Id),
  Country_Name INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `player`:
1, SC Ganguly, 1972-07-08, 1, 1, 1
2, BB McCullum, 1981-09-27, 2, 1, 4
3, RT Ponting, 1974-12-19, 2, 1, 5

CREATE TABLE `bowling_style` (
  Bowling_Id INTEGER,
  Bowling_skill TEXT
);
Sample rows from `bowling_style`:
1, Right-arm medium
2, Right-arm offbreak
3, Right-arm fast-medium

","CREATE TABLE `Batting_Style` (
  Batting_Id INTEGER,
  Batting_hand TEXT
);
Sample rows from `Batting_Style`:
1, Left-hand bat
2, Right-hand bat

CREATE TABLE `Bowling_Style` (
  Bowling_Id INTEGER,
  Bowling_skill TEXT
);
Sample rows from `Bowling_Style`:
1, Right-arm medium
2, Right-arm offbreak
3, Right-arm fast-medium

CREATE TABLE `City` (
  City_Id INTEGER,
  City_Name TEXT,
  Country_id INTEGER
);
Sample rows from `City`:
1, Bangalore, 1
2, Chandigarh, 1
3, Delhi, 1

CREATE TABLE `Country` (
  Country_Id INTEGER REFERENCES Country(Country_Id),
  Country_Name TEXT
);
Sample rows from `Country`:
1, India
2, South Africa
3, U.A.E

CREATE TABLE `Extra_Type` (
  Extra_Id INTEGER,
  Extra_Name TEXT
);
Sample rows from `Extra_Type`:
1, legbyes
2, wides
3, byes

CREATE TABLE `Extra_Runs` (
  Match_Id INTEGER PRIMARY KEY,
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Extra_Type_Id INTEGER REFERENCES Extra_Type(Extra_Id),
  Extra_Runs INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Extra_Runs`:
335987, 1, 1, 1, 1, 1
335987, 1, 2, 2, 1, 2
335987, 1, 3, 2, 1, 1

CREATE TABLE `Out_Type` (
  Out_Id INTEGER,
  Out_Name TEXT
);
Sample rows from `Out_Type`:
1, caught
2, bowled
3, run out

CREATE TABLE `Outcome` (
  Outcome_Id INTEGER,
  Outcome_Type TEXT
);
Sample rows from `Outcome`:
1, Result
2, No Result
3, Superover

CREATE TABLE `Player` (
  Player_Id INTEGER,
  Player_Name TEXT,
  DOB DATE,
  Batting_hand INTEGER REFERENCES Batting_Style(Batting_Id),
  Bowling_skill INTEGER REFERENCES Bowling_Style(Bowling_Id),
  Country_Name INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Player`:
1, SC Ganguly, 1972-07-08, 1, 1, 1
2, BB McCullum, 1981-09-27, 2, 1, 4
3, RT Ponting, 1974-12-19, 2, 1, 5

CREATE TABLE `Rolee` (
  Role_Id INTEGER,
  Role_Desc TEXT
);
Sample rows from `Rolee`:
1, Captain
2, Keeper
3, Player

CREATE TABLE `Season` (
  Season_Id INTEGER,
  Man_of_the_Series INTEGER,
  Orange_Cap INTEGER,
  Purple_Cap INTEGER,
  Season_Year INTEGER
);
Sample rows from `Season`:
1, 32, 100, 102, 2008
2, 53, 18, 61, 2009
3, 133, 133, 131, 2010

CREATE TABLE `Team` (
  Team_Id INTEGER,
  Team_Name TEXT
);
Sample rows from `Team`:
1, Kolkata Knight Riders
2, Royal Challengers Bangalore
3, Chennai Super Kings

CREATE TABLE `Toss_Decision` (
  Toss_Id INTEGER,
  Toss_Name TEXT
);
Sample rows from `Toss_Decision`:
1, field
2, bat

CREATE TABLE `Umpire` (
  Umpire_Id INTEGER,
  Umpire_Name TEXT,
  Umpire_Country INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Umpire`:
1, Asad Rauf, 6
2, MR Benson, 10
3, Aleem Dar, 6

CREATE TABLE `Venue` (
  Venue_Id INTEGER,
  Venue_Name TEXT,
  City_Id INTEGER REFERENCES City(City_Id)
);
Sample rows from `Venue`:
1, M Chinnaswamy Stadium, 1
2, Punjab Cricket Association Stadium, 2
3, Feroz Shah Kotla, 3

CREATE TABLE `Win_By` (
  Win_Id INTEGER,
  Win_Type TEXT
);
Sample rows from `Win_By`:
1, runs
2, wickets
3, NO Result

CREATE TABLE `Match` (
  Match_Id INTEGER,
  Team_1 INTEGER REFERENCES Team(Team_Id),
  Team_2 INTEGER REFERENCES Team(Team_Id),
  Match_Date DATE,
  Season_Id INTEGER REFERENCES Season(Season_Id),
  Venue_Id INTEGER REFERENCES Venue(Venue_Id),
  Toss_Winner INTEGER REFERENCES Team(Team_Id),
  Toss_Decide INTEGER REFERENCES Toss_Decision(Toss_Id),
  Win_Type INTEGER REFERENCES Win_By(Win_Id),
  Win_Margin INTEGER,
  Outcome_type INTEGER REFERENCES Out_Type(Out_Id),
  Match_Winner INTEGER REFERENCES Team(Team_Id),
  Man_of_the_Match INTEGER REFERENCES Player(Player_Id)
);
Sample rows from `Match`:
335987, 2, 1, 2008-04-18, 1, 1, 2, 1, 1, 140, 1, 1, 2
335988, 4, 3, 2008-04-19, 1, 2, 3, 2, 1, 33, 1, 3, 19
335989, 6, 5, 2008-04-19, 1, 3, 5, 2, 2, 9, 1, 6, 90

CREATE TABLE `Ball_by_Ball` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Innings_No INTEGER PRIMARY KEY,
  Team_Batting INTEGER,
  Team_Bowling INTEGER,
  Striker_Batting_Position INTEGER,
  Striker INTEGER,
  Non_Striker INTEGER,
  Bowler INTEGER
);
Sample rows from `Ball_by_Ball`:
335987, 1, 1, 1, 1, 2, 1, 1, 2, 14
335987, 1, 1, 2, 2, 1, 1, 6, 7, 106
335987, 1, 2, 1, 1, 2, 2, 2, 1, 14

CREATE TABLE `Batsman_Scored` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Runs_Scored INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Batsman_Scored`:
335987, 1, 1, 0, 1
335987, 1, 1, 1, 2
335987, 1, 2, 0, 1

CREATE TABLE `Player_Match` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Player_Id INTEGER PRIMARY KEY REFERENCES Player(Player_Id),
  Role_Id INTEGER PRIMARY KEY REFERENCES Rolee(Role_Id),
  Team_Id INTEGER REFERENCES Team(Team_Id)
);
Sample rows from `Player_Match`:
335987, 1, 1, 1
335987, 2, 3, 1
335987, 3, 3, 1

CREATE TABLE `Wicket_Taken` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Player_Out INTEGER REFERENCES Player(Player_Id),
  Kind_Out INTEGER REFERENCES Out_Type(Out_Id),
  Fielders INTEGER REFERENCES Player(Player_Id),
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Wicket_Taken`:
335987, 2, 1, 6, 2, None, 2
335987, 3, 2, 8, 2, None, 2
335987, 5, 5, 9, 1, 83, 2

","player, bowling_style","player.player_name, player.dob, bowling_style.bowling_id, player.bowling_skill, bowling_style.bowling_skill"
regional_sales,How many orders that Medsep Group had made?,SELECT SUM(case when t1.`customer names` = 'Medsep Group' then 1 else 0 end) FROM customers as t1 inner JOIN `sales orders` as t2 ON t2._customerID = t1.customerID,"CREATE TABLE `customers` (
  CustomerID INTEGER,
  Customer Names TEXT
);
Sample rows from `customers`:
1, Avon Corp
2, WakeFern 
3, Elorac, Corp

CREATE TABLE `sales orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `sales orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  Customer Names TEXT
);
Sample rows from `Customers`:
1, Avon Corp
2, WakeFern 
3, Elorac, Corp

CREATE TABLE `Products` (
  ProductID INTEGER,
  Product Name TEXT
);
Sample rows from `Products`:
1, Cookware
2, Photo Frames
3, Table Lamps

CREATE TABLE `Regions` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `Regions`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `Sales Team` (
  SalesTeamID INTEGER,
  Sales Team TEXT,
  Region TEXT
);
Sample rows from `Sales Team`:
1, Adam Hernandez, Northeast
2, Keith Griffin, Northeast
3, Jerry Green, West

CREATE TABLE `Store Locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `Store Locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

CREATE TABLE `Sales Orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `Sales Orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

","customers, sales orders","customers.customer names, sales orders._customerID, customers.customerID"
menu,What are the names of the dishes with a stable price that were created in April of 2011?,"SELECT t1.name FROM dish as t1 inner JOIN menuitem as t2 ON t1.id = t2.dish_id WHERE substr(t2.created_at, 1, 4) = '2011' AND substr(t2.created_at, 7, 1) = '4' AND t1.highest_price is null","CREATE TABLE `dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

CREATE TABLE `menuitem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `menuitem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

","CREATE TABLE `Dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `Dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

CREATE TABLE `Menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `Menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

CREATE TABLE `MenuPage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `MenuPage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

CREATE TABLE `MenuItem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `MenuItem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

","dish, menuitem","dish.name, dish.id, menuitem.dish_id, menuitem.created_at, dish.highest_price"
public_review_platform,List at least 5 active business ID that are good for groups and dancing.,SELECT t2.business_id FROM attributes as t1 inner JOIN business_attributes as t2 ON t1.attribute_id = t2.attribute_id inner JOIN business as t3 ON t2.business_id = t3.business_id WHERE t2.attribute_value LIKE 'TRUE' AND t1.attribute_name LIKE 'Good for Dancing' AND t1.attribute_name LIKE 'Good for Groups' LIMIT 5,"CREATE TABLE `attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `business_attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `business_attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","attributes, business_attributes, business","business_attributes.business_id, attributes.attribute_id, business_attributes.attribute_id, business.business_id, business_attributes.attribute_value, attributes.attribute_name"
talkingdata,Calculate the percentage of the app user IDs under Industry tag category.,"SELECT SUM(iif(t1.category = 'Industry tag', 1, 0)) * 100 / COUNT(t2.app_id) as per FROM label_categories as t1 inner JOIN app_labels as t2 ON t2.label_id = t1.label_id","CREATE TABLE `label_categories` (
  label_id INTEGER,
  category TEXT
);
Sample rows from `label_categories`:
1, None
2, game-game type
3, game-Game themes

CREATE TABLE `app_labels` (
  app_id INTEGER REFERENCES app_all(app_id),
  label_id INTEGER REFERENCES label_categories(label_id)
);
Sample rows from `app_labels`:
7324884708820027918, 251
-4494216993218550286, 251
6058196446775239644, 406

","CREATE TABLE `app_all` (
  app_id INTEGER
);
Sample rows from `app_all`:
-9223281467940916832
-9222877069545393219
-9222785464897897681

CREATE TABLE `app_events` (
  event_id INTEGER PRIMARY KEY REFERENCES events(event_id),
  app_id INTEGER PRIMARY KEY,
  is_installed INTEGER,
  is_active INTEGER
);
Sample rows from `app_events`:
2, -8942695423876075857, 1, 0
2, -8022267440849930066, 1, 0
2, -5720078949152207372, 1, 0

CREATE TABLE `app_events_relevant` (
  event_id INTEGER PRIMARY KEY REFERENCES events_relevant(event_id),
  app_id INTEGER PRIMARY KEY REFERENCES app_all(app_id),
  is_installed INTEGER,
  is_active INTEGER
);
Sample rows from `app_events_relevant`:
2, -8942695423876075857, 1, 0
2, -8022267440849930066, 1, 0
2, -5720078949152207372, 1, 0

CREATE TABLE `app_labels` (
  app_id INTEGER REFERENCES app_all(app_id),
  label_id INTEGER REFERENCES label_categories(label_id)
);
Sample rows from `app_labels`:
7324884708820027918, 251
-4494216993218550286, 251
6058196446775239644, 406

CREATE TABLE `events` (
  event_id INTEGER,
  device_id INTEGER,
  timestamp DATETIME,
  longitude REAL,
  latitude REAL
);
Sample rows from `events`:
1, 29182687948017175, 2016-05-01 00:55:25.0, 121.0, 31.0
2, -6401643145415154744, 2016-05-01 00:54:12.0, 104.0, 31.0
3, -4833982096941402721, 2016-05-01 00:08:05.0, 107.0, 30.0

CREATE TABLE `events_relevant` (
  event_id INTEGER,
  device_id INTEGER REFERENCES gender_age(device_id),
  timestamp DATETIME,
  longitude REAL,
  latitude REAL
);
Sample rows from `events_relevant`:
2, None, -8942695423876075857, 1.0, 0.0
6, None, -8764672938472212518, 1.0, 1.0
7, None, -9050100410106163077, 1.0, 0.0

CREATE TABLE `gender_age` (
  device_id INTEGER REFERENCES phone_brand_device_model2(device_id),
  gender TEXT,
  age INTEGER,
  group TEXT
);
Sample rows from `gender_age`:
-9221086586254644858, M, 29, M29-31
-9221079146476055829, None, None, None
-9221066489596332354, M, 31, M29-31

CREATE TABLE `gender_age_test` (
  device_id INTEGER
);
Sample rows from `gender_age_test`:
-9223321966609553846
-9223042152723782980
-9222896629442493034

CREATE TABLE `gender_age_train` (
  device_id INTEGER,
  gender TEXT,
  age INTEGER,
  group TEXT
);
Sample rows from `gender_age_train`:
-9223067244542181226, M, 24, M23-26
-9222956879900151005, M, 36, M32-38
-9222754701995937853, M, 29, M29-31

CREATE TABLE `label_categories` (
  label_id INTEGER,
  category TEXT
);
Sample rows from `label_categories`:
1, None
2, game-game type
3, game-Game themes

CREATE TABLE `phone_brand_device_model2` (
  device_id INTEGER PRIMARY KEY,
  phone_brand TEXT PRIMARY KEY,
  device_model TEXT PRIMARY KEY
);
Sample rows from `phone_brand_device_model2`:
-9223321966609553846, 小米, 红米note
-9223067244542181226, vivo, Y19T
-9223042152723782980, 小米, MI 3

CREATE TABLE `sample_submission` (
  device_id INTEGER,
  F23- REAL,
  F24-26 REAL,
  F27-28 REAL,
  F29-32 REAL,
  F33-42 REAL,
  F43+ REAL,
  M22- REAL,
  M23-26 REAL,
  M27-28 REAL,
  M29-31 REAL,
  M32-38 REAL,
  M39+ REAL
);
Sample rows from `sample_submission`:
-9223321966609553846, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833
-9223042152723782980, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833
-9222896629442493034, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833

","label_categories, app_labels","label_categories.category, app_labels.app_id, app_labels.label_id, label_categories.label_id"
olympics,What is the NOC code of the region where the tallest male Olympic competitor is from?,SELECT t1.noc FROm noc_region as t1 inner JOIN person_region as t2 ON t1.id = t2.region_id inner JOIN person as t3 ON t2.person_id = t3.id WHERE t3.gender = 'm' ORDER BY t3.height DESC LImIT 1,"CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

","CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `medal` (
  id INTEGER,
  medal_name TEXT
);
Sample rows from `medal`:
1, Gold
2, Silver
3, Bronze

CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `sport` (
  id INTEGER,
  sport_name TEXT
);
Sample rows from `sport`:
1, Aeronautics
2, Alpine Skiing
3, Alpinism

CREATE TABLE `event` (
  id INTEGER,
  sport_id INTEGER REFERENCES sport(id),
  event_name TEXT
);
Sample rows from `event`:
1, 9, Basketball Men's Basketball
2, 33, Judo Men's Extra-Lightweight
3, 25, Football Men's Football

CREATE TABLE `competitor_event` (
  event_id INTEGER REFERENCES event(id),
  competitor_id INTEGER REFERENCES games_competitor(id),
  medal_id INTEGER REFERENCES medal(id)
);
Sample rows from `competitor_event`:
1, 1, 4
2, 2, 4
3, 3, 4

","noc_region, person_region, person","noc_region.noc, noc_region.id, person_region.region_id, person_region.person_id, person.id, person.gender, person.height"
computer_student,How many courses were taught by a professor who is currently the member of faculty?,SELECT COUNT(*) FROM person as t1 inner JOIN taughtby as t2 ON t1.p_id = t2.p_id WHERE t1.professor = 1 AND t1.hasposition <> 0,"CREATE TABLE `person` (
  p_id INTEGER,
  professor INTEGER,
  student INTEGER,
  hasPosition TEXT,
  inPhase TEXT,
  yearsInProgram TEXT
);
Sample rows from `person`:
3, 0, 1, 0, 0, 0
4, 0, 1, 0, 0, 0
5, 1, 0, Faculty, 0, 0

CREATE TABLE `taughtby` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `taughtby`:
0, 40
1, 40
2, 180

","CREATE TABLE `course` (
  course_id INTEGER,
  courseLevel TEXT
);
Sample rows from `course`:
0, Level_500
1, Level_500
2, Level_500

CREATE TABLE `person` (
  p_id INTEGER,
  professor INTEGER,
  student INTEGER,
  hasPosition TEXT,
  inPhase TEXT,
  yearsInProgram TEXT
);
Sample rows from `person`:
3, 0, 1, 0, 0, 0
4, 0, 1, 0, 0, 0
5, 1, 0, Faculty, 0, 0

CREATE TABLE `advisedBy` (
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id),
  p_id_dummy INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `advisedBy`:
96, 5
118, 5
183, 5

CREATE TABLE `taughtBy` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `taughtBy`:
0, 40
1, 40
2, 180

","person, taughtby","person.p_id, taughtby.p_id, person.professor, person.hasposition"
retail_world,"How many orders did ""Laughing Bacchus Wine Cellars"" make?",SELECT COUNT(t2.orderid) FROM customers as t1 inner JOIN orders as t2 ON t1.customerid = t2.customerid WHERE t1.companyname = 'Laughing Bacchus Wine Cellars',"CREATE TABLE `customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

","customers, orders","orders.orderid, customers.customerid, orders.customerid, customers.companyname"
olympics,Calculate the average weight of male athletes from Tonga.,SELECT AVG(t3.weight) FROm noc_region as t1 inner JOIN person_region as t2 ON t1.id = t2.region_id inner JOIN person as t3 ON t2.person_id = t3.id WHERE t1.region_name = 'Tonga' AND t3.gender = 'm',"CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

","CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `medal` (
  id INTEGER,
  medal_name TEXT
);
Sample rows from `medal`:
1, Gold
2, Silver
3, Bronze

CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `sport` (
  id INTEGER,
  sport_name TEXT
);
Sample rows from `sport`:
1, Aeronautics
2, Alpine Skiing
3, Alpinism

CREATE TABLE `event` (
  id INTEGER,
  sport_id INTEGER REFERENCES sport(id),
  event_name TEXT
);
Sample rows from `event`:
1, 9, Basketball Men's Basketball
2, 33, Judo Men's Extra-Lightweight
3, 25, Football Men's Football

CREATE TABLE `competitor_event` (
  event_id INTEGER REFERENCES event(id),
  competitor_id INTEGER REFERENCES games_competitor(id),
  medal_id INTEGER REFERENCES medal(id)
);
Sample rows from `competitor_event`:
1, 1, 4
2, 2, 4
3, 3, 4

","noc_region, person_region, person","person.weight, noc_region.id, person_region.region_id, person_region.person_id, person.id, noc_region.region_name, person.gender"
law_episode,How many stars did the episodes in which Donna Villella worked?,SELECT COUNT(t3.person_id) FROM episode as t1 inner JOIN credit as t2 ON t1.episode_id = t2.episode_id inner JOIN person as t3 ON t3.person_id = t2.person_id WHERE t3.name = 'Donna Villella',"CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `credit` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  person_id TEXT PRIMARY KEY REFERENCES Person(person_id),
  category TEXT,
  role TEXT,
  credited TEXT
);
Sample rows from `credit`:
tt0629204, nm0226352, Additional Crew, technical advisor, true
tt0629204, nm0506974, Additional Crew, production accountant, true
tt0629204, nm4103116, Additional Crew, production accountant, true

CREATE TABLE `person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
tt0629239, nun
tt0629239, priest
tt0629420, police officer

CREATE TABLE `Person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  series TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  person_id TEXT REFERENCES Person(person_id),
  role TEXT,
  result TEXT
);
Sample rows from `Award`:
258, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0937725, None, Winner
259, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0792309, None, Winner
260, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0049569, None, Winner

CREATE TABLE `Credit` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  person_id TEXT PRIMARY KEY REFERENCES Person(person_id),
  category TEXT,
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
tt0629204, nm0226352, Additional Crew, technical advisor, true
tt0629204, nm0506974, Additional Crew, production accountant, true
tt0629204, nm4103116, Additional Crew, production accountant, true

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
tt0629204, 10, 36, 17.7
tt0629204, 9, 39, 19.2
tt0629204, 8, 64, 31.5

","episode, credit, person","person.person_id, episode.episode_id, credit.episode_id, credit.person_id, person.name"
superstore,Calculate the difference between the total sales in the East superstore and the total sales in the West superstore.,SELECT SUM(t1.sales) - SUM(t2.sales) as difference FROM east_superstore as t1 inner JOIN west_superstore as t2 ON t1.`customer id` = t2.`customer id`,"CREATE TABLE `east_superstore` (
  Row ID INTEGER,
  Order ID TEXT,
  Order Date DATE,
  Ship Date DATE,
  Ship Mode TEXT,
  Customer ID TEXT REFERENCES people(Customer ID),
  Region TEXT REFERENCES product(Region) REFERENCES people(Region),
  Product ID TEXT REFERENCES product(Product ID),
  Sales REAL,
  Quantity INTEGER,
  Discount REAL,
  Profit REAL
);
Sample rows from `east_superstore`:
4647, CA-2011-141817, 2013-01-05, 2013-01-12, Standard Class, MB-18085, East, OFF-AR-10003478, 19.536, 3, 0.2, 4.884
4648, CA-2011-130092, 2013-01-11, 2013-01-14, First Class, SV-20365, East, FUR-FU-10000010, 9.94, 2, 0.0, 3.0814
4649, CA-2011-118192, 2013-01-13, 2013-01-18, Standard Class, MM-17920, East, OFF-PA-10002947, 37.408, 7, 0.2, 13.0928

CREATE TABLE `west_superstore` (
  Row ID INTEGER,
  Order ID TEXT,
  Order Date DATE,
  Ship Date DATE,
  Ship Mode TEXT,
  Customer ID TEXT REFERENCES people(Customer ID),
  Region TEXT REFERENCES product(Region) REFERENCES people(Region),
  Product ID TEXT REFERENCES product(Product ID),
  Sales REAL,
  Quantity INTEGER,
  Discount REAL,
  Profit REAL
);
Sample rows from `west_superstore`:
13583, CA-2011-130813, 2013-01-06, 2013-01-08, Second Class, LS-17230, West, OFF-PA-10002005, 19.44, 3, 0.0, 9.3312
13584, CA-2011-157147, 2013-01-13, 2013-01-18, Standard Class, BD-11605, West, OFF-ST-10000078, 1325.85, 5, 0.0, 238.653
13585, CA-2011-157147, 2013-01-13, 2013-01-18, Standard Class, BD-11605, West, FUR-BO-10003034, 333.999, 3, 0.15, 3.9294

","CREATE TABLE `people` (
  Customer ID TEXT PRIMARY KEY,
  Customer Name TEXT,
  Segment TEXT,
  Country TEXT,
  City TEXT,
  State TEXT,
  Postal Code INTEGER,
  Region TEXT PRIMARY KEY
);
Sample rows from `people`:
AA-10315, Alex Avila, Consumer, United States, Round Rock, Texas, 78664, Central
AA-10375, Allen Armold, Consumer, United States, Omaha, Nebraska, 68104, Central
AA-10480, Andrew Allen, Consumer, United States, Springfield, Missouri, 65807, Central

CREATE TABLE `product` (
  Product ID TEXT PRIMARY KEY,
  Product Name TEXT,
  Category TEXT,
  Sub-Category TEXT,
  Region TEXT PRIMARY KEY
);
Sample rows from `product`:
FUR-BO-10000330, Sauder Camden County Barrister Bookcase, Planked Cherry Finish, Furniture, Bookcases, West
FUR-BO-10000362, Sauder Inglewood Library Bookcases, Furniture, Bookcases, West
FUR-BO-10000468, O'Sullivan 2-Shelf Heavy-Duty Bookcases, Furniture, Bookcases, West

CREATE TABLE `central_superstore` (
  Row ID INTEGER,
  Order ID TEXT,
  Order Date DATE,
  Ship Date DATE,
  Ship Mode TEXT,
  Customer ID TEXT REFERENCES people(Customer ID),
  Region TEXT REFERENCES product(Region) REFERENCES people(Region),
  Product ID TEXT REFERENCES product(Product ID),
  Sales REAL,
  Quantity INTEGER,
  Discount REAL,
  Profit REAL
);
Sample rows from `central_superstore`:
1, CA-2011-103800, 2013-01-03, 2013-01-07, Standard Class, DP-13000, Central, OFF-PA-10000174, 16.448, 2, 0.2, 5.5512
2, CA-2011-112326, 2013-01-04, 2013-01-08, Standard Class, PO-19195, Central, OFF-LA-10003223, 11.784, 3, 0.2, 4.2717
3, CA-2011-112326, 2013-01-04, 2013-01-08, Standard Class, PO-19195, Central, OFF-ST-10002743, 272.736, 3, 0.2, -64.7748

CREATE TABLE `east_superstore` (
  Row ID INTEGER,
  Order ID TEXT,
  Order Date DATE,
  Ship Date DATE,
  Ship Mode TEXT,
  Customer ID TEXT REFERENCES people(Customer ID),
  Region TEXT REFERENCES product(Region) REFERENCES people(Region),
  Product ID TEXT REFERENCES product(Product ID),
  Sales REAL,
  Quantity INTEGER,
  Discount REAL,
  Profit REAL
);
Sample rows from `east_superstore`:
4647, CA-2011-141817, 2013-01-05, 2013-01-12, Standard Class, MB-18085, East, OFF-AR-10003478, 19.536, 3, 0.2, 4.884
4648, CA-2011-130092, 2013-01-11, 2013-01-14, First Class, SV-20365, East, FUR-FU-10000010, 9.94, 2, 0.0, 3.0814
4649, CA-2011-118192, 2013-01-13, 2013-01-18, Standard Class, MM-17920, East, OFF-PA-10002947, 37.408, 7, 0.2, 13.0928

CREATE TABLE `south_superstore` (
  Row ID INTEGER,
  Order ID TEXT,
  Order Date DATE,
  Ship Date DATE,
  Ship Mode TEXT,
  Customer ID TEXT REFERENCES people(Customer ID),
  Region TEXT REFERENCES product(Region) REFERENCES people(Region),
  Product ID TEXT REFERENCES product(Product ID),
  Sales REAL,
  Quantity INTEGER,
  Discount REAL,
  Profit REAL
);
Sample rows from `south_superstore`:
10343, CA-2011-106054, 2013-01-06, 2013-01-07, First Class, JO-15145, South, OFF-AR-10002399, 12.78, 3, 0.0, 5.2398
10344, CA-2011-167199, 2013-01-06, 2013-01-10, Standard Class, ME-17320, South, FUR-CH-10004063, 2573.82, 9, 0.0, 746.4078
10345, CA-2011-167199, 2013-01-06, 2013-01-10, Standard Class, ME-17320, South, OFF-BI-10004632, 609.98, 2, 0.0, 274.491

CREATE TABLE `west_superstore` (
  Row ID INTEGER,
  Order ID TEXT,
  Order Date DATE,
  Ship Date DATE,
  Ship Mode TEXT,
  Customer ID TEXT REFERENCES people(Customer ID),
  Region TEXT REFERENCES product(Region) REFERENCES people(Region),
  Product ID TEXT REFERENCES product(Product ID),
  Sales REAL,
  Quantity INTEGER,
  Discount REAL,
  Profit REAL
);
Sample rows from `west_superstore`:
13583, CA-2011-130813, 2013-01-06, 2013-01-08, Second Class, LS-17230, West, OFF-PA-10002005, 19.44, 3, 0.0, 9.3312
13584, CA-2011-157147, 2013-01-13, 2013-01-18, Standard Class, BD-11605, West, OFF-ST-10000078, 1325.85, 5, 0.0, 238.653
13585, CA-2011-157147, 2013-01-13, 2013-01-18, Standard Class, BD-11605, West, FUR-BO-10003034, 333.999, 3, 0.15, 3.9294

","east_superstore, west_superstore","east_superstore.sales, west_superstore.sales, east_superstore.customer id, west_superstore.customer id"
books,"What is the name of the publisher of the book ""The Illuminati""?",SELECT t2.publisher_name FROM book as t1 inner JOIN publisher as t2 ON t1.publisher_id = t2.publisher_id WHERE t1.title = 'The Illuminati',"CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","book, publisher","publisher.publisher_name, book.publisher_id, publisher.publisher_id, book.title"
student_loan,State name of unemployed students who have the longest duration of absense from school.,SELECT t1.name FROM longest_absense_from_school as t1 inner JOIN unemployed as t2 ON t1.name = t2.name ORDER BY t1.month DESC LIMIT 1,"CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

","longest_absense_from_school, unemployed","longest_absense_from_school.name, unemployed.name, longest_absense_from_school.month"
music_platform_2,List all reviews created in May 2019. State the title of podcast and review rating.,"SELECT DISTINCT t1.title, t2.rating FROM podcasts as t1 inner JOIN reviews as t2 ON t2.podcast_id = t1.podcast_id WHERE t2.created_at LIKE '2019-05-%'","CREATE TABLE `podcasts` (
  podcast_id TEXT PRIMARY KEY,
  itunes_id INTEGER,
  slug TEXT,
  itunes_url TEXT,
  title TEXT
);
Sample rows from `podcasts`:
a00018b54eb342567c94dacfb2a3e504, 1313466221, scaling-global, https://podcasts.apple.com/us/podcast/scaling-global/id1313466221, Scaling Global
a00043d34e734b09246d17dc5d56f63c, 158973461, cornerstone-baptist-church-of-orlando, https://podcasts.apple.com/us/podcast/cornerstone-baptist-church-of-orlando/id158973461, Cornerstone Baptist Church of Orlando
a0004b1ef445af9dc84dad1e7821b1e3, 139076942, mystery-dancing-in-the-dark, https://podcasts.apple.com/us/podcast/mystery-dancing-in-the-dark/id139076942, Mystery: Dancing in the Dark

CREATE TABLE `reviews` (
  podcast_id TEXT REFERENCES podcasts(None),
  title TEXT,
  content TEXT,
  rating INTEGER,
  author_id TEXT,
  created_at TEXT
);
Sample rows from `reviews`:
c61aa81c9b929a66f0c1db6cbe5d8548, really interesting!, Thanks for providing these insights.  Really enjoy the variety and depth -- please keep them coming!, 5, F7E5A318989779D, 2018-04-24T12:05:16-07:00
c61aa81c9b929a66f0c1db6cbe5d8548, Must listen for anyone interested in the arts!!!, Super excited to see this podcast grow. So many fun topics to talk about...Shari is really engaging. Definitely subscribing and would recommend to anyone interested in the arts!!, 5, F6BF5472689BD12, 2018-05-09T18:14:32-07:00
ad4f2bf69c72b8db75978423c25f379e, nauseatingly left, I'm a liberal myself, but its pretty obvious and annoying that they're trying to push their beliefs on the listeners. Get a more politically diverse production staff, we like to see issues from multiple point of views not just yours., 1, 1AB95B8E6E1309E, 2019-06-11T14:53:39-07:00

","CREATE TABLE `runs` (
  run_at TEXT,
  max_rowid INTEGER,
  reviews_added INTEGER
);
Sample rows from `runs`:
2021-05-10 02:53:00, 3266481, 1215223
2021-06-06 21:34:36, 3300773, 13139
2021-07-02 18:04:55, 3329699, 11561

CREATE TABLE `podcasts` (
  podcast_id TEXT PRIMARY KEY,
  itunes_id INTEGER,
  slug TEXT,
  itunes_url TEXT,
  title TEXT
);
Sample rows from `podcasts`:
a00018b54eb342567c94dacfb2a3e504, 1313466221, scaling-global, https://podcasts.apple.com/us/podcast/scaling-global/id1313466221, Scaling Global
a00043d34e734b09246d17dc5d56f63c, 158973461, cornerstone-baptist-church-of-orlando, https://podcasts.apple.com/us/podcast/cornerstone-baptist-church-of-orlando/id158973461, Cornerstone Baptist Church of Orlando
a0004b1ef445af9dc84dad1e7821b1e3, 139076942, mystery-dancing-in-the-dark, https://podcasts.apple.com/us/podcast/mystery-dancing-in-the-dark/id139076942, Mystery: Dancing in the Dark

CREATE TABLE `reviews` (
  podcast_id TEXT REFERENCES podcasts(None),
  title TEXT,
  content TEXT,
  rating INTEGER,
  author_id TEXT,
  created_at TEXT
);
Sample rows from `reviews`:
c61aa81c9b929a66f0c1db6cbe5d8548, really interesting!, Thanks for providing these insights.  Really enjoy the variety and depth -- please keep them coming!, 5, F7E5A318989779D, 2018-04-24T12:05:16-07:00
c61aa81c9b929a66f0c1db6cbe5d8548, Must listen for anyone interested in the arts!!!, Super excited to see this podcast grow. So many fun topics to talk about...Shari is really engaging. Definitely subscribing and would recommend to anyone interested in the arts!!, 5, F6BF5472689BD12, 2018-05-09T18:14:32-07:00
ad4f2bf69c72b8db75978423c25f379e, nauseatingly left, I'm a liberal myself, but its pretty obvious and annoying that they're trying to push their beliefs on the listeners. Get a more politically diverse production staff, we like to see issues from multiple point of views not just yours., 1, 1AB95B8E6E1309E, 2019-06-11T14:53:39-07:00

CREATE TABLE `categories` (
  podcast_id TEXT PRIMARY KEY REFERENCES podcasts(None),
  category TEXT PRIMARY KEY
);
Sample rows from `categories`:
c61aa81c9b929a66f0c1db6cbe5d8548, arts
c61aa81c9b929a66f0c1db6cbe5d8548, arts-performing-arts
c61aa81c9b929a66f0c1db6cbe5d8548, music

","podcasts, reviews","podcasts.title, reviews.rating, reviews.podcast_id, podcasts.podcast_id, reviews.created_at"
legislator,Current legislator Roger F. Wicker has not been a representative for how many terms?,SELECT SUM(case when t1.official_full_name = 'Roger F. Wicker' then 1 else 0 end) as count FROM current as t1 inner JOIN `current-terms` as t2 ON t1.bioguide_id = t2.bioguide WHERE t2.district is null OR t2.district = '',"CREATE TABLE `current` (
  ballotpedia_id TEXT,
  bioguide_id TEXT PRIMARY KEY,
  birthday_bio DATE,
  cspan_id REAL PRIMARY KEY,
  fec_id TEXT,
  first_name TEXT,
  gender_bio TEXT,
  google_entity_id_id TEXT,
  govtrack_id INTEGER,
  house_history_id REAL,
  icpsr_id REAL,
  last_name TEXT,
  lis_id TEXT,
  maplight_id REAL,
  middle_name TEXT,
  nickname_name TEXT,
  official_full_name TEXT,
  opensecrets_id TEXT,
  religion_bio TEXT,
  suffix_name TEXT,
  thomas_id INTEGER,
  votesmart_id REAL,
  wikidata_id TEXT,
  wikipedia_id TEXT
);
Sample rows from `current`:
Sherrod Brown, B000944, 1952-11-09, 5051.0, ['H2OH13033', 'S6OH00163'], Sherrod, M, kg:/m/034s80, 400050, 9996.0, 29389.0, Brown, S307, 168.0, None, None, Sherrod Brown, N00003535, Lutheran, None, 136, 27018.0, Q381880, Sherrod Brown
Maria Cantwell, C000127, 1958-10-13, 26137.0, ['S8WA00194', 'H2WA01054'], Maria, F, kg:/m/01x68t, 300018, 10608.0, 39310.0, Cantwell, S275, 544.0, None, None, Maria Cantwell, N00007836, Roman Catholic, None, 172, 27122.0, Q22250, Maria Cantwell
Ben Cardin, C000141, 1943-10-05, 4004.0, ['H6MD03177', 'S6MD03177'], Benjamin, M, kg:/m/025k3k, 400064, 10629.0, 15408.0, Cardin, S308, 182.0, L., None, Benjamin L. Cardin, N00001955, Jewish, None, 174, 26888.0, Q723295, Ben Cardin

CREATE TABLE `current-terms` (
  address TEXT,
  bioguide TEXT PRIMARY KEY REFERENCES current(bioguide_id),
  caucus TEXT,
  chamber TEXT,
  class REAL,
  contact_form TEXT,
  district REAL,
  end TEXT PRIMARY KEY,
  fax TEXT,
  last TEXT,
  name TEXT,
  office TEXT,
  party TEXT,
  party_affiliations TEXT,
  phone TEXT,
  relation TEXT,
  rss_url TEXT,
  start TEXT,
  state TEXT,
  state_rank TEXT,
  title TEXT,
  type TEXT,
  url TEXT
);
Sample rows from `current-terms`:
None, B000944, None, None, None, None, 13.0, 1995-01-03, None, None, None, None, Democrat, None, None, None, None, 1993-01-05, OH, None, None, rep, None
None, B000944, None, None, None, None, 13.0, 1997-01-03, None, None, None, None, Democrat, None, None, None, None, 1995-01-04, OH, None, None, rep, None
None, B000944, None, None, None, None, 13.0, 1999-01-03, None, None, None, None, Democrat, None, None, None, None, 1997-01-07, OH, None, None, rep, None

","CREATE TABLE `current` (
  ballotpedia_id TEXT,
  bioguide_id TEXT PRIMARY KEY,
  birthday_bio DATE,
  cspan_id REAL PRIMARY KEY,
  fec_id TEXT,
  first_name TEXT,
  gender_bio TEXT,
  google_entity_id_id TEXT,
  govtrack_id INTEGER,
  house_history_id REAL,
  icpsr_id REAL,
  last_name TEXT,
  lis_id TEXT,
  maplight_id REAL,
  middle_name TEXT,
  nickname_name TEXT,
  official_full_name TEXT,
  opensecrets_id TEXT,
  religion_bio TEXT,
  suffix_name TEXT,
  thomas_id INTEGER,
  votesmart_id REAL,
  wikidata_id TEXT,
  wikipedia_id TEXT
);
Sample rows from `current`:
Sherrod Brown, B000944, 1952-11-09, 5051.0, ['H2OH13033', 'S6OH00163'], Sherrod, M, kg:/m/034s80, 400050, 9996.0, 29389.0, Brown, S307, 168.0, None, None, Sherrod Brown, N00003535, Lutheran, None, 136, 27018.0, Q381880, Sherrod Brown
Maria Cantwell, C000127, 1958-10-13, 26137.0, ['S8WA00194', 'H2WA01054'], Maria, F, kg:/m/01x68t, 300018, 10608.0, 39310.0, Cantwell, S275, 544.0, None, None, Maria Cantwell, N00007836, Roman Catholic, None, 172, 27122.0, Q22250, Maria Cantwell
Ben Cardin, C000141, 1943-10-05, 4004.0, ['H6MD03177', 'S6MD03177'], Benjamin, M, kg:/m/025k3k, 400064, 10629.0, 15408.0, Cardin, S308, 182.0, L., None, Benjamin L. Cardin, N00001955, Jewish, None, 174, 26888.0, Q723295, Ben Cardin

CREATE TABLE `current-terms` (
  address TEXT,
  bioguide TEXT PRIMARY KEY REFERENCES current(bioguide_id),
  caucus TEXT,
  chamber TEXT,
  class REAL,
  contact_form TEXT,
  district REAL,
  end TEXT PRIMARY KEY,
  fax TEXT,
  last TEXT,
  name TEXT,
  office TEXT,
  party TEXT,
  party_affiliations TEXT,
  phone TEXT,
  relation TEXT,
  rss_url TEXT,
  start TEXT,
  state TEXT,
  state_rank TEXT,
  title TEXT,
  type TEXT,
  url TEXT
);
Sample rows from `current-terms`:
None, B000944, None, None, None, None, 13.0, 1995-01-03, None, None, None, None, Democrat, None, None, None, None, 1993-01-05, OH, None, None, rep, None
None, B000944, None, None, None, None, 13.0, 1997-01-03, None, None, None, None, Democrat, None, None, None, None, 1995-01-04, OH, None, None, rep, None
None, B000944, None, None, None, None, 13.0, 1999-01-03, None, None, None, None, Democrat, None, None, None, None, 1997-01-07, OH, None, None, rep, None

CREATE TABLE `historical` (
  ballotpedia_id TEXT,
  bioguide_id TEXT PRIMARY KEY,
  bioguide_previous_id TEXT,
  birthday_bio TEXT,
  cspan_id TEXT,
  fec_id TEXT,
  first_name TEXT,
  gender_bio TEXT,
  google_entity_id_id TEXT,
  govtrack_id INTEGER,
  house_history_alternate_id TEXT,
  house_history_id REAL,
  icpsr_id REAL,
  last_name TEXT,
  lis_id TEXT,
  maplight_id TEXT,
  middle_name TEXT,
  nickname_name TEXT,
  official_full_name TEXT,
  opensecrets_id TEXT,
  religion_bio TEXT,
  suffix_name TEXT,
  thomas_id TEXT,
  votesmart_id TEXT,
  wikidata_id TEXT,
  wikipedia_id TEXT
);
Sample rows from `historical`:
None, B000226, None, 1745-04-02, None, None, Richard, M, kg:/m/02pz46, 401222, None, None, 507.0, Bassett, None, None, None, None, None, None, None, None, None, None, Q518823, Richard Bassett (politician)
None, B000546, None, 1742-03-21, None, None, Theodorick, M, kg:/m/033mf4, 401521, None, 9479.0, 786.0, Bland, None, None, None, None, None, None, None, None, None, None, Q1749152, Theodorick Bland (congressman)
None, B001086, None, 1743-06-16, None, None, Aedanus, M, kg:/m/03yccv, 402032, None, 10177.0, 1260.0, Burke, None, None, None, None, None, None, None, None, None, None, Q380504, Aedanus Burke

CREATE TABLE `historical-terms` (
  address TEXT,
  bioguide TEXT PRIMARY KEY REFERENCES historical(bioguide_id),
  chamber TEXT,
  class REAL,
  contact_form TEXT,
  district REAL,
  end TEXT,
  fax TEXT,
  last TEXT,
  middle TEXT,
  name TEXT,
  office TEXT,
  party TEXT,
  party_affiliations TEXT,
  phone TEXT,
  relation TEXT,
  rss_url TEXT,
  start TEXT,
  state TEXT,
  state_rank TEXT,
  title TEXT,
  type TEXT,
  url TEXT
);
Sample rows from `historical-terms`:
None, B000226, None, 2.0, None, None, 1793-03-03, None, None, None, None, None, Anti-Administration, None, None, None, None, 1789-03-04, DE, None, None, sen, None
None, B000546, None, None, None, 9.0, 1791-03-03, None, None, None, None, None, None, None, None, None, None, 1789-03-04, VA, None, None, rep, None
None, B001086, None, None, None, 2.0, 1791-03-03, None, None, None, None, None, None, None, None, None, None, 1789-03-04, SC, None, None, rep, None

CREATE TABLE `social-media` (
  bioguide TEXT PRIMARY KEY REFERENCES current(bioguide_id),
  facebook TEXT,
  facebook_id REAL,
  govtrack REAL,
  instagram TEXT,
  instagram_id REAL,
  thomas INTEGER,
  twitter TEXT,
  twitter_id REAL,
  youtube TEXT,
  youtube_id TEXT
);
Sample rows from `social-media`:
R000600, congresswomanaumuaamata, 1537155909907320.0, 412664.0, None, None, 2222, RepAmata, 3026622545.0, None, UCGdrLQbt1PYDTPsampx4t1A
Y000064, RepToddYoung, 186203844738421.0, 412428.0, None, None, 2019, RepToddYoung, 234128524.0, RepToddYoung, UCuknj4PGn91gHDNAfboZEgQ
E000295, senjoniernst, 351671691660938.0, 412667.0, senjoniernst, 1582702853.0, 2283, SenJoniErnst, 2856787757.0, None, UCLwrmtF_84FIcK3TyMs4MIw

","current, current-terms","current.official_full_name, current.bioguide_id, current-terms.bioguide, current-terms.district"
beer_factory,What is the name of the brand of the beer with the shortest brewed history?,SELECT brandname FROM rootbeerbrand ORDER BY firstbrewedyear DESC LIMIT 1,"CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

","CREATE TABLE `customers` (
  CustomerID INTEGER,
  First TEXT,
  Last TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER,
  Email TEXT,
  PhoneNumber TEXT,
  FirstPurchaseDate DATE,
  SubscribedToEmailList TEXT,
  Gender TEXT
);
Sample rows from `customers`:
101811, Kenneth, Walton, 6715 Commonwealth Dr, Sacramento, CA, 94256, walton.k76@fastmail.com, (916) 918-1561, 2013-05-30, FALSE, M
103508, Madeleine, Jones, 3603 Leola Way, Sacramento, CA, 94258, j_madeleine@gmail.com, (916) 186-9423, 2013-02-06, FALSE, F
104939, Damen, Wheeler, 6740 Branwood Way, Orangevale, CA, 95662, dwheeler@outlook.com, (916) 164-1156, 2013-04-11, FALSE, M

CREATE TABLE `geolocation` (
  LocationID INTEGER REFERENCES location(LocationID),
  Latitude REAL,
  Longitude REAL
);
Sample rows from `geolocation`:
0, 0.0, 0.0
1, 38.566129, -121.426432
2, 38.559615, -121.42243

CREATE TABLE `location` (
  LocationID INTEGER REFERENCES geolocation(LocationID),
  LocationName TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER
);
Sample rows from `location`:
0, LOST, None, None, None, None
1, Sac State American River Courtyard, 6000 J St, Sacramento, CA, 95819
2, Sac State Union, 6000 J St, Sacramento, CA, 95819

CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

CREATE TABLE `rootbeerreview` (
  CustomerID INTEGER PRIMARY KEY REFERENCES customers(CustomerID),
  BrandID INTEGER PRIMARY KEY REFERENCES rootbeerbrand(BrandID),
  StarRating INTEGER,
  ReviewDate DATE,
  Review TEXT
);
Sample rows from `rootbeerreview`:
101811, 10012, 5, 2013-07-15, None
101811, 10014, 1, 2013-07-08, None
101811, 10015, 3, 2013-07-25, None

CREATE TABLE `transaction` (
  TransactionID INTEGER,
  CreditCardNumber INTEGER,
  CustomerID INTEGER REFERENCES customers(CustomerID),
  TransactionDate DATE,
  CreditCardType TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  RootBeerID INTEGER REFERENCES rootbeer(RootBeerID),
  PurchasePrice REAL
);
Sample rows from `transaction`:
100000, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105661, 3.0
100001, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105798, 3.0
100002, 6011583832864739, 864896, 2014-07-07, Discover, 2, 102514, 3.0

",rootbeerbrand,"brandname, firstbrewedyear"
legislator,Give the religion of the legislator whose YouTube name is MaxineWaters.,SELECT t2.religion_bio FROM `social-media` as t1 inner JOIN current as t2 ON t1.bioguide = t2.bioguide_id WHERE t1.youtube = 'MaxineWaters',"CREATE TABLE `social-media` (
  bioguide TEXT PRIMARY KEY REFERENCES current(bioguide_id),
  facebook TEXT,
  facebook_id REAL,
  govtrack REAL,
  instagram TEXT,
  instagram_id REAL,
  thomas INTEGER,
  twitter TEXT,
  twitter_id REAL,
  youtube TEXT,
  youtube_id TEXT
);
Sample rows from `social-media`:
R000600, congresswomanaumuaamata, 1537155909907320.0, 412664.0, None, None, 2222, RepAmata, 3026622545.0, None, UCGdrLQbt1PYDTPsampx4t1A
Y000064, RepToddYoung, 186203844738421.0, 412428.0, None, None, 2019, RepToddYoung, 234128524.0, RepToddYoung, UCuknj4PGn91gHDNAfboZEgQ
E000295, senjoniernst, 351671691660938.0, 412667.0, senjoniernst, 1582702853.0, 2283, SenJoniErnst, 2856787757.0, None, UCLwrmtF_84FIcK3TyMs4MIw

CREATE TABLE `current` (
  ballotpedia_id TEXT,
  bioguide_id TEXT PRIMARY KEY,
  birthday_bio DATE,
  cspan_id REAL PRIMARY KEY,
  fec_id TEXT,
  first_name TEXT,
  gender_bio TEXT,
  google_entity_id_id TEXT,
  govtrack_id INTEGER,
  house_history_id REAL,
  icpsr_id REAL,
  last_name TEXT,
  lis_id TEXT,
  maplight_id REAL,
  middle_name TEXT,
  nickname_name TEXT,
  official_full_name TEXT,
  opensecrets_id TEXT,
  religion_bio TEXT,
  suffix_name TEXT,
  thomas_id INTEGER,
  votesmart_id REAL,
  wikidata_id TEXT,
  wikipedia_id TEXT
);
Sample rows from `current`:
Sherrod Brown, B000944, 1952-11-09, 5051.0, ['H2OH13033', 'S6OH00163'], Sherrod, M, kg:/m/034s80, 400050, 9996.0, 29389.0, Brown, S307, 168.0, None, None, Sherrod Brown, N00003535, Lutheran, None, 136, 27018.0, Q381880, Sherrod Brown
Maria Cantwell, C000127, 1958-10-13, 26137.0, ['S8WA00194', 'H2WA01054'], Maria, F, kg:/m/01x68t, 300018, 10608.0, 39310.0, Cantwell, S275, 544.0, None, None, Maria Cantwell, N00007836, Roman Catholic, None, 172, 27122.0, Q22250, Maria Cantwell
Ben Cardin, C000141, 1943-10-05, 4004.0, ['H6MD03177', 'S6MD03177'], Benjamin, M, kg:/m/025k3k, 400064, 10629.0, 15408.0, Cardin, S308, 182.0, L., None, Benjamin L. Cardin, N00001955, Jewish, None, 174, 26888.0, Q723295, Ben Cardin

","CREATE TABLE `current` (
  ballotpedia_id TEXT,
  bioguide_id TEXT PRIMARY KEY,
  birthday_bio DATE,
  cspan_id REAL PRIMARY KEY,
  fec_id TEXT,
  first_name TEXT,
  gender_bio TEXT,
  google_entity_id_id TEXT,
  govtrack_id INTEGER,
  house_history_id REAL,
  icpsr_id REAL,
  last_name TEXT,
  lis_id TEXT,
  maplight_id REAL,
  middle_name TEXT,
  nickname_name TEXT,
  official_full_name TEXT,
  opensecrets_id TEXT,
  religion_bio TEXT,
  suffix_name TEXT,
  thomas_id INTEGER,
  votesmart_id REAL,
  wikidata_id TEXT,
  wikipedia_id TEXT
);
Sample rows from `current`:
Sherrod Brown, B000944, 1952-11-09, 5051.0, ['H2OH13033', 'S6OH00163'], Sherrod, M, kg:/m/034s80, 400050, 9996.0, 29389.0, Brown, S307, 168.0, None, None, Sherrod Brown, N00003535, Lutheran, None, 136, 27018.0, Q381880, Sherrod Brown
Maria Cantwell, C000127, 1958-10-13, 26137.0, ['S8WA00194', 'H2WA01054'], Maria, F, kg:/m/01x68t, 300018, 10608.0, 39310.0, Cantwell, S275, 544.0, None, None, Maria Cantwell, N00007836, Roman Catholic, None, 172, 27122.0, Q22250, Maria Cantwell
Ben Cardin, C000141, 1943-10-05, 4004.0, ['H6MD03177', 'S6MD03177'], Benjamin, M, kg:/m/025k3k, 400064, 10629.0, 15408.0, Cardin, S308, 182.0, L., None, Benjamin L. Cardin, N00001955, Jewish, None, 174, 26888.0, Q723295, Ben Cardin

CREATE TABLE `current-terms` (
  address TEXT,
  bioguide TEXT PRIMARY KEY REFERENCES current(bioguide_id),
  caucus TEXT,
  chamber TEXT,
  class REAL,
  contact_form TEXT,
  district REAL,
  end TEXT PRIMARY KEY,
  fax TEXT,
  last TEXT,
  name TEXT,
  office TEXT,
  party TEXT,
  party_affiliations TEXT,
  phone TEXT,
  relation TEXT,
  rss_url TEXT,
  start TEXT,
  state TEXT,
  state_rank TEXT,
  title TEXT,
  type TEXT,
  url TEXT
);
Sample rows from `current-terms`:
None, B000944, None, None, None, None, 13.0, 1995-01-03, None, None, None, None, Democrat, None, None, None, None, 1993-01-05, OH, None, None, rep, None
None, B000944, None, None, None, None, 13.0, 1997-01-03, None, None, None, None, Democrat, None, None, None, None, 1995-01-04, OH, None, None, rep, None
None, B000944, None, None, None, None, 13.0, 1999-01-03, None, None, None, None, Democrat, None, None, None, None, 1997-01-07, OH, None, None, rep, None

CREATE TABLE `historical` (
  ballotpedia_id TEXT,
  bioguide_id TEXT PRIMARY KEY,
  bioguide_previous_id TEXT,
  birthday_bio TEXT,
  cspan_id TEXT,
  fec_id TEXT,
  first_name TEXT,
  gender_bio TEXT,
  google_entity_id_id TEXT,
  govtrack_id INTEGER,
  house_history_alternate_id TEXT,
  house_history_id REAL,
  icpsr_id REAL,
  last_name TEXT,
  lis_id TEXT,
  maplight_id TEXT,
  middle_name TEXT,
  nickname_name TEXT,
  official_full_name TEXT,
  opensecrets_id TEXT,
  religion_bio TEXT,
  suffix_name TEXT,
  thomas_id TEXT,
  votesmart_id TEXT,
  wikidata_id TEXT,
  wikipedia_id TEXT
);
Sample rows from `historical`:
None, B000226, None, 1745-04-02, None, None, Richard, M, kg:/m/02pz46, 401222, None, None, 507.0, Bassett, None, None, None, None, None, None, None, None, None, None, Q518823, Richard Bassett (politician)
None, B000546, None, 1742-03-21, None, None, Theodorick, M, kg:/m/033mf4, 401521, None, 9479.0, 786.0, Bland, None, None, None, None, None, None, None, None, None, None, Q1749152, Theodorick Bland (congressman)
None, B001086, None, 1743-06-16, None, None, Aedanus, M, kg:/m/03yccv, 402032, None, 10177.0, 1260.0, Burke, None, None, None, None, None, None, None, None, None, None, Q380504, Aedanus Burke

CREATE TABLE `historical-terms` (
  address TEXT,
  bioguide TEXT PRIMARY KEY REFERENCES historical(bioguide_id),
  chamber TEXT,
  class REAL,
  contact_form TEXT,
  district REAL,
  end TEXT,
  fax TEXT,
  last TEXT,
  middle TEXT,
  name TEXT,
  office TEXT,
  party TEXT,
  party_affiliations TEXT,
  phone TEXT,
  relation TEXT,
  rss_url TEXT,
  start TEXT,
  state TEXT,
  state_rank TEXT,
  title TEXT,
  type TEXT,
  url TEXT
);
Sample rows from `historical-terms`:
None, B000226, None, 2.0, None, None, 1793-03-03, None, None, None, None, None, Anti-Administration, None, None, None, None, 1789-03-04, DE, None, None, sen, None
None, B000546, None, None, None, 9.0, 1791-03-03, None, None, None, None, None, None, None, None, None, None, 1789-03-04, VA, None, None, rep, None
None, B001086, None, None, None, 2.0, 1791-03-03, None, None, None, None, None, None, None, None, None, None, 1789-03-04, SC, None, None, rep, None

CREATE TABLE `social-media` (
  bioguide TEXT PRIMARY KEY REFERENCES current(bioguide_id),
  facebook TEXT,
  facebook_id REAL,
  govtrack REAL,
  instagram TEXT,
  instagram_id REAL,
  thomas INTEGER,
  twitter TEXT,
  twitter_id REAL,
  youtube TEXT,
  youtube_id TEXT
);
Sample rows from `social-media`:
R000600, congresswomanaumuaamata, 1537155909907320.0, 412664.0, None, None, 2222, RepAmata, 3026622545.0, None, UCGdrLQbt1PYDTPsampx4t1A
Y000064, RepToddYoung, 186203844738421.0, 412428.0, None, None, 2019, RepToddYoung, 234128524.0, RepToddYoung, UCuknj4PGn91gHDNAfboZEgQ
E000295, senjoniernst, 351671691660938.0, 412667.0, senjoniernst, 1582702853.0, 2283, SenJoniErnst, 2856787757.0, None, UCLwrmtF_84FIcK3TyMs4MIw

","social-media, current","current.religion_bio, social-media.bioguide, current.bioguide_id, social-media.youtube"
cs_semester,Describe the names and credits of the least difficult courses.,"SELECT name, credit FROM course WHERE diff = ( SELECT MIN(diff) FROM course )","CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

","CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

CREATE TABLE `prof` (
  prof_id INTEGER,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  popularity INTEGER,
  teachingability INTEGER,
  graduate_from TEXT
);
Sample rows from `prof`:
1, Male, Nathaniel, Pigford, npigford0@hku.hk, 3, 5, University of Washington
2, Male, Zhihua, Zhou, zzhihua@hku.hk, 2, 1, Beijing Polytechnic University
3, Male, Ogdon, Zywicki, ozywicki2@hku.hk, 2, 2, University of Boston

CREATE TABLE `RA` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `RA`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

",course,"name, credit, diff"
books,List all books written in Arabic.,SELECT t1.title FROM book as t1 inner JOIN book_language as t2 ON t1.language_id = t2.language_id WHERE t2.language_name = 'Arabic',"CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","book, book_language","book.title, book.language_id, book_language.language_id, book_language.language_name"
retails,"Among the orders made by customers in the household segment, how many of them are urgent?",SELECT COUNT(t1.o_orderpriority) FROM orders as t1 inner JOIN customer as t2 ON t1.o_custkey = t2.c_custkey WHERE t2.c_mktsegment = 'HOUSEHOLD' AND t1.o_orderpriority = '1-URGENT',"CREATE TABLE `orders` (
  o_orderdate DATE,
  o_orderkey INTEGER,
  o_custkey INTEGER REFERENCES customer(c_custkey),
  o_orderpriority TEXT,
  o_shippriority INTEGER,
  o_clerk TEXT,
  o_orderstatus TEXT,
  o_totalprice REAL,
  o_comment TEXT
);
Sample rows from `orders`:
1995-04-19, 1, 73100, 4-NOT SPECIFIED, 0, Clerk#000000916, P, 203198.56, final packages sleep blithely packa
1996-11-04, 2, 92861, 1-URGENT, 0, Clerk#000000373, O, 317719.99, final excuses about the ironic even deposits detect express request
1992-02-15, 3, 44875, 1-URGENT, 0, Clerk#000000485, F, 146674.98, final final deposits cajole foxes. blithely pendin

CREATE TABLE `customer` (
  c_custkey INTEGER,
  c_mktsegment TEXT,
  c_nationkey INTEGER REFERENCES nation(n_nationkey),
  c_name TEXT,
  c_address TEXT,
  c_phone TEXT,
  c_acctbal REAL,
  c_comment TEXT
);
Sample rows from `customer`:
1, BUILDING, 8, Customer#000000001, KwX3hMHjZ6, 937-241-3198, 3560.03, ironic excuses detect slyly silent requests. requests according to the exc
2, MACHINERY, 16, Customer#000000002, ioUn,eqTTXOdo, 906-965-7556, 7550.21, final express accounts mold slyly. ironic accounts cajole! quickly express a
3, FURNITURE, 11, Customer#000000003, YddJqmIdouNT9Yj, 328-750-7603, -926.96, carefully express foxes sleep carefully. pending platelets sleep thinly for t

","CREATE TABLE `customer` (
  c_custkey INTEGER,
  c_mktsegment TEXT,
  c_nationkey INTEGER REFERENCES nation(n_nationkey),
  c_name TEXT,
  c_address TEXT,
  c_phone TEXT,
  c_acctbal REAL,
  c_comment TEXT
);
Sample rows from `customer`:
1, BUILDING, 8, Customer#000000001, KwX3hMHjZ6, 937-241-3198, 3560.03, ironic excuses detect slyly silent requests. requests according to the exc
2, MACHINERY, 16, Customer#000000002, ioUn,eqTTXOdo, 906-965-7556, 7550.21, final express accounts mold slyly. ironic accounts cajole! quickly express a
3, FURNITURE, 11, Customer#000000003, YddJqmIdouNT9Yj, 328-750-7603, -926.96, carefully express foxes sleep carefully. pending platelets sleep thinly for t

CREATE TABLE `lineitem` (
  l_shipdate DATE,
  l_orderkey INTEGER PRIMARY KEY REFERENCES orders(o_orderkey),
  l_discount REAL,
  l_extendedprice REAL,
  l_suppkey INTEGER REFERENCES partsupp(ps_suppkey),
  l_quantity INTEGER,
  l_returnflag TEXT,
  l_partkey INTEGER REFERENCES partsupp(ps_partkey),
  l_linestatus TEXT,
  l_tax REAL,
  l_commitdate DATE,
  l_receiptdate DATE,
  l_shipmode TEXT,
  l_linenumber INTEGER PRIMARY KEY,
  l_shipinstruct TEXT,
  l_comment TEXT
);
Sample rows from `lineitem`:
1995-08-16, 1, 0.1, 58303.08, 6296, 33, N, 98768, O, 0.06, 1995-07-12, 1995-09-14, RAIL, 1, NONE, carefully bo
1995-08-13, 1, 0.09, 16947.7, 8776, 10, N, 23771, O, 0.08, 1995-07-09, 1995-08-27, TRUCK, 2, TAKE BACK RETURN, blithely regular pac
1995-06-17, 1, 0.1, 63642.9, 3859, 34, N, 113858, O, 0.08, 1995-05-22, 1995-06-30, SHIP, 3, COLLECT COD, ironic accounts sleep furiously silen

CREATE TABLE `nation` (
  n_nationkey INTEGER,
  n_name TEXT,
  n_regionkey INTEGER REFERENCES region(r_regionkey),
  n_comment TEXT
);
Sample rows from `nation`:
0, ALGERIA, 0, slyly express pinto beans cajole idly. deposits use blithely unusual packages? fluffily final accounts x-r
1, ARGENTINA, 1, instructions detect blithely stealthily pending packages
2, BRAZIL, 1, blithely unusual deposits are quickly--

CREATE TABLE `orders` (
  o_orderdate DATE,
  o_orderkey INTEGER,
  o_custkey INTEGER REFERENCES customer(c_custkey),
  o_orderpriority TEXT,
  o_shippriority INTEGER,
  o_clerk TEXT,
  o_orderstatus TEXT,
  o_totalprice REAL,
  o_comment TEXT
);
Sample rows from `orders`:
1995-04-19, 1, 73100, 4-NOT SPECIFIED, 0, Clerk#000000916, P, 203198.56, final packages sleep blithely packa
1996-11-04, 2, 92861, 1-URGENT, 0, Clerk#000000373, O, 317719.99, final excuses about the ironic even deposits detect express request
1992-02-15, 3, 44875, 1-URGENT, 0, Clerk#000000485, F, 146674.98, final final deposits cajole foxes. blithely pendin

CREATE TABLE `part` (
  p_partkey INTEGER,
  p_type TEXT,
  p_size INTEGER,
  p_brand TEXT,
  p_name TEXT,
  p_container TEXT,
  p_mfgr TEXT,
  p_retailprice REAL,
  p_comment TEXT
);
Sample rows from `part`:
1, LARGE PLATED TIN, 31, Brand#43, burlywood plum powder puff mint, LG BAG, Manufacturer#4, 901.0, blithely busy reque
2, LARGE POLISHED STEEL, 4, Brand#55, hot spring dodger dim light, LG CASE, Manufacturer#5, 902.0, even ironic requests s
3, STANDARD PLATED COPPER, 30, Brand#53, dark slate grey steel misty, WRAP CASE, Manufacturer#5, 903.0, slyly ironic fox

CREATE TABLE `partsupp` (
  ps_partkey INTEGER PRIMARY KEY REFERENCES part(p_partkey),
  ps_suppkey INTEGER PRIMARY KEY REFERENCES supplier(s_suppkey),
  ps_supplycost REAL,
  ps_availqty INTEGER,
  ps_comment TEXT
);
Sample rows from `partsupp`:
1, 2, 400.75, 1111, carefully ironic deposits use against the carefully unusual accounts. slyly silent platelets nag quickly even
1, 2502, 702.61, 3999, slyly regular accounts serve carefully. asymptotes after the slyly even instructions cajole quickly ironic requests. pending dugouts about the slyly 
1, 5002, 383.95, 7411, carefully special ideas are slyly. slyly ironic epitaphs use pending pending foxes. furiously express pinto beans lose quiet even requests: special final packages ar

CREATE TABLE `region` (
  r_regionkey INTEGER,
  r_name TEXT,
  r_comment TEXT
);
Sample rows from `region`:
0, AFRICA, asymptotes sublate after the r
1, AMERICA, requests affix quickly final tithes. blithely even packages above the a
2, ASIA, accounts cajole carefully according to the carefully exp

CREATE TABLE `supplier` (
  s_suppkey INTEGER,
  s_nationkey INTEGER REFERENCES nation(n_nationkey),
  s_comment TEXT,
  s_name TEXT,
  s_address TEXT,
  s_phone TEXT,
  s_acctbal REAL
);
Sample rows from `supplier`:
1, 13, blithely final pearls are. instructions thra, Supplier#000000001, ,wWs4pnykQOFl8mgVCU8EZMXqZs1w, 800-807-9579, 3082.86
2, 5, requests integrate fluffily. fluffily ironic deposits wake. bold, Supplier#000000002, WkXT6MSAJrp4qWq3W9N, 348-617-6055, 3009.73
3, 22, carefully express ideas shall have to unwin, Supplier#000000003, KjUqa42JEHaRDVQTHV6Yq2h, 471-986-9888, 9159.78

","orders, customer","orders.o_orderpriority, orders.o_custkey, customer.c_custkey, customer.c_mktsegment"
language_corpus,"How many more times does the first word in the biwords pair ""àbac-xinès"" occur than the biwords pair itself?",SELECT occurrences - ( SELECT occurrences FROM biwords WHERE w1st = ( SELECT wid FROM words WHERE word = 'àbac' ) AND w2nd = ( SELECT wid FROM words WHERE word = 'xinès' ) ) as calus FROM words WHERE word = 'àbac',"CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

","CREATE TABLE `langs` (
  lid INTEGER,
  lang TEXT PRIMARY KEY,
  locale TEXT PRIMARY KEY,
  pages INTEGER,
  words INTEGER
);
Sample rows from `langs`:
1, ca, ca_ES, 1129144, 2764996

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
langs, 1
pages, 1129144
words, 2764996

CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `langs_words` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `langs_words`:
1, 1, 242
1, 2, 16841
1, 3, 48700

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

","biwords, words","occurrences, w1st, wid, word, w2nd"
college_completion,Calculate the percentage of Asian students among students of other races who graduated from institution in Alabama in year 2013 within 100 percent of normal / expected time.,SELECT cast(SUM(case when t2.race = 'A' then 1 else 0 end) as real) * 100 / SUM(t2.grad_cohort) FROM institution_details as t1 inner JOIN institution_grads as t2 ON t1.unitid = t2.unitid WHERE t2.year = 2013 AND t1.state = 'Alabama',"CREATE TABLE `institution_details` (
  unitid INTEGER,
  chronname TEXT,
  city TEXT,
  state TEXT,
  level TEXT,
  control TEXT,
  basic TEXT,
  hbcu TEXT,
  flagship TEXT,
  long_x REAL,
  lat_y REAL,
  site TEXT,
  student_count INTEGER,
  awards_per_value REAL,
  awards_per_state_value REAL,
  awards_per_natl_value REAL,
  exp_award_value INTEGER,
  exp_award_state_value INTEGER,
  exp_award_natl_value INTEGER,
  exp_award_percentile INTEGER,
  ft_pct REAL,
  fte_value INTEGER,
  fte_percentile INTEGER,
  med_sat_value TEXT,
  med_sat_percentile TEXT,
  aid_value INTEGER,
  aid_percentile INTEGER,
  endow_value TEXT,
  endow_percentile TEXT,
  grad_100_value REAL,
  grad_100_percentile INTEGER,
  grad_150_value REAL,
  grad_150_percentile INTEGER,
  pell_value REAL,
  pell_percentile INTEGER,
  retain_value REAL,
  retain_percentile INTEGER,
  ft_fac_value REAL,
  ft_fac_percentile INTEGER,
  vsa_year TEXT,
  vsa_grad_after4_first TEXT,
  vsa_grad_elsewhere_after4_first TEXT,
  vsa_enroll_after4_first TEXT,
  vsa_enroll_elsewhere_after4_first TEXT,
  vsa_grad_after6_first TEXT,
  vsa_grad_elsewhere_after6_first TEXT,
  vsa_enroll_after6_first TEXT,
  vsa_enroll_elsewhere_after6_first TEXT,
  vsa_grad_after4_transfer TEXT,
  vsa_grad_elsewhere_after4_transfer TEXT,
  vsa_enroll_after4_transfer TEXT,
  vsa_enroll_elsewhere_after4_transfer TEXT,
  vsa_grad_after6_transfer TEXT,
  vsa_grad_elsewhere_after6_transfer TEXT,
  vsa_enroll_after6_transfer TEXT,
  vsa_enroll_elsewhere_after6_transfer TEXT,
  similar TEXT,
  state_sector_ct INTEGER,
  carnegie_ct INTEGER,
  counted_pct TEXT,
  nicknames TEXT,
  cohort_size INTEGER
);
Sample rows from `institution_details`:
100654, Alabama A&M University, Normal, Alabama, 4-year, Public, Masters Colleges and Universities--larger programs, X, NULL, -86.568502, 34.783368, www.aamu.edu/, 4051, 14.2, 18.8, 21.5, 105331, 75743, 66436, 90, 93.8, 3906, 33, 823, 0, 7142, 72, NULL, NULL, 10.0, 15, 29.1, 14, 71.2, 98, 63.1, 17, 82.8, 89, 2010, 14.7, 2, 36.5, 16.1, 33, 5.3, 12.5, 14.6, 15.7, 1.5, 40.9, 17.2, 36.4, 5.6, 17.2, 11.1, 232937|100724|405997|113607|139533|144005|228501|101480|131876|144759|419509|176479|243197|228529|372222|228431|206695|139366|159993|224147, 13, 386, 99.7|07, NULL, 882
100663, University of Alabama at Birmingham, Birmingham, Alabama, 4-year, Public, Research Universities--very high research activity, NULL, NULL, -86.80917, 33.50223, www.uab.edu, 11502, 20.9, 18.8, 21.5, 136546, 75743, 66436, 97, 72.7, 10032, 67, 1146, 84, 6088, 50, 24136, 93, 29.4, 67, 53.5, 66, 35.1, 39, 80.2, 70, 92.4, 98, 2011, 22.3, 2.9, 34.2, 19.2, 42.6, 10.5, 7.9, 13.1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 196060|180461|201885|145600|209542|236939|126818|230764|104151|104179|157085|171100|153603|141574|155317|110714|137351|126562|243780|196088, 13, 106, 56.0|07, UAB, 1376
100690, Amridge University, Montgomery, Alabama, 4-year, Private not-for-profit, Baccalaureate Colleges--Arts & Sciences, NULL, NULL, -86.17401, 32.362609, www.amridgeuniversity.edu, 322, 29.9, 17.8, 22.5, 58414, 92268, 101725, 30, 62.7, 294, 12, NULL, NULL, 2540, 1, 302, 1, 0.0, 0, 66.7, 72, 68.4, 91, 37.5, 2, 67.2, 71, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 217925|441511|205124|247825|197647|221856|135364|117575|164207|193070|199315|166054|367893|183804|439701|193052|197744|193247|137777|176789, 16, 252, 100.0|07, NULL, 3

CREATE TABLE `institution_grads` (
  unitid INTEGER REFERENCES institution_details(unitid),
  year INTEGER,
  gender TEXT,
  race TEXT,
  cohort TEXT,
  grad_cohort TEXT,
  grad_100 TEXT,
  grad_150 TEXT,
  grad_100_rate TEXT,
  grad_150_rate TEXT
);
Sample rows from `institution_grads`:
100760, 2011, B, X, 2y all, 446, 73, 105, 16.4, 23.5
100760, 2011, M, X, 2y all, 185, NULL, 40, NULL, 21.6
100760, 2011, F, X, 2y all, 261, NULL, 65, NULL, 24.9

","CREATE TABLE `institution_details` (
  unitid INTEGER,
  chronname TEXT,
  city TEXT,
  state TEXT,
  level TEXT,
  control TEXT,
  basic TEXT,
  hbcu TEXT,
  flagship TEXT,
  long_x REAL,
  lat_y REAL,
  site TEXT,
  student_count INTEGER,
  awards_per_value REAL,
  awards_per_state_value REAL,
  awards_per_natl_value REAL,
  exp_award_value INTEGER,
  exp_award_state_value INTEGER,
  exp_award_natl_value INTEGER,
  exp_award_percentile INTEGER,
  ft_pct REAL,
  fte_value INTEGER,
  fte_percentile INTEGER,
  med_sat_value TEXT,
  med_sat_percentile TEXT,
  aid_value INTEGER,
  aid_percentile INTEGER,
  endow_value TEXT,
  endow_percentile TEXT,
  grad_100_value REAL,
  grad_100_percentile INTEGER,
  grad_150_value REAL,
  grad_150_percentile INTEGER,
  pell_value REAL,
  pell_percentile INTEGER,
  retain_value REAL,
  retain_percentile INTEGER,
  ft_fac_value REAL,
  ft_fac_percentile INTEGER,
  vsa_year TEXT,
  vsa_grad_after4_first TEXT,
  vsa_grad_elsewhere_after4_first TEXT,
  vsa_enroll_after4_first TEXT,
  vsa_enroll_elsewhere_after4_first TEXT,
  vsa_grad_after6_first TEXT,
  vsa_grad_elsewhere_after6_first TEXT,
  vsa_enroll_after6_first TEXT,
  vsa_enroll_elsewhere_after6_first TEXT,
  vsa_grad_after4_transfer TEXT,
  vsa_grad_elsewhere_after4_transfer TEXT,
  vsa_enroll_after4_transfer TEXT,
  vsa_enroll_elsewhere_after4_transfer TEXT,
  vsa_grad_after6_transfer TEXT,
  vsa_grad_elsewhere_after6_transfer TEXT,
  vsa_enroll_after6_transfer TEXT,
  vsa_enroll_elsewhere_after6_transfer TEXT,
  similar TEXT,
  state_sector_ct INTEGER,
  carnegie_ct INTEGER,
  counted_pct TEXT,
  nicknames TEXT,
  cohort_size INTEGER
);
Sample rows from `institution_details`:
100654, Alabama A&M University, Normal, Alabama, 4-year, Public, Masters Colleges and Universities--larger programs, X, NULL, -86.568502, 34.783368, www.aamu.edu/, 4051, 14.2, 18.8, 21.5, 105331, 75743, 66436, 90, 93.8, 3906, 33, 823, 0, 7142, 72, NULL, NULL, 10.0, 15, 29.1, 14, 71.2, 98, 63.1, 17, 82.8, 89, 2010, 14.7, 2, 36.5, 16.1, 33, 5.3, 12.5, 14.6, 15.7, 1.5, 40.9, 17.2, 36.4, 5.6, 17.2, 11.1, 232937|100724|405997|113607|139533|144005|228501|101480|131876|144759|419509|176479|243197|228529|372222|228431|206695|139366|159993|224147, 13, 386, 99.7|07, NULL, 882
100663, University of Alabama at Birmingham, Birmingham, Alabama, 4-year, Public, Research Universities--very high research activity, NULL, NULL, -86.80917, 33.50223, www.uab.edu, 11502, 20.9, 18.8, 21.5, 136546, 75743, 66436, 97, 72.7, 10032, 67, 1146, 84, 6088, 50, 24136, 93, 29.4, 67, 53.5, 66, 35.1, 39, 80.2, 70, 92.4, 98, 2011, 22.3, 2.9, 34.2, 19.2, 42.6, 10.5, 7.9, 13.1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 196060|180461|201885|145600|209542|236939|126818|230764|104151|104179|157085|171100|153603|141574|155317|110714|137351|126562|243780|196088, 13, 106, 56.0|07, UAB, 1376
100690, Amridge University, Montgomery, Alabama, 4-year, Private not-for-profit, Baccalaureate Colleges--Arts & Sciences, NULL, NULL, -86.17401, 32.362609, www.amridgeuniversity.edu, 322, 29.9, 17.8, 22.5, 58414, 92268, 101725, 30, 62.7, 294, 12, NULL, NULL, 2540, 1, 302, 1, 0.0, 0, 66.7, 72, 68.4, 91, 37.5, 2, 67.2, 71, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 217925|441511|205124|247825|197647|221856|135364|117575|164207|193070|199315|166054|367893|183804|439701|193052|197744|193247|137777|176789, 16, 252, 100.0|07, NULL, 3

CREATE TABLE `institution_grads` (
  unitid INTEGER REFERENCES institution_details(unitid),
  year INTEGER,
  gender TEXT,
  race TEXT,
  cohort TEXT,
  grad_cohort TEXT,
  grad_100 TEXT,
  grad_150 TEXT,
  grad_100_rate TEXT,
  grad_150_rate TEXT
);
Sample rows from `institution_grads`:
100760, 2011, B, X, 2y all, 446, 73, 105, 16.4, 23.5
100760, 2011, M, X, 2y all, 185, NULL, 40, NULL, 21.6
100760, 2011, F, X, 2y all, 261, NULL, 65, NULL, 24.9

CREATE TABLE `state_sector_grads` (
  stateid INTEGER REFERENCES state_sector_details(stateid),
  state TEXT REFERENCES institution_details(state),
  state_abbr TEXT,
  control TEXT,
  level TEXT,
  year INTEGER,
  gender TEXT,
  race TEXT,
  cohort TEXT,
  grad_cohort TEXT,
  grad_100 TEXT,
  grad_150 TEXT,
  grad_100_rate TEXT,
  grad_150_rate TEXT,
  grad_cohort_ct INTEGER
);
Sample rows from `state_sector_grads`:
1, Alabama, AL, Private for-profit, 4-year, 2011, B, A, 4y bach, 0, 0, 0, NULL, NULL, 9
1, Alabama, AL, Private for-profit, 4-year, 2011, B, Ai, 4y bach, 1, 0, 0, 0, 0, 9
1, Alabama, AL, Private for-profit, 4-year, 2011, B, B, 4y bach, 51, 2, 3, 3.9, 5.9, 9

CREATE TABLE `state_sector_details` (
  stateid INTEGER PRIMARY KEY,
  state TEXT REFERENCES institution_details(state),
  state_post TEXT,
  level TEXT PRIMARY KEY,
  control TEXT PRIMARY KEY,
  schools_count INTEGER,
  counted_pct TEXT,
  awards_per_state_value TEXT,
  awards_per_natl_value REAL,
  exp_award_state_value TEXT,
  exp_award_natl_value INTEGER,
  state_appr_value TEXT,
  state_appr_rank TEXT,
  grad_rate_rank TEXT,
  awards_per_rank TEXT
);
Sample rows from `state_sector_details`:
0, United States, U.S., 4-year, Public, 632, NULL, NULL, 21.5, NULL, 66436, NULL, NULL, 23, NULL
0, United States, U.S., 4-year, Private not-for-profit, 1180, NULL, NULL, 22.5, NULL, 101725, NULL, NULL, 18, NULL
0, United States, U.S., 4-year, Private for-profit, 527, NULL, NULL, 24.6, NULL, 38763, NULL, NULL, 8, NULL

","institution_details, institution_grads","institution_grads.race, institution_grads.grad_cohort, institution_details.unitid, institution_grads.unitid, institution_grads.year, institution_details.state"
simpson_episodes,"Provide the number of credits, category, role and birthplace of the crew member who was born in North Korea.","SELECT DISTINCT t2.credited, t2.category, t2.role, t1.birth_place FROM person as t1 inner JOIN credit as t2 ON t1.name = t2.person WHERE t1.birth_country = 'North Korea';","CREATE TABLE `person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","person, credit","credit.credited, credit.category, credit.role, person.birth_place, person.name, credit.person, person.birth_country"
movies_4,"Among Warner Bros. Pictures' movies, which title made the highest revenue?",SELECT t3.title FROM production_company as t1 inner JOIN movie_company as t2 ON t1.company_id = t2.company_id inner JOIN movie as t3 ON t2.movie_id = t3.movie_id WHERE t1.company_name = 'Warner Bros. Pictures' ORDER BY t3.revenue DESC LIMIT 1,"CREATE TABLE `production_company` (
  company_id INTEGER,
  company_name TEXT
);
Sample rows from `production_company`:
1, Lucasfilm
2, Walt Disney Pictures
3, Pixar Animation Studios

CREATE TABLE `movie_company` (
  movie_id INTEGER REFERENCES movie(None),
  company_id INTEGER REFERENCES production_company(None)
);
Sample rows from `movie_company`:
5, 14
5, 59
11, 1

CREATE TABLE `movie` (
  movie_id INTEGER,
  title TEXT,
  budget INTEGER,
  homepage TEXT,
  overview TEXT,
  popularity REAL,
  release_date DATE,
  revenue INTEGER,
  runtime INTEGER,
  movie_status TEXT,
  tagline TEXT,
  vote_average REAL,
  vote_count INTEGER
);
Sample rows from `movie`:
5, Four Rooms, 4000000, , It's Ted the Bellhop's first night on the job...and the hotel's very unusual guests are about to place him in some outrageous predicaments. It seems that this evening's room service is serving up one unbelievable happening after another., 22.87623, 1995-12-09, 4300000, 98, Released, Twelve outrageous guests. Four scandalous requests. And one lone bellhop, in his first day on the job, who's in for the wildest New year's Eve of his life., 6.5, 530
11, Star Wars, 11000000, http://www.starwars.com/films/star-wars-episode-iv-a-new-hope, Princess Leia is captured and held hostage by the evil Imperial forces in their effort to take over the galactic Empire. Venturesome Luke Skywalker and dashing captain Han Solo team together with the loveable robot duo R2-D2 and C-3PO to rescue the beauti, 126.393695, 1977-05-25, 775398007, 121, Released, A long time ago in a galaxy far, far away..., 8.1, 6624
12, Finding Nemo, 94000000, http://movies.disney.com/finding-nemo, Nemo, an adventurous young clownfish, is unexpectedly taken from his Great Barrier Reef home to a dentist's office aquarium. It's up to his worrisome father Marlin and a friendly but forgetful fish Dory to bring Nemo home -- meeting vegetarian sharks, sur, 85.688789, 2003-05-30, 940335536, 100, Released, There are 3.7 trillion fish in the ocean, they're looking for one., 7.6, 6122

","CREATE TABLE `country` (
  country_id INTEGER,
  country_iso_code TEXT,
  country_name TEXT
);
Sample rows from `country`:
128, AE, United Arab Emirates
129, AF, Afghanistan
130, AO, Angola

CREATE TABLE `department` (
  department_id INTEGER,
  department_name TEXT
);
Sample rows from `department`:
1, Camera
2, Directing
3, Production

CREATE TABLE `gender` (
  gender_id INTEGER,
  gender TEXT
);
Sample rows from `gender`:
0, Unspecified
1, Female
2, Male

CREATE TABLE `genre` (
  genre_id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
12, Adventure
14, Fantasy
16, Animation

CREATE TABLE `keyword` (
  keyword_id INTEGER,
  keyword_name TEXT
);
Sample rows from `keyword`:
30, individual
65, holiday
74, germany

CREATE TABLE `language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `language`:
24574, en, English
24575, sv, svenska
24576, de, Deutsch

CREATE TABLE `language_role` (
  role_id INTEGER,
  language_role TEXT
);
Sample rows from `language_role`:
1, Original
2, Spoken

CREATE TABLE `movie` (
  movie_id INTEGER,
  title TEXT,
  budget INTEGER,
  homepage TEXT,
  overview TEXT,
  popularity REAL,
  release_date DATE,
  revenue INTEGER,
  runtime INTEGER,
  movie_status TEXT,
  tagline TEXT,
  vote_average REAL,
  vote_count INTEGER
);
Sample rows from `movie`:
5, Four Rooms, 4000000, , It's Ted the Bellhop's first night on the job...and the hotel's very unusual guests are about to place him in some outrageous predicaments. It seems that this evening's room service is serving up one unbelievable happening after another., 22.87623, 1995-12-09, 4300000, 98, Released, Twelve outrageous guests. Four scandalous requests. And one lone bellhop, in his first day on the job, who's in for the wildest New year's Eve of his life., 6.5, 530
11, Star Wars, 11000000, http://www.starwars.com/films/star-wars-episode-iv-a-new-hope, Princess Leia is captured and held hostage by the evil Imperial forces in their effort to take over the galactic Empire. Venturesome Luke Skywalker and dashing captain Han Solo team together with the loveable robot duo R2-D2 and C-3PO to rescue the beauti, 126.393695, 1977-05-25, 775398007, 121, Released, A long time ago in a galaxy far, far away..., 8.1, 6624
12, Finding Nemo, 94000000, http://movies.disney.com/finding-nemo, Nemo, an adventurous young clownfish, is unexpectedly taken from his Great Barrier Reef home to a dentist's office aquarium. It's up to his worrisome father Marlin and a friendly but forgetful fish Dory to bring Nemo home -- meeting vegetarian sharks, sur, 85.688789, 2003-05-30, 940335536, 100, Released, There are 3.7 trillion fish in the ocean, they're looking for one., 7.6, 6122

CREATE TABLE `movie_genres` (
  movie_id INTEGER REFERENCES movie(movie_id),
  genre_id INTEGER REFERENCES genre(genre_id)
);
Sample rows from `movie_genres`:
5, 35
5, 80
11, 12

CREATE TABLE `movie_languages` (
  movie_id INTEGER REFERENCES movie(movie_id),
  language_id INTEGER REFERENCES language(language_id),
  language_role_id INTEGER REFERENCES language_role(role_id)
);
Sample rows from `movie_languages`:
5, 24574, 2
11, 24574, 2
12, 24574, 2

CREATE TABLE `person` (
  person_id INTEGER,
  person_name TEXT
);
Sample rows from `person`:
1, George Lucas
2, Mark Hamill
3, Harrison Ford

CREATE TABLE `movie_crew` (
  movie_id INTEGER REFERENCES movie(movie_id),
  person_id INTEGER REFERENCES person(person_id),
  department_id INTEGER REFERENCES department(department_id),
  job TEXT
);
Sample rows from `movie_crew`:
285, 120, 1, Director of Photography
285, 1704, 2, Director
285, 770, 3, Producer

CREATE TABLE `production_company` (
  company_id INTEGER,
  company_name TEXT
);
Sample rows from `production_company`:
1, Lucasfilm
2, Walt Disney Pictures
3, Pixar Animation Studios

CREATE TABLE `production_country` (
  movie_id INTEGER REFERENCES movie(movie_id),
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `production_country`:
5, 214
11, 214
12, 214

CREATE TABLE `movie_cast` (
  movie_id INTEGER REFERENCES movie(movie_id),
  person_id INTEGER REFERENCES person(person_id),
  character_name TEXT,
  gender_id INTEGER REFERENCES gender(gender_id),
  cast_order INTEGER
);
Sample rows from `movie_cast`:
285, 85, Captain Jack Sparrow, 2, 0
285, 114, Will Turner, 2, 1
285, 116, Elizabeth Swann, 1, 2

CREATE TABLE `movie_keywords` (
  movie_id INTEGER REFERENCES movie(None),
  keyword_id INTEGER REFERENCES keyword(None)
);
Sample rows from `movie_keywords`:
5, 612
5, 613
5, 616

CREATE TABLE `movie_company` (
  movie_id INTEGER REFERENCES movie(None),
  company_id INTEGER REFERENCES production_company(None)
);
Sample rows from `movie_company`:
5, 14
5, 59
11, 1

","production_company, movie_company, movie","movie.title, production_company.company_id, movie_company.company_id, movie_company.movie_id, movie.movie_id, production_company.company_name, movie.revenue"
language_corpus,Calculate the average number of repetitions in the pairs of words in which the first word id is number 34.,SELECT cast(SUM(case when w1st = 34 then 1 else 0 end) as real) / COUNT(w1st) FROM biwords,"CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

","CREATE TABLE `langs` (
  lid INTEGER,
  lang TEXT PRIMARY KEY,
  locale TEXT PRIMARY KEY,
  pages INTEGER,
  words INTEGER
);
Sample rows from `langs`:
1, ca, ca_ES, 1129144, 2764996

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
langs, 1
pages, 1129144
words, 2764996

CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `langs_words` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `langs_words`:
1, 1, 242
1, 2, 16841
1, 3, 48700

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

",biwords,w1st
human_resources,Which position has the highest number of female employees with a 2 year degree?,SELECT t2.positiontitle fROM employee as t1  inner JOIN position as t2  ON t1.positionid = t2.positionid WHERE t2.educationrequired = '2 year degree' AND t1.gender = 'f' GROUP BY t2.positiontitle ORDER BY COUNT(t2.positiontitle) DESC LIMIT 1,"CREATE TABLE `employee` (
  ssn TEXT PRIMARY KEY,
  lastname TEXT,
  firstname TEXT,
  hiredate TEXT,
  salary TEXT,
  gender TEXT,
  performance TEXT,
  positionID INTEGER REFERENCES position(positionID),
  locationID INTEGER REFERENCES location(locationID)
);
Sample rows from `employee`:
000-01-0000, Milgrom, Patricia, 10/1/04, US$57,500.00, F, Average, 2, 2
000-02-2222, Adams, Sandy, 1/15/01, US$19,500.00, F, Average, 3, 1
109-87-6543, Wood, Emily, 3/12/97, US$69,000.00, F, Average, 2, 5

CREATE TABLE `position` (
  positionID INTEGER,
  positiontitle TEXT,
  educationrequired TEXT,
  minsalary TEXT,
  maxsalary TEXT
);
Sample rows from `position`:
1, Account Representative, 4 year degree, US$25,000.00, US$75,000.00
2, Manager, 4 year degree, US$50,000.00, US$150,000.00
3, Trainee, 2 year degree, US$18,000.00, US$25,000.00

","CREATE TABLE `location` (
  locationID INTEGER,
  locationcity TEXT,
  address TEXT,
  state TEXT,
  zipcode INTEGER,
  officephone TEXT
);
Sample rows from `location`:
1, Atlanta, 450 Peachtree Rd, GA, 30316, (404)333-5555
2, Boston, 3 Commons Blvd, MA, 2190, (617)123-4444
3, Chicago, 500 Loop Highway, IL, 60620, (312)444-6666

CREATE TABLE `position` (
  positionID INTEGER,
  positiontitle TEXT,
  educationrequired TEXT,
  minsalary TEXT,
  maxsalary TEXT
);
Sample rows from `position`:
1, Account Representative, 4 year degree, US$25,000.00, US$75,000.00
2, Manager, 4 year degree, US$50,000.00, US$150,000.00
3, Trainee, 2 year degree, US$18,000.00, US$25,000.00

CREATE TABLE `employee` (
  ssn TEXT PRIMARY KEY,
  lastname TEXT,
  firstname TEXT,
  hiredate TEXT,
  salary TEXT,
  gender TEXT,
  performance TEXT,
  positionID INTEGER REFERENCES position(positionID),
  locationID INTEGER REFERENCES location(locationID)
);
Sample rows from `employee`:
000-01-0000, Milgrom, Patricia, 10/1/04, US$57,500.00, F, Average, 2, 2
000-02-2222, Adams, Sandy, 1/15/01, US$19,500.00, F, Average, 3, 1
109-87-6543, Wood, Emily, 3/12/97, US$69,000.00, F, Average, 2, 5

","employee, position","position.positiontitle, employee.positionid, position.positionid, position.educationrequired, employee.gender"
movie,"Who played the character named ""Chanice Kobolowski""?",SELECT t2.name FROM characters as t1 inner JOIN actor as t2 ON t1.actorid = t2.actorid WHERE t1.`character name` = 'Chanice Kobolowski',"CREATE TABLE `characters` (
  MovieID INTEGER PRIMARY KEY REFERENCES movie(MovieID),
  ActorID INTEGER PRIMARY KEY REFERENCES actor(ActorID),
  Character Name TEXT,
  creditOrder INTEGER,
  pay TEXT,
  screentime TEXT
);
Sample rows from `characters`:
1, 1, James, 1, None, None
1, 2, Mollie, 2, None, None
1, 3, Rosie, 3, None, None

CREATE TABLE `actor` (
  ActorID INTEGER,
  Name TEXT,
  Date of Birth DATE,
  Birth City TEXT,
  Birth Country TEXT,
  Height (Inches) INTEGER,
  Biography TEXT,
  Gender TEXT,
  Ethnicity TEXT,
  NetWorth TEXT
);
Sample rows from `actor`:
1, John Travolta, 1954-02-18, Englewood, USA, 74, John Joseph Travolta was born in Englewood, New Jersey, one of six children of Helen Travolta (n�e Helen Cecilia Burke) and Salvatore/Samuel J. Travolta. His father was of Italian descent and his mother was of Irish ancestry. His father owned a tire repair shop called Travolta Tires in Hillsdale, NJ. Travolta started acting appearing in a local ..., Male, White, $250,000,000.00
2, Kirstie Alley, 1951-01-12, Wichita, USA, 67, None, Female, White, $40,000,000.00
3, Olympia Dukakis, 1931-06-20, Lowell, USA, 63, Long a vital, respected lady of the classic and contemporary stage this grand lady did not become a household name and sought-after film actress until age 56 when she turned in a glorious, Oscar-winning perf as Cher's sardonic mother in the romantic comedy Moonstruck (1987). Since then movie (and TV) fans have discovered what the East coast ..., Female, White, $6,000,000.00

","CREATE TABLE `actor` (
  ActorID INTEGER,
  Name TEXT,
  Date of Birth DATE,
  Birth City TEXT,
  Birth Country TEXT,
  Height (Inches) INTEGER,
  Biography TEXT,
  Gender TEXT,
  Ethnicity TEXT,
  NetWorth TEXT
);
Sample rows from `actor`:
1, John Travolta, 1954-02-18, Englewood, USA, 74, John Joseph Travolta was born in Englewood, New Jersey, one of six children of Helen Travolta (n�e Helen Cecilia Burke) and Salvatore/Samuel J. Travolta. His father was of Italian descent and his mother was of Irish ancestry. His father owned a tire repair shop called Travolta Tires in Hillsdale, NJ. Travolta started acting appearing in a local ..., Male, White, $250,000,000.00
2, Kirstie Alley, 1951-01-12, Wichita, USA, 67, None, Female, White, $40,000,000.00
3, Olympia Dukakis, 1931-06-20, Lowell, USA, 63, Long a vital, respected lady of the classic and contemporary stage this grand lady did not become a household name and sought-after film actress until age 56 when she turned in a glorious, Oscar-winning perf as Cher's sardonic mother in the romantic comedy Moonstruck (1987). Since then movie (and TV) fans have discovered what the East coast ..., Female, White, $6,000,000.00

CREATE TABLE `movie` (
  MovieID INTEGER,
  Title TEXT,
  MPAA Rating TEXT,
  Budget INTEGER,
  Gross INTEGER,
  Release Date TEXT,
  Genre TEXT,
  Runtime INTEGER,
  Rating REAL,
  Rating Count INTEGER,
  Summary TEXT
);
Sample rows from `movie`:
1, Look Who's Talking, PG-13, 7500000, 296000000, 1989-10-12, Romance, 93, 5.9, 73638, After a single, career-minded woman is left on her own to give birth to the child of a married man, she finds a new romantic chance in a cab driver. Meanwhile, the point-of-view of the newborn boy is narrated through voice-over.
2, Driving Miss Daisy, PG, 7500000, 145793296, 1989-12-13, Comedy, 99, 7.4, 91075, An old Jewish woman and her African-American chauffeur in the American South have a relationship that grows and improves over the years.
3, Turner & Hooch, PG, 13000000, 71079915, 1989-07-28, Crime, 100, 7.2, 91415, Det. Scott Turner (Tom Hanks) is an uptight, by-the-book police officer. When his friend Amos Reed (John McIntire), the proprietor of a junkyard, is killed, Turner reluctantly inherits the man's dog. Turner adjusts to life with the dog to help solve a murder case.

CREATE TABLE `characters` (
  MovieID INTEGER PRIMARY KEY REFERENCES movie(MovieID),
  ActorID INTEGER PRIMARY KEY REFERENCES actor(ActorID),
  Character Name TEXT,
  creditOrder INTEGER,
  pay TEXT,
  screentime TEXT
);
Sample rows from `characters`:
1, 1, James, 1, None, None
1, 2, Mollie, 2, None, None
1, 3, Rosie, 3, None, None

","characters, actor","actor.name, characters.actorid, actor.actorid, characters.character name"
law_episode,How many credits have been displayed from episode 1 until 10?,SELECT COUNT(t1.person_id) FROM credit as t1 inner JOIN episode as t2 ON t1.episode_id = t2.episode_id WHERE t1.credited = 'true' AND t2.episode BETWEEN 1 AND 10,"CREATE TABLE `credit` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  person_id TEXT PRIMARY KEY REFERENCES Person(person_id),
  category TEXT,
  role TEXT,
  credited TEXT
);
Sample rows from `credit`:
tt0629204, nm0226352, Additional Crew, technical advisor, true
tt0629204, nm0506974, Additional Crew, production accountant, true
tt0629204, nm4103116, Additional Crew, production accountant, true

CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
tt0629239, nun
tt0629239, priest
tt0629420, police officer

CREATE TABLE `Person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  series TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  person_id TEXT REFERENCES Person(person_id),
  role TEXT,
  result TEXT
);
Sample rows from `Award`:
258, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0937725, None, Winner
259, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0792309, None, Winner
260, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0049569, None, Winner

CREATE TABLE `Credit` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  person_id TEXT PRIMARY KEY REFERENCES Person(person_id),
  category TEXT,
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
tt0629204, nm0226352, Additional Crew, technical advisor, true
tt0629204, nm0506974, Additional Crew, production accountant, true
tt0629204, nm4103116, Additional Crew, production accountant, true

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
tt0629204, 10, 36, 17.7
tt0629204, 9, 39, 19.2
tt0629204, 8, 64, 31.5

","credit, episode","credit.person_id, credit.episode_id, episode.episode_id, credit.credited, episode.episode"
world,What are the districts that belong to the country with the lowest surface area?,SELECT t1.district FROM city as t1 inner JOIN country as t2 ON t1.countrycode = t2.code ORDER BY t2.surfacearea asC LIMIT 1,"CREATE TABLE `city` (
  ID INTEGER,
  Name TEXT,
  CountryCode TEXT REFERENCES Country(Code),
  District TEXT,
  Population INTEGER
);
Sample rows from `city`:
1, Kabul, AFG, Kabol, 1780000
2, Qandahar, AFG, Qandahar, 237500
3, Herat, AFG, Herat, 186800

CREATE TABLE `country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
City, 4079

CREATE TABLE `City` (
  ID INTEGER,
  Name TEXT,
  CountryCode TEXT REFERENCES Country(Code),
  District TEXT,
  Population INTEGER
);
Sample rows from `City`:
1, Kabul, AFG, Kabol, 1780000
2, Qandahar, AFG, Qandahar, 237500
3, Herat, AFG, Herat, 186800

CREATE TABLE `Country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `Country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

CREATE TABLE `CountryLanguage` (
  CountryCode TEXT PRIMARY KEY REFERENCES Country(Code),
  Language TEXT PRIMARY KEY,
  IsOfficial TEXT,
  Percentage REAL
);
Sample rows from `CountryLanguage`:
ABW, Dutch, T, 5.3
ABW, English, F, 9.5
ABW, Papiamento, F, 76.7

","city, country","city.district, city.countrycode, country.code, country.surfacearea"
books,Which customer has the most addresses?,"SELECT t1.first_name, t1.last_name FROM customer as t1 inner JOIN customer_address as t2 ON t1.customer_id = t2.customer_id GROUP BY t1.first_name, t1.last_name ORDER BY COUNT(t2.customer_id) DESC LIMIT 1","CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","customer, customer_address","customer.first_name, customer.last_name, customer.customer_id, customer_address.customer_id"
movie_platform,Please list the titles of the movie lists user 32172230 created when he or she was eligible for trial.,SELECT t1.list_title FROM lists as t1 inner JOIN lists_users as t2 ON t1.list_id = t2.list_id AND t1.user_id = t2.user_id WHERE t1.user_id = 32172230 AND t2.user_eligible_for_trial = 1,"CREATE TABLE `lists` (
  user_id INTEGER REFERENCES lists_users(user_id),
  list_id INTEGER,
  list_title TEXT,
  list_movie_number INTEGER,
  list_update_timestamp_utc TEXT,
  list_creation_timestamp_utc TEXT,
  list_followers INTEGER,
  list_url TEXT,
  list_comments INTEGER,
  list_description TEXT,
  list_cover_image_url TEXT,
  list_first_image_url TEXT,
  list_second_image_url TEXT,
  list_third_image_url TEXT
);
Sample rows from `lists`:
88260493, 1, Films that made your kid sister cry, 5, 2019-01-24 19:16:18, 2009-11-11 00:02:21, 5, http://mubi.com/lists/films-that-made-your-kid-sister-cry, 3, <p>Don’t be such a baby!!</p>
<p><strong>bold</strong></p>, https://assets.mubicdn.net/images/film/3822/image-w1280.jpg?1445914994, https://assets.mubicdn.net/images/film/3822/image-w320.jpg?1445914994, https://assets.mubicdn.net/images/film/506/image-w320.jpg?1543838422, https://assets.mubicdn.net/images/film/485/image-w320.jpg?1575331204
45204418, 2, Headscratchers, 3, 2018-12-03 15:12:20, 2009-11-11 00:05:11, 1, http://mubi.com/lists/headscratchers, 2, <p>Films that need at least two viewings to really make sense.</p>
<p>Or at least… they did for <em>me</em>.</p>, https://assets.mubicdn.net/images/film/4343/image-w1280.jpg?1583331932, https://assets.mubicdn.net/images/film/4343/image-w320.jpg?1583331932, https://assets.mubicdn.net/images/film/159/image-w320.jpg?1548864573, https://assets.mubicdn.net/images/film/142/image-w320.jpg?1544094102
48905025, 3, Sexy Time Movies, 7, 2019-05-30 03:00:07, 2009-11-11 00:20:00, 6, http://mubi.com/lists/sexy-time-movies, 5, <p>Films that get you in the mood…for love. In development.</p>
<p>Remarks</p>
<p><strong>Enter the Void</strong><br>
If you’ve seen <a href=""http://www.theauteurs.com/films/2377"" rel=""nofollow"">Enter the Void</a> then you’ll know why that’s on this list., https://assets.mubicdn.net/images/film/3491/image-w1280.jpg?1564112978, https://assets.mubicdn.net/images/film/3491/image-w320.jpg?1564112978, https://assets.mubicdn.net/images/film/2377/image-w320.jpg?1564675204, https://assets.mubicdn.net/images/film/2874/image-w320.jpg?1546574412

CREATE TABLE `lists_users` (
  user_id INTEGER PRIMARY KEY REFERENCES lists(user_id),
  list_id INTEGER PRIMARY KEY REFERENCES lists(list_id),
  list_update_date_utc TEXT,
  list_creation_date_utc TEXT,
  user_trialist INTEGER,
  user_subscriber INTEGER,
  user_avatar_image_url TEXT,
  user_cover_image_url TEXT,
  user_eligible_for_trial TEXT,
  user_has_payment_method TEXT
);
Sample rows from `lists_users`:
85981819, 1969, 2019-11-26, 2009-12-18, 1, 1, https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214, None, 0, 1
85981819, 3946, 2020-05-01, 2010-01-30, 1, 1, https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214, None, 0, 1
85981819, 6683, 2020-04-12, 2010-03-31, 1, 1, https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214, None, 0, 1

","CREATE TABLE `lists` (
  user_id INTEGER REFERENCES lists_users(user_id),
  list_id INTEGER,
  list_title TEXT,
  list_movie_number INTEGER,
  list_update_timestamp_utc TEXT,
  list_creation_timestamp_utc TEXT,
  list_followers INTEGER,
  list_url TEXT,
  list_comments INTEGER,
  list_description TEXT,
  list_cover_image_url TEXT,
  list_first_image_url TEXT,
  list_second_image_url TEXT,
  list_third_image_url TEXT
);
Sample rows from `lists`:
88260493, 1, Films that made your kid sister cry, 5, 2019-01-24 19:16:18, 2009-11-11 00:02:21, 5, http://mubi.com/lists/films-that-made-your-kid-sister-cry, 3, <p>Don’t be such a baby!!</p>
<p><strong>bold</strong></p>, https://assets.mubicdn.net/images/film/3822/image-w1280.jpg?1445914994, https://assets.mubicdn.net/images/film/3822/image-w320.jpg?1445914994, https://assets.mubicdn.net/images/film/506/image-w320.jpg?1543838422, https://assets.mubicdn.net/images/film/485/image-w320.jpg?1575331204
45204418, 2, Headscratchers, 3, 2018-12-03 15:12:20, 2009-11-11 00:05:11, 1, http://mubi.com/lists/headscratchers, 2, <p>Films that need at least two viewings to really make sense.</p>
<p>Or at least… they did for <em>me</em>.</p>, https://assets.mubicdn.net/images/film/4343/image-w1280.jpg?1583331932, https://assets.mubicdn.net/images/film/4343/image-w320.jpg?1583331932, https://assets.mubicdn.net/images/film/159/image-w320.jpg?1548864573, https://assets.mubicdn.net/images/film/142/image-w320.jpg?1544094102
48905025, 3, Sexy Time Movies, 7, 2019-05-30 03:00:07, 2009-11-11 00:20:00, 6, http://mubi.com/lists/sexy-time-movies, 5, <p>Films that get you in the mood…for love. In development.</p>
<p>Remarks</p>
<p><strong>Enter the Void</strong><br>
If you’ve seen <a href=""http://www.theauteurs.com/films/2377"" rel=""nofollow"">Enter the Void</a> then you’ll know why that’s on this list., https://assets.mubicdn.net/images/film/3491/image-w1280.jpg?1564112978, https://assets.mubicdn.net/images/film/3491/image-w320.jpg?1564112978, https://assets.mubicdn.net/images/film/2377/image-w320.jpg?1564675204, https://assets.mubicdn.net/images/film/2874/image-w320.jpg?1546574412

CREATE TABLE `movies` (
  movie_id INTEGER,
  movie_title TEXT,
  movie_release_year INTEGER,
  movie_url TEXT,
  movie_title_language TEXT,
  movie_popularity INTEGER,
  movie_image_url TEXT,
  director_id TEXT,
  director_name TEXT,
  director_url TEXT
);
Sample rows from `movies`:
1, La Antena, 2007, http://mubi.com/films/la-antena, en, 105, https://images.mubicdn.net/images/film/1/cache-7927-1581389497/image-w1280.jpg, 131, Esteban Sapir, http://mubi.com/cast/esteban-sapir
2, Elementary Particles, 2006, http://mubi.com/films/elementary-particles, en, 23, https://images.mubicdn.net/images/film/2/cache-512179-1581389841/image-w1280.jpg, 73, Oskar Roehler, http://mubi.com/cast/oskar-roehler
3, It's Winter, 2006, http://mubi.com/films/its-winter, en, 21, https://images.mubicdn.net/images/film/3/cache-7929-1481539519/image-w1280.jpg, 82, Rafi Pitts, http://mubi.com/cast/rafi-pitts

CREATE TABLE `ratings_users` (
  user_id INTEGER REFERENCES lists_users(user_id),
  rating_date_utc TEXT,
  user_trialist INTEGER,
  user_subscriber INTEGER,
  user_avatar_image_url TEXT,
  user_cover_image_url TEXT,
  user_eligible_for_trial INTEGER,
  user_has_payment_method INTEGER
);
Sample rows from `ratings_users`:
41579158, 2017-06-10, 0, 0, https://assets.mubicdn.net/images/avatars/74283/images-w150.jpg?1523895155, None, 1, 0
68654088, 2012-10-02, 0, 0, https://assets.mubicdn.net/images/avatars/27714/images-w150.jpg?1523889463, None, 1, 1
84114365, 2010-12-25, 0, 0, https://assets.mubicdn.net/images/avatars/1808/images-w150.jpg?1523883471, None, 1, 0

CREATE TABLE `lists_users` (
  user_id INTEGER PRIMARY KEY REFERENCES lists(user_id),
  list_id INTEGER PRIMARY KEY REFERENCES lists(list_id),
  list_update_date_utc TEXT,
  list_creation_date_utc TEXT,
  user_trialist INTEGER,
  user_subscriber INTEGER,
  user_avatar_image_url TEXT,
  user_cover_image_url TEXT,
  user_eligible_for_trial TEXT,
  user_has_payment_method TEXT
);
Sample rows from `lists_users`:
85981819, 1969, 2019-11-26, 2009-12-18, 1, 1, https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214, None, 0, 1
85981819, 3946, 2020-05-01, 2010-01-30, 1, 1, https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214, None, 0, 1
85981819, 6683, 2020-04-12, 2010-03-31, 1, 1, https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214, None, 0, 1

CREATE TABLE `ratings` (
  movie_id INTEGER REFERENCES movies(movie_id),
  rating_id INTEGER REFERENCES ratings(rating_id),
  rating_url TEXT,
  rating_score INTEGER,
  rating_timestamp_utc TEXT,
  critic TEXT,
  critic_likes INTEGER,
  critic_comments INTEGER,
  user_id INTEGER REFERENCES ratings_users(user_id) REFERENCES lists_users(user_id),
  user_trialist INTEGER,
  user_subscriber INTEGER,
  user_eligible_for_trial INTEGER,
  user_has_payment_method INTEGER
);
Sample rows from `ratings`:
1066, 15610495, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/15610495, 3, 2017-06-10 12:38:33, None, 0, 0, 41579158, 0, 0, 1, 0
1066, 10704606, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/10704606, 2, 2014-08-15 23:42:31, None, 0, 0, 85981819, 1, 1, 0, 1
1066, 10177114, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/10177114, 2, 2014-01-30 13:21:57, None, 0, 0, 4208563, 0, 0, 1, 1

","lists, lists_users","lists.list_title, lists.list_id, lists_users.list_id, lists.user_id, lists_users.user_id, lists_users.user_eligible_for_trial"
disney,List all the main characters of the movie that are comedy genre.,SELECT t2.hero FROM movies_total_gross as t1 inner JOIN characters as t2 ON t1.movie_title = t2.movie_title WHERE t1.genre = 'Comedy',"CREATE TABLE `movies_total_gross` (
  movie_title TEXT PRIMARY KEY REFERENCES characters(movie_title),
  release_date TEXT PRIMARY KEY,
  genre TEXT,
  MPAA_rating TEXT,
  total_gross TEXT,
  inflation_adjusted_gross TEXT
);
Sample rows from `movies_total_gross`:
Snow White and the Seven Dwarfs, Dec 21, 1937, Musical, G, $184,925,485, $5,228,953,251
Pinocchio, Feb 9, 1940, Adventure, G, $84,300,000, $2,188,229,052
Fantasia, Nov 13, 1940, Musical, G, $83,320,000, $2,187,090,808

CREATE TABLE `characters` (
  movie_title TEXT PRIMARY KEY,
  release_date TEXT,
  hero TEXT REFERENCES voice-actors(character),
  villian TEXT,
  song TEXT
);
Sample rows from `characters`:
Snow White and the Seven Dwarfs, 21-Dec-37, Snow White, Evil Queen, Some Day My Prince Will Come
Pinocchio, 7-Feb-40, Pinocchio, Stromboli, When You Wish upon a Star
Fantasia, 13-Nov-40, None, Chernabog, None

","CREATE TABLE `characters` (
  movie_title TEXT PRIMARY KEY,
  release_date TEXT,
  hero TEXT REFERENCES voice-actors(character),
  villian TEXT,
  song TEXT
);
Sample rows from `characters`:
Snow White and the Seven Dwarfs, 21-Dec-37, Snow White, Evil Queen, Some Day My Prince Will Come
Pinocchio, 7-Feb-40, Pinocchio, Stromboli, When You Wish upon a Star
Fantasia, 13-Nov-40, None, Chernabog, None

CREATE TABLE `director` (
  name TEXT PRIMARY KEY REFERENCES characters(movie_title),
  director TEXT
);
Sample rows from `director`:
Snow White and the Seven Dwarfs, David Hand
Pinocchio, Ben Sharpsteen
Fantasia, full credits

CREATE TABLE `movies_total_gross` (
  movie_title TEXT PRIMARY KEY REFERENCES characters(movie_title),
  release_date TEXT PRIMARY KEY,
  genre TEXT,
  MPAA_rating TEXT,
  total_gross TEXT,
  inflation_adjusted_gross TEXT
);
Sample rows from `movies_total_gross`:
Snow White and the Seven Dwarfs, Dec 21, 1937, Musical, G, $184,925,485, $5,228,953,251
Pinocchio, Feb 9, 1940, Adventure, G, $84,300,000, $2,188,229,052
Fantasia, Nov 13, 1940, Musical, G, $83,320,000, $2,187,090,808

CREATE TABLE `revenue` (
  Year INTEGER,
  Studio Entertainment[NI 1] REAL,
  Disney Consumer Products[NI 2] REAL,
  Disney Interactive[NI 3][Rev 1] INTEGER,
  Walt Disney Parks and Resorts REAL,
  Disney Media Networks TEXT,
  Total INTEGER
);
Sample rows from `revenue`:
1991, 2593.0, 724.0, None, 2794.0, None, 6111
1992, 3115.0, 1081.0, None, 3306.0, None, 7502
1993, 3673.4, 1415.1, None, 3440.7, None, 8529

CREATE TABLE `voice-actors` (
  character TEXT PRIMARY KEY,
  voice-actor TEXT,
  movie TEXT REFERENCES characters(movie_title)
);
Sample rows from `voice-actors`:
Abby Mallard, Joan Cusack, Chicken Little
Abigail Gabble, Monica Evans, The Aristocats
Abis Mal, Jason Alexander, The Return of Jafar

","movies_total_gross, characters","characters.hero, movies_total_gross.movie_title, characters.movie_title, movies_total_gross.genre"
car_retails,"Which of the customers, whose Tokyo-based sales representative reports to the Vice President of Sales whose employee number is 1056, has paid the highest payment? List the customer's name, the contact person and calculate the total amount of that customer's total payments.","SELECT t2.customername, t2.contactfirstname, t2.contactlastname, SUM(t3.amount) FROM employees as t1 inner JOIN customers as t2 ON t2.salesrepemployeenumber = t1.employeenumber inner JOIN payments as t3 ON t2.customernumber = t3.customernumber inner JOIN offices as t4 ON t1.officecode = t4.officecode WHERE t4.city = 'Tokyo' AND t1.reportsto = 1056 GROUP BY t2.customername, t2.contactfirstname, t2.contactlastname ORDER BY amount DESC LIMIT 1","CREATE TABLE `employees` (
  employeeNumber INTEGER,
  lastName TEXT,
  firstName TEXT,
  extension TEXT,
  email TEXT,
  officeCode TEXT REFERENCES offices(officeCode),
  reportsTo INTEGER REFERENCES employees(employeeNumber),
  jobTitle TEXT
);
Sample rows from `employees`:
1002, Murphy, Diane, x5800, dmurphy@classicmodelcars.com, 1, None, President
1056, Patterson, Mary, x4611, mpatterso@classicmodelcars.com, 1, 1002, VP Sales
1076, Firrelli, Jeff, x9273, jfirrelli@classicmodelcars.com, 1, 1002, VP Marketing

CREATE TABLE `customers` (
  customerNumber INTEGER,
  customerName TEXT,
  contactLastName TEXT,
  contactFirstName TEXT,
  phone TEXT,
  addressLine1 TEXT,
  addressLine2 TEXT,
  city TEXT,
  state TEXT,
  postalCode TEXT,
  country TEXT,
  salesRepEmployeeNumber INTEGER REFERENCES employees(employeeNumber),
  creditLimit REAL
);
Sample rows from `customers`:
103, Atelier graphique, Schmitt, Carine , 40.32.2555, 54, rue Royale, None, Nantes, None, 44000, France, 1370, 21000.0
112, Signal Gift Stores, King, Jean, 7025551838, 8489 Strong St., None, Las Vegas, NV, 83030, USA, 1166, 71800.0
114, Australian Collectors, Co., Ferguson, Peter, 03 9520 4555, 636 St Kilda Road, Level 3, Melbourne, Victoria, 3004, Australia, 1611, 117300.0

CREATE TABLE `payments` (
  customerNumber INTEGER PRIMARY KEY REFERENCES customers(customerNumber),
  checkNumber TEXT PRIMARY KEY,
  paymentDate DATE,
  amount REAL
);
Sample rows from `payments`:
103, HQ336336, 2004-10-19, 6066.78
103, JM555205, 2003-06-05, 14571.44
103, OM314933, 2004-12-18, 1676.14

CREATE TABLE `offices` (
  officeCode TEXT PRIMARY KEY,
  city TEXT,
  phone TEXT,
  addressLine1 TEXT,
  addressLine2 TEXT,
  state TEXT,
  country TEXT,
  postalCode TEXT,
  territory TEXT
);
Sample rows from `offices`:
1, San Francisco, +1 650 219 4782, 100 Market Street, Suite 300, CA, USA, 94080, NA
2, Boston, +1 215 837 0825, 1550 Court Place, Suite 102, MA, USA, 02107, NA
3, NYC, +1 212 555 3000, 523 East 53rd Street, apt. 5A, NY, USA, 10022, NA

","CREATE TABLE `offices` (
  officeCode TEXT PRIMARY KEY,
  city TEXT,
  phone TEXT,
  addressLine1 TEXT,
  addressLine2 TEXT,
  state TEXT,
  country TEXT,
  postalCode TEXT,
  territory TEXT
);
Sample rows from `offices`:
1, San Francisco, +1 650 219 4782, 100 Market Street, Suite 300, CA, USA, 94080, NA
2, Boston, +1 215 837 0825, 1550 Court Place, Suite 102, MA, USA, 02107, NA
3, NYC, +1 212 555 3000, 523 East 53rd Street, apt. 5A, NY, USA, 10022, NA

CREATE TABLE `employees` (
  employeeNumber INTEGER,
  lastName TEXT,
  firstName TEXT,
  extension TEXT,
  email TEXT,
  officeCode TEXT REFERENCES offices(officeCode),
  reportsTo INTEGER REFERENCES employees(employeeNumber),
  jobTitle TEXT
);
Sample rows from `employees`:
1002, Murphy, Diane, x5800, dmurphy@classicmodelcars.com, 1, None, President
1056, Patterson, Mary, x4611, mpatterso@classicmodelcars.com, 1, 1002, VP Sales
1076, Firrelli, Jeff, x9273, jfirrelli@classicmodelcars.com, 1, 1002, VP Marketing

CREATE TABLE `customers` (
  customerNumber INTEGER,
  customerName TEXT,
  contactLastName TEXT,
  contactFirstName TEXT,
  phone TEXT,
  addressLine1 TEXT,
  addressLine2 TEXT,
  city TEXT,
  state TEXT,
  postalCode TEXT,
  country TEXT,
  salesRepEmployeeNumber INTEGER REFERENCES employees(employeeNumber),
  creditLimit REAL
);
Sample rows from `customers`:
103, Atelier graphique, Schmitt, Carine , 40.32.2555, 54, rue Royale, None, Nantes, None, 44000, France, 1370, 21000.0
112, Signal Gift Stores, King, Jean, 7025551838, 8489 Strong St., None, Las Vegas, NV, 83030, USA, 1166, 71800.0
114, Australian Collectors, Co., Ferguson, Peter, 03 9520 4555, 636 St Kilda Road, Level 3, Melbourne, Victoria, 3004, Australia, 1611, 117300.0

CREATE TABLE `orders` (
  orderNumber INTEGER,
  orderDate DATE,
  requiredDate DATE,
  shippedDate DATE,
  status TEXT,
  comments TEXT,
  customerNumber INTEGER REFERENCES customers(customerNumber)
);
Sample rows from `orders`:
10100, 2003-01-06, 2003-01-13, 2003-01-10, Shipped, None, 363
10101, 2003-01-09, 2003-01-18, 2003-01-11, Shipped, Check on availability., 128
10102, 2003-01-10, 2003-01-18, 2003-01-14, Shipped, None, 181

CREATE TABLE `payments` (
  customerNumber INTEGER PRIMARY KEY REFERENCES customers(customerNumber),
  checkNumber TEXT PRIMARY KEY,
  paymentDate DATE,
  amount REAL
);
Sample rows from `payments`:
103, HQ336336, 2004-10-19, 6066.78
103, JM555205, 2003-06-05, 14571.44
103, OM314933, 2004-12-18, 1676.14

CREATE TABLE `productlines` (
  productLine TEXT PRIMARY KEY,
  textDescription TEXT,
  htmlDescription TEXT,
  image BLOB
);
Sample rows from `productlines`:
Classic Cars, Attention car enthusiasts: Make your wildest car ownership dreams come true. Whether you are looking for classic muscle cars, dream sports cars or movie-inspired miniatures, you will find great choices in this category. These replicas feature superb atten, None, None
Motorcycles, Our motorcycles are state of the art replicas of classic as well as contemporary motorcycle legends such as Harley Davidson, Ducati and Vespa. Models contain stunning details such as official logos, rotating wheels, working kickstand, front suspension, ge, None, None
Planes, Unique, diecast airplane and helicopter replicas suitable for collections, as well as home, office or classroom decorations. Models contain stunning details such as official logos and insignias, rotating jet engines and propellers, retractable wheels, and, None, None

CREATE TABLE `products` (
  productCode TEXT PRIMARY KEY,
  productName TEXT,
  productLine TEXT REFERENCES productlines(productLine),
  productScale TEXT,
  productVendor TEXT,
  productDescription TEXT,
  quantityInStock INTEGER,
  buyPrice REAL,
  MSRP REAL
);
Sample rows from `products`:
S10_1678, 1969 Harley Davidson Ultimate Chopper, Motorcycles, 1:10, Min Lin Diecast, This replica features working kickstand, front suspension, gear-shift lever, footbrake lever, drive chain, wheels and steering. All parts are particularly delicate due to their precise scale and require special care and attention., 7933, 48.81, 95.7
S10_1949, 1952 Alpine Renault 1300, Classic Cars, 1:10, Classic Metal Creations, Turnable front wheels; steering function; detailed interior; detailed engine; opening hood; opening trunk; opening doors; and detailed chassis., 7305, 98.58, 214.3
S10_2016, 1996 Moto Guzzi 1100i, Motorcycles, 1:10, Highway 66 Mini Classics, Official Moto Guzzi logos and insignias, saddle bags located on side of motorcycle, detailed engine, working steering, working suspension, two leather seats, luggage rack, dual exhaust pipes, small saddle bag located on handle bars, two-tone paint with chrome accents, superior die-cast detail , rotating wheels , working kick stand, diecast metal with plastic parts and baked enamel finish., 6625, 68.99, 118.94

CREATE TABLE `orderdetails` (
  orderNumber INTEGER PRIMARY KEY REFERENCES orders(None),
  productCode TEXT PRIMARY KEY REFERENCES products(None),
  quantityOrdered INTEGER,
  priceEach REAL,
  orderLineNumber INTEGER
);
Sample rows from `orderdetails`:
10100, S18_1749, 30, 136.0, 3
10100, S18_2248, 50, 55.09, 2
10100, S18_4409, 22, 75.46, 4

","employees, customers, payments, offices","customers.customername, customers.contactfirstname, customers.contactlastname, payments.amount, customers.salesrepemployeenumber, employees.employeenumber, customers.customernumber, payments.customernumber, employees.officecode, offices.officecode, offices.city, employees.reportsto, amount"
cs_semester,Give the student's ID of students with 2.5 GPA and enrolled in C for Programmers.,SELECT t2.student_id FROM student as t1 inner JOIN registration as t2 ON t1.student_id = t2.student_id inner JOIN course as t3 ON t2.course_id = t3.course_id WHERE t3.name = 'C for Programmers' AND t1.gpa = 2.5,"CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

","CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

CREATE TABLE `prof` (
  prof_id INTEGER,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  popularity INTEGER,
  teachingability INTEGER,
  graduate_from TEXT
);
Sample rows from `prof`:
1, Male, Nathaniel, Pigford, npigford0@hku.hk, 3, 5, University of Washington
2, Male, Zhihua, Zhou, zzhihua@hku.hk, 2, 1, Beijing Polytechnic University
3, Male, Ogdon, Zywicki, ozywicki2@hku.hk, 2, 2, University of Boston

CREATE TABLE `RA` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `RA`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

","student, registration, course","registration.student_id, student.student_id, registration.course_id, course.course_id, course.name, student.gpa"
language_corpus,How many words are repeated on the Llista de conflictes armats page?,SELECT occurrences FROM pages_words WHERE pid = ( SELECT pid FROM pages WHERE title = 'Llista de conflictes armats' ),"CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

","CREATE TABLE `langs` (
  lid INTEGER,
  lang TEXT PRIMARY KEY,
  locale TEXT PRIMARY KEY,
  pages INTEGER,
  words INTEGER
);
Sample rows from `langs`:
1, ca, ca_ES, 1129144, 2764996

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
langs, 1
pages, 1129144
words, 2764996

CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `langs_words` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `langs_words`:
1, 1, 242
1, 2, 16841
1, 3, 48700

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

","pages_words, pages","occurrences, pid, title"
soccer_2016,Which country is the youngest player from?,SELECT t1.country_name FROM country as t1 inner JOIN player as t2 ON t1.country_Id = t2.country_name ORDER BY t2.dob DESC LIMIT 1,"CREATE TABLE `country` (
  Country_Id INTEGER REFERENCES Country(Country_Id),
  Country_Name TEXT
);
Sample rows from `country`:
1, India
2, South Africa
3, U.A.E

CREATE TABLE `player` (
  Player_Id INTEGER,
  Player_Name TEXT,
  DOB DATE,
  Batting_hand INTEGER REFERENCES Batting_Style(Batting_Id),
  Bowling_skill INTEGER REFERENCES Bowling_Style(Bowling_Id),
  Country_Name INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `player`:
1, SC Ganguly, 1972-07-08, 1, 1, 1
2, BB McCullum, 1981-09-27, 2, 1, 4
3, RT Ponting, 1974-12-19, 2, 1, 5

","CREATE TABLE `Batting_Style` (
  Batting_Id INTEGER,
  Batting_hand TEXT
);
Sample rows from `Batting_Style`:
1, Left-hand bat
2, Right-hand bat

CREATE TABLE `Bowling_Style` (
  Bowling_Id INTEGER,
  Bowling_skill TEXT
);
Sample rows from `Bowling_Style`:
1, Right-arm medium
2, Right-arm offbreak
3, Right-arm fast-medium

CREATE TABLE `City` (
  City_Id INTEGER,
  City_Name TEXT,
  Country_id INTEGER
);
Sample rows from `City`:
1, Bangalore, 1
2, Chandigarh, 1
3, Delhi, 1

CREATE TABLE `Country` (
  Country_Id INTEGER REFERENCES Country(Country_Id),
  Country_Name TEXT
);
Sample rows from `Country`:
1, India
2, South Africa
3, U.A.E

CREATE TABLE `Extra_Type` (
  Extra_Id INTEGER,
  Extra_Name TEXT
);
Sample rows from `Extra_Type`:
1, legbyes
2, wides
3, byes

CREATE TABLE `Extra_Runs` (
  Match_Id INTEGER PRIMARY KEY,
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Extra_Type_Id INTEGER REFERENCES Extra_Type(Extra_Id),
  Extra_Runs INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Extra_Runs`:
335987, 1, 1, 1, 1, 1
335987, 1, 2, 2, 1, 2
335987, 1, 3, 2, 1, 1

CREATE TABLE `Out_Type` (
  Out_Id INTEGER,
  Out_Name TEXT
);
Sample rows from `Out_Type`:
1, caught
2, bowled
3, run out

CREATE TABLE `Outcome` (
  Outcome_Id INTEGER,
  Outcome_Type TEXT
);
Sample rows from `Outcome`:
1, Result
2, No Result
3, Superover

CREATE TABLE `Player` (
  Player_Id INTEGER,
  Player_Name TEXT,
  DOB DATE,
  Batting_hand INTEGER REFERENCES Batting_Style(Batting_Id),
  Bowling_skill INTEGER REFERENCES Bowling_Style(Bowling_Id),
  Country_Name INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Player`:
1, SC Ganguly, 1972-07-08, 1, 1, 1
2, BB McCullum, 1981-09-27, 2, 1, 4
3, RT Ponting, 1974-12-19, 2, 1, 5

CREATE TABLE `Rolee` (
  Role_Id INTEGER,
  Role_Desc TEXT
);
Sample rows from `Rolee`:
1, Captain
2, Keeper
3, Player

CREATE TABLE `Season` (
  Season_Id INTEGER,
  Man_of_the_Series INTEGER,
  Orange_Cap INTEGER,
  Purple_Cap INTEGER,
  Season_Year INTEGER
);
Sample rows from `Season`:
1, 32, 100, 102, 2008
2, 53, 18, 61, 2009
3, 133, 133, 131, 2010

CREATE TABLE `Team` (
  Team_Id INTEGER,
  Team_Name TEXT
);
Sample rows from `Team`:
1, Kolkata Knight Riders
2, Royal Challengers Bangalore
3, Chennai Super Kings

CREATE TABLE `Toss_Decision` (
  Toss_Id INTEGER,
  Toss_Name TEXT
);
Sample rows from `Toss_Decision`:
1, field
2, bat

CREATE TABLE `Umpire` (
  Umpire_Id INTEGER,
  Umpire_Name TEXT,
  Umpire_Country INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Umpire`:
1, Asad Rauf, 6
2, MR Benson, 10
3, Aleem Dar, 6

CREATE TABLE `Venue` (
  Venue_Id INTEGER,
  Venue_Name TEXT,
  City_Id INTEGER REFERENCES City(City_Id)
);
Sample rows from `Venue`:
1, M Chinnaswamy Stadium, 1
2, Punjab Cricket Association Stadium, 2
3, Feroz Shah Kotla, 3

CREATE TABLE `Win_By` (
  Win_Id INTEGER,
  Win_Type TEXT
);
Sample rows from `Win_By`:
1, runs
2, wickets
3, NO Result

CREATE TABLE `Match` (
  Match_Id INTEGER,
  Team_1 INTEGER REFERENCES Team(Team_Id),
  Team_2 INTEGER REFERENCES Team(Team_Id),
  Match_Date DATE,
  Season_Id INTEGER REFERENCES Season(Season_Id),
  Venue_Id INTEGER REFERENCES Venue(Venue_Id),
  Toss_Winner INTEGER REFERENCES Team(Team_Id),
  Toss_Decide INTEGER REFERENCES Toss_Decision(Toss_Id),
  Win_Type INTEGER REFERENCES Win_By(Win_Id),
  Win_Margin INTEGER,
  Outcome_type INTEGER REFERENCES Out_Type(Out_Id),
  Match_Winner INTEGER REFERENCES Team(Team_Id),
  Man_of_the_Match INTEGER REFERENCES Player(Player_Id)
);
Sample rows from `Match`:
335987, 2, 1, 2008-04-18, 1, 1, 2, 1, 1, 140, 1, 1, 2
335988, 4, 3, 2008-04-19, 1, 2, 3, 2, 1, 33, 1, 3, 19
335989, 6, 5, 2008-04-19, 1, 3, 5, 2, 2, 9, 1, 6, 90

CREATE TABLE `Ball_by_Ball` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Innings_No INTEGER PRIMARY KEY,
  Team_Batting INTEGER,
  Team_Bowling INTEGER,
  Striker_Batting_Position INTEGER,
  Striker INTEGER,
  Non_Striker INTEGER,
  Bowler INTEGER
);
Sample rows from `Ball_by_Ball`:
335987, 1, 1, 1, 1, 2, 1, 1, 2, 14
335987, 1, 1, 2, 2, 1, 1, 6, 7, 106
335987, 1, 2, 1, 1, 2, 2, 2, 1, 14

CREATE TABLE `Batsman_Scored` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Runs_Scored INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Batsman_Scored`:
335987, 1, 1, 0, 1
335987, 1, 1, 1, 2
335987, 1, 2, 0, 1

CREATE TABLE `Player_Match` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Player_Id INTEGER PRIMARY KEY REFERENCES Player(Player_Id),
  Role_Id INTEGER PRIMARY KEY REFERENCES Rolee(Role_Id),
  Team_Id INTEGER REFERENCES Team(Team_Id)
);
Sample rows from `Player_Match`:
335987, 1, 1, 1
335987, 2, 3, 1
335987, 3, 3, 1

CREATE TABLE `Wicket_Taken` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Player_Out INTEGER REFERENCES Player(Player_Id),
  Kind_Out INTEGER REFERENCES Out_Type(Out_Id),
  Fielders INTEGER REFERENCES Player(Player_Id),
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Wicket_Taken`:
335987, 2, 1, 6, 2, None, 2
335987, 3, 2, 8, 2, None, 2
335987, 5, 5, 9, 1, 83, 2

","country, player","country.country_name, country.country_Id, player.country_name, player.dob"
books,"Among the books that cost less than 1 dollar, how many were published by Berkley Trade?",SELECT COUNT(*) FROM publisher as t1 inner JOIN book as t2 ON t1.publisher_id = t2.publisher_id inner JOIN order_line as t3 ON t3.book_id = t2.book_id WHERE t1.publisher_name = 'Berkley' AND t3.price < 1,"CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","publisher, book, order_line","publisher.publisher_id, book.publisher_id, order_line.book_id, book.book_id, publisher.publisher_name, order_line.price"
retails,Please list the order comments of all the orders made by customers in the household segment.,SELECT t1.o_comment FROM orders as t1 inner JOIN customer as t2 ON t1.o_custkey = t2.c_custkey WHERE t2.c_mktsegment = 'HOUSEHOLD',"CREATE TABLE `orders` (
  o_orderdate DATE,
  o_orderkey INTEGER,
  o_custkey INTEGER REFERENCES customer(c_custkey),
  o_orderpriority TEXT,
  o_shippriority INTEGER,
  o_clerk TEXT,
  o_orderstatus TEXT,
  o_totalprice REAL,
  o_comment TEXT
);
Sample rows from `orders`:
1995-04-19, 1, 73100, 4-NOT SPECIFIED, 0, Clerk#000000916, P, 203198.56, final packages sleep blithely packa
1996-11-04, 2, 92861, 1-URGENT, 0, Clerk#000000373, O, 317719.99, final excuses about the ironic even deposits detect express request
1992-02-15, 3, 44875, 1-URGENT, 0, Clerk#000000485, F, 146674.98, final final deposits cajole foxes. blithely pendin

CREATE TABLE `customer` (
  c_custkey INTEGER,
  c_mktsegment TEXT,
  c_nationkey INTEGER REFERENCES nation(n_nationkey),
  c_name TEXT,
  c_address TEXT,
  c_phone TEXT,
  c_acctbal REAL,
  c_comment TEXT
);
Sample rows from `customer`:
1, BUILDING, 8, Customer#000000001, KwX3hMHjZ6, 937-241-3198, 3560.03, ironic excuses detect slyly silent requests. requests according to the exc
2, MACHINERY, 16, Customer#000000002, ioUn,eqTTXOdo, 906-965-7556, 7550.21, final express accounts mold slyly. ironic accounts cajole! quickly express a
3, FURNITURE, 11, Customer#000000003, YddJqmIdouNT9Yj, 328-750-7603, -926.96, carefully express foxes sleep carefully. pending platelets sleep thinly for t

","CREATE TABLE `customer` (
  c_custkey INTEGER,
  c_mktsegment TEXT,
  c_nationkey INTEGER REFERENCES nation(n_nationkey),
  c_name TEXT,
  c_address TEXT,
  c_phone TEXT,
  c_acctbal REAL,
  c_comment TEXT
);
Sample rows from `customer`:
1, BUILDING, 8, Customer#000000001, KwX3hMHjZ6, 937-241-3198, 3560.03, ironic excuses detect slyly silent requests. requests according to the exc
2, MACHINERY, 16, Customer#000000002, ioUn,eqTTXOdo, 906-965-7556, 7550.21, final express accounts mold slyly. ironic accounts cajole! quickly express a
3, FURNITURE, 11, Customer#000000003, YddJqmIdouNT9Yj, 328-750-7603, -926.96, carefully express foxes sleep carefully. pending platelets sleep thinly for t

CREATE TABLE `lineitem` (
  l_shipdate DATE,
  l_orderkey INTEGER PRIMARY KEY REFERENCES orders(o_orderkey),
  l_discount REAL,
  l_extendedprice REAL,
  l_suppkey INTEGER REFERENCES partsupp(ps_suppkey),
  l_quantity INTEGER,
  l_returnflag TEXT,
  l_partkey INTEGER REFERENCES partsupp(ps_partkey),
  l_linestatus TEXT,
  l_tax REAL,
  l_commitdate DATE,
  l_receiptdate DATE,
  l_shipmode TEXT,
  l_linenumber INTEGER PRIMARY KEY,
  l_shipinstruct TEXT,
  l_comment TEXT
);
Sample rows from `lineitem`:
1995-08-16, 1, 0.1, 58303.08, 6296, 33, N, 98768, O, 0.06, 1995-07-12, 1995-09-14, RAIL, 1, NONE, carefully bo
1995-08-13, 1, 0.09, 16947.7, 8776, 10, N, 23771, O, 0.08, 1995-07-09, 1995-08-27, TRUCK, 2, TAKE BACK RETURN, blithely regular pac
1995-06-17, 1, 0.1, 63642.9, 3859, 34, N, 113858, O, 0.08, 1995-05-22, 1995-06-30, SHIP, 3, COLLECT COD, ironic accounts sleep furiously silen

CREATE TABLE `nation` (
  n_nationkey INTEGER,
  n_name TEXT,
  n_regionkey INTEGER REFERENCES region(r_regionkey),
  n_comment TEXT
);
Sample rows from `nation`:
0, ALGERIA, 0, slyly express pinto beans cajole idly. deposits use blithely unusual packages? fluffily final accounts x-r
1, ARGENTINA, 1, instructions detect blithely stealthily pending packages
2, BRAZIL, 1, blithely unusual deposits are quickly--

CREATE TABLE `orders` (
  o_orderdate DATE,
  o_orderkey INTEGER,
  o_custkey INTEGER REFERENCES customer(c_custkey),
  o_orderpriority TEXT,
  o_shippriority INTEGER,
  o_clerk TEXT,
  o_orderstatus TEXT,
  o_totalprice REAL,
  o_comment TEXT
);
Sample rows from `orders`:
1995-04-19, 1, 73100, 4-NOT SPECIFIED, 0, Clerk#000000916, P, 203198.56, final packages sleep blithely packa
1996-11-04, 2, 92861, 1-URGENT, 0, Clerk#000000373, O, 317719.99, final excuses about the ironic even deposits detect express request
1992-02-15, 3, 44875, 1-URGENT, 0, Clerk#000000485, F, 146674.98, final final deposits cajole foxes. blithely pendin

CREATE TABLE `part` (
  p_partkey INTEGER,
  p_type TEXT,
  p_size INTEGER,
  p_brand TEXT,
  p_name TEXT,
  p_container TEXT,
  p_mfgr TEXT,
  p_retailprice REAL,
  p_comment TEXT
);
Sample rows from `part`:
1, LARGE PLATED TIN, 31, Brand#43, burlywood plum powder puff mint, LG BAG, Manufacturer#4, 901.0, blithely busy reque
2, LARGE POLISHED STEEL, 4, Brand#55, hot spring dodger dim light, LG CASE, Manufacturer#5, 902.0, even ironic requests s
3, STANDARD PLATED COPPER, 30, Brand#53, dark slate grey steel misty, WRAP CASE, Manufacturer#5, 903.0, slyly ironic fox

CREATE TABLE `partsupp` (
  ps_partkey INTEGER PRIMARY KEY REFERENCES part(p_partkey),
  ps_suppkey INTEGER PRIMARY KEY REFERENCES supplier(s_suppkey),
  ps_supplycost REAL,
  ps_availqty INTEGER,
  ps_comment TEXT
);
Sample rows from `partsupp`:
1, 2, 400.75, 1111, carefully ironic deposits use against the carefully unusual accounts. slyly silent platelets nag quickly even
1, 2502, 702.61, 3999, slyly regular accounts serve carefully. asymptotes after the slyly even instructions cajole quickly ironic requests. pending dugouts about the slyly 
1, 5002, 383.95, 7411, carefully special ideas are slyly. slyly ironic epitaphs use pending pending foxes. furiously express pinto beans lose quiet even requests: special final packages ar

CREATE TABLE `region` (
  r_regionkey INTEGER,
  r_name TEXT,
  r_comment TEXT
);
Sample rows from `region`:
0, AFRICA, asymptotes sublate after the r
1, AMERICA, requests affix quickly final tithes. blithely even packages above the a
2, ASIA, accounts cajole carefully according to the carefully exp

CREATE TABLE `supplier` (
  s_suppkey INTEGER,
  s_nationkey INTEGER REFERENCES nation(n_nationkey),
  s_comment TEXT,
  s_name TEXT,
  s_address TEXT,
  s_phone TEXT,
  s_acctbal REAL
);
Sample rows from `supplier`:
1, 13, blithely final pearls are. instructions thra, Supplier#000000001, ,wWs4pnykQOFl8mgVCU8EZMXqZs1w, 800-807-9579, 3082.86
2, 5, requests integrate fluffily. fluffily ironic deposits wake. bold, Supplier#000000002, WkXT6MSAJrp4qWq3W9N, 348-617-6055, 3009.73
3, 22, carefully express ideas shall have to unwin, Supplier#000000003, KjUqa42JEHaRDVQTHV6Yq2h, 471-986-9888, 9159.78

","orders, customer","orders.o_comment, orders.o_custkey, customer.c_custkey, customer.c_mktsegment"
airline,How many flights were there from San Diego International airport to Los Angeles International airport in the August of 2018?,"SELECT COUNT(fl_date) FROM airlines WHERE fl_date LIKE '2018/8%' AND origin = ( SELECT t2.origin FROM airports as t1 inner JOIN airlines as t2 ON t1.code = t2.origin WHERE t1.description = 'San Diego, CA: San Diego International' ) AND dest = ( SELECT t4.dest FROM airports as t3 inner JOIN airlines as t4 ON t3.code = t4.dest WHERE t3.description = 'Los Angeles, CA: Los Angeles International' )","CREATE TABLE `airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

CREATE TABLE `airports` (
  Code TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `airports`:
01A, Afognak Lake, AK: Afognak Lake Airport
03A, Granite Mountain, AK: Bear Creek Mining Strip
04A, Lik, AK: Lik Mining Camp

","CREATE TABLE `Air Carriers` (
  Code INTEGER,
  Description TEXT
);
Sample rows from `Air Carriers`:
19031, Mackey International Inc.: MAC
19032, Munz Northern Airlines Inc.: XY
19033, Cochise Airlines Inc.: COC

CREATE TABLE `Airports` (
  Code TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `Airports`:
01A, Afognak Lake, AK: Afognak Lake Airport
03A, Granite Mountain, AK: Bear Creek Mining Strip
04A, Lik, AK: Lik Mining Camp

CREATE TABLE `Airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `Airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

","airlines, airports","fl_date, origin, airlines.origin, airports.code, airports.description, dest, airlines.dest"
video_games,List down the game ID of games with genre ID 2.,SELECt t.id FROM game as t WHERE t.genre_id = 2,"CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

","CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

",game,"game.id, game.genre_id"
address,What are the zip code for the Senate house?,SELECT t2.zip_code FROM congress as t1 inner JOIN zip_congress as t2 ON t1.cognress_rep_id = t2.district WHERE t1.house = 'house of Repsentatives' GROUP BY t2.zip_code,"CREATE TABLE `congress` (
  cognress_rep_id TEXT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  CID TEXT,
  party TEXT,
  state TEXT,
  abbreviation TEXT REFERENCES state(abbreviation),
  House TEXT,
  District INTEGER,
  land_area REAL
);
Sample rows from `congress`:
AK, Young, Don, N00008091, Republican, Alaska, AK, House of Repsentatives, None, 571951.26
AK-S1, Begich, Mark, N00009585, Democrat, Alaska, AK, Senate, None, 570641.0
AK-S2, Murkowski, Lisa, N00033101, Republican, Alaska, AK, Senate, None, 570641.0

CREATE TABLE `zip_congress` (
  zip_code INTEGER PRIMARY KEY REFERENCES zip_data(zip_code),
  district TEXT PRIMARY KEY REFERENCES congress(cognress_rep_id)
);
Sample rows from `zip_congress`:
501, NY-1
601, PR
602, PR

","CREATE TABLE `CBSA` (
  CBSA INTEGER,
  CBSA_name TEXT,
  CBSA_type TEXT
);
Sample rows from `CBSA`:
10300, Adrian, MI, Micro
10380, Aguadilla-Isabela, PR, Metro
10420, Akron, OH, Metro

CREATE TABLE `state` (
  abbreviation TEXT PRIMARY KEY,
  name TEXT
);
Sample rows from `state`:
AA, Armed Forces Americas
AE, Armed Forces Europe
AK, Alaska

CREATE TABLE `congress` (
  cognress_rep_id TEXT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  CID TEXT,
  party TEXT,
  state TEXT,
  abbreviation TEXT REFERENCES state(abbreviation),
  House TEXT,
  District INTEGER,
  land_area REAL
);
Sample rows from `congress`:
AK, Young, Don, N00008091, Republican, Alaska, AK, House of Repsentatives, None, 571951.26
AK-S1, Begich, Mark, N00009585, Democrat, Alaska, AK, Senate, None, 570641.0
AK-S2, Murkowski, Lisa, N00033101, Republican, Alaska, AK, Senate, None, 570641.0

CREATE TABLE `zip_data` (
  zip_code INTEGER,
  city TEXT,
  state TEXT REFERENCES state(abbreviation),
  multi_county TEXT,
  type TEXT,
  organization TEXT,
  time_zone TEXT,
  daylight_savings TEXT,
  latitude REAL,
  longitude REAL,
  elevation INTEGER,
  state_fips INTEGER,
  county_fips INTEGER,
  region TEXT,
  division TEXT,
  population_2020 INTEGER,
  population_2010 INTEGER,
  households INTEGER,
  avg_house_value INTEGER,
  avg_income_per_household INTEGER,
  persons_per_household REAL,
  white_population INTEGER,
  black_population INTEGER,
  hispanic_population INTEGER,
  asian_population INTEGER,
  american_indian_population INTEGER,
  hawaiian_population INTEGER,
  other_population INTEGER,
  male_population INTEGER,
  female_population INTEGER,
  median_age REAL,
  male_median_age REAL,
  female_median_age REAL,
  residential_mailboxes INTEGER,
  business_mailboxes INTEGER,
  total_delivery_receptacles INTEGER,
  businesses INTEGER,
  1st_quarter_payroll INTEGER,
  annual_payroll INTEGER,
  employees INTEGER,
  water_area REAL,
  land_area REAL,
  single_family_delivery_units INTEGER,
  multi_family_delivery_units INTEGER,
  total_beneficiaries INTEGER,
  retired_workers INTEGER,
  disabled_workers INTEGER,
  parents_and_widowed INTEGER,
  spouses INTEGER,
  children INTEGER,
  over_65 INTEGER,
  monthly_benefits_all INTEGER,
  monthly_benefits_retired_workers INTEGER,
  monthly_benefits_widowed INTEGER,
  CBSA INTEGER REFERENCES CBSA(CBSA)
);
Sample rows from `zip_data`:
501, Holtsville, NY, No, Unique Post Office, I R S Service Center, Eastern, Yes, 40.817923, -73.045317, 25, 36, 103, Northeast, Middle Atlantic, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0, 1, 1, 2, 0, 0, 0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35620
544, Holtsville, NY, No, Unique Post Office, Irs Service Center, Eastern, Yes, 40.788827, -73.039405, 25, 36, 103, Northeast, Middle Atlantic, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35620
601, Adjuntas, PR, No, Post Office, None, Atlantic, No, 18.196747, -66.736735, 0, 72, 1, None, None, 11737, 18570, 6525, 86200, 13092, 2.84, 17479, 663, 18486, 7, 113, 10, 558, 9078, 9492, 35.9, 34.5, 37.1, 4133, 221, 5173, 0, 0, 0, 0, 0.309, 64.348, 2419, 1264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38660

CREATE TABLE `alias` (
  zip_code INTEGER REFERENCES zip_data(zip_code),
  alias TEXT
);
Sample rows from `alias`:
501, Holtsville
544, Holtsville
601, Adjuntas

CREATE TABLE `area_code` (
  zip_code INTEGER PRIMARY KEY REFERENCES zip_data(zip_code),
  area_code INTEGER PRIMARY KEY
);
Sample rows from `area_code`:
501, 631
544, 631
601, 787

CREATE TABLE `avoid` (
  zip_code INTEGER PRIMARY KEY REFERENCES zip_data(zip_code),
  bad_alias TEXT PRIMARY KEY
);
Sample rows from `avoid`:
501, Internal Revenue Service
544, Internal Revenue Service
601, Colinas Del Gigante

CREATE TABLE `country` (
  zip_code INTEGER PRIMARY KEY REFERENCES zip_data(zip_code),
  county TEXT PRIMARY KEY,
  state TEXT REFERENCES state(abbreviation)
);
Sample rows from `country`:
501, SUFFOLK, NY
544, SUFFOLK, NY
601, ADJUNTAS, PR

CREATE TABLE `zip_congress` (
  zip_code INTEGER PRIMARY KEY REFERENCES zip_data(zip_code),
  district TEXT PRIMARY KEY REFERENCES congress(cognress_rep_id)
);
Sample rows from `zip_congress`:
501, NY-1
601, PR
602, PR

","congress, zip_congress","zip_congress.zip_code, congress.cognress_rep_id, zip_congress.district, congress.house"
video_games,List the game IDs of the games produced by Abylight.,SELECT t1.game_id FROM game_publisher as t1 inner JOIN publisher as t2 ON t1.publisher_id = t2.id WHERE t2.publisher_name = 'Abylight',"CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

","CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

","game_publisher, publisher","game_publisher.game_id, game_publisher.publisher_id, publisher.id, publisher.publisher_name"
authors,"Which year did the ""Internet, Multimedia Systems and Applications"" conference publish the most papers?","SELECT t2.year FROM conference as t1 inner JOIN paper as t2 ON t1.id = t2.conferenceid WHERE t1.fullname = 'Internet, Multimedia Systems and Applications' GROUP BY t2.year ORDER BY COUNT(t2.id) DESC LIMIT 1","CREATE TABLE `conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

CREATE TABLE `paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

","CREATE TABLE `Author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `Author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

CREATE TABLE `Conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

CREATE TABLE `Journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `Paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `Paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `PaperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `PaperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

","conference, paper","paper.year, conference.id, paper.conferenceid, conference.fullname, paper.id"
simpson_episodes,Which episode has the highest number of vote of the star score?,SELECT episode_id FROM vote ORDER BY votes DESC LIMIT 1;,"CREATE TABLE `vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

",vote,"episode_id, votes"
legislator,"How many districts did John Conyers, Jr. serve in total?","SELECT COUNT(t3.district) FROM ( SELECT t2.district FROM current as t1 inner JOIN `current-terms` as t2 ON t1.bioguide_id = t2.bioguide WHERE t1.official_full_name = 'John Conyers, Jr.' GROUP BY t2.district ) t3","CREATE TABLE `current` (
  ballotpedia_id TEXT,
  bioguide_id TEXT PRIMARY KEY,
  birthday_bio DATE,
  cspan_id REAL PRIMARY KEY,
  fec_id TEXT,
  first_name TEXT,
  gender_bio TEXT,
  google_entity_id_id TEXT,
  govtrack_id INTEGER,
  house_history_id REAL,
  icpsr_id REAL,
  last_name TEXT,
  lis_id TEXT,
  maplight_id REAL,
  middle_name TEXT,
  nickname_name TEXT,
  official_full_name TEXT,
  opensecrets_id TEXT,
  religion_bio TEXT,
  suffix_name TEXT,
  thomas_id INTEGER,
  votesmart_id REAL,
  wikidata_id TEXT,
  wikipedia_id TEXT
);
Sample rows from `current`:
Sherrod Brown, B000944, 1952-11-09, 5051.0, ['H2OH13033', 'S6OH00163'], Sherrod, M, kg:/m/034s80, 400050, 9996.0, 29389.0, Brown, S307, 168.0, None, None, Sherrod Brown, N00003535, Lutheran, None, 136, 27018.0, Q381880, Sherrod Brown
Maria Cantwell, C000127, 1958-10-13, 26137.0, ['S8WA00194', 'H2WA01054'], Maria, F, kg:/m/01x68t, 300018, 10608.0, 39310.0, Cantwell, S275, 544.0, None, None, Maria Cantwell, N00007836, Roman Catholic, None, 172, 27122.0, Q22250, Maria Cantwell
Ben Cardin, C000141, 1943-10-05, 4004.0, ['H6MD03177', 'S6MD03177'], Benjamin, M, kg:/m/025k3k, 400064, 10629.0, 15408.0, Cardin, S308, 182.0, L., None, Benjamin L. Cardin, N00001955, Jewish, None, 174, 26888.0, Q723295, Ben Cardin

CREATE TABLE `current-terms` (
  address TEXT,
  bioguide TEXT PRIMARY KEY REFERENCES current(bioguide_id),
  caucus TEXT,
  chamber TEXT,
  class REAL,
  contact_form TEXT,
  district REAL,
  end TEXT PRIMARY KEY,
  fax TEXT,
  last TEXT,
  name TEXT,
  office TEXT,
  party TEXT,
  party_affiliations TEXT,
  phone TEXT,
  relation TEXT,
  rss_url TEXT,
  start TEXT,
  state TEXT,
  state_rank TEXT,
  title TEXT,
  type TEXT,
  url TEXT
);
Sample rows from `current-terms`:
None, B000944, None, None, None, None, 13.0, 1995-01-03, None, None, None, None, Democrat, None, None, None, None, 1993-01-05, OH, None, None, rep, None
None, B000944, None, None, None, None, 13.0, 1997-01-03, None, None, None, None, Democrat, None, None, None, None, 1995-01-04, OH, None, None, rep, None
None, B000944, None, None, None, None, 13.0, 1999-01-03, None, None, None, None, Democrat, None, None, None, None, 1997-01-07, OH, None, None, rep, None

","CREATE TABLE `current` (
  ballotpedia_id TEXT,
  bioguide_id TEXT PRIMARY KEY,
  birthday_bio DATE,
  cspan_id REAL PRIMARY KEY,
  fec_id TEXT,
  first_name TEXT,
  gender_bio TEXT,
  google_entity_id_id TEXT,
  govtrack_id INTEGER,
  house_history_id REAL,
  icpsr_id REAL,
  last_name TEXT,
  lis_id TEXT,
  maplight_id REAL,
  middle_name TEXT,
  nickname_name TEXT,
  official_full_name TEXT,
  opensecrets_id TEXT,
  religion_bio TEXT,
  suffix_name TEXT,
  thomas_id INTEGER,
  votesmart_id REAL,
  wikidata_id TEXT,
  wikipedia_id TEXT
);
Sample rows from `current`:
Sherrod Brown, B000944, 1952-11-09, 5051.0, ['H2OH13033', 'S6OH00163'], Sherrod, M, kg:/m/034s80, 400050, 9996.0, 29389.0, Brown, S307, 168.0, None, None, Sherrod Brown, N00003535, Lutheran, None, 136, 27018.0, Q381880, Sherrod Brown
Maria Cantwell, C000127, 1958-10-13, 26137.0, ['S8WA00194', 'H2WA01054'], Maria, F, kg:/m/01x68t, 300018, 10608.0, 39310.0, Cantwell, S275, 544.0, None, None, Maria Cantwell, N00007836, Roman Catholic, None, 172, 27122.0, Q22250, Maria Cantwell
Ben Cardin, C000141, 1943-10-05, 4004.0, ['H6MD03177', 'S6MD03177'], Benjamin, M, kg:/m/025k3k, 400064, 10629.0, 15408.0, Cardin, S308, 182.0, L., None, Benjamin L. Cardin, N00001955, Jewish, None, 174, 26888.0, Q723295, Ben Cardin

CREATE TABLE `current-terms` (
  address TEXT,
  bioguide TEXT PRIMARY KEY REFERENCES current(bioguide_id),
  caucus TEXT,
  chamber TEXT,
  class REAL,
  contact_form TEXT,
  district REAL,
  end TEXT PRIMARY KEY,
  fax TEXT,
  last TEXT,
  name TEXT,
  office TEXT,
  party TEXT,
  party_affiliations TEXT,
  phone TEXT,
  relation TEXT,
  rss_url TEXT,
  start TEXT,
  state TEXT,
  state_rank TEXT,
  title TEXT,
  type TEXT,
  url TEXT
);
Sample rows from `current-terms`:
None, B000944, None, None, None, None, 13.0, 1995-01-03, None, None, None, None, Democrat, None, None, None, None, 1993-01-05, OH, None, None, rep, None
None, B000944, None, None, None, None, 13.0, 1997-01-03, None, None, None, None, Democrat, None, None, None, None, 1995-01-04, OH, None, None, rep, None
None, B000944, None, None, None, None, 13.0, 1999-01-03, None, None, None, None, Democrat, None, None, None, None, 1997-01-07, OH, None, None, rep, None

CREATE TABLE `historical` (
  ballotpedia_id TEXT,
  bioguide_id TEXT PRIMARY KEY,
  bioguide_previous_id TEXT,
  birthday_bio TEXT,
  cspan_id TEXT,
  fec_id TEXT,
  first_name TEXT,
  gender_bio TEXT,
  google_entity_id_id TEXT,
  govtrack_id INTEGER,
  house_history_alternate_id TEXT,
  house_history_id REAL,
  icpsr_id REAL,
  last_name TEXT,
  lis_id TEXT,
  maplight_id TEXT,
  middle_name TEXT,
  nickname_name TEXT,
  official_full_name TEXT,
  opensecrets_id TEXT,
  religion_bio TEXT,
  suffix_name TEXT,
  thomas_id TEXT,
  votesmart_id TEXT,
  wikidata_id TEXT,
  wikipedia_id TEXT
);
Sample rows from `historical`:
None, B000226, None, 1745-04-02, None, None, Richard, M, kg:/m/02pz46, 401222, None, None, 507.0, Bassett, None, None, None, None, None, None, None, None, None, None, Q518823, Richard Bassett (politician)
None, B000546, None, 1742-03-21, None, None, Theodorick, M, kg:/m/033mf4, 401521, None, 9479.0, 786.0, Bland, None, None, None, None, None, None, None, None, None, None, Q1749152, Theodorick Bland (congressman)
None, B001086, None, 1743-06-16, None, None, Aedanus, M, kg:/m/03yccv, 402032, None, 10177.0, 1260.0, Burke, None, None, None, None, None, None, None, None, None, None, Q380504, Aedanus Burke

CREATE TABLE `historical-terms` (
  address TEXT,
  bioguide TEXT PRIMARY KEY REFERENCES historical(bioguide_id),
  chamber TEXT,
  class REAL,
  contact_form TEXT,
  district REAL,
  end TEXT,
  fax TEXT,
  last TEXT,
  middle TEXT,
  name TEXT,
  office TEXT,
  party TEXT,
  party_affiliations TEXT,
  phone TEXT,
  relation TEXT,
  rss_url TEXT,
  start TEXT,
  state TEXT,
  state_rank TEXT,
  title TEXT,
  type TEXT,
  url TEXT
);
Sample rows from `historical-terms`:
None, B000226, None, 2.0, None, None, 1793-03-03, None, None, None, None, None, Anti-Administration, None, None, None, None, 1789-03-04, DE, None, None, sen, None
None, B000546, None, None, None, 9.0, 1791-03-03, None, None, None, None, None, None, None, None, None, None, 1789-03-04, VA, None, None, rep, None
None, B001086, None, None, None, 2.0, 1791-03-03, None, None, None, None, None, None, None, None, None, None, 1789-03-04, SC, None, None, rep, None

CREATE TABLE `social-media` (
  bioguide TEXT PRIMARY KEY REFERENCES current(bioguide_id),
  facebook TEXT,
  facebook_id REAL,
  govtrack REAL,
  instagram TEXT,
  instagram_id REAL,
  thomas INTEGER,
  twitter TEXT,
  twitter_id REAL,
  youtube TEXT,
  youtube_id TEXT
);
Sample rows from `social-media`:
R000600, congresswomanaumuaamata, 1537155909907320.0, 412664.0, None, None, 2222, RepAmata, 3026622545.0, None, UCGdrLQbt1PYDTPsampx4t1A
Y000064, RepToddYoung, 186203844738421.0, 412428.0, None, None, 2019, RepToddYoung, 234128524.0, RepToddYoung, UCuknj4PGn91gHDNAfboZEgQ
E000295, senjoniernst, 351671691660938.0, 412667.0, senjoniernst, 1582702853.0, 2283, SenJoniErnst, 2856787757.0, None, UCLwrmtF_84FIcK3TyMs4MIw

","current, current-terms","t2.district, current-terms.district, current.bioguide_id, current-terms.bioguide, current.official_full_name"
disney,"Among the movies directed by Wolfgang Reitherman, how many of them are Comedies?",SELECT COUNT(t3.name) FROM ( SELECT t2.name FROM `movies_total_gross` as t1 inner JOIN director as t2 ON t1.movie_title = t2.name WHERE t2.director = 'Wolfgang Reitherman' AND t1.genre = 'Comedy' GROUP BY t2.name ) t3,"CREATE TABLE `movies_total_gross` (
  movie_title TEXT PRIMARY KEY REFERENCES characters(movie_title),
  release_date TEXT PRIMARY KEY,
  genre TEXT,
  MPAA_rating TEXT,
  total_gross TEXT,
  inflation_adjusted_gross TEXT
);
Sample rows from `movies_total_gross`:
Snow White and the Seven Dwarfs, Dec 21, 1937, Musical, G, $184,925,485, $5,228,953,251
Pinocchio, Feb 9, 1940, Adventure, G, $84,300,000, $2,188,229,052
Fantasia, Nov 13, 1940, Musical, G, $83,320,000, $2,187,090,808

CREATE TABLE `director` (
  name TEXT PRIMARY KEY REFERENCES characters(movie_title),
  director TEXT
);
Sample rows from `director`:
Snow White and the Seven Dwarfs, David Hand
Pinocchio, Ben Sharpsteen
Fantasia, full credits

","CREATE TABLE `characters` (
  movie_title TEXT PRIMARY KEY,
  release_date TEXT,
  hero TEXT REFERENCES voice-actors(character),
  villian TEXT,
  song TEXT
);
Sample rows from `characters`:
Snow White and the Seven Dwarfs, 21-Dec-37, Snow White, Evil Queen, Some Day My Prince Will Come
Pinocchio, 7-Feb-40, Pinocchio, Stromboli, When You Wish upon a Star
Fantasia, 13-Nov-40, None, Chernabog, None

CREATE TABLE `director` (
  name TEXT PRIMARY KEY REFERENCES characters(movie_title),
  director TEXT
);
Sample rows from `director`:
Snow White and the Seven Dwarfs, David Hand
Pinocchio, Ben Sharpsteen
Fantasia, full credits

CREATE TABLE `movies_total_gross` (
  movie_title TEXT PRIMARY KEY REFERENCES characters(movie_title),
  release_date TEXT PRIMARY KEY,
  genre TEXT,
  MPAA_rating TEXT,
  total_gross TEXT,
  inflation_adjusted_gross TEXT
);
Sample rows from `movies_total_gross`:
Snow White and the Seven Dwarfs, Dec 21, 1937, Musical, G, $184,925,485, $5,228,953,251
Pinocchio, Feb 9, 1940, Adventure, G, $84,300,000, $2,188,229,052
Fantasia, Nov 13, 1940, Musical, G, $83,320,000, $2,187,090,808

CREATE TABLE `revenue` (
  Year INTEGER,
  Studio Entertainment[NI 1] REAL,
  Disney Consumer Products[NI 2] REAL,
  Disney Interactive[NI 3][Rev 1] INTEGER,
  Walt Disney Parks and Resorts REAL,
  Disney Media Networks TEXT,
  Total INTEGER
);
Sample rows from `revenue`:
1991, 2593.0, 724.0, None, 2794.0, None, 6111
1992, 3115.0, 1081.0, None, 3306.0, None, 7502
1993, 3673.4, 1415.1, None, 3440.7, None, 8529

CREATE TABLE `voice-actors` (
  character TEXT PRIMARY KEY,
  voice-actor TEXT,
  movie TEXT REFERENCES characters(movie_title)
);
Sample rows from `voice-actors`:
Abby Mallard, Joan Cusack, Chicken Little
Abigail Gabble, Monica Evans, The Aristocats
Abis Mal, Jason Alexander, The Return of Jafar

","movies_total_gross, director","director.name, movies_total_gross.movie_title, director.director, movies_total_gross.genre"
retails,"Among all the parts under the type ""promo brushed steel"", how many of them have a total available quantity from all suppliers of under 5000?",SELECt SUM(num) FROM ( SELECt COUNT(t3.s_name) as num FROM part as t1 inner JOIN partsupp as t2 ON t1.p_partkey = t2.ps_partkey inner JOIN supplier as t3 ON t2.ps_suppkey = t3.s_suppkey WHERE t1.p_type = 'PROMO BRUSHED StEEL' GROUP BY t2.ps_partkey HAVING SUM(t2.ps_availqty) < 5000 ) t,"CREATE TABLE `part` (
  p_partkey INTEGER,
  p_type TEXT,
  p_size INTEGER,
  p_brand TEXT,
  p_name TEXT,
  p_container TEXT,
  p_mfgr TEXT,
  p_retailprice REAL,
  p_comment TEXT
);
Sample rows from `part`:
1, LARGE PLATED TIN, 31, Brand#43, burlywood plum powder puff mint, LG BAG, Manufacturer#4, 901.0, blithely busy reque
2, LARGE POLISHED STEEL, 4, Brand#55, hot spring dodger dim light, LG CASE, Manufacturer#5, 902.0, even ironic requests s
3, STANDARD PLATED COPPER, 30, Brand#53, dark slate grey steel misty, WRAP CASE, Manufacturer#5, 903.0, slyly ironic fox

CREATE TABLE `partsupp` (
  ps_partkey INTEGER PRIMARY KEY REFERENCES part(p_partkey),
  ps_suppkey INTEGER PRIMARY KEY REFERENCES supplier(s_suppkey),
  ps_supplycost REAL,
  ps_availqty INTEGER,
  ps_comment TEXT
);
Sample rows from `partsupp`:
1, 2, 400.75, 1111, carefully ironic deposits use against the carefully unusual accounts. slyly silent platelets nag quickly even
1, 2502, 702.61, 3999, slyly regular accounts serve carefully. asymptotes after the slyly even instructions cajole quickly ironic requests. pending dugouts about the slyly 
1, 5002, 383.95, 7411, carefully special ideas are slyly. slyly ironic epitaphs use pending pending foxes. furiously express pinto beans lose quiet even requests: special final packages ar

CREATE TABLE `supplier` (
  s_suppkey INTEGER,
  s_nationkey INTEGER REFERENCES nation(n_nationkey),
  s_comment TEXT,
  s_name TEXT,
  s_address TEXT,
  s_phone TEXT,
  s_acctbal REAL
);
Sample rows from `supplier`:
1, 13, blithely final pearls are. instructions thra, Supplier#000000001, ,wWs4pnykQOFl8mgVCU8EZMXqZs1w, 800-807-9579, 3082.86
2, 5, requests integrate fluffily. fluffily ironic deposits wake. bold, Supplier#000000002, WkXT6MSAJrp4qWq3W9N, 348-617-6055, 3009.73
3, 22, carefully express ideas shall have to unwin, Supplier#000000003, KjUqa42JEHaRDVQTHV6Yq2h, 471-986-9888, 9159.78

","CREATE TABLE `customer` (
  c_custkey INTEGER,
  c_mktsegment TEXT,
  c_nationkey INTEGER REFERENCES nation(n_nationkey),
  c_name TEXT,
  c_address TEXT,
  c_phone TEXT,
  c_acctbal REAL,
  c_comment TEXT
);
Sample rows from `customer`:
1, BUILDING, 8, Customer#000000001, KwX3hMHjZ6, 937-241-3198, 3560.03, ironic excuses detect slyly silent requests. requests according to the exc
2, MACHINERY, 16, Customer#000000002, ioUn,eqTTXOdo, 906-965-7556, 7550.21, final express accounts mold slyly. ironic accounts cajole! quickly express a
3, FURNITURE, 11, Customer#000000003, YddJqmIdouNT9Yj, 328-750-7603, -926.96, carefully express foxes sleep carefully. pending platelets sleep thinly for t

CREATE TABLE `lineitem` (
  l_shipdate DATE,
  l_orderkey INTEGER PRIMARY KEY REFERENCES orders(o_orderkey),
  l_discount REAL,
  l_extendedprice REAL,
  l_suppkey INTEGER REFERENCES partsupp(ps_suppkey),
  l_quantity INTEGER,
  l_returnflag TEXT,
  l_partkey INTEGER REFERENCES partsupp(ps_partkey),
  l_linestatus TEXT,
  l_tax REAL,
  l_commitdate DATE,
  l_receiptdate DATE,
  l_shipmode TEXT,
  l_linenumber INTEGER PRIMARY KEY,
  l_shipinstruct TEXT,
  l_comment TEXT
);
Sample rows from `lineitem`:
1995-08-16, 1, 0.1, 58303.08, 6296, 33, N, 98768, O, 0.06, 1995-07-12, 1995-09-14, RAIL, 1, NONE, carefully bo
1995-08-13, 1, 0.09, 16947.7, 8776, 10, N, 23771, O, 0.08, 1995-07-09, 1995-08-27, TRUCK, 2, TAKE BACK RETURN, blithely regular pac
1995-06-17, 1, 0.1, 63642.9, 3859, 34, N, 113858, O, 0.08, 1995-05-22, 1995-06-30, SHIP, 3, COLLECT COD, ironic accounts sleep furiously silen

CREATE TABLE `nation` (
  n_nationkey INTEGER,
  n_name TEXT,
  n_regionkey INTEGER REFERENCES region(r_regionkey),
  n_comment TEXT
);
Sample rows from `nation`:
0, ALGERIA, 0, slyly express pinto beans cajole idly. deposits use blithely unusual packages? fluffily final accounts x-r
1, ARGENTINA, 1, instructions detect blithely stealthily pending packages
2, BRAZIL, 1, blithely unusual deposits are quickly--

CREATE TABLE `orders` (
  o_orderdate DATE,
  o_orderkey INTEGER,
  o_custkey INTEGER REFERENCES customer(c_custkey),
  o_orderpriority TEXT,
  o_shippriority INTEGER,
  o_clerk TEXT,
  o_orderstatus TEXT,
  o_totalprice REAL,
  o_comment TEXT
);
Sample rows from `orders`:
1995-04-19, 1, 73100, 4-NOT SPECIFIED, 0, Clerk#000000916, P, 203198.56, final packages sleep blithely packa
1996-11-04, 2, 92861, 1-URGENT, 0, Clerk#000000373, O, 317719.99, final excuses about the ironic even deposits detect express request
1992-02-15, 3, 44875, 1-URGENT, 0, Clerk#000000485, F, 146674.98, final final deposits cajole foxes. blithely pendin

CREATE TABLE `part` (
  p_partkey INTEGER,
  p_type TEXT,
  p_size INTEGER,
  p_brand TEXT,
  p_name TEXT,
  p_container TEXT,
  p_mfgr TEXT,
  p_retailprice REAL,
  p_comment TEXT
);
Sample rows from `part`:
1, LARGE PLATED TIN, 31, Brand#43, burlywood plum powder puff mint, LG BAG, Manufacturer#4, 901.0, blithely busy reque
2, LARGE POLISHED STEEL, 4, Brand#55, hot spring dodger dim light, LG CASE, Manufacturer#5, 902.0, even ironic requests s
3, STANDARD PLATED COPPER, 30, Brand#53, dark slate grey steel misty, WRAP CASE, Manufacturer#5, 903.0, slyly ironic fox

CREATE TABLE `partsupp` (
  ps_partkey INTEGER PRIMARY KEY REFERENCES part(p_partkey),
  ps_suppkey INTEGER PRIMARY KEY REFERENCES supplier(s_suppkey),
  ps_supplycost REAL,
  ps_availqty INTEGER,
  ps_comment TEXT
);
Sample rows from `partsupp`:
1, 2, 400.75, 1111, carefully ironic deposits use against the carefully unusual accounts. slyly silent platelets nag quickly even
1, 2502, 702.61, 3999, slyly regular accounts serve carefully. asymptotes after the slyly even instructions cajole quickly ironic requests. pending dugouts about the slyly 
1, 5002, 383.95, 7411, carefully special ideas are slyly. slyly ironic epitaphs use pending pending foxes. furiously express pinto beans lose quiet even requests: special final packages ar

CREATE TABLE `region` (
  r_regionkey INTEGER,
  r_name TEXT,
  r_comment TEXT
);
Sample rows from `region`:
0, AFRICA, asymptotes sublate after the r
1, AMERICA, requests affix quickly final tithes. blithely even packages above the a
2, ASIA, accounts cajole carefully according to the carefully exp

CREATE TABLE `supplier` (
  s_suppkey INTEGER,
  s_nationkey INTEGER REFERENCES nation(n_nationkey),
  s_comment TEXT,
  s_name TEXT,
  s_address TEXT,
  s_phone TEXT,
  s_acctbal REAL
);
Sample rows from `supplier`:
1, 13, blithely final pearls are. instructions thra, Supplier#000000001, ,wWs4pnykQOFl8mgVCU8EZMXqZs1w, 800-807-9579, 3082.86
2, 5, requests integrate fluffily. fluffily ironic deposits wake. bold, Supplier#000000002, WkXT6MSAJrp4qWq3W9N, 348-617-6055, 3009.73
3, 22, carefully express ideas shall have to unwin, Supplier#000000003, KjUqa42JEHaRDVQTHV6Yq2h, 471-986-9888, 9159.78

","part, partsupp, supplier","supplier.s_name, part.p_partkey, partsupp.ps_partkey, partsupp.ps_suppkey, supplier.s_suppkey, part.p_type, partsupp.ps_availqty"
cs_semester,How many courses does the student with the highest GPA this semester take?,SELECT COUNT(course_id) FROM registration WHERE student_id IN ( SELECT student_id FROM student WHERE gpa = ( SELECT MAX(gpa) FROM student ) ),"CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

","CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

CREATE TABLE `prof` (
  prof_id INTEGER,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  popularity INTEGER,
  teachingability INTEGER,
  graduate_from TEXT
);
Sample rows from `prof`:
1, Male, Nathaniel, Pigford, npigford0@hku.hk, 3, 5, University of Washington
2, Male, Zhihua, Zhou, zzhihua@hku.hk, 2, 1, Beijing Polytechnic University
3, Male, Ogdon, Zywicki, ozywicki2@hku.hk, 2, 2, University of Boston

CREATE TABLE `RA` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `RA`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

","registration, student","course_id, student_id, gpa"
sales_in_weather,List out stations number and items sold by store 17.,"SELECT t1.station_nbr, t2.item_nbr FROM relation as t1 inner JOIN sales_in_weather as t2 ON t1.store_nbr = t2.store_nbr WHERE t1.store_nbr = 17 GROUP BY t1.station_nbr, t2.item_nbr","CREATE TABLE `relation` (
  store_nbr INTEGER REFERENCES sales_in_weather(store_nbr),
  station_nbr INTEGER REFERENCES weather(station_nbr)
);
Sample rows from `relation`:
1, 1
2, 14
3, 7

CREATE TABLE `sales_in_weather` (
  date DATE PRIMARY KEY,
  store_nbr INTEGER PRIMARY KEY,
  item_nbr INTEGER PRIMARY KEY,
  units INTEGER
);
Sample rows from `sales_in_weather`:
2012-01-01, 1, 1, 0
2012-01-01, 1, 2, 0
2012-01-01, 1, 3, 0

","CREATE TABLE `sales_in_weather` (
  date DATE PRIMARY KEY,
  store_nbr INTEGER PRIMARY KEY,
  item_nbr INTEGER PRIMARY KEY,
  units INTEGER
);
Sample rows from `sales_in_weather`:
2012-01-01, 1, 1, 0
2012-01-01, 1, 2, 0
2012-01-01, 1, 3, 0

CREATE TABLE `weather` (
  station_nbr INTEGER PRIMARY KEY,
  date DATE PRIMARY KEY,
  tmax INTEGER,
  tmin INTEGER,
  tavg INTEGER,
  depart INTEGER,
  dewpoint INTEGER,
  wetbulb INTEGER,
  heat INTEGER,
  cool INTEGER,
  sunrise TEXT,
  sunset TEXT,
  codesum TEXT,
  snowfall REAL,
  preciptotal REAL,
  stnpressure REAL,
  sealevel REAL,
  resultspeed REAL,
  resultdir INTEGER,
  avgspeed REAL
);
Sample rows from `weather`:
1, 2012-01-01, 52, 31, 42, None, 36, 40, 23, 0, None, None, RA FZFG BR, None, 0.05, 29.78, 29.92, 3.6, 20, 4.6
1, 2012-01-02, 50, 31, 41, None, 26, 35, 24, 0, None, None,  , None, 0.01, 29.44, 29.62, 9.8, 24, 10.3
1, 2012-01-03, 32, 11, 22, None, 4, 18, 43, 0, None, None,  , None, 0.0, 29.67, 29.87, 10.8, 31, 11.6

CREATE TABLE `relation` (
  store_nbr INTEGER REFERENCES sales_in_weather(store_nbr),
  station_nbr INTEGER REFERENCES weather(station_nbr)
);
Sample rows from `relation`:
1, 1
2, 14
3, 7

","relation, sales_in_weather","relation.station_nbr, sales_in_weather.item_nbr, relation.store_nbr, sales_in_weather.store_nbr"
legislator,State all the district that Benjamin Contee has served before.,SELECT t2.district FROM historical as t1 inner JOIN `historical-terms` as t2 ON t1.bioguide_id = t2.bioguide WHERE t1.first_name = 'Benjamin' AND t1.last_name = 'Contee',"CREATE TABLE `historical` (
  ballotpedia_id TEXT,
  bioguide_id TEXT PRIMARY KEY,
  bioguide_previous_id TEXT,
  birthday_bio TEXT,
  cspan_id TEXT,
  fec_id TEXT,
  first_name TEXT,
  gender_bio TEXT,
  google_entity_id_id TEXT,
  govtrack_id INTEGER,
  house_history_alternate_id TEXT,
  house_history_id REAL,
  icpsr_id REAL,
  last_name TEXT,
  lis_id TEXT,
  maplight_id TEXT,
  middle_name TEXT,
  nickname_name TEXT,
  official_full_name TEXT,
  opensecrets_id TEXT,
  religion_bio TEXT,
  suffix_name TEXT,
  thomas_id TEXT,
  votesmart_id TEXT,
  wikidata_id TEXT,
  wikipedia_id TEXT
);
Sample rows from `historical`:
None, B000226, None, 1745-04-02, None, None, Richard, M, kg:/m/02pz46, 401222, None, None, 507.0, Bassett, None, None, None, None, None, None, None, None, None, None, Q518823, Richard Bassett (politician)
None, B000546, None, 1742-03-21, None, None, Theodorick, M, kg:/m/033mf4, 401521, None, 9479.0, 786.0, Bland, None, None, None, None, None, None, None, None, None, None, Q1749152, Theodorick Bland (congressman)
None, B001086, None, 1743-06-16, None, None, Aedanus, M, kg:/m/03yccv, 402032, None, 10177.0, 1260.0, Burke, None, None, None, None, None, None, None, None, None, None, Q380504, Aedanus Burke

CREATE TABLE `historical-terms` (
  address TEXT,
  bioguide TEXT PRIMARY KEY REFERENCES historical(bioguide_id),
  chamber TEXT,
  class REAL,
  contact_form TEXT,
  district REAL,
  end TEXT,
  fax TEXT,
  last TEXT,
  middle TEXT,
  name TEXT,
  office TEXT,
  party TEXT,
  party_affiliations TEXT,
  phone TEXT,
  relation TEXT,
  rss_url TEXT,
  start TEXT,
  state TEXT,
  state_rank TEXT,
  title TEXT,
  type TEXT,
  url TEXT
);
Sample rows from `historical-terms`:
None, B000226, None, 2.0, None, None, 1793-03-03, None, None, None, None, None, Anti-Administration, None, None, None, None, 1789-03-04, DE, None, None, sen, None
None, B000546, None, None, None, 9.0, 1791-03-03, None, None, None, None, None, None, None, None, None, None, 1789-03-04, VA, None, None, rep, None
None, B001086, None, None, None, 2.0, 1791-03-03, None, None, None, None, None, None, None, None, None, None, 1789-03-04, SC, None, None, rep, None

","CREATE TABLE `current` (
  ballotpedia_id TEXT,
  bioguide_id TEXT PRIMARY KEY,
  birthday_bio DATE,
  cspan_id REAL PRIMARY KEY,
  fec_id TEXT,
  first_name TEXT,
  gender_bio TEXT,
  google_entity_id_id TEXT,
  govtrack_id INTEGER,
  house_history_id REAL,
  icpsr_id REAL,
  last_name TEXT,
  lis_id TEXT,
  maplight_id REAL,
  middle_name TEXT,
  nickname_name TEXT,
  official_full_name TEXT,
  opensecrets_id TEXT,
  religion_bio TEXT,
  suffix_name TEXT,
  thomas_id INTEGER,
  votesmart_id REAL,
  wikidata_id TEXT,
  wikipedia_id TEXT
);
Sample rows from `current`:
Sherrod Brown, B000944, 1952-11-09, 5051.0, ['H2OH13033', 'S6OH00163'], Sherrod, M, kg:/m/034s80, 400050, 9996.0, 29389.0, Brown, S307, 168.0, None, None, Sherrod Brown, N00003535, Lutheran, None, 136, 27018.0, Q381880, Sherrod Brown
Maria Cantwell, C000127, 1958-10-13, 26137.0, ['S8WA00194', 'H2WA01054'], Maria, F, kg:/m/01x68t, 300018, 10608.0, 39310.0, Cantwell, S275, 544.0, None, None, Maria Cantwell, N00007836, Roman Catholic, None, 172, 27122.0, Q22250, Maria Cantwell
Ben Cardin, C000141, 1943-10-05, 4004.0, ['H6MD03177', 'S6MD03177'], Benjamin, M, kg:/m/025k3k, 400064, 10629.0, 15408.0, Cardin, S308, 182.0, L., None, Benjamin L. Cardin, N00001955, Jewish, None, 174, 26888.0, Q723295, Ben Cardin

CREATE TABLE `current-terms` (
  address TEXT,
  bioguide TEXT PRIMARY KEY REFERENCES current(bioguide_id),
  caucus TEXT,
  chamber TEXT,
  class REAL,
  contact_form TEXT,
  district REAL,
  end TEXT PRIMARY KEY,
  fax TEXT,
  last TEXT,
  name TEXT,
  office TEXT,
  party TEXT,
  party_affiliations TEXT,
  phone TEXT,
  relation TEXT,
  rss_url TEXT,
  start TEXT,
  state TEXT,
  state_rank TEXT,
  title TEXT,
  type TEXT,
  url TEXT
);
Sample rows from `current-terms`:
None, B000944, None, None, None, None, 13.0, 1995-01-03, None, None, None, None, Democrat, None, None, None, None, 1993-01-05, OH, None, None, rep, None
None, B000944, None, None, None, None, 13.0, 1997-01-03, None, None, None, None, Democrat, None, None, None, None, 1995-01-04, OH, None, None, rep, None
None, B000944, None, None, None, None, 13.0, 1999-01-03, None, None, None, None, Democrat, None, None, None, None, 1997-01-07, OH, None, None, rep, None

CREATE TABLE `historical` (
  ballotpedia_id TEXT,
  bioguide_id TEXT PRIMARY KEY,
  bioguide_previous_id TEXT,
  birthday_bio TEXT,
  cspan_id TEXT,
  fec_id TEXT,
  first_name TEXT,
  gender_bio TEXT,
  google_entity_id_id TEXT,
  govtrack_id INTEGER,
  house_history_alternate_id TEXT,
  house_history_id REAL,
  icpsr_id REAL,
  last_name TEXT,
  lis_id TEXT,
  maplight_id TEXT,
  middle_name TEXT,
  nickname_name TEXT,
  official_full_name TEXT,
  opensecrets_id TEXT,
  religion_bio TEXT,
  suffix_name TEXT,
  thomas_id TEXT,
  votesmart_id TEXT,
  wikidata_id TEXT,
  wikipedia_id TEXT
);
Sample rows from `historical`:
None, B000226, None, 1745-04-02, None, None, Richard, M, kg:/m/02pz46, 401222, None, None, 507.0, Bassett, None, None, None, None, None, None, None, None, None, None, Q518823, Richard Bassett (politician)
None, B000546, None, 1742-03-21, None, None, Theodorick, M, kg:/m/033mf4, 401521, None, 9479.0, 786.0, Bland, None, None, None, None, None, None, None, None, None, None, Q1749152, Theodorick Bland (congressman)
None, B001086, None, 1743-06-16, None, None, Aedanus, M, kg:/m/03yccv, 402032, None, 10177.0, 1260.0, Burke, None, None, None, None, None, None, None, None, None, None, Q380504, Aedanus Burke

CREATE TABLE `historical-terms` (
  address TEXT,
  bioguide TEXT PRIMARY KEY REFERENCES historical(bioguide_id),
  chamber TEXT,
  class REAL,
  contact_form TEXT,
  district REAL,
  end TEXT,
  fax TEXT,
  last TEXT,
  middle TEXT,
  name TEXT,
  office TEXT,
  party TEXT,
  party_affiliations TEXT,
  phone TEXT,
  relation TEXT,
  rss_url TEXT,
  start TEXT,
  state TEXT,
  state_rank TEXT,
  title TEXT,
  type TEXT,
  url TEXT
);
Sample rows from `historical-terms`:
None, B000226, None, 2.0, None, None, 1793-03-03, None, None, None, None, None, Anti-Administration, None, None, None, None, 1789-03-04, DE, None, None, sen, None
None, B000546, None, None, None, 9.0, 1791-03-03, None, None, None, None, None, None, None, None, None, None, 1789-03-04, VA, None, None, rep, None
None, B001086, None, None, None, 2.0, 1791-03-03, None, None, None, None, None, None, None, None, None, None, 1789-03-04, SC, None, None, rep, None

CREATE TABLE `social-media` (
  bioguide TEXT PRIMARY KEY REFERENCES current(bioguide_id),
  facebook TEXT,
  facebook_id REAL,
  govtrack REAL,
  instagram TEXT,
  instagram_id REAL,
  thomas INTEGER,
  twitter TEXT,
  twitter_id REAL,
  youtube TEXT,
  youtube_id TEXT
);
Sample rows from `social-media`:
R000600, congresswomanaumuaamata, 1537155909907320.0, 412664.0, None, None, 2222, RepAmata, 3026622545.0, None, UCGdrLQbt1PYDTPsampx4t1A
Y000064, RepToddYoung, 186203844738421.0, 412428.0, None, None, 2019, RepToddYoung, 234128524.0, RepToddYoung, UCuknj4PGn91gHDNAfboZEgQ
E000295, senjoniernst, 351671691660938.0, 412667.0, senjoniernst, 1582702853.0, 2283, SenJoniErnst, 2856787757.0, None, UCLwrmtF_84FIcK3TyMs4MIw

","historical, historical-terms","historical-terms.district, historical.bioguide_id, historical-terms.bioguide, historical.first_name, historical.last_name"
college_completion,"How many 2-year public schools are there in ""California""?",SELECT COUNT(stateid) FROM state_sector_details WHERE state = 'California' AND level = '2-year' AND control = 'Public',"CREATE TABLE `state_sector_details` (
  stateid INTEGER PRIMARY KEY,
  state TEXT REFERENCES institution_details(state),
  state_post TEXT,
  level TEXT PRIMARY KEY,
  control TEXT PRIMARY KEY,
  schools_count INTEGER,
  counted_pct TEXT,
  awards_per_state_value TEXT,
  awards_per_natl_value REAL,
  exp_award_state_value TEXT,
  exp_award_natl_value INTEGER,
  state_appr_value TEXT,
  state_appr_rank TEXT,
  grad_rate_rank TEXT,
  awards_per_rank TEXT
);
Sample rows from `state_sector_details`:
0, United States, U.S., 4-year, Public, 632, NULL, NULL, 21.5, NULL, 66436, NULL, NULL, 23, NULL
0, United States, U.S., 4-year, Private not-for-profit, 1180, NULL, NULL, 22.5, NULL, 101725, NULL, NULL, 18, NULL
0, United States, U.S., 4-year, Private for-profit, 527, NULL, NULL, 24.6, NULL, 38763, NULL, NULL, 8, NULL

","CREATE TABLE `institution_details` (
  unitid INTEGER,
  chronname TEXT,
  city TEXT,
  state TEXT,
  level TEXT,
  control TEXT,
  basic TEXT,
  hbcu TEXT,
  flagship TEXT,
  long_x REAL,
  lat_y REAL,
  site TEXT,
  student_count INTEGER,
  awards_per_value REAL,
  awards_per_state_value REAL,
  awards_per_natl_value REAL,
  exp_award_value INTEGER,
  exp_award_state_value INTEGER,
  exp_award_natl_value INTEGER,
  exp_award_percentile INTEGER,
  ft_pct REAL,
  fte_value INTEGER,
  fte_percentile INTEGER,
  med_sat_value TEXT,
  med_sat_percentile TEXT,
  aid_value INTEGER,
  aid_percentile INTEGER,
  endow_value TEXT,
  endow_percentile TEXT,
  grad_100_value REAL,
  grad_100_percentile INTEGER,
  grad_150_value REAL,
  grad_150_percentile INTEGER,
  pell_value REAL,
  pell_percentile INTEGER,
  retain_value REAL,
  retain_percentile INTEGER,
  ft_fac_value REAL,
  ft_fac_percentile INTEGER,
  vsa_year TEXT,
  vsa_grad_after4_first TEXT,
  vsa_grad_elsewhere_after4_first TEXT,
  vsa_enroll_after4_first TEXT,
  vsa_enroll_elsewhere_after4_first TEXT,
  vsa_grad_after6_first TEXT,
  vsa_grad_elsewhere_after6_first TEXT,
  vsa_enroll_after6_first TEXT,
  vsa_enroll_elsewhere_after6_first TEXT,
  vsa_grad_after4_transfer TEXT,
  vsa_grad_elsewhere_after4_transfer TEXT,
  vsa_enroll_after4_transfer TEXT,
  vsa_enroll_elsewhere_after4_transfer TEXT,
  vsa_grad_after6_transfer TEXT,
  vsa_grad_elsewhere_after6_transfer TEXT,
  vsa_enroll_after6_transfer TEXT,
  vsa_enroll_elsewhere_after6_transfer TEXT,
  similar TEXT,
  state_sector_ct INTEGER,
  carnegie_ct INTEGER,
  counted_pct TEXT,
  nicknames TEXT,
  cohort_size INTEGER
);
Sample rows from `institution_details`:
100654, Alabama A&M University, Normal, Alabama, 4-year, Public, Masters Colleges and Universities--larger programs, X, NULL, -86.568502, 34.783368, www.aamu.edu/, 4051, 14.2, 18.8, 21.5, 105331, 75743, 66436, 90, 93.8, 3906, 33, 823, 0, 7142, 72, NULL, NULL, 10.0, 15, 29.1, 14, 71.2, 98, 63.1, 17, 82.8, 89, 2010, 14.7, 2, 36.5, 16.1, 33, 5.3, 12.5, 14.6, 15.7, 1.5, 40.9, 17.2, 36.4, 5.6, 17.2, 11.1, 232937|100724|405997|113607|139533|144005|228501|101480|131876|144759|419509|176479|243197|228529|372222|228431|206695|139366|159993|224147, 13, 386, 99.7|07, NULL, 882
100663, University of Alabama at Birmingham, Birmingham, Alabama, 4-year, Public, Research Universities--very high research activity, NULL, NULL, -86.80917, 33.50223, www.uab.edu, 11502, 20.9, 18.8, 21.5, 136546, 75743, 66436, 97, 72.7, 10032, 67, 1146, 84, 6088, 50, 24136, 93, 29.4, 67, 53.5, 66, 35.1, 39, 80.2, 70, 92.4, 98, 2011, 22.3, 2.9, 34.2, 19.2, 42.6, 10.5, 7.9, 13.1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 196060|180461|201885|145600|209542|236939|126818|230764|104151|104179|157085|171100|153603|141574|155317|110714|137351|126562|243780|196088, 13, 106, 56.0|07, UAB, 1376
100690, Amridge University, Montgomery, Alabama, 4-year, Private not-for-profit, Baccalaureate Colleges--Arts & Sciences, NULL, NULL, -86.17401, 32.362609, www.amridgeuniversity.edu, 322, 29.9, 17.8, 22.5, 58414, 92268, 101725, 30, 62.7, 294, 12, NULL, NULL, 2540, 1, 302, 1, 0.0, 0, 66.7, 72, 68.4, 91, 37.5, 2, 67.2, 71, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 217925|441511|205124|247825|197647|221856|135364|117575|164207|193070|199315|166054|367893|183804|439701|193052|197744|193247|137777|176789, 16, 252, 100.0|07, NULL, 3

CREATE TABLE `institution_grads` (
  unitid INTEGER REFERENCES institution_details(unitid),
  year INTEGER,
  gender TEXT,
  race TEXT,
  cohort TEXT,
  grad_cohort TEXT,
  grad_100 TEXT,
  grad_150 TEXT,
  grad_100_rate TEXT,
  grad_150_rate TEXT
);
Sample rows from `institution_grads`:
100760, 2011, B, X, 2y all, 446, 73, 105, 16.4, 23.5
100760, 2011, M, X, 2y all, 185, NULL, 40, NULL, 21.6
100760, 2011, F, X, 2y all, 261, NULL, 65, NULL, 24.9

CREATE TABLE `state_sector_grads` (
  stateid INTEGER REFERENCES state_sector_details(stateid),
  state TEXT REFERENCES institution_details(state),
  state_abbr TEXT,
  control TEXT,
  level TEXT,
  year INTEGER,
  gender TEXT,
  race TEXT,
  cohort TEXT,
  grad_cohort TEXT,
  grad_100 TEXT,
  grad_150 TEXT,
  grad_100_rate TEXT,
  grad_150_rate TEXT,
  grad_cohort_ct INTEGER
);
Sample rows from `state_sector_grads`:
1, Alabama, AL, Private for-profit, 4-year, 2011, B, A, 4y bach, 0, 0, 0, NULL, NULL, 9
1, Alabama, AL, Private for-profit, 4-year, 2011, B, Ai, 4y bach, 1, 0, 0, 0, 0, 9
1, Alabama, AL, Private for-profit, 4-year, 2011, B, B, 4y bach, 51, 2, 3, 3.9, 5.9, 9

CREATE TABLE `state_sector_details` (
  stateid INTEGER PRIMARY KEY,
  state TEXT REFERENCES institution_details(state),
  state_post TEXT,
  level TEXT PRIMARY KEY,
  control TEXT PRIMARY KEY,
  schools_count INTEGER,
  counted_pct TEXT,
  awards_per_state_value TEXT,
  awards_per_natl_value REAL,
  exp_award_state_value TEXT,
  exp_award_natl_value INTEGER,
  state_appr_value TEXT,
  state_appr_rank TEXT,
  grad_rate_rank TEXT,
  awards_per_rank TEXT
);
Sample rows from `state_sector_details`:
0, United States, U.S., 4-year, Public, 632, NULL, NULL, 21.5, NULL, 66436, NULL, NULL, 23, NULL
0, United States, U.S., 4-year, Private not-for-profit, 1180, NULL, NULL, 22.5, NULL, 101725, NULL, NULL, 18, NULL
0, United States, U.S., 4-year, Private for-profit, 527, NULL, NULL, 24.6, NULL, 38763, NULL, NULL, 8, NULL

",state_sector_details,"stateid, state, control"
retail_world,"List down the customer company names, addresses, phones and faxes which are located in London.","SELECT companyname, address, phone, fax FROM customers WHERE city = 'London'","CREATE TABLE `customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

",customers,"companyname, address, phone, fax, city"
video_games,"Indicate, by region, which platform has sold the most games.","SELECt t.region_name FROM ( SELECt t1.platform_name, t4.region_name, SUM(t3.num_sales) FROM platform as t1 inner JOIN game_platform as t2 ON t1.id = t2.platform_id inner JOIN region_sales as t3 ON t1.id = t3.game_platform_id inner JOIN region as t4 ON t3.region_id = t4.id GROUP BY t1.platform_name, t4.region_name ORDER BY SUM(t3.num_sales) DESC LIMIt 1 ) t","CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

","CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

","platform, game_platform, region_sales, region","region.region_name, platform.platform_name, region_sales.num_sales, platform.id, game_platform.platform_id, region_sales.game_platform_id, region_sales.region_id, region.id"
bike_share_1,Which bicycle is the least used bike. Check if the start and end station are from the same city and calculate the total duration travelled by the bicycle in hours for a trip made within the same city.,"SELECT t2.bike_id, t2.start_station_name, t2.end_station_name, t1.city , cast(t2.duration as real) / 3600 FROM station as t1 inner JOIN trip as t2 ON t1.name = t2.start_station_name GROUP BY t2.bike_id ORDER BY COUNT(t2.id) DESC LIMIT 1","CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat REAL,
  long REAL,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);
Sample rows from `station`:
2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013
3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013
4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013

CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);
Sample rows from `trip`:
4069, 174, 8/29/2013 9:08, 2nd at South Park, 64, 8/29/2013 9:11, 2nd at South Park, 64, 288, Subscriber, 94114
4073, 1067, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:42, San Francisco Caltrain 2 (330 Townsend), 69, 321, Subscriber, 94703
4074, 1131, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:43, San Francisco Caltrain 2 (330 Townsend), 69, 317, Subscriber, 94115

","CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat REAL,
  long REAL,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);
Sample rows from `station`:
2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013
3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013
4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013

CREATE TABLE `status` (
  station_id INTEGER,
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);
Sample rows from `status`:
2, 2, 25, 2013/08/29 12:06:01
2, 2, 25, 2013/08/29 12:07:01
2, 2, 25, 2013/08/29 12:08:01

CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);
Sample rows from `trip`:
4069, 174, 8/29/2013 9:08, 2nd at South Park, 64, 8/29/2013 9:11, 2nd at South Park, 64, 288, Subscriber, 94114
4073, 1067, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:42, San Francisco Caltrain 2 (330 Townsend), 69, 321, Subscriber, 94703
4074, 1131, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:43, San Francisco Caltrain 2 (330 Townsend), 69, 317, Subscriber, 94115

CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches REAL,
  mean_sea_level_pressure_inches REAL,
  min_sea_level_pressure_inches REAL,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches TEXT,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code TEXT
);
Sample rows from `weather`:
8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107
8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30.0, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107
8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30.0, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107

","station, trip","trip.bike_id, trip.start_station_name, trip.end_station_name, station.city, trip.duration, station.name, trip.id"
cs_semester,Describe the full names and graduated universities of the professors who advised Olia Rabier.,"SELECT t1.first_name, t1.last_name, t1.graduate_from FROM prof as t1 inner JOIN ra as t2 ON t1.prof_id = t2.prof_id inner JOIN student as t3 ON t2.student_id = t3.student_id WHERE t3.f_name = 'Olia' AND t3.l_name = 'Rabier'","CREATE TABLE `prof` (
  prof_id INTEGER,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  popularity INTEGER,
  teachingability INTEGER,
  graduate_from TEXT
);
Sample rows from `prof`:
1, Male, Nathaniel, Pigford, npigford0@hku.hk, 3, 5, University of Washington
2, Male, Zhihua, Zhou, zzhihua@hku.hk, 2, 1, Beijing Polytechnic University
3, Male, Ogdon, Zywicki, ozywicki2@hku.hk, 2, 2, University of Boston

CREATE TABLE `ra` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `ra`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

","CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

CREATE TABLE `prof` (
  prof_id INTEGER,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  popularity INTEGER,
  teachingability INTEGER,
  graduate_from TEXT
);
Sample rows from `prof`:
1, Male, Nathaniel, Pigford, npigford0@hku.hk, 3, 5, University of Washington
2, Male, Zhihua, Zhou, zzhihua@hku.hk, 2, 1, Beijing Polytechnic University
3, Male, Ogdon, Zywicki, ozywicki2@hku.hk, 2, 2, University of Boston

CREATE TABLE `RA` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `RA`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

","prof, ra, student","prof.first_name, prof.last_name, prof.graduate_from, prof.prof_id, ra.prof_id, ra.student_id, student.student_id, student.f_name, student.l_name"
address,Compare the numbers of postal points under Smith Adrian and Heck Joe.,SELECT case when COUNT(case when t1.first_name = 'Smith' AND t1.last_name = 'Adrian' then t2.zip_code else null end) > COUNT(case when t1.first_name = 'Heck' AND t1.last_name = 'Joe' then t2.zip_code else null end) then 'Smith Adrian>Heck Joe' else 'Smith Adrian<=Heck Joe' end as compare FROM congress as t1 inner JOIN zip_congress as t2 ON t1.cognress_rep_id = t2.district,"CREATE TABLE `congress` (
  cognress_rep_id TEXT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  CID TEXT,
  party TEXT,
  state TEXT,
  abbreviation TEXT REFERENCES state(abbreviation),
  House TEXT,
  District INTEGER,
  land_area REAL
);
Sample rows from `congress`:
AK, Young, Don, N00008091, Republican, Alaska, AK, House of Repsentatives, None, 571951.26
AK-S1, Begich, Mark, N00009585, Democrat, Alaska, AK, Senate, None, 570641.0
AK-S2, Murkowski, Lisa, N00033101, Republican, Alaska, AK, Senate, None, 570641.0

CREATE TABLE `zip_congress` (
  zip_code INTEGER PRIMARY KEY REFERENCES zip_data(zip_code),
  district TEXT PRIMARY KEY REFERENCES congress(cognress_rep_id)
);
Sample rows from `zip_congress`:
501, NY-1
601, PR
602, PR

","CREATE TABLE `CBSA` (
  CBSA INTEGER,
  CBSA_name TEXT,
  CBSA_type TEXT
);
Sample rows from `CBSA`:
10300, Adrian, MI, Micro
10380, Aguadilla-Isabela, PR, Metro
10420, Akron, OH, Metro

CREATE TABLE `state` (
  abbreviation TEXT PRIMARY KEY,
  name TEXT
);
Sample rows from `state`:
AA, Armed Forces Americas
AE, Armed Forces Europe
AK, Alaska

CREATE TABLE `congress` (
  cognress_rep_id TEXT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  CID TEXT,
  party TEXT,
  state TEXT,
  abbreviation TEXT REFERENCES state(abbreviation),
  House TEXT,
  District INTEGER,
  land_area REAL
);
Sample rows from `congress`:
AK, Young, Don, N00008091, Republican, Alaska, AK, House of Repsentatives, None, 571951.26
AK-S1, Begich, Mark, N00009585, Democrat, Alaska, AK, Senate, None, 570641.0
AK-S2, Murkowski, Lisa, N00033101, Republican, Alaska, AK, Senate, None, 570641.0

CREATE TABLE `zip_data` (
  zip_code INTEGER,
  city TEXT,
  state TEXT REFERENCES state(abbreviation),
  multi_county TEXT,
  type TEXT,
  organization TEXT,
  time_zone TEXT,
  daylight_savings TEXT,
  latitude REAL,
  longitude REAL,
  elevation INTEGER,
  state_fips INTEGER,
  county_fips INTEGER,
  region TEXT,
  division TEXT,
  population_2020 INTEGER,
  population_2010 INTEGER,
  households INTEGER,
  avg_house_value INTEGER,
  avg_income_per_household INTEGER,
  persons_per_household REAL,
  white_population INTEGER,
  black_population INTEGER,
  hispanic_population INTEGER,
  asian_population INTEGER,
  american_indian_population INTEGER,
  hawaiian_population INTEGER,
  other_population INTEGER,
  male_population INTEGER,
  female_population INTEGER,
  median_age REAL,
  male_median_age REAL,
  female_median_age REAL,
  residential_mailboxes INTEGER,
  business_mailboxes INTEGER,
  total_delivery_receptacles INTEGER,
  businesses INTEGER,
  1st_quarter_payroll INTEGER,
  annual_payroll INTEGER,
  employees INTEGER,
  water_area REAL,
  land_area REAL,
  single_family_delivery_units INTEGER,
  multi_family_delivery_units INTEGER,
  total_beneficiaries INTEGER,
  retired_workers INTEGER,
  disabled_workers INTEGER,
  parents_and_widowed INTEGER,
  spouses INTEGER,
  children INTEGER,
  over_65 INTEGER,
  monthly_benefits_all INTEGER,
  monthly_benefits_retired_workers INTEGER,
  monthly_benefits_widowed INTEGER,
  CBSA INTEGER REFERENCES CBSA(CBSA)
);
Sample rows from `zip_data`:
501, Holtsville, NY, No, Unique Post Office, I R S Service Center, Eastern, Yes, 40.817923, -73.045317, 25, 36, 103, Northeast, Middle Atlantic, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0, 1, 1, 2, 0, 0, 0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35620
544, Holtsville, NY, No, Unique Post Office, Irs Service Center, Eastern, Yes, 40.788827, -73.039405, 25, 36, 103, Northeast, Middle Atlantic, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35620
601, Adjuntas, PR, No, Post Office, None, Atlantic, No, 18.196747, -66.736735, 0, 72, 1, None, None, 11737, 18570, 6525, 86200, 13092, 2.84, 17479, 663, 18486, 7, 113, 10, 558, 9078, 9492, 35.9, 34.5, 37.1, 4133, 221, 5173, 0, 0, 0, 0, 0.309, 64.348, 2419, 1264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38660

CREATE TABLE `alias` (
  zip_code INTEGER REFERENCES zip_data(zip_code),
  alias TEXT
);
Sample rows from `alias`:
501, Holtsville
544, Holtsville
601, Adjuntas

CREATE TABLE `area_code` (
  zip_code INTEGER PRIMARY KEY REFERENCES zip_data(zip_code),
  area_code INTEGER PRIMARY KEY
);
Sample rows from `area_code`:
501, 631
544, 631
601, 787

CREATE TABLE `avoid` (
  zip_code INTEGER PRIMARY KEY REFERENCES zip_data(zip_code),
  bad_alias TEXT PRIMARY KEY
);
Sample rows from `avoid`:
501, Internal Revenue Service
544, Internal Revenue Service
601, Colinas Del Gigante

CREATE TABLE `country` (
  zip_code INTEGER PRIMARY KEY REFERENCES zip_data(zip_code),
  county TEXT PRIMARY KEY,
  state TEXT REFERENCES state(abbreviation)
);
Sample rows from `country`:
501, SUFFOLK, NY
544, SUFFOLK, NY
601, ADJUNTAS, PR

CREATE TABLE `zip_congress` (
  zip_code INTEGER PRIMARY KEY REFERENCES zip_data(zip_code),
  district TEXT PRIMARY KEY REFERENCES congress(cognress_rep_id)
);
Sample rows from `zip_congress`:
501, NY-1
601, PR
602, PR

","congress, zip_congress","congress.first_name, congress.last_name, zip_congress.zip_code, congress.cognress_rep_id, zip_congress.district"
professional_basketball,"From 1950 to 1970, what is the maximum point of players whose teams were ranked 1?",SELECT MAX(t2.points) FROM teams as t1 inner JOIN players_teams as t2 ON t1.tmid = t2.tmid AND t1.year = t2.year WHERE t1.year BETWEEN 1950 AND 1970 AND t1.rank = 1,"CREATE TABLE `teams` (
  year INTEGER PRIMARY KEY,
  lgID TEXT,
  tmID TEXT PRIMARY KEY,
  franchID TEXT,
  confID TEXT,
  divID TEXT,
  rank INTEGER,
  confRank INTEGER,
  playoff TEXT,
  name TEXT,
  o_fgm INTEGER,
  o_ftm INTEGER,
  o_pts INTEGER,
  d_pts INTEGER,
  homeWon INTEGER,
  homeLost INTEGER,
  awayWon INTEGER,
  awayLost INTEGER,
  won INTEGER,
  lost INTEGER,
  games INTEGER,
  arena TEXT
);
Sample rows from `teams`:
1937, NBL, AFS, AFS, None, EA, 1, 0, CF, Akron Firestone Non-Skids, 249, 183, 681, 578, 8, 1, 5, 3, 14, 4, 18, None
1937, NBL, AGW, AGW, None, EA, 2, 0, WC, Akron Goodyear Wingfoots, 243, 159, 645, 498, 8, 1, 5, 4, 13, 5, 18, None
1937, NBL, BFB, BFB, None, EA, 4, 0, None, Buffalo Bisons, 108, 46, 262, 275, 2, 2, 1, 4, 3, 6, 9, None

CREATE TABLE `players_teams` (
  id INTEGER,
  playerID TEXT REFERENCES players(None),
  year INTEGER REFERENCES teams(year),
  stint INTEGER,
  tmID TEXT REFERENCES teams(tmID),
  lgID TEXT,
  GP INTEGER,
  GS INTEGER,
  minutes INTEGER,
  points INTEGER,
  oRebounds INTEGER,
  dRebounds INTEGER,
  rebounds INTEGER,
  assists INTEGER,
  steals INTEGER,
  blocks INTEGER,
  turnovers INTEGER,
  PF INTEGER,
  fgAttempted INTEGER,
  fgMade INTEGER,
  ftAttempted INTEGER,
  ftMade INTEGER,
  threeAttempted INTEGER,
  threeMade INTEGER,
  PostGP INTEGER,
  PostGS INTEGER,
  PostMinutes INTEGER,
  PostPoints INTEGER,
  PostoRebounds INTEGER,
  PostdRebounds INTEGER,
  PostRebounds INTEGER,
  PostAssists INTEGER,
  PostSteals INTEGER,
  PostBlocks INTEGER,
  PostTurnovers INTEGER,
  PostPF INTEGER,
  PostfgAttempted INTEGER,
  PostfgMade INTEGER,
  PostftAttempted INTEGER,
  PostftMade INTEGER,
  PostthreeAttempted INTEGER,
  PostthreeMade INTEGER,
  note TEXT
);
Sample rows from `players_teams`:
1, abdelal01, 1990, 1, POR, NBA, 43, 0, 290, 135, 27, 62, 89, 12, 4, 12, 22, 39, 116, 55, 44, 25, 0, 0, 5, 0, 13, 4, 1, 2, 3, 0, 0, 0, 0, 0, 6, 2, 0, 0, 0, 0, None
2, abdelal01, 1991, 1, POR, NBA, 71, 0, 934, 432, 81, 179, 260, 30, 25, 17, 66, 132, 361, 178, 101, 76, 0, 0, 8, 0, 25, 12, 0, 4, 4, 2, 0, 0, 2, 4, 10, 5, 4, 2, 0, 0, None
3, abdelal01, 1992, 1, MIL, NBA, 12, 0, 159, 64, 12, 25, 37, 10, 6, 4, 0, 24, 56, 26, 16, 12, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, None

","CREATE TABLE `awards_players` (
  playerID TEXT PRIMARY KEY REFERENCES players(playerID),
  award TEXT PRIMARY KEY,
  year INTEGER PRIMARY KEY,
  lgID TEXT,
  note TEXT,
  pos TEXT
);
Sample rows from `awards_players`:
abdulka01, All-Defensive Second Team, 1969, NBA, None, None
abdulka01, All-NBA Second Team, 1969, NBA, None, C
abdulka01, Rookie of the Year, 1969, NBA, None, None

CREATE TABLE `coaches` (
  coachID TEXT PRIMARY KEY,
  year INTEGER PRIMARY KEY REFERENCES teams(year),
  tmID TEXT PRIMARY KEY REFERENCES teams(tmID),
  lgID TEXT,
  stint INTEGER PRIMARY KEY,
  won INTEGER,
  lost INTEGER,
  post_wins INTEGER,
  post_losses INTEGER
);
Sample rows from `coaches`:
adelmri01, 1988, POR, NBA, 2, 14, 21, 0, 3
adelmri01, 1989, POR, NBA, 1, 59, 23, 12, 9
adelmri01, 1990, POR, NBA, 1, 63, 19, 9, 7

CREATE TABLE `draft` (
  id INTEGER,
  draftYear INTEGER REFERENCES teams(year),
  draftRound INTEGER,
  draftSelection INTEGER,
  draftOverall INTEGER,
  tmID TEXT REFERENCES teams(tmID),
  firstName TEXT,
  lastName TEXT,
  suffixName TEXT,
  playerID TEXT,
  draftFrom TEXT,
  lgID TEXT
);
Sample rows from `draft`:
1, 1967, 0, 0, 0, ANA, Darrell, Hardy, None, hardyda01, Baylor, ABA
2, 1967, 0, 0, 0, ANA, Bob, Krulish, None, None, Pacific, ABA
3, 1967, 0, 0, 0, ANA, Bob, Lewis, None, lewisbo01, North Carolina, ABA

CREATE TABLE `player_allstar` (
  playerID TEXT PRIMARY KEY REFERENCES players(playerID),
  last_name TEXT,
  first_name TEXT,
  season_id INTEGER PRIMARY KEY,
  conference TEXT,
  league_id TEXT,
  games_played INTEGER,
  minutes INTEGER,
  points INTEGER,
  o_rebounds INTEGER,
  d_rebounds INTEGER,
  rebounds INTEGER,
  assists INTEGER,
  steals INTEGER,
  blocks INTEGER,
  turnovers INTEGER,
  personal_fouls INTEGER,
  fg_attempted INTEGER,
  fg_made INTEGER,
  ft_attempted INTEGER,
  ft_made INTEGER,
  three_attempted INTEGER,
  three_made INTEGER
);
Sample rows from `player_allstar`:
abdulka01, Abdul-Jabbar, Kareem, 1969, East, NBA, 1, 18, 10, None, None, 11, 4, None, None, None, None, 8, 4, 2, 2, None, None
abdulka01, Abdul-Jabbar, Kareem, 1970, West, NBA, 1, 30, 19, None, None, 14, 1, None, None, None, None, 16, 8, 4, 3, None, None
abdulka01, Abdul-Jabbar, Kareem, 1971, West, NBA, 1, 19, 12, None, None, 7, 2, None, None, None, None, 10, 5, 2, 2, None, None

CREATE TABLE `players` (
  playerID TEXT PRIMARY KEY,
  useFirst TEXT,
  firstName TEXT,
  middleName TEXT,
  lastName TEXT,
  nameGiven TEXT,
  fullGivenName TEXT,
  nameSuffix TEXT,
  nameNick TEXT,
  pos TEXT,
  firstseason INTEGER,
  lastseason INTEGER,
  height REAL,
  weight INTEGER,
  college TEXT,
  collegeOther TEXT,
  birthDate DATE,
  birthCity TEXT,
  birthState TEXT,
  birthCountry TEXT,
  highSchool TEXT,
  hsCity TEXT,
  hsState TEXT,
  hsCountry TEXT,
  deathDate DATE,
  race TEXT
);
Sample rows from `players`:
abdelal01, Alaa, Alaa, None, Abdelnaby, None, None, None, None, F-C, 0, 0, 82.0, 240, Duke, None, 1968-06-24, Cairo, None, EGY, Bloomfield Senior, Bloomfield, NJ, USA, 0000-00-00, B
abdulka01, Kareem, Kareem, None, Abdul-Jabbar, None, Ferdinand Lewis Alcindor, Jr., None, Lew, Cap, C, 0, 0, 85.0, 225, UCLA, None, 1947-04-16, New York, NY, USA, Power Memorial, New York, NY, USA, 0000-00-00, B
abdulma01, Mahdi, Mahdi, None, Abdul-Rahman, None, Walter Raphael Hazzard, Jr., None, Walt, G, 0, 0, 74.0, 185, UCLA, Santa Monica City, 1942-04-15, Wilmington, DE, USA, Overbrook / Moton, Philadelphia / Easton, PA / MD, USA, 2011-11-18, B

CREATE TABLE `teams` (
  year INTEGER PRIMARY KEY,
  lgID TEXT,
  tmID TEXT PRIMARY KEY,
  franchID TEXT,
  confID TEXT,
  divID TEXT,
  rank INTEGER,
  confRank INTEGER,
  playoff TEXT,
  name TEXT,
  o_fgm INTEGER,
  o_ftm INTEGER,
  o_pts INTEGER,
  d_pts INTEGER,
  homeWon INTEGER,
  homeLost INTEGER,
  awayWon INTEGER,
  awayLost INTEGER,
  won INTEGER,
  lost INTEGER,
  games INTEGER,
  arena TEXT
);
Sample rows from `teams`:
1937, NBL, AFS, AFS, None, EA, 1, 0, CF, Akron Firestone Non-Skids, 249, 183, 681, 578, 8, 1, 5, 3, 14, 4, 18, None
1937, NBL, AGW, AGW, None, EA, 2, 0, WC, Akron Goodyear Wingfoots, 243, 159, 645, 498, 8, 1, 5, 4, 13, 5, 18, None
1937, NBL, BFB, BFB, None, EA, 4, 0, None, Buffalo Bisons, 108, 46, 262, 275, 2, 2, 1, 4, 3, 6, 9, None

CREATE TABLE `awards_coaches` (
  id INTEGER,
  year INTEGER REFERENCES coaches(year),
  coachID TEXT REFERENCES coaches(coachID),
  award TEXT,
  lgID TEXT,
  note TEXT
);
Sample rows from `awards_coaches`:
1, 1962, gallaha01, NBA Coach of the Year, NBA, None
2, 1963, hannual01, NBA Coach of the Year, NBA, None
3, 1964, auerbre01, NBA Coach of the Year, NBA, None

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
awards_coaches, 61
players_teams, 23751
series_post, 775

CREATE TABLE `players_teams` (
  id INTEGER,
  playerID TEXT REFERENCES players(None),
  year INTEGER REFERENCES teams(year),
  stint INTEGER,
  tmID TEXT REFERENCES teams(tmID),
  lgID TEXT,
  GP INTEGER,
  GS INTEGER,
  minutes INTEGER,
  points INTEGER,
  oRebounds INTEGER,
  dRebounds INTEGER,
  rebounds INTEGER,
  assists INTEGER,
  steals INTEGER,
  blocks INTEGER,
  turnovers INTEGER,
  PF INTEGER,
  fgAttempted INTEGER,
  fgMade INTEGER,
  ftAttempted INTEGER,
  ftMade INTEGER,
  threeAttempted INTEGER,
  threeMade INTEGER,
  PostGP INTEGER,
  PostGS INTEGER,
  PostMinutes INTEGER,
  PostPoints INTEGER,
  PostoRebounds INTEGER,
  PostdRebounds INTEGER,
  PostRebounds INTEGER,
  PostAssists INTEGER,
  PostSteals INTEGER,
  PostBlocks INTEGER,
  PostTurnovers INTEGER,
  PostPF INTEGER,
  PostfgAttempted INTEGER,
  PostfgMade INTEGER,
  PostftAttempted INTEGER,
  PostftMade INTEGER,
  PostthreeAttempted INTEGER,
  PostthreeMade INTEGER,
  note TEXT
);
Sample rows from `players_teams`:
1, abdelal01, 1990, 1, POR, NBA, 43, 0, 290, 135, 27, 62, 89, 12, 4, 12, 22, 39, 116, 55, 44, 25, 0, 0, 5, 0, 13, 4, 1, 2, 3, 0, 0, 0, 0, 0, 6, 2, 0, 0, 0, 0, None
2, abdelal01, 1991, 1, POR, NBA, 71, 0, 934, 432, 81, 179, 260, 30, 25, 17, 66, 132, 361, 178, 101, 76, 0, 0, 8, 0, 25, 12, 0, 4, 4, 2, 0, 0, 2, 4, 10, 5, 4, 2, 0, 0, None
3, abdelal01, 1992, 1, MIL, NBA, 12, 0, 159, 64, 12, 25, 37, 10, 6, 4, 0, 24, 56, 26, 16, 12, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, None

CREATE TABLE `series_post` (
  id INTEGER,
  year INTEGER REFERENCES teams(year) REFERENCES teams(year),
  round TEXT,
  series TEXT,
  tmIDWinner TEXT REFERENCES teams(tmID),
  lgIDWinner TEXT,
  tmIDLoser TEXT REFERENCES teams(tmID),
  lgIDLoser TEXT,
  W INTEGER,
  L INTEGER
);
Sample rows from `series_post`:
1, 1946, F, O, PHW, NBA, CHS, NBA, 4, 1
2, 1946, QF, M, NYK, NBA, CLR, NBA, 2, 1
3, 1946, QF, M, PHW, NBA, STB, NBA, 2, 1

","teams, players_teams","players_teams.points, teams.tmid, players_teams.tmid, teams.year, players_teams.year, teams.rank"
superstore,Give the customer segment from the West region that orders the order ID CA-2011-108189.,SELECT DISTINCT t2.segment FROM west_superstore as t1 inner JOIN people as t2 ON t1.`customer id` = t2.`customer id` WHERE t1.region = 'West' AND t1.`order id` = 'CA-2011-108189',"CREATE TABLE `west_superstore` (
  Row ID INTEGER,
  Order ID TEXT,
  Order Date DATE,
  Ship Date DATE,
  Ship Mode TEXT,
  Customer ID TEXT REFERENCES people(Customer ID),
  Region TEXT REFERENCES product(Region) REFERENCES people(Region),
  Product ID TEXT REFERENCES product(Product ID),
  Sales REAL,
  Quantity INTEGER,
  Discount REAL,
  Profit REAL
);
Sample rows from `west_superstore`:
13583, CA-2011-130813, 2013-01-06, 2013-01-08, Second Class, LS-17230, West, OFF-PA-10002005, 19.44, 3, 0.0, 9.3312
13584, CA-2011-157147, 2013-01-13, 2013-01-18, Standard Class, BD-11605, West, OFF-ST-10000078, 1325.85, 5, 0.0, 238.653
13585, CA-2011-157147, 2013-01-13, 2013-01-18, Standard Class, BD-11605, West, FUR-BO-10003034, 333.999, 3, 0.15, 3.9294

CREATE TABLE `people` (
  Customer ID TEXT PRIMARY KEY,
  Customer Name TEXT,
  Segment TEXT,
  Country TEXT,
  City TEXT,
  State TEXT,
  Postal Code INTEGER,
  Region TEXT PRIMARY KEY
);
Sample rows from `people`:
AA-10315, Alex Avila, Consumer, United States, Round Rock, Texas, 78664, Central
AA-10375, Allen Armold, Consumer, United States, Omaha, Nebraska, 68104, Central
AA-10480, Andrew Allen, Consumer, United States, Springfield, Missouri, 65807, Central

","CREATE TABLE `people` (
  Customer ID TEXT PRIMARY KEY,
  Customer Name TEXT,
  Segment TEXT,
  Country TEXT,
  City TEXT,
  State TEXT,
  Postal Code INTEGER,
  Region TEXT PRIMARY KEY
);
Sample rows from `people`:
AA-10315, Alex Avila, Consumer, United States, Round Rock, Texas, 78664, Central
AA-10375, Allen Armold, Consumer, United States, Omaha, Nebraska, 68104, Central
AA-10480, Andrew Allen, Consumer, United States, Springfield, Missouri, 65807, Central

CREATE TABLE `product` (
  Product ID TEXT PRIMARY KEY,
  Product Name TEXT,
  Category TEXT,
  Sub-Category TEXT,
  Region TEXT PRIMARY KEY
);
Sample rows from `product`:
FUR-BO-10000330, Sauder Camden County Barrister Bookcase, Planked Cherry Finish, Furniture, Bookcases, West
FUR-BO-10000362, Sauder Inglewood Library Bookcases, Furniture, Bookcases, West
FUR-BO-10000468, O'Sullivan 2-Shelf Heavy-Duty Bookcases, Furniture, Bookcases, West

CREATE TABLE `central_superstore` (
  Row ID INTEGER,
  Order ID TEXT,
  Order Date DATE,
  Ship Date DATE,
  Ship Mode TEXT,
  Customer ID TEXT REFERENCES people(Customer ID),
  Region TEXT REFERENCES product(Region) REFERENCES people(Region),
  Product ID TEXT REFERENCES product(Product ID),
  Sales REAL,
  Quantity INTEGER,
  Discount REAL,
  Profit REAL
);
Sample rows from `central_superstore`:
1, CA-2011-103800, 2013-01-03, 2013-01-07, Standard Class, DP-13000, Central, OFF-PA-10000174, 16.448, 2, 0.2, 5.5512
2, CA-2011-112326, 2013-01-04, 2013-01-08, Standard Class, PO-19195, Central, OFF-LA-10003223, 11.784, 3, 0.2, 4.2717
3, CA-2011-112326, 2013-01-04, 2013-01-08, Standard Class, PO-19195, Central, OFF-ST-10002743, 272.736, 3, 0.2, -64.7748

CREATE TABLE `east_superstore` (
  Row ID INTEGER,
  Order ID TEXT,
  Order Date DATE,
  Ship Date DATE,
  Ship Mode TEXT,
  Customer ID TEXT REFERENCES people(Customer ID),
  Region TEXT REFERENCES product(Region) REFERENCES people(Region),
  Product ID TEXT REFERENCES product(Product ID),
  Sales REAL,
  Quantity INTEGER,
  Discount REAL,
  Profit REAL
);
Sample rows from `east_superstore`:
4647, CA-2011-141817, 2013-01-05, 2013-01-12, Standard Class, MB-18085, East, OFF-AR-10003478, 19.536, 3, 0.2, 4.884
4648, CA-2011-130092, 2013-01-11, 2013-01-14, First Class, SV-20365, East, FUR-FU-10000010, 9.94, 2, 0.0, 3.0814
4649, CA-2011-118192, 2013-01-13, 2013-01-18, Standard Class, MM-17920, East, OFF-PA-10002947, 37.408, 7, 0.2, 13.0928

CREATE TABLE `south_superstore` (
  Row ID INTEGER,
  Order ID TEXT,
  Order Date DATE,
  Ship Date DATE,
  Ship Mode TEXT,
  Customer ID TEXT REFERENCES people(Customer ID),
  Region TEXT REFERENCES product(Region) REFERENCES people(Region),
  Product ID TEXT REFERENCES product(Product ID),
  Sales REAL,
  Quantity INTEGER,
  Discount REAL,
  Profit REAL
);
Sample rows from `south_superstore`:
10343, CA-2011-106054, 2013-01-06, 2013-01-07, First Class, JO-15145, South, OFF-AR-10002399, 12.78, 3, 0.0, 5.2398
10344, CA-2011-167199, 2013-01-06, 2013-01-10, Standard Class, ME-17320, South, FUR-CH-10004063, 2573.82, 9, 0.0, 746.4078
10345, CA-2011-167199, 2013-01-06, 2013-01-10, Standard Class, ME-17320, South, OFF-BI-10004632, 609.98, 2, 0.0, 274.491

CREATE TABLE `west_superstore` (
  Row ID INTEGER,
  Order ID TEXT,
  Order Date DATE,
  Ship Date DATE,
  Ship Mode TEXT,
  Customer ID TEXT REFERENCES people(Customer ID),
  Region TEXT REFERENCES product(Region) REFERENCES people(Region),
  Product ID TEXT REFERENCES product(Product ID),
  Sales REAL,
  Quantity INTEGER,
  Discount REAL,
  Profit REAL
);
Sample rows from `west_superstore`:
13583, CA-2011-130813, 2013-01-06, 2013-01-08, Second Class, LS-17230, West, OFF-PA-10002005, 19.44, 3, 0.0, 9.3312
13584, CA-2011-157147, 2013-01-13, 2013-01-18, Standard Class, BD-11605, West, OFF-ST-10000078, 1325.85, 5, 0.0, 238.653
13585, CA-2011-157147, 2013-01-13, 2013-01-18, Standard Class, BD-11605, West, FUR-BO-10003034, 333.999, 3, 0.15, 3.9294

","west_superstore, people","people.segment, west_superstore.customer id, people.customer id, west_superstore.region, west_superstore.order id"
books,List all the titles of the Spanish books published by Alfaguara.,SELECT t2.title FROM book_language as t1 inner JOIN book as t2 ON t2.language_id = t1.language_id inner JOIN publisher as t3 ON t3.publisher_id = t2.publisher_id WHERE t1.language_name = 'Spanish' AND t3.publisher_name = 'Alfaguara' GROUP BY t2.title,"CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","book_language, book, publisher","book.title, book.language_id, book_language.language_id, publisher.publisher_id, book.publisher_id, book_language.language_name, publisher.publisher_name"
public_review_platform,"Among the Yelp_Businesses in Arizona, how many of them do not provide alcohol?",SELECT COUNT(t2.business_id) FROM attributes as t1 inner JOIN business_attributes as t2 ON t1.attribute_id = t2.attribute_id inner JOIN business as t3 ON t2.business_id = t3.business_id WHERE t1.attribute_name LIKE 'Alcohol' AND t2.attribute_value LIKE 'none' AND t3.state LIKE 'AZ',"CREATE TABLE `attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `business_attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `business_attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","attributes, business_attributes, business","business_attributes.business_id, attributes.attribute_id, business_attributes.attribute_id, business.business_id, attributes.attribute_name, business_attributes.attribute_value, business.state"
public_review_platform,Indicate the business id and days which are opened from 8AM to 6PM.,SELECT DISTINCT day_id FROM business_hours WHERE opening_time = '8AM' AND closing_time = '6PM',"CREATE TABLE `business_hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `business_hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

",business_hours,"day_id, opening_time, closing_time"
video_games,How many more games were sold on game platform ID 50 than on game platform ID 51 in region ID 1?,SELECt (SUM(case when t.game_platform_id = 50 tHEN t.num_sales else 0 end) - SUM(case when t.game_platform_id = 51 tHEN t.num_sales else 0 end)) * 100000 as nums FROM region_sales as t WHERE t.region_id = 1,"CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

","CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

",region_sales,"region_sales.game_platform_id, region_sales.num_sales, region_sales.region_id"
video_games,What year were the first game released?,SELECt t.release_year FROM game_platform as t ORDER BY t.release_year asC LIMIt 1,"CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

","CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

",game_platform,game_platform.release_year
books,How much money on average does Lucas Wyldbore spend on book orders?,SELECT SUM(t1.price) / COUNT(*) FROM order_line as t1 inner JOIN cust_order as t2 ON t2.order_id = t1.order_id inner JOIN customer as t3 ON t3.customer_id = t2.customer_id WHERE t3.first_name = 'Lucas' AND t3.last_name = 'Wyldbore',"CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","order_line, cust_order, customer","order_line.price, cust_order.order_id, order_line.order_id, customer.customer_id, cust_order.customer_id, customer.first_name, customer.last_name"
retail_world,List the employees' full names and ages in 2022 who lived in London.,"SELECT titleofcourtesy, firstname, lastname , timestampdiff(year, birthdate, now()) as ages FROM employees WHERE city = 'London'","CREATE TABLE `employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

",employees,"titleofcourtesy, firstname, lastname, birthdate, city"
menu,List the names and menu page IDs of the dishes that first appeared in 1861.,"SELECT t2.name, t1.dish_id FROM menuitem as t1 inner JOIN dish as t2 ON t2.id = t1.dish_id WHERE t2.first_appeared = 1861","CREATE TABLE `menuitem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `menuitem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

CREATE TABLE `dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

","CREATE TABLE `Dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `Dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

CREATE TABLE `Menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `Menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

CREATE TABLE `MenuPage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `MenuPage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

CREATE TABLE `MenuItem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `MenuItem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

","menuitem, dish","dish.name, menuitem.dish_id, dish.id, dish.first_appeared"
soccer_2016,"How many overs were there in each innings of match ID ""336011""?","SELECT SUM(case when innings_no = 1 then 1 else 0 end) as in1 , SUM(case when innings_no = 2 then 1 else 0 end) as in2 FROM ball_by_ball WHERE match_id = 336011","CREATE TABLE `ball_by_ball` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Innings_No INTEGER PRIMARY KEY,
  Team_Batting INTEGER,
  Team_Bowling INTEGER,
  Striker_Batting_Position INTEGER,
  Striker INTEGER,
  Non_Striker INTEGER,
  Bowler INTEGER
);
Sample rows from `ball_by_ball`:
335987, 1, 1, 1, 1, 2, 1, 1, 2, 14
335987, 1, 1, 2, 2, 1, 1, 6, 7, 106
335987, 1, 2, 1, 1, 2, 2, 2, 1, 14

","CREATE TABLE `Batting_Style` (
  Batting_Id INTEGER,
  Batting_hand TEXT
);
Sample rows from `Batting_Style`:
1, Left-hand bat
2, Right-hand bat

CREATE TABLE `Bowling_Style` (
  Bowling_Id INTEGER,
  Bowling_skill TEXT
);
Sample rows from `Bowling_Style`:
1, Right-arm medium
2, Right-arm offbreak
3, Right-arm fast-medium

CREATE TABLE `City` (
  City_Id INTEGER,
  City_Name TEXT,
  Country_id INTEGER
);
Sample rows from `City`:
1, Bangalore, 1
2, Chandigarh, 1
3, Delhi, 1

CREATE TABLE `Country` (
  Country_Id INTEGER REFERENCES Country(Country_Id),
  Country_Name TEXT
);
Sample rows from `Country`:
1, India
2, South Africa
3, U.A.E

CREATE TABLE `Extra_Type` (
  Extra_Id INTEGER,
  Extra_Name TEXT
);
Sample rows from `Extra_Type`:
1, legbyes
2, wides
3, byes

CREATE TABLE `Extra_Runs` (
  Match_Id INTEGER PRIMARY KEY,
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Extra_Type_Id INTEGER REFERENCES Extra_Type(Extra_Id),
  Extra_Runs INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Extra_Runs`:
335987, 1, 1, 1, 1, 1
335987, 1, 2, 2, 1, 2
335987, 1, 3, 2, 1, 1

CREATE TABLE `Out_Type` (
  Out_Id INTEGER,
  Out_Name TEXT
);
Sample rows from `Out_Type`:
1, caught
2, bowled
3, run out

CREATE TABLE `Outcome` (
  Outcome_Id INTEGER,
  Outcome_Type TEXT
);
Sample rows from `Outcome`:
1, Result
2, No Result
3, Superover

CREATE TABLE `Player` (
  Player_Id INTEGER,
  Player_Name TEXT,
  DOB DATE,
  Batting_hand INTEGER REFERENCES Batting_Style(Batting_Id),
  Bowling_skill INTEGER REFERENCES Bowling_Style(Bowling_Id),
  Country_Name INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Player`:
1, SC Ganguly, 1972-07-08, 1, 1, 1
2, BB McCullum, 1981-09-27, 2, 1, 4
3, RT Ponting, 1974-12-19, 2, 1, 5

CREATE TABLE `Rolee` (
  Role_Id INTEGER,
  Role_Desc TEXT
);
Sample rows from `Rolee`:
1, Captain
2, Keeper
3, Player

CREATE TABLE `Season` (
  Season_Id INTEGER,
  Man_of_the_Series INTEGER,
  Orange_Cap INTEGER,
  Purple_Cap INTEGER,
  Season_Year INTEGER
);
Sample rows from `Season`:
1, 32, 100, 102, 2008
2, 53, 18, 61, 2009
3, 133, 133, 131, 2010

CREATE TABLE `Team` (
  Team_Id INTEGER,
  Team_Name TEXT
);
Sample rows from `Team`:
1, Kolkata Knight Riders
2, Royal Challengers Bangalore
3, Chennai Super Kings

CREATE TABLE `Toss_Decision` (
  Toss_Id INTEGER,
  Toss_Name TEXT
);
Sample rows from `Toss_Decision`:
1, field
2, bat

CREATE TABLE `Umpire` (
  Umpire_Id INTEGER,
  Umpire_Name TEXT,
  Umpire_Country INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Umpire`:
1, Asad Rauf, 6
2, MR Benson, 10
3, Aleem Dar, 6

CREATE TABLE `Venue` (
  Venue_Id INTEGER,
  Venue_Name TEXT,
  City_Id INTEGER REFERENCES City(City_Id)
);
Sample rows from `Venue`:
1, M Chinnaswamy Stadium, 1
2, Punjab Cricket Association Stadium, 2
3, Feroz Shah Kotla, 3

CREATE TABLE `Win_By` (
  Win_Id INTEGER,
  Win_Type TEXT
);
Sample rows from `Win_By`:
1, runs
2, wickets
3, NO Result

CREATE TABLE `Match` (
  Match_Id INTEGER,
  Team_1 INTEGER REFERENCES Team(Team_Id),
  Team_2 INTEGER REFERENCES Team(Team_Id),
  Match_Date DATE,
  Season_Id INTEGER REFERENCES Season(Season_Id),
  Venue_Id INTEGER REFERENCES Venue(Venue_Id),
  Toss_Winner INTEGER REFERENCES Team(Team_Id),
  Toss_Decide INTEGER REFERENCES Toss_Decision(Toss_Id),
  Win_Type INTEGER REFERENCES Win_By(Win_Id),
  Win_Margin INTEGER,
  Outcome_type INTEGER REFERENCES Out_Type(Out_Id),
  Match_Winner INTEGER REFERENCES Team(Team_Id),
  Man_of_the_Match INTEGER REFERENCES Player(Player_Id)
);
Sample rows from `Match`:
335987, 2, 1, 2008-04-18, 1, 1, 2, 1, 1, 140, 1, 1, 2
335988, 4, 3, 2008-04-19, 1, 2, 3, 2, 1, 33, 1, 3, 19
335989, 6, 5, 2008-04-19, 1, 3, 5, 2, 2, 9, 1, 6, 90

CREATE TABLE `Ball_by_Ball` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Innings_No INTEGER PRIMARY KEY,
  Team_Batting INTEGER,
  Team_Bowling INTEGER,
  Striker_Batting_Position INTEGER,
  Striker INTEGER,
  Non_Striker INTEGER,
  Bowler INTEGER
);
Sample rows from `Ball_by_Ball`:
335987, 1, 1, 1, 1, 2, 1, 1, 2, 14
335987, 1, 1, 2, 2, 1, 1, 6, 7, 106
335987, 1, 2, 1, 1, 2, 2, 2, 1, 14

CREATE TABLE `Batsman_Scored` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Runs_Scored INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Batsman_Scored`:
335987, 1, 1, 0, 1
335987, 1, 1, 1, 2
335987, 1, 2, 0, 1

CREATE TABLE `Player_Match` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Player_Id INTEGER PRIMARY KEY REFERENCES Player(Player_Id),
  Role_Id INTEGER PRIMARY KEY REFERENCES Rolee(Role_Id),
  Team_Id INTEGER REFERENCES Team(Team_Id)
);
Sample rows from `Player_Match`:
335987, 1, 1, 1
335987, 2, 3, 1
335987, 3, 3, 1

CREATE TABLE `Wicket_Taken` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Player_Out INTEGER REFERENCES Player(Player_Id),
  Kind_Out INTEGER REFERENCES Out_Type(Out_Id),
  Fielders INTEGER REFERENCES Player(Player_Id),
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Wicket_Taken`:
335987, 2, 1, 6, 2, None, 2
335987, 3, 2, 8, 2, None, 2
335987, 5, 5, 9, 1, 83, 2

",ball_by_ball,"innings_no, match_id"
cs_semester,How many students got an A in Applied Deep Learning?,SELECT COUNT(t2.student_id) FROM course as t1 inner JOIN registration as t2 ON t1.course_id = t2.course_id WHERE t2.grade = 'A' AND t1.name = 'Applied Deep Learning ',"CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

","CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

CREATE TABLE `prof` (
  prof_id INTEGER,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  popularity INTEGER,
  teachingability INTEGER,
  graduate_from TEXT
);
Sample rows from `prof`:
1, Male, Nathaniel, Pigford, npigford0@hku.hk, 3, 5, University of Washington
2, Male, Zhihua, Zhou, zzhihua@hku.hk, 2, 1, Beijing Polytechnic University
3, Male, Ogdon, Zywicki, ozywicki2@hku.hk, 2, 2, University of Boston

CREATE TABLE `RA` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `RA`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

","course, registration","registration.student_id, course.course_id, registration.course_id, registration.grade, course.name"
donor,"For all donors from Texas City, list their donation message and name of the project they donated to.","SELECT t2.donation_message, t1.title FROM essays as t1 inner JOIN donations as t2 ON t1.projectid = t2.projectid WHERE t2.donor_city = 'Texas City'","CREATE TABLE `essays` (
  projectid TEXT,
  teacher_acctid TEXT,
  title TEXT,
  short_description TEXT,
  need_statement TEXT,
  essay TEXT
);
Sample rows from `essays`:
ffffc4f85b60efc5b52347df489d0238, c24011b20fc161ed02248e85beb59a90, iMath, It is imperative that teachers bring technology into the classroom, if students are going to be able to survive in the 21st Century. The classroom needs to be ever changing along with the outside world. The iMath project will help students by obtaining cl, My students need four iPods., I am a fourth year fifth grade math teacher. The school I teach in is a fifth and sixth grade public school and is a Title One school which means that 95% of our students get free lunch. Presently, I am in the process of completing a Masters degree in Tec
ffffac55ee02a49d1abc87ba6fc61135, 947066d0af47e0566f334566553dd6a6, Recording Rockin' Readers, Can you imagine having to translate everything you read into sign language and relate it to what you already know? Help us do just that by giving us the camera that will record our stories and..., My students need a camcorder. , Can you imagine having to translate everything you read into sign language and relate it to what you already know? Help us do just that by giving us the camera that will record our stories and interpretations! 
\n
\nMy students are all deaf or hard of hea
ffff97ed93720407d70a2787475932b0, 462270f5d5c212162fcab11afa2623cb, Kindergarten In Need of Important Materials!, It takes a special person to donate to a group of children they don't know, especially in these hard economic times, but my students are worth it.  They deserve to have the proper supplies to ensure that their long education gets off to the right start, s, My students need 17 assorted classroom materials to ensure that they can learn as much as possible this year., Hi. I teach a wonderful group of 4-5 year old Kindergarten students.  They come in wanting and willing to learn new and exciting things each and every day. I work hard to ensure that my students get the most out of the entire school year. 
\n
\nFor the mo

CREATE TABLE `donations` (
  donationid TEXT PRIMARY KEY,
  projectid TEXT REFERENCES projects(projectid),
  donor_acctid TEXT,
  donor_city TEXT,
  donor_state TEXT,
  donor_zip TEXT,
  is_teacher_acct TEXT,
  donation_timestamp DATETIME,
  donation_to_project REAL,
  donation_optional_support REAL,
  donation_total REAL,
  dollar_amount TEXT,
  donation_included_optional_support TEXT,
  payment_method TEXT,
  payment_included_acct_credit TEXT,
  payment_included_campaign_gift_card TEXT,
  payment_included_web_purchased_gift_card TEXT,
  payment_was_promo_matched TEXT,
  via_giving_page TEXT,
  for_honoree TEXT,
  donation_message TEXT
);
Sample rows from `donations`:
431d720bc3dfd75ae445a5eaa0b0638d, ffffac55ee02a49d1abc87ba6fc61135, 22cbc920c9b5fa08dfb331422f5926b5, Peachtree City, GA, 30269, f, 2011-08-25 14:27:34.807, 42.5, 7.5, 50.0, 10_to_100, t, no_cash_received, f, t, f, f, f, f, I gave to this project because I support the efforts of this teacher with each of her students, and her school, Suder Elementary School.
fcfedba1c8a0ba77d280cace80a909f6, ffffac55ee02a49d1abc87ba6fc61135, 521f1830a77c9dbbf8119d99c6206a16, None, GA, None, f, 2011-11-04 07:54:21.552, 26.83, 4.73, 31.56, 10_to_100, t, creditcard, f, t, f, f, f, f, I donated because I want to support kids in Georgia.
3fa95d29986aa6f401c6719ced3a3ce7, ffffac55ee02a49d1abc87ba6fc61135, 1e0a63fc8141c7ba26b8b44ca0871b90, Rockville, MD, 20853, f, 2011-11-02 22:53:53.019, 55.35, 0.0, 55.35, 10_to_100, f, no_cash_received, t, f, f, f, t, f, The Spark's 'pet' projects include those which support deaf students.  With just a few days left, the Spark's donors fund half of what remains, and challenge others to pull this project through to fruition.

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `essays` (
  projectid TEXT,
  teacher_acctid TEXT,
  title TEXT,
  short_description TEXT,
  need_statement TEXT,
  essay TEXT
);
Sample rows from `essays`:
ffffc4f85b60efc5b52347df489d0238, c24011b20fc161ed02248e85beb59a90, iMath, It is imperative that teachers bring technology into the classroom, if students are going to be able to survive in the 21st Century. The classroom needs to be ever changing along with the outside world. The iMath project will help students by obtaining cl, My students need four iPods., I am a fourth year fifth grade math teacher. The school I teach in is a fifth and sixth grade public school and is a Title One school which means that 95% of our students get free lunch. Presently, I am in the process of completing a Masters degree in Tec
ffffac55ee02a49d1abc87ba6fc61135, 947066d0af47e0566f334566553dd6a6, Recording Rockin' Readers, Can you imagine having to translate everything you read into sign language and relate it to what you already know? Help us do just that by giving us the camera that will record our stories and..., My students need a camcorder. , Can you imagine having to translate everything you read into sign language and relate it to what you already know? Help us do just that by giving us the camera that will record our stories and interpretations! 
\n
\nMy students are all deaf or hard of hea
ffff97ed93720407d70a2787475932b0, 462270f5d5c212162fcab11afa2623cb, Kindergarten In Need of Important Materials!, It takes a special person to donate to a group of children they don't know, especially in these hard economic times, but my students are worth it.  They deserve to have the proper supplies to ensure that their long education gets off to the right start, s, My students need 17 assorted classroom materials to ensure that they can learn as much as possible this year., Hi. I teach a wonderful group of 4-5 year old Kindergarten students.  They come in wanting and willing to learn new and exciting things each and every day. I work hard to ensure that my students get the most out of the entire school year. 
\n
\nFor the mo

CREATE TABLE `projects` (
  projectid TEXT PRIMARY KEY,
  teacher_acctid TEXT,
  schoolid TEXT,
  school_ncesid TEXT,
  school_latitude REAL,
  school_longitude REAL,
  school_city TEXT,
  school_state TEXT,
  school_zip INTEGER,
  school_metro TEXT,
  school_district TEXT,
  school_county TEXT,
  school_charter TEXT,
  school_magnet TEXT,
  school_year_round TEXT,
  school_nlns TEXT,
  school_kipp TEXT,
  school_charter_ready_promise TEXT,
  teacher_prefix TEXT,
  teacher_teach_for_america TEXT,
  teacher_ny_teaching_fellow TEXT,
  primary_focus_subject TEXT,
  primary_focus_area TEXT,
  secondary_focus_subject TEXT,
  secondary_focus_area TEXT,
  resource_type TEXT,
  poverty_level TEXT,
  grade_level TEXT,
  fulfillment_labor_materials REAL,
  total_price_excluding_optional_support REAL,
  total_price_including_optional_support REAL,
  students_reached INTEGER,
  eligible_double_your_impact_match TEXT,
  eligible_almost_home_match TEXT,
  date_posted DATE
);
Sample rows from `projects`:
316ed8fb3b81402ff6ac8f721bb31192, 42d43fa6f37314365d08692e08680973, c0e6ce89b244764085691a1b8e28cb81, 063627006187, 36.57634, -119.608713, Selma, CA, 93662, None, Selma Unified Sch District, Fresno, f, f, f, f, f, f, Mrs., f, f, Literature & Writing, Literacy & Language, College & Career Prep, Applied Learning, Books, highest poverty, Grades 6-8, 30.0, 555.81, 653.89, 32, f, f, 2014-05-12
90de744e368a7e4883223ca49318ae30, 864eb466462bf704bf7a16a585ef296a, d711e47810900c96f26a5d0be30c446d, 483702008193, 32.911179, -96.72364, Dallas, TX, 75243, urban, Richardson Ind School District, Dallas, f, f, f, f, f, f, Mrs., f, f, Literacy, Literacy & Language, ESL, Literacy & Language, Books, highest poverty, Grades PreK-2, 30.0, 296.47, 348.79, 22, f, f, 2014-05-12
32943bb1063267de6ed19fc0ceb4b9a7, 37f85135259ece793213aca9d8765542, 665c3613013ba0a66e3a2a26b89f1b68, 410327000109, 45.166039, -122.414576, Colton, OR, 97017, rural, Colton School District 53, Clackamas, f, f, f, f, f, f, Mr., f, f, Literacy, Literacy & Language, Mathematics, Math & Science, Technology, high poverty, Grades PreK-2, 30.0, 430.89, 506.93, 17, f, f, 2014-05-11

CREATE TABLE `donations` (
  donationid TEXT PRIMARY KEY,
  projectid TEXT REFERENCES projects(projectid),
  donor_acctid TEXT,
  donor_city TEXT,
  donor_state TEXT,
  donor_zip TEXT,
  is_teacher_acct TEXT,
  donation_timestamp DATETIME,
  donation_to_project REAL,
  donation_optional_support REAL,
  donation_total REAL,
  dollar_amount TEXT,
  donation_included_optional_support TEXT,
  payment_method TEXT,
  payment_included_acct_credit TEXT,
  payment_included_campaign_gift_card TEXT,
  payment_included_web_purchased_gift_card TEXT,
  payment_was_promo_matched TEXT,
  via_giving_page TEXT,
  for_honoree TEXT,
  donation_message TEXT
);
Sample rows from `donations`:
431d720bc3dfd75ae445a5eaa0b0638d, ffffac55ee02a49d1abc87ba6fc61135, 22cbc920c9b5fa08dfb331422f5926b5, Peachtree City, GA, 30269, f, 2011-08-25 14:27:34.807, 42.5, 7.5, 50.0, 10_to_100, t, no_cash_received, f, t, f, f, f, f, I gave to this project because I support the efforts of this teacher with each of her students, and her school, Suder Elementary School.
fcfedba1c8a0ba77d280cace80a909f6, ffffac55ee02a49d1abc87ba6fc61135, 521f1830a77c9dbbf8119d99c6206a16, None, GA, None, f, 2011-11-04 07:54:21.552, 26.83, 4.73, 31.56, 10_to_100, t, creditcard, f, t, f, f, f, f, I donated because I want to support kids in Georgia.
3fa95d29986aa6f401c6719ced3a3ce7, ffffac55ee02a49d1abc87ba6fc61135, 1e0a63fc8141c7ba26b8b44ca0871b90, Rockville, MD, 20853, f, 2011-11-02 22:53:53.019, 55.35, 0.0, 55.35, 10_to_100, f, no_cash_received, t, f, f, f, t, f, The Spark's 'pet' projects include those which support deaf students.  With just a few days left, the Spark's donors fund half of what remains, and challenge others to pull this project through to fruition.

CREATE TABLE `resources` (
  resourceid TEXT PRIMARY KEY,
  projectid TEXT REFERENCES projects(projectid),
  vendorid INTEGER,
  vendor_name TEXT,
  project_resource_type TEXT,
  item_name TEXT,
  item_number TEXT,
  item_unit_price REAL,
  item_quantity INTEGER
);
Sample rows from `resources`:
8a1c1c45bc30d065061912fd9114fcf3, ffffc4f85b60efc5b52347df489d0238, 430, Woodwind and Brasswind, Technology, iPod nano 4th Gen 8GB (Black), 249995.001, 149.0, 4
015d2c4935c50427964a12dc3f584091, ffffac55ee02a49d1abc87ba6fc61135, 82, Best Buy for Business, Technology, Sony bloggie MHS-FS1 - camcorder - internal flash memory, BB11216668, 148.0, 1
26a02944b2f0c25f9abdeacca3ede3ee, ffff97ed93720407d70a2787475932b0, 767, Lakeshore Learning Materials, Supplies, VX748 - Best-Buy Jumbo Crayons - 12-Color Box, VX748, 69.95, 1

","essays, donations","donations.donation_message, essays.title, essays.projectid, donations.projectid, donations.donor_city"
simpson_episodes,"Among the episode with highest votes, what is the category credited to Carlton Batten?",SELECT t2.category FROM episode as t1 inner JOIN credit as t2 ON t1.episode_id = t2.episode_id WHERE t2.person = 'Carlton Batten' AND t2.credited = 'true' ORDER BY t1.votes DESC LIMIT 1;,"CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","episode, credit","credit.category, episode.episode_id, credit.episode_id, credit.person, credit.credited, episode.votes"
retails,How many kinds of items are returned in order no.5?,SELECT COUNT(l_linenumber) FrOM lineitem WHErE l_orderkey = 5 AND l_returnflag = 'r',"CREATE TABLE `lineitem` (
  l_shipdate DATE,
  l_orderkey INTEGER PRIMARY KEY REFERENCES orders(o_orderkey),
  l_discount REAL,
  l_extendedprice REAL,
  l_suppkey INTEGER REFERENCES partsupp(ps_suppkey),
  l_quantity INTEGER,
  l_returnflag TEXT,
  l_partkey INTEGER REFERENCES partsupp(ps_partkey),
  l_linestatus TEXT,
  l_tax REAL,
  l_commitdate DATE,
  l_receiptdate DATE,
  l_shipmode TEXT,
  l_linenumber INTEGER PRIMARY KEY,
  l_shipinstruct TEXT,
  l_comment TEXT
);
Sample rows from `lineitem`:
1995-08-16, 1, 0.1, 58303.08, 6296, 33, N, 98768, O, 0.06, 1995-07-12, 1995-09-14, RAIL, 1, NONE, carefully bo
1995-08-13, 1, 0.09, 16947.7, 8776, 10, N, 23771, O, 0.08, 1995-07-09, 1995-08-27, TRUCK, 2, TAKE BACK RETURN, blithely regular pac
1995-06-17, 1, 0.1, 63642.9, 3859, 34, N, 113858, O, 0.08, 1995-05-22, 1995-06-30, SHIP, 3, COLLECT COD, ironic accounts sleep furiously silen

","CREATE TABLE `customer` (
  c_custkey INTEGER,
  c_mktsegment TEXT,
  c_nationkey INTEGER REFERENCES nation(n_nationkey),
  c_name TEXT,
  c_address TEXT,
  c_phone TEXT,
  c_acctbal REAL,
  c_comment TEXT
);
Sample rows from `customer`:
1, BUILDING, 8, Customer#000000001, KwX3hMHjZ6, 937-241-3198, 3560.03, ironic excuses detect slyly silent requests. requests according to the exc
2, MACHINERY, 16, Customer#000000002, ioUn,eqTTXOdo, 906-965-7556, 7550.21, final express accounts mold slyly. ironic accounts cajole! quickly express a
3, FURNITURE, 11, Customer#000000003, YddJqmIdouNT9Yj, 328-750-7603, -926.96, carefully express foxes sleep carefully. pending platelets sleep thinly for t

CREATE TABLE `lineitem` (
  l_shipdate DATE,
  l_orderkey INTEGER PRIMARY KEY REFERENCES orders(o_orderkey),
  l_discount REAL,
  l_extendedprice REAL,
  l_suppkey INTEGER REFERENCES partsupp(ps_suppkey),
  l_quantity INTEGER,
  l_returnflag TEXT,
  l_partkey INTEGER REFERENCES partsupp(ps_partkey),
  l_linestatus TEXT,
  l_tax REAL,
  l_commitdate DATE,
  l_receiptdate DATE,
  l_shipmode TEXT,
  l_linenumber INTEGER PRIMARY KEY,
  l_shipinstruct TEXT,
  l_comment TEXT
);
Sample rows from `lineitem`:
1995-08-16, 1, 0.1, 58303.08, 6296, 33, N, 98768, O, 0.06, 1995-07-12, 1995-09-14, RAIL, 1, NONE, carefully bo
1995-08-13, 1, 0.09, 16947.7, 8776, 10, N, 23771, O, 0.08, 1995-07-09, 1995-08-27, TRUCK, 2, TAKE BACK RETURN, blithely regular pac
1995-06-17, 1, 0.1, 63642.9, 3859, 34, N, 113858, O, 0.08, 1995-05-22, 1995-06-30, SHIP, 3, COLLECT COD, ironic accounts sleep furiously silen

CREATE TABLE `nation` (
  n_nationkey INTEGER,
  n_name TEXT,
  n_regionkey INTEGER REFERENCES region(r_regionkey),
  n_comment TEXT
);
Sample rows from `nation`:
0, ALGERIA, 0, slyly express pinto beans cajole idly. deposits use blithely unusual packages? fluffily final accounts x-r
1, ARGENTINA, 1, instructions detect blithely stealthily pending packages
2, BRAZIL, 1, blithely unusual deposits are quickly--

CREATE TABLE `orders` (
  o_orderdate DATE,
  o_orderkey INTEGER,
  o_custkey INTEGER REFERENCES customer(c_custkey),
  o_orderpriority TEXT,
  o_shippriority INTEGER,
  o_clerk TEXT,
  o_orderstatus TEXT,
  o_totalprice REAL,
  o_comment TEXT
);
Sample rows from `orders`:
1995-04-19, 1, 73100, 4-NOT SPECIFIED, 0, Clerk#000000916, P, 203198.56, final packages sleep blithely packa
1996-11-04, 2, 92861, 1-URGENT, 0, Clerk#000000373, O, 317719.99, final excuses about the ironic even deposits detect express request
1992-02-15, 3, 44875, 1-URGENT, 0, Clerk#000000485, F, 146674.98, final final deposits cajole foxes. blithely pendin

CREATE TABLE `part` (
  p_partkey INTEGER,
  p_type TEXT,
  p_size INTEGER,
  p_brand TEXT,
  p_name TEXT,
  p_container TEXT,
  p_mfgr TEXT,
  p_retailprice REAL,
  p_comment TEXT
);
Sample rows from `part`:
1, LARGE PLATED TIN, 31, Brand#43, burlywood plum powder puff mint, LG BAG, Manufacturer#4, 901.0, blithely busy reque
2, LARGE POLISHED STEEL, 4, Brand#55, hot spring dodger dim light, LG CASE, Manufacturer#5, 902.0, even ironic requests s
3, STANDARD PLATED COPPER, 30, Brand#53, dark slate grey steel misty, WRAP CASE, Manufacturer#5, 903.0, slyly ironic fox

CREATE TABLE `partsupp` (
  ps_partkey INTEGER PRIMARY KEY REFERENCES part(p_partkey),
  ps_suppkey INTEGER PRIMARY KEY REFERENCES supplier(s_suppkey),
  ps_supplycost REAL,
  ps_availqty INTEGER,
  ps_comment TEXT
);
Sample rows from `partsupp`:
1, 2, 400.75, 1111, carefully ironic deposits use against the carefully unusual accounts. slyly silent platelets nag quickly even
1, 2502, 702.61, 3999, slyly regular accounts serve carefully. asymptotes after the slyly even instructions cajole quickly ironic requests. pending dugouts about the slyly 
1, 5002, 383.95, 7411, carefully special ideas are slyly. slyly ironic epitaphs use pending pending foxes. furiously express pinto beans lose quiet even requests: special final packages ar

CREATE TABLE `region` (
  r_regionkey INTEGER,
  r_name TEXT,
  r_comment TEXT
);
Sample rows from `region`:
0, AFRICA, asymptotes sublate after the r
1, AMERICA, requests affix quickly final tithes. blithely even packages above the a
2, ASIA, accounts cajole carefully according to the carefully exp

CREATE TABLE `supplier` (
  s_suppkey INTEGER,
  s_nationkey INTEGER REFERENCES nation(n_nationkey),
  s_comment TEXT,
  s_name TEXT,
  s_address TEXT,
  s_phone TEXT,
  s_acctbal REAL
);
Sample rows from `supplier`:
1, 13, blithely final pearls are. instructions thra, Supplier#000000001, ,wWs4pnykQOFl8mgVCU8EZMXqZs1w, 800-807-9579, 3082.86
2, 5, requests integrate fluffily. fluffily ironic deposits wake. bold, Supplier#000000002, WkXT6MSAJrp4qWq3W9N, 348-617-6055, 3009.73
3, 22, carefully express ideas shall have to unwin, Supplier#000000003, KjUqa42JEHaRDVQTHV6Yq2h, 471-986-9888, 9159.78

",lineitem,"l_linenumber, l_orderkey, l_returnflag"
retail_complains,What are the products that people who were born after 2005 complain about?,SELECT DISTINCT t2.product FROM client as t1 inner JOIN events as t2 ON t1.client_id = t2.client_id WHERE t1.year > 2005,"CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

","CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

","client, events","events.product, client.client_id, events.client_id, client.year"
authors,"Please list the names of the authors of the paper ""Hypermethylation of the <I>TPEF/HPP1</I> Gene in Primary and Metastatic Colorectal Cancers"".",SELECT t2.name FROM paper as t1 inner JOIN paperAuthor as t2 ON t1.id = t2.paperid WHERE t1.title = 'Hypermethylation of the <I>TPEF/HPP1</I> Gene in Primary and Metastatic Colorectal Cancers',"CREATE TABLE `paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `paperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `paperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

","CREATE TABLE `Author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `Author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

CREATE TABLE `Conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

CREATE TABLE `Journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `Paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `Paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `PaperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `PaperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

","paper, paperAuthor","paperAuthor.name, paper.id, paperAuthor.paperid, paper.title"
sales,Find and list the full name of customers who bought products above-average quantity.,"SELECT t2.firstname, t2.middleinitial, t2.lastname FROM sales as t1 inner JOIN customers as t2 ON t1.customerid = t2.customerid GROUP BY t1.quantity HAVING t1.quantity > ( SELECT AVG(quantity) FROM sales )","CREATE TABLE `sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

CREATE TABLE `customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Employees`:
1, Abraham, e, Bennet
2, Reginald, l, Blotchet-Halls
3, Cheryl, a, Carson

CREATE TABLE `Products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

CREATE TABLE `Sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `Sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

","sales, customers","customers.firstname, customers.middleinitial, customers.lastname, sales.customerid, customers.customerid, sales.quantity, quantity"
world_development_indicators,Which countries have a fertility rate between 4 and 5 in 1979? List their names.,"SELECT countryname FROM indicators WHERE year = 1979 AND indicatorname = 'Fertility rate, total (births per woman)' AND value >= 4 AND value <= 5","CREATE TABLE `indicators` (
  CountryName TEXT,
  CountryCode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  IndicatorName TEXT,
  IndicatorCode TEXT PRIMARY KEY,
  Year INTEGER PRIMARY KEY,
  Value INTEGER
);
Sample rows from `indicators`:
Arab World, ARB, Adolescent fertility rate (births per 1,000 women ages 15-19), SP.ADO.TFRT, 1960, 133
Arab World, ARB, Age dependency ratio (% of working-age population), SP.POP.DPND, 1960, 87
Arab World, ARB, Age dependency ratio, old (% of working-age population), SP.POP.DPND.OL, 1960, 6

","CREATE TABLE `Country` (
  CountryCode TEXT PRIMARY KEY,
  ShortName TEXT,
  TableName TEXT,
  LongName TEXT,
  Alpha2Code TEXT,
  CurrencyUnit TEXT,
  SpecialNotes TEXT,
  Region TEXT,
  IncomeGroup TEXT,
  Wb2Code TEXT,
  NationalAccountsBaseYear TEXT,
  NationalAccountsReferenceYear TEXT,
  SnaPriceValuation TEXT,
  LendingCategory TEXT,
  OtherGroups TEXT,
  SystemOfNationalAccounts TEXT,
  AlternativeConversionFactor TEXT,
  PppSurveyYear TEXT,
  BalanceOfPaymentsManualInUse TEXT,
  ExternalDebtReportingStatus TEXT,
  SystemOfTrade TEXT,
  GovernmentAccountingConcept TEXT,
  ImfDataDisseminationStandard TEXT,
  LatestPopulationCensus TEXT,
  LatestHouseholdSurvey TEXT,
  SourceOfMostRecentIncomeAndExpenditureData TEXT,
  VitalRegistrationComplete TEXT,
  LatestAgriculturalCensus TEXT,
  LatestIndustrialData INTEGER,
  LatestTradeData INTEGER,
  LatestWaterWithdrawalData INTEGER
);
Sample rows from `Country`:
AFG, Afghanistan, Afghanistan, Islamic State of Afghanistan, AF, Afghan afghani, Fiscal year end: March 20; reporting period for national accounts data: FY (from 2013 are CY). National accounts data are sourced from the IMF and differ from the Central Statistics Organization numbers due to exclusion of the opium economy., South Asia, Low income, AF, 2002/03, , Value added at basic prices (VAB), IDA, HIPC, Country uses the 1993 System of National Accounts methodology., , , , Actual, General trade system, Consolidated central government, General Data Dissemination System (GDDS), 1979, Multiple Indicator Cluster Survey (MICS), 2010/11, Integrated household survey (IHS), 2008, , 2013/14, None, 2013, 2000
ALB, Albania, Albania, Republic of Albania, AL, Albanian lek, , Europe & Central Asia, Upper middle income, AL, Original chained constant price data are rescaled., 1996, Value added at basic prices (VAB), IBRD, , Country uses the 1993 System of National Accounts methodology., , Rolling, IMF Balance of Payments Manual, 6th edition., Actual, General trade system, Budgetary central government, General Data Dissemination System (GDDS), 2011, Demographic and Health Survey (DHS), 2008/09, Living Standards Measurement Study Survey (LSMS), 2011/12, Yes, 2012, 2011, 2013, 2006
DZA, Algeria, Algeria, People's Democratic Republic of Algeria, DZ, Algerian dinar, , Middle East & North Africa, Upper middle income, DZ, 1980, , Value added at basic prices (VAB), IBRD, , Country uses the 1968 System of National Accounts methodology., , 2011, IMF Balance of Payments Manual, 6th edition., Actual, Special trade system, Budgetary central government, General Data Dissemination System (GDDS), 2008, Multiple Indicator Cluster Survey (MICS), 2012, Integrated household survey (IHS), 1995, , , 2010, 2013, 2001

CREATE TABLE `Series` (
  SeriesCode TEXT PRIMARY KEY,
  Topic TEXT,
  IndicatorName TEXT,
  ShortDefinition TEXT,
  LongDefinition TEXT,
  UnitOfMeasure TEXT,
  Periodicity TEXT,
  BasePeriod TEXT,
  OtherNotes INTEGER,
  AggregationMethod TEXT,
  LimitationsAndExceptions TEXT,
  NotesFromOriginalSource TEXT,
  GeneralComments TEXT,
  Source TEXT,
  StatisticalConceptAndMethodology TEXT,
  DevelopmentRelevance TEXT,
  RelatedSourceLinks TEXT,
  OtherWebLinks INTEGER,
  RelatedIndicators INTEGER,
  LicenseType TEXT
);
Sample rows from `Series`:
BN.KLT.DINV.CD, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net (BoP, current US$), , Foreign direct investment are the net inflows of investment to acquire a lasting management interest (10 percent or more of voting stock) in an enterprise operating in an economy other than that of the investor. It is the sum of equity capital, reinvestme, , Annual, , None, , , , Note: Data are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6) and are only available from 2005 onwards. In BPM6, the headings of the financial account have been changed from credits and debits to net acquisition of financial ass, International Monetary Fund, Balance of Payments Statistics Yearbook and data files., , , , None, None, Open
BX.KLT.DINV.WD.GD.ZS, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net inflows (% of GDP), , Foreign direct investment are the net inflows of investment to acquire a lasting management interest (10 percent or more of voting stock) in an enterprise operating in an economy other than that of the investor. It is the sum of equity capital, reinvestme, , Annual, , None, Weighted average, FDI data do not give a complete picture of international investment in an economy. Balance of payments data on FDI do not include capital raised locally, an important source of investment financing in some developing countries. In addition, FDI data omit , , Note: Data starting from 2005 are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6)., International Monetary Fund, International Financial Statistics and Balance of Payments databases, World Bank, International Debt Statistics, and World Bank and OECD GDP estimates., Data on equity flows are based on balance of payments data reported by the International Monetary Fund (IMF). Foreign direct investment (FDI) data are supplemented by the World Bank staff estimates using data from the United Nations Conference on Trade an, Private financial flows - equity and debt - account for the bulk of development finance. Equity flows comprise foreign direct investment (FDI) and portfolio equity. Debt flows are financing raised through bond issuance, bank lending, and supplier credits., , None, None, Open
BX.KLT.DINV.CD.WD, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net inflows (BoP, current US$), , Foreign direct investment refers to direct investment equity flows in the reporting economy. It is the sum of equity capital, reinvestment of earnings, and other capital. Direct investment is a category of cross-border investment associated with a residen, , Annual, , None, Sum, FDI data do not give a complete picture of international investment in an economy. Balance of payments data on FDI do not include capital raised locally, an important source of investment financing in some developing countries. In addition, FDI data omit , , Note: Data starting from 2005 are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6)., International Monetary Fund, Balance of Payments database, supplemented by data from the United Nations Conference on Trade and Development and official national sources., Data on equity flows are based on balance of payments data reported by the International Monetary Fund (IMF). Foreign direct investment (FDI) data are supplemented by the World Bank staff estimates using data from the United Nations Conference on Trade an, Private financial flows - equity and debt - account for the bulk of development finance. Equity flows comprise foreign direct investment (FDI) and portfolio equity. Debt flows are financing raised through bond issuance, bank lending, and supplier credits., , None, None, Open

CREATE TABLE `CountryNotes` (
  Countrycode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Description TEXT
);
Sample rows from `CountryNotes`:
ABW, EG.EGY.PRIM.PP.KD, Sources: Estimated based on UN Energy Statistics (2014); World Development Indicators, WDI (2014)
ABW, EG.ELC.RNEW.ZS, Sources: UN Energy Statistics (2014)
ABW, EG.FEC.RNEW.ZS, Sources: UN Energy Statistics (2014)

CREATE TABLE `Footnotes` (
  Countrycode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Year TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `Footnotes`:
ABW, AG.LND.FRST.K2, YR1990, Not specified
ABW, AG.LND.FRST.K2, YR2000, Not specified
ABW, AG.LND.FRST.K2, YR2005, Not specified

CREATE TABLE `Indicators` (
  CountryName TEXT,
  CountryCode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  IndicatorName TEXT,
  IndicatorCode TEXT PRIMARY KEY,
  Year INTEGER PRIMARY KEY,
  Value INTEGER
);
Sample rows from `Indicators`:
Arab World, ARB, Adolescent fertility rate (births per 1,000 women ages 15-19), SP.ADO.TFRT, 1960, 133
Arab World, ARB, Age dependency ratio (% of working-age population), SP.POP.DPND, 1960, 87
Arab World, ARB, Age dependency ratio, old (% of working-age population), SP.POP.DPND.OL, 1960, 6

CREATE TABLE `SeriesNotes` (
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Year TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `SeriesNotes`:
SP.ADO.TFRT, YR1960, Interpolated using data for 1957 and 1962.
SP.DYN.AMRT.FE, YR1960, Interpolated using data for 1957 and 1962, if the data source is United Nations World Population Prospects.
SP.DYN.AMRT.MA, YR1960, Interpolated using data for 1957 and 1962, if the data source is United Nations World Population Prospects.

",indicators,"countryname, indicatorname, value"
ice_hockey_draft,What is the average weight in pounds of all the players with the highest prospects for the draft?,SELECT cast(SUM(t2.weight_in_lbs) as real) / COUNT(t1.eliteid) FROM playerinfo as t1 inner JOIN weight_info as t2 ON t1.weight = t2.weight_id WHERE t1.css_rank = ( SELECT MAX(css_rank) FROM playerinfo ),"CREATE TABLE `playerinfo` (
  ELITEID INTEGER,
  PlayerName TEXT,
  birthdate TEXT,
  birthyear DATE,
  birthmonth INTEGER,
  birthday INTEGER,
  birthplace TEXT,
  nation TEXT,
  height INTEGER REFERENCES height_info(height_id),
  weight INTEGER REFERENCES weight_info(weight_id),
  position_info TEXT,
  shoots TEXT,
  draftyear INTEGER,
  draftround INTEGER,
  overall INTEGER,
  overallby TEXT,
  CSS_rank INTEGER,
  sum_7yr_GP INTEGER,
  sum_7yr_TOI INTEGER,
  GP_greater_than_0 TEXT
);
Sample rows from `playerinfo`:
9, David Bornhammar, 1981-06-15, 1981, 6, 15, Lidingo, SWE, Sweden, 73, 198, D, L, 1999, 7, 192, Washington Capitals, 192, 0, 0, no
18, David Printz, 1980-07-24, 1980, 7, 24, Stockholm, SWE, Sweden, 76, 220, D, L, 2001, 7, 225, Philadelphia Flyers, 176, 13, 84, yes
27, Yared Hagos, 1983-03-27, 1983, 3, 27, Stockholm, SWE, Sweden, 73, 218, C, L, 2001, 3, 70, Dallas Stars, 24, 0, 0, no

CREATE TABLE `weight_info` (
  weight_id INTEGER,
  weight_in_kg INTEGER,
  weight_in_lbs INTEGER
);
Sample rows from `weight_info`:
154, 70, 154
159, 72, 159
161, 73, 161

","CREATE TABLE `height_info` (
  height_id INTEGER,
  height_in_cm INTEGER,
  height_in_inch TEXT
);
Sample rows from `height_info`:
65, 165, 5'5""
67, 170, 5'7""
68, 172, 5'8""

CREATE TABLE `weight_info` (
  weight_id INTEGER,
  weight_in_kg INTEGER,
  weight_in_lbs INTEGER
);
Sample rows from `weight_info`:
154, 70, 154
159, 72, 159
161, 73, 161

CREATE TABLE `PlayerInfo` (
  ELITEID INTEGER,
  PlayerName TEXT,
  birthdate TEXT,
  birthyear DATE,
  birthmonth INTEGER,
  birthday INTEGER,
  birthplace TEXT,
  nation TEXT,
  height INTEGER REFERENCES height_info(height_id),
  weight INTEGER REFERENCES weight_info(weight_id),
  position_info TEXT,
  shoots TEXT,
  draftyear INTEGER,
  draftround INTEGER,
  overall INTEGER,
  overallby TEXT,
  CSS_rank INTEGER,
  sum_7yr_GP INTEGER,
  sum_7yr_TOI INTEGER,
  GP_greater_than_0 TEXT
);
Sample rows from `PlayerInfo`:
9, David Bornhammar, 1981-06-15, 1981, 6, 15, Lidingo, SWE, Sweden, 73, 198, D, L, 1999, 7, 192, Washington Capitals, 192, 0, 0, no
18, David Printz, 1980-07-24, 1980, 7, 24, Stockholm, SWE, Sweden, 76, 220, D, L, 2001, 7, 225, Philadelphia Flyers, 176, 13, 84, yes
27, Yared Hagos, 1983-03-27, 1983, 3, 27, Stockholm, SWE, Sweden, 73, 218, C, L, 2001, 3, 70, Dallas Stars, 24, 0, 0, no

CREATE TABLE `SeasonStatus` (
  ELITEID INTEGER REFERENCES PlayerInfo(ELITEID),
  SEASON TEXT,
  TEAM TEXT,
  LEAGUE TEXT,
  GAMETYPE TEXT,
  GP INTEGER,
  G INTEGER,
  A INTEGER,
  P INTEGER,
  PIM INTEGER,
  PLUSMINUS INTEGER
);
Sample rows from `SeasonStatus`:
3667, 1997-1998, Rimouski Oceanic, QMJHL, Regular Season, 58, 44, 71, 115, 117, 27
3667, 1997-1998, Rimouski Oceanic, QMJHL, Playoffs, 18, 15, 26, 41, 46, 4
3667, 1997-1998, Canada U20, WJC-20, Regular Season, 7, 1, 1, 2, 4, 0

","playerinfo, weight_info","weight_info.weight_in_lbs, playerinfo.eliteid, playerinfo.weight, weight_info.weight_id, playerinfo.css_rank, css_rank"
books,On what dates were books ordered at a price of 16.54?,SELECT t1.order_date FROM cust_order as t1 inner JOIN order_line as t2 ON t1.order_id = t2.order_id WHERE t2.price = 16.54,"CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","cust_order, order_line","cust_order.order_date, cust_order.order_id, order_line.order_id, order_line.price"
chicago_crime,"In the most populated ward, how many incidents of domestic violence were reported in a bar or tavern?",SELECT COUNT(t2.report_no) FROM ward as t1 inner JOIN crime as t2 ON t1.ward_no = t2.ward_no WHERE t2.domestic = 'TRUE' AND t2.location_description = 'BAR OR TAVERN' ORDER BY t1.population DESC LIMIT 1,"CREATE TABLE `ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","CREATE TABLE `Community_Area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `Community_Area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `District` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `District`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `FBI_Code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `FBI_Code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `IUCR` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `IUCR`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `Neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `Neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `Ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `Ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `Crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `Crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","ward, crime","crime.report_no, ward.ward_no, crime.ward_no, crime.domestic, crime.location_description, ward.population"
world_development_indicators,"How many countries have reached their Adjusted net national income per capita (constant 2005 US$) indicator value to more than 1,000 but have not finished their external debt reporting?",SELECT COUNT(t1.countrycode) FROM country as t1 inner JOIN indicators as t2 ON t1.countrycode = t2.countrycode WHERE t2.indicatorname = 'Adjusted net national income per capita (constant 2005 US$)' AND t1.externaldebtreportingstatus = 'Preliminary' AND t2.value > 1000,"CREATE TABLE `country` (
  CountryCode TEXT PRIMARY KEY,
  ShortName TEXT,
  TableName TEXT,
  LongName TEXT,
  Alpha2Code TEXT,
  CurrencyUnit TEXT,
  SpecialNotes TEXT,
  Region TEXT,
  IncomeGroup TEXT,
  Wb2Code TEXT,
  NationalAccountsBaseYear TEXT,
  NationalAccountsReferenceYear TEXT,
  SnaPriceValuation TEXT,
  LendingCategory TEXT,
  OtherGroups TEXT,
  SystemOfNationalAccounts TEXT,
  AlternativeConversionFactor TEXT,
  PppSurveyYear TEXT,
  BalanceOfPaymentsManualInUse TEXT,
  ExternalDebtReportingStatus TEXT,
  SystemOfTrade TEXT,
  GovernmentAccountingConcept TEXT,
  ImfDataDisseminationStandard TEXT,
  LatestPopulationCensus TEXT,
  LatestHouseholdSurvey TEXT,
  SourceOfMostRecentIncomeAndExpenditureData TEXT,
  VitalRegistrationComplete TEXT,
  LatestAgriculturalCensus TEXT,
  LatestIndustrialData INTEGER,
  LatestTradeData INTEGER,
  LatestWaterWithdrawalData INTEGER
);
Sample rows from `country`:
AFG, Afghanistan, Afghanistan, Islamic State of Afghanistan, AF, Afghan afghani, Fiscal year end: March 20; reporting period for national accounts data: FY (from 2013 are CY). National accounts data are sourced from the IMF and differ from the Central Statistics Organization numbers due to exclusion of the opium economy., South Asia, Low income, AF, 2002/03, , Value added at basic prices (VAB), IDA, HIPC, Country uses the 1993 System of National Accounts methodology., , , , Actual, General trade system, Consolidated central government, General Data Dissemination System (GDDS), 1979, Multiple Indicator Cluster Survey (MICS), 2010/11, Integrated household survey (IHS), 2008, , 2013/14, None, 2013, 2000
ALB, Albania, Albania, Republic of Albania, AL, Albanian lek, , Europe & Central Asia, Upper middle income, AL, Original chained constant price data are rescaled., 1996, Value added at basic prices (VAB), IBRD, , Country uses the 1993 System of National Accounts methodology., , Rolling, IMF Balance of Payments Manual, 6th edition., Actual, General trade system, Budgetary central government, General Data Dissemination System (GDDS), 2011, Demographic and Health Survey (DHS), 2008/09, Living Standards Measurement Study Survey (LSMS), 2011/12, Yes, 2012, 2011, 2013, 2006
DZA, Algeria, Algeria, People's Democratic Republic of Algeria, DZ, Algerian dinar, , Middle East & North Africa, Upper middle income, DZ, 1980, , Value added at basic prices (VAB), IBRD, , Country uses the 1968 System of National Accounts methodology., , 2011, IMF Balance of Payments Manual, 6th edition., Actual, Special trade system, Budgetary central government, General Data Dissemination System (GDDS), 2008, Multiple Indicator Cluster Survey (MICS), 2012, Integrated household survey (IHS), 1995, , , 2010, 2013, 2001

CREATE TABLE `indicators` (
  CountryName TEXT,
  CountryCode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  IndicatorName TEXT,
  IndicatorCode TEXT PRIMARY KEY,
  Year INTEGER PRIMARY KEY,
  Value INTEGER
);
Sample rows from `indicators`:
Arab World, ARB, Adolescent fertility rate (births per 1,000 women ages 15-19), SP.ADO.TFRT, 1960, 133
Arab World, ARB, Age dependency ratio (% of working-age population), SP.POP.DPND, 1960, 87
Arab World, ARB, Age dependency ratio, old (% of working-age population), SP.POP.DPND.OL, 1960, 6

","CREATE TABLE `Country` (
  CountryCode TEXT PRIMARY KEY,
  ShortName TEXT,
  TableName TEXT,
  LongName TEXT,
  Alpha2Code TEXT,
  CurrencyUnit TEXT,
  SpecialNotes TEXT,
  Region TEXT,
  IncomeGroup TEXT,
  Wb2Code TEXT,
  NationalAccountsBaseYear TEXT,
  NationalAccountsReferenceYear TEXT,
  SnaPriceValuation TEXT,
  LendingCategory TEXT,
  OtherGroups TEXT,
  SystemOfNationalAccounts TEXT,
  AlternativeConversionFactor TEXT,
  PppSurveyYear TEXT,
  BalanceOfPaymentsManualInUse TEXT,
  ExternalDebtReportingStatus TEXT,
  SystemOfTrade TEXT,
  GovernmentAccountingConcept TEXT,
  ImfDataDisseminationStandard TEXT,
  LatestPopulationCensus TEXT,
  LatestHouseholdSurvey TEXT,
  SourceOfMostRecentIncomeAndExpenditureData TEXT,
  VitalRegistrationComplete TEXT,
  LatestAgriculturalCensus TEXT,
  LatestIndustrialData INTEGER,
  LatestTradeData INTEGER,
  LatestWaterWithdrawalData INTEGER
);
Sample rows from `Country`:
AFG, Afghanistan, Afghanistan, Islamic State of Afghanistan, AF, Afghan afghani, Fiscal year end: March 20; reporting period for national accounts data: FY (from 2013 are CY). National accounts data are sourced from the IMF and differ from the Central Statistics Organization numbers due to exclusion of the opium economy., South Asia, Low income, AF, 2002/03, , Value added at basic prices (VAB), IDA, HIPC, Country uses the 1993 System of National Accounts methodology., , , , Actual, General trade system, Consolidated central government, General Data Dissemination System (GDDS), 1979, Multiple Indicator Cluster Survey (MICS), 2010/11, Integrated household survey (IHS), 2008, , 2013/14, None, 2013, 2000
ALB, Albania, Albania, Republic of Albania, AL, Albanian lek, , Europe & Central Asia, Upper middle income, AL, Original chained constant price data are rescaled., 1996, Value added at basic prices (VAB), IBRD, , Country uses the 1993 System of National Accounts methodology., , Rolling, IMF Balance of Payments Manual, 6th edition., Actual, General trade system, Budgetary central government, General Data Dissemination System (GDDS), 2011, Demographic and Health Survey (DHS), 2008/09, Living Standards Measurement Study Survey (LSMS), 2011/12, Yes, 2012, 2011, 2013, 2006
DZA, Algeria, Algeria, People's Democratic Republic of Algeria, DZ, Algerian dinar, , Middle East & North Africa, Upper middle income, DZ, 1980, , Value added at basic prices (VAB), IBRD, , Country uses the 1968 System of National Accounts methodology., , 2011, IMF Balance of Payments Manual, 6th edition., Actual, Special trade system, Budgetary central government, General Data Dissemination System (GDDS), 2008, Multiple Indicator Cluster Survey (MICS), 2012, Integrated household survey (IHS), 1995, , , 2010, 2013, 2001

CREATE TABLE `Series` (
  SeriesCode TEXT PRIMARY KEY,
  Topic TEXT,
  IndicatorName TEXT,
  ShortDefinition TEXT,
  LongDefinition TEXT,
  UnitOfMeasure TEXT,
  Periodicity TEXT,
  BasePeriod TEXT,
  OtherNotes INTEGER,
  AggregationMethod TEXT,
  LimitationsAndExceptions TEXT,
  NotesFromOriginalSource TEXT,
  GeneralComments TEXT,
  Source TEXT,
  StatisticalConceptAndMethodology TEXT,
  DevelopmentRelevance TEXT,
  RelatedSourceLinks TEXT,
  OtherWebLinks INTEGER,
  RelatedIndicators INTEGER,
  LicenseType TEXT
);
Sample rows from `Series`:
BN.KLT.DINV.CD, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net (BoP, current US$), , Foreign direct investment are the net inflows of investment to acquire a lasting management interest (10 percent or more of voting stock) in an enterprise operating in an economy other than that of the investor. It is the sum of equity capital, reinvestme, , Annual, , None, , , , Note: Data are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6) and are only available from 2005 onwards. In BPM6, the headings of the financial account have been changed from credits and debits to net acquisition of financial ass, International Monetary Fund, Balance of Payments Statistics Yearbook and data files., , , , None, None, Open
BX.KLT.DINV.WD.GD.ZS, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net inflows (% of GDP), , Foreign direct investment are the net inflows of investment to acquire a lasting management interest (10 percent or more of voting stock) in an enterprise operating in an economy other than that of the investor. It is the sum of equity capital, reinvestme, , Annual, , None, Weighted average, FDI data do not give a complete picture of international investment in an economy. Balance of payments data on FDI do not include capital raised locally, an important source of investment financing in some developing countries. In addition, FDI data omit , , Note: Data starting from 2005 are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6)., International Monetary Fund, International Financial Statistics and Balance of Payments databases, World Bank, International Debt Statistics, and World Bank and OECD GDP estimates., Data on equity flows are based on balance of payments data reported by the International Monetary Fund (IMF). Foreign direct investment (FDI) data are supplemented by the World Bank staff estimates using data from the United Nations Conference on Trade an, Private financial flows - equity and debt - account for the bulk of development finance. Equity flows comprise foreign direct investment (FDI) and portfolio equity. Debt flows are financing raised through bond issuance, bank lending, and supplier credits., , None, None, Open
BX.KLT.DINV.CD.WD, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net inflows (BoP, current US$), , Foreign direct investment refers to direct investment equity flows in the reporting economy. It is the sum of equity capital, reinvestment of earnings, and other capital. Direct investment is a category of cross-border investment associated with a residen, , Annual, , None, Sum, FDI data do not give a complete picture of international investment in an economy. Balance of payments data on FDI do not include capital raised locally, an important source of investment financing in some developing countries. In addition, FDI data omit , , Note: Data starting from 2005 are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6)., International Monetary Fund, Balance of Payments database, supplemented by data from the United Nations Conference on Trade and Development and official national sources., Data on equity flows are based on balance of payments data reported by the International Monetary Fund (IMF). Foreign direct investment (FDI) data are supplemented by the World Bank staff estimates using data from the United Nations Conference on Trade an, Private financial flows - equity and debt - account for the bulk of development finance. Equity flows comprise foreign direct investment (FDI) and portfolio equity. Debt flows are financing raised through bond issuance, bank lending, and supplier credits., , None, None, Open

CREATE TABLE `CountryNotes` (
  Countrycode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Description TEXT
);
Sample rows from `CountryNotes`:
ABW, EG.EGY.PRIM.PP.KD, Sources: Estimated based on UN Energy Statistics (2014); World Development Indicators, WDI (2014)
ABW, EG.ELC.RNEW.ZS, Sources: UN Energy Statistics (2014)
ABW, EG.FEC.RNEW.ZS, Sources: UN Energy Statistics (2014)

CREATE TABLE `Footnotes` (
  Countrycode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Year TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `Footnotes`:
ABW, AG.LND.FRST.K2, YR1990, Not specified
ABW, AG.LND.FRST.K2, YR2000, Not specified
ABW, AG.LND.FRST.K2, YR2005, Not specified

CREATE TABLE `Indicators` (
  CountryName TEXT,
  CountryCode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  IndicatorName TEXT,
  IndicatorCode TEXT PRIMARY KEY,
  Year INTEGER PRIMARY KEY,
  Value INTEGER
);
Sample rows from `Indicators`:
Arab World, ARB, Adolescent fertility rate (births per 1,000 women ages 15-19), SP.ADO.TFRT, 1960, 133
Arab World, ARB, Age dependency ratio (% of working-age population), SP.POP.DPND, 1960, 87
Arab World, ARB, Age dependency ratio, old (% of working-age population), SP.POP.DPND.OL, 1960, 6

CREATE TABLE `SeriesNotes` (
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Year TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `SeriesNotes`:
SP.ADO.TFRT, YR1960, Interpolated using data for 1957 and 1962.
SP.DYN.AMRT.FE, YR1960, Interpolated using data for 1957 and 1962, if the data source is United Nations World Population Prospects.
SP.DYN.AMRT.MA, YR1960, Interpolated using data for 1957 and 1962, if the data source is United Nations World Population Prospects.

","country, indicators","country.countrycode, indicators.countrycode, indicators.indicatorname, country.externaldebtreportingstatus, indicators.value"
image_and_language,How many object samples in image no.908 are in the class of tip?,SELECT SUM(case when t2.obj_class = 'tip' then 1 else 0 end) FROM img_obj as t1 inner JOIN obj_classES as t2 ON t1.obj_class_ID = t2.obj_class_ID WHERE t1.img_id = 908,"CREATE TABLE `img_obj` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `img_obj`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `obj_classES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `obj_classES`:
0, awning
1, goggles
2, dot

","CREATE TABLE `ATT_CLASSES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `ATT_CLASSES`:
0, building s
1, indoors
2, cluttered

CREATE TABLE `OBJ_CLASSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLASSES`:
0, awning
1, goggles
2, dot

CREATE TABLE `IMG_OBJ` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `IMG_OBJ`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `IMG_OBJ_ATT` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_OBJ_ATT`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `PRED_CLASSES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `PRED_CLASSES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `IMG_REL` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_REL`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

","img_obj, obj_classES","obj_classES.obj_class, img_obj.obj_class_ID, obj_classES.obj_class_ID, img_obj.img_id"
retails,Name of customer whose order is applied with the highest discount.,SELECT t3.c_name FROM orders as t1 inner JOIN lineitem as t2 ON t1.o_orderkey = t2.l_orderkey inner JOIN customer as t3 ON t1.o_custkey = t3.c_custkey ORDER BY t2.l_discount DESC LIMIT 1,"CREATE TABLE `orders` (
  o_orderdate DATE,
  o_orderkey INTEGER,
  o_custkey INTEGER REFERENCES customer(c_custkey),
  o_orderpriority TEXT,
  o_shippriority INTEGER,
  o_clerk TEXT,
  o_orderstatus TEXT,
  o_totalprice REAL,
  o_comment TEXT
);
Sample rows from `orders`:
1995-04-19, 1, 73100, 4-NOT SPECIFIED, 0, Clerk#000000916, P, 203198.56, final packages sleep blithely packa
1996-11-04, 2, 92861, 1-URGENT, 0, Clerk#000000373, O, 317719.99, final excuses about the ironic even deposits detect express request
1992-02-15, 3, 44875, 1-URGENT, 0, Clerk#000000485, F, 146674.98, final final deposits cajole foxes. blithely pendin

CREATE TABLE `lineitem` (
  l_shipdate DATE,
  l_orderkey INTEGER PRIMARY KEY REFERENCES orders(o_orderkey),
  l_discount REAL,
  l_extendedprice REAL,
  l_suppkey INTEGER REFERENCES partsupp(ps_suppkey),
  l_quantity INTEGER,
  l_returnflag TEXT,
  l_partkey INTEGER REFERENCES partsupp(ps_partkey),
  l_linestatus TEXT,
  l_tax REAL,
  l_commitdate DATE,
  l_receiptdate DATE,
  l_shipmode TEXT,
  l_linenumber INTEGER PRIMARY KEY,
  l_shipinstruct TEXT,
  l_comment TEXT
);
Sample rows from `lineitem`:
1995-08-16, 1, 0.1, 58303.08, 6296, 33, N, 98768, O, 0.06, 1995-07-12, 1995-09-14, RAIL, 1, NONE, carefully bo
1995-08-13, 1, 0.09, 16947.7, 8776, 10, N, 23771, O, 0.08, 1995-07-09, 1995-08-27, TRUCK, 2, TAKE BACK RETURN, blithely regular pac
1995-06-17, 1, 0.1, 63642.9, 3859, 34, N, 113858, O, 0.08, 1995-05-22, 1995-06-30, SHIP, 3, COLLECT COD, ironic accounts sleep furiously silen

CREATE TABLE `customer` (
  c_custkey INTEGER,
  c_mktsegment TEXT,
  c_nationkey INTEGER REFERENCES nation(n_nationkey),
  c_name TEXT,
  c_address TEXT,
  c_phone TEXT,
  c_acctbal REAL,
  c_comment TEXT
);
Sample rows from `customer`:
1, BUILDING, 8, Customer#000000001, KwX3hMHjZ6, 937-241-3198, 3560.03, ironic excuses detect slyly silent requests. requests according to the exc
2, MACHINERY, 16, Customer#000000002, ioUn,eqTTXOdo, 906-965-7556, 7550.21, final express accounts mold slyly. ironic accounts cajole! quickly express a
3, FURNITURE, 11, Customer#000000003, YddJqmIdouNT9Yj, 328-750-7603, -926.96, carefully express foxes sleep carefully. pending platelets sleep thinly for t

","CREATE TABLE `customer` (
  c_custkey INTEGER,
  c_mktsegment TEXT,
  c_nationkey INTEGER REFERENCES nation(n_nationkey),
  c_name TEXT,
  c_address TEXT,
  c_phone TEXT,
  c_acctbal REAL,
  c_comment TEXT
);
Sample rows from `customer`:
1, BUILDING, 8, Customer#000000001, KwX3hMHjZ6, 937-241-3198, 3560.03, ironic excuses detect slyly silent requests. requests according to the exc
2, MACHINERY, 16, Customer#000000002, ioUn,eqTTXOdo, 906-965-7556, 7550.21, final express accounts mold slyly. ironic accounts cajole! quickly express a
3, FURNITURE, 11, Customer#000000003, YddJqmIdouNT9Yj, 328-750-7603, -926.96, carefully express foxes sleep carefully. pending platelets sleep thinly for t

CREATE TABLE `lineitem` (
  l_shipdate DATE,
  l_orderkey INTEGER PRIMARY KEY REFERENCES orders(o_orderkey),
  l_discount REAL,
  l_extendedprice REAL,
  l_suppkey INTEGER REFERENCES partsupp(ps_suppkey),
  l_quantity INTEGER,
  l_returnflag TEXT,
  l_partkey INTEGER REFERENCES partsupp(ps_partkey),
  l_linestatus TEXT,
  l_tax REAL,
  l_commitdate DATE,
  l_receiptdate DATE,
  l_shipmode TEXT,
  l_linenumber INTEGER PRIMARY KEY,
  l_shipinstruct TEXT,
  l_comment TEXT
);
Sample rows from `lineitem`:
1995-08-16, 1, 0.1, 58303.08, 6296, 33, N, 98768, O, 0.06, 1995-07-12, 1995-09-14, RAIL, 1, NONE, carefully bo
1995-08-13, 1, 0.09, 16947.7, 8776, 10, N, 23771, O, 0.08, 1995-07-09, 1995-08-27, TRUCK, 2, TAKE BACK RETURN, blithely regular pac
1995-06-17, 1, 0.1, 63642.9, 3859, 34, N, 113858, O, 0.08, 1995-05-22, 1995-06-30, SHIP, 3, COLLECT COD, ironic accounts sleep furiously silen

CREATE TABLE `nation` (
  n_nationkey INTEGER,
  n_name TEXT,
  n_regionkey INTEGER REFERENCES region(r_regionkey),
  n_comment TEXT
);
Sample rows from `nation`:
0, ALGERIA, 0, slyly express pinto beans cajole idly. deposits use blithely unusual packages? fluffily final accounts x-r
1, ARGENTINA, 1, instructions detect blithely stealthily pending packages
2, BRAZIL, 1, blithely unusual deposits are quickly--

CREATE TABLE `orders` (
  o_orderdate DATE,
  o_orderkey INTEGER,
  o_custkey INTEGER REFERENCES customer(c_custkey),
  o_orderpriority TEXT,
  o_shippriority INTEGER,
  o_clerk TEXT,
  o_orderstatus TEXT,
  o_totalprice REAL,
  o_comment TEXT
);
Sample rows from `orders`:
1995-04-19, 1, 73100, 4-NOT SPECIFIED, 0, Clerk#000000916, P, 203198.56, final packages sleep blithely packa
1996-11-04, 2, 92861, 1-URGENT, 0, Clerk#000000373, O, 317719.99, final excuses about the ironic even deposits detect express request
1992-02-15, 3, 44875, 1-URGENT, 0, Clerk#000000485, F, 146674.98, final final deposits cajole foxes. blithely pendin

CREATE TABLE `part` (
  p_partkey INTEGER,
  p_type TEXT,
  p_size INTEGER,
  p_brand TEXT,
  p_name TEXT,
  p_container TEXT,
  p_mfgr TEXT,
  p_retailprice REAL,
  p_comment TEXT
);
Sample rows from `part`:
1, LARGE PLATED TIN, 31, Brand#43, burlywood plum powder puff mint, LG BAG, Manufacturer#4, 901.0, blithely busy reque
2, LARGE POLISHED STEEL, 4, Brand#55, hot spring dodger dim light, LG CASE, Manufacturer#5, 902.0, even ironic requests s
3, STANDARD PLATED COPPER, 30, Brand#53, dark slate grey steel misty, WRAP CASE, Manufacturer#5, 903.0, slyly ironic fox

CREATE TABLE `partsupp` (
  ps_partkey INTEGER PRIMARY KEY REFERENCES part(p_partkey),
  ps_suppkey INTEGER PRIMARY KEY REFERENCES supplier(s_suppkey),
  ps_supplycost REAL,
  ps_availqty INTEGER,
  ps_comment TEXT
);
Sample rows from `partsupp`:
1, 2, 400.75, 1111, carefully ironic deposits use against the carefully unusual accounts. slyly silent platelets nag quickly even
1, 2502, 702.61, 3999, slyly regular accounts serve carefully. asymptotes after the slyly even instructions cajole quickly ironic requests. pending dugouts about the slyly 
1, 5002, 383.95, 7411, carefully special ideas are slyly. slyly ironic epitaphs use pending pending foxes. furiously express pinto beans lose quiet even requests: special final packages ar

CREATE TABLE `region` (
  r_regionkey INTEGER,
  r_name TEXT,
  r_comment TEXT
);
Sample rows from `region`:
0, AFRICA, asymptotes sublate after the r
1, AMERICA, requests affix quickly final tithes. blithely even packages above the a
2, ASIA, accounts cajole carefully according to the carefully exp

CREATE TABLE `supplier` (
  s_suppkey INTEGER,
  s_nationkey INTEGER REFERENCES nation(n_nationkey),
  s_comment TEXT,
  s_name TEXT,
  s_address TEXT,
  s_phone TEXT,
  s_acctbal REAL
);
Sample rows from `supplier`:
1, 13, blithely final pearls are. instructions thra, Supplier#000000001, ,wWs4pnykQOFl8mgVCU8EZMXqZs1w, 800-807-9579, 3082.86
2, 5, requests integrate fluffily. fluffily ironic deposits wake. bold, Supplier#000000002, WkXT6MSAJrp4qWq3W9N, 348-617-6055, 3009.73
3, 22, carefully express ideas shall have to unwin, Supplier#000000003, KjUqa42JEHaRDVQTHV6Yq2h, 471-986-9888, 9159.78

","orders, lineitem, customer","customer.c_name, orders.o_orderkey, lineitem.l_orderkey, orders.o_custkey, customer.c_custkey, lineitem.l_discount"
simpson_episodes,Calculate the total rating of winners in OFTA Television Award and WGA Award (TV).,"SELECT SUM(t2.rating) FROM award as t1 inner JOIN episode as t2 ON t1.episode_id = t2.episode_id WHERE t1.award_category IN ('Jupiter award ', 'WGA award (TV)');","CREATE TABLE `award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","award, episode","episode.rating, award.episode_id, episode.episode_id, award.award_category"
social_media,Which country's tweets collected the most likes?,"SELECt t.country FROM ( SELECt t2.country, SUM(t1.likes) as num FROM twitter as t1 inner JOIN location as t2 ON t1.locationid = t2.locationid GROUP BY t2.country ) t ORDER BY t.num DESC LIMIt 1","CREATE TABLE `twitter` (
  TweetID TEXT PRIMARY KEY,
  Weekday TEXT,
  Hour INTEGER,
  Day INTEGER,
  Lang TEXT,
  IsReshare TEXT,
  Reach INTEGER,
  RetweetCount INTEGER,
  Likes INTEGER,
  Klout INTEGER,
  Sentiment REAL,
  text TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  UserID TEXT REFERENCES user(UserID)
);
Sample rows from `twitter`:
tw-682712873332805633, Thursday, 17, 31, en, FALSE, 44, 0, 0, 35, 0.0, We are hiring: Senior Software Engineer - Proto http://www.reqcloud.com/jobs/719865/?k=0LaPxXuFwczs1e32ZURJKrgCIDMQtRO7BquFSQthUKY&utm_source=twitter&utm_campaign=reqCloud_JobPost #job @awscloud #job #protocol #networking #aws #mediastreaming, 3751, tw-40932430
tw-682713045357998080, Thursday, 17, 31, en, TRUE, 1810, 5, 0, 53, 2.0, RT @CodeMineStatus: This is true Amazon Web Services https://aws.amazon.com/ #php #html #html5 #css #webdesign #seo #java #javascript htt, 3989, tw-3179389829
tw-682713219375476736, Thursday, 17, 31, en, FALSE, 282, 0, 0, 47, 0.0, Devops Engineer Aws Ansible Cassandra Mysql Ubuntu Ruby On Rails Jobs in Austin TX #Austin #TX #jobs #jobsearch https://www.jobfindly.com/devops-engineer-aws-ansible-cassandra-mysql-ubuntu-ruby-on-rails-jobs-austin-tx.html, 3741, tw-4624808414

CREATE TABLE `location` (
  LocationID INTEGER,
  Country TEXT,
  State TEXT,
  StateCode TEXT,
  City TEXT
);
Sample rows from `location`:
1, Albania, Elbasan, AL, Elbasan
2, Albania, Tirane, AL, Tirana
3, Algeria, Souk Ahras, DZ, Souk Ahras

","CREATE TABLE `location` (
  LocationID INTEGER,
  Country TEXT,
  State TEXT,
  StateCode TEXT,
  City TEXT
);
Sample rows from `location`:
1, Albania, Elbasan, AL, Elbasan
2, Albania, Tirane, AL, Tirana
3, Algeria, Souk Ahras, DZ, Souk Ahras

CREATE TABLE `user` (
  UserID TEXT PRIMARY KEY,
  Gender TEXT
);
Sample rows from `user`:
tw-1267804344, Unknown
tw-27229880, Male
tw-199664730, Male

CREATE TABLE `twitter` (
  TweetID TEXT PRIMARY KEY,
  Weekday TEXT,
  Hour INTEGER,
  Day INTEGER,
  Lang TEXT,
  IsReshare TEXT,
  Reach INTEGER,
  RetweetCount INTEGER,
  Likes INTEGER,
  Klout INTEGER,
  Sentiment REAL,
  text TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  UserID TEXT REFERENCES user(UserID)
);
Sample rows from `twitter`:
tw-682712873332805633, Thursday, 17, 31, en, FALSE, 44, 0, 0, 35, 0.0, We are hiring: Senior Software Engineer - Proto http://www.reqcloud.com/jobs/719865/?k=0LaPxXuFwczs1e32ZURJKrgCIDMQtRO7BquFSQthUKY&utm_source=twitter&utm_campaign=reqCloud_JobPost #job @awscloud #job #protocol #networking #aws #mediastreaming, 3751, tw-40932430
tw-682713045357998080, Thursday, 17, 31, en, TRUE, 1810, 5, 0, 53, 2.0, RT @CodeMineStatus: This is true Amazon Web Services https://aws.amazon.com/ #php #html #html5 #css #webdesign #seo #java #javascript htt, 3989, tw-3179389829
tw-682713219375476736, Thursday, 17, 31, en, FALSE, 282, 0, 0, 47, 0.0, Devops Engineer Aws Ansible Cassandra Mysql Ubuntu Ruby On Rails Jobs in Austin TX #Austin #TX #jobs #jobsearch https://www.jobfindly.com/devops-engineer-aws-ansible-cassandra-mysql-ubuntu-ruby-on-rails-jobs-austin-tx.html, 3741, tw-4624808414

","twitter, location","location.country, twitter.likes, twitter.locationid, location.locationid"
beer_factory,What is the transaction ratio being made at Sac State American River Courtyard and Sac State Union?,SELECT cast(COUNT(case when t2.locationname = 'Sac State American River Courtyard' then t1.transactionid else null end) as real) * 100 / COUNT(case when t2.locationname = 'Sac State Union' then t1.transactionid else null end) FROM `transaction` as t1 inner JOIN location as t2 ON t1.locationid = t2.locationid,"CREATE TABLE `transaction` (
  TransactionID INTEGER,
  CreditCardNumber INTEGER,
  CustomerID INTEGER REFERENCES customers(CustomerID),
  TransactionDate DATE,
  CreditCardType TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  RootBeerID INTEGER REFERENCES rootbeer(RootBeerID),
  PurchasePrice REAL
);
Sample rows from `transaction`:
100000, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105661, 3.0
100001, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105798, 3.0
100002, 6011583832864739, 864896, 2014-07-07, Discover, 2, 102514, 3.0

CREATE TABLE `location` (
  LocationID INTEGER REFERENCES geolocation(LocationID),
  LocationName TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER
);
Sample rows from `location`:
0, LOST, None, None, None, None
1, Sac State American River Courtyard, 6000 J St, Sacramento, CA, 95819
2, Sac State Union, 6000 J St, Sacramento, CA, 95819

","CREATE TABLE `customers` (
  CustomerID INTEGER,
  First TEXT,
  Last TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER,
  Email TEXT,
  PhoneNumber TEXT,
  FirstPurchaseDate DATE,
  SubscribedToEmailList TEXT,
  Gender TEXT
);
Sample rows from `customers`:
101811, Kenneth, Walton, 6715 Commonwealth Dr, Sacramento, CA, 94256, walton.k76@fastmail.com, (916) 918-1561, 2013-05-30, FALSE, M
103508, Madeleine, Jones, 3603 Leola Way, Sacramento, CA, 94258, j_madeleine@gmail.com, (916) 186-9423, 2013-02-06, FALSE, F
104939, Damen, Wheeler, 6740 Branwood Way, Orangevale, CA, 95662, dwheeler@outlook.com, (916) 164-1156, 2013-04-11, FALSE, M

CREATE TABLE `geolocation` (
  LocationID INTEGER REFERENCES location(LocationID),
  Latitude REAL,
  Longitude REAL
);
Sample rows from `geolocation`:
0, 0.0, 0.0
1, 38.566129, -121.426432
2, 38.559615, -121.42243

CREATE TABLE `location` (
  LocationID INTEGER REFERENCES geolocation(LocationID),
  LocationName TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER
);
Sample rows from `location`:
0, LOST, None, None, None, None
1, Sac State American River Courtyard, 6000 J St, Sacramento, CA, 95819
2, Sac State Union, 6000 J St, Sacramento, CA, 95819

CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

CREATE TABLE `rootbeerreview` (
  CustomerID INTEGER PRIMARY KEY REFERENCES customers(CustomerID),
  BrandID INTEGER PRIMARY KEY REFERENCES rootbeerbrand(BrandID),
  StarRating INTEGER,
  ReviewDate DATE,
  Review TEXT
);
Sample rows from `rootbeerreview`:
101811, 10012, 5, 2013-07-15, None
101811, 10014, 1, 2013-07-08, None
101811, 10015, 3, 2013-07-25, None

CREATE TABLE `transaction` (
  TransactionID INTEGER,
  CreditCardNumber INTEGER,
  CustomerID INTEGER REFERENCES customers(CustomerID),
  TransactionDate DATE,
  CreditCardType TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  RootBeerID INTEGER REFERENCES rootbeer(RootBeerID),
  PurchasePrice REAL
);
Sample rows from `transaction`:
100000, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105661, 3.0
100001, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105798, 3.0
100002, 6011583832864739, 864896, 2014-07-07, Discover, 2, 102514, 3.0

","transaction, location","location.locationname, transaction.transactionid, transaction.locationid, location.locationid"
books,How many books did David Foster Wallace write?,SELECT COUNT(t1.title) FROM book as t1 inner JOIN book_author as t2 ON t1.book_id = t2.book_id inner JOIN author as t3 ON t3.author_id = t2.author_id WHERE t3.author_name = 'David Foster Wallace',"CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","book, book_author, author","book.title, book.book_id, book_author.book_id, author.author_id, book_author.author_id, author.author_name"
bike_share_1,List down the trip IDs when bike no. 10 was used by subscribers and the weather's mean temperature is no less than 62 degress Fahrenheit.,SELECT t1.id FROM trip as t1 inner JOIN weather as t2 ON t2.zip_code = t1.zip_code WHERE t1.bike_id = 10 AND t2.mean_temperature_f > 62 AND t1.subscription_type = 'Subscriber',"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);
Sample rows from `trip`:
4069, 174, 8/29/2013 9:08, 2nd at South Park, 64, 8/29/2013 9:11, 2nd at South Park, 64, 288, Subscriber, 94114
4073, 1067, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:42, San Francisco Caltrain 2 (330 Townsend), 69, 321, Subscriber, 94703
4074, 1131, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:43, San Francisco Caltrain 2 (330 Townsend), 69, 317, Subscriber, 94115

CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches REAL,
  mean_sea_level_pressure_inches REAL,
  min_sea_level_pressure_inches REAL,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches TEXT,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code TEXT
);
Sample rows from `weather`:
8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107
8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30.0, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107
8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30.0, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107

","CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat REAL,
  long REAL,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);
Sample rows from `station`:
2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013
3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013
4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013

CREATE TABLE `status` (
  station_id INTEGER,
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);
Sample rows from `status`:
2, 2, 25, 2013/08/29 12:06:01
2, 2, 25, 2013/08/29 12:07:01
2, 2, 25, 2013/08/29 12:08:01

CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);
Sample rows from `trip`:
4069, 174, 8/29/2013 9:08, 2nd at South Park, 64, 8/29/2013 9:11, 2nd at South Park, 64, 288, Subscriber, 94114
4073, 1067, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:42, San Francisco Caltrain 2 (330 Townsend), 69, 321, Subscriber, 94703
4074, 1131, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:43, San Francisco Caltrain 2 (330 Townsend), 69, 317, Subscriber, 94115

CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches REAL,
  mean_sea_level_pressure_inches REAL,
  min_sea_level_pressure_inches REAL,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches TEXT,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code TEXT
);
Sample rows from `weather`:
8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107
8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30.0, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107
8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30.0, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107

","trip, weather","trip.id, weather.zip_code, trip.zip_code, trip.bike_id, weather.mean_temperature_f, trip.subscription_type"
books,What is the name of the publisher of the book with the most pages?,SELECT t2.publisher_name FROM book as t1 inner JOIN publisher as t2 ON t1.publisher_id = t2.publisher_id ORDER BY t1.num_pages DESC LIMIT 1,"CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","book, publisher","publisher.publisher_name, book.publisher_id, publisher.publisher_id, book.num_pages"
retail_world,"Which products are being supplied by ""G'day, Mate""? List all of their names.","SELECT t1.productname FROM products as t1 inner JOIN suppliers as t2 ON t1.supplierid = t2.supplierid WHERE t2.companyname LIKE 'G%day, Mate'","CREATE TABLE `products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

","products, suppliers","products.productname, products.supplierid, suppliers.supplierid, suppliers.companyname"
talkingdata,How many active users were there in the event id 2?,SELECT COUNT(is_active) FROM app_events WHERE event_id = 2 AND is_active = 1,"CREATE TABLE `app_events` (
  event_id INTEGER PRIMARY KEY REFERENCES events(event_id),
  app_id INTEGER PRIMARY KEY,
  is_installed INTEGER,
  is_active INTEGER
);
Sample rows from `app_events`:
2, -8942695423876075857, 1, 0
2, -8022267440849930066, 1, 0
2, -5720078949152207372, 1, 0

","CREATE TABLE `app_all` (
  app_id INTEGER
);
Sample rows from `app_all`:
-9223281467940916832
-9222877069545393219
-9222785464897897681

CREATE TABLE `app_events` (
  event_id INTEGER PRIMARY KEY REFERENCES events(event_id),
  app_id INTEGER PRIMARY KEY,
  is_installed INTEGER,
  is_active INTEGER
);
Sample rows from `app_events`:
2, -8942695423876075857, 1, 0
2, -8022267440849930066, 1, 0
2, -5720078949152207372, 1, 0

CREATE TABLE `app_events_relevant` (
  event_id INTEGER PRIMARY KEY REFERENCES events_relevant(event_id),
  app_id INTEGER PRIMARY KEY REFERENCES app_all(app_id),
  is_installed INTEGER,
  is_active INTEGER
);
Sample rows from `app_events_relevant`:
2, -8942695423876075857, 1, 0
2, -8022267440849930066, 1, 0
2, -5720078949152207372, 1, 0

CREATE TABLE `app_labels` (
  app_id INTEGER REFERENCES app_all(app_id),
  label_id INTEGER REFERENCES label_categories(label_id)
);
Sample rows from `app_labels`:
7324884708820027918, 251
-4494216993218550286, 251
6058196446775239644, 406

CREATE TABLE `events` (
  event_id INTEGER,
  device_id INTEGER,
  timestamp DATETIME,
  longitude REAL,
  latitude REAL
);
Sample rows from `events`:
1, 29182687948017175, 2016-05-01 00:55:25.0, 121.0, 31.0
2, -6401643145415154744, 2016-05-01 00:54:12.0, 104.0, 31.0
3, -4833982096941402721, 2016-05-01 00:08:05.0, 107.0, 30.0

CREATE TABLE `events_relevant` (
  event_id INTEGER,
  device_id INTEGER REFERENCES gender_age(device_id),
  timestamp DATETIME,
  longitude REAL,
  latitude REAL
);
Sample rows from `events_relevant`:
2, None, -8942695423876075857, 1.0, 0.0
6, None, -8764672938472212518, 1.0, 1.0
7, None, -9050100410106163077, 1.0, 0.0

CREATE TABLE `gender_age` (
  device_id INTEGER REFERENCES phone_brand_device_model2(device_id),
  gender TEXT,
  age INTEGER,
  group TEXT
);
Sample rows from `gender_age`:
-9221086586254644858, M, 29, M29-31
-9221079146476055829, None, None, None
-9221066489596332354, M, 31, M29-31

CREATE TABLE `gender_age_test` (
  device_id INTEGER
);
Sample rows from `gender_age_test`:
-9223321966609553846
-9223042152723782980
-9222896629442493034

CREATE TABLE `gender_age_train` (
  device_id INTEGER,
  gender TEXT,
  age INTEGER,
  group TEXT
);
Sample rows from `gender_age_train`:
-9223067244542181226, M, 24, M23-26
-9222956879900151005, M, 36, M32-38
-9222754701995937853, M, 29, M29-31

CREATE TABLE `label_categories` (
  label_id INTEGER,
  category TEXT
);
Sample rows from `label_categories`:
1, None
2, game-game type
3, game-Game themes

CREATE TABLE `phone_brand_device_model2` (
  device_id INTEGER PRIMARY KEY,
  phone_brand TEXT PRIMARY KEY,
  device_model TEXT PRIMARY KEY
);
Sample rows from `phone_brand_device_model2`:
-9223321966609553846, 小米, 红米note
-9223067244542181226, vivo, Y19T
-9223042152723782980, 小米, MI 3

CREATE TABLE `sample_submission` (
  device_id INTEGER,
  F23- REAL,
  F24-26 REAL,
  F27-28 REAL,
  F29-32 REAL,
  F33-42 REAL,
  F43+ REAL,
  M22- REAL,
  M23-26 REAL,
  M27-28 REAL,
  M29-31 REAL,
  M32-38 REAL,
  M39+ REAL
);
Sample rows from `sample_submission`:
-9223321966609553846, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833
-9223042152723782980, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833
-9222896629442493034, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833

",app_events,"is_active, event_id"
donor,"How many donations does the project ""Look, Look, We Need a Nook!"" have?","SELECT SUM(t3.donation_total) FROM essays as t1 inner JOIN projects as t2 ON t1.projectid = t2.projectid inner JOIN donations as t3 ON t2.projectid = t3.projectid WHERE t1.title = 'Look, Look, We Need a Nook!'","CREATE TABLE `essays` (
  projectid TEXT,
  teacher_acctid TEXT,
  title TEXT,
  short_description TEXT,
  need_statement TEXT,
  essay TEXT
);
Sample rows from `essays`:
ffffc4f85b60efc5b52347df489d0238, c24011b20fc161ed02248e85beb59a90, iMath, It is imperative that teachers bring technology into the classroom, if students are going to be able to survive in the 21st Century. The classroom needs to be ever changing along with the outside world. The iMath project will help students by obtaining cl, My students need four iPods., I am a fourth year fifth grade math teacher. The school I teach in is a fifth and sixth grade public school and is a Title One school which means that 95% of our students get free lunch. Presently, I am in the process of completing a Masters degree in Tec
ffffac55ee02a49d1abc87ba6fc61135, 947066d0af47e0566f334566553dd6a6, Recording Rockin' Readers, Can you imagine having to translate everything you read into sign language and relate it to what you already know? Help us do just that by giving us the camera that will record our stories and..., My students need a camcorder. , Can you imagine having to translate everything you read into sign language and relate it to what you already know? Help us do just that by giving us the camera that will record our stories and interpretations! 
\n
\nMy students are all deaf or hard of hea
ffff97ed93720407d70a2787475932b0, 462270f5d5c212162fcab11afa2623cb, Kindergarten In Need of Important Materials!, It takes a special person to donate to a group of children they don't know, especially in these hard economic times, but my students are worth it.  They deserve to have the proper supplies to ensure that their long education gets off to the right start, s, My students need 17 assorted classroom materials to ensure that they can learn as much as possible this year., Hi. I teach a wonderful group of 4-5 year old Kindergarten students.  They come in wanting and willing to learn new and exciting things each and every day. I work hard to ensure that my students get the most out of the entire school year. 
\n
\nFor the mo

CREATE TABLE `projects` (
  projectid TEXT PRIMARY KEY,
  teacher_acctid TEXT,
  schoolid TEXT,
  school_ncesid TEXT,
  school_latitude REAL,
  school_longitude REAL,
  school_city TEXT,
  school_state TEXT,
  school_zip INTEGER,
  school_metro TEXT,
  school_district TEXT,
  school_county TEXT,
  school_charter TEXT,
  school_magnet TEXT,
  school_year_round TEXT,
  school_nlns TEXT,
  school_kipp TEXT,
  school_charter_ready_promise TEXT,
  teacher_prefix TEXT,
  teacher_teach_for_america TEXT,
  teacher_ny_teaching_fellow TEXT,
  primary_focus_subject TEXT,
  primary_focus_area TEXT,
  secondary_focus_subject TEXT,
  secondary_focus_area TEXT,
  resource_type TEXT,
  poverty_level TEXT,
  grade_level TEXT,
  fulfillment_labor_materials REAL,
  total_price_excluding_optional_support REAL,
  total_price_including_optional_support REAL,
  students_reached INTEGER,
  eligible_double_your_impact_match TEXT,
  eligible_almost_home_match TEXT,
  date_posted DATE
);
Sample rows from `projects`:
316ed8fb3b81402ff6ac8f721bb31192, 42d43fa6f37314365d08692e08680973, c0e6ce89b244764085691a1b8e28cb81, 063627006187, 36.57634, -119.608713, Selma, CA, 93662, None, Selma Unified Sch District, Fresno, f, f, f, f, f, f, Mrs., f, f, Literature & Writing, Literacy & Language, College & Career Prep, Applied Learning, Books, highest poverty, Grades 6-8, 30.0, 555.81, 653.89, 32, f, f, 2014-05-12
90de744e368a7e4883223ca49318ae30, 864eb466462bf704bf7a16a585ef296a, d711e47810900c96f26a5d0be30c446d, 483702008193, 32.911179, -96.72364, Dallas, TX, 75243, urban, Richardson Ind School District, Dallas, f, f, f, f, f, f, Mrs., f, f, Literacy, Literacy & Language, ESL, Literacy & Language, Books, highest poverty, Grades PreK-2, 30.0, 296.47, 348.79, 22, f, f, 2014-05-12
32943bb1063267de6ed19fc0ceb4b9a7, 37f85135259ece793213aca9d8765542, 665c3613013ba0a66e3a2a26b89f1b68, 410327000109, 45.166039, -122.414576, Colton, OR, 97017, rural, Colton School District 53, Clackamas, f, f, f, f, f, f, Mr., f, f, Literacy, Literacy & Language, Mathematics, Math & Science, Technology, high poverty, Grades PreK-2, 30.0, 430.89, 506.93, 17, f, f, 2014-05-11

CREATE TABLE `donations` (
  donationid TEXT PRIMARY KEY,
  projectid TEXT REFERENCES projects(projectid),
  donor_acctid TEXT,
  donor_city TEXT,
  donor_state TEXT,
  donor_zip TEXT,
  is_teacher_acct TEXT,
  donation_timestamp DATETIME,
  donation_to_project REAL,
  donation_optional_support REAL,
  donation_total REAL,
  dollar_amount TEXT,
  donation_included_optional_support TEXT,
  payment_method TEXT,
  payment_included_acct_credit TEXT,
  payment_included_campaign_gift_card TEXT,
  payment_included_web_purchased_gift_card TEXT,
  payment_was_promo_matched TEXT,
  via_giving_page TEXT,
  for_honoree TEXT,
  donation_message TEXT
);
Sample rows from `donations`:
431d720bc3dfd75ae445a5eaa0b0638d, ffffac55ee02a49d1abc87ba6fc61135, 22cbc920c9b5fa08dfb331422f5926b5, Peachtree City, GA, 30269, f, 2011-08-25 14:27:34.807, 42.5, 7.5, 50.0, 10_to_100, t, no_cash_received, f, t, f, f, f, f, I gave to this project because I support the efforts of this teacher with each of her students, and her school, Suder Elementary School.
fcfedba1c8a0ba77d280cace80a909f6, ffffac55ee02a49d1abc87ba6fc61135, 521f1830a77c9dbbf8119d99c6206a16, None, GA, None, f, 2011-11-04 07:54:21.552, 26.83, 4.73, 31.56, 10_to_100, t, creditcard, f, t, f, f, f, f, I donated because I want to support kids in Georgia.
3fa95d29986aa6f401c6719ced3a3ce7, ffffac55ee02a49d1abc87ba6fc61135, 1e0a63fc8141c7ba26b8b44ca0871b90, Rockville, MD, 20853, f, 2011-11-02 22:53:53.019, 55.35, 0.0, 55.35, 10_to_100, f, no_cash_received, t, f, f, f, t, f, The Spark's 'pet' projects include those which support deaf students.  With just a few days left, the Spark's donors fund half of what remains, and challenge others to pull this project through to fruition.

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `essays` (
  projectid TEXT,
  teacher_acctid TEXT,
  title TEXT,
  short_description TEXT,
  need_statement TEXT,
  essay TEXT
);
Sample rows from `essays`:
ffffc4f85b60efc5b52347df489d0238, c24011b20fc161ed02248e85beb59a90, iMath, It is imperative that teachers bring technology into the classroom, if students are going to be able to survive in the 21st Century. The classroom needs to be ever changing along with the outside world. The iMath project will help students by obtaining cl, My students need four iPods., I am a fourth year fifth grade math teacher. The school I teach in is a fifth and sixth grade public school and is a Title One school which means that 95% of our students get free lunch. Presently, I am in the process of completing a Masters degree in Tec
ffffac55ee02a49d1abc87ba6fc61135, 947066d0af47e0566f334566553dd6a6, Recording Rockin' Readers, Can you imagine having to translate everything you read into sign language and relate it to what you already know? Help us do just that by giving us the camera that will record our stories and..., My students need a camcorder. , Can you imagine having to translate everything you read into sign language and relate it to what you already know? Help us do just that by giving us the camera that will record our stories and interpretations! 
\n
\nMy students are all deaf or hard of hea
ffff97ed93720407d70a2787475932b0, 462270f5d5c212162fcab11afa2623cb, Kindergarten In Need of Important Materials!, It takes a special person to donate to a group of children they don't know, especially in these hard economic times, but my students are worth it.  They deserve to have the proper supplies to ensure that their long education gets off to the right start, s, My students need 17 assorted classroom materials to ensure that they can learn as much as possible this year., Hi. I teach a wonderful group of 4-5 year old Kindergarten students.  They come in wanting and willing to learn new and exciting things each and every day. I work hard to ensure that my students get the most out of the entire school year. 
\n
\nFor the mo

CREATE TABLE `projects` (
  projectid TEXT PRIMARY KEY,
  teacher_acctid TEXT,
  schoolid TEXT,
  school_ncesid TEXT,
  school_latitude REAL,
  school_longitude REAL,
  school_city TEXT,
  school_state TEXT,
  school_zip INTEGER,
  school_metro TEXT,
  school_district TEXT,
  school_county TEXT,
  school_charter TEXT,
  school_magnet TEXT,
  school_year_round TEXT,
  school_nlns TEXT,
  school_kipp TEXT,
  school_charter_ready_promise TEXT,
  teacher_prefix TEXT,
  teacher_teach_for_america TEXT,
  teacher_ny_teaching_fellow TEXT,
  primary_focus_subject TEXT,
  primary_focus_area TEXT,
  secondary_focus_subject TEXT,
  secondary_focus_area TEXT,
  resource_type TEXT,
  poverty_level TEXT,
  grade_level TEXT,
  fulfillment_labor_materials REAL,
  total_price_excluding_optional_support REAL,
  total_price_including_optional_support REAL,
  students_reached INTEGER,
  eligible_double_your_impact_match TEXT,
  eligible_almost_home_match TEXT,
  date_posted DATE
);
Sample rows from `projects`:
316ed8fb3b81402ff6ac8f721bb31192, 42d43fa6f37314365d08692e08680973, c0e6ce89b244764085691a1b8e28cb81, 063627006187, 36.57634, -119.608713, Selma, CA, 93662, None, Selma Unified Sch District, Fresno, f, f, f, f, f, f, Mrs., f, f, Literature & Writing, Literacy & Language, College & Career Prep, Applied Learning, Books, highest poverty, Grades 6-8, 30.0, 555.81, 653.89, 32, f, f, 2014-05-12
90de744e368a7e4883223ca49318ae30, 864eb466462bf704bf7a16a585ef296a, d711e47810900c96f26a5d0be30c446d, 483702008193, 32.911179, -96.72364, Dallas, TX, 75243, urban, Richardson Ind School District, Dallas, f, f, f, f, f, f, Mrs., f, f, Literacy, Literacy & Language, ESL, Literacy & Language, Books, highest poverty, Grades PreK-2, 30.0, 296.47, 348.79, 22, f, f, 2014-05-12
32943bb1063267de6ed19fc0ceb4b9a7, 37f85135259ece793213aca9d8765542, 665c3613013ba0a66e3a2a26b89f1b68, 410327000109, 45.166039, -122.414576, Colton, OR, 97017, rural, Colton School District 53, Clackamas, f, f, f, f, f, f, Mr., f, f, Literacy, Literacy & Language, Mathematics, Math & Science, Technology, high poverty, Grades PreK-2, 30.0, 430.89, 506.93, 17, f, f, 2014-05-11

CREATE TABLE `donations` (
  donationid TEXT PRIMARY KEY,
  projectid TEXT REFERENCES projects(projectid),
  donor_acctid TEXT,
  donor_city TEXT,
  donor_state TEXT,
  donor_zip TEXT,
  is_teacher_acct TEXT,
  donation_timestamp DATETIME,
  donation_to_project REAL,
  donation_optional_support REAL,
  donation_total REAL,
  dollar_amount TEXT,
  donation_included_optional_support TEXT,
  payment_method TEXT,
  payment_included_acct_credit TEXT,
  payment_included_campaign_gift_card TEXT,
  payment_included_web_purchased_gift_card TEXT,
  payment_was_promo_matched TEXT,
  via_giving_page TEXT,
  for_honoree TEXT,
  donation_message TEXT
);
Sample rows from `donations`:
431d720bc3dfd75ae445a5eaa0b0638d, ffffac55ee02a49d1abc87ba6fc61135, 22cbc920c9b5fa08dfb331422f5926b5, Peachtree City, GA, 30269, f, 2011-08-25 14:27:34.807, 42.5, 7.5, 50.0, 10_to_100, t, no_cash_received, f, t, f, f, f, f, I gave to this project because I support the efforts of this teacher with each of her students, and her school, Suder Elementary School.
fcfedba1c8a0ba77d280cace80a909f6, ffffac55ee02a49d1abc87ba6fc61135, 521f1830a77c9dbbf8119d99c6206a16, None, GA, None, f, 2011-11-04 07:54:21.552, 26.83, 4.73, 31.56, 10_to_100, t, creditcard, f, t, f, f, f, f, I donated because I want to support kids in Georgia.
3fa95d29986aa6f401c6719ced3a3ce7, ffffac55ee02a49d1abc87ba6fc61135, 1e0a63fc8141c7ba26b8b44ca0871b90, Rockville, MD, 20853, f, 2011-11-02 22:53:53.019, 55.35, 0.0, 55.35, 10_to_100, f, no_cash_received, t, f, f, f, t, f, The Spark's 'pet' projects include those which support deaf students.  With just a few days left, the Spark's donors fund half of what remains, and challenge others to pull this project through to fruition.

CREATE TABLE `resources` (
  resourceid TEXT PRIMARY KEY,
  projectid TEXT REFERENCES projects(projectid),
  vendorid INTEGER,
  vendor_name TEXT,
  project_resource_type TEXT,
  item_name TEXT,
  item_number TEXT,
  item_unit_price REAL,
  item_quantity INTEGER
);
Sample rows from `resources`:
8a1c1c45bc30d065061912fd9114fcf3, ffffc4f85b60efc5b52347df489d0238, 430, Woodwind and Brasswind, Technology, iPod nano 4th Gen 8GB (Black), 249995.001, 149.0, 4
015d2c4935c50427964a12dc3f584091, ffffac55ee02a49d1abc87ba6fc61135, 82, Best Buy for Business, Technology, Sony bloggie MHS-FS1 - camcorder - internal flash memory, BB11216668, 148.0, 1
26a02944b2f0c25f9abdeacca3ede3ee, ffff97ed93720407d70a2787475932b0, 767, Lakeshore Learning Materials, Supplies, VX748 - Best-Buy Jumbo Crayons - 12-Color Box, VX748, 69.95, 1

","essays, projects, donations","donations.donation_total, essays.projectid, projects.projectid, donations.projectid, essays.title"
human_resources,What is the full office location address where most of the employees work at?,"SELECT t2.address, t2.locationcity, t2.state, t2.zipcode FROM employee as t1  inner JOIN location as t2  ON t1.locationid = t2.locationid GROUP BY t2.address, t2.locationcity, t2.state, t2.zipcode ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE `employee` (
  ssn TEXT PRIMARY KEY,
  lastname TEXT,
  firstname TEXT,
  hiredate TEXT,
  salary TEXT,
  gender TEXT,
  performance TEXT,
  positionID INTEGER REFERENCES position(positionID),
  locationID INTEGER REFERENCES location(locationID)
);
Sample rows from `employee`:
000-01-0000, Milgrom, Patricia, 10/1/04, US$57,500.00, F, Average, 2, 2
000-02-2222, Adams, Sandy, 1/15/01, US$19,500.00, F, Average, 3, 1
109-87-6543, Wood, Emily, 3/12/97, US$69,000.00, F, Average, 2, 5

CREATE TABLE `location` (
  locationID INTEGER,
  locationcity TEXT,
  address TEXT,
  state TEXT,
  zipcode INTEGER,
  officephone TEXT
);
Sample rows from `location`:
1, Atlanta, 450 Peachtree Rd, GA, 30316, (404)333-5555
2, Boston, 3 Commons Blvd, MA, 2190, (617)123-4444
3, Chicago, 500 Loop Highway, IL, 60620, (312)444-6666

","CREATE TABLE `location` (
  locationID INTEGER,
  locationcity TEXT,
  address TEXT,
  state TEXT,
  zipcode INTEGER,
  officephone TEXT
);
Sample rows from `location`:
1, Atlanta, 450 Peachtree Rd, GA, 30316, (404)333-5555
2, Boston, 3 Commons Blvd, MA, 2190, (617)123-4444
3, Chicago, 500 Loop Highway, IL, 60620, (312)444-6666

CREATE TABLE `position` (
  positionID INTEGER,
  positiontitle TEXT,
  educationrequired TEXT,
  minsalary TEXT,
  maxsalary TEXT
);
Sample rows from `position`:
1, Account Representative, 4 year degree, US$25,000.00, US$75,000.00
2, Manager, 4 year degree, US$50,000.00, US$150,000.00
3, Trainee, 2 year degree, US$18,000.00, US$25,000.00

CREATE TABLE `employee` (
  ssn TEXT PRIMARY KEY,
  lastname TEXT,
  firstname TEXT,
  hiredate TEXT,
  salary TEXT,
  gender TEXT,
  performance TEXT,
  positionID INTEGER REFERENCES position(positionID),
  locationID INTEGER REFERENCES location(locationID)
);
Sample rows from `employee`:
000-01-0000, Milgrom, Patricia, 10/1/04, US$57,500.00, F, Average, 2, 2
000-02-2222, Adams, Sandy, 1/15/01, US$19,500.00, F, Average, 3, 1
109-87-6543, Wood, Emily, 3/12/97, US$69,000.00, F, Average, 2, 5

","employee, location","location.address, location.locationcity, location.state, location.zipcode, employee.locationid, location.locationid"
food_inspection,Which business had the lowest score for the unscheduled routine inspection on 2016/9/26? Give the name of the business.,SELECT t2.name FROM inspections as t1 inner JOIN businesses as t2 ON t1.business_id = t2.business_id WHERE score = ( SELECT MIN(score) FROM inspections WHERE `date` = '2016-09-26' AND type = 'Routine - Unscheduled' ) AND t1.`date` = '2016-09-26' AND t1.type = 'Routine - Unscheduled',"CREATE TABLE `inspections` (
  business_id INTEGER REFERENCES businesses(business_id),
  score INTEGER,
  date DATE,
  type TEXT
);
Sample rows from `inspections`:
10, 92, 2014-01-14, Routine - Unscheduled
10, None, 2014-01-24, Reinspection/Followup
10, 94, 2014-07-29, Routine - Unscheduled

CREATE TABLE `businesses` (
  business_id INTEGER,
  name TEXT,
  address TEXT,
  city TEXT,
  postal_code TEXT,
  latitude REAL,
  longitude REAL,
  phone_number INTEGER,
  tax_code TEXT,
  business_certificate INTEGER,
  application_date DATE,
  owner_name TEXT,
  owner_address TEXT,
  owner_city TEXT,
  owner_state TEXT,
  owner_zip TEXT
);
Sample rows from `businesses`:
10, Tiramisu Kitchen, 033 Belden Pl, San Francisco, 94104, 37.7911, -122.404, None, H24, 779059, None, Tiramisu LLC, 33 Belden St, San Francisco, CA, 94104
24, OMNI S.F. Hotel - 2nd Floor Pantry, 500 California St, 2nd  Floor, San Francisco, 94104, 37.7929, -122.403, None, H24, 352312, None, OMNI San Francisco Hotel Corp, 500 California St, 2nd Floor, San Francisco, CA, 94104
31, Norman's Ice Cream and Freezes, 2801 Leavenworth St, San Francisco, 94133, 37.8072, -122.419, None, H24, 346882, None, Norman Antiforda, 2801 Leavenworth St, San Francisco, CA, 94133

","CREATE TABLE `businesses` (
  business_id INTEGER,
  name TEXT,
  address TEXT,
  city TEXT,
  postal_code TEXT,
  latitude REAL,
  longitude REAL,
  phone_number INTEGER,
  tax_code TEXT,
  business_certificate INTEGER,
  application_date DATE,
  owner_name TEXT,
  owner_address TEXT,
  owner_city TEXT,
  owner_state TEXT,
  owner_zip TEXT
);
Sample rows from `businesses`:
10, Tiramisu Kitchen, 033 Belden Pl, San Francisco, 94104, 37.7911, -122.404, None, H24, 779059, None, Tiramisu LLC, 33 Belden St, San Francisco, CA, 94104
24, OMNI S.F. Hotel - 2nd Floor Pantry, 500 California St, 2nd  Floor, San Francisco, 94104, 37.7929, -122.403, None, H24, 352312, None, OMNI San Francisco Hotel Corp, 500 California St, 2nd Floor, San Francisco, CA, 94104
31, Norman's Ice Cream and Freezes, 2801 Leavenworth St, San Francisco, 94133, 37.8072, -122.419, None, H24, 346882, None, Norman Antiforda, 2801 Leavenworth St, San Francisco, CA, 94133

CREATE TABLE `inspections` (
  business_id INTEGER REFERENCES businesses(business_id),
  score INTEGER,
  date DATE,
  type TEXT
);
Sample rows from `inspections`:
10, 92, 2014-01-14, Routine - Unscheduled
10, None, 2014-01-24, Reinspection/Followup
10, 94, 2014-07-29, Routine - Unscheduled

CREATE TABLE `violations` (
  business_id INTEGER REFERENCES businesses(business_id),
  date DATE,
  violation_type_id TEXT,
  risk_category TEXT,
  description TEXT
);
Sample rows from `violations`:
10, 2014-07-29, 103129, Moderate Risk, Insufficient hot water or running water
10, 2014-07-29, 103144, Low Risk, Unapproved or unmaintained equipment or utensils
10, 2014-01-14, 103119, Moderate Risk, Inadequate and inaccessible handwashing facilities

","inspections, businesses","businesses.name, inspections.business_id, businesses.business_id, score, date, inspections.date, inspections.type"
world,Give the population of the country where Queimados city belongs.,SELECT t2.population FROM city as t1 inner JOIN country as t2 ON t1.countrycode = t2.code WHERE t1.name = 'Queimados',"CREATE TABLE `city` (
  ID INTEGER,
  Name TEXT,
  CountryCode TEXT REFERENCES Country(Code),
  District TEXT,
  Population INTEGER
);
Sample rows from `city`:
1, Kabul, AFG, Kabol, 1780000
2, Qandahar, AFG, Qandahar, 237500
3, Herat, AFG, Herat, 186800

CREATE TABLE `country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
City, 4079

CREATE TABLE `City` (
  ID INTEGER,
  Name TEXT,
  CountryCode TEXT REFERENCES Country(Code),
  District TEXT,
  Population INTEGER
);
Sample rows from `City`:
1, Kabul, AFG, Kabol, 1780000
2, Qandahar, AFG, Qandahar, 237500
3, Herat, AFG, Herat, 186800

CREATE TABLE `Country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `Country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

CREATE TABLE `CountryLanguage` (
  CountryCode TEXT PRIMARY KEY REFERENCES Country(Code),
  Language TEXT PRIMARY KEY,
  IsOfficial TEXT,
  Percentage REAL
);
Sample rows from `CountryLanguage`:
ABW, Dutch, T, 5.3
ABW, English, F, 9.5
ABW, Papiamento, F, 76.7

","city, country","country.population, city.countrycode, country.code, city.name"
public_review_platform,"State the number of actively running Yelp businesses in ""Tolleson"".",SELECT COUNT(business_id) FROM business WHERE city LIKE 'Tolleson' AND active LIKE 'TRUE',"CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

",business,"business_id, city, active"
retails,What proportion of suppliers are from Asia?,"SELECT cast(SUM(iif(t1.r_name = 'ASIA', 1, 0)) AS real) * 100 / COUNT(t1.r_regionkey) FROM region AS t1 inner JOIN nation AS t2 ON t1.r_regionkey = t2.n_regionkey inner JOIN supplier AS t3 ON t2.n_nationkey = t3.s_nationkey","CREATE TABLE `region` (
  r_regionkey INTEGER,
  r_name TEXT,
  r_comment TEXT
);
Sample rows from `region`:
0, AFRICA, asymptotes sublate after the r
1, AMERICA, requests affix quickly final tithes. blithely even packages above the a
2, ASIA, accounts cajole carefully according to the carefully exp

CREATE TABLE `nation` (
  n_nationkey INTEGER,
  n_name TEXT,
  n_regionkey INTEGER REFERENCES region(r_regionkey),
  n_comment TEXT
);
Sample rows from `nation`:
0, ALGERIA, 0, slyly express pinto beans cajole idly. deposits use blithely unusual packages? fluffily final accounts x-r
1, ARGENTINA, 1, instructions detect blithely stealthily pending packages
2, BRAZIL, 1, blithely unusual deposits are quickly--

CREATE TABLE `supplier` (
  s_suppkey INTEGER,
  s_nationkey INTEGER REFERENCES nation(n_nationkey),
  s_comment TEXT,
  s_name TEXT,
  s_address TEXT,
  s_phone TEXT,
  s_acctbal REAL
);
Sample rows from `supplier`:
1, 13, blithely final pearls are. instructions thra, Supplier#000000001, ,wWs4pnykQOFl8mgVCU8EZMXqZs1w, 800-807-9579, 3082.86
2, 5, requests integrate fluffily. fluffily ironic deposits wake. bold, Supplier#000000002, WkXT6MSAJrp4qWq3W9N, 348-617-6055, 3009.73
3, 22, carefully express ideas shall have to unwin, Supplier#000000003, KjUqa42JEHaRDVQTHV6Yq2h, 471-986-9888, 9159.78

","CREATE TABLE `customer` (
  c_custkey INTEGER,
  c_mktsegment TEXT,
  c_nationkey INTEGER REFERENCES nation(n_nationkey),
  c_name TEXT,
  c_address TEXT,
  c_phone TEXT,
  c_acctbal REAL,
  c_comment TEXT
);
Sample rows from `customer`:
1, BUILDING, 8, Customer#000000001, KwX3hMHjZ6, 937-241-3198, 3560.03, ironic excuses detect slyly silent requests. requests according to the exc
2, MACHINERY, 16, Customer#000000002, ioUn,eqTTXOdo, 906-965-7556, 7550.21, final express accounts mold slyly. ironic accounts cajole! quickly express a
3, FURNITURE, 11, Customer#000000003, YddJqmIdouNT9Yj, 328-750-7603, -926.96, carefully express foxes sleep carefully. pending platelets sleep thinly for t

CREATE TABLE `lineitem` (
  l_shipdate DATE,
  l_orderkey INTEGER PRIMARY KEY REFERENCES orders(o_orderkey),
  l_discount REAL,
  l_extendedprice REAL,
  l_suppkey INTEGER REFERENCES partsupp(ps_suppkey),
  l_quantity INTEGER,
  l_returnflag TEXT,
  l_partkey INTEGER REFERENCES partsupp(ps_partkey),
  l_linestatus TEXT,
  l_tax REAL,
  l_commitdate DATE,
  l_receiptdate DATE,
  l_shipmode TEXT,
  l_linenumber INTEGER PRIMARY KEY,
  l_shipinstruct TEXT,
  l_comment TEXT
);
Sample rows from `lineitem`:
1995-08-16, 1, 0.1, 58303.08, 6296, 33, N, 98768, O, 0.06, 1995-07-12, 1995-09-14, RAIL, 1, NONE, carefully bo
1995-08-13, 1, 0.09, 16947.7, 8776, 10, N, 23771, O, 0.08, 1995-07-09, 1995-08-27, TRUCK, 2, TAKE BACK RETURN, blithely regular pac
1995-06-17, 1, 0.1, 63642.9, 3859, 34, N, 113858, O, 0.08, 1995-05-22, 1995-06-30, SHIP, 3, COLLECT COD, ironic accounts sleep furiously silen

CREATE TABLE `nation` (
  n_nationkey INTEGER,
  n_name TEXT,
  n_regionkey INTEGER REFERENCES region(r_regionkey),
  n_comment TEXT
);
Sample rows from `nation`:
0, ALGERIA, 0, slyly express pinto beans cajole idly. deposits use blithely unusual packages? fluffily final accounts x-r
1, ARGENTINA, 1, instructions detect blithely stealthily pending packages
2, BRAZIL, 1, blithely unusual deposits are quickly--

CREATE TABLE `orders` (
  o_orderdate DATE,
  o_orderkey INTEGER,
  o_custkey INTEGER REFERENCES customer(c_custkey),
  o_orderpriority TEXT,
  o_shippriority INTEGER,
  o_clerk TEXT,
  o_orderstatus TEXT,
  o_totalprice REAL,
  o_comment TEXT
);
Sample rows from `orders`:
1995-04-19, 1, 73100, 4-NOT SPECIFIED, 0, Clerk#000000916, P, 203198.56, final packages sleep blithely packa
1996-11-04, 2, 92861, 1-URGENT, 0, Clerk#000000373, O, 317719.99, final excuses about the ironic even deposits detect express request
1992-02-15, 3, 44875, 1-URGENT, 0, Clerk#000000485, F, 146674.98, final final deposits cajole foxes. blithely pendin

CREATE TABLE `part` (
  p_partkey INTEGER,
  p_type TEXT,
  p_size INTEGER,
  p_brand TEXT,
  p_name TEXT,
  p_container TEXT,
  p_mfgr TEXT,
  p_retailprice REAL,
  p_comment TEXT
);
Sample rows from `part`:
1, LARGE PLATED TIN, 31, Brand#43, burlywood plum powder puff mint, LG BAG, Manufacturer#4, 901.0, blithely busy reque
2, LARGE POLISHED STEEL, 4, Brand#55, hot spring dodger dim light, LG CASE, Manufacturer#5, 902.0, even ironic requests s
3, STANDARD PLATED COPPER, 30, Brand#53, dark slate grey steel misty, WRAP CASE, Manufacturer#5, 903.0, slyly ironic fox

CREATE TABLE `partsupp` (
  ps_partkey INTEGER PRIMARY KEY REFERENCES part(p_partkey),
  ps_suppkey INTEGER PRIMARY KEY REFERENCES supplier(s_suppkey),
  ps_supplycost REAL,
  ps_availqty INTEGER,
  ps_comment TEXT
);
Sample rows from `partsupp`:
1, 2, 400.75, 1111, carefully ironic deposits use against the carefully unusual accounts. slyly silent platelets nag quickly even
1, 2502, 702.61, 3999, slyly regular accounts serve carefully. asymptotes after the slyly even instructions cajole quickly ironic requests. pending dugouts about the slyly 
1, 5002, 383.95, 7411, carefully special ideas are slyly. slyly ironic epitaphs use pending pending foxes. furiously express pinto beans lose quiet even requests: special final packages ar

CREATE TABLE `region` (
  r_regionkey INTEGER,
  r_name TEXT,
  r_comment TEXT
);
Sample rows from `region`:
0, AFRICA, asymptotes sublate after the r
1, AMERICA, requests affix quickly final tithes. blithely even packages above the a
2, ASIA, accounts cajole carefully according to the carefully exp

CREATE TABLE `supplier` (
  s_suppkey INTEGER,
  s_nationkey INTEGER REFERENCES nation(n_nationkey),
  s_comment TEXT,
  s_name TEXT,
  s_address TEXT,
  s_phone TEXT,
  s_acctbal REAL
);
Sample rows from `supplier`:
1, 13, blithely final pearls are. instructions thra, Supplier#000000001, ,wWs4pnykQOFl8mgVCU8EZMXqZs1w, 800-807-9579, 3082.86
2, 5, requests integrate fluffily. fluffily ironic deposits wake. bold, Supplier#000000002, WkXT6MSAJrp4qWq3W9N, 348-617-6055, 3009.73
3, 22, carefully express ideas shall have to unwin, Supplier#000000003, KjUqa42JEHaRDVQTHV6Yq2h, 471-986-9888, 9159.78

","region, nation, supplier","region.r_name, region.r_regionkey, nation.n_regionkey, nation.n_nationkey, supplier.s_nationkey"
menu,"How many pages are there in the ""Emil Kuehn"" menu?",SELECT SUM(case when t1.name = 'Emil Kuehn' then 1 else 0 end) FROM menu as t1 inner JOIN menuPage as t2 ON t1.id = t2.menu_id,"CREATE TABLE `menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

CREATE TABLE `menuPage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `menuPage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

","CREATE TABLE `Dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `Dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

CREATE TABLE `Menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `Menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

CREATE TABLE `MenuPage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `MenuPage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

CREATE TABLE `MenuItem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `MenuItem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

","menu, menuPage","menu.name, menu.id, menuPage.menu_id"
genes,How many non-essential genes are located in the nucleus?,SELECT COUNT(t1.geneid) FROM genes as t1 inner JOIN classification as t2 ON t1.geneid = t2.geneid WHERE t2.localization = 'nucleus' AND t1.essential = 'Non-essential',"CREATE TABLE `genes` (
  GeneID TEXT REFERENCES Classification(GeneID),
  Essential TEXT,
  Class TEXT,
  Complex TEXT,
  Phenotype TEXT,
  Motif TEXT,
  Chromosome INTEGER,
  Function TEXT,
  Localization TEXT
);
Sample rows from `genes`:
G234064, Essential, GTP/GDP-exchange factors (GEFs), Translation complexes, ?, PS00824, 1, CELLULAR ORGANIZATION (proteins are localized to the corresponding organelle), cytoplasm
G234064, Essential, GTP/GDP-exchange factors (GEFs), Translation complexes, ?, PS00824, 1, PROTEIN SYNTHESIS, cytoplasm
G234064, Essential, GTP/GDP-exchange factors (GEFs), Translation complexes, ?, PS00825, 1, CELLULAR ORGANIZATION (proteins are localized to the corresponding organelle), cytoplasm

CREATE TABLE `classification` (
  GeneID TEXT PRIMARY KEY,
  Localization TEXT
);
Sample rows from `classification`:
G234064, cytoplasm
G234065, cytoplasm
G234070, cytoskeleton

","CREATE TABLE `Classification` (
  GeneID TEXT PRIMARY KEY,
  Localization TEXT
);
Sample rows from `Classification`:
G234064, cytoplasm
G234065, cytoplasm
G234070, cytoskeleton

CREATE TABLE `Genes` (
  GeneID TEXT REFERENCES Classification(GeneID),
  Essential TEXT,
  Class TEXT,
  Complex TEXT,
  Phenotype TEXT,
  Motif TEXT,
  Chromosome INTEGER,
  Function TEXT,
  Localization TEXT
);
Sample rows from `Genes`:
G234064, Essential, GTP/GDP-exchange factors (GEFs), Translation complexes, ?, PS00824, 1, CELLULAR ORGANIZATION (proteins are localized to the corresponding organelle), cytoplasm
G234064, Essential, GTP/GDP-exchange factors (GEFs), Translation complexes, ?, PS00824, 1, PROTEIN SYNTHESIS, cytoplasm
G234064, Essential, GTP/GDP-exchange factors (GEFs), Translation complexes, ?, PS00825, 1, CELLULAR ORGANIZATION (proteins are localized to the corresponding organelle), cytoplasm

CREATE TABLE `Interactions` (
  GeneID1 TEXT PRIMARY KEY REFERENCES Classification(GeneID),
  GeneID2 TEXT PRIMARY KEY REFERENCES Classification(GeneID),
  Type TEXT,
  Expression_Corr REAL
);
Sample rows from `Interactions`:
G234064, G234126, Genetic-Physical, 0.914095071
G234064, G235065, Genetic-Physical, 0.751584888
G234065, G234371, Genetic, 0.823773738

","genes, classification","genes.geneid, classification.geneid, classification.localization, genes.essential"
world_development_indicators,Name the country with fastest growth in adjusted net national income in 1980 and state the currency used by this country.,"SELECT t2.countryname, t1.currencyunit FROM country as t1 inner JOIN indicators as t2 ON t1.countryCode = t2.countryCode WHERE t2.indicatorname = 'Adjusted net national income (annual % growth)' AND t2.year = 1980 AND t1.currencyunit != '' ORDER BY t2.value DESC LIMIT 1","CREATE TABLE `country` (
  CountryCode TEXT PRIMARY KEY,
  ShortName TEXT,
  TableName TEXT,
  LongName TEXT,
  Alpha2Code TEXT,
  CurrencyUnit TEXT,
  SpecialNotes TEXT,
  Region TEXT,
  IncomeGroup TEXT,
  Wb2Code TEXT,
  NationalAccountsBaseYear TEXT,
  NationalAccountsReferenceYear TEXT,
  SnaPriceValuation TEXT,
  LendingCategory TEXT,
  OtherGroups TEXT,
  SystemOfNationalAccounts TEXT,
  AlternativeConversionFactor TEXT,
  PppSurveyYear TEXT,
  BalanceOfPaymentsManualInUse TEXT,
  ExternalDebtReportingStatus TEXT,
  SystemOfTrade TEXT,
  GovernmentAccountingConcept TEXT,
  ImfDataDisseminationStandard TEXT,
  LatestPopulationCensus TEXT,
  LatestHouseholdSurvey TEXT,
  SourceOfMostRecentIncomeAndExpenditureData TEXT,
  VitalRegistrationComplete TEXT,
  LatestAgriculturalCensus TEXT,
  LatestIndustrialData INTEGER,
  LatestTradeData INTEGER,
  LatestWaterWithdrawalData INTEGER
);
Sample rows from `country`:
AFG, Afghanistan, Afghanistan, Islamic State of Afghanistan, AF, Afghan afghani, Fiscal year end: March 20; reporting period for national accounts data: FY (from 2013 are CY). National accounts data are sourced from the IMF and differ from the Central Statistics Organization numbers due to exclusion of the opium economy., South Asia, Low income, AF, 2002/03, , Value added at basic prices (VAB), IDA, HIPC, Country uses the 1993 System of National Accounts methodology., , , , Actual, General trade system, Consolidated central government, General Data Dissemination System (GDDS), 1979, Multiple Indicator Cluster Survey (MICS), 2010/11, Integrated household survey (IHS), 2008, , 2013/14, None, 2013, 2000
ALB, Albania, Albania, Republic of Albania, AL, Albanian lek, , Europe & Central Asia, Upper middle income, AL, Original chained constant price data are rescaled., 1996, Value added at basic prices (VAB), IBRD, , Country uses the 1993 System of National Accounts methodology., , Rolling, IMF Balance of Payments Manual, 6th edition., Actual, General trade system, Budgetary central government, General Data Dissemination System (GDDS), 2011, Demographic and Health Survey (DHS), 2008/09, Living Standards Measurement Study Survey (LSMS), 2011/12, Yes, 2012, 2011, 2013, 2006
DZA, Algeria, Algeria, People's Democratic Republic of Algeria, DZ, Algerian dinar, , Middle East & North Africa, Upper middle income, DZ, 1980, , Value added at basic prices (VAB), IBRD, , Country uses the 1968 System of National Accounts methodology., , 2011, IMF Balance of Payments Manual, 6th edition., Actual, Special trade system, Budgetary central government, General Data Dissemination System (GDDS), 2008, Multiple Indicator Cluster Survey (MICS), 2012, Integrated household survey (IHS), 1995, , , 2010, 2013, 2001

CREATE TABLE `indicators` (
  CountryName TEXT,
  CountryCode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  IndicatorName TEXT,
  IndicatorCode TEXT PRIMARY KEY,
  Year INTEGER PRIMARY KEY,
  Value INTEGER
);
Sample rows from `indicators`:
Arab World, ARB, Adolescent fertility rate (births per 1,000 women ages 15-19), SP.ADO.TFRT, 1960, 133
Arab World, ARB, Age dependency ratio (% of working-age population), SP.POP.DPND, 1960, 87
Arab World, ARB, Age dependency ratio, old (% of working-age population), SP.POP.DPND.OL, 1960, 6

","CREATE TABLE `Country` (
  CountryCode TEXT PRIMARY KEY,
  ShortName TEXT,
  TableName TEXT,
  LongName TEXT,
  Alpha2Code TEXT,
  CurrencyUnit TEXT,
  SpecialNotes TEXT,
  Region TEXT,
  IncomeGroup TEXT,
  Wb2Code TEXT,
  NationalAccountsBaseYear TEXT,
  NationalAccountsReferenceYear TEXT,
  SnaPriceValuation TEXT,
  LendingCategory TEXT,
  OtherGroups TEXT,
  SystemOfNationalAccounts TEXT,
  AlternativeConversionFactor TEXT,
  PppSurveyYear TEXT,
  BalanceOfPaymentsManualInUse TEXT,
  ExternalDebtReportingStatus TEXT,
  SystemOfTrade TEXT,
  GovernmentAccountingConcept TEXT,
  ImfDataDisseminationStandard TEXT,
  LatestPopulationCensus TEXT,
  LatestHouseholdSurvey TEXT,
  SourceOfMostRecentIncomeAndExpenditureData TEXT,
  VitalRegistrationComplete TEXT,
  LatestAgriculturalCensus TEXT,
  LatestIndustrialData INTEGER,
  LatestTradeData INTEGER,
  LatestWaterWithdrawalData INTEGER
);
Sample rows from `Country`:
AFG, Afghanistan, Afghanistan, Islamic State of Afghanistan, AF, Afghan afghani, Fiscal year end: March 20; reporting period for national accounts data: FY (from 2013 are CY). National accounts data are sourced from the IMF and differ from the Central Statistics Organization numbers due to exclusion of the opium economy., South Asia, Low income, AF, 2002/03, , Value added at basic prices (VAB), IDA, HIPC, Country uses the 1993 System of National Accounts methodology., , , , Actual, General trade system, Consolidated central government, General Data Dissemination System (GDDS), 1979, Multiple Indicator Cluster Survey (MICS), 2010/11, Integrated household survey (IHS), 2008, , 2013/14, None, 2013, 2000
ALB, Albania, Albania, Republic of Albania, AL, Albanian lek, , Europe & Central Asia, Upper middle income, AL, Original chained constant price data are rescaled., 1996, Value added at basic prices (VAB), IBRD, , Country uses the 1993 System of National Accounts methodology., , Rolling, IMF Balance of Payments Manual, 6th edition., Actual, General trade system, Budgetary central government, General Data Dissemination System (GDDS), 2011, Demographic and Health Survey (DHS), 2008/09, Living Standards Measurement Study Survey (LSMS), 2011/12, Yes, 2012, 2011, 2013, 2006
DZA, Algeria, Algeria, People's Democratic Republic of Algeria, DZ, Algerian dinar, , Middle East & North Africa, Upper middle income, DZ, 1980, , Value added at basic prices (VAB), IBRD, , Country uses the 1968 System of National Accounts methodology., , 2011, IMF Balance of Payments Manual, 6th edition., Actual, Special trade system, Budgetary central government, General Data Dissemination System (GDDS), 2008, Multiple Indicator Cluster Survey (MICS), 2012, Integrated household survey (IHS), 1995, , , 2010, 2013, 2001

CREATE TABLE `Series` (
  SeriesCode TEXT PRIMARY KEY,
  Topic TEXT,
  IndicatorName TEXT,
  ShortDefinition TEXT,
  LongDefinition TEXT,
  UnitOfMeasure TEXT,
  Periodicity TEXT,
  BasePeriod TEXT,
  OtherNotes INTEGER,
  AggregationMethod TEXT,
  LimitationsAndExceptions TEXT,
  NotesFromOriginalSource TEXT,
  GeneralComments TEXT,
  Source TEXT,
  StatisticalConceptAndMethodology TEXT,
  DevelopmentRelevance TEXT,
  RelatedSourceLinks TEXT,
  OtherWebLinks INTEGER,
  RelatedIndicators INTEGER,
  LicenseType TEXT
);
Sample rows from `Series`:
BN.KLT.DINV.CD, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net (BoP, current US$), , Foreign direct investment are the net inflows of investment to acquire a lasting management interest (10 percent or more of voting stock) in an enterprise operating in an economy other than that of the investor. It is the sum of equity capital, reinvestme, , Annual, , None, , , , Note: Data are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6) and are only available from 2005 onwards. In BPM6, the headings of the financial account have been changed from credits and debits to net acquisition of financial ass, International Monetary Fund, Balance of Payments Statistics Yearbook and data files., , , , None, None, Open
BX.KLT.DINV.WD.GD.ZS, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net inflows (% of GDP), , Foreign direct investment are the net inflows of investment to acquire a lasting management interest (10 percent or more of voting stock) in an enterprise operating in an economy other than that of the investor. It is the sum of equity capital, reinvestme, , Annual, , None, Weighted average, FDI data do not give a complete picture of international investment in an economy. Balance of payments data on FDI do not include capital raised locally, an important source of investment financing in some developing countries. In addition, FDI data omit , , Note: Data starting from 2005 are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6)., International Monetary Fund, International Financial Statistics and Balance of Payments databases, World Bank, International Debt Statistics, and World Bank and OECD GDP estimates., Data on equity flows are based on balance of payments data reported by the International Monetary Fund (IMF). Foreign direct investment (FDI) data are supplemented by the World Bank staff estimates using data from the United Nations Conference on Trade an, Private financial flows - equity and debt - account for the bulk of development finance. Equity flows comprise foreign direct investment (FDI) and portfolio equity. Debt flows are financing raised through bond issuance, bank lending, and supplier credits., , None, None, Open
BX.KLT.DINV.CD.WD, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net inflows (BoP, current US$), , Foreign direct investment refers to direct investment equity flows in the reporting economy. It is the sum of equity capital, reinvestment of earnings, and other capital. Direct investment is a category of cross-border investment associated with a residen, , Annual, , None, Sum, FDI data do not give a complete picture of international investment in an economy. Balance of payments data on FDI do not include capital raised locally, an important source of investment financing in some developing countries. In addition, FDI data omit , , Note: Data starting from 2005 are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6)., International Monetary Fund, Balance of Payments database, supplemented by data from the United Nations Conference on Trade and Development and official national sources., Data on equity flows are based on balance of payments data reported by the International Monetary Fund (IMF). Foreign direct investment (FDI) data are supplemented by the World Bank staff estimates using data from the United Nations Conference on Trade an, Private financial flows - equity and debt - account for the bulk of development finance. Equity flows comprise foreign direct investment (FDI) and portfolio equity. Debt flows are financing raised through bond issuance, bank lending, and supplier credits., , None, None, Open

CREATE TABLE `CountryNotes` (
  Countrycode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Description TEXT
);
Sample rows from `CountryNotes`:
ABW, EG.EGY.PRIM.PP.KD, Sources: Estimated based on UN Energy Statistics (2014); World Development Indicators, WDI (2014)
ABW, EG.ELC.RNEW.ZS, Sources: UN Energy Statistics (2014)
ABW, EG.FEC.RNEW.ZS, Sources: UN Energy Statistics (2014)

CREATE TABLE `Footnotes` (
  Countrycode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Year TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `Footnotes`:
ABW, AG.LND.FRST.K2, YR1990, Not specified
ABW, AG.LND.FRST.K2, YR2000, Not specified
ABW, AG.LND.FRST.K2, YR2005, Not specified

CREATE TABLE `Indicators` (
  CountryName TEXT,
  CountryCode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  IndicatorName TEXT,
  IndicatorCode TEXT PRIMARY KEY,
  Year INTEGER PRIMARY KEY,
  Value INTEGER
);
Sample rows from `Indicators`:
Arab World, ARB, Adolescent fertility rate (births per 1,000 women ages 15-19), SP.ADO.TFRT, 1960, 133
Arab World, ARB, Age dependency ratio (% of working-age population), SP.POP.DPND, 1960, 87
Arab World, ARB, Age dependency ratio, old (% of working-age population), SP.POP.DPND.OL, 1960, 6

CREATE TABLE `SeriesNotes` (
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Year TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `SeriesNotes`:
SP.ADO.TFRT, YR1960, Interpolated using data for 1957 and 1962.
SP.DYN.AMRT.FE, YR1960, Interpolated using data for 1957 and 1962, if the data source is United Nations World Population Prospects.
SP.DYN.AMRT.MA, YR1960, Interpolated using data for 1957 and 1962, if the data source is United Nations World Population Prospects.

","country, indicators","indicators.countryname, country.currencyunit, country.countryCode, indicators.countryCode, indicators.indicatorname, indicators.year, indicators.value"
movie,Which actor played the role of Joker in the movie Batman?,SELECT t3.name FROM movie as t1 inner JOIN characters as t2 ON t1.movieid = t2.movieid inner JOIN actor as t3 ON t3.actorid = t2.actorid WHERE t1.title = 'Batman' AND t2.`character name` = 'Joker',"CREATE TABLE `movie` (
  MovieID INTEGER,
  Title TEXT,
  MPAA Rating TEXT,
  Budget INTEGER,
  Gross INTEGER,
  Release Date TEXT,
  Genre TEXT,
  Runtime INTEGER,
  Rating REAL,
  Rating Count INTEGER,
  Summary TEXT
);
Sample rows from `movie`:
1, Look Who's Talking, PG-13, 7500000, 296000000, 1989-10-12, Romance, 93, 5.9, 73638, After a single, career-minded woman is left on her own to give birth to the child of a married man, she finds a new romantic chance in a cab driver. Meanwhile, the point-of-view of the newborn boy is narrated through voice-over.
2, Driving Miss Daisy, PG, 7500000, 145793296, 1989-12-13, Comedy, 99, 7.4, 91075, An old Jewish woman and her African-American chauffeur in the American South have a relationship that grows and improves over the years.
3, Turner & Hooch, PG, 13000000, 71079915, 1989-07-28, Crime, 100, 7.2, 91415, Det. Scott Turner (Tom Hanks) is an uptight, by-the-book police officer. When his friend Amos Reed (John McIntire), the proprietor of a junkyard, is killed, Turner reluctantly inherits the man's dog. Turner adjusts to life with the dog to help solve a murder case.

CREATE TABLE `characters` (
  MovieID INTEGER PRIMARY KEY REFERENCES movie(MovieID),
  ActorID INTEGER PRIMARY KEY REFERENCES actor(ActorID),
  Character Name TEXT,
  creditOrder INTEGER,
  pay TEXT,
  screentime TEXT
);
Sample rows from `characters`:
1, 1, James, 1, None, None
1, 2, Mollie, 2, None, None
1, 3, Rosie, 3, None, None

CREATE TABLE `actor` (
  ActorID INTEGER,
  Name TEXT,
  Date of Birth DATE,
  Birth City TEXT,
  Birth Country TEXT,
  Height (Inches) INTEGER,
  Biography TEXT,
  Gender TEXT,
  Ethnicity TEXT,
  NetWorth TEXT
);
Sample rows from `actor`:
1, John Travolta, 1954-02-18, Englewood, USA, 74, John Joseph Travolta was born in Englewood, New Jersey, one of six children of Helen Travolta (n�e Helen Cecilia Burke) and Salvatore/Samuel J. Travolta. His father was of Italian descent and his mother was of Irish ancestry. His father owned a tire repair shop called Travolta Tires in Hillsdale, NJ. Travolta started acting appearing in a local ..., Male, White, $250,000,000.00
2, Kirstie Alley, 1951-01-12, Wichita, USA, 67, None, Female, White, $40,000,000.00
3, Olympia Dukakis, 1931-06-20, Lowell, USA, 63, Long a vital, respected lady of the classic and contemporary stage this grand lady did not become a household name and sought-after film actress until age 56 when she turned in a glorious, Oscar-winning perf as Cher's sardonic mother in the romantic comedy Moonstruck (1987). Since then movie (and TV) fans have discovered what the East coast ..., Female, White, $6,000,000.00

","CREATE TABLE `actor` (
  ActorID INTEGER,
  Name TEXT,
  Date of Birth DATE,
  Birth City TEXT,
  Birth Country TEXT,
  Height (Inches) INTEGER,
  Biography TEXT,
  Gender TEXT,
  Ethnicity TEXT,
  NetWorth TEXT
);
Sample rows from `actor`:
1, John Travolta, 1954-02-18, Englewood, USA, 74, John Joseph Travolta was born in Englewood, New Jersey, one of six children of Helen Travolta (n�e Helen Cecilia Burke) and Salvatore/Samuel J. Travolta. His father was of Italian descent and his mother was of Irish ancestry. His father owned a tire repair shop called Travolta Tires in Hillsdale, NJ. Travolta started acting appearing in a local ..., Male, White, $250,000,000.00
2, Kirstie Alley, 1951-01-12, Wichita, USA, 67, None, Female, White, $40,000,000.00
3, Olympia Dukakis, 1931-06-20, Lowell, USA, 63, Long a vital, respected lady of the classic and contemporary stage this grand lady did not become a household name and sought-after film actress until age 56 when she turned in a glorious, Oscar-winning perf as Cher's sardonic mother in the romantic comedy Moonstruck (1987). Since then movie (and TV) fans have discovered what the East coast ..., Female, White, $6,000,000.00

CREATE TABLE `movie` (
  MovieID INTEGER,
  Title TEXT,
  MPAA Rating TEXT,
  Budget INTEGER,
  Gross INTEGER,
  Release Date TEXT,
  Genre TEXT,
  Runtime INTEGER,
  Rating REAL,
  Rating Count INTEGER,
  Summary TEXT
);
Sample rows from `movie`:
1, Look Who's Talking, PG-13, 7500000, 296000000, 1989-10-12, Romance, 93, 5.9, 73638, After a single, career-minded woman is left on her own to give birth to the child of a married man, she finds a new romantic chance in a cab driver. Meanwhile, the point-of-view of the newborn boy is narrated through voice-over.
2, Driving Miss Daisy, PG, 7500000, 145793296, 1989-12-13, Comedy, 99, 7.4, 91075, An old Jewish woman and her African-American chauffeur in the American South have a relationship that grows and improves over the years.
3, Turner & Hooch, PG, 13000000, 71079915, 1989-07-28, Crime, 100, 7.2, 91415, Det. Scott Turner (Tom Hanks) is an uptight, by-the-book police officer. When his friend Amos Reed (John McIntire), the proprietor of a junkyard, is killed, Turner reluctantly inherits the man's dog. Turner adjusts to life with the dog to help solve a murder case.

CREATE TABLE `characters` (
  MovieID INTEGER PRIMARY KEY REFERENCES movie(MovieID),
  ActorID INTEGER PRIMARY KEY REFERENCES actor(ActorID),
  Character Name TEXT,
  creditOrder INTEGER,
  pay TEXT,
  screentime TEXT
);
Sample rows from `characters`:
1, 1, James, 1, None, None
1, 2, Mollie, 2, None, None
1, 3, Rosie, 3, None, None

","movie, characters, actor","actor.name, movie.movieid, characters.movieid, actor.actorid, characters.actorid, movie.title, characters.character name"
movielens,Please list all horror films that have a rating of 1.,SELECT t1.movieid FROM u2base as t1 inner JOIN movies2directors as t2 ON t1.movieid = t2.movieid WHERE t1.rating = 1 AND t2.genre = 'Horror',"CREATE TABLE `u2base` (
  userid INTEGER PRIMARY KEY REFERENCES users(None),
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  rating TEXT
);
Sample rows from `u2base`:
2, 1964242, 1
2, 2219779, 1
3, 1856939, 1

CREATE TABLE `movies2directors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  directorid INTEGER PRIMARY KEY REFERENCES directors(None),
  genre TEXT
);
Sample rows from `movies2directors`:
1672111, 54934, Action
1672946, 188940, Action
1679461, 179783, Action

","CREATE TABLE `users` (
  userid INTEGER,
  age TEXT,
  u_gender TEXT,
  occupation TEXT
);
Sample rows from `users`:
1, 1, F, 2
2, 56, M, 3
3, 25, M, 2

CREATE TABLE `directors` (
  directorid INTEGER,
  d_quality INTEGER PRIMARY KEY,
  avg_revenue INTEGER PRIMARY KEY
);
Sample rows from `directors`:
67, 4, 1
92, 2, 3
284, 4, 0

CREATE TABLE `actors` (
  actorid INTEGER,
  a_gender TEXT,
  a_quality INTEGER
);
Sample rows from `actors`:
4, M, 4
16, M, 0
28, M, 4

CREATE TABLE `movies` (
  movieid INTEGER,
  year INTEGER,
  isEnglish TEXT,
  country TEXT,
  runningtime INTEGER
);
Sample rows from `movies`:
1672052, 3, T, other, 2
1672111, 4, T, other, 2
1672580, 4, T, USA, 3

CREATE TABLE `movies2actors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  actorid INTEGER PRIMARY KEY REFERENCES actors(None),
  cast_num INTEGER
);
Sample rows from `movies2actors`:
1672580, 981535, 0
1672946, 1094968, 0
1673647, 149985, 0

CREATE TABLE `movies2directors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  directorid INTEGER PRIMARY KEY REFERENCES directors(None),
  genre TEXT
);
Sample rows from `movies2directors`:
1672111, 54934, Action
1672946, 188940, Action
1679461, 179783, Action

CREATE TABLE `u2base` (
  userid INTEGER PRIMARY KEY REFERENCES users(None),
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  rating TEXT
);
Sample rows from `u2base`:
2, 1964242, 1
2, 2219779, 1
3, 1856939, 1

","u2base, movies2directors","u2base.movieid, movies2directors.movieid, u2base.rating, movies2directors.genre"
talkingdata,"How many events were there on 30th April, 2016?","SELECT COUNT(event_id) FROM events WHERE substr(`timestamp`, 1, 10) = '2016-04-30'","CREATE TABLE `events` (
  event_id INTEGER,
  device_id INTEGER,
  timestamp DATETIME,
  longitude REAL,
  latitude REAL
);
Sample rows from `events`:
1, 29182687948017175, 2016-05-01 00:55:25.0, 121.0, 31.0
2, -6401643145415154744, 2016-05-01 00:54:12.0, 104.0, 31.0
3, -4833982096941402721, 2016-05-01 00:08:05.0, 107.0, 30.0

","CREATE TABLE `app_all` (
  app_id INTEGER
);
Sample rows from `app_all`:
-9223281467940916832
-9222877069545393219
-9222785464897897681

CREATE TABLE `app_events` (
  event_id INTEGER PRIMARY KEY REFERENCES events(event_id),
  app_id INTEGER PRIMARY KEY,
  is_installed INTEGER,
  is_active INTEGER
);
Sample rows from `app_events`:
2, -8942695423876075857, 1, 0
2, -8022267440849930066, 1, 0
2, -5720078949152207372, 1, 0

CREATE TABLE `app_events_relevant` (
  event_id INTEGER PRIMARY KEY REFERENCES events_relevant(event_id),
  app_id INTEGER PRIMARY KEY REFERENCES app_all(app_id),
  is_installed INTEGER,
  is_active INTEGER
);
Sample rows from `app_events_relevant`:
2, -8942695423876075857, 1, 0
2, -8022267440849930066, 1, 0
2, -5720078949152207372, 1, 0

CREATE TABLE `app_labels` (
  app_id INTEGER REFERENCES app_all(app_id),
  label_id INTEGER REFERENCES label_categories(label_id)
);
Sample rows from `app_labels`:
7324884708820027918, 251
-4494216993218550286, 251
6058196446775239644, 406

CREATE TABLE `events` (
  event_id INTEGER,
  device_id INTEGER,
  timestamp DATETIME,
  longitude REAL,
  latitude REAL
);
Sample rows from `events`:
1, 29182687948017175, 2016-05-01 00:55:25.0, 121.0, 31.0
2, -6401643145415154744, 2016-05-01 00:54:12.0, 104.0, 31.0
3, -4833982096941402721, 2016-05-01 00:08:05.0, 107.0, 30.0

CREATE TABLE `events_relevant` (
  event_id INTEGER,
  device_id INTEGER REFERENCES gender_age(device_id),
  timestamp DATETIME,
  longitude REAL,
  latitude REAL
);
Sample rows from `events_relevant`:
2, None, -8942695423876075857, 1.0, 0.0
6, None, -8764672938472212518, 1.0, 1.0
7, None, -9050100410106163077, 1.0, 0.0

CREATE TABLE `gender_age` (
  device_id INTEGER REFERENCES phone_brand_device_model2(device_id),
  gender TEXT,
  age INTEGER,
  group TEXT
);
Sample rows from `gender_age`:
-9221086586254644858, M, 29, M29-31
-9221079146476055829, None, None, None
-9221066489596332354, M, 31, M29-31

CREATE TABLE `gender_age_test` (
  device_id INTEGER
);
Sample rows from `gender_age_test`:
-9223321966609553846
-9223042152723782980
-9222896629442493034

CREATE TABLE `gender_age_train` (
  device_id INTEGER,
  gender TEXT,
  age INTEGER,
  group TEXT
);
Sample rows from `gender_age_train`:
-9223067244542181226, M, 24, M23-26
-9222956879900151005, M, 36, M32-38
-9222754701995937853, M, 29, M29-31

CREATE TABLE `label_categories` (
  label_id INTEGER,
  category TEXT
);
Sample rows from `label_categories`:
1, None
2, game-game type
3, game-Game themes

CREATE TABLE `phone_brand_device_model2` (
  device_id INTEGER PRIMARY KEY,
  phone_brand TEXT PRIMARY KEY,
  device_model TEXT PRIMARY KEY
);
Sample rows from `phone_brand_device_model2`:
-9223321966609553846, 小米, 红米note
-9223067244542181226, vivo, Y19T
-9223042152723782980, 小米, MI 3

CREATE TABLE `sample_submission` (
  device_id INTEGER,
  F23- REAL,
  F24-26 REAL,
  F27-28 REAL,
  F29-32 REAL,
  F33-42 REAL,
  F43+ REAL,
  M22- REAL,
  M23-26 REAL,
  M27-28 REAL,
  M29-31 REAL,
  M32-38 REAL,
  M39+ REAL
);
Sample rows from `sample_submission`:
-9223321966609553846, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833
-9223042152723782980, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833
-9222896629442493034, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833

",events,"event_id, timestamp"
retails,What is the percentage of the European countries among the given countries?,"SELECT cast(SUM(iif(t2.r_name = 'EUROPE', 1, 0)) as real) * 100 / COUNT(t1.n_name) FROM nation as t1 inner JOIN region as t2 ON t1.n_regionkey = t2.r_regionkey","CREATE TABLE `nation` (
  n_nationkey INTEGER,
  n_name TEXT,
  n_regionkey INTEGER REFERENCES region(r_regionkey),
  n_comment TEXT
);
Sample rows from `nation`:
0, ALGERIA, 0, slyly express pinto beans cajole idly. deposits use blithely unusual packages? fluffily final accounts x-r
1, ARGENTINA, 1, instructions detect blithely stealthily pending packages
2, BRAZIL, 1, blithely unusual deposits are quickly--

CREATE TABLE `region` (
  r_regionkey INTEGER,
  r_name TEXT,
  r_comment TEXT
);
Sample rows from `region`:
0, AFRICA, asymptotes sublate after the r
1, AMERICA, requests affix quickly final tithes. blithely even packages above the a
2, ASIA, accounts cajole carefully according to the carefully exp

","CREATE TABLE `customer` (
  c_custkey INTEGER,
  c_mktsegment TEXT,
  c_nationkey INTEGER REFERENCES nation(n_nationkey),
  c_name TEXT,
  c_address TEXT,
  c_phone TEXT,
  c_acctbal REAL,
  c_comment TEXT
);
Sample rows from `customer`:
1, BUILDING, 8, Customer#000000001, KwX3hMHjZ6, 937-241-3198, 3560.03, ironic excuses detect slyly silent requests. requests according to the exc
2, MACHINERY, 16, Customer#000000002, ioUn,eqTTXOdo, 906-965-7556, 7550.21, final express accounts mold slyly. ironic accounts cajole! quickly express a
3, FURNITURE, 11, Customer#000000003, YddJqmIdouNT9Yj, 328-750-7603, -926.96, carefully express foxes sleep carefully. pending platelets sleep thinly for t

CREATE TABLE `lineitem` (
  l_shipdate DATE,
  l_orderkey INTEGER PRIMARY KEY REFERENCES orders(o_orderkey),
  l_discount REAL,
  l_extendedprice REAL,
  l_suppkey INTEGER REFERENCES partsupp(ps_suppkey),
  l_quantity INTEGER,
  l_returnflag TEXT,
  l_partkey INTEGER REFERENCES partsupp(ps_partkey),
  l_linestatus TEXT,
  l_tax REAL,
  l_commitdate DATE,
  l_receiptdate DATE,
  l_shipmode TEXT,
  l_linenumber INTEGER PRIMARY KEY,
  l_shipinstruct TEXT,
  l_comment TEXT
);
Sample rows from `lineitem`:
1995-08-16, 1, 0.1, 58303.08, 6296, 33, N, 98768, O, 0.06, 1995-07-12, 1995-09-14, RAIL, 1, NONE, carefully bo
1995-08-13, 1, 0.09, 16947.7, 8776, 10, N, 23771, O, 0.08, 1995-07-09, 1995-08-27, TRUCK, 2, TAKE BACK RETURN, blithely regular pac
1995-06-17, 1, 0.1, 63642.9, 3859, 34, N, 113858, O, 0.08, 1995-05-22, 1995-06-30, SHIP, 3, COLLECT COD, ironic accounts sleep furiously silen

CREATE TABLE `nation` (
  n_nationkey INTEGER,
  n_name TEXT,
  n_regionkey INTEGER REFERENCES region(r_regionkey),
  n_comment TEXT
);
Sample rows from `nation`:
0, ALGERIA, 0, slyly express pinto beans cajole idly. deposits use blithely unusual packages? fluffily final accounts x-r
1, ARGENTINA, 1, instructions detect blithely stealthily pending packages
2, BRAZIL, 1, blithely unusual deposits are quickly--

CREATE TABLE `orders` (
  o_orderdate DATE,
  o_orderkey INTEGER,
  o_custkey INTEGER REFERENCES customer(c_custkey),
  o_orderpriority TEXT,
  o_shippriority INTEGER,
  o_clerk TEXT,
  o_orderstatus TEXT,
  o_totalprice REAL,
  o_comment TEXT
);
Sample rows from `orders`:
1995-04-19, 1, 73100, 4-NOT SPECIFIED, 0, Clerk#000000916, P, 203198.56, final packages sleep blithely packa
1996-11-04, 2, 92861, 1-URGENT, 0, Clerk#000000373, O, 317719.99, final excuses about the ironic even deposits detect express request
1992-02-15, 3, 44875, 1-URGENT, 0, Clerk#000000485, F, 146674.98, final final deposits cajole foxes. blithely pendin

CREATE TABLE `part` (
  p_partkey INTEGER,
  p_type TEXT,
  p_size INTEGER,
  p_brand TEXT,
  p_name TEXT,
  p_container TEXT,
  p_mfgr TEXT,
  p_retailprice REAL,
  p_comment TEXT
);
Sample rows from `part`:
1, LARGE PLATED TIN, 31, Brand#43, burlywood plum powder puff mint, LG BAG, Manufacturer#4, 901.0, blithely busy reque
2, LARGE POLISHED STEEL, 4, Brand#55, hot spring dodger dim light, LG CASE, Manufacturer#5, 902.0, even ironic requests s
3, STANDARD PLATED COPPER, 30, Brand#53, dark slate grey steel misty, WRAP CASE, Manufacturer#5, 903.0, slyly ironic fox

CREATE TABLE `partsupp` (
  ps_partkey INTEGER PRIMARY KEY REFERENCES part(p_partkey),
  ps_suppkey INTEGER PRIMARY KEY REFERENCES supplier(s_suppkey),
  ps_supplycost REAL,
  ps_availqty INTEGER,
  ps_comment TEXT
);
Sample rows from `partsupp`:
1, 2, 400.75, 1111, carefully ironic deposits use against the carefully unusual accounts. slyly silent platelets nag quickly even
1, 2502, 702.61, 3999, slyly regular accounts serve carefully. asymptotes after the slyly even instructions cajole quickly ironic requests. pending dugouts about the slyly 
1, 5002, 383.95, 7411, carefully special ideas are slyly. slyly ironic epitaphs use pending pending foxes. furiously express pinto beans lose quiet even requests: special final packages ar

CREATE TABLE `region` (
  r_regionkey INTEGER,
  r_name TEXT,
  r_comment TEXT
);
Sample rows from `region`:
0, AFRICA, asymptotes sublate after the r
1, AMERICA, requests affix quickly final tithes. blithely even packages above the a
2, ASIA, accounts cajole carefully according to the carefully exp

CREATE TABLE `supplier` (
  s_suppkey INTEGER,
  s_nationkey INTEGER REFERENCES nation(n_nationkey),
  s_comment TEXT,
  s_name TEXT,
  s_address TEXT,
  s_phone TEXT,
  s_acctbal REAL
);
Sample rows from `supplier`:
1, 13, blithely final pearls are. instructions thra, Supplier#000000001, ,wWs4pnykQOFl8mgVCU8EZMXqZs1w, 800-807-9579, 3082.86
2, 5, requests integrate fluffily. fluffily ironic deposits wake. bold, Supplier#000000002, WkXT6MSAJrp4qWq3W9N, 348-617-6055, 3009.73
3, 22, carefully express ideas shall have to unwin, Supplier#000000003, KjUqa42JEHaRDVQTHV6Yq2h, 471-986-9888, 9159.78

","nation, region","region.r_name, nation.n_name, nation.n_regionkey, region.r_regionkey"
world_development_indicators,"Among the low income countries, which country has the lowest fertility rate?","SELECT t2.countryname FROM country as t1 inner JOIN indicators as t2 ON t1.countryCode = t2.countryCode WHERE t1.incomegroup = 'Low income' AND t2.indicatorname = 'Adolescent fertility rate (births per 1,000 women ages 15-19)' ORDER BY t2.value LIMIT 1","CREATE TABLE `country` (
  CountryCode TEXT PRIMARY KEY,
  ShortName TEXT,
  TableName TEXT,
  LongName TEXT,
  Alpha2Code TEXT,
  CurrencyUnit TEXT,
  SpecialNotes TEXT,
  Region TEXT,
  IncomeGroup TEXT,
  Wb2Code TEXT,
  NationalAccountsBaseYear TEXT,
  NationalAccountsReferenceYear TEXT,
  SnaPriceValuation TEXT,
  LendingCategory TEXT,
  OtherGroups TEXT,
  SystemOfNationalAccounts TEXT,
  AlternativeConversionFactor TEXT,
  PppSurveyYear TEXT,
  BalanceOfPaymentsManualInUse TEXT,
  ExternalDebtReportingStatus TEXT,
  SystemOfTrade TEXT,
  GovernmentAccountingConcept TEXT,
  ImfDataDisseminationStandard TEXT,
  LatestPopulationCensus TEXT,
  LatestHouseholdSurvey TEXT,
  SourceOfMostRecentIncomeAndExpenditureData TEXT,
  VitalRegistrationComplete TEXT,
  LatestAgriculturalCensus TEXT,
  LatestIndustrialData INTEGER,
  LatestTradeData INTEGER,
  LatestWaterWithdrawalData INTEGER
);
Sample rows from `country`:
AFG, Afghanistan, Afghanistan, Islamic State of Afghanistan, AF, Afghan afghani, Fiscal year end: March 20; reporting period for national accounts data: FY (from 2013 are CY). National accounts data are sourced from the IMF and differ from the Central Statistics Organization numbers due to exclusion of the opium economy., South Asia, Low income, AF, 2002/03, , Value added at basic prices (VAB), IDA, HIPC, Country uses the 1993 System of National Accounts methodology., , , , Actual, General trade system, Consolidated central government, General Data Dissemination System (GDDS), 1979, Multiple Indicator Cluster Survey (MICS), 2010/11, Integrated household survey (IHS), 2008, , 2013/14, None, 2013, 2000
ALB, Albania, Albania, Republic of Albania, AL, Albanian lek, , Europe & Central Asia, Upper middle income, AL, Original chained constant price data are rescaled., 1996, Value added at basic prices (VAB), IBRD, , Country uses the 1993 System of National Accounts methodology., , Rolling, IMF Balance of Payments Manual, 6th edition., Actual, General trade system, Budgetary central government, General Data Dissemination System (GDDS), 2011, Demographic and Health Survey (DHS), 2008/09, Living Standards Measurement Study Survey (LSMS), 2011/12, Yes, 2012, 2011, 2013, 2006
DZA, Algeria, Algeria, People's Democratic Republic of Algeria, DZ, Algerian dinar, , Middle East & North Africa, Upper middle income, DZ, 1980, , Value added at basic prices (VAB), IBRD, , Country uses the 1968 System of National Accounts methodology., , 2011, IMF Balance of Payments Manual, 6th edition., Actual, Special trade system, Budgetary central government, General Data Dissemination System (GDDS), 2008, Multiple Indicator Cluster Survey (MICS), 2012, Integrated household survey (IHS), 1995, , , 2010, 2013, 2001

CREATE TABLE `indicators` (
  CountryName TEXT,
  CountryCode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  IndicatorName TEXT,
  IndicatorCode TEXT PRIMARY KEY,
  Year INTEGER PRIMARY KEY,
  Value INTEGER
);
Sample rows from `indicators`:
Arab World, ARB, Adolescent fertility rate (births per 1,000 women ages 15-19), SP.ADO.TFRT, 1960, 133
Arab World, ARB, Age dependency ratio (% of working-age population), SP.POP.DPND, 1960, 87
Arab World, ARB, Age dependency ratio, old (% of working-age population), SP.POP.DPND.OL, 1960, 6

","CREATE TABLE `Country` (
  CountryCode TEXT PRIMARY KEY,
  ShortName TEXT,
  TableName TEXT,
  LongName TEXT,
  Alpha2Code TEXT,
  CurrencyUnit TEXT,
  SpecialNotes TEXT,
  Region TEXT,
  IncomeGroup TEXT,
  Wb2Code TEXT,
  NationalAccountsBaseYear TEXT,
  NationalAccountsReferenceYear TEXT,
  SnaPriceValuation TEXT,
  LendingCategory TEXT,
  OtherGroups TEXT,
  SystemOfNationalAccounts TEXT,
  AlternativeConversionFactor TEXT,
  PppSurveyYear TEXT,
  BalanceOfPaymentsManualInUse TEXT,
  ExternalDebtReportingStatus TEXT,
  SystemOfTrade TEXT,
  GovernmentAccountingConcept TEXT,
  ImfDataDisseminationStandard TEXT,
  LatestPopulationCensus TEXT,
  LatestHouseholdSurvey TEXT,
  SourceOfMostRecentIncomeAndExpenditureData TEXT,
  VitalRegistrationComplete TEXT,
  LatestAgriculturalCensus TEXT,
  LatestIndustrialData INTEGER,
  LatestTradeData INTEGER,
  LatestWaterWithdrawalData INTEGER
);
Sample rows from `Country`:
AFG, Afghanistan, Afghanistan, Islamic State of Afghanistan, AF, Afghan afghani, Fiscal year end: March 20; reporting period for national accounts data: FY (from 2013 are CY). National accounts data are sourced from the IMF and differ from the Central Statistics Organization numbers due to exclusion of the opium economy., South Asia, Low income, AF, 2002/03, , Value added at basic prices (VAB), IDA, HIPC, Country uses the 1993 System of National Accounts methodology., , , , Actual, General trade system, Consolidated central government, General Data Dissemination System (GDDS), 1979, Multiple Indicator Cluster Survey (MICS), 2010/11, Integrated household survey (IHS), 2008, , 2013/14, None, 2013, 2000
ALB, Albania, Albania, Republic of Albania, AL, Albanian lek, , Europe & Central Asia, Upper middle income, AL, Original chained constant price data are rescaled., 1996, Value added at basic prices (VAB), IBRD, , Country uses the 1993 System of National Accounts methodology., , Rolling, IMF Balance of Payments Manual, 6th edition., Actual, General trade system, Budgetary central government, General Data Dissemination System (GDDS), 2011, Demographic and Health Survey (DHS), 2008/09, Living Standards Measurement Study Survey (LSMS), 2011/12, Yes, 2012, 2011, 2013, 2006
DZA, Algeria, Algeria, People's Democratic Republic of Algeria, DZ, Algerian dinar, , Middle East & North Africa, Upper middle income, DZ, 1980, , Value added at basic prices (VAB), IBRD, , Country uses the 1968 System of National Accounts methodology., , 2011, IMF Balance of Payments Manual, 6th edition., Actual, Special trade system, Budgetary central government, General Data Dissemination System (GDDS), 2008, Multiple Indicator Cluster Survey (MICS), 2012, Integrated household survey (IHS), 1995, , , 2010, 2013, 2001

CREATE TABLE `Series` (
  SeriesCode TEXT PRIMARY KEY,
  Topic TEXT,
  IndicatorName TEXT,
  ShortDefinition TEXT,
  LongDefinition TEXT,
  UnitOfMeasure TEXT,
  Periodicity TEXT,
  BasePeriod TEXT,
  OtherNotes INTEGER,
  AggregationMethod TEXT,
  LimitationsAndExceptions TEXT,
  NotesFromOriginalSource TEXT,
  GeneralComments TEXT,
  Source TEXT,
  StatisticalConceptAndMethodology TEXT,
  DevelopmentRelevance TEXT,
  RelatedSourceLinks TEXT,
  OtherWebLinks INTEGER,
  RelatedIndicators INTEGER,
  LicenseType TEXT
);
Sample rows from `Series`:
BN.KLT.DINV.CD, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net (BoP, current US$), , Foreign direct investment are the net inflows of investment to acquire a lasting management interest (10 percent or more of voting stock) in an enterprise operating in an economy other than that of the investor. It is the sum of equity capital, reinvestme, , Annual, , None, , , , Note: Data are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6) and are only available from 2005 onwards. In BPM6, the headings of the financial account have been changed from credits and debits to net acquisition of financial ass, International Monetary Fund, Balance of Payments Statistics Yearbook and data files., , , , None, None, Open
BX.KLT.DINV.WD.GD.ZS, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net inflows (% of GDP), , Foreign direct investment are the net inflows of investment to acquire a lasting management interest (10 percent or more of voting stock) in an enterprise operating in an economy other than that of the investor. It is the sum of equity capital, reinvestme, , Annual, , None, Weighted average, FDI data do not give a complete picture of international investment in an economy. Balance of payments data on FDI do not include capital raised locally, an important source of investment financing in some developing countries. In addition, FDI data omit , , Note: Data starting from 2005 are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6)., International Monetary Fund, International Financial Statistics and Balance of Payments databases, World Bank, International Debt Statistics, and World Bank and OECD GDP estimates., Data on equity flows are based on balance of payments data reported by the International Monetary Fund (IMF). Foreign direct investment (FDI) data are supplemented by the World Bank staff estimates using data from the United Nations Conference on Trade an, Private financial flows - equity and debt - account for the bulk of development finance. Equity flows comprise foreign direct investment (FDI) and portfolio equity. Debt flows are financing raised through bond issuance, bank lending, and supplier credits., , None, None, Open
BX.KLT.DINV.CD.WD, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net inflows (BoP, current US$), , Foreign direct investment refers to direct investment equity flows in the reporting economy. It is the sum of equity capital, reinvestment of earnings, and other capital. Direct investment is a category of cross-border investment associated with a residen, , Annual, , None, Sum, FDI data do not give a complete picture of international investment in an economy. Balance of payments data on FDI do not include capital raised locally, an important source of investment financing in some developing countries. In addition, FDI data omit , , Note: Data starting from 2005 are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6)., International Monetary Fund, Balance of Payments database, supplemented by data from the United Nations Conference on Trade and Development and official national sources., Data on equity flows are based on balance of payments data reported by the International Monetary Fund (IMF). Foreign direct investment (FDI) data are supplemented by the World Bank staff estimates using data from the United Nations Conference on Trade an, Private financial flows - equity and debt - account for the bulk of development finance. Equity flows comprise foreign direct investment (FDI) and portfolio equity. Debt flows are financing raised through bond issuance, bank lending, and supplier credits., , None, None, Open

CREATE TABLE `CountryNotes` (
  Countrycode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Description TEXT
);
Sample rows from `CountryNotes`:
ABW, EG.EGY.PRIM.PP.KD, Sources: Estimated based on UN Energy Statistics (2014); World Development Indicators, WDI (2014)
ABW, EG.ELC.RNEW.ZS, Sources: UN Energy Statistics (2014)
ABW, EG.FEC.RNEW.ZS, Sources: UN Energy Statistics (2014)

CREATE TABLE `Footnotes` (
  Countrycode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Year TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `Footnotes`:
ABW, AG.LND.FRST.K2, YR1990, Not specified
ABW, AG.LND.FRST.K2, YR2000, Not specified
ABW, AG.LND.FRST.K2, YR2005, Not specified

CREATE TABLE `Indicators` (
  CountryName TEXT,
  CountryCode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  IndicatorName TEXT,
  IndicatorCode TEXT PRIMARY KEY,
  Year INTEGER PRIMARY KEY,
  Value INTEGER
);
Sample rows from `Indicators`:
Arab World, ARB, Adolescent fertility rate (births per 1,000 women ages 15-19), SP.ADO.TFRT, 1960, 133
Arab World, ARB, Age dependency ratio (% of working-age population), SP.POP.DPND, 1960, 87
Arab World, ARB, Age dependency ratio, old (% of working-age population), SP.POP.DPND.OL, 1960, 6

CREATE TABLE `SeriesNotes` (
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Year TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `SeriesNotes`:
SP.ADO.TFRT, YR1960, Interpolated using data for 1957 and 1962.
SP.DYN.AMRT.FE, YR1960, Interpolated using data for 1957 and 1962, if the data source is United Nations World Population Prospects.
SP.DYN.AMRT.MA, YR1960, Interpolated using data for 1957 and 1962, if the data source is United Nations World Population Prospects.

","country, indicators","indicators.countryname, country.countryCode, indicators.countryCode, country.incomegroup, indicators.indicatorname, indicators.value"
donor,"Of the projects whose resources are provided by the vendor Lakeshore Learning Materials, the school of which project has the highest cost of labor fulfillment? Please give its school ID.",SELECT t2.schoolid FROM resources as t1 inner JOIN projects as t2 ON t1.projectid = t2.projectid WHERE t1.vendor_name = 'Lakeshore Learning Materials' ORDER BY t2.fulfillment_labor_materials DESC LIMIT 1,"CREATE TABLE `resources` (
  resourceid TEXT PRIMARY KEY,
  projectid TEXT REFERENCES projects(projectid),
  vendorid INTEGER,
  vendor_name TEXT,
  project_resource_type TEXT,
  item_name TEXT,
  item_number TEXT,
  item_unit_price REAL,
  item_quantity INTEGER
);
Sample rows from `resources`:
8a1c1c45bc30d065061912fd9114fcf3, ffffc4f85b60efc5b52347df489d0238, 430, Woodwind and Brasswind, Technology, iPod nano 4th Gen 8GB (Black), 249995.001, 149.0, 4
015d2c4935c50427964a12dc3f584091, ffffac55ee02a49d1abc87ba6fc61135, 82, Best Buy for Business, Technology, Sony bloggie MHS-FS1 - camcorder - internal flash memory, BB11216668, 148.0, 1
26a02944b2f0c25f9abdeacca3ede3ee, ffff97ed93720407d70a2787475932b0, 767, Lakeshore Learning Materials, Supplies, VX748 - Best-Buy Jumbo Crayons - 12-Color Box, VX748, 69.95, 1

CREATE TABLE `projects` (
  projectid TEXT PRIMARY KEY,
  teacher_acctid TEXT,
  schoolid TEXT,
  school_ncesid TEXT,
  school_latitude REAL,
  school_longitude REAL,
  school_city TEXT,
  school_state TEXT,
  school_zip INTEGER,
  school_metro TEXT,
  school_district TEXT,
  school_county TEXT,
  school_charter TEXT,
  school_magnet TEXT,
  school_year_round TEXT,
  school_nlns TEXT,
  school_kipp TEXT,
  school_charter_ready_promise TEXT,
  teacher_prefix TEXT,
  teacher_teach_for_america TEXT,
  teacher_ny_teaching_fellow TEXT,
  primary_focus_subject TEXT,
  primary_focus_area TEXT,
  secondary_focus_subject TEXT,
  secondary_focus_area TEXT,
  resource_type TEXT,
  poverty_level TEXT,
  grade_level TEXT,
  fulfillment_labor_materials REAL,
  total_price_excluding_optional_support REAL,
  total_price_including_optional_support REAL,
  students_reached INTEGER,
  eligible_double_your_impact_match TEXT,
  eligible_almost_home_match TEXT,
  date_posted DATE
);
Sample rows from `projects`:
316ed8fb3b81402ff6ac8f721bb31192, 42d43fa6f37314365d08692e08680973, c0e6ce89b244764085691a1b8e28cb81, 063627006187, 36.57634, -119.608713, Selma, CA, 93662, None, Selma Unified Sch District, Fresno, f, f, f, f, f, f, Mrs., f, f, Literature & Writing, Literacy & Language, College & Career Prep, Applied Learning, Books, highest poverty, Grades 6-8, 30.0, 555.81, 653.89, 32, f, f, 2014-05-12
90de744e368a7e4883223ca49318ae30, 864eb466462bf704bf7a16a585ef296a, d711e47810900c96f26a5d0be30c446d, 483702008193, 32.911179, -96.72364, Dallas, TX, 75243, urban, Richardson Ind School District, Dallas, f, f, f, f, f, f, Mrs., f, f, Literacy, Literacy & Language, ESL, Literacy & Language, Books, highest poverty, Grades PreK-2, 30.0, 296.47, 348.79, 22, f, f, 2014-05-12
32943bb1063267de6ed19fc0ceb4b9a7, 37f85135259ece793213aca9d8765542, 665c3613013ba0a66e3a2a26b89f1b68, 410327000109, 45.166039, -122.414576, Colton, OR, 97017, rural, Colton School District 53, Clackamas, f, f, f, f, f, f, Mr., f, f, Literacy, Literacy & Language, Mathematics, Math & Science, Technology, high poverty, Grades PreK-2, 30.0, 430.89, 506.93, 17, f, f, 2014-05-11

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `essays` (
  projectid TEXT,
  teacher_acctid TEXT,
  title TEXT,
  short_description TEXT,
  need_statement TEXT,
  essay TEXT
);
Sample rows from `essays`:
ffffc4f85b60efc5b52347df489d0238, c24011b20fc161ed02248e85beb59a90, iMath, It is imperative that teachers bring technology into the classroom, if students are going to be able to survive in the 21st Century. The classroom needs to be ever changing along with the outside world. The iMath project will help students by obtaining cl, My students need four iPods., I am a fourth year fifth grade math teacher. The school I teach in is a fifth and sixth grade public school and is a Title One school which means that 95% of our students get free lunch. Presently, I am in the process of completing a Masters degree in Tec
ffffac55ee02a49d1abc87ba6fc61135, 947066d0af47e0566f334566553dd6a6, Recording Rockin' Readers, Can you imagine having to translate everything you read into sign language and relate it to what you already know? Help us do just that by giving us the camera that will record our stories and..., My students need a camcorder. , Can you imagine having to translate everything you read into sign language and relate it to what you already know? Help us do just that by giving us the camera that will record our stories and interpretations! 
\n
\nMy students are all deaf or hard of hea
ffff97ed93720407d70a2787475932b0, 462270f5d5c212162fcab11afa2623cb, Kindergarten In Need of Important Materials!, It takes a special person to donate to a group of children they don't know, especially in these hard economic times, but my students are worth it.  They deserve to have the proper supplies to ensure that their long education gets off to the right start, s, My students need 17 assorted classroom materials to ensure that they can learn as much as possible this year., Hi. I teach a wonderful group of 4-5 year old Kindergarten students.  They come in wanting and willing to learn new and exciting things each and every day. I work hard to ensure that my students get the most out of the entire school year. 
\n
\nFor the mo

CREATE TABLE `projects` (
  projectid TEXT PRIMARY KEY,
  teacher_acctid TEXT,
  schoolid TEXT,
  school_ncesid TEXT,
  school_latitude REAL,
  school_longitude REAL,
  school_city TEXT,
  school_state TEXT,
  school_zip INTEGER,
  school_metro TEXT,
  school_district TEXT,
  school_county TEXT,
  school_charter TEXT,
  school_magnet TEXT,
  school_year_round TEXT,
  school_nlns TEXT,
  school_kipp TEXT,
  school_charter_ready_promise TEXT,
  teacher_prefix TEXT,
  teacher_teach_for_america TEXT,
  teacher_ny_teaching_fellow TEXT,
  primary_focus_subject TEXT,
  primary_focus_area TEXT,
  secondary_focus_subject TEXT,
  secondary_focus_area TEXT,
  resource_type TEXT,
  poverty_level TEXT,
  grade_level TEXT,
  fulfillment_labor_materials REAL,
  total_price_excluding_optional_support REAL,
  total_price_including_optional_support REAL,
  students_reached INTEGER,
  eligible_double_your_impact_match TEXT,
  eligible_almost_home_match TEXT,
  date_posted DATE
);
Sample rows from `projects`:
316ed8fb3b81402ff6ac8f721bb31192, 42d43fa6f37314365d08692e08680973, c0e6ce89b244764085691a1b8e28cb81, 063627006187, 36.57634, -119.608713, Selma, CA, 93662, None, Selma Unified Sch District, Fresno, f, f, f, f, f, f, Mrs., f, f, Literature & Writing, Literacy & Language, College & Career Prep, Applied Learning, Books, highest poverty, Grades 6-8, 30.0, 555.81, 653.89, 32, f, f, 2014-05-12
90de744e368a7e4883223ca49318ae30, 864eb466462bf704bf7a16a585ef296a, d711e47810900c96f26a5d0be30c446d, 483702008193, 32.911179, -96.72364, Dallas, TX, 75243, urban, Richardson Ind School District, Dallas, f, f, f, f, f, f, Mrs., f, f, Literacy, Literacy & Language, ESL, Literacy & Language, Books, highest poverty, Grades PreK-2, 30.0, 296.47, 348.79, 22, f, f, 2014-05-12
32943bb1063267de6ed19fc0ceb4b9a7, 37f85135259ece793213aca9d8765542, 665c3613013ba0a66e3a2a26b89f1b68, 410327000109, 45.166039, -122.414576, Colton, OR, 97017, rural, Colton School District 53, Clackamas, f, f, f, f, f, f, Mr., f, f, Literacy, Literacy & Language, Mathematics, Math & Science, Technology, high poverty, Grades PreK-2, 30.0, 430.89, 506.93, 17, f, f, 2014-05-11

CREATE TABLE `donations` (
  donationid TEXT PRIMARY KEY,
  projectid TEXT REFERENCES projects(projectid),
  donor_acctid TEXT,
  donor_city TEXT,
  donor_state TEXT,
  donor_zip TEXT,
  is_teacher_acct TEXT,
  donation_timestamp DATETIME,
  donation_to_project REAL,
  donation_optional_support REAL,
  donation_total REAL,
  dollar_amount TEXT,
  donation_included_optional_support TEXT,
  payment_method TEXT,
  payment_included_acct_credit TEXT,
  payment_included_campaign_gift_card TEXT,
  payment_included_web_purchased_gift_card TEXT,
  payment_was_promo_matched TEXT,
  via_giving_page TEXT,
  for_honoree TEXT,
  donation_message TEXT
);
Sample rows from `donations`:
431d720bc3dfd75ae445a5eaa0b0638d, ffffac55ee02a49d1abc87ba6fc61135, 22cbc920c9b5fa08dfb331422f5926b5, Peachtree City, GA, 30269, f, 2011-08-25 14:27:34.807, 42.5, 7.5, 50.0, 10_to_100, t, no_cash_received, f, t, f, f, f, f, I gave to this project because I support the efforts of this teacher with each of her students, and her school, Suder Elementary School.
fcfedba1c8a0ba77d280cace80a909f6, ffffac55ee02a49d1abc87ba6fc61135, 521f1830a77c9dbbf8119d99c6206a16, None, GA, None, f, 2011-11-04 07:54:21.552, 26.83, 4.73, 31.56, 10_to_100, t, creditcard, f, t, f, f, f, f, I donated because I want to support kids in Georgia.
3fa95d29986aa6f401c6719ced3a3ce7, ffffac55ee02a49d1abc87ba6fc61135, 1e0a63fc8141c7ba26b8b44ca0871b90, Rockville, MD, 20853, f, 2011-11-02 22:53:53.019, 55.35, 0.0, 55.35, 10_to_100, f, no_cash_received, t, f, f, f, t, f, The Spark's 'pet' projects include those which support deaf students.  With just a few days left, the Spark's donors fund half of what remains, and challenge others to pull this project through to fruition.

CREATE TABLE `resources` (
  resourceid TEXT PRIMARY KEY,
  projectid TEXT REFERENCES projects(projectid),
  vendorid INTEGER,
  vendor_name TEXT,
  project_resource_type TEXT,
  item_name TEXT,
  item_number TEXT,
  item_unit_price REAL,
  item_quantity INTEGER
);
Sample rows from `resources`:
8a1c1c45bc30d065061912fd9114fcf3, ffffc4f85b60efc5b52347df489d0238, 430, Woodwind and Brasswind, Technology, iPod nano 4th Gen 8GB (Black), 249995.001, 149.0, 4
015d2c4935c50427964a12dc3f584091, ffffac55ee02a49d1abc87ba6fc61135, 82, Best Buy for Business, Technology, Sony bloggie MHS-FS1 - camcorder - internal flash memory, BB11216668, 148.0, 1
26a02944b2f0c25f9abdeacca3ede3ee, ffff97ed93720407d70a2787475932b0, 767, Lakeshore Learning Materials, Supplies, VX748 - Best-Buy Jumbo Crayons - 12-Color Box, VX748, 69.95, 1

","resources, projects","projects.schoolid, resources.projectid, projects.projectid, resources.vendor_name, projects.fulfillment_labor_materials"
world_development_indicators,"What country has the latest trade data with a series code of ""SP.DYN.CDRT.IN
""? List the table name of the country.",SELECT DISTINCT t1.tablename FROM country as t1 inner JOIN indicators as t2 ON t1.countryCode = t2.countryCode WHERE t1.latesttradedata = 2013 AND t2.indicatorcode = 'SP.DYN.CDRT.IN',"CREATE TABLE `country` (
  CountryCode TEXT PRIMARY KEY,
  ShortName TEXT,
  TableName TEXT,
  LongName TEXT,
  Alpha2Code TEXT,
  CurrencyUnit TEXT,
  SpecialNotes TEXT,
  Region TEXT,
  IncomeGroup TEXT,
  Wb2Code TEXT,
  NationalAccountsBaseYear TEXT,
  NationalAccountsReferenceYear TEXT,
  SnaPriceValuation TEXT,
  LendingCategory TEXT,
  OtherGroups TEXT,
  SystemOfNationalAccounts TEXT,
  AlternativeConversionFactor TEXT,
  PppSurveyYear TEXT,
  BalanceOfPaymentsManualInUse TEXT,
  ExternalDebtReportingStatus TEXT,
  SystemOfTrade TEXT,
  GovernmentAccountingConcept TEXT,
  ImfDataDisseminationStandard TEXT,
  LatestPopulationCensus TEXT,
  LatestHouseholdSurvey TEXT,
  SourceOfMostRecentIncomeAndExpenditureData TEXT,
  VitalRegistrationComplete TEXT,
  LatestAgriculturalCensus TEXT,
  LatestIndustrialData INTEGER,
  LatestTradeData INTEGER,
  LatestWaterWithdrawalData INTEGER
);
Sample rows from `country`:
AFG, Afghanistan, Afghanistan, Islamic State of Afghanistan, AF, Afghan afghani, Fiscal year end: March 20; reporting period for national accounts data: FY (from 2013 are CY). National accounts data are sourced from the IMF and differ from the Central Statistics Organization numbers due to exclusion of the opium economy., South Asia, Low income, AF, 2002/03, , Value added at basic prices (VAB), IDA, HIPC, Country uses the 1993 System of National Accounts methodology., , , , Actual, General trade system, Consolidated central government, General Data Dissemination System (GDDS), 1979, Multiple Indicator Cluster Survey (MICS), 2010/11, Integrated household survey (IHS), 2008, , 2013/14, None, 2013, 2000
ALB, Albania, Albania, Republic of Albania, AL, Albanian lek, , Europe & Central Asia, Upper middle income, AL, Original chained constant price data are rescaled., 1996, Value added at basic prices (VAB), IBRD, , Country uses the 1993 System of National Accounts methodology., , Rolling, IMF Balance of Payments Manual, 6th edition., Actual, General trade system, Budgetary central government, General Data Dissemination System (GDDS), 2011, Demographic and Health Survey (DHS), 2008/09, Living Standards Measurement Study Survey (LSMS), 2011/12, Yes, 2012, 2011, 2013, 2006
DZA, Algeria, Algeria, People's Democratic Republic of Algeria, DZ, Algerian dinar, , Middle East & North Africa, Upper middle income, DZ, 1980, , Value added at basic prices (VAB), IBRD, , Country uses the 1968 System of National Accounts methodology., , 2011, IMF Balance of Payments Manual, 6th edition., Actual, Special trade system, Budgetary central government, General Data Dissemination System (GDDS), 2008, Multiple Indicator Cluster Survey (MICS), 2012, Integrated household survey (IHS), 1995, , , 2010, 2013, 2001

CREATE TABLE `indicators` (
  CountryName TEXT,
  CountryCode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  IndicatorName TEXT,
  IndicatorCode TEXT PRIMARY KEY,
  Year INTEGER PRIMARY KEY,
  Value INTEGER
);
Sample rows from `indicators`:
Arab World, ARB, Adolescent fertility rate (births per 1,000 women ages 15-19), SP.ADO.TFRT, 1960, 133
Arab World, ARB, Age dependency ratio (% of working-age population), SP.POP.DPND, 1960, 87
Arab World, ARB, Age dependency ratio, old (% of working-age population), SP.POP.DPND.OL, 1960, 6

","CREATE TABLE `Country` (
  CountryCode TEXT PRIMARY KEY,
  ShortName TEXT,
  TableName TEXT,
  LongName TEXT,
  Alpha2Code TEXT,
  CurrencyUnit TEXT,
  SpecialNotes TEXT,
  Region TEXT,
  IncomeGroup TEXT,
  Wb2Code TEXT,
  NationalAccountsBaseYear TEXT,
  NationalAccountsReferenceYear TEXT,
  SnaPriceValuation TEXT,
  LendingCategory TEXT,
  OtherGroups TEXT,
  SystemOfNationalAccounts TEXT,
  AlternativeConversionFactor TEXT,
  PppSurveyYear TEXT,
  BalanceOfPaymentsManualInUse TEXT,
  ExternalDebtReportingStatus TEXT,
  SystemOfTrade TEXT,
  GovernmentAccountingConcept TEXT,
  ImfDataDisseminationStandard TEXT,
  LatestPopulationCensus TEXT,
  LatestHouseholdSurvey TEXT,
  SourceOfMostRecentIncomeAndExpenditureData TEXT,
  VitalRegistrationComplete TEXT,
  LatestAgriculturalCensus TEXT,
  LatestIndustrialData INTEGER,
  LatestTradeData INTEGER,
  LatestWaterWithdrawalData INTEGER
);
Sample rows from `Country`:
AFG, Afghanistan, Afghanistan, Islamic State of Afghanistan, AF, Afghan afghani, Fiscal year end: March 20; reporting period for national accounts data: FY (from 2013 are CY). National accounts data are sourced from the IMF and differ from the Central Statistics Organization numbers due to exclusion of the opium economy., South Asia, Low income, AF, 2002/03, , Value added at basic prices (VAB), IDA, HIPC, Country uses the 1993 System of National Accounts methodology., , , , Actual, General trade system, Consolidated central government, General Data Dissemination System (GDDS), 1979, Multiple Indicator Cluster Survey (MICS), 2010/11, Integrated household survey (IHS), 2008, , 2013/14, None, 2013, 2000
ALB, Albania, Albania, Republic of Albania, AL, Albanian lek, , Europe & Central Asia, Upper middle income, AL, Original chained constant price data are rescaled., 1996, Value added at basic prices (VAB), IBRD, , Country uses the 1993 System of National Accounts methodology., , Rolling, IMF Balance of Payments Manual, 6th edition., Actual, General trade system, Budgetary central government, General Data Dissemination System (GDDS), 2011, Demographic and Health Survey (DHS), 2008/09, Living Standards Measurement Study Survey (LSMS), 2011/12, Yes, 2012, 2011, 2013, 2006
DZA, Algeria, Algeria, People's Democratic Republic of Algeria, DZ, Algerian dinar, , Middle East & North Africa, Upper middle income, DZ, 1980, , Value added at basic prices (VAB), IBRD, , Country uses the 1968 System of National Accounts methodology., , 2011, IMF Balance of Payments Manual, 6th edition., Actual, Special trade system, Budgetary central government, General Data Dissemination System (GDDS), 2008, Multiple Indicator Cluster Survey (MICS), 2012, Integrated household survey (IHS), 1995, , , 2010, 2013, 2001

CREATE TABLE `Series` (
  SeriesCode TEXT PRIMARY KEY,
  Topic TEXT,
  IndicatorName TEXT,
  ShortDefinition TEXT,
  LongDefinition TEXT,
  UnitOfMeasure TEXT,
  Periodicity TEXT,
  BasePeriod TEXT,
  OtherNotes INTEGER,
  AggregationMethod TEXT,
  LimitationsAndExceptions TEXT,
  NotesFromOriginalSource TEXT,
  GeneralComments TEXT,
  Source TEXT,
  StatisticalConceptAndMethodology TEXT,
  DevelopmentRelevance TEXT,
  RelatedSourceLinks TEXT,
  OtherWebLinks INTEGER,
  RelatedIndicators INTEGER,
  LicenseType TEXT
);
Sample rows from `Series`:
BN.KLT.DINV.CD, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net (BoP, current US$), , Foreign direct investment are the net inflows of investment to acquire a lasting management interest (10 percent or more of voting stock) in an enterprise operating in an economy other than that of the investor. It is the sum of equity capital, reinvestme, , Annual, , None, , , , Note: Data are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6) and are only available from 2005 onwards. In BPM6, the headings of the financial account have been changed from credits and debits to net acquisition of financial ass, International Monetary Fund, Balance of Payments Statistics Yearbook and data files., , , , None, None, Open
BX.KLT.DINV.WD.GD.ZS, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net inflows (% of GDP), , Foreign direct investment are the net inflows of investment to acquire a lasting management interest (10 percent or more of voting stock) in an enterprise operating in an economy other than that of the investor. It is the sum of equity capital, reinvestme, , Annual, , None, Weighted average, FDI data do not give a complete picture of international investment in an economy. Balance of payments data on FDI do not include capital raised locally, an important source of investment financing in some developing countries. In addition, FDI data omit , , Note: Data starting from 2005 are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6)., International Monetary Fund, International Financial Statistics and Balance of Payments databases, World Bank, International Debt Statistics, and World Bank and OECD GDP estimates., Data on equity flows are based on balance of payments data reported by the International Monetary Fund (IMF). Foreign direct investment (FDI) data are supplemented by the World Bank staff estimates using data from the United Nations Conference on Trade an, Private financial flows - equity and debt - account for the bulk of development finance. Equity flows comprise foreign direct investment (FDI) and portfolio equity. Debt flows are financing raised through bond issuance, bank lending, and supplier credits., , None, None, Open
BX.KLT.DINV.CD.WD, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net inflows (BoP, current US$), , Foreign direct investment refers to direct investment equity flows in the reporting economy. It is the sum of equity capital, reinvestment of earnings, and other capital. Direct investment is a category of cross-border investment associated with a residen, , Annual, , None, Sum, FDI data do not give a complete picture of international investment in an economy. Balance of payments data on FDI do not include capital raised locally, an important source of investment financing in some developing countries. In addition, FDI data omit , , Note: Data starting from 2005 are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6)., International Monetary Fund, Balance of Payments database, supplemented by data from the United Nations Conference on Trade and Development and official national sources., Data on equity flows are based on balance of payments data reported by the International Monetary Fund (IMF). Foreign direct investment (FDI) data are supplemented by the World Bank staff estimates using data from the United Nations Conference on Trade an, Private financial flows - equity and debt - account for the bulk of development finance. Equity flows comprise foreign direct investment (FDI) and portfolio equity. Debt flows are financing raised through bond issuance, bank lending, and supplier credits., , None, None, Open

CREATE TABLE `CountryNotes` (
  Countrycode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Description TEXT
);
Sample rows from `CountryNotes`:
ABW, EG.EGY.PRIM.PP.KD, Sources: Estimated based on UN Energy Statistics (2014); World Development Indicators, WDI (2014)
ABW, EG.ELC.RNEW.ZS, Sources: UN Energy Statistics (2014)
ABW, EG.FEC.RNEW.ZS, Sources: UN Energy Statistics (2014)

CREATE TABLE `Footnotes` (
  Countrycode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Year TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `Footnotes`:
ABW, AG.LND.FRST.K2, YR1990, Not specified
ABW, AG.LND.FRST.K2, YR2000, Not specified
ABW, AG.LND.FRST.K2, YR2005, Not specified

CREATE TABLE `Indicators` (
  CountryName TEXT,
  CountryCode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  IndicatorName TEXT,
  IndicatorCode TEXT PRIMARY KEY,
  Year INTEGER PRIMARY KEY,
  Value INTEGER
);
Sample rows from `Indicators`:
Arab World, ARB, Adolescent fertility rate (births per 1,000 women ages 15-19), SP.ADO.TFRT, 1960, 133
Arab World, ARB, Age dependency ratio (% of working-age population), SP.POP.DPND, 1960, 87
Arab World, ARB, Age dependency ratio, old (% of working-age population), SP.POP.DPND.OL, 1960, 6

CREATE TABLE `SeriesNotes` (
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Year TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `SeriesNotes`:
SP.ADO.TFRT, YR1960, Interpolated using data for 1957 and 1962.
SP.DYN.AMRT.FE, YR1960, Interpolated using data for 1957 and 1962, if the data source is United Nations World Population Prospects.
SP.DYN.AMRT.MA, YR1960, Interpolated using data for 1957 and 1962, if the data source is United Nations World Population Prospects.

","country, indicators","country.tablename, country.countryCode, indicators.countryCode, country.latesttradedata, indicators.indicatorcode"
software_company,"Among the customers over 30, how many of them are Machine-op-inspcts?",SELECT COUNT(id) FROM customers WHERE occupation = 'Machine-op-inspct' AND age > 30,"CREATE TABLE `customers` (
  ID INTEGER,
  SEX TEXT,
  MARITAL_STATUS TEXT,
  GEOID INTEGER REFERENCES Demog(None),
  EDUCATIONNUM INTEGER,
  OCCUPATION TEXT,
  age INTEGER
);
Sample rows from `customers`:
0, Male, Never-married, 61, 7, Machine-op-inspct, 62
1, Male, Married-civ-spouse, 70, 3, Handlers-cleaners, 78
2, Male, Never-married, 53, 7, Machine-op-inspct, 69

","CREATE TABLE `Demog` (
  GEOID INTEGER,
  INHABITANTS_K REAL,
  INCOME_K REAL,
  A_VAR1 REAL,
  A_VAR2 REAL,
  A_VAR3 REAL,
  A_VAR4 REAL,
  A_VAR5 REAL,
  A_VAR6 REAL,
  A_VAR7 REAL,
  A_VAR8 REAL,
  A_VAR9 REAL,
  A_VAR10 REAL,
  A_VAR11 REAL,
  A_VAR12 REAL,
  A_VAR13 REAL,
  A_VAR14 REAL,
  A_VAR15 REAL,
  A_VAR16 REAL,
  A_VAR17 REAL,
  A_VAR18 REAL
);
Sample rows from `Demog`:
0, 30.046, 2631.47, 6.084, 5.79, 8.595, 3.935, 6.362, 8.626, 4.624, 8.324, 5.233, 6.232, 5.205, 8.231, 6.746, 8.679, 5.292, 3.5, 5.512, 5.783
1, 36.25, 3012.75, 4.604, 8.309, 6.007, 5.938, 8.773, 3.579, 6.349, 4.694, 6.884, 7.062, 7.319, 3.72, 6.405, 7.202, 4.932, 7.969, 8.15, 5.633
2, 47.645, 2192.41, 4.911, 8.557, 5.934, 6.494, 9.172, 3.202, 6.157, 4.822, 7.942, 7.901, 7.928, 2.33, 6.029, 6.455, 4.72, 8.564, 8.342, 4.938

CREATE TABLE `mailings3` (
  REFID INTEGER,
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `mailings3`:
60000, 2007-07-01 12:00:00.0, false
60001, 2007-07-01 12:00:00.0, false
60002, 2007-07-01 12:00:00.0, false

CREATE TABLE `Customers` (
  ID INTEGER,
  SEX TEXT,
  MARITAL_STATUS TEXT,
  GEOID INTEGER REFERENCES Demog(None),
  EDUCATIONNUM INTEGER,
  OCCUPATION TEXT,
  age INTEGER
);
Sample rows from `Customers`:
0, Male, Never-married, 61, 7, Machine-op-inspct, 62
1, Male, Married-civ-spouse, 70, 3, Handlers-cleaners, 78
2, Male, Never-married, 53, 7, Machine-op-inspct, 69

CREATE TABLE `Mailings1_2` (
  REFID INTEGER REFERENCES Customers(None),
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `Mailings1_2`:
0, 2007-02-01 12:00:00.0, false
1, 2007-02-01 12:00:00.0, false
2, 2007-02-01 12:00:00.0, false

CREATE TABLE `Sales` (
  EVENTID INTEGER,
  REFID INTEGER REFERENCES Customers(None),
  EVENT_DATE DATETIME,
  AMOUNT REAL
);
Sample rows from `Sales`:
0, 0, 2006-12-21 12:00:00.0, 17.907
1, 0, 2006-12-25 12:00:00.0, 17.401
2, 0, 2007-01-26 12:00:00.0, 13.277

",customers,"id, occupation, age"
talkingdata,How many female users use ZenFone 5 devices?,SELECT COUNT(t1.gender) fROM gender_age as t1 inner JOIN phone_brand_device_model2 as t2 ON t2.device_id = t1.device_id WHERE t1.gender = 'f' AND t2.device_model = 'Zenfone 5',"CREATE TABLE `gender_age` (
  device_id INTEGER REFERENCES phone_brand_device_model2(device_id),
  gender TEXT,
  age INTEGER,
  group TEXT
);
Sample rows from `gender_age`:
-9221086586254644858, M, 29, M29-31
-9221079146476055829, None, None, None
-9221066489596332354, M, 31, M29-31

CREATE TABLE `phone_brand_device_model2` (
  device_id INTEGER PRIMARY KEY,
  phone_brand TEXT PRIMARY KEY,
  device_model TEXT PRIMARY KEY
);
Sample rows from `phone_brand_device_model2`:
-9223321966609553846, 小米, 红米note
-9223067244542181226, vivo, Y19T
-9223042152723782980, 小米, MI 3

","CREATE TABLE `app_all` (
  app_id INTEGER
);
Sample rows from `app_all`:
-9223281467940916832
-9222877069545393219
-9222785464897897681

CREATE TABLE `app_events` (
  event_id INTEGER PRIMARY KEY REFERENCES events(event_id),
  app_id INTEGER PRIMARY KEY,
  is_installed INTEGER,
  is_active INTEGER
);
Sample rows from `app_events`:
2, -8942695423876075857, 1, 0
2, -8022267440849930066, 1, 0
2, -5720078949152207372, 1, 0

CREATE TABLE `app_events_relevant` (
  event_id INTEGER PRIMARY KEY REFERENCES events_relevant(event_id),
  app_id INTEGER PRIMARY KEY REFERENCES app_all(app_id),
  is_installed INTEGER,
  is_active INTEGER
);
Sample rows from `app_events_relevant`:
2, -8942695423876075857, 1, 0
2, -8022267440849930066, 1, 0
2, -5720078949152207372, 1, 0

CREATE TABLE `app_labels` (
  app_id INTEGER REFERENCES app_all(app_id),
  label_id INTEGER REFERENCES label_categories(label_id)
);
Sample rows from `app_labels`:
7324884708820027918, 251
-4494216993218550286, 251
6058196446775239644, 406

CREATE TABLE `events` (
  event_id INTEGER,
  device_id INTEGER,
  timestamp DATETIME,
  longitude REAL,
  latitude REAL
);
Sample rows from `events`:
1, 29182687948017175, 2016-05-01 00:55:25.0, 121.0, 31.0
2, -6401643145415154744, 2016-05-01 00:54:12.0, 104.0, 31.0
3, -4833982096941402721, 2016-05-01 00:08:05.0, 107.0, 30.0

CREATE TABLE `events_relevant` (
  event_id INTEGER,
  device_id INTEGER REFERENCES gender_age(device_id),
  timestamp DATETIME,
  longitude REAL,
  latitude REAL
);
Sample rows from `events_relevant`:
2, None, -8942695423876075857, 1.0, 0.0
6, None, -8764672938472212518, 1.0, 1.0
7, None, -9050100410106163077, 1.0, 0.0

CREATE TABLE `gender_age` (
  device_id INTEGER REFERENCES phone_brand_device_model2(device_id),
  gender TEXT,
  age INTEGER,
  group TEXT
);
Sample rows from `gender_age`:
-9221086586254644858, M, 29, M29-31
-9221079146476055829, None, None, None
-9221066489596332354, M, 31, M29-31

CREATE TABLE `gender_age_test` (
  device_id INTEGER
);
Sample rows from `gender_age_test`:
-9223321966609553846
-9223042152723782980
-9222896629442493034

CREATE TABLE `gender_age_train` (
  device_id INTEGER,
  gender TEXT,
  age INTEGER,
  group TEXT
);
Sample rows from `gender_age_train`:
-9223067244542181226, M, 24, M23-26
-9222956879900151005, M, 36, M32-38
-9222754701995937853, M, 29, M29-31

CREATE TABLE `label_categories` (
  label_id INTEGER,
  category TEXT
);
Sample rows from `label_categories`:
1, None
2, game-game type
3, game-Game themes

CREATE TABLE `phone_brand_device_model2` (
  device_id INTEGER PRIMARY KEY,
  phone_brand TEXT PRIMARY KEY,
  device_model TEXT PRIMARY KEY
);
Sample rows from `phone_brand_device_model2`:
-9223321966609553846, 小米, 红米note
-9223067244542181226, vivo, Y19T
-9223042152723782980, 小米, MI 3

CREATE TABLE `sample_submission` (
  device_id INTEGER,
  F23- REAL,
  F24-26 REAL,
  F27-28 REAL,
  F29-32 REAL,
  F33-42 REAL,
  F43+ REAL,
  M22- REAL,
  M23-26 REAL,
  M27-28 REAL,
  M29-31 REAL,
  M32-38 REAL,
  M39+ REAL
);
Sample rows from `sample_submission`:
-9223321966609553846, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833
-9223042152723782980, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833
-9222896629442493034, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833

","gender_age, phone_brand_device_model2","gender_age.gender, phone_brand_device_model2.device_id, gender_age.device_id, phone_brand_device_model2.device_model"
food_inspection_2,Did license number 1222441 pass the inspection and what is the zip code number of it?,"SELECT DISTINCT t2.results, t1.zip FROM establishment as t1 inner JOIN inspection as t2 ON t1.license_no = t2.license_no WHERE t1.license_no = 1222441","CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

","establishment, inspection","inspection.results, establishment.zip, establishment.license_no, inspection.license_no"
sales,What is the first name of employee who handled sales for customer called Abigail?,SELECT DISTINCT t3.firstname FROM customers as t1 inner JOIN sales as t2 ON t1.customerid = t2.customerid inner JOIN employees as t3 ON t2.salesPersonID = t3.employeeid WHERE t1.firstname = 'Abigail',"CREATE TABLE `customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

CREATE TABLE `sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

CREATE TABLE `employees` (
  EmployeeID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `employees`:
1, Abraham, e, Bennet
2, Reginald, l, Blotchet-Halls
3, Cheryl, a, Carson

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Employees`:
1, Abraham, e, Bennet
2, Reginald, l, Blotchet-Halls
3, Cheryl, a, Carson

CREATE TABLE `Products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

CREATE TABLE `Sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `Sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

","customers, sales, employees","employees.firstname, customers.customerid, sales.customerid, sales.salesPersonID, employees.employeeid, customers.firstname"
music_platform_2,"Which ""music"" podcast has the longest title?",SELECT t2.title FROM categories as t1 inner JOIN podcasts as t2 ON t2.podcast_id = t1.podcast_id WHERE t1.category = 'music' ORDER BY length(t2.title) DESC LIMIT 1,"CREATE TABLE `categories` (
  podcast_id TEXT PRIMARY KEY REFERENCES podcasts(None),
  category TEXT PRIMARY KEY
);
Sample rows from `categories`:
c61aa81c9b929a66f0c1db6cbe5d8548, arts
c61aa81c9b929a66f0c1db6cbe5d8548, arts-performing-arts
c61aa81c9b929a66f0c1db6cbe5d8548, music

CREATE TABLE `podcasts` (
  podcast_id TEXT PRIMARY KEY,
  itunes_id INTEGER,
  slug TEXT,
  itunes_url TEXT,
  title TEXT
);
Sample rows from `podcasts`:
a00018b54eb342567c94dacfb2a3e504, 1313466221, scaling-global, https://podcasts.apple.com/us/podcast/scaling-global/id1313466221, Scaling Global
a00043d34e734b09246d17dc5d56f63c, 158973461, cornerstone-baptist-church-of-orlando, https://podcasts.apple.com/us/podcast/cornerstone-baptist-church-of-orlando/id158973461, Cornerstone Baptist Church of Orlando
a0004b1ef445af9dc84dad1e7821b1e3, 139076942, mystery-dancing-in-the-dark, https://podcasts.apple.com/us/podcast/mystery-dancing-in-the-dark/id139076942, Mystery: Dancing in the Dark

","CREATE TABLE `runs` (
  run_at TEXT,
  max_rowid INTEGER,
  reviews_added INTEGER
);
Sample rows from `runs`:
2021-05-10 02:53:00, 3266481, 1215223
2021-06-06 21:34:36, 3300773, 13139
2021-07-02 18:04:55, 3329699, 11561

CREATE TABLE `podcasts` (
  podcast_id TEXT PRIMARY KEY,
  itunes_id INTEGER,
  slug TEXT,
  itunes_url TEXT,
  title TEXT
);
Sample rows from `podcasts`:
a00018b54eb342567c94dacfb2a3e504, 1313466221, scaling-global, https://podcasts.apple.com/us/podcast/scaling-global/id1313466221, Scaling Global
a00043d34e734b09246d17dc5d56f63c, 158973461, cornerstone-baptist-church-of-orlando, https://podcasts.apple.com/us/podcast/cornerstone-baptist-church-of-orlando/id158973461, Cornerstone Baptist Church of Orlando
a0004b1ef445af9dc84dad1e7821b1e3, 139076942, mystery-dancing-in-the-dark, https://podcasts.apple.com/us/podcast/mystery-dancing-in-the-dark/id139076942, Mystery: Dancing in the Dark

CREATE TABLE `reviews` (
  podcast_id TEXT REFERENCES podcasts(None),
  title TEXT,
  content TEXT,
  rating INTEGER,
  author_id TEXT,
  created_at TEXT
);
Sample rows from `reviews`:
c61aa81c9b929a66f0c1db6cbe5d8548, really interesting!, Thanks for providing these insights.  Really enjoy the variety and depth -- please keep them coming!, 5, F7E5A318989779D, 2018-04-24T12:05:16-07:00
c61aa81c9b929a66f0c1db6cbe5d8548, Must listen for anyone interested in the arts!!!, Super excited to see this podcast grow. So many fun topics to talk about...Shari is really engaging. Definitely subscribing and would recommend to anyone interested in the arts!!, 5, F6BF5472689BD12, 2018-05-09T18:14:32-07:00
ad4f2bf69c72b8db75978423c25f379e, nauseatingly left, I'm a liberal myself, but its pretty obvious and annoying that they're trying to push their beliefs on the listeners. Get a more politically diverse production staff, we like to see issues from multiple point of views not just yours., 1, 1AB95B8E6E1309E, 2019-06-11T14:53:39-07:00

CREATE TABLE `categories` (
  podcast_id TEXT PRIMARY KEY REFERENCES podcasts(None),
  category TEXT PRIMARY KEY
);
Sample rows from `categories`:
c61aa81c9b929a66f0c1db6cbe5d8548, arts
c61aa81c9b929a66f0c1db6cbe5d8548, arts-performing-arts
c61aa81c9b929a66f0c1db6cbe5d8548, music

","categories, podcasts","podcasts.title, podcasts.podcast_id, categories.podcast_id, categories.category"
movies_4,"What is the iso code of ""Kyrgyz Republic""?",SELECT country_iso_code FROM country WHERE country_name = 'Kyrgyz Republic',"CREATE TABLE `country` (
  country_id INTEGER,
  country_iso_code TEXT,
  country_name TEXT
);
Sample rows from `country`:
128, AE, United Arab Emirates
129, AF, Afghanistan
130, AO, Angola

","CREATE TABLE `country` (
  country_id INTEGER,
  country_iso_code TEXT,
  country_name TEXT
);
Sample rows from `country`:
128, AE, United Arab Emirates
129, AF, Afghanistan
130, AO, Angola

CREATE TABLE `department` (
  department_id INTEGER,
  department_name TEXT
);
Sample rows from `department`:
1, Camera
2, Directing
3, Production

CREATE TABLE `gender` (
  gender_id INTEGER,
  gender TEXT
);
Sample rows from `gender`:
0, Unspecified
1, Female
2, Male

CREATE TABLE `genre` (
  genre_id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
12, Adventure
14, Fantasy
16, Animation

CREATE TABLE `keyword` (
  keyword_id INTEGER,
  keyword_name TEXT
);
Sample rows from `keyword`:
30, individual
65, holiday
74, germany

CREATE TABLE `language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `language`:
24574, en, English
24575, sv, svenska
24576, de, Deutsch

CREATE TABLE `language_role` (
  role_id INTEGER,
  language_role TEXT
);
Sample rows from `language_role`:
1, Original
2, Spoken

CREATE TABLE `movie` (
  movie_id INTEGER,
  title TEXT,
  budget INTEGER,
  homepage TEXT,
  overview TEXT,
  popularity REAL,
  release_date DATE,
  revenue INTEGER,
  runtime INTEGER,
  movie_status TEXT,
  tagline TEXT,
  vote_average REAL,
  vote_count INTEGER
);
Sample rows from `movie`:
5, Four Rooms, 4000000, , It's Ted the Bellhop's first night on the job...and the hotel's very unusual guests are about to place him in some outrageous predicaments. It seems that this evening's room service is serving up one unbelievable happening after another., 22.87623, 1995-12-09, 4300000, 98, Released, Twelve outrageous guests. Four scandalous requests. And one lone bellhop, in his first day on the job, who's in for the wildest New year's Eve of his life., 6.5, 530
11, Star Wars, 11000000, http://www.starwars.com/films/star-wars-episode-iv-a-new-hope, Princess Leia is captured and held hostage by the evil Imperial forces in their effort to take over the galactic Empire. Venturesome Luke Skywalker and dashing captain Han Solo team together with the loveable robot duo R2-D2 and C-3PO to rescue the beauti, 126.393695, 1977-05-25, 775398007, 121, Released, A long time ago in a galaxy far, far away..., 8.1, 6624
12, Finding Nemo, 94000000, http://movies.disney.com/finding-nemo, Nemo, an adventurous young clownfish, is unexpectedly taken from his Great Barrier Reef home to a dentist's office aquarium. It's up to his worrisome father Marlin and a friendly but forgetful fish Dory to bring Nemo home -- meeting vegetarian sharks, sur, 85.688789, 2003-05-30, 940335536, 100, Released, There are 3.7 trillion fish in the ocean, they're looking for one., 7.6, 6122

CREATE TABLE `movie_genres` (
  movie_id INTEGER REFERENCES movie(movie_id),
  genre_id INTEGER REFERENCES genre(genre_id)
);
Sample rows from `movie_genres`:
5, 35
5, 80
11, 12

CREATE TABLE `movie_languages` (
  movie_id INTEGER REFERENCES movie(movie_id),
  language_id INTEGER REFERENCES language(language_id),
  language_role_id INTEGER REFERENCES language_role(role_id)
);
Sample rows from `movie_languages`:
5, 24574, 2
11, 24574, 2
12, 24574, 2

CREATE TABLE `person` (
  person_id INTEGER,
  person_name TEXT
);
Sample rows from `person`:
1, George Lucas
2, Mark Hamill
3, Harrison Ford

CREATE TABLE `movie_crew` (
  movie_id INTEGER REFERENCES movie(movie_id),
  person_id INTEGER REFERENCES person(person_id),
  department_id INTEGER REFERENCES department(department_id),
  job TEXT
);
Sample rows from `movie_crew`:
285, 120, 1, Director of Photography
285, 1704, 2, Director
285, 770, 3, Producer

CREATE TABLE `production_company` (
  company_id INTEGER,
  company_name TEXT
);
Sample rows from `production_company`:
1, Lucasfilm
2, Walt Disney Pictures
3, Pixar Animation Studios

CREATE TABLE `production_country` (
  movie_id INTEGER REFERENCES movie(movie_id),
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `production_country`:
5, 214
11, 214
12, 214

CREATE TABLE `movie_cast` (
  movie_id INTEGER REFERENCES movie(movie_id),
  person_id INTEGER REFERENCES person(person_id),
  character_name TEXT,
  gender_id INTEGER REFERENCES gender(gender_id),
  cast_order INTEGER
);
Sample rows from `movie_cast`:
285, 85, Captain Jack Sparrow, 2, 0
285, 114, Will Turner, 2, 1
285, 116, Elizabeth Swann, 1, 2

CREATE TABLE `movie_keywords` (
  movie_id INTEGER REFERENCES movie(None),
  keyword_id INTEGER REFERENCES keyword(None)
);
Sample rows from `movie_keywords`:
5, 612
5, 613
5, 616

CREATE TABLE `movie_company` (
  movie_id INTEGER REFERENCES movie(None),
  company_id INTEGER REFERENCES production_company(None)
);
Sample rows from `movie_company`:
5, 14
5, 59
11, 1

",country,"country_iso_code, country_name"
world_development_indicators,"From 1960 to 1965, which country had the highest Death rate, crude (per 1,000 people)?","SELECT countryname FROM indicators WHERE year BETWEEN 1960 AND 1965 AND indicatorname = 'Death rate, crude (per 1,000 people)' ORDER BY value DESC LIMIT 1","CREATE TABLE `indicators` (
  CountryName TEXT,
  CountryCode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  IndicatorName TEXT,
  IndicatorCode TEXT PRIMARY KEY,
  Year INTEGER PRIMARY KEY,
  Value INTEGER
);
Sample rows from `indicators`:
Arab World, ARB, Adolescent fertility rate (births per 1,000 women ages 15-19), SP.ADO.TFRT, 1960, 133
Arab World, ARB, Age dependency ratio (% of working-age population), SP.POP.DPND, 1960, 87
Arab World, ARB, Age dependency ratio, old (% of working-age population), SP.POP.DPND.OL, 1960, 6

","CREATE TABLE `Country` (
  CountryCode TEXT PRIMARY KEY,
  ShortName TEXT,
  TableName TEXT,
  LongName TEXT,
  Alpha2Code TEXT,
  CurrencyUnit TEXT,
  SpecialNotes TEXT,
  Region TEXT,
  IncomeGroup TEXT,
  Wb2Code TEXT,
  NationalAccountsBaseYear TEXT,
  NationalAccountsReferenceYear TEXT,
  SnaPriceValuation TEXT,
  LendingCategory TEXT,
  OtherGroups TEXT,
  SystemOfNationalAccounts TEXT,
  AlternativeConversionFactor TEXT,
  PppSurveyYear TEXT,
  BalanceOfPaymentsManualInUse TEXT,
  ExternalDebtReportingStatus TEXT,
  SystemOfTrade TEXT,
  GovernmentAccountingConcept TEXT,
  ImfDataDisseminationStandard TEXT,
  LatestPopulationCensus TEXT,
  LatestHouseholdSurvey TEXT,
  SourceOfMostRecentIncomeAndExpenditureData TEXT,
  VitalRegistrationComplete TEXT,
  LatestAgriculturalCensus TEXT,
  LatestIndustrialData INTEGER,
  LatestTradeData INTEGER,
  LatestWaterWithdrawalData INTEGER
);
Sample rows from `Country`:
AFG, Afghanistan, Afghanistan, Islamic State of Afghanistan, AF, Afghan afghani, Fiscal year end: March 20; reporting period for national accounts data: FY (from 2013 are CY). National accounts data are sourced from the IMF and differ from the Central Statistics Organization numbers due to exclusion of the opium economy., South Asia, Low income, AF, 2002/03, , Value added at basic prices (VAB), IDA, HIPC, Country uses the 1993 System of National Accounts methodology., , , , Actual, General trade system, Consolidated central government, General Data Dissemination System (GDDS), 1979, Multiple Indicator Cluster Survey (MICS), 2010/11, Integrated household survey (IHS), 2008, , 2013/14, None, 2013, 2000
ALB, Albania, Albania, Republic of Albania, AL, Albanian lek, , Europe & Central Asia, Upper middle income, AL, Original chained constant price data are rescaled., 1996, Value added at basic prices (VAB), IBRD, , Country uses the 1993 System of National Accounts methodology., , Rolling, IMF Balance of Payments Manual, 6th edition., Actual, General trade system, Budgetary central government, General Data Dissemination System (GDDS), 2011, Demographic and Health Survey (DHS), 2008/09, Living Standards Measurement Study Survey (LSMS), 2011/12, Yes, 2012, 2011, 2013, 2006
DZA, Algeria, Algeria, People's Democratic Republic of Algeria, DZ, Algerian dinar, , Middle East & North Africa, Upper middle income, DZ, 1980, , Value added at basic prices (VAB), IBRD, , Country uses the 1968 System of National Accounts methodology., , 2011, IMF Balance of Payments Manual, 6th edition., Actual, Special trade system, Budgetary central government, General Data Dissemination System (GDDS), 2008, Multiple Indicator Cluster Survey (MICS), 2012, Integrated household survey (IHS), 1995, , , 2010, 2013, 2001

CREATE TABLE `Series` (
  SeriesCode TEXT PRIMARY KEY,
  Topic TEXT,
  IndicatorName TEXT,
  ShortDefinition TEXT,
  LongDefinition TEXT,
  UnitOfMeasure TEXT,
  Periodicity TEXT,
  BasePeriod TEXT,
  OtherNotes INTEGER,
  AggregationMethod TEXT,
  LimitationsAndExceptions TEXT,
  NotesFromOriginalSource TEXT,
  GeneralComments TEXT,
  Source TEXT,
  StatisticalConceptAndMethodology TEXT,
  DevelopmentRelevance TEXT,
  RelatedSourceLinks TEXT,
  OtherWebLinks INTEGER,
  RelatedIndicators INTEGER,
  LicenseType TEXT
);
Sample rows from `Series`:
BN.KLT.DINV.CD, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net (BoP, current US$), , Foreign direct investment are the net inflows of investment to acquire a lasting management interest (10 percent or more of voting stock) in an enterprise operating in an economy other than that of the investor. It is the sum of equity capital, reinvestme, , Annual, , None, , , , Note: Data are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6) and are only available from 2005 onwards. In BPM6, the headings of the financial account have been changed from credits and debits to net acquisition of financial ass, International Monetary Fund, Balance of Payments Statistics Yearbook and data files., , , , None, None, Open
BX.KLT.DINV.WD.GD.ZS, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net inflows (% of GDP), , Foreign direct investment are the net inflows of investment to acquire a lasting management interest (10 percent or more of voting stock) in an enterprise operating in an economy other than that of the investor. It is the sum of equity capital, reinvestme, , Annual, , None, Weighted average, FDI data do not give a complete picture of international investment in an economy. Balance of payments data on FDI do not include capital raised locally, an important source of investment financing in some developing countries. In addition, FDI data omit , , Note: Data starting from 2005 are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6)., International Monetary Fund, International Financial Statistics and Balance of Payments databases, World Bank, International Debt Statistics, and World Bank and OECD GDP estimates., Data on equity flows are based on balance of payments data reported by the International Monetary Fund (IMF). Foreign direct investment (FDI) data are supplemented by the World Bank staff estimates using data from the United Nations Conference on Trade an, Private financial flows - equity and debt - account for the bulk of development finance. Equity flows comprise foreign direct investment (FDI) and portfolio equity. Debt flows are financing raised through bond issuance, bank lending, and supplier credits., , None, None, Open
BX.KLT.DINV.CD.WD, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net inflows (BoP, current US$), , Foreign direct investment refers to direct investment equity flows in the reporting economy. It is the sum of equity capital, reinvestment of earnings, and other capital. Direct investment is a category of cross-border investment associated with a residen, , Annual, , None, Sum, FDI data do not give a complete picture of international investment in an economy. Balance of payments data on FDI do not include capital raised locally, an important source of investment financing in some developing countries. In addition, FDI data omit , , Note: Data starting from 2005 are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6)., International Monetary Fund, Balance of Payments database, supplemented by data from the United Nations Conference on Trade and Development and official national sources., Data on equity flows are based on balance of payments data reported by the International Monetary Fund (IMF). Foreign direct investment (FDI) data are supplemented by the World Bank staff estimates using data from the United Nations Conference on Trade an, Private financial flows - equity and debt - account for the bulk of development finance. Equity flows comprise foreign direct investment (FDI) and portfolio equity. Debt flows are financing raised through bond issuance, bank lending, and supplier credits., , None, None, Open

CREATE TABLE `CountryNotes` (
  Countrycode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Description TEXT
);
Sample rows from `CountryNotes`:
ABW, EG.EGY.PRIM.PP.KD, Sources: Estimated based on UN Energy Statistics (2014); World Development Indicators, WDI (2014)
ABW, EG.ELC.RNEW.ZS, Sources: UN Energy Statistics (2014)
ABW, EG.FEC.RNEW.ZS, Sources: UN Energy Statistics (2014)

CREATE TABLE `Footnotes` (
  Countrycode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Year TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `Footnotes`:
ABW, AG.LND.FRST.K2, YR1990, Not specified
ABW, AG.LND.FRST.K2, YR2000, Not specified
ABW, AG.LND.FRST.K2, YR2005, Not specified

CREATE TABLE `Indicators` (
  CountryName TEXT,
  CountryCode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  IndicatorName TEXT,
  IndicatorCode TEXT PRIMARY KEY,
  Year INTEGER PRIMARY KEY,
  Value INTEGER
);
Sample rows from `Indicators`:
Arab World, ARB, Adolescent fertility rate (births per 1,000 women ages 15-19), SP.ADO.TFRT, 1960, 133
Arab World, ARB, Age dependency ratio (% of working-age population), SP.POP.DPND, 1960, 87
Arab World, ARB, Age dependency ratio, old (% of working-age population), SP.POP.DPND.OL, 1960, 6

CREATE TABLE `SeriesNotes` (
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Year TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `SeriesNotes`:
SP.ADO.TFRT, YR1960, Interpolated using data for 1957 and 1962.
SP.DYN.AMRT.FE, YR1960, Interpolated using data for 1957 and 1962, if the data source is United Nations World Population Prospects.
SP.DYN.AMRT.MA, YR1960, Interpolated using data for 1957 and 1962, if the data source is United Nations World Population Prospects.

",indicators,"countryname, indicatorname, value"
soccer_2016,"In the players, how many were out by hit wicket?",SELECT player_out FROM wicket_taken as t1 inner JOIN out_type as t2 ON t1.kind_out = t2.out_id WHERE out_name = 'hit wicket',"CREATE TABLE `wicket_taken` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Player_Out INTEGER REFERENCES Player(Player_Id),
  Kind_Out INTEGER REFERENCES Out_Type(Out_Id),
  Fielders INTEGER REFERENCES Player(Player_Id),
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `wicket_taken`:
335987, 2, 1, 6, 2, None, 2
335987, 3, 2, 8, 2, None, 2
335987, 5, 5, 9, 1, 83, 2

CREATE TABLE `out_type` (
  Out_Id INTEGER,
  Out_Name TEXT
);
Sample rows from `out_type`:
1, caught
2, bowled
3, run out

","CREATE TABLE `Batting_Style` (
  Batting_Id INTEGER,
  Batting_hand TEXT
);
Sample rows from `Batting_Style`:
1, Left-hand bat
2, Right-hand bat

CREATE TABLE `Bowling_Style` (
  Bowling_Id INTEGER,
  Bowling_skill TEXT
);
Sample rows from `Bowling_Style`:
1, Right-arm medium
2, Right-arm offbreak
3, Right-arm fast-medium

CREATE TABLE `City` (
  City_Id INTEGER,
  City_Name TEXT,
  Country_id INTEGER
);
Sample rows from `City`:
1, Bangalore, 1
2, Chandigarh, 1
3, Delhi, 1

CREATE TABLE `Country` (
  Country_Id INTEGER REFERENCES Country(Country_Id),
  Country_Name TEXT
);
Sample rows from `Country`:
1, India
2, South Africa
3, U.A.E

CREATE TABLE `Extra_Type` (
  Extra_Id INTEGER,
  Extra_Name TEXT
);
Sample rows from `Extra_Type`:
1, legbyes
2, wides
3, byes

CREATE TABLE `Extra_Runs` (
  Match_Id INTEGER PRIMARY KEY,
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Extra_Type_Id INTEGER REFERENCES Extra_Type(Extra_Id),
  Extra_Runs INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Extra_Runs`:
335987, 1, 1, 1, 1, 1
335987, 1, 2, 2, 1, 2
335987, 1, 3, 2, 1, 1

CREATE TABLE `Out_Type` (
  Out_Id INTEGER,
  Out_Name TEXT
);
Sample rows from `Out_Type`:
1, caught
2, bowled
3, run out

CREATE TABLE `Outcome` (
  Outcome_Id INTEGER,
  Outcome_Type TEXT
);
Sample rows from `Outcome`:
1, Result
2, No Result
3, Superover

CREATE TABLE `Player` (
  Player_Id INTEGER,
  Player_Name TEXT,
  DOB DATE,
  Batting_hand INTEGER REFERENCES Batting_Style(Batting_Id),
  Bowling_skill INTEGER REFERENCES Bowling_Style(Bowling_Id),
  Country_Name INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Player`:
1, SC Ganguly, 1972-07-08, 1, 1, 1
2, BB McCullum, 1981-09-27, 2, 1, 4
3, RT Ponting, 1974-12-19, 2, 1, 5

CREATE TABLE `Rolee` (
  Role_Id INTEGER,
  Role_Desc TEXT
);
Sample rows from `Rolee`:
1, Captain
2, Keeper
3, Player

CREATE TABLE `Season` (
  Season_Id INTEGER,
  Man_of_the_Series INTEGER,
  Orange_Cap INTEGER,
  Purple_Cap INTEGER,
  Season_Year INTEGER
);
Sample rows from `Season`:
1, 32, 100, 102, 2008
2, 53, 18, 61, 2009
3, 133, 133, 131, 2010

CREATE TABLE `Team` (
  Team_Id INTEGER,
  Team_Name TEXT
);
Sample rows from `Team`:
1, Kolkata Knight Riders
2, Royal Challengers Bangalore
3, Chennai Super Kings

CREATE TABLE `Toss_Decision` (
  Toss_Id INTEGER,
  Toss_Name TEXT
);
Sample rows from `Toss_Decision`:
1, field
2, bat

CREATE TABLE `Umpire` (
  Umpire_Id INTEGER,
  Umpire_Name TEXT,
  Umpire_Country INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Umpire`:
1, Asad Rauf, 6
2, MR Benson, 10
3, Aleem Dar, 6

CREATE TABLE `Venue` (
  Venue_Id INTEGER,
  Venue_Name TEXT,
  City_Id INTEGER REFERENCES City(City_Id)
);
Sample rows from `Venue`:
1, M Chinnaswamy Stadium, 1
2, Punjab Cricket Association Stadium, 2
3, Feroz Shah Kotla, 3

CREATE TABLE `Win_By` (
  Win_Id INTEGER,
  Win_Type TEXT
);
Sample rows from `Win_By`:
1, runs
2, wickets
3, NO Result

CREATE TABLE `Match` (
  Match_Id INTEGER,
  Team_1 INTEGER REFERENCES Team(Team_Id),
  Team_2 INTEGER REFERENCES Team(Team_Id),
  Match_Date DATE,
  Season_Id INTEGER REFERENCES Season(Season_Id),
  Venue_Id INTEGER REFERENCES Venue(Venue_Id),
  Toss_Winner INTEGER REFERENCES Team(Team_Id),
  Toss_Decide INTEGER REFERENCES Toss_Decision(Toss_Id),
  Win_Type INTEGER REFERENCES Win_By(Win_Id),
  Win_Margin INTEGER,
  Outcome_type INTEGER REFERENCES Out_Type(Out_Id),
  Match_Winner INTEGER REFERENCES Team(Team_Id),
  Man_of_the_Match INTEGER REFERENCES Player(Player_Id)
);
Sample rows from `Match`:
335987, 2, 1, 2008-04-18, 1, 1, 2, 1, 1, 140, 1, 1, 2
335988, 4, 3, 2008-04-19, 1, 2, 3, 2, 1, 33, 1, 3, 19
335989, 6, 5, 2008-04-19, 1, 3, 5, 2, 2, 9, 1, 6, 90

CREATE TABLE `Ball_by_Ball` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Innings_No INTEGER PRIMARY KEY,
  Team_Batting INTEGER,
  Team_Bowling INTEGER,
  Striker_Batting_Position INTEGER,
  Striker INTEGER,
  Non_Striker INTEGER,
  Bowler INTEGER
);
Sample rows from `Ball_by_Ball`:
335987, 1, 1, 1, 1, 2, 1, 1, 2, 14
335987, 1, 1, 2, 2, 1, 1, 6, 7, 106
335987, 1, 2, 1, 1, 2, 2, 2, 1, 14

CREATE TABLE `Batsman_Scored` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Runs_Scored INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Batsman_Scored`:
335987, 1, 1, 0, 1
335987, 1, 1, 1, 2
335987, 1, 2, 0, 1

CREATE TABLE `Player_Match` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Player_Id INTEGER PRIMARY KEY REFERENCES Player(Player_Id),
  Role_Id INTEGER PRIMARY KEY REFERENCES Rolee(Role_Id),
  Team_Id INTEGER REFERENCES Team(Team_Id)
);
Sample rows from `Player_Match`:
335987, 1, 1, 1
335987, 2, 3, 1
335987, 3, 3, 1

CREATE TABLE `Wicket_Taken` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Player_Out INTEGER REFERENCES Player(Player_Id),
  Kind_Out INTEGER REFERENCES Out_Type(Out_Id),
  Fielders INTEGER REFERENCES Player(Player_Id),
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Wicket_Taken`:
335987, 2, 1, 6, 2, None, 2
335987, 3, 2, 8, 2, None, 2
335987, 5, 5, 9, 1, 83, 2

","wicket_taken, out_type","player_out, wicket_taken.kind_out, out_type.out_id, out_name"
coinmarketcap,For all coins with average price more than $1000. State the current status of the coin.,SELECT t1.status FROM coins as t1 inner JOIN historical as t2 ON t1.id = t2.coin_id GROUP BY t1.name HAVING AVG(t2.price) > 1000,"CREATE TABLE `coins` (
  id INTEGER,
  name TEXT,
  slug TEXT,
  symbol TEXT,
  status TEXT,
  category TEXT,
  description TEXT,
  subreddit TEXT,
  notice TEXT,
  tags TEXT,
  tag_names TEXT,
  website TEXT,
  platform_id INTEGER,
  date_added TEXT,
  date_launched TEXT
);
Sample rows from `coins`:
1, Bitcoin, bitcoin, BTC, active, coin, ## **What Is Bitcoin (BTC)?**\n\nBitcoin is a decentralized cryptocurrency originally described in a 2008 [whitepaper](https://coinmarketcap.com/alexandria/glossary/whitepaper) by a person, or group of people, using the alias [Satoshi Nakamoto](https://co, bitcoin, None, mineable, pow, sha-256, store-of-value, state-channels, coinbase-ventures-portfolio, three-arrows-capital-portfolio, polychain-capital-portfolio, binance-labs-portfolio, arrington-xrp-capital, blockchain-capital-portfolio, boostvc-portfolio, cms-holdings-, Mineable, PoW, SHA-256, Store of Value, State channels, Coinbase Ventures Portfolio, Three Arrows Capital Portfolio, Polychain Capital Portfolio, Binance Labs Portfolio, Arrington XRP capital, Blockchain Capital Portfolio, BoostVC Portfolio, CMS Holdings , https://bitcoin.org/, None, 2013-04-28T00:00:00.000Z, None
2, Litecoin, litecoin, LTC, active, coin, ## What Is Litecoin (LTC)?\n\nLitecoin (LTC) is a cryptocurrency that was designed to provide fast, secure and low-cost payments by leveraging the unique properties of [blockchain](https://coinmarketcap.com/alexandria/glossary/blockchain) technology. \n\n, litecoin, None, mineable, pow, scrypt, medium-of-exchange, binance-chain, Mineable, PoW, Scrypt, Medium of Exchange, Binance Chain, https://litecoin.org/, None, 2013-04-28T00:00:00.000Z, None
3, Namecoin, namecoin, NMC, active, coin, Namecoin (NMC) is a cryptocurrency . Users are able to generate NMC through the process of mining. Namecoin has a current supply of 14,736,400. The last known price of Namecoin is 2.14833562 USD and is up 0.40 over the last 24 hours. It is currently tradi, namecoin, None, mineable, pow, sha-256, platform, Mineable, PoW, SHA-256, Platform, https://www.namecoin.org/, None, 2013-04-28T00:00:00.000Z, None

CREATE TABLE `historical` (
  date DATE,
  coin_id INTEGER,
  cmc_rank INTEGER,
  market_cap REAL,
  price REAL,
  open REAL,
  high REAL,
  low REAL,
  close REAL,
  time_high TEXT,
  time_low TEXT,
  volume_24h REAL,
  percent_change_1h REAL,
  percent_change_24h REAL,
  percent_change_7d REAL,
  circulating_supply REAL,
  total_supply REAL,
  max_supply REAL,
  num_market_pairs INTEGER
);
Sample rows from `historical`:
2013-04-28, 1, 1, 1488566971.9558687, 134.210021972656, None, None, None, None, None, None, 0.0, 0.639231, None, None, 11091325.0, 11091325.0, 21000000.0, None
2013-04-28, 2, 2, 74637021.56790735, 4.34840488433838, None, None, None, None, None, None, 0.0, 0.799273, None, None, 17164230.0, 17164230.0, 84000000.0, None
2013-04-28, 5, 3, 7250186.647688276, 0.386524856090546, None, None, None, None, None, None, 0.0, -0.934763, None, None, 18757362.0, 18757362.0, None, None

","CREATE TABLE `coins` (
  id INTEGER,
  name TEXT,
  slug TEXT,
  symbol TEXT,
  status TEXT,
  category TEXT,
  description TEXT,
  subreddit TEXT,
  notice TEXT,
  tags TEXT,
  tag_names TEXT,
  website TEXT,
  platform_id INTEGER,
  date_added TEXT,
  date_launched TEXT
);
Sample rows from `coins`:
1, Bitcoin, bitcoin, BTC, active, coin, ## **What Is Bitcoin (BTC)?**\n\nBitcoin is a decentralized cryptocurrency originally described in a 2008 [whitepaper](https://coinmarketcap.com/alexandria/glossary/whitepaper) by a person, or group of people, using the alias [Satoshi Nakamoto](https://co, bitcoin, None, mineable, pow, sha-256, store-of-value, state-channels, coinbase-ventures-portfolio, three-arrows-capital-portfolio, polychain-capital-portfolio, binance-labs-portfolio, arrington-xrp-capital, blockchain-capital-portfolio, boostvc-portfolio, cms-holdings-, Mineable, PoW, SHA-256, Store of Value, State channels, Coinbase Ventures Portfolio, Three Arrows Capital Portfolio, Polychain Capital Portfolio, Binance Labs Portfolio, Arrington XRP capital, Blockchain Capital Portfolio, BoostVC Portfolio, CMS Holdings , https://bitcoin.org/, None, 2013-04-28T00:00:00.000Z, None
2, Litecoin, litecoin, LTC, active, coin, ## What Is Litecoin (LTC)?\n\nLitecoin (LTC) is a cryptocurrency that was designed to provide fast, secure and low-cost payments by leveraging the unique properties of [blockchain](https://coinmarketcap.com/alexandria/glossary/blockchain) technology. \n\n, litecoin, None, mineable, pow, scrypt, medium-of-exchange, binance-chain, Mineable, PoW, Scrypt, Medium of Exchange, Binance Chain, https://litecoin.org/, None, 2013-04-28T00:00:00.000Z, None
3, Namecoin, namecoin, NMC, active, coin, Namecoin (NMC) is a cryptocurrency . Users are able to generate NMC through the process of mining. Namecoin has a current supply of 14,736,400. The last known price of Namecoin is 2.14833562 USD and is up 0.40 over the last 24 hours. It is currently tradi, namecoin, None, mineable, pow, sha-256, platform, Mineable, PoW, SHA-256, Platform, https://www.namecoin.org/, None, 2013-04-28T00:00:00.000Z, None

CREATE TABLE `historical` (
  date DATE,
  coin_id INTEGER,
  cmc_rank INTEGER,
  market_cap REAL,
  price REAL,
  open REAL,
  high REAL,
  low REAL,
  close REAL,
  time_high TEXT,
  time_low TEXT,
  volume_24h REAL,
  percent_change_1h REAL,
  percent_change_24h REAL,
  percent_change_7d REAL,
  circulating_supply REAL,
  total_supply REAL,
  max_supply REAL,
  num_market_pairs INTEGER
);
Sample rows from `historical`:
2013-04-28, 1, 1, 1488566971.9558687, 134.210021972656, None, None, None, None, None, None, 0.0, 0.639231, None, None, 11091325.0, 11091325.0, 21000000.0, None
2013-04-28, 2, 2, 74637021.56790735, 4.34840488433838, None, None, None, None, None, None, 0.0, 0.799273, None, None, 17164230.0, 17164230.0, 84000000.0, None
2013-04-28, 5, 3, 7250186.647688276, 0.386524856090546, None, None, None, None, None, None, 0.0, -0.934763, None, None, 18757362.0, 18757362.0, None, None

","coins, historical","coins.status, coins.id, historical.coin_id, coins.name, historical.price"
soccer_2016,List the name of England players.,SELECT t1.player_name FROM player as t1 inner JOIN country as t2 ON t1.country_Name = t2.country_ID WHERE t2.country_Name = 'England',"CREATE TABLE `player` (
  Player_Id INTEGER,
  Player_Name TEXT,
  DOB DATE,
  Batting_hand INTEGER REFERENCES Batting_Style(Batting_Id),
  Bowling_skill INTEGER REFERENCES Bowling_Style(Bowling_Id),
  Country_Name INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `player`:
1, SC Ganguly, 1972-07-08, 1, 1, 1
2, BB McCullum, 1981-09-27, 2, 1, 4
3, RT Ponting, 1974-12-19, 2, 1, 5

CREATE TABLE `country` (
  Country_Id INTEGER REFERENCES Country(Country_Id),
  Country_Name TEXT
);
Sample rows from `country`:
1, India
2, South Africa
3, U.A.E

","CREATE TABLE `Batting_Style` (
  Batting_Id INTEGER,
  Batting_hand TEXT
);
Sample rows from `Batting_Style`:
1, Left-hand bat
2, Right-hand bat

CREATE TABLE `Bowling_Style` (
  Bowling_Id INTEGER,
  Bowling_skill TEXT
);
Sample rows from `Bowling_Style`:
1, Right-arm medium
2, Right-arm offbreak
3, Right-arm fast-medium

CREATE TABLE `City` (
  City_Id INTEGER,
  City_Name TEXT,
  Country_id INTEGER
);
Sample rows from `City`:
1, Bangalore, 1
2, Chandigarh, 1
3, Delhi, 1

CREATE TABLE `Country` (
  Country_Id INTEGER REFERENCES Country(Country_Id),
  Country_Name TEXT
);
Sample rows from `Country`:
1, India
2, South Africa
3, U.A.E

CREATE TABLE `Extra_Type` (
  Extra_Id INTEGER,
  Extra_Name TEXT
);
Sample rows from `Extra_Type`:
1, legbyes
2, wides
3, byes

CREATE TABLE `Extra_Runs` (
  Match_Id INTEGER PRIMARY KEY,
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Extra_Type_Id INTEGER REFERENCES Extra_Type(Extra_Id),
  Extra_Runs INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Extra_Runs`:
335987, 1, 1, 1, 1, 1
335987, 1, 2, 2, 1, 2
335987, 1, 3, 2, 1, 1

CREATE TABLE `Out_Type` (
  Out_Id INTEGER,
  Out_Name TEXT
);
Sample rows from `Out_Type`:
1, caught
2, bowled
3, run out

CREATE TABLE `Outcome` (
  Outcome_Id INTEGER,
  Outcome_Type TEXT
);
Sample rows from `Outcome`:
1, Result
2, No Result
3, Superover

CREATE TABLE `Player` (
  Player_Id INTEGER,
  Player_Name TEXT,
  DOB DATE,
  Batting_hand INTEGER REFERENCES Batting_Style(Batting_Id),
  Bowling_skill INTEGER REFERENCES Bowling_Style(Bowling_Id),
  Country_Name INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Player`:
1, SC Ganguly, 1972-07-08, 1, 1, 1
2, BB McCullum, 1981-09-27, 2, 1, 4
3, RT Ponting, 1974-12-19, 2, 1, 5

CREATE TABLE `Rolee` (
  Role_Id INTEGER,
  Role_Desc TEXT
);
Sample rows from `Rolee`:
1, Captain
2, Keeper
3, Player

CREATE TABLE `Season` (
  Season_Id INTEGER,
  Man_of_the_Series INTEGER,
  Orange_Cap INTEGER,
  Purple_Cap INTEGER,
  Season_Year INTEGER
);
Sample rows from `Season`:
1, 32, 100, 102, 2008
2, 53, 18, 61, 2009
3, 133, 133, 131, 2010

CREATE TABLE `Team` (
  Team_Id INTEGER,
  Team_Name TEXT
);
Sample rows from `Team`:
1, Kolkata Knight Riders
2, Royal Challengers Bangalore
3, Chennai Super Kings

CREATE TABLE `Toss_Decision` (
  Toss_Id INTEGER,
  Toss_Name TEXT
);
Sample rows from `Toss_Decision`:
1, field
2, bat

CREATE TABLE `Umpire` (
  Umpire_Id INTEGER,
  Umpire_Name TEXT,
  Umpire_Country INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Umpire`:
1, Asad Rauf, 6
2, MR Benson, 10
3, Aleem Dar, 6

CREATE TABLE `Venue` (
  Venue_Id INTEGER,
  Venue_Name TEXT,
  City_Id INTEGER REFERENCES City(City_Id)
);
Sample rows from `Venue`:
1, M Chinnaswamy Stadium, 1
2, Punjab Cricket Association Stadium, 2
3, Feroz Shah Kotla, 3

CREATE TABLE `Win_By` (
  Win_Id INTEGER,
  Win_Type TEXT
);
Sample rows from `Win_By`:
1, runs
2, wickets
3, NO Result

CREATE TABLE `Match` (
  Match_Id INTEGER,
  Team_1 INTEGER REFERENCES Team(Team_Id),
  Team_2 INTEGER REFERENCES Team(Team_Id),
  Match_Date DATE,
  Season_Id INTEGER REFERENCES Season(Season_Id),
  Venue_Id INTEGER REFERENCES Venue(Venue_Id),
  Toss_Winner INTEGER REFERENCES Team(Team_Id),
  Toss_Decide INTEGER REFERENCES Toss_Decision(Toss_Id),
  Win_Type INTEGER REFERENCES Win_By(Win_Id),
  Win_Margin INTEGER,
  Outcome_type INTEGER REFERENCES Out_Type(Out_Id),
  Match_Winner INTEGER REFERENCES Team(Team_Id),
  Man_of_the_Match INTEGER REFERENCES Player(Player_Id)
);
Sample rows from `Match`:
335987, 2, 1, 2008-04-18, 1, 1, 2, 1, 1, 140, 1, 1, 2
335988, 4, 3, 2008-04-19, 1, 2, 3, 2, 1, 33, 1, 3, 19
335989, 6, 5, 2008-04-19, 1, 3, 5, 2, 2, 9, 1, 6, 90

CREATE TABLE `Ball_by_Ball` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Innings_No INTEGER PRIMARY KEY,
  Team_Batting INTEGER,
  Team_Bowling INTEGER,
  Striker_Batting_Position INTEGER,
  Striker INTEGER,
  Non_Striker INTEGER,
  Bowler INTEGER
);
Sample rows from `Ball_by_Ball`:
335987, 1, 1, 1, 1, 2, 1, 1, 2, 14
335987, 1, 1, 2, 2, 1, 1, 6, 7, 106
335987, 1, 2, 1, 1, 2, 2, 2, 1, 14

CREATE TABLE `Batsman_Scored` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Runs_Scored INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Batsman_Scored`:
335987, 1, 1, 0, 1
335987, 1, 1, 1, 2
335987, 1, 2, 0, 1

CREATE TABLE `Player_Match` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Player_Id INTEGER PRIMARY KEY REFERENCES Player(Player_Id),
  Role_Id INTEGER PRIMARY KEY REFERENCES Rolee(Role_Id),
  Team_Id INTEGER REFERENCES Team(Team_Id)
);
Sample rows from `Player_Match`:
335987, 1, 1, 1
335987, 2, 3, 1
335987, 3, 3, 1

CREATE TABLE `Wicket_Taken` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Player_Out INTEGER REFERENCES Player(Player_Id),
  Kind_Out INTEGER REFERENCES Out_Type(Out_Id),
  Fielders INTEGER REFERENCES Player(Player_Id),
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Wicket_Taken`:
335987, 2, 1, 6, 2, None, 2
335987, 3, 2, 8, 2, None, 2
335987, 5, 5, 9, 1, 83, 2

","player, country","player.player_name, player.country_Name, country.country_ID, country.country_Name"
university,"List the names of all the universities that have no less than 50,000 students in the year 2012.",SELECT t2.university_name FROM university_year as t1 inner JOIN university as t2 ON t1.university_id = t2.id WHERE t1.num_students > 50000 AND t1.year = 2012,"CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

","CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

CREATE TABLE `ranking_system` (
  id INTEGER,
  system_name TEXT
);
Sample rows from `ranking_system`:
1, Times Higher Education World University Ranking
2, Shanghai Ranking
3, Center for World University Rankings

CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

","university_year, university","university.university_name, university_year.university_id, university.id, university_year.num_students, university_year.year"
donor,How many donors from New Jersey have made a donation for an honoree?,SELECT COUNT(donationid) FROM donations WHERE for_honoree = 't' AND donor_state = 'NJ',"CREATE TABLE `donations` (
  donationid TEXT PRIMARY KEY,
  projectid TEXT REFERENCES projects(projectid),
  donor_acctid TEXT,
  donor_city TEXT,
  donor_state TEXT,
  donor_zip TEXT,
  is_teacher_acct TEXT,
  donation_timestamp DATETIME,
  donation_to_project REAL,
  donation_optional_support REAL,
  donation_total REAL,
  dollar_amount TEXT,
  donation_included_optional_support TEXT,
  payment_method TEXT,
  payment_included_acct_credit TEXT,
  payment_included_campaign_gift_card TEXT,
  payment_included_web_purchased_gift_card TEXT,
  payment_was_promo_matched TEXT,
  via_giving_page TEXT,
  for_honoree TEXT,
  donation_message TEXT
);
Sample rows from `donations`:
431d720bc3dfd75ae445a5eaa0b0638d, ffffac55ee02a49d1abc87ba6fc61135, 22cbc920c9b5fa08dfb331422f5926b5, Peachtree City, GA, 30269, f, 2011-08-25 14:27:34.807, 42.5, 7.5, 50.0, 10_to_100, t, no_cash_received, f, t, f, f, f, f, I gave to this project because I support the efforts of this teacher with each of her students, and her school, Suder Elementary School.
fcfedba1c8a0ba77d280cace80a909f6, ffffac55ee02a49d1abc87ba6fc61135, 521f1830a77c9dbbf8119d99c6206a16, None, GA, None, f, 2011-11-04 07:54:21.552, 26.83, 4.73, 31.56, 10_to_100, t, creditcard, f, t, f, f, f, f, I donated because I want to support kids in Georgia.
3fa95d29986aa6f401c6719ced3a3ce7, ffffac55ee02a49d1abc87ba6fc61135, 1e0a63fc8141c7ba26b8b44ca0871b90, Rockville, MD, 20853, f, 2011-11-02 22:53:53.019, 55.35, 0.0, 55.35, 10_to_100, f, no_cash_received, t, f, f, f, t, f, The Spark's 'pet' projects include those which support deaf students.  With just a few days left, the Spark's donors fund half of what remains, and challenge others to pull this project through to fruition.

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `essays` (
  projectid TEXT,
  teacher_acctid TEXT,
  title TEXT,
  short_description TEXT,
  need_statement TEXT,
  essay TEXT
);
Sample rows from `essays`:
ffffc4f85b60efc5b52347df489d0238, c24011b20fc161ed02248e85beb59a90, iMath, It is imperative that teachers bring technology into the classroom, if students are going to be able to survive in the 21st Century. The classroom needs to be ever changing along with the outside world. The iMath project will help students by obtaining cl, My students need four iPods., I am a fourth year fifth grade math teacher. The school I teach in is a fifth and sixth grade public school and is a Title One school which means that 95% of our students get free lunch. Presently, I am in the process of completing a Masters degree in Tec
ffffac55ee02a49d1abc87ba6fc61135, 947066d0af47e0566f334566553dd6a6, Recording Rockin' Readers, Can you imagine having to translate everything you read into sign language and relate it to what you already know? Help us do just that by giving us the camera that will record our stories and..., My students need a camcorder. , Can you imagine having to translate everything you read into sign language and relate it to what you already know? Help us do just that by giving us the camera that will record our stories and interpretations! 
\n
\nMy students are all deaf or hard of hea
ffff97ed93720407d70a2787475932b0, 462270f5d5c212162fcab11afa2623cb, Kindergarten In Need of Important Materials!, It takes a special person to donate to a group of children they don't know, especially in these hard economic times, but my students are worth it.  They deserve to have the proper supplies to ensure that their long education gets off to the right start, s, My students need 17 assorted classroom materials to ensure that they can learn as much as possible this year., Hi. I teach a wonderful group of 4-5 year old Kindergarten students.  They come in wanting and willing to learn new and exciting things each and every day. I work hard to ensure that my students get the most out of the entire school year. 
\n
\nFor the mo

CREATE TABLE `projects` (
  projectid TEXT PRIMARY KEY,
  teacher_acctid TEXT,
  schoolid TEXT,
  school_ncesid TEXT,
  school_latitude REAL,
  school_longitude REAL,
  school_city TEXT,
  school_state TEXT,
  school_zip INTEGER,
  school_metro TEXT,
  school_district TEXT,
  school_county TEXT,
  school_charter TEXT,
  school_magnet TEXT,
  school_year_round TEXT,
  school_nlns TEXT,
  school_kipp TEXT,
  school_charter_ready_promise TEXT,
  teacher_prefix TEXT,
  teacher_teach_for_america TEXT,
  teacher_ny_teaching_fellow TEXT,
  primary_focus_subject TEXT,
  primary_focus_area TEXT,
  secondary_focus_subject TEXT,
  secondary_focus_area TEXT,
  resource_type TEXT,
  poverty_level TEXT,
  grade_level TEXT,
  fulfillment_labor_materials REAL,
  total_price_excluding_optional_support REAL,
  total_price_including_optional_support REAL,
  students_reached INTEGER,
  eligible_double_your_impact_match TEXT,
  eligible_almost_home_match TEXT,
  date_posted DATE
);
Sample rows from `projects`:
316ed8fb3b81402ff6ac8f721bb31192, 42d43fa6f37314365d08692e08680973, c0e6ce89b244764085691a1b8e28cb81, 063627006187, 36.57634, -119.608713, Selma, CA, 93662, None, Selma Unified Sch District, Fresno, f, f, f, f, f, f, Mrs., f, f, Literature & Writing, Literacy & Language, College & Career Prep, Applied Learning, Books, highest poverty, Grades 6-8, 30.0, 555.81, 653.89, 32, f, f, 2014-05-12
90de744e368a7e4883223ca49318ae30, 864eb466462bf704bf7a16a585ef296a, d711e47810900c96f26a5d0be30c446d, 483702008193, 32.911179, -96.72364, Dallas, TX, 75243, urban, Richardson Ind School District, Dallas, f, f, f, f, f, f, Mrs., f, f, Literacy, Literacy & Language, ESL, Literacy & Language, Books, highest poverty, Grades PreK-2, 30.0, 296.47, 348.79, 22, f, f, 2014-05-12
32943bb1063267de6ed19fc0ceb4b9a7, 37f85135259ece793213aca9d8765542, 665c3613013ba0a66e3a2a26b89f1b68, 410327000109, 45.166039, -122.414576, Colton, OR, 97017, rural, Colton School District 53, Clackamas, f, f, f, f, f, f, Mr., f, f, Literacy, Literacy & Language, Mathematics, Math & Science, Technology, high poverty, Grades PreK-2, 30.0, 430.89, 506.93, 17, f, f, 2014-05-11

CREATE TABLE `donations` (
  donationid TEXT PRIMARY KEY,
  projectid TEXT REFERENCES projects(projectid),
  donor_acctid TEXT,
  donor_city TEXT,
  donor_state TEXT,
  donor_zip TEXT,
  is_teacher_acct TEXT,
  donation_timestamp DATETIME,
  donation_to_project REAL,
  donation_optional_support REAL,
  donation_total REAL,
  dollar_amount TEXT,
  donation_included_optional_support TEXT,
  payment_method TEXT,
  payment_included_acct_credit TEXT,
  payment_included_campaign_gift_card TEXT,
  payment_included_web_purchased_gift_card TEXT,
  payment_was_promo_matched TEXT,
  via_giving_page TEXT,
  for_honoree TEXT,
  donation_message TEXT
);
Sample rows from `donations`:
431d720bc3dfd75ae445a5eaa0b0638d, ffffac55ee02a49d1abc87ba6fc61135, 22cbc920c9b5fa08dfb331422f5926b5, Peachtree City, GA, 30269, f, 2011-08-25 14:27:34.807, 42.5, 7.5, 50.0, 10_to_100, t, no_cash_received, f, t, f, f, f, f, I gave to this project because I support the efforts of this teacher with each of her students, and her school, Suder Elementary School.
fcfedba1c8a0ba77d280cace80a909f6, ffffac55ee02a49d1abc87ba6fc61135, 521f1830a77c9dbbf8119d99c6206a16, None, GA, None, f, 2011-11-04 07:54:21.552, 26.83, 4.73, 31.56, 10_to_100, t, creditcard, f, t, f, f, f, f, I donated because I want to support kids in Georgia.
3fa95d29986aa6f401c6719ced3a3ce7, ffffac55ee02a49d1abc87ba6fc61135, 1e0a63fc8141c7ba26b8b44ca0871b90, Rockville, MD, 20853, f, 2011-11-02 22:53:53.019, 55.35, 0.0, 55.35, 10_to_100, f, no_cash_received, t, f, f, f, t, f, The Spark's 'pet' projects include those which support deaf students.  With just a few days left, the Spark's donors fund half of what remains, and challenge others to pull this project through to fruition.

CREATE TABLE `resources` (
  resourceid TEXT PRIMARY KEY,
  projectid TEXT REFERENCES projects(projectid),
  vendorid INTEGER,
  vendor_name TEXT,
  project_resource_type TEXT,
  item_name TEXT,
  item_number TEXT,
  item_unit_price REAL,
  item_quantity INTEGER
);
Sample rows from `resources`:
8a1c1c45bc30d065061912fd9114fcf3, ffffc4f85b60efc5b52347df489d0238, 430, Woodwind and Brasswind, Technology, iPod nano 4th Gen 8GB (Black), 249995.001, 149.0, 4
015d2c4935c50427964a12dc3f584091, ffffac55ee02a49d1abc87ba6fc61135, 82, Best Buy for Business, Technology, Sony bloggie MHS-FS1 - camcorder - internal flash memory, BB11216668, 148.0, 1
26a02944b2f0c25f9abdeacca3ede3ee, ffff97ed93720407d70a2787475932b0, 767, Lakeshore Learning Materials, Supplies, VX748 - Best-Buy Jumbo Crayons - 12-Color Box, VX748, 69.95, 1

",donations,"donationid, for_honoree, donor_state"
address,State the county for Arecibo City.,SELECT DISTINCT t1.county FROM country as t1 inner JOIN zip_data as t2 ON t1.zip_code = t2.zip_code WHERE t2.city = 'Arecibo',"CREATE TABLE `country` (
  zip_code INTEGER PRIMARY KEY REFERENCES zip_data(zip_code),
  county TEXT PRIMARY KEY,
  state TEXT REFERENCES state(abbreviation)
);
Sample rows from `country`:
501, SUFFOLK, NY
544, SUFFOLK, NY
601, ADJUNTAS, PR

CREATE TABLE `zip_data` (
  zip_code INTEGER,
  city TEXT,
  state TEXT REFERENCES state(abbreviation),
  multi_county TEXT,
  type TEXT,
  organization TEXT,
  time_zone TEXT,
  daylight_savings TEXT,
  latitude REAL,
  longitude REAL,
  elevation INTEGER,
  state_fips INTEGER,
  county_fips INTEGER,
  region TEXT,
  division TEXT,
  population_2020 INTEGER,
  population_2010 INTEGER,
  households INTEGER,
  avg_house_value INTEGER,
  avg_income_per_household INTEGER,
  persons_per_household REAL,
  white_population INTEGER,
  black_population INTEGER,
  hispanic_population INTEGER,
  asian_population INTEGER,
  american_indian_population INTEGER,
  hawaiian_population INTEGER,
  other_population INTEGER,
  male_population INTEGER,
  female_population INTEGER,
  median_age REAL,
  male_median_age REAL,
  female_median_age REAL,
  residential_mailboxes INTEGER,
  business_mailboxes INTEGER,
  total_delivery_receptacles INTEGER,
  businesses INTEGER,
  1st_quarter_payroll INTEGER,
  annual_payroll INTEGER,
  employees INTEGER,
  water_area REAL,
  land_area REAL,
  single_family_delivery_units INTEGER,
  multi_family_delivery_units INTEGER,
  total_beneficiaries INTEGER,
  retired_workers INTEGER,
  disabled_workers INTEGER,
  parents_and_widowed INTEGER,
  spouses INTEGER,
  children INTEGER,
  over_65 INTEGER,
  monthly_benefits_all INTEGER,
  monthly_benefits_retired_workers INTEGER,
  monthly_benefits_widowed INTEGER,
  CBSA INTEGER REFERENCES CBSA(CBSA)
);
Sample rows from `zip_data`:
501, Holtsville, NY, No, Unique Post Office, I R S Service Center, Eastern, Yes, 40.817923, -73.045317, 25, 36, 103, Northeast, Middle Atlantic, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0, 1, 1, 2, 0, 0, 0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35620
544, Holtsville, NY, No, Unique Post Office, Irs Service Center, Eastern, Yes, 40.788827, -73.039405, 25, 36, 103, Northeast, Middle Atlantic, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35620
601, Adjuntas, PR, No, Post Office, None, Atlantic, No, 18.196747, -66.736735, 0, 72, 1, None, None, 11737, 18570, 6525, 86200, 13092, 2.84, 17479, 663, 18486, 7, 113, 10, 558, 9078, 9492, 35.9, 34.5, 37.1, 4133, 221, 5173, 0, 0, 0, 0, 0.309, 64.348, 2419, 1264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38660

","CREATE TABLE `CBSA` (
  CBSA INTEGER,
  CBSA_name TEXT,
  CBSA_type TEXT
);
Sample rows from `CBSA`:
10300, Adrian, MI, Micro
10380, Aguadilla-Isabela, PR, Metro
10420, Akron, OH, Metro

CREATE TABLE `state` (
  abbreviation TEXT PRIMARY KEY,
  name TEXT
);
Sample rows from `state`:
AA, Armed Forces Americas
AE, Armed Forces Europe
AK, Alaska

CREATE TABLE `congress` (
  cognress_rep_id TEXT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  CID TEXT,
  party TEXT,
  state TEXT,
  abbreviation TEXT REFERENCES state(abbreviation),
  House TEXT,
  District INTEGER,
  land_area REAL
);
Sample rows from `congress`:
AK, Young, Don, N00008091, Republican, Alaska, AK, House of Repsentatives, None, 571951.26
AK-S1, Begich, Mark, N00009585, Democrat, Alaska, AK, Senate, None, 570641.0
AK-S2, Murkowski, Lisa, N00033101, Republican, Alaska, AK, Senate, None, 570641.0

CREATE TABLE `zip_data` (
  zip_code INTEGER,
  city TEXT,
  state TEXT REFERENCES state(abbreviation),
  multi_county TEXT,
  type TEXT,
  organization TEXT,
  time_zone TEXT,
  daylight_savings TEXT,
  latitude REAL,
  longitude REAL,
  elevation INTEGER,
  state_fips INTEGER,
  county_fips INTEGER,
  region TEXT,
  division TEXT,
  population_2020 INTEGER,
  population_2010 INTEGER,
  households INTEGER,
  avg_house_value INTEGER,
  avg_income_per_household INTEGER,
  persons_per_household REAL,
  white_population INTEGER,
  black_population INTEGER,
  hispanic_population INTEGER,
  asian_population INTEGER,
  american_indian_population INTEGER,
  hawaiian_population INTEGER,
  other_population INTEGER,
  male_population INTEGER,
  female_population INTEGER,
  median_age REAL,
  male_median_age REAL,
  female_median_age REAL,
  residential_mailboxes INTEGER,
  business_mailboxes INTEGER,
  total_delivery_receptacles INTEGER,
  businesses INTEGER,
  1st_quarter_payroll INTEGER,
  annual_payroll INTEGER,
  employees INTEGER,
  water_area REAL,
  land_area REAL,
  single_family_delivery_units INTEGER,
  multi_family_delivery_units INTEGER,
  total_beneficiaries INTEGER,
  retired_workers INTEGER,
  disabled_workers INTEGER,
  parents_and_widowed INTEGER,
  spouses INTEGER,
  children INTEGER,
  over_65 INTEGER,
  monthly_benefits_all INTEGER,
  monthly_benefits_retired_workers INTEGER,
  monthly_benefits_widowed INTEGER,
  CBSA INTEGER REFERENCES CBSA(CBSA)
);
Sample rows from `zip_data`:
501, Holtsville, NY, No, Unique Post Office, I R S Service Center, Eastern, Yes, 40.817923, -73.045317, 25, 36, 103, Northeast, Middle Atlantic, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0, 1, 1, 2, 0, 0, 0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35620
544, Holtsville, NY, No, Unique Post Office, Irs Service Center, Eastern, Yes, 40.788827, -73.039405, 25, 36, 103, Northeast, Middle Atlantic, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35620
601, Adjuntas, PR, No, Post Office, None, Atlantic, No, 18.196747, -66.736735, 0, 72, 1, None, None, 11737, 18570, 6525, 86200, 13092, 2.84, 17479, 663, 18486, 7, 113, 10, 558, 9078, 9492, 35.9, 34.5, 37.1, 4133, 221, 5173, 0, 0, 0, 0, 0.309, 64.348, 2419, 1264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38660

CREATE TABLE `alias` (
  zip_code INTEGER REFERENCES zip_data(zip_code),
  alias TEXT
);
Sample rows from `alias`:
501, Holtsville
544, Holtsville
601, Adjuntas

CREATE TABLE `area_code` (
  zip_code INTEGER PRIMARY KEY REFERENCES zip_data(zip_code),
  area_code INTEGER PRIMARY KEY
);
Sample rows from `area_code`:
501, 631
544, 631
601, 787

CREATE TABLE `avoid` (
  zip_code INTEGER PRIMARY KEY REFERENCES zip_data(zip_code),
  bad_alias TEXT PRIMARY KEY
);
Sample rows from `avoid`:
501, Internal Revenue Service
544, Internal Revenue Service
601, Colinas Del Gigante

CREATE TABLE `country` (
  zip_code INTEGER PRIMARY KEY REFERENCES zip_data(zip_code),
  county TEXT PRIMARY KEY,
  state TEXT REFERENCES state(abbreviation)
);
Sample rows from `country`:
501, SUFFOLK, NY
544, SUFFOLK, NY
601, ADJUNTAS, PR

CREATE TABLE `zip_congress` (
  zip_code INTEGER PRIMARY KEY REFERENCES zip_data(zip_code),
  district TEXT PRIMARY KEY REFERENCES congress(cognress_rep_id)
);
Sample rows from `zip_congress`:
501, NY-1
601, PR
602, PR

","country, zip_data","country.county, country.zip_code, zip_data.zip_code, zip_data.city"
professional_basketball,Which player selected by Portland in 2nd draftRound won Rookie of the Year in 1971?,SELECT t1.playerid FROM draft as t1 inner JOIN awards_players as t2 ON t1.playerid = t2.playerid WHERE t2.award = 'Rookie of the Year' AND t1.draftyear = 1971 AND t1.draftround = 2,"CREATE TABLE `draft` (
  id INTEGER,
  draftYear INTEGER REFERENCES teams(year),
  draftRound INTEGER,
  draftSelection INTEGER,
  draftOverall INTEGER,
  tmID TEXT REFERENCES teams(tmID),
  firstName TEXT,
  lastName TEXT,
  suffixName TEXT,
  playerID TEXT,
  draftFrom TEXT,
  lgID TEXT
);
Sample rows from `draft`:
1, 1967, 0, 0, 0, ANA, Darrell, Hardy, None, hardyda01, Baylor, ABA
2, 1967, 0, 0, 0, ANA, Bob, Krulish, None, None, Pacific, ABA
3, 1967, 0, 0, 0, ANA, Bob, Lewis, None, lewisbo01, North Carolina, ABA

CREATE TABLE `awards_players` (
  playerID TEXT PRIMARY KEY REFERENCES players(playerID),
  award TEXT PRIMARY KEY,
  year INTEGER PRIMARY KEY,
  lgID TEXT,
  note TEXT,
  pos TEXT
);
Sample rows from `awards_players`:
abdulka01, All-Defensive Second Team, 1969, NBA, None, None
abdulka01, All-NBA Second Team, 1969, NBA, None, C
abdulka01, Rookie of the Year, 1969, NBA, None, None

","CREATE TABLE `awards_players` (
  playerID TEXT PRIMARY KEY REFERENCES players(playerID),
  award TEXT PRIMARY KEY,
  year INTEGER PRIMARY KEY,
  lgID TEXT,
  note TEXT,
  pos TEXT
);
Sample rows from `awards_players`:
abdulka01, All-Defensive Second Team, 1969, NBA, None, None
abdulka01, All-NBA Second Team, 1969, NBA, None, C
abdulka01, Rookie of the Year, 1969, NBA, None, None

CREATE TABLE `coaches` (
  coachID TEXT PRIMARY KEY,
  year INTEGER PRIMARY KEY REFERENCES teams(year),
  tmID TEXT PRIMARY KEY REFERENCES teams(tmID),
  lgID TEXT,
  stint INTEGER PRIMARY KEY,
  won INTEGER,
  lost INTEGER,
  post_wins INTEGER,
  post_losses INTEGER
);
Sample rows from `coaches`:
adelmri01, 1988, POR, NBA, 2, 14, 21, 0, 3
adelmri01, 1989, POR, NBA, 1, 59, 23, 12, 9
adelmri01, 1990, POR, NBA, 1, 63, 19, 9, 7

CREATE TABLE `draft` (
  id INTEGER,
  draftYear INTEGER REFERENCES teams(year),
  draftRound INTEGER,
  draftSelection INTEGER,
  draftOverall INTEGER,
  tmID TEXT REFERENCES teams(tmID),
  firstName TEXT,
  lastName TEXT,
  suffixName TEXT,
  playerID TEXT,
  draftFrom TEXT,
  lgID TEXT
);
Sample rows from `draft`:
1, 1967, 0, 0, 0, ANA, Darrell, Hardy, None, hardyda01, Baylor, ABA
2, 1967, 0, 0, 0, ANA, Bob, Krulish, None, None, Pacific, ABA
3, 1967, 0, 0, 0, ANA, Bob, Lewis, None, lewisbo01, North Carolina, ABA

CREATE TABLE `player_allstar` (
  playerID TEXT PRIMARY KEY REFERENCES players(playerID),
  last_name TEXT,
  first_name TEXT,
  season_id INTEGER PRIMARY KEY,
  conference TEXT,
  league_id TEXT,
  games_played INTEGER,
  minutes INTEGER,
  points INTEGER,
  o_rebounds INTEGER,
  d_rebounds INTEGER,
  rebounds INTEGER,
  assists INTEGER,
  steals INTEGER,
  blocks INTEGER,
  turnovers INTEGER,
  personal_fouls INTEGER,
  fg_attempted INTEGER,
  fg_made INTEGER,
  ft_attempted INTEGER,
  ft_made INTEGER,
  three_attempted INTEGER,
  three_made INTEGER
);
Sample rows from `player_allstar`:
abdulka01, Abdul-Jabbar, Kareem, 1969, East, NBA, 1, 18, 10, None, None, 11, 4, None, None, None, None, 8, 4, 2, 2, None, None
abdulka01, Abdul-Jabbar, Kareem, 1970, West, NBA, 1, 30, 19, None, None, 14, 1, None, None, None, None, 16, 8, 4, 3, None, None
abdulka01, Abdul-Jabbar, Kareem, 1971, West, NBA, 1, 19, 12, None, None, 7, 2, None, None, None, None, 10, 5, 2, 2, None, None

CREATE TABLE `players` (
  playerID TEXT PRIMARY KEY,
  useFirst TEXT,
  firstName TEXT,
  middleName TEXT,
  lastName TEXT,
  nameGiven TEXT,
  fullGivenName TEXT,
  nameSuffix TEXT,
  nameNick TEXT,
  pos TEXT,
  firstseason INTEGER,
  lastseason INTEGER,
  height REAL,
  weight INTEGER,
  college TEXT,
  collegeOther TEXT,
  birthDate DATE,
  birthCity TEXT,
  birthState TEXT,
  birthCountry TEXT,
  highSchool TEXT,
  hsCity TEXT,
  hsState TEXT,
  hsCountry TEXT,
  deathDate DATE,
  race TEXT
);
Sample rows from `players`:
abdelal01, Alaa, Alaa, None, Abdelnaby, None, None, None, None, F-C, 0, 0, 82.0, 240, Duke, None, 1968-06-24, Cairo, None, EGY, Bloomfield Senior, Bloomfield, NJ, USA, 0000-00-00, B
abdulka01, Kareem, Kareem, None, Abdul-Jabbar, None, Ferdinand Lewis Alcindor, Jr., None, Lew, Cap, C, 0, 0, 85.0, 225, UCLA, None, 1947-04-16, New York, NY, USA, Power Memorial, New York, NY, USA, 0000-00-00, B
abdulma01, Mahdi, Mahdi, None, Abdul-Rahman, None, Walter Raphael Hazzard, Jr., None, Walt, G, 0, 0, 74.0, 185, UCLA, Santa Monica City, 1942-04-15, Wilmington, DE, USA, Overbrook / Moton, Philadelphia / Easton, PA / MD, USA, 2011-11-18, B

CREATE TABLE `teams` (
  year INTEGER PRIMARY KEY,
  lgID TEXT,
  tmID TEXT PRIMARY KEY,
  franchID TEXT,
  confID TEXT,
  divID TEXT,
  rank INTEGER,
  confRank INTEGER,
  playoff TEXT,
  name TEXT,
  o_fgm INTEGER,
  o_ftm INTEGER,
  o_pts INTEGER,
  d_pts INTEGER,
  homeWon INTEGER,
  homeLost INTEGER,
  awayWon INTEGER,
  awayLost INTEGER,
  won INTEGER,
  lost INTEGER,
  games INTEGER,
  arena TEXT
);
Sample rows from `teams`:
1937, NBL, AFS, AFS, None, EA, 1, 0, CF, Akron Firestone Non-Skids, 249, 183, 681, 578, 8, 1, 5, 3, 14, 4, 18, None
1937, NBL, AGW, AGW, None, EA, 2, 0, WC, Akron Goodyear Wingfoots, 243, 159, 645, 498, 8, 1, 5, 4, 13, 5, 18, None
1937, NBL, BFB, BFB, None, EA, 4, 0, None, Buffalo Bisons, 108, 46, 262, 275, 2, 2, 1, 4, 3, 6, 9, None

CREATE TABLE `awards_coaches` (
  id INTEGER,
  year INTEGER REFERENCES coaches(year),
  coachID TEXT REFERENCES coaches(coachID),
  award TEXT,
  lgID TEXT,
  note TEXT
);
Sample rows from `awards_coaches`:
1, 1962, gallaha01, NBA Coach of the Year, NBA, None
2, 1963, hannual01, NBA Coach of the Year, NBA, None
3, 1964, auerbre01, NBA Coach of the Year, NBA, None

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
awards_coaches, 61
players_teams, 23751
series_post, 775

CREATE TABLE `players_teams` (
  id INTEGER,
  playerID TEXT REFERENCES players(None),
  year INTEGER REFERENCES teams(year),
  stint INTEGER,
  tmID TEXT REFERENCES teams(tmID),
  lgID TEXT,
  GP INTEGER,
  GS INTEGER,
  minutes INTEGER,
  points INTEGER,
  oRebounds INTEGER,
  dRebounds INTEGER,
  rebounds INTEGER,
  assists INTEGER,
  steals INTEGER,
  blocks INTEGER,
  turnovers INTEGER,
  PF INTEGER,
  fgAttempted INTEGER,
  fgMade INTEGER,
  ftAttempted INTEGER,
  ftMade INTEGER,
  threeAttempted INTEGER,
  threeMade INTEGER,
  PostGP INTEGER,
  PostGS INTEGER,
  PostMinutes INTEGER,
  PostPoints INTEGER,
  PostoRebounds INTEGER,
  PostdRebounds INTEGER,
  PostRebounds INTEGER,
  PostAssists INTEGER,
  PostSteals INTEGER,
  PostBlocks INTEGER,
  PostTurnovers INTEGER,
  PostPF INTEGER,
  PostfgAttempted INTEGER,
  PostfgMade INTEGER,
  PostftAttempted INTEGER,
  PostftMade INTEGER,
  PostthreeAttempted INTEGER,
  PostthreeMade INTEGER,
  note TEXT
);
Sample rows from `players_teams`:
1, abdelal01, 1990, 1, POR, NBA, 43, 0, 290, 135, 27, 62, 89, 12, 4, 12, 22, 39, 116, 55, 44, 25, 0, 0, 5, 0, 13, 4, 1, 2, 3, 0, 0, 0, 0, 0, 6, 2, 0, 0, 0, 0, None
2, abdelal01, 1991, 1, POR, NBA, 71, 0, 934, 432, 81, 179, 260, 30, 25, 17, 66, 132, 361, 178, 101, 76, 0, 0, 8, 0, 25, 12, 0, 4, 4, 2, 0, 0, 2, 4, 10, 5, 4, 2, 0, 0, None
3, abdelal01, 1992, 1, MIL, NBA, 12, 0, 159, 64, 12, 25, 37, 10, 6, 4, 0, 24, 56, 26, 16, 12, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, None

CREATE TABLE `series_post` (
  id INTEGER,
  year INTEGER REFERENCES teams(year) REFERENCES teams(year),
  round TEXT,
  series TEXT,
  tmIDWinner TEXT REFERENCES teams(tmID),
  lgIDWinner TEXT,
  tmIDLoser TEXT REFERENCES teams(tmID),
  lgIDLoser TEXT,
  W INTEGER,
  L INTEGER
);
Sample rows from `series_post`:
1, 1946, F, O, PHW, NBA, CHS, NBA, 4, 1
2, 1946, QF, M, NYK, NBA, CLR, NBA, 2, 1
3, 1946, QF, M, PHW, NBA, STB, NBA, 2, 1

","draft, awards_players","draft.playerid, awards_players.playerid, awards_players.award, draft.draftyear, draft.draftround"
talkingdata,"Provide the locations and times of the events of app ID ""8715964299802120000"".","SELECT t1.longitude, t1.latitude, t1.timestamp FROM events as t1 inner JOIN app_events as t2 ON t1.event_id = t2.event_id WHERE t2.app_id = 8715964299802120000","CREATE TABLE `events` (
  event_id INTEGER,
  device_id INTEGER,
  timestamp DATETIME,
  longitude REAL,
  latitude REAL
);
Sample rows from `events`:
1, 29182687948017175, 2016-05-01 00:55:25.0, 121.0, 31.0
2, -6401643145415154744, 2016-05-01 00:54:12.0, 104.0, 31.0
3, -4833982096941402721, 2016-05-01 00:08:05.0, 107.0, 30.0

CREATE TABLE `app_events` (
  event_id INTEGER PRIMARY KEY REFERENCES events(event_id),
  app_id INTEGER PRIMARY KEY,
  is_installed INTEGER,
  is_active INTEGER
);
Sample rows from `app_events`:
2, -8942695423876075857, 1, 0
2, -8022267440849930066, 1, 0
2, -5720078949152207372, 1, 0

","CREATE TABLE `app_all` (
  app_id INTEGER
);
Sample rows from `app_all`:
-9223281467940916832
-9222877069545393219
-9222785464897897681

CREATE TABLE `app_events` (
  event_id INTEGER PRIMARY KEY REFERENCES events(event_id),
  app_id INTEGER PRIMARY KEY,
  is_installed INTEGER,
  is_active INTEGER
);
Sample rows from `app_events`:
2, -8942695423876075857, 1, 0
2, -8022267440849930066, 1, 0
2, -5720078949152207372, 1, 0

CREATE TABLE `app_events_relevant` (
  event_id INTEGER PRIMARY KEY REFERENCES events_relevant(event_id),
  app_id INTEGER PRIMARY KEY REFERENCES app_all(app_id),
  is_installed INTEGER,
  is_active INTEGER
);
Sample rows from `app_events_relevant`:
2, -8942695423876075857, 1, 0
2, -8022267440849930066, 1, 0
2, -5720078949152207372, 1, 0

CREATE TABLE `app_labels` (
  app_id INTEGER REFERENCES app_all(app_id),
  label_id INTEGER REFERENCES label_categories(label_id)
);
Sample rows from `app_labels`:
7324884708820027918, 251
-4494216993218550286, 251
6058196446775239644, 406

CREATE TABLE `events` (
  event_id INTEGER,
  device_id INTEGER,
  timestamp DATETIME,
  longitude REAL,
  latitude REAL
);
Sample rows from `events`:
1, 29182687948017175, 2016-05-01 00:55:25.0, 121.0, 31.0
2, -6401643145415154744, 2016-05-01 00:54:12.0, 104.0, 31.0
3, -4833982096941402721, 2016-05-01 00:08:05.0, 107.0, 30.0

CREATE TABLE `events_relevant` (
  event_id INTEGER,
  device_id INTEGER REFERENCES gender_age(device_id),
  timestamp DATETIME,
  longitude REAL,
  latitude REAL
);
Sample rows from `events_relevant`:
2, None, -8942695423876075857, 1.0, 0.0
6, None, -8764672938472212518, 1.0, 1.0
7, None, -9050100410106163077, 1.0, 0.0

CREATE TABLE `gender_age` (
  device_id INTEGER REFERENCES phone_brand_device_model2(device_id),
  gender TEXT,
  age INTEGER,
  group TEXT
);
Sample rows from `gender_age`:
-9221086586254644858, M, 29, M29-31
-9221079146476055829, None, None, None
-9221066489596332354, M, 31, M29-31

CREATE TABLE `gender_age_test` (
  device_id INTEGER
);
Sample rows from `gender_age_test`:
-9223321966609553846
-9223042152723782980
-9222896629442493034

CREATE TABLE `gender_age_train` (
  device_id INTEGER,
  gender TEXT,
  age INTEGER,
  group TEXT
);
Sample rows from `gender_age_train`:
-9223067244542181226, M, 24, M23-26
-9222956879900151005, M, 36, M32-38
-9222754701995937853, M, 29, M29-31

CREATE TABLE `label_categories` (
  label_id INTEGER,
  category TEXT
);
Sample rows from `label_categories`:
1, None
2, game-game type
3, game-Game themes

CREATE TABLE `phone_brand_device_model2` (
  device_id INTEGER PRIMARY KEY,
  phone_brand TEXT PRIMARY KEY,
  device_model TEXT PRIMARY KEY
);
Sample rows from `phone_brand_device_model2`:
-9223321966609553846, 小米, 红米note
-9223067244542181226, vivo, Y19T
-9223042152723782980, 小米, MI 3

CREATE TABLE `sample_submission` (
  device_id INTEGER,
  F23- REAL,
  F24-26 REAL,
  F27-28 REAL,
  F29-32 REAL,
  F33-42 REAL,
  F43+ REAL,
  M22- REAL,
  M23-26 REAL,
  M27-28 REAL,
  M29-31 REAL,
  M32-38 REAL,
  M39+ REAL
);
Sample rows from `sample_submission`:
-9223321966609553846, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833
-9223042152723782980, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833
-9222896629442493034, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833

","events, app_events","events.longitude, events.latitude, events.timestamp, events.event_id, app_events.event_id, app_events.app_id"
superstore,How many orders were made by customers who live in Texas at the Central superstore?,SELECT COUNT(DISTINCT t2.`order id`) FROM people as t1 inner JOIN central_superstore as t2 ON t1.`customer id` = t2.`customer id` WHERE t1.state = 'Texas',"CREATE TABLE `people` (
  Customer ID TEXT PRIMARY KEY,
  Customer Name TEXT,
  Segment TEXT,
  Country TEXT,
  City TEXT,
  State TEXT,
  Postal Code INTEGER,
  Region TEXT PRIMARY KEY
);
Sample rows from `people`:
AA-10315, Alex Avila, Consumer, United States, Round Rock, Texas, 78664, Central
AA-10375, Allen Armold, Consumer, United States, Omaha, Nebraska, 68104, Central
AA-10480, Andrew Allen, Consumer, United States, Springfield, Missouri, 65807, Central

CREATE TABLE `central_superstore` (
  Row ID INTEGER,
  Order ID TEXT,
  Order Date DATE,
  Ship Date DATE,
  Ship Mode TEXT,
  Customer ID TEXT REFERENCES people(Customer ID),
  Region TEXT REFERENCES product(Region) REFERENCES people(Region),
  Product ID TEXT REFERENCES product(Product ID),
  Sales REAL,
  Quantity INTEGER,
  Discount REAL,
  Profit REAL
);
Sample rows from `central_superstore`:
1, CA-2011-103800, 2013-01-03, 2013-01-07, Standard Class, DP-13000, Central, OFF-PA-10000174, 16.448, 2, 0.2, 5.5512
2, CA-2011-112326, 2013-01-04, 2013-01-08, Standard Class, PO-19195, Central, OFF-LA-10003223, 11.784, 3, 0.2, 4.2717
3, CA-2011-112326, 2013-01-04, 2013-01-08, Standard Class, PO-19195, Central, OFF-ST-10002743, 272.736, 3, 0.2, -64.7748

","CREATE TABLE `people` (
  Customer ID TEXT PRIMARY KEY,
  Customer Name TEXT,
  Segment TEXT,
  Country TEXT,
  City TEXT,
  State TEXT,
  Postal Code INTEGER,
  Region TEXT PRIMARY KEY
);
Sample rows from `people`:
AA-10315, Alex Avila, Consumer, United States, Round Rock, Texas, 78664, Central
AA-10375, Allen Armold, Consumer, United States, Omaha, Nebraska, 68104, Central
AA-10480, Andrew Allen, Consumer, United States, Springfield, Missouri, 65807, Central

CREATE TABLE `product` (
  Product ID TEXT PRIMARY KEY,
  Product Name TEXT,
  Category TEXT,
  Sub-Category TEXT,
  Region TEXT PRIMARY KEY
);
Sample rows from `product`:
FUR-BO-10000330, Sauder Camden County Barrister Bookcase, Planked Cherry Finish, Furniture, Bookcases, West
FUR-BO-10000362, Sauder Inglewood Library Bookcases, Furniture, Bookcases, West
FUR-BO-10000468, O'Sullivan 2-Shelf Heavy-Duty Bookcases, Furniture, Bookcases, West

CREATE TABLE `central_superstore` (
  Row ID INTEGER,
  Order ID TEXT,
  Order Date DATE,
  Ship Date DATE,
  Ship Mode TEXT,
  Customer ID TEXT REFERENCES people(Customer ID),
  Region TEXT REFERENCES product(Region) REFERENCES people(Region),
  Product ID TEXT REFERENCES product(Product ID),
  Sales REAL,
  Quantity INTEGER,
  Discount REAL,
  Profit REAL
);
Sample rows from `central_superstore`:
1, CA-2011-103800, 2013-01-03, 2013-01-07, Standard Class, DP-13000, Central, OFF-PA-10000174, 16.448, 2, 0.2, 5.5512
2, CA-2011-112326, 2013-01-04, 2013-01-08, Standard Class, PO-19195, Central, OFF-LA-10003223, 11.784, 3, 0.2, 4.2717
3, CA-2011-112326, 2013-01-04, 2013-01-08, Standard Class, PO-19195, Central, OFF-ST-10002743, 272.736, 3, 0.2, -64.7748

CREATE TABLE `east_superstore` (
  Row ID INTEGER,
  Order ID TEXT,
  Order Date DATE,
  Ship Date DATE,
  Ship Mode TEXT,
  Customer ID TEXT REFERENCES people(Customer ID),
  Region TEXT REFERENCES product(Region) REFERENCES people(Region),
  Product ID TEXT REFERENCES product(Product ID),
  Sales REAL,
  Quantity INTEGER,
  Discount REAL,
  Profit REAL
);
Sample rows from `east_superstore`:
4647, CA-2011-141817, 2013-01-05, 2013-01-12, Standard Class, MB-18085, East, OFF-AR-10003478, 19.536, 3, 0.2, 4.884
4648, CA-2011-130092, 2013-01-11, 2013-01-14, First Class, SV-20365, East, FUR-FU-10000010, 9.94, 2, 0.0, 3.0814
4649, CA-2011-118192, 2013-01-13, 2013-01-18, Standard Class, MM-17920, East, OFF-PA-10002947, 37.408, 7, 0.2, 13.0928

CREATE TABLE `south_superstore` (
  Row ID INTEGER,
  Order ID TEXT,
  Order Date DATE,
  Ship Date DATE,
  Ship Mode TEXT,
  Customer ID TEXT REFERENCES people(Customer ID),
  Region TEXT REFERENCES product(Region) REFERENCES people(Region),
  Product ID TEXT REFERENCES product(Product ID),
  Sales REAL,
  Quantity INTEGER,
  Discount REAL,
  Profit REAL
);
Sample rows from `south_superstore`:
10343, CA-2011-106054, 2013-01-06, 2013-01-07, First Class, JO-15145, South, OFF-AR-10002399, 12.78, 3, 0.0, 5.2398
10344, CA-2011-167199, 2013-01-06, 2013-01-10, Standard Class, ME-17320, South, FUR-CH-10004063, 2573.82, 9, 0.0, 746.4078
10345, CA-2011-167199, 2013-01-06, 2013-01-10, Standard Class, ME-17320, South, OFF-BI-10004632, 609.98, 2, 0.0, 274.491

CREATE TABLE `west_superstore` (
  Row ID INTEGER,
  Order ID TEXT,
  Order Date DATE,
  Ship Date DATE,
  Ship Mode TEXT,
  Customer ID TEXT REFERENCES people(Customer ID),
  Region TEXT REFERENCES product(Region) REFERENCES people(Region),
  Product ID TEXT REFERENCES product(Product ID),
  Sales REAL,
  Quantity INTEGER,
  Discount REAL,
  Profit REAL
);
Sample rows from `west_superstore`:
13583, CA-2011-130813, 2013-01-06, 2013-01-08, Second Class, LS-17230, West, OFF-PA-10002005, 19.44, 3, 0.0, 9.3312
13584, CA-2011-157147, 2013-01-13, 2013-01-18, Standard Class, BD-11605, West, OFF-ST-10000078, 1325.85, 5, 0.0, 238.653
13585, CA-2011-157147, 2013-01-13, 2013-01-18, Standard Class, BD-11605, West, FUR-BO-10003034, 333.999, 3, 0.15, 3.9294

","people, central_superstore","central_superstore.order id, people.customer id, central_superstore.customer id, people.state"
genes,"Among the pairs of genes that are both located in the nucleus, what is the highest expression correlation score?",SELECT t2.expression_corr FROM genes as t1 inner JOIN interactions as t2 ON t1.geneid = t2.geneid1 inner JOIN genes as t3 ON t3.geneid = t2.geneid2 WHERE t1.localization = 'nucleus' AND t3.localization = 'nucleus' ORDER BY t2.expression_corr DESC LIMIT 1,"CREATE TABLE `genes` (
  GeneID TEXT REFERENCES Classification(GeneID),
  Essential TEXT,
  Class TEXT,
  Complex TEXT,
  Phenotype TEXT,
  Motif TEXT,
  Chromosome INTEGER,
  Function TEXT,
  Localization TEXT
);
Sample rows from `genes`:
G234064, Essential, GTP/GDP-exchange factors (GEFs), Translation complexes, ?, PS00824, 1, CELLULAR ORGANIZATION (proteins are localized to the corresponding organelle), cytoplasm
G234064, Essential, GTP/GDP-exchange factors (GEFs), Translation complexes, ?, PS00824, 1, PROTEIN SYNTHESIS, cytoplasm
G234064, Essential, GTP/GDP-exchange factors (GEFs), Translation complexes, ?, PS00825, 1, CELLULAR ORGANIZATION (proteins are localized to the corresponding organelle), cytoplasm

CREATE TABLE `interactions` (
  GeneID1 TEXT PRIMARY KEY REFERENCES Classification(GeneID),
  GeneID2 TEXT PRIMARY KEY REFERENCES Classification(GeneID),
  Type TEXT,
  Expression_Corr REAL
);
Sample rows from `interactions`:
G234064, G234126, Genetic-Physical, 0.914095071
G234064, G235065, Genetic-Physical, 0.751584888
G234065, G234371, Genetic, 0.823773738

","CREATE TABLE `Classification` (
  GeneID TEXT PRIMARY KEY,
  Localization TEXT
);
Sample rows from `Classification`:
G234064, cytoplasm
G234065, cytoplasm
G234070, cytoskeleton

CREATE TABLE `Genes` (
  GeneID TEXT REFERENCES Classification(GeneID),
  Essential TEXT,
  Class TEXT,
  Complex TEXT,
  Phenotype TEXT,
  Motif TEXT,
  Chromosome INTEGER,
  Function TEXT,
  Localization TEXT
);
Sample rows from `Genes`:
G234064, Essential, GTP/GDP-exchange factors (GEFs), Translation complexes, ?, PS00824, 1, CELLULAR ORGANIZATION (proteins are localized to the corresponding organelle), cytoplasm
G234064, Essential, GTP/GDP-exchange factors (GEFs), Translation complexes, ?, PS00824, 1, PROTEIN SYNTHESIS, cytoplasm
G234064, Essential, GTP/GDP-exchange factors (GEFs), Translation complexes, ?, PS00825, 1, CELLULAR ORGANIZATION (proteins are localized to the corresponding organelle), cytoplasm

CREATE TABLE `Interactions` (
  GeneID1 TEXT PRIMARY KEY REFERENCES Classification(GeneID),
  GeneID2 TEXT PRIMARY KEY REFERENCES Classification(GeneID),
  Type TEXT,
  Expression_Corr REAL
);
Sample rows from `Interactions`:
G234064, G234126, Genetic-Physical, 0.914095071
G234064, G235065, Genetic-Physical, 0.751584888
G234065, G234371, Genetic, 0.823773738

","genes, interactions","interactions.expression_corr, genes.geneid, interactions.geneid1, interactions.geneid2, genes.localization"
cs_semester,"Among the students with a capability below 3, what is the difference of undergraduate students from research postgraduate students?",SELECT SUM(case when t2.type = 'UG' then 1 else 0 end) - SUM(case when t2.type = 'RPG' then 1 else 0 end) FROM ra as t1 inner JOIN student as t2 ON t1.student_id = t2.student_id WHERE t1.capability < 3,"CREATE TABLE `ra` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `ra`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

","CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

CREATE TABLE `prof` (
  prof_id INTEGER,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  popularity INTEGER,
  teachingability INTEGER,
  graduate_from TEXT
);
Sample rows from `prof`:
1, Male, Nathaniel, Pigford, npigford0@hku.hk, 3, 5, University of Washington
2, Male, Zhihua, Zhou, zzhihua@hku.hk, 2, 1, Beijing Polytechnic University
3, Male, Ogdon, Zywicki, ozywicki2@hku.hk, 2, 2, University of Boston

CREATE TABLE `RA` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `RA`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

","ra, student","student.type, ra.student_id, student.student_id, ra.capability"
books,Provide the title of the books published in British-English.,SELECT DISTINCT t1.title FROM book as t1 inner JOIN book_language as t2 ON t1.language_id = t2.language_id WHERE t2.language_name = 'British English',"CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","book, book_language","book.title, book.language_id, book_language.language_id, book_language.language_name"
simpson_episodes,Which title is the winner of Best International TV Series in 2017?,"SELECT t2.title FROM award as t1 inner JOIN episode as t2 ON t1.episode_id = t2.episode_id WHERE t1.award = 'Best International TV Series' AND substr(t1.year, 1, 4) = '2017';","CREATE TABLE `award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","award, episode","episode.title, award.episode_id, episode.episode_id, award.award, award.year"
music_platform_2,"What is the average rating for the ""crime-junkie"" podcast?",SELECT AVG(t2.rating) FROM podcasts as t1 inner JOIN reviews as t2 ON t2.podcast_id = t1.podcast_id WHERE t1.title = 'Crime Junkie',"CREATE TABLE `podcasts` (
  podcast_id TEXT PRIMARY KEY,
  itunes_id INTEGER,
  slug TEXT,
  itunes_url TEXT,
  title TEXT
);
Sample rows from `podcasts`:
a00018b54eb342567c94dacfb2a3e504, 1313466221, scaling-global, https://podcasts.apple.com/us/podcast/scaling-global/id1313466221, Scaling Global
a00043d34e734b09246d17dc5d56f63c, 158973461, cornerstone-baptist-church-of-orlando, https://podcasts.apple.com/us/podcast/cornerstone-baptist-church-of-orlando/id158973461, Cornerstone Baptist Church of Orlando
a0004b1ef445af9dc84dad1e7821b1e3, 139076942, mystery-dancing-in-the-dark, https://podcasts.apple.com/us/podcast/mystery-dancing-in-the-dark/id139076942, Mystery: Dancing in the Dark

CREATE TABLE `reviews` (
  podcast_id TEXT REFERENCES podcasts(None),
  title TEXT,
  content TEXT,
  rating INTEGER,
  author_id TEXT,
  created_at TEXT
);
Sample rows from `reviews`:
c61aa81c9b929a66f0c1db6cbe5d8548, really interesting!, Thanks for providing these insights.  Really enjoy the variety and depth -- please keep them coming!, 5, F7E5A318989779D, 2018-04-24T12:05:16-07:00
c61aa81c9b929a66f0c1db6cbe5d8548, Must listen for anyone interested in the arts!!!, Super excited to see this podcast grow. So many fun topics to talk about...Shari is really engaging. Definitely subscribing and would recommend to anyone interested in the arts!!, 5, F6BF5472689BD12, 2018-05-09T18:14:32-07:00
ad4f2bf69c72b8db75978423c25f379e, nauseatingly left, I'm a liberal myself, but its pretty obvious and annoying that they're trying to push their beliefs on the listeners. Get a more politically diverse production staff, we like to see issues from multiple point of views not just yours., 1, 1AB95B8E6E1309E, 2019-06-11T14:53:39-07:00

","CREATE TABLE `runs` (
  run_at TEXT,
  max_rowid INTEGER,
  reviews_added INTEGER
);
Sample rows from `runs`:
2021-05-10 02:53:00, 3266481, 1215223
2021-06-06 21:34:36, 3300773, 13139
2021-07-02 18:04:55, 3329699, 11561

CREATE TABLE `podcasts` (
  podcast_id TEXT PRIMARY KEY,
  itunes_id INTEGER,
  slug TEXT,
  itunes_url TEXT,
  title TEXT
);
Sample rows from `podcasts`:
a00018b54eb342567c94dacfb2a3e504, 1313466221, scaling-global, https://podcasts.apple.com/us/podcast/scaling-global/id1313466221, Scaling Global
a00043d34e734b09246d17dc5d56f63c, 158973461, cornerstone-baptist-church-of-orlando, https://podcasts.apple.com/us/podcast/cornerstone-baptist-church-of-orlando/id158973461, Cornerstone Baptist Church of Orlando
a0004b1ef445af9dc84dad1e7821b1e3, 139076942, mystery-dancing-in-the-dark, https://podcasts.apple.com/us/podcast/mystery-dancing-in-the-dark/id139076942, Mystery: Dancing in the Dark

CREATE TABLE `reviews` (
  podcast_id TEXT REFERENCES podcasts(None),
  title TEXT,
  content TEXT,
  rating INTEGER,
  author_id TEXT,
  created_at TEXT
);
Sample rows from `reviews`:
c61aa81c9b929a66f0c1db6cbe5d8548, really interesting!, Thanks for providing these insights.  Really enjoy the variety and depth -- please keep them coming!, 5, F7E5A318989779D, 2018-04-24T12:05:16-07:00
c61aa81c9b929a66f0c1db6cbe5d8548, Must listen for anyone interested in the arts!!!, Super excited to see this podcast grow. So many fun topics to talk about...Shari is really engaging. Definitely subscribing and would recommend to anyone interested in the arts!!, 5, F6BF5472689BD12, 2018-05-09T18:14:32-07:00
ad4f2bf69c72b8db75978423c25f379e, nauseatingly left, I'm a liberal myself, but its pretty obvious and annoying that they're trying to push their beliefs on the listeners. Get a more politically diverse production staff, we like to see issues from multiple point of views not just yours., 1, 1AB95B8E6E1309E, 2019-06-11T14:53:39-07:00

CREATE TABLE `categories` (
  podcast_id TEXT PRIMARY KEY REFERENCES podcasts(None),
  category TEXT PRIMARY KEY
);
Sample rows from `categories`:
c61aa81c9b929a66f0c1db6cbe5d8548, arts
c61aa81c9b929a66f0c1db6cbe5d8548, arts-performing-arts
c61aa81c9b929a66f0c1db6cbe5d8548, music

","podcasts, reviews","reviews.rating, reviews.podcast_id, podcasts.podcast_id, podcasts.title"
soccer_2016,How many of the matches are Superover?,SELECT SUM(case when t2.win_type = 'wickets' then 1 else 0 end) FROM `match` as t1 inner JOIN win_by as t2 ON t1.win_type = t2.win_id,"CREATE TABLE `match` (
  Match_Id INTEGER,
  Team_1 INTEGER REFERENCES Team(Team_Id),
  Team_2 INTEGER REFERENCES Team(Team_Id),
  Match_Date DATE,
  Season_Id INTEGER REFERENCES Season(Season_Id),
  Venue_Id INTEGER REFERENCES Venue(Venue_Id),
  Toss_Winner INTEGER REFERENCES Team(Team_Id),
  Toss_Decide INTEGER REFERENCES Toss_Decision(Toss_Id),
  Win_Type INTEGER REFERENCES Win_By(Win_Id),
  Win_Margin INTEGER,
  Outcome_type INTEGER REFERENCES Out_Type(Out_Id),
  Match_Winner INTEGER REFERENCES Team(Team_Id),
  Man_of_the_Match INTEGER REFERENCES Player(Player_Id)
);
Sample rows from `match`:
335987, 2, 1, 2008-04-18, 1, 1, 2, 1, 1, 140, 1, 1, 2
335988, 4, 3, 2008-04-19, 1, 2, 3, 2, 1, 33, 1, 3, 19
335989, 6, 5, 2008-04-19, 1, 3, 5, 2, 2, 9, 1, 6, 90

CREATE TABLE `win_by` (
  Win_Id INTEGER,
  Win_Type TEXT
);
Sample rows from `win_by`:
1, runs
2, wickets
3, NO Result

","CREATE TABLE `Batting_Style` (
  Batting_Id INTEGER,
  Batting_hand TEXT
);
Sample rows from `Batting_Style`:
1, Left-hand bat
2, Right-hand bat

CREATE TABLE `Bowling_Style` (
  Bowling_Id INTEGER,
  Bowling_skill TEXT
);
Sample rows from `Bowling_Style`:
1, Right-arm medium
2, Right-arm offbreak
3, Right-arm fast-medium

CREATE TABLE `City` (
  City_Id INTEGER,
  City_Name TEXT,
  Country_id INTEGER
);
Sample rows from `City`:
1, Bangalore, 1
2, Chandigarh, 1
3, Delhi, 1

CREATE TABLE `Country` (
  Country_Id INTEGER REFERENCES Country(Country_Id),
  Country_Name TEXT
);
Sample rows from `Country`:
1, India
2, South Africa
3, U.A.E

CREATE TABLE `Extra_Type` (
  Extra_Id INTEGER,
  Extra_Name TEXT
);
Sample rows from `Extra_Type`:
1, legbyes
2, wides
3, byes

CREATE TABLE `Extra_Runs` (
  Match_Id INTEGER PRIMARY KEY,
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Extra_Type_Id INTEGER REFERENCES Extra_Type(Extra_Id),
  Extra_Runs INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Extra_Runs`:
335987, 1, 1, 1, 1, 1
335987, 1, 2, 2, 1, 2
335987, 1, 3, 2, 1, 1

CREATE TABLE `Out_Type` (
  Out_Id INTEGER,
  Out_Name TEXT
);
Sample rows from `Out_Type`:
1, caught
2, bowled
3, run out

CREATE TABLE `Outcome` (
  Outcome_Id INTEGER,
  Outcome_Type TEXT
);
Sample rows from `Outcome`:
1, Result
2, No Result
3, Superover

CREATE TABLE `Player` (
  Player_Id INTEGER,
  Player_Name TEXT,
  DOB DATE,
  Batting_hand INTEGER REFERENCES Batting_Style(Batting_Id),
  Bowling_skill INTEGER REFERENCES Bowling_Style(Bowling_Id),
  Country_Name INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Player`:
1, SC Ganguly, 1972-07-08, 1, 1, 1
2, BB McCullum, 1981-09-27, 2, 1, 4
3, RT Ponting, 1974-12-19, 2, 1, 5

CREATE TABLE `Rolee` (
  Role_Id INTEGER,
  Role_Desc TEXT
);
Sample rows from `Rolee`:
1, Captain
2, Keeper
3, Player

CREATE TABLE `Season` (
  Season_Id INTEGER,
  Man_of_the_Series INTEGER,
  Orange_Cap INTEGER,
  Purple_Cap INTEGER,
  Season_Year INTEGER
);
Sample rows from `Season`:
1, 32, 100, 102, 2008
2, 53, 18, 61, 2009
3, 133, 133, 131, 2010

CREATE TABLE `Team` (
  Team_Id INTEGER,
  Team_Name TEXT
);
Sample rows from `Team`:
1, Kolkata Knight Riders
2, Royal Challengers Bangalore
3, Chennai Super Kings

CREATE TABLE `Toss_Decision` (
  Toss_Id INTEGER,
  Toss_Name TEXT
);
Sample rows from `Toss_Decision`:
1, field
2, bat

CREATE TABLE `Umpire` (
  Umpire_Id INTEGER,
  Umpire_Name TEXT,
  Umpire_Country INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Umpire`:
1, Asad Rauf, 6
2, MR Benson, 10
3, Aleem Dar, 6

CREATE TABLE `Venue` (
  Venue_Id INTEGER,
  Venue_Name TEXT,
  City_Id INTEGER REFERENCES City(City_Id)
);
Sample rows from `Venue`:
1, M Chinnaswamy Stadium, 1
2, Punjab Cricket Association Stadium, 2
3, Feroz Shah Kotla, 3

CREATE TABLE `Win_By` (
  Win_Id INTEGER,
  Win_Type TEXT
);
Sample rows from `Win_By`:
1, runs
2, wickets
3, NO Result

CREATE TABLE `Match` (
  Match_Id INTEGER,
  Team_1 INTEGER REFERENCES Team(Team_Id),
  Team_2 INTEGER REFERENCES Team(Team_Id),
  Match_Date DATE,
  Season_Id INTEGER REFERENCES Season(Season_Id),
  Venue_Id INTEGER REFERENCES Venue(Venue_Id),
  Toss_Winner INTEGER REFERENCES Team(Team_Id),
  Toss_Decide INTEGER REFERENCES Toss_Decision(Toss_Id),
  Win_Type INTEGER REFERENCES Win_By(Win_Id),
  Win_Margin INTEGER,
  Outcome_type INTEGER REFERENCES Out_Type(Out_Id),
  Match_Winner INTEGER REFERENCES Team(Team_Id),
  Man_of_the_Match INTEGER REFERENCES Player(Player_Id)
);
Sample rows from `Match`:
335987, 2, 1, 2008-04-18, 1, 1, 2, 1, 1, 140, 1, 1, 2
335988, 4, 3, 2008-04-19, 1, 2, 3, 2, 1, 33, 1, 3, 19
335989, 6, 5, 2008-04-19, 1, 3, 5, 2, 2, 9, 1, 6, 90

CREATE TABLE `Ball_by_Ball` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Innings_No INTEGER PRIMARY KEY,
  Team_Batting INTEGER,
  Team_Bowling INTEGER,
  Striker_Batting_Position INTEGER,
  Striker INTEGER,
  Non_Striker INTEGER,
  Bowler INTEGER
);
Sample rows from `Ball_by_Ball`:
335987, 1, 1, 1, 1, 2, 1, 1, 2, 14
335987, 1, 1, 2, 2, 1, 1, 6, 7, 106
335987, 1, 2, 1, 1, 2, 2, 2, 1, 14

CREATE TABLE `Batsman_Scored` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Runs_Scored INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Batsman_Scored`:
335987, 1, 1, 0, 1
335987, 1, 1, 1, 2
335987, 1, 2, 0, 1

CREATE TABLE `Player_Match` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Player_Id INTEGER PRIMARY KEY REFERENCES Player(Player_Id),
  Role_Id INTEGER PRIMARY KEY REFERENCES Rolee(Role_Id),
  Team_Id INTEGER REFERENCES Team(Team_Id)
);
Sample rows from `Player_Match`:
335987, 1, 1, 1
335987, 2, 3, 1
335987, 3, 3, 1

CREATE TABLE `Wicket_Taken` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Player_Out INTEGER REFERENCES Player(Player_Id),
  Kind_Out INTEGER REFERENCES Out_Type(Out_Id),
  Fielders INTEGER REFERENCES Player(Player_Id),
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Wicket_Taken`:
335987, 2, 1, 6, 2, None, 2
335987, 3, 2, 8, 2, None, 2
335987, 5, 5, 9, 1, 83, 2

","match, win_by","win_by.win_type, match.win_type, win_by.win_id"
professional_basketball,What is the nickname of the NBA player whose team competed in the Western Conference in the season 2006 and who had a total of two blocks?,SELECT t2.namenick FROM player_allstar as t1 inner JOIN players as t2 ON t1.playerid = t2.playerid WHERE t1.blocks = 2 AND t1.conference = 'West' AND t1.season_id = 2006,"CREATE TABLE `player_allstar` (
  playerID TEXT PRIMARY KEY REFERENCES players(playerID),
  last_name TEXT,
  first_name TEXT,
  season_id INTEGER PRIMARY KEY,
  conference TEXT,
  league_id TEXT,
  games_played INTEGER,
  minutes INTEGER,
  points INTEGER,
  o_rebounds INTEGER,
  d_rebounds INTEGER,
  rebounds INTEGER,
  assists INTEGER,
  steals INTEGER,
  blocks INTEGER,
  turnovers INTEGER,
  personal_fouls INTEGER,
  fg_attempted INTEGER,
  fg_made INTEGER,
  ft_attempted INTEGER,
  ft_made INTEGER,
  three_attempted INTEGER,
  three_made INTEGER
);
Sample rows from `player_allstar`:
abdulka01, Abdul-Jabbar, Kareem, 1969, East, NBA, 1, 18, 10, None, None, 11, 4, None, None, None, None, 8, 4, 2, 2, None, None
abdulka01, Abdul-Jabbar, Kareem, 1970, West, NBA, 1, 30, 19, None, None, 14, 1, None, None, None, None, 16, 8, 4, 3, None, None
abdulka01, Abdul-Jabbar, Kareem, 1971, West, NBA, 1, 19, 12, None, None, 7, 2, None, None, None, None, 10, 5, 2, 2, None, None

CREATE TABLE `players` (
  playerID TEXT PRIMARY KEY,
  useFirst TEXT,
  firstName TEXT,
  middleName TEXT,
  lastName TEXT,
  nameGiven TEXT,
  fullGivenName TEXT,
  nameSuffix TEXT,
  nameNick TEXT,
  pos TEXT,
  firstseason INTEGER,
  lastseason INTEGER,
  height REAL,
  weight INTEGER,
  college TEXT,
  collegeOther TEXT,
  birthDate DATE,
  birthCity TEXT,
  birthState TEXT,
  birthCountry TEXT,
  highSchool TEXT,
  hsCity TEXT,
  hsState TEXT,
  hsCountry TEXT,
  deathDate DATE,
  race TEXT
);
Sample rows from `players`:
abdelal01, Alaa, Alaa, None, Abdelnaby, None, None, None, None, F-C, 0, 0, 82.0, 240, Duke, None, 1968-06-24, Cairo, None, EGY, Bloomfield Senior, Bloomfield, NJ, USA, 0000-00-00, B
abdulka01, Kareem, Kareem, None, Abdul-Jabbar, None, Ferdinand Lewis Alcindor, Jr., None, Lew, Cap, C, 0, 0, 85.0, 225, UCLA, None, 1947-04-16, New York, NY, USA, Power Memorial, New York, NY, USA, 0000-00-00, B
abdulma01, Mahdi, Mahdi, None, Abdul-Rahman, None, Walter Raphael Hazzard, Jr., None, Walt, G, 0, 0, 74.0, 185, UCLA, Santa Monica City, 1942-04-15, Wilmington, DE, USA, Overbrook / Moton, Philadelphia / Easton, PA / MD, USA, 2011-11-18, B

","CREATE TABLE `awards_players` (
  playerID TEXT PRIMARY KEY REFERENCES players(playerID),
  award TEXT PRIMARY KEY,
  year INTEGER PRIMARY KEY,
  lgID TEXT,
  note TEXT,
  pos TEXT
);
Sample rows from `awards_players`:
abdulka01, All-Defensive Second Team, 1969, NBA, None, None
abdulka01, All-NBA Second Team, 1969, NBA, None, C
abdulka01, Rookie of the Year, 1969, NBA, None, None

CREATE TABLE `coaches` (
  coachID TEXT PRIMARY KEY,
  year INTEGER PRIMARY KEY REFERENCES teams(year),
  tmID TEXT PRIMARY KEY REFERENCES teams(tmID),
  lgID TEXT,
  stint INTEGER PRIMARY KEY,
  won INTEGER,
  lost INTEGER,
  post_wins INTEGER,
  post_losses INTEGER
);
Sample rows from `coaches`:
adelmri01, 1988, POR, NBA, 2, 14, 21, 0, 3
adelmri01, 1989, POR, NBA, 1, 59, 23, 12, 9
adelmri01, 1990, POR, NBA, 1, 63, 19, 9, 7

CREATE TABLE `draft` (
  id INTEGER,
  draftYear INTEGER REFERENCES teams(year),
  draftRound INTEGER,
  draftSelection INTEGER,
  draftOverall INTEGER,
  tmID TEXT REFERENCES teams(tmID),
  firstName TEXT,
  lastName TEXT,
  suffixName TEXT,
  playerID TEXT,
  draftFrom TEXT,
  lgID TEXT
);
Sample rows from `draft`:
1, 1967, 0, 0, 0, ANA, Darrell, Hardy, None, hardyda01, Baylor, ABA
2, 1967, 0, 0, 0, ANA, Bob, Krulish, None, None, Pacific, ABA
3, 1967, 0, 0, 0, ANA, Bob, Lewis, None, lewisbo01, North Carolina, ABA

CREATE TABLE `player_allstar` (
  playerID TEXT PRIMARY KEY REFERENCES players(playerID),
  last_name TEXT,
  first_name TEXT,
  season_id INTEGER PRIMARY KEY,
  conference TEXT,
  league_id TEXT,
  games_played INTEGER,
  minutes INTEGER,
  points INTEGER,
  o_rebounds INTEGER,
  d_rebounds INTEGER,
  rebounds INTEGER,
  assists INTEGER,
  steals INTEGER,
  blocks INTEGER,
  turnovers INTEGER,
  personal_fouls INTEGER,
  fg_attempted INTEGER,
  fg_made INTEGER,
  ft_attempted INTEGER,
  ft_made INTEGER,
  three_attempted INTEGER,
  three_made INTEGER
);
Sample rows from `player_allstar`:
abdulka01, Abdul-Jabbar, Kareem, 1969, East, NBA, 1, 18, 10, None, None, 11, 4, None, None, None, None, 8, 4, 2, 2, None, None
abdulka01, Abdul-Jabbar, Kareem, 1970, West, NBA, 1, 30, 19, None, None, 14, 1, None, None, None, None, 16, 8, 4, 3, None, None
abdulka01, Abdul-Jabbar, Kareem, 1971, West, NBA, 1, 19, 12, None, None, 7, 2, None, None, None, None, 10, 5, 2, 2, None, None

CREATE TABLE `players` (
  playerID TEXT PRIMARY KEY,
  useFirst TEXT,
  firstName TEXT,
  middleName TEXT,
  lastName TEXT,
  nameGiven TEXT,
  fullGivenName TEXT,
  nameSuffix TEXT,
  nameNick TEXT,
  pos TEXT,
  firstseason INTEGER,
  lastseason INTEGER,
  height REAL,
  weight INTEGER,
  college TEXT,
  collegeOther TEXT,
  birthDate DATE,
  birthCity TEXT,
  birthState TEXT,
  birthCountry TEXT,
  highSchool TEXT,
  hsCity TEXT,
  hsState TEXT,
  hsCountry TEXT,
  deathDate DATE,
  race TEXT
);
Sample rows from `players`:
abdelal01, Alaa, Alaa, None, Abdelnaby, None, None, None, None, F-C, 0, 0, 82.0, 240, Duke, None, 1968-06-24, Cairo, None, EGY, Bloomfield Senior, Bloomfield, NJ, USA, 0000-00-00, B
abdulka01, Kareem, Kareem, None, Abdul-Jabbar, None, Ferdinand Lewis Alcindor, Jr., None, Lew, Cap, C, 0, 0, 85.0, 225, UCLA, None, 1947-04-16, New York, NY, USA, Power Memorial, New York, NY, USA, 0000-00-00, B
abdulma01, Mahdi, Mahdi, None, Abdul-Rahman, None, Walter Raphael Hazzard, Jr., None, Walt, G, 0, 0, 74.0, 185, UCLA, Santa Monica City, 1942-04-15, Wilmington, DE, USA, Overbrook / Moton, Philadelphia / Easton, PA / MD, USA, 2011-11-18, B

CREATE TABLE `teams` (
  year INTEGER PRIMARY KEY,
  lgID TEXT,
  tmID TEXT PRIMARY KEY,
  franchID TEXT,
  confID TEXT,
  divID TEXT,
  rank INTEGER,
  confRank INTEGER,
  playoff TEXT,
  name TEXT,
  o_fgm INTEGER,
  o_ftm INTEGER,
  o_pts INTEGER,
  d_pts INTEGER,
  homeWon INTEGER,
  homeLost INTEGER,
  awayWon INTEGER,
  awayLost INTEGER,
  won INTEGER,
  lost INTEGER,
  games INTEGER,
  arena TEXT
);
Sample rows from `teams`:
1937, NBL, AFS, AFS, None, EA, 1, 0, CF, Akron Firestone Non-Skids, 249, 183, 681, 578, 8, 1, 5, 3, 14, 4, 18, None
1937, NBL, AGW, AGW, None, EA, 2, 0, WC, Akron Goodyear Wingfoots, 243, 159, 645, 498, 8, 1, 5, 4, 13, 5, 18, None
1937, NBL, BFB, BFB, None, EA, 4, 0, None, Buffalo Bisons, 108, 46, 262, 275, 2, 2, 1, 4, 3, 6, 9, None

CREATE TABLE `awards_coaches` (
  id INTEGER,
  year INTEGER REFERENCES coaches(year),
  coachID TEXT REFERENCES coaches(coachID),
  award TEXT,
  lgID TEXT,
  note TEXT
);
Sample rows from `awards_coaches`:
1, 1962, gallaha01, NBA Coach of the Year, NBA, None
2, 1963, hannual01, NBA Coach of the Year, NBA, None
3, 1964, auerbre01, NBA Coach of the Year, NBA, None

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
awards_coaches, 61
players_teams, 23751
series_post, 775

CREATE TABLE `players_teams` (
  id INTEGER,
  playerID TEXT REFERENCES players(None),
  year INTEGER REFERENCES teams(year),
  stint INTEGER,
  tmID TEXT REFERENCES teams(tmID),
  lgID TEXT,
  GP INTEGER,
  GS INTEGER,
  minutes INTEGER,
  points INTEGER,
  oRebounds INTEGER,
  dRebounds INTEGER,
  rebounds INTEGER,
  assists INTEGER,
  steals INTEGER,
  blocks INTEGER,
  turnovers INTEGER,
  PF INTEGER,
  fgAttempted INTEGER,
  fgMade INTEGER,
  ftAttempted INTEGER,
  ftMade INTEGER,
  threeAttempted INTEGER,
  threeMade INTEGER,
  PostGP INTEGER,
  PostGS INTEGER,
  PostMinutes INTEGER,
  PostPoints INTEGER,
  PostoRebounds INTEGER,
  PostdRebounds INTEGER,
  PostRebounds INTEGER,
  PostAssists INTEGER,
  PostSteals INTEGER,
  PostBlocks INTEGER,
  PostTurnovers INTEGER,
  PostPF INTEGER,
  PostfgAttempted INTEGER,
  PostfgMade INTEGER,
  PostftAttempted INTEGER,
  PostftMade INTEGER,
  PostthreeAttempted INTEGER,
  PostthreeMade INTEGER,
  note TEXT
);
Sample rows from `players_teams`:
1, abdelal01, 1990, 1, POR, NBA, 43, 0, 290, 135, 27, 62, 89, 12, 4, 12, 22, 39, 116, 55, 44, 25, 0, 0, 5, 0, 13, 4, 1, 2, 3, 0, 0, 0, 0, 0, 6, 2, 0, 0, 0, 0, None
2, abdelal01, 1991, 1, POR, NBA, 71, 0, 934, 432, 81, 179, 260, 30, 25, 17, 66, 132, 361, 178, 101, 76, 0, 0, 8, 0, 25, 12, 0, 4, 4, 2, 0, 0, 2, 4, 10, 5, 4, 2, 0, 0, None
3, abdelal01, 1992, 1, MIL, NBA, 12, 0, 159, 64, 12, 25, 37, 10, 6, 4, 0, 24, 56, 26, 16, 12, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, None

CREATE TABLE `series_post` (
  id INTEGER,
  year INTEGER REFERENCES teams(year) REFERENCES teams(year),
  round TEXT,
  series TEXT,
  tmIDWinner TEXT REFERENCES teams(tmID),
  lgIDWinner TEXT,
  tmIDLoser TEXT REFERENCES teams(tmID),
  lgIDLoser TEXT,
  W INTEGER,
  L INTEGER
);
Sample rows from `series_post`:
1, 1946, F, O, PHW, NBA, CHS, NBA, 4, 1
2, 1946, QF, M, NYK, NBA, CLR, NBA, 2, 1
3, 1946, QF, M, PHW, NBA, STB, NBA, 2, 1

","player_allstar, players","players.namenick, player_allstar.playerid, players.playerid, player_allstar.blocks, player_allstar.conference, player_allstar.season_id"
chicago_crime,Please state the district name where incident number JB106545 took place.,SELECT t1.case_number FROM crime as t1 inner JOIN fbi_code as t2 ON t1.fbi_code_no = t2.fbi_code_no WHERE t2.title = 'Criminal Sexual Assault' AND t2.crime_against = 'Persons' AND t1.arrest = 'TRUE' LIMIT 3,"CREATE TABLE `crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

CREATE TABLE `fbi_code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `fbi_code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

","CREATE TABLE `Community_Area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `Community_Area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `District` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `District`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `FBI_Code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `FBI_Code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `IUCR` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `IUCR`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `Neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `Neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `Ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `Ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `Crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `Crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","crime, fbi_code","crime.case_number, crime.fbi_code_no, fbi_code.fbi_code_no, fbi_code.title, fbi_code.crime_against, crime.arrest"
olympics,"In the Winter and Summer Olympics of 1988, which game has the most number of competitors? Find the difference of the number of competitors between the two games.","SELECT p1 , ( SELECT MAX(p2) - MIN(p2) FROM ( SELECT COUNT(t2.person_id) as p2 FROM games as t1 inner JOIN games_competitor as t2 ON t1.id = t2.games_id WHERE t1.games_name IN ('1988 Winter', '1988 Summer') GROUP BY t1.season ) ORDER BY p2 DESC LIMIT 1 ) FROM ( SELECT t1.season as p1, COUNT(t2.person_id) as p2 FROM games as t1 inner JOIN games_competitor as t2 ON t1.id = t2.games_id WHERE t1.games_name IN ('1988 Winter', '1988 Summer') GROUP BY t1.season ) ORDER BY p2 DESC LIMIT 1","CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

","CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `medal` (
  id INTEGER,
  medal_name TEXT
);
Sample rows from `medal`:
1, Gold
2, Silver
3, Bronze

CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `sport` (
  id INTEGER,
  sport_name TEXT
);
Sample rows from `sport`:
1, Aeronautics
2, Alpine Skiing
3, Alpinism

CREATE TABLE `event` (
  id INTEGER,
  sport_id INTEGER REFERENCES sport(id),
  event_name TEXT
);
Sample rows from `event`:
1, 9, Basketball Men's Basketball
2, 33, Judo Men's Extra-Lightweight
3, 25, Football Men's Football

CREATE TABLE `competitor_event` (
  event_id INTEGER REFERENCES event(id),
  competitor_id INTEGER REFERENCES games_competitor(id),
  medal_id INTEGER REFERENCES medal(id)
);
Sample rows from `competitor_event`:
1, 1, 4
2, 2, 4
3, 3, 4

","games, games_competitor","games_competitor.person_id, games.id, games_competitor.games_id, games.games_name, games.season"
shipping,"Among the shipments to a customer from Texas, what percentage of the shipments shipped in 2017?","SELECT cast(SUM(case when strftime('%Y', t1.ship_date) = '2017' then 1 else 0 end) as real ) * 100 / COUNT(*) FROM shipment as t1 inner JOIN customer as t2 ON t1.cust_id = t2.cust_id WHERE t2.state = 'TX'","CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

CREATE TABLE `customer` (
  cust_id INTEGER,
  cust_name TEXT,
  annual_revenue INTEGER,
  cust_type TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip REAL,
  phone TEXT
);
Sample rows from `customer`:
193, Advanced Fabricators, 39588651, manufacturer, 5141 Summit Boulevard, West Palm Beach, FL, 33415.0, (561) 683-3535
304, Pard's Trailer Sales, 17158109, wholesaler, 5910 South 300 West, Salt Lake City, UT, 84107.0, (801) 262-4864
314, Saar Enterprises, Inc., 47403613, retailer, 11687 192nd Street, Council Bluffs, IA, 51503.0, (712) 366-4929

","CREATE TABLE `city` (
  city_id INTEGER,
  city_name TEXT,
  state TEXT,
  population INTEGER,
  area REAL
);
Sample rows from `city`:
100, Union City, New Jersey, 67088, 1.3
101, Huntington Park, California, 61348, 3.0
102, Passaic, New Jersey, 67861, 3.1

CREATE TABLE `customer` (
  cust_id INTEGER,
  cust_name TEXT,
  annual_revenue INTEGER,
  cust_type TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip REAL,
  phone TEXT
);
Sample rows from `customer`:
193, Advanced Fabricators, 39588651, manufacturer, 5141 Summit Boulevard, West Palm Beach, FL, 33415.0, (561) 683-3535
304, Pard's Trailer Sales, 17158109, wholesaler, 5910 South 300 West, Salt Lake City, UT, 84107.0, (801) 262-4864
314, Saar Enterprises, Inc., 47403613, retailer, 11687 192nd Street, Council Bluffs, IA, 51503.0, (712) 366-4929

CREATE TABLE `driver` (
  driver_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip_code INTEGER,
  phone TEXT
);
Sample rows from `driver`:
20, Sue, Newell, 268 Richmond Ave, Memphis, TN, 38106, (901) 774-6569
21, Andrea, Simons, 3574 Oak Limb Cv, Memphis, TN, 38135, (901) 384-0984
22, Roger, McHaney, 1839 S Orleans St, Memphis, TN, 38106, (901) 948-1043

CREATE TABLE `truck` (
  truck_id INTEGER,
  make TEXT,
  model_year INTEGER
);
Sample rows from `truck`:
1, Peterbilt, 2005
2, Mack, 2006
3, Peterbilt, 2007

CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

","shipment, customer","shipment.ship_date, shipment.cust_id, customer.cust_id, customer.state"
donor,Which item provided for projects with Mathematics as a primary subject is the most expensive?,SELECT t1.item_name FROM resources as t1 inner JOIN projects as t2 ON t1.projectid = t2.projectid WHERE t2.primary_focus_subject = 'Mathematics' ORDER BY t1.item_unit_price DESC LIMIT 1,"CREATE TABLE `resources` (
  resourceid TEXT PRIMARY KEY,
  projectid TEXT REFERENCES projects(projectid),
  vendorid INTEGER,
  vendor_name TEXT,
  project_resource_type TEXT,
  item_name TEXT,
  item_number TEXT,
  item_unit_price REAL,
  item_quantity INTEGER
);
Sample rows from `resources`:
8a1c1c45bc30d065061912fd9114fcf3, ffffc4f85b60efc5b52347df489d0238, 430, Woodwind and Brasswind, Technology, iPod nano 4th Gen 8GB (Black), 249995.001, 149.0, 4
015d2c4935c50427964a12dc3f584091, ffffac55ee02a49d1abc87ba6fc61135, 82, Best Buy for Business, Technology, Sony bloggie MHS-FS1 - camcorder - internal flash memory, BB11216668, 148.0, 1
26a02944b2f0c25f9abdeacca3ede3ee, ffff97ed93720407d70a2787475932b0, 767, Lakeshore Learning Materials, Supplies, VX748 - Best-Buy Jumbo Crayons - 12-Color Box, VX748, 69.95, 1

CREATE TABLE `projects` (
  projectid TEXT PRIMARY KEY,
  teacher_acctid TEXT,
  schoolid TEXT,
  school_ncesid TEXT,
  school_latitude REAL,
  school_longitude REAL,
  school_city TEXT,
  school_state TEXT,
  school_zip INTEGER,
  school_metro TEXT,
  school_district TEXT,
  school_county TEXT,
  school_charter TEXT,
  school_magnet TEXT,
  school_year_round TEXT,
  school_nlns TEXT,
  school_kipp TEXT,
  school_charter_ready_promise TEXT,
  teacher_prefix TEXT,
  teacher_teach_for_america TEXT,
  teacher_ny_teaching_fellow TEXT,
  primary_focus_subject TEXT,
  primary_focus_area TEXT,
  secondary_focus_subject TEXT,
  secondary_focus_area TEXT,
  resource_type TEXT,
  poverty_level TEXT,
  grade_level TEXT,
  fulfillment_labor_materials REAL,
  total_price_excluding_optional_support REAL,
  total_price_including_optional_support REAL,
  students_reached INTEGER,
  eligible_double_your_impact_match TEXT,
  eligible_almost_home_match TEXT,
  date_posted DATE
);
Sample rows from `projects`:
316ed8fb3b81402ff6ac8f721bb31192, 42d43fa6f37314365d08692e08680973, c0e6ce89b244764085691a1b8e28cb81, 063627006187, 36.57634, -119.608713, Selma, CA, 93662, None, Selma Unified Sch District, Fresno, f, f, f, f, f, f, Mrs., f, f, Literature & Writing, Literacy & Language, College & Career Prep, Applied Learning, Books, highest poverty, Grades 6-8, 30.0, 555.81, 653.89, 32, f, f, 2014-05-12
90de744e368a7e4883223ca49318ae30, 864eb466462bf704bf7a16a585ef296a, d711e47810900c96f26a5d0be30c446d, 483702008193, 32.911179, -96.72364, Dallas, TX, 75243, urban, Richardson Ind School District, Dallas, f, f, f, f, f, f, Mrs., f, f, Literacy, Literacy & Language, ESL, Literacy & Language, Books, highest poverty, Grades PreK-2, 30.0, 296.47, 348.79, 22, f, f, 2014-05-12
32943bb1063267de6ed19fc0ceb4b9a7, 37f85135259ece793213aca9d8765542, 665c3613013ba0a66e3a2a26b89f1b68, 410327000109, 45.166039, -122.414576, Colton, OR, 97017, rural, Colton School District 53, Clackamas, f, f, f, f, f, f, Mr., f, f, Literacy, Literacy & Language, Mathematics, Math & Science, Technology, high poverty, Grades PreK-2, 30.0, 430.89, 506.93, 17, f, f, 2014-05-11

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `essays` (
  projectid TEXT,
  teacher_acctid TEXT,
  title TEXT,
  short_description TEXT,
  need_statement TEXT,
  essay TEXT
);
Sample rows from `essays`:
ffffc4f85b60efc5b52347df489d0238, c24011b20fc161ed02248e85beb59a90, iMath, It is imperative that teachers bring technology into the classroom, if students are going to be able to survive in the 21st Century. The classroom needs to be ever changing along with the outside world. The iMath project will help students by obtaining cl, My students need four iPods., I am a fourth year fifth grade math teacher. The school I teach in is a fifth and sixth grade public school and is a Title One school which means that 95% of our students get free lunch. Presently, I am in the process of completing a Masters degree in Tec
ffffac55ee02a49d1abc87ba6fc61135, 947066d0af47e0566f334566553dd6a6, Recording Rockin' Readers, Can you imagine having to translate everything you read into sign language and relate it to what you already know? Help us do just that by giving us the camera that will record our stories and..., My students need a camcorder. , Can you imagine having to translate everything you read into sign language and relate it to what you already know? Help us do just that by giving us the camera that will record our stories and interpretations! 
\n
\nMy students are all deaf or hard of hea
ffff97ed93720407d70a2787475932b0, 462270f5d5c212162fcab11afa2623cb, Kindergarten In Need of Important Materials!, It takes a special person to donate to a group of children they don't know, especially in these hard economic times, but my students are worth it.  They deserve to have the proper supplies to ensure that their long education gets off to the right start, s, My students need 17 assorted classroom materials to ensure that they can learn as much as possible this year., Hi. I teach a wonderful group of 4-5 year old Kindergarten students.  They come in wanting and willing to learn new and exciting things each and every day. I work hard to ensure that my students get the most out of the entire school year. 
\n
\nFor the mo

CREATE TABLE `projects` (
  projectid TEXT PRIMARY KEY,
  teacher_acctid TEXT,
  schoolid TEXT,
  school_ncesid TEXT,
  school_latitude REAL,
  school_longitude REAL,
  school_city TEXT,
  school_state TEXT,
  school_zip INTEGER,
  school_metro TEXT,
  school_district TEXT,
  school_county TEXT,
  school_charter TEXT,
  school_magnet TEXT,
  school_year_round TEXT,
  school_nlns TEXT,
  school_kipp TEXT,
  school_charter_ready_promise TEXT,
  teacher_prefix TEXT,
  teacher_teach_for_america TEXT,
  teacher_ny_teaching_fellow TEXT,
  primary_focus_subject TEXT,
  primary_focus_area TEXT,
  secondary_focus_subject TEXT,
  secondary_focus_area TEXT,
  resource_type TEXT,
  poverty_level TEXT,
  grade_level TEXT,
  fulfillment_labor_materials REAL,
  total_price_excluding_optional_support REAL,
  total_price_including_optional_support REAL,
  students_reached INTEGER,
  eligible_double_your_impact_match TEXT,
  eligible_almost_home_match TEXT,
  date_posted DATE
);
Sample rows from `projects`:
316ed8fb3b81402ff6ac8f721bb31192, 42d43fa6f37314365d08692e08680973, c0e6ce89b244764085691a1b8e28cb81, 063627006187, 36.57634, -119.608713, Selma, CA, 93662, None, Selma Unified Sch District, Fresno, f, f, f, f, f, f, Mrs., f, f, Literature & Writing, Literacy & Language, College & Career Prep, Applied Learning, Books, highest poverty, Grades 6-8, 30.0, 555.81, 653.89, 32, f, f, 2014-05-12
90de744e368a7e4883223ca49318ae30, 864eb466462bf704bf7a16a585ef296a, d711e47810900c96f26a5d0be30c446d, 483702008193, 32.911179, -96.72364, Dallas, TX, 75243, urban, Richardson Ind School District, Dallas, f, f, f, f, f, f, Mrs., f, f, Literacy, Literacy & Language, ESL, Literacy & Language, Books, highest poverty, Grades PreK-2, 30.0, 296.47, 348.79, 22, f, f, 2014-05-12
32943bb1063267de6ed19fc0ceb4b9a7, 37f85135259ece793213aca9d8765542, 665c3613013ba0a66e3a2a26b89f1b68, 410327000109, 45.166039, -122.414576, Colton, OR, 97017, rural, Colton School District 53, Clackamas, f, f, f, f, f, f, Mr., f, f, Literacy, Literacy & Language, Mathematics, Math & Science, Technology, high poverty, Grades PreK-2, 30.0, 430.89, 506.93, 17, f, f, 2014-05-11

CREATE TABLE `donations` (
  donationid TEXT PRIMARY KEY,
  projectid TEXT REFERENCES projects(projectid),
  donor_acctid TEXT,
  donor_city TEXT,
  donor_state TEXT,
  donor_zip TEXT,
  is_teacher_acct TEXT,
  donation_timestamp DATETIME,
  donation_to_project REAL,
  donation_optional_support REAL,
  donation_total REAL,
  dollar_amount TEXT,
  donation_included_optional_support TEXT,
  payment_method TEXT,
  payment_included_acct_credit TEXT,
  payment_included_campaign_gift_card TEXT,
  payment_included_web_purchased_gift_card TEXT,
  payment_was_promo_matched TEXT,
  via_giving_page TEXT,
  for_honoree TEXT,
  donation_message TEXT
);
Sample rows from `donations`:
431d720bc3dfd75ae445a5eaa0b0638d, ffffac55ee02a49d1abc87ba6fc61135, 22cbc920c9b5fa08dfb331422f5926b5, Peachtree City, GA, 30269, f, 2011-08-25 14:27:34.807, 42.5, 7.5, 50.0, 10_to_100, t, no_cash_received, f, t, f, f, f, f, I gave to this project because I support the efforts of this teacher with each of her students, and her school, Suder Elementary School.
fcfedba1c8a0ba77d280cace80a909f6, ffffac55ee02a49d1abc87ba6fc61135, 521f1830a77c9dbbf8119d99c6206a16, None, GA, None, f, 2011-11-04 07:54:21.552, 26.83, 4.73, 31.56, 10_to_100, t, creditcard, f, t, f, f, f, f, I donated because I want to support kids in Georgia.
3fa95d29986aa6f401c6719ced3a3ce7, ffffac55ee02a49d1abc87ba6fc61135, 1e0a63fc8141c7ba26b8b44ca0871b90, Rockville, MD, 20853, f, 2011-11-02 22:53:53.019, 55.35, 0.0, 55.35, 10_to_100, f, no_cash_received, t, f, f, f, t, f, The Spark's 'pet' projects include those which support deaf students.  With just a few days left, the Spark's donors fund half of what remains, and challenge others to pull this project through to fruition.

CREATE TABLE `resources` (
  resourceid TEXT PRIMARY KEY,
  projectid TEXT REFERENCES projects(projectid),
  vendorid INTEGER,
  vendor_name TEXT,
  project_resource_type TEXT,
  item_name TEXT,
  item_number TEXT,
  item_unit_price REAL,
  item_quantity INTEGER
);
Sample rows from `resources`:
8a1c1c45bc30d065061912fd9114fcf3, ffffc4f85b60efc5b52347df489d0238, 430, Woodwind and Brasswind, Technology, iPod nano 4th Gen 8GB (Black), 249995.001, 149.0, 4
015d2c4935c50427964a12dc3f584091, ffffac55ee02a49d1abc87ba6fc61135, 82, Best Buy for Business, Technology, Sony bloggie MHS-FS1 - camcorder - internal flash memory, BB11216668, 148.0, 1
26a02944b2f0c25f9abdeacca3ede3ee, ffff97ed93720407d70a2787475932b0, 767, Lakeshore Learning Materials, Supplies, VX748 - Best-Buy Jumbo Crayons - 12-Color Box, VX748, 69.95, 1

","resources, projects","resources.item_name, resources.projectid, projects.projectid, projects.primary_focus_subject, resources.item_unit_price"
retail_world,"Among the products that are no longer in continuous production, how many of them have their supplier in the USA?",SELECT COUNT(t1.discontinued) FROM products as t1 inner JOIN suppliers as t2 ON t1.supplierid = t2.supplierid WHERE t2.country = 'USA' AND t1.discontinued = 1,"CREATE TABLE `products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

","products, suppliers","products.discontinued, products.supplierid, suppliers.supplierid, suppliers.country"
student_loan,Please list the departments the students are absent from school for 9 months are in.,SELECT t2.organ FROM longest_absense_from_school as t1 inner JOIN enlist as t2 ON t1.`name` = t2.`name` WHERE t1.`month` = 9,"CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

","longest_absense_from_school, enlist","enlist.organ, longest_absense_from_school.name, enlist.name, longest_absense_from_school.month"
law_episode,How many people did not enjoy the finale episode?,SELECT COUNT(t1.episode_id) FROM episode as t1 inner JOIN vote as t2 ON t1.episode_id = t2.episode_id WHERE t1.episode = 24 AND t2.stars = 1,"CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `vote`:
tt0629204, 10, 36, 17.7
tt0629204, 9, 39, 19.2
tt0629204, 8, 64, 31.5

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
tt0629239, nun
tt0629239, priest
tt0629420, police officer

CREATE TABLE `Person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  series TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  person_id TEXT REFERENCES Person(person_id),
  role TEXT,
  result TEXT
);
Sample rows from `Award`:
258, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0937725, None, Winner
259, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0792309, None, Winner
260, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0049569, None, Winner

CREATE TABLE `Credit` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  person_id TEXT PRIMARY KEY REFERENCES Person(person_id),
  category TEXT,
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
tt0629204, nm0226352, Additional Crew, technical advisor, true
tt0629204, nm0506974, Additional Crew, production accountant, true
tt0629204, nm4103116, Additional Crew, production accountant, true

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
tt0629204, 10, 36, 17.7
tt0629204, 9, 39, 19.2
tt0629204, 8, 64, 31.5

","episode, vote","episode.episode_id, vote.episode_id, episode.episode, vote.stars"
shakespeare,How many paragraphs are there in the longest chapter where Sir Richard Ratcliff appeared?,SELECT MAX(t2.paragraphnum) FROM characters as t1 inner JOIN paragraphs as t2 ON t1.id = t2.character_id WHERE t1.charname = 'Sir Richard Ratcliff',"CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

","CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
chapters, 19648
characters, 1266
paragraphs, 666327

CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

","characters, paragraphs","paragraphs.paragraphnum, characters.id, paragraphs.character_id, characters.charname"
sales_in_weather,What is the ID of the item that sold the best on the day with the highest max temperature in store no.3 in 2012?,SELECT t1.item_nbr FROM sales_in_weather as t1 inner JOIN relation as t2 ON t1.store_nbr = t2.store_nbr inner JOIN weather as t3 ON t2.station_nbr = t3.station_nbr WHERE t1.store_nbr = 3 AND t1.`date` LIKE '%2012%' AND tmax = ( SELECT MAX(tmax) FROM sales_in_weather as t1 inner JOIN relation as t2 ON t1.store_nbr = t2.store_nbr inner JOIN weather as t3 ON t2.station_nbr = t3.station_nbr WHERE t1.store_nbr = 3 AND t1.`date` LIKE '%2012%' ) GROUP BY t1.item_nbr ORDER BY SUM(units) DESC LIMIT 1,"CREATE TABLE `sales_in_weather` (
  date DATE PRIMARY KEY,
  store_nbr INTEGER PRIMARY KEY,
  item_nbr INTEGER PRIMARY KEY,
  units INTEGER
);
Sample rows from `sales_in_weather`:
2012-01-01, 1, 1, 0
2012-01-01, 1, 2, 0
2012-01-01, 1, 3, 0

CREATE TABLE `relation` (
  store_nbr INTEGER REFERENCES sales_in_weather(store_nbr),
  station_nbr INTEGER REFERENCES weather(station_nbr)
);
Sample rows from `relation`:
1, 1
2, 14
3, 7

CREATE TABLE `weather` (
  station_nbr INTEGER PRIMARY KEY,
  date DATE PRIMARY KEY,
  tmax INTEGER,
  tmin INTEGER,
  tavg INTEGER,
  depart INTEGER,
  dewpoint INTEGER,
  wetbulb INTEGER,
  heat INTEGER,
  cool INTEGER,
  sunrise TEXT,
  sunset TEXT,
  codesum TEXT,
  snowfall REAL,
  preciptotal REAL,
  stnpressure REAL,
  sealevel REAL,
  resultspeed REAL,
  resultdir INTEGER,
  avgspeed REAL
);
Sample rows from `weather`:
1, 2012-01-01, 52, 31, 42, None, 36, 40, 23, 0, None, None, RA FZFG BR, None, 0.05, 29.78, 29.92, 3.6, 20, 4.6
1, 2012-01-02, 50, 31, 41, None, 26, 35, 24, 0, None, None,  , None, 0.01, 29.44, 29.62, 9.8, 24, 10.3
1, 2012-01-03, 32, 11, 22, None, 4, 18, 43, 0, None, None,  , None, 0.0, 29.67, 29.87, 10.8, 31, 11.6

","CREATE TABLE `sales_in_weather` (
  date DATE PRIMARY KEY,
  store_nbr INTEGER PRIMARY KEY,
  item_nbr INTEGER PRIMARY KEY,
  units INTEGER
);
Sample rows from `sales_in_weather`:
2012-01-01, 1, 1, 0
2012-01-01, 1, 2, 0
2012-01-01, 1, 3, 0

CREATE TABLE `weather` (
  station_nbr INTEGER PRIMARY KEY,
  date DATE PRIMARY KEY,
  tmax INTEGER,
  tmin INTEGER,
  tavg INTEGER,
  depart INTEGER,
  dewpoint INTEGER,
  wetbulb INTEGER,
  heat INTEGER,
  cool INTEGER,
  sunrise TEXT,
  sunset TEXT,
  codesum TEXT,
  snowfall REAL,
  preciptotal REAL,
  stnpressure REAL,
  sealevel REAL,
  resultspeed REAL,
  resultdir INTEGER,
  avgspeed REAL
);
Sample rows from `weather`:
1, 2012-01-01, 52, 31, 42, None, 36, 40, 23, 0, None, None, RA FZFG BR, None, 0.05, 29.78, 29.92, 3.6, 20, 4.6
1, 2012-01-02, 50, 31, 41, None, 26, 35, 24, 0, None, None,  , None, 0.01, 29.44, 29.62, 9.8, 24, 10.3
1, 2012-01-03, 32, 11, 22, None, 4, 18, 43, 0, None, None,  , None, 0.0, 29.67, 29.87, 10.8, 31, 11.6

CREATE TABLE `relation` (
  store_nbr INTEGER REFERENCES sales_in_weather(store_nbr),
  station_nbr INTEGER REFERENCES weather(station_nbr)
);
Sample rows from `relation`:
1, 1
2, 14
3, 7

","sales_in_weather, relation, weather","sales_in_weather.item_nbr, sales_in_weather.store_nbr, relation.store_nbr, relation.station_nbr, weather.station_nbr, sales_in_weather.date, tmax, units"
movie_platform,"What's the percentage of the users who have rated ""1"" on the movie ""When Will I Be Loved""?",SELECT cast(SUM(case when t1.rating_score = 1 then 1 else 0 end) as real) * 100 / COUNT(*) FROM ratings as t1 inner JOIN movies as t2 ON t1.movie_id = t2.movie_id WHERE t2.movie_title = 'When Will I Be Loved',"CREATE TABLE `ratings` (
  movie_id INTEGER REFERENCES movies(movie_id),
  rating_id INTEGER REFERENCES ratings(rating_id),
  rating_url TEXT,
  rating_score INTEGER,
  rating_timestamp_utc TEXT,
  critic TEXT,
  critic_likes INTEGER,
  critic_comments INTEGER,
  user_id INTEGER REFERENCES ratings_users(user_id) REFERENCES lists_users(user_id),
  user_trialist INTEGER,
  user_subscriber INTEGER,
  user_eligible_for_trial INTEGER,
  user_has_payment_method INTEGER
);
Sample rows from `ratings`:
1066, 15610495, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/15610495, 3, 2017-06-10 12:38:33, None, 0, 0, 41579158, 0, 0, 1, 0
1066, 10704606, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/10704606, 2, 2014-08-15 23:42:31, None, 0, 0, 85981819, 1, 1, 0, 1
1066, 10177114, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/10177114, 2, 2014-01-30 13:21:57, None, 0, 0, 4208563, 0, 0, 1, 1

CREATE TABLE `movies` (
  movie_id INTEGER,
  movie_title TEXT,
  movie_release_year INTEGER,
  movie_url TEXT,
  movie_title_language TEXT,
  movie_popularity INTEGER,
  movie_image_url TEXT,
  director_id TEXT,
  director_name TEXT,
  director_url TEXT
);
Sample rows from `movies`:
1, La Antena, 2007, http://mubi.com/films/la-antena, en, 105, https://images.mubicdn.net/images/film/1/cache-7927-1581389497/image-w1280.jpg, 131, Esteban Sapir, http://mubi.com/cast/esteban-sapir
2, Elementary Particles, 2006, http://mubi.com/films/elementary-particles, en, 23, https://images.mubicdn.net/images/film/2/cache-512179-1581389841/image-w1280.jpg, 73, Oskar Roehler, http://mubi.com/cast/oskar-roehler
3, It's Winter, 2006, http://mubi.com/films/its-winter, en, 21, https://images.mubicdn.net/images/film/3/cache-7929-1481539519/image-w1280.jpg, 82, Rafi Pitts, http://mubi.com/cast/rafi-pitts

","CREATE TABLE `lists` (
  user_id INTEGER REFERENCES lists_users(user_id),
  list_id INTEGER,
  list_title TEXT,
  list_movie_number INTEGER,
  list_update_timestamp_utc TEXT,
  list_creation_timestamp_utc TEXT,
  list_followers INTEGER,
  list_url TEXT,
  list_comments INTEGER,
  list_description TEXT,
  list_cover_image_url TEXT,
  list_first_image_url TEXT,
  list_second_image_url TEXT,
  list_third_image_url TEXT
);
Sample rows from `lists`:
88260493, 1, Films that made your kid sister cry, 5, 2019-01-24 19:16:18, 2009-11-11 00:02:21, 5, http://mubi.com/lists/films-that-made-your-kid-sister-cry, 3, <p>Don’t be such a baby!!</p>
<p><strong>bold</strong></p>, https://assets.mubicdn.net/images/film/3822/image-w1280.jpg?1445914994, https://assets.mubicdn.net/images/film/3822/image-w320.jpg?1445914994, https://assets.mubicdn.net/images/film/506/image-w320.jpg?1543838422, https://assets.mubicdn.net/images/film/485/image-w320.jpg?1575331204
45204418, 2, Headscratchers, 3, 2018-12-03 15:12:20, 2009-11-11 00:05:11, 1, http://mubi.com/lists/headscratchers, 2, <p>Films that need at least two viewings to really make sense.</p>
<p>Or at least… they did for <em>me</em>.</p>, https://assets.mubicdn.net/images/film/4343/image-w1280.jpg?1583331932, https://assets.mubicdn.net/images/film/4343/image-w320.jpg?1583331932, https://assets.mubicdn.net/images/film/159/image-w320.jpg?1548864573, https://assets.mubicdn.net/images/film/142/image-w320.jpg?1544094102
48905025, 3, Sexy Time Movies, 7, 2019-05-30 03:00:07, 2009-11-11 00:20:00, 6, http://mubi.com/lists/sexy-time-movies, 5, <p>Films that get you in the mood…for love. In development.</p>
<p>Remarks</p>
<p><strong>Enter the Void</strong><br>
If you’ve seen <a href=""http://www.theauteurs.com/films/2377"" rel=""nofollow"">Enter the Void</a> then you’ll know why that’s on this list., https://assets.mubicdn.net/images/film/3491/image-w1280.jpg?1564112978, https://assets.mubicdn.net/images/film/3491/image-w320.jpg?1564112978, https://assets.mubicdn.net/images/film/2377/image-w320.jpg?1564675204, https://assets.mubicdn.net/images/film/2874/image-w320.jpg?1546574412

CREATE TABLE `movies` (
  movie_id INTEGER,
  movie_title TEXT,
  movie_release_year INTEGER,
  movie_url TEXT,
  movie_title_language TEXT,
  movie_popularity INTEGER,
  movie_image_url TEXT,
  director_id TEXT,
  director_name TEXT,
  director_url TEXT
);
Sample rows from `movies`:
1, La Antena, 2007, http://mubi.com/films/la-antena, en, 105, https://images.mubicdn.net/images/film/1/cache-7927-1581389497/image-w1280.jpg, 131, Esteban Sapir, http://mubi.com/cast/esteban-sapir
2, Elementary Particles, 2006, http://mubi.com/films/elementary-particles, en, 23, https://images.mubicdn.net/images/film/2/cache-512179-1581389841/image-w1280.jpg, 73, Oskar Roehler, http://mubi.com/cast/oskar-roehler
3, It's Winter, 2006, http://mubi.com/films/its-winter, en, 21, https://images.mubicdn.net/images/film/3/cache-7929-1481539519/image-w1280.jpg, 82, Rafi Pitts, http://mubi.com/cast/rafi-pitts

CREATE TABLE `ratings_users` (
  user_id INTEGER REFERENCES lists_users(user_id),
  rating_date_utc TEXT,
  user_trialist INTEGER,
  user_subscriber INTEGER,
  user_avatar_image_url TEXT,
  user_cover_image_url TEXT,
  user_eligible_for_trial INTEGER,
  user_has_payment_method INTEGER
);
Sample rows from `ratings_users`:
41579158, 2017-06-10, 0, 0, https://assets.mubicdn.net/images/avatars/74283/images-w150.jpg?1523895155, None, 1, 0
68654088, 2012-10-02, 0, 0, https://assets.mubicdn.net/images/avatars/27714/images-w150.jpg?1523889463, None, 1, 1
84114365, 2010-12-25, 0, 0, https://assets.mubicdn.net/images/avatars/1808/images-w150.jpg?1523883471, None, 1, 0

CREATE TABLE `lists_users` (
  user_id INTEGER PRIMARY KEY REFERENCES lists(user_id),
  list_id INTEGER PRIMARY KEY REFERENCES lists(list_id),
  list_update_date_utc TEXT,
  list_creation_date_utc TEXT,
  user_trialist INTEGER,
  user_subscriber INTEGER,
  user_avatar_image_url TEXT,
  user_cover_image_url TEXT,
  user_eligible_for_trial TEXT,
  user_has_payment_method TEXT
);
Sample rows from `lists_users`:
85981819, 1969, 2019-11-26, 2009-12-18, 1, 1, https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214, None, 0, 1
85981819, 3946, 2020-05-01, 2010-01-30, 1, 1, https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214, None, 0, 1
85981819, 6683, 2020-04-12, 2010-03-31, 1, 1, https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214, None, 0, 1

CREATE TABLE `ratings` (
  movie_id INTEGER REFERENCES movies(movie_id),
  rating_id INTEGER REFERENCES ratings(rating_id),
  rating_url TEXT,
  rating_score INTEGER,
  rating_timestamp_utc TEXT,
  critic TEXT,
  critic_likes INTEGER,
  critic_comments INTEGER,
  user_id INTEGER REFERENCES ratings_users(user_id) REFERENCES lists_users(user_id),
  user_trialist INTEGER,
  user_subscriber INTEGER,
  user_eligible_for_trial INTEGER,
  user_has_payment_method INTEGER
);
Sample rows from `ratings`:
1066, 15610495, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/15610495, 3, 2017-06-10 12:38:33, None, 0, 0, 41579158, 0, 0, 1, 0
1066, 10704606, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/10704606, 2, 2014-08-15 23:42:31, None, 0, 0, 85981819, 1, 1, 0, 1
1066, 10177114, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/10177114, 2, 2014-01-30 13:21:57, None, 0, 0, 4208563, 0, 0, 1, 1

","ratings, movies","ratings.rating_score, ratings.movie_id, movies.movie_id, movies.movie_title"
restaurant,"Give the review of the restaurant located in Ocean St., Santa Cruz.",SELECT t2.review FROM location as t1 inner JOIN generalinfo as t2 ON t1.id_restaurant = t2.id_restaurant WHERE t2.city = 'santa cruz' AND t1.street_name = 'ocean st',"CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

","CREATE TABLE `geographic` (
  city TEXT PRIMARY KEY,
  county TEXT,
  region TEXT
);
Sample rows from `geographic`:
alameda, alameda county, bay area
alamo, contra costa county, bay area
albany, alameda county, bay area

CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

","location, generalinfo","generalinfo.review, location.id_restaurant, generalinfo.id_restaurant, generalinfo.city, location.street_name"
menu,"Among the menu pages of ""Ritz Carlton"", how many of them have a width of over 1000?",SELECT SUM(case when t1.name = 'Ritz Carlton' then 1 else 0 end) FROM menu as t1 inner JOIN menuPage as t2 ON t1.id = t2.menu_id WHERE t2.full_width > 1000,"CREATE TABLE `menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

CREATE TABLE `menuPage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `menuPage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

","CREATE TABLE `Dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `Dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

CREATE TABLE `Menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `Menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

CREATE TABLE `MenuPage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `MenuPage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

CREATE TABLE `MenuItem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `MenuItem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

","menu, menuPage","menu.name, menu.id, menuPage.menu_id, menuPage.full_width"
european_football_1,"What percentage of games won, games lost and games drawn does Cittadella have as a home team in total?","SELECT cast(COUNT(case when ftr = 'H' then 1 else null end) / COUNT(hometeam) as real) * 100, cast(COUNT(case when ftr = 'A' then 1 else null end) as real) / COUNT(hometeam), cast(COUNT(case when ftr = 'D' then 1 else null end) as real) / COUNT(hometeam) FROM matchs WHERE hometeam = 'Cittadella'","CREATE TABLE `matchs` (
  Div TEXT REFERENCES divisions(division),
  Date DATE,
  HomeTeam TEXT,
  AwayTeam TEXT,
  FTHG INTEGER,
  FTAG INTEGER,
  FTR TEXT,
  season INTEGER
);
Sample rows from `matchs`:
B1, 2020-08-08, Club Brugge, Charleroi, 0, 1, A, 2021
B1, 2020-08-08, Antwerp, Mouscron, 1, 1, D, 2021
B1, 2020-08-08, Standard, Cercle Brugge, 1, 0, H, 2021

","CREATE TABLE `divisions` (
  division TEXT PRIMARY KEY,
  name TEXT,
  country TEXT
);
Sample rows from `divisions`:
B1, Division 1A, Belgium
D1, Bundesliga, Deutschland
D2, 2. Bundesliga, Deutschland

CREATE TABLE `matchs` (
  Div TEXT REFERENCES divisions(division),
  Date DATE,
  HomeTeam TEXT,
  AwayTeam TEXT,
  FTHG INTEGER,
  FTAG INTEGER,
  FTR TEXT,
  season INTEGER
);
Sample rows from `matchs`:
B1, 2020-08-08, Club Brugge, Charleroi, 0, 1, A, 2021
B1, 2020-08-08, Antwerp, Mouscron, 1, 1, D, 2021
B1, 2020-08-08, Standard, Cercle Brugge, 1, 0, H, 2021

",matchs,"ftr, hometeam"
image_and_language,"How many pairs of object samples in image no.1 have the relation of ""parked on""?",SELECT SUM(case when t1.pred_class = 'parked on' then 1 else 0 end) FROM pred_classES as t1 inner JOIN img_rel as t2 ON t1.pred_class_ID = t2.pred_class_ID WHERE t2.img_id = 1 AND t2.obj1_sample_id != obj2_sample_id,"CREATE TABLE `pred_classES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `pred_classES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `img_rel` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `img_rel`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

","CREATE TABLE `ATT_CLASSES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `ATT_CLASSES`:
0, building s
1, indoors
2, cluttered

CREATE TABLE `OBJ_CLASSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLASSES`:
0, awning
1, goggles
2, dot

CREATE TABLE `IMG_OBJ` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `IMG_OBJ`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `IMG_OBJ_ATT` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_OBJ_ATT`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `PRED_CLASSES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `PRED_CLASSES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `IMG_REL` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_REL`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

","pred_classES, img_rel","pred_classES.pred_class, pred_classES.pred_class_ID, img_rel.pred_class_ID, img_rel.img_id, img_rel.obj1_sample_id, obj2_sample_id"
menu,"Among the menus with over 10 pages, how many of them have over 20 dishes?",SELECT COUNT(*) FROM menu WHERE page_count > 10 AND dish_count > 20,"CREATE TABLE `menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

","CREATE TABLE `Dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `Dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

CREATE TABLE `Menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `Menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

CREATE TABLE `MenuPage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `MenuPage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

CREATE TABLE `MenuItem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `MenuItem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

",menu,"page_count, dish_count"
legislator,What is the username of the current official Facebook presence of the oldest current legislator?,SELECT t2.facebook FROM current as t1 inner JOIN `social-media` as t2 ON t2.bioguide = t1.bioguide_id ORDER BY t1.birthday_bio LIMIT 1,"CREATE TABLE `current` (
  ballotpedia_id TEXT,
  bioguide_id TEXT PRIMARY KEY,
  birthday_bio DATE,
  cspan_id REAL PRIMARY KEY,
  fec_id TEXT,
  first_name TEXT,
  gender_bio TEXT,
  google_entity_id_id TEXT,
  govtrack_id INTEGER,
  house_history_id REAL,
  icpsr_id REAL,
  last_name TEXT,
  lis_id TEXT,
  maplight_id REAL,
  middle_name TEXT,
  nickname_name TEXT,
  official_full_name TEXT,
  opensecrets_id TEXT,
  religion_bio TEXT,
  suffix_name TEXT,
  thomas_id INTEGER,
  votesmart_id REAL,
  wikidata_id TEXT,
  wikipedia_id TEXT
);
Sample rows from `current`:
Sherrod Brown, B000944, 1952-11-09, 5051.0, ['H2OH13033', 'S6OH00163'], Sherrod, M, kg:/m/034s80, 400050, 9996.0, 29389.0, Brown, S307, 168.0, None, None, Sherrod Brown, N00003535, Lutheran, None, 136, 27018.0, Q381880, Sherrod Brown
Maria Cantwell, C000127, 1958-10-13, 26137.0, ['S8WA00194', 'H2WA01054'], Maria, F, kg:/m/01x68t, 300018, 10608.0, 39310.0, Cantwell, S275, 544.0, None, None, Maria Cantwell, N00007836, Roman Catholic, None, 172, 27122.0, Q22250, Maria Cantwell
Ben Cardin, C000141, 1943-10-05, 4004.0, ['H6MD03177', 'S6MD03177'], Benjamin, M, kg:/m/025k3k, 400064, 10629.0, 15408.0, Cardin, S308, 182.0, L., None, Benjamin L. Cardin, N00001955, Jewish, None, 174, 26888.0, Q723295, Ben Cardin

CREATE TABLE `social-media` (
  bioguide TEXT PRIMARY KEY REFERENCES current(bioguide_id),
  facebook TEXT,
  facebook_id REAL,
  govtrack REAL,
  instagram TEXT,
  instagram_id REAL,
  thomas INTEGER,
  twitter TEXT,
  twitter_id REAL,
  youtube TEXT,
  youtube_id TEXT
);
Sample rows from `social-media`:
R000600, congresswomanaumuaamata, 1537155909907320.0, 412664.0, None, None, 2222, RepAmata, 3026622545.0, None, UCGdrLQbt1PYDTPsampx4t1A
Y000064, RepToddYoung, 186203844738421.0, 412428.0, None, None, 2019, RepToddYoung, 234128524.0, RepToddYoung, UCuknj4PGn91gHDNAfboZEgQ
E000295, senjoniernst, 351671691660938.0, 412667.0, senjoniernst, 1582702853.0, 2283, SenJoniErnst, 2856787757.0, None, UCLwrmtF_84FIcK3TyMs4MIw

","CREATE TABLE `current` (
  ballotpedia_id TEXT,
  bioguide_id TEXT PRIMARY KEY,
  birthday_bio DATE,
  cspan_id REAL PRIMARY KEY,
  fec_id TEXT,
  first_name TEXT,
  gender_bio TEXT,
  google_entity_id_id TEXT,
  govtrack_id INTEGER,
  house_history_id REAL,
  icpsr_id REAL,
  last_name TEXT,
  lis_id TEXT,
  maplight_id REAL,
  middle_name TEXT,
  nickname_name TEXT,
  official_full_name TEXT,
  opensecrets_id TEXT,
  religion_bio TEXT,
  suffix_name TEXT,
  thomas_id INTEGER,
  votesmart_id REAL,
  wikidata_id TEXT,
  wikipedia_id TEXT
);
Sample rows from `current`:
Sherrod Brown, B000944, 1952-11-09, 5051.0, ['H2OH13033', 'S6OH00163'], Sherrod, M, kg:/m/034s80, 400050, 9996.0, 29389.0, Brown, S307, 168.0, None, None, Sherrod Brown, N00003535, Lutheran, None, 136, 27018.0, Q381880, Sherrod Brown
Maria Cantwell, C000127, 1958-10-13, 26137.0, ['S8WA00194', 'H2WA01054'], Maria, F, kg:/m/01x68t, 300018, 10608.0, 39310.0, Cantwell, S275, 544.0, None, None, Maria Cantwell, N00007836, Roman Catholic, None, 172, 27122.0, Q22250, Maria Cantwell
Ben Cardin, C000141, 1943-10-05, 4004.0, ['H6MD03177', 'S6MD03177'], Benjamin, M, kg:/m/025k3k, 400064, 10629.0, 15408.0, Cardin, S308, 182.0, L., None, Benjamin L. Cardin, N00001955, Jewish, None, 174, 26888.0, Q723295, Ben Cardin

CREATE TABLE `current-terms` (
  address TEXT,
  bioguide TEXT PRIMARY KEY REFERENCES current(bioguide_id),
  caucus TEXT,
  chamber TEXT,
  class REAL,
  contact_form TEXT,
  district REAL,
  end TEXT PRIMARY KEY,
  fax TEXT,
  last TEXT,
  name TEXT,
  office TEXT,
  party TEXT,
  party_affiliations TEXT,
  phone TEXT,
  relation TEXT,
  rss_url TEXT,
  start TEXT,
  state TEXT,
  state_rank TEXT,
  title TEXT,
  type TEXT,
  url TEXT
);
Sample rows from `current-terms`:
None, B000944, None, None, None, None, 13.0, 1995-01-03, None, None, None, None, Democrat, None, None, None, None, 1993-01-05, OH, None, None, rep, None
None, B000944, None, None, None, None, 13.0, 1997-01-03, None, None, None, None, Democrat, None, None, None, None, 1995-01-04, OH, None, None, rep, None
None, B000944, None, None, None, None, 13.0, 1999-01-03, None, None, None, None, Democrat, None, None, None, None, 1997-01-07, OH, None, None, rep, None

CREATE TABLE `historical` (
  ballotpedia_id TEXT,
  bioguide_id TEXT PRIMARY KEY,
  bioguide_previous_id TEXT,
  birthday_bio TEXT,
  cspan_id TEXT,
  fec_id TEXT,
  first_name TEXT,
  gender_bio TEXT,
  google_entity_id_id TEXT,
  govtrack_id INTEGER,
  house_history_alternate_id TEXT,
  house_history_id REAL,
  icpsr_id REAL,
  last_name TEXT,
  lis_id TEXT,
  maplight_id TEXT,
  middle_name TEXT,
  nickname_name TEXT,
  official_full_name TEXT,
  opensecrets_id TEXT,
  religion_bio TEXT,
  suffix_name TEXT,
  thomas_id TEXT,
  votesmart_id TEXT,
  wikidata_id TEXT,
  wikipedia_id TEXT
);
Sample rows from `historical`:
None, B000226, None, 1745-04-02, None, None, Richard, M, kg:/m/02pz46, 401222, None, None, 507.0, Bassett, None, None, None, None, None, None, None, None, None, None, Q518823, Richard Bassett (politician)
None, B000546, None, 1742-03-21, None, None, Theodorick, M, kg:/m/033mf4, 401521, None, 9479.0, 786.0, Bland, None, None, None, None, None, None, None, None, None, None, Q1749152, Theodorick Bland (congressman)
None, B001086, None, 1743-06-16, None, None, Aedanus, M, kg:/m/03yccv, 402032, None, 10177.0, 1260.0, Burke, None, None, None, None, None, None, None, None, None, None, Q380504, Aedanus Burke

CREATE TABLE `historical-terms` (
  address TEXT,
  bioguide TEXT PRIMARY KEY REFERENCES historical(bioguide_id),
  chamber TEXT,
  class REAL,
  contact_form TEXT,
  district REAL,
  end TEXT,
  fax TEXT,
  last TEXT,
  middle TEXT,
  name TEXT,
  office TEXT,
  party TEXT,
  party_affiliations TEXT,
  phone TEXT,
  relation TEXT,
  rss_url TEXT,
  start TEXT,
  state TEXT,
  state_rank TEXT,
  title TEXT,
  type TEXT,
  url TEXT
);
Sample rows from `historical-terms`:
None, B000226, None, 2.0, None, None, 1793-03-03, None, None, None, None, None, Anti-Administration, None, None, None, None, 1789-03-04, DE, None, None, sen, None
None, B000546, None, None, None, 9.0, 1791-03-03, None, None, None, None, None, None, None, None, None, None, 1789-03-04, VA, None, None, rep, None
None, B001086, None, None, None, 2.0, 1791-03-03, None, None, None, None, None, None, None, None, None, None, 1789-03-04, SC, None, None, rep, None

CREATE TABLE `social-media` (
  bioguide TEXT PRIMARY KEY REFERENCES current(bioguide_id),
  facebook TEXT,
  facebook_id REAL,
  govtrack REAL,
  instagram TEXT,
  instagram_id REAL,
  thomas INTEGER,
  twitter TEXT,
  twitter_id REAL,
  youtube TEXT,
  youtube_id TEXT
);
Sample rows from `social-media`:
R000600, congresswomanaumuaamata, 1537155909907320.0, 412664.0, None, None, 2222, RepAmata, 3026622545.0, None, UCGdrLQbt1PYDTPsampx4t1A
Y000064, RepToddYoung, 186203844738421.0, 412428.0, None, None, 2019, RepToddYoung, 234128524.0, RepToddYoung, UCuknj4PGn91gHDNAfboZEgQ
E000295, senjoniernst, 351671691660938.0, 412667.0, senjoniernst, 1582702853.0, 2283, SenJoniErnst, 2856787757.0, None, UCLwrmtF_84FIcK3TyMs4MIw

","current, social-media","social-media.facebook, social-media.bioguide, current.bioguide_id, current.birthday_bio"
books,What is the address that received the most orders?,"SELECT t2.street_name, t2.city FROM cust_order as t1 inner JOIN address as t2 ON t1.dest_address_id = t2.address_id GROUP BY t2.street_number, t2.street_name, t2.city ORDER BY COUNT(t1.dest_address_id) DESC LIMIT 1","CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","cust_order, address","address.street_name, address.city, cust_order.dest_address_id, address.address_id, address.street_number"
video_games,Who is the publisher of 3D Lemmings?,SELECT t3.publisher_name FROM game as t1 inner JOIN game_publisher as t2 ON t1.id = t2.game_id inner JOIN publisher as t3 ON t2.publisher_id = t3.id WHERE t1.game_name = '3D Lemmings',"CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

","CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

","game, game_publisher, publisher","publisher.publisher_name, game.id, game_publisher.game_id, game_publisher.publisher_id, publisher.id, game.game_name"
public_review_platform,List down the business ID with a high review count in Tempe.,SELECT business_id FROM business WHERE review_count = 'High' AND city = 'Tempe',"CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

",business,"business_id, review_count, city"
food_inspection,What is the name of the establishment with the highest number of low risk violations in 2014?,"SELECT t2.name FROM violations as t1 inner JOIN businesses as t2 ON t1.business_id = t2.business_id WHERE strftime('%Y', t1.`date`) = '2014' AND t1.risk_category = 'Low Risk' GROUP BY t2.name ORDER BY COUNT(t2.business_id) DESC LIMIT 1","CREATE TABLE `violations` (
  business_id INTEGER REFERENCES businesses(business_id),
  date DATE,
  violation_type_id TEXT,
  risk_category TEXT,
  description TEXT
);
Sample rows from `violations`:
10, 2014-07-29, 103129, Moderate Risk, Insufficient hot water or running water
10, 2014-07-29, 103144, Low Risk, Unapproved or unmaintained equipment or utensils
10, 2014-01-14, 103119, Moderate Risk, Inadequate and inaccessible handwashing facilities

CREATE TABLE `businesses` (
  business_id INTEGER,
  name TEXT,
  address TEXT,
  city TEXT,
  postal_code TEXT,
  latitude REAL,
  longitude REAL,
  phone_number INTEGER,
  tax_code TEXT,
  business_certificate INTEGER,
  application_date DATE,
  owner_name TEXT,
  owner_address TEXT,
  owner_city TEXT,
  owner_state TEXT,
  owner_zip TEXT
);
Sample rows from `businesses`:
10, Tiramisu Kitchen, 033 Belden Pl, San Francisco, 94104, 37.7911, -122.404, None, H24, 779059, None, Tiramisu LLC, 33 Belden St, San Francisco, CA, 94104
24, OMNI S.F. Hotel - 2nd Floor Pantry, 500 California St, 2nd  Floor, San Francisco, 94104, 37.7929, -122.403, None, H24, 352312, None, OMNI San Francisco Hotel Corp, 500 California St, 2nd Floor, San Francisco, CA, 94104
31, Norman's Ice Cream and Freezes, 2801 Leavenworth St, San Francisco, 94133, 37.8072, -122.419, None, H24, 346882, None, Norman Antiforda, 2801 Leavenworth St, San Francisco, CA, 94133

","CREATE TABLE `businesses` (
  business_id INTEGER,
  name TEXT,
  address TEXT,
  city TEXT,
  postal_code TEXT,
  latitude REAL,
  longitude REAL,
  phone_number INTEGER,
  tax_code TEXT,
  business_certificate INTEGER,
  application_date DATE,
  owner_name TEXT,
  owner_address TEXT,
  owner_city TEXT,
  owner_state TEXT,
  owner_zip TEXT
);
Sample rows from `businesses`:
10, Tiramisu Kitchen, 033 Belden Pl, San Francisco, 94104, 37.7911, -122.404, None, H24, 779059, None, Tiramisu LLC, 33 Belden St, San Francisco, CA, 94104
24, OMNI S.F. Hotel - 2nd Floor Pantry, 500 California St, 2nd  Floor, San Francisco, 94104, 37.7929, -122.403, None, H24, 352312, None, OMNI San Francisco Hotel Corp, 500 California St, 2nd Floor, San Francisco, CA, 94104
31, Norman's Ice Cream and Freezes, 2801 Leavenworth St, San Francisco, 94133, 37.8072, -122.419, None, H24, 346882, None, Norman Antiforda, 2801 Leavenworth St, San Francisco, CA, 94133

CREATE TABLE `inspections` (
  business_id INTEGER REFERENCES businesses(business_id),
  score INTEGER,
  date DATE,
  type TEXT
);
Sample rows from `inspections`:
10, 92, 2014-01-14, Routine - Unscheduled
10, None, 2014-01-24, Reinspection/Followup
10, 94, 2014-07-29, Routine - Unscheduled

CREATE TABLE `violations` (
  business_id INTEGER REFERENCES businesses(business_id),
  date DATE,
  violation_type_id TEXT,
  risk_category TEXT,
  description TEXT
);
Sample rows from `violations`:
10, 2014-07-29, 103129, Moderate Risk, Insufficient hot water or running water
10, 2014-07-29, 103144, Low Risk, Unapproved or unmaintained equipment or utensils
10, 2014-01-14, 103119, Moderate Risk, Inadequate and inaccessible handwashing facilities

","violations, businesses","businesses.name, violations.business_id, businesses.business_id, violations.date, violations.risk_category"
food_inspection_2,What is the establishment's name with an inspection category of No Smoking Regulations?,SELECT DISTINCT t1.dba_name FROM establishment as t1 inner JOIN inspection as t2 ON t1.license_no = t2.license_no inner JOIN violation as t3 ON t2.inspection_id = t3.inspection_id inner JOIN inspection_point as t4 ON t3.point_id = t4.point_id WHERE t4.category = 'No Smoking Regulations',"CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

","establishment, inspection, violation, inspection_point","establishment.dba_name, establishment.license_no, inspection.license_no, inspection.inspection_id, violation.inspection_id, violation.point_id, inspection_point.point_id, inspection_point.category"
video_games,Which year has the most number of PC games releases?,"SELECt t.release_year FROM ( SELECt t2.release_year, COUNT(DIStINCt t3.game_id) FROM platform as t1 inner JOIN game_platform as t2 ON t1.id = t2.platform_id inner JOIN game_publisher as t3 ON t2.game_publisher_id = t3.id WHERE t1.platform_name = 'PC' GROUP BY t2.release_year ORDER BY COUNT(DIStINCt t3.game_id) DESC LIMIt 1 ) t","CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

","CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

","platform, game_platform, game_publisher","game_platform.release_year, game_publisher.game_id, platform.id, game_platform.platform_id, game_platform.game_publisher_id, game_publisher.id, platform.platform_name"
food_inspection_2,Calculate the total salary for employees who did inspection from ID 52270 to 52272.,SELECT SUM(t2.salary) FROM inspection as t1 inner JOIN employee as t2 ON t1.employee_id = t2.employee_id WHERE t1.inspection_id BETWEEN 52270 AND 52272,"CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

","inspection, employee","employee.salary, inspection.employee_id, employee.employee_id, inspection.inspection_id"
trains,What are the load shapes of all the short ellipse cars?,SELECT load_shape FROM cars WHERE shape = 'ellipse' AND len = 'short',"CREATE TABLE `cars` (
  id INTEGER,
  train_id INTEGER REFERENCES trains(id),
  position INTEGER,
  shape TEXT,
  len TEXT,
  sides TEXT,
  roof TEXT,
  wheels INTEGER,
  load_shape TEXT,
  load_num INTEGER
);
Sample rows from `cars`:
1, 1, 1, rectangle, short, not_double, none, 2, circle, 1
2, 1, 2, rectangle, long, not_double, none, 3, hexagon, 1
3, 1, 3, rectangle, short, not_double, peaked, 2, triangle, 1

","CREATE TABLE `cars` (
  id INTEGER,
  train_id INTEGER REFERENCES trains(id),
  position INTEGER,
  shape TEXT,
  len TEXT,
  sides TEXT,
  roof TEXT,
  wheels INTEGER,
  load_shape TEXT,
  load_num INTEGER
);
Sample rows from `cars`:
1, 1, 1, rectangle, short, not_double, none, 2, circle, 1
2, 1, 2, rectangle, long, not_double, none, 3, hexagon, 1
3, 1, 3, rectangle, short, not_double, peaked, 2, triangle, 1

CREATE TABLE `trains` (
  id INTEGER,
  direction TEXT
);
Sample rows from `trains`:
1, east
2, east
3, east

",cars,"load_shape, shape"
retail_complains,Which city in West North Central has the highest number of customers over the age of 60?,SELECT t2.city FROM client as t1 inner JOIN district as t2 ON t1.district_id = t2.district_id WHERE t2.division = 'West North Central' AND t1.age > 60 GROUP BY t2.city ORDER BY COUNT(t2.city) DESC LIMIT 1,"CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

","CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

","client, district","district.city, client.district_id, district.district_id, district.division, client.age"
simpson_episodes,"Among episodes from 10 to 20, which episode has more than 200 votes?",SELECT DISTINCT t1.episode FROM episode as t1 inner JOIN vote as t2 ON t2.episode_id = t1.episode_id WHERE t1.episode BETWEEN 10 AND 20 AND t2.votes > 200;,"CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","episode, vote","episode.episode, vote.episode_id, episode.episode_id, vote.votes"
student_loan,How many students are unemployed and have payment due?,SELECT COUNT(t1.name) FROM unemployed as t1 inner JOIN no_payment_due as t2 ON t1.`name` = t2.`name`,"CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

","unemployed, no_payment_due","unemployed.name, no_payment_due.name"
retail_world,What is the average salary of sales representatives in the United Kingdom?,SELECT AVG(salary) FROM employees WHERE title = 'Sales Representative' AND country = 'UK',"CREATE TABLE `employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

",employees,"salary, title, country"
world_development_indicators,"What are the years when countries have indicator name of ""Air transport, passengers carried""? List the table name of these countries.","SELECT DISTINCT t2.year, t1.tablename FROM country as t1 inner JOIN indicators as t2 ON t1.countryCode = t2.countryCode WHERE t2.indicatorname = 'Air transport, passengers carried'","CREATE TABLE `country` (
  CountryCode TEXT PRIMARY KEY,
  ShortName TEXT,
  TableName TEXT,
  LongName TEXT,
  Alpha2Code TEXT,
  CurrencyUnit TEXT,
  SpecialNotes TEXT,
  Region TEXT,
  IncomeGroup TEXT,
  Wb2Code TEXT,
  NationalAccountsBaseYear TEXT,
  NationalAccountsReferenceYear TEXT,
  SnaPriceValuation TEXT,
  LendingCategory TEXT,
  OtherGroups TEXT,
  SystemOfNationalAccounts TEXT,
  AlternativeConversionFactor TEXT,
  PppSurveyYear TEXT,
  BalanceOfPaymentsManualInUse TEXT,
  ExternalDebtReportingStatus TEXT,
  SystemOfTrade TEXT,
  GovernmentAccountingConcept TEXT,
  ImfDataDisseminationStandard TEXT,
  LatestPopulationCensus TEXT,
  LatestHouseholdSurvey TEXT,
  SourceOfMostRecentIncomeAndExpenditureData TEXT,
  VitalRegistrationComplete TEXT,
  LatestAgriculturalCensus TEXT,
  LatestIndustrialData INTEGER,
  LatestTradeData INTEGER,
  LatestWaterWithdrawalData INTEGER
);
Sample rows from `country`:
AFG, Afghanistan, Afghanistan, Islamic State of Afghanistan, AF, Afghan afghani, Fiscal year end: March 20; reporting period for national accounts data: FY (from 2013 are CY). National accounts data are sourced from the IMF and differ from the Central Statistics Organization numbers due to exclusion of the opium economy., South Asia, Low income, AF, 2002/03, , Value added at basic prices (VAB), IDA, HIPC, Country uses the 1993 System of National Accounts methodology., , , , Actual, General trade system, Consolidated central government, General Data Dissemination System (GDDS), 1979, Multiple Indicator Cluster Survey (MICS), 2010/11, Integrated household survey (IHS), 2008, , 2013/14, None, 2013, 2000
ALB, Albania, Albania, Republic of Albania, AL, Albanian lek, , Europe & Central Asia, Upper middle income, AL, Original chained constant price data are rescaled., 1996, Value added at basic prices (VAB), IBRD, , Country uses the 1993 System of National Accounts methodology., , Rolling, IMF Balance of Payments Manual, 6th edition., Actual, General trade system, Budgetary central government, General Data Dissemination System (GDDS), 2011, Demographic and Health Survey (DHS), 2008/09, Living Standards Measurement Study Survey (LSMS), 2011/12, Yes, 2012, 2011, 2013, 2006
DZA, Algeria, Algeria, People's Democratic Republic of Algeria, DZ, Algerian dinar, , Middle East & North Africa, Upper middle income, DZ, 1980, , Value added at basic prices (VAB), IBRD, , Country uses the 1968 System of National Accounts methodology., , 2011, IMF Balance of Payments Manual, 6th edition., Actual, Special trade system, Budgetary central government, General Data Dissemination System (GDDS), 2008, Multiple Indicator Cluster Survey (MICS), 2012, Integrated household survey (IHS), 1995, , , 2010, 2013, 2001

CREATE TABLE `indicators` (
  CountryName TEXT,
  CountryCode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  IndicatorName TEXT,
  IndicatorCode TEXT PRIMARY KEY,
  Year INTEGER PRIMARY KEY,
  Value INTEGER
);
Sample rows from `indicators`:
Arab World, ARB, Adolescent fertility rate (births per 1,000 women ages 15-19), SP.ADO.TFRT, 1960, 133
Arab World, ARB, Age dependency ratio (% of working-age population), SP.POP.DPND, 1960, 87
Arab World, ARB, Age dependency ratio, old (% of working-age population), SP.POP.DPND.OL, 1960, 6

","CREATE TABLE `Country` (
  CountryCode TEXT PRIMARY KEY,
  ShortName TEXT,
  TableName TEXT,
  LongName TEXT,
  Alpha2Code TEXT,
  CurrencyUnit TEXT,
  SpecialNotes TEXT,
  Region TEXT,
  IncomeGroup TEXT,
  Wb2Code TEXT,
  NationalAccountsBaseYear TEXT,
  NationalAccountsReferenceYear TEXT,
  SnaPriceValuation TEXT,
  LendingCategory TEXT,
  OtherGroups TEXT,
  SystemOfNationalAccounts TEXT,
  AlternativeConversionFactor TEXT,
  PppSurveyYear TEXT,
  BalanceOfPaymentsManualInUse TEXT,
  ExternalDebtReportingStatus TEXT,
  SystemOfTrade TEXT,
  GovernmentAccountingConcept TEXT,
  ImfDataDisseminationStandard TEXT,
  LatestPopulationCensus TEXT,
  LatestHouseholdSurvey TEXT,
  SourceOfMostRecentIncomeAndExpenditureData TEXT,
  VitalRegistrationComplete TEXT,
  LatestAgriculturalCensus TEXT,
  LatestIndustrialData INTEGER,
  LatestTradeData INTEGER,
  LatestWaterWithdrawalData INTEGER
);
Sample rows from `Country`:
AFG, Afghanistan, Afghanistan, Islamic State of Afghanistan, AF, Afghan afghani, Fiscal year end: March 20; reporting period for national accounts data: FY (from 2013 are CY). National accounts data are sourced from the IMF and differ from the Central Statistics Organization numbers due to exclusion of the opium economy., South Asia, Low income, AF, 2002/03, , Value added at basic prices (VAB), IDA, HIPC, Country uses the 1993 System of National Accounts methodology., , , , Actual, General trade system, Consolidated central government, General Data Dissemination System (GDDS), 1979, Multiple Indicator Cluster Survey (MICS), 2010/11, Integrated household survey (IHS), 2008, , 2013/14, None, 2013, 2000
ALB, Albania, Albania, Republic of Albania, AL, Albanian lek, , Europe & Central Asia, Upper middle income, AL, Original chained constant price data are rescaled., 1996, Value added at basic prices (VAB), IBRD, , Country uses the 1993 System of National Accounts methodology., , Rolling, IMF Balance of Payments Manual, 6th edition., Actual, General trade system, Budgetary central government, General Data Dissemination System (GDDS), 2011, Demographic and Health Survey (DHS), 2008/09, Living Standards Measurement Study Survey (LSMS), 2011/12, Yes, 2012, 2011, 2013, 2006
DZA, Algeria, Algeria, People's Democratic Republic of Algeria, DZ, Algerian dinar, , Middle East & North Africa, Upper middle income, DZ, 1980, , Value added at basic prices (VAB), IBRD, , Country uses the 1968 System of National Accounts methodology., , 2011, IMF Balance of Payments Manual, 6th edition., Actual, Special trade system, Budgetary central government, General Data Dissemination System (GDDS), 2008, Multiple Indicator Cluster Survey (MICS), 2012, Integrated household survey (IHS), 1995, , , 2010, 2013, 2001

CREATE TABLE `Series` (
  SeriesCode TEXT PRIMARY KEY,
  Topic TEXT,
  IndicatorName TEXT,
  ShortDefinition TEXT,
  LongDefinition TEXT,
  UnitOfMeasure TEXT,
  Periodicity TEXT,
  BasePeriod TEXT,
  OtherNotes INTEGER,
  AggregationMethod TEXT,
  LimitationsAndExceptions TEXT,
  NotesFromOriginalSource TEXT,
  GeneralComments TEXT,
  Source TEXT,
  StatisticalConceptAndMethodology TEXT,
  DevelopmentRelevance TEXT,
  RelatedSourceLinks TEXT,
  OtherWebLinks INTEGER,
  RelatedIndicators INTEGER,
  LicenseType TEXT
);
Sample rows from `Series`:
BN.KLT.DINV.CD, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net (BoP, current US$), , Foreign direct investment are the net inflows of investment to acquire a lasting management interest (10 percent or more of voting stock) in an enterprise operating in an economy other than that of the investor. It is the sum of equity capital, reinvestme, , Annual, , None, , , , Note: Data are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6) and are only available from 2005 onwards. In BPM6, the headings of the financial account have been changed from credits and debits to net acquisition of financial ass, International Monetary Fund, Balance of Payments Statistics Yearbook and data files., , , , None, None, Open
BX.KLT.DINV.WD.GD.ZS, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net inflows (% of GDP), , Foreign direct investment are the net inflows of investment to acquire a lasting management interest (10 percent or more of voting stock) in an enterprise operating in an economy other than that of the investor. It is the sum of equity capital, reinvestme, , Annual, , None, Weighted average, FDI data do not give a complete picture of international investment in an economy. Balance of payments data on FDI do not include capital raised locally, an important source of investment financing in some developing countries. In addition, FDI data omit , , Note: Data starting from 2005 are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6)., International Monetary Fund, International Financial Statistics and Balance of Payments databases, World Bank, International Debt Statistics, and World Bank and OECD GDP estimates., Data on equity flows are based on balance of payments data reported by the International Monetary Fund (IMF). Foreign direct investment (FDI) data are supplemented by the World Bank staff estimates using data from the United Nations Conference on Trade an, Private financial flows - equity and debt - account for the bulk of development finance. Equity flows comprise foreign direct investment (FDI) and portfolio equity. Debt flows are financing raised through bond issuance, bank lending, and supplier credits., , None, None, Open
BX.KLT.DINV.CD.WD, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net inflows (BoP, current US$), , Foreign direct investment refers to direct investment equity flows in the reporting economy. It is the sum of equity capital, reinvestment of earnings, and other capital. Direct investment is a category of cross-border investment associated with a residen, , Annual, , None, Sum, FDI data do not give a complete picture of international investment in an economy. Balance of payments data on FDI do not include capital raised locally, an important source of investment financing in some developing countries. In addition, FDI data omit , , Note: Data starting from 2005 are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6)., International Monetary Fund, Balance of Payments database, supplemented by data from the United Nations Conference on Trade and Development and official national sources., Data on equity flows are based on balance of payments data reported by the International Monetary Fund (IMF). Foreign direct investment (FDI) data are supplemented by the World Bank staff estimates using data from the United Nations Conference on Trade an, Private financial flows - equity and debt - account for the bulk of development finance. Equity flows comprise foreign direct investment (FDI) and portfolio equity. Debt flows are financing raised through bond issuance, bank lending, and supplier credits., , None, None, Open

CREATE TABLE `CountryNotes` (
  Countrycode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Description TEXT
);
Sample rows from `CountryNotes`:
ABW, EG.EGY.PRIM.PP.KD, Sources: Estimated based on UN Energy Statistics (2014); World Development Indicators, WDI (2014)
ABW, EG.ELC.RNEW.ZS, Sources: UN Energy Statistics (2014)
ABW, EG.FEC.RNEW.ZS, Sources: UN Energy Statistics (2014)

CREATE TABLE `Footnotes` (
  Countrycode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Year TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `Footnotes`:
ABW, AG.LND.FRST.K2, YR1990, Not specified
ABW, AG.LND.FRST.K2, YR2000, Not specified
ABW, AG.LND.FRST.K2, YR2005, Not specified

CREATE TABLE `Indicators` (
  CountryName TEXT,
  CountryCode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  IndicatorName TEXT,
  IndicatorCode TEXT PRIMARY KEY,
  Year INTEGER PRIMARY KEY,
  Value INTEGER
);
Sample rows from `Indicators`:
Arab World, ARB, Adolescent fertility rate (births per 1,000 women ages 15-19), SP.ADO.TFRT, 1960, 133
Arab World, ARB, Age dependency ratio (% of working-age population), SP.POP.DPND, 1960, 87
Arab World, ARB, Age dependency ratio, old (% of working-age population), SP.POP.DPND.OL, 1960, 6

CREATE TABLE `SeriesNotes` (
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Year TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `SeriesNotes`:
SP.ADO.TFRT, YR1960, Interpolated using data for 1957 and 1962.
SP.DYN.AMRT.FE, YR1960, Interpolated using data for 1957 and 1962, if the data source is United Nations World Population Prospects.
SP.DYN.AMRT.MA, YR1960, Interpolated using data for 1957 and 1962, if the data source is United Nations World Population Prospects.

","country, indicators","indicators.year, country.tablename, country.countryCode, indicators.countryCode, indicators.indicatorname"
food_inspection,What is the average scores of Tiramisu Kitchen in all inspections?,SELECT AVG(t1.score) FROM inspections as t1 inner JOIN businesses as t2 ON t1.business_id = t2.business_id WHERE t2.name = 'Tiramisu Kitchen',"CREATE TABLE `inspections` (
  business_id INTEGER REFERENCES businesses(business_id),
  score INTEGER,
  date DATE,
  type TEXT
);
Sample rows from `inspections`:
10, 92, 2014-01-14, Routine - Unscheduled
10, None, 2014-01-24, Reinspection/Followup
10, 94, 2014-07-29, Routine - Unscheduled

CREATE TABLE `businesses` (
  business_id INTEGER,
  name TEXT,
  address TEXT,
  city TEXT,
  postal_code TEXT,
  latitude REAL,
  longitude REAL,
  phone_number INTEGER,
  tax_code TEXT,
  business_certificate INTEGER,
  application_date DATE,
  owner_name TEXT,
  owner_address TEXT,
  owner_city TEXT,
  owner_state TEXT,
  owner_zip TEXT
);
Sample rows from `businesses`:
10, Tiramisu Kitchen, 033 Belden Pl, San Francisco, 94104, 37.7911, -122.404, None, H24, 779059, None, Tiramisu LLC, 33 Belden St, San Francisco, CA, 94104
24, OMNI S.F. Hotel - 2nd Floor Pantry, 500 California St, 2nd  Floor, San Francisco, 94104, 37.7929, -122.403, None, H24, 352312, None, OMNI San Francisco Hotel Corp, 500 California St, 2nd Floor, San Francisco, CA, 94104
31, Norman's Ice Cream and Freezes, 2801 Leavenworth St, San Francisco, 94133, 37.8072, -122.419, None, H24, 346882, None, Norman Antiforda, 2801 Leavenworth St, San Francisco, CA, 94133

","CREATE TABLE `businesses` (
  business_id INTEGER,
  name TEXT,
  address TEXT,
  city TEXT,
  postal_code TEXT,
  latitude REAL,
  longitude REAL,
  phone_number INTEGER,
  tax_code TEXT,
  business_certificate INTEGER,
  application_date DATE,
  owner_name TEXT,
  owner_address TEXT,
  owner_city TEXT,
  owner_state TEXT,
  owner_zip TEXT
);
Sample rows from `businesses`:
10, Tiramisu Kitchen, 033 Belden Pl, San Francisco, 94104, 37.7911, -122.404, None, H24, 779059, None, Tiramisu LLC, 33 Belden St, San Francisco, CA, 94104
24, OMNI S.F. Hotel - 2nd Floor Pantry, 500 California St, 2nd  Floor, San Francisco, 94104, 37.7929, -122.403, None, H24, 352312, None, OMNI San Francisco Hotel Corp, 500 California St, 2nd Floor, San Francisco, CA, 94104
31, Norman's Ice Cream and Freezes, 2801 Leavenworth St, San Francisco, 94133, 37.8072, -122.419, None, H24, 346882, None, Norman Antiforda, 2801 Leavenworth St, San Francisco, CA, 94133

CREATE TABLE `inspections` (
  business_id INTEGER REFERENCES businesses(business_id),
  score INTEGER,
  date DATE,
  type TEXT
);
Sample rows from `inspections`:
10, 92, 2014-01-14, Routine - Unscheduled
10, None, 2014-01-24, Reinspection/Followup
10, 94, 2014-07-29, Routine - Unscheduled

CREATE TABLE `violations` (
  business_id INTEGER REFERENCES businesses(business_id),
  date DATE,
  violation_type_id TEXT,
  risk_category TEXT,
  description TEXT
);
Sample rows from `violations`:
10, 2014-07-29, 103129, Moderate Risk, Insufficient hot water or running water
10, 2014-07-29, 103144, Low Risk, Unapproved or unmaintained equipment or utensils
10, 2014-01-14, 103119, Moderate Risk, Inadequate and inaccessible handwashing facilities

","inspections, businesses","inspections.score, inspections.business_id, businesses.business_id, businesses.name"
professional_basketball,"Among the players from the ABA league, how many of them have the center position?",SELEcT COUNT(DISTINcT t1.playerid) FROM players as t1 inner JOIN players_teams as t2 ON t1.playerid = t2.playerid WHERE t2.lgid = 'ABA' AND (t1.pos = 'c' OR t1.pos = 'F-c'),"CREATE TABLE `players` (
  playerID TEXT PRIMARY KEY,
  useFirst TEXT,
  firstName TEXT,
  middleName TEXT,
  lastName TEXT,
  nameGiven TEXT,
  fullGivenName TEXT,
  nameSuffix TEXT,
  nameNick TEXT,
  pos TEXT,
  firstseason INTEGER,
  lastseason INTEGER,
  height REAL,
  weight INTEGER,
  college TEXT,
  collegeOther TEXT,
  birthDate DATE,
  birthCity TEXT,
  birthState TEXT,
  birthCountry TEXT,
  highSchool TEXT,
  hsCity TEXT,
  hsState TEXT,
  hsCountry TEXT,
  deathDate DATE,
  race TEXT
);
Sample rows from `players`:
abdelal01, Alaa, Alaa, None, Abdelnaby, None, None, None, None, F-C, 0, 0, 82.0, 240, Duke, None, 1968-06-24, Cairo, None, EGY, Bloomfield Senior, Bloomfield, NJ, USA, 0000-00-00, B
abdulka01, Kareem, Kareem, None, Abdul-Jabbar, None, Ferdinand Lewis Alcindor, Jr., None, Lew, Cap, C, 0, 0, 85.0, 225, UCLA, None, 1947-04-16, New York, NY, USA, Power Memorial, New York, NY, USA, 0000-00-00, B
abdulma01, Mahdi, Mahdi, None, Abdul-Rahman, None, Walter Raphael Hazzard, Jr., None, Walt, G, 0, 0, 74.0, 185, UCLA, Santa Monica City, 1942-04-15, Wilmington, DE, USA, Overbrook / Moton, Philadelphia / Easton, PA / MD, USA, 2011-11-18, B

CREATE TABLE `players_teams` (
  id INTEGER,
  playerID TEXT REFERENCES players(None),
  year INTEGER REFERENCES teams(year),
  stint INTEGER,
  tmID TEXT REFERENCES teams(tmID),
  lgID TEXT,
  GP INTEGER,
  GS INTEGER,
  minutes INTEGER,
  points INTEGER,
  oRebounds INTEGER,
  dRebounds INTEGER,
  rebounds INTEGER,
  assists INTEGER,
  steals INTEGER,
  blocks INTEGER,
  turnovers INTEGER,
  PF INTEGER,
  fgAttempted INTEGER,
  fgMade INTEGER,
  ftAttempted INTEGER,
  ftMade INTEGER,
  threeAttempted INTEGER,
  threeMade INTEGER,
  PostGP INTEGER,
  PostGS INTEGER,
  PostMinutes INTEGER,
  PostPoints INTEGER,
  PostoRebounds INTEGER,
  PostdRebounds INTEGER,
  PostRebounds INTEGER,
  PostAssists INTEGER,
  PostSteals INTEGER,
  PostBlocks INTEGER,
  PostTurnovers INTEGER,
  PostPF INTEGER,
  PostfgAttempted INTEGER,
  PostfgMade INTEGER,
  PostftAttempted INTEGER,
  PostftMade INTEGER,
  PostthreeAttempted INTEGER,
  PostthreeMade INTEGER,
  note TEXT
);
Sample rows from `players_teams`:
1, abdelal01, 1990, 1, POR, NBA, 43, 0, 290, 135, 27, 62, 89, 12, 4, 12, 22, 39, 116, 55, 44, 25, 0, 0, 5, 0, 13, 4, 1, 2, 3, 0, 0, 0, 0, 0, 6, 2, 0, 0, 0, 0, None
2, abdelal01, 1991, 1, POR, NBA, 71, 0, 934, 432, 81, 179, 260, 30, 25, 17, 66, 132, 361, 178, 101, 76, 0, 0, 8, 0, 25, 12, 0, 4, 4, 2, 0, 0, 2, 4, 10, 5, 4, 2, 0, 0, None
3, abdelal01, 1992, 1, MIL, NBA, 12, 0, 159, 64, 12, 25, 37, 10, 6, 4, 0, 24, 56, 26, 16, 12, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, None

","CREATE TABLE `awards_players` (
  playerID TEXT PRIMARY KEY REFERENCES players(playerID),
  award TEXT PRIMARY KEY,
  year INTEGER PRIMARY KEY,
  lgID TEXT,
  note TEXT,
  pos TEXT
);
Sample rows from `awards_players`:
abdulka01, All-Defensive Second Team, 1969, NBA, None, None
abdulka01, All-NBA Second Team, 1969, NBA, None, C
abdulka01, Rookie of the Year, 1969, NBA, None, None

CREATE TABLE `coaches` (
  coachID TEXT PRIMARY KEY,
  year INTEGER PRIMARY KEY REFERENCES teams(year),
  tmID TEXT PRIMARY KEY REFERENCES teams(tmID),
  lgID TEXT,
  stint INTEGER PRIMARY KEY,
  won INTEGER,
  lost INTEGER,
  post_wins INTEGER,
  post_losses INTEGER
);
Sample rows from `coaches`:
adelmri01, 1988, POR, NBA, 2, 14, 21, 0, 3
adelmri01, 1989, POR, NBA, 1, 59, 23, 12, 9
adelmri01, 1990, POR, NBA, 1, 63, 19, 9, 7

CREATE TABLE `draft` (
  id INTEGER,
  draftYear INTEGER REFERENCES teams(year),
  draftRound INTEGER,
  draftSelection INTEGER,
  draftOverall INTEGER,
  tmID TEXT REFERENCES teams(tmID),
  firstName TEXT,
  lastName TEXT,
  suffixName TEXT,
  playerID TEXT,
  draftFrom TEXT,
  lgID TEXT
);
Sample rows from `draft`:
1, 1967, 0, 0, 0, ANA, Darrell, Hardy, None, hardyda01, Baylor, ABA
2, 1967, 0, 0, 0, ANA, Bob, Krulish, None, None, Pacific, ABA
3, 1967, 0, 0, 0, ANA, Bob, Lewis, None, lewisbo01, North Carolina, ABA

CREATE TABLE `player_allstar` (
  playerID TEXT PRIMARY KEY REFERENCES players(playerID),
  last_name TEXT,
  first_name TEXT,
  season_id INTEGER PRIMARY KEY,
  conference TEXT,
  league_id TEXT,
  games_played INTEGER,
  minutes INTEGER,
  points INTEGER,
  o_rebounds INTEGER,
  d_rebounds INTEGER,
  rebounds INTEGER,
  assists INTEGER,
  steals INTEGER,
  blocks INTEGER,
  turnovers INTEGER,
  personal_fouls INTEGER,
  fg_attempted INTEGER,
  fg_made INTEGER,
  ft_attempted INTEGER,
  ft_made INTEGER,
  three_attempted INTEGER,
  three_made INTEGER
);
Sample rows from `player_allstar`:
abdulka01, Abdul-Jabbar, Kareem, 1969, East, NBA, 1, 18, 10, None, None, 11, 4, None, None, None, None, 8, 4, 2, 2, None, None
abdulka01, Abdul-Jabbar, Kareem, 1970, West, NBA, 1, 30, 19, None, None, 14, 1, None, None, None, None, 16, 8, 4, 3, None, None
abdulka01, Abdul-Jabbar, Kareem, 1971, West, NBA, 1, 19, 12, None, None, 7, 2, None, None, None, None, 10, 5, 2, 2, None, None

CREATE TABLE `players` (
  playerID TEXT PRIMARY KEY,
  useFirst TEXT,
  firstName TEXT,
  middleName TEXT,
  lastName TEXT,
  nameGiven TEXT,
  fullGivenName TEXT,
  nameSuffix TEXT,
  nameNick TEXT,
  pos TEXT,
  firstseason INTEGER,
  lastseason INTEGER,
  height REAL,
  weight INTEGER,
  college TEXT,
  collegeOther TEXT,
  birthDate DATE,
  birthCity TEXT,
  birthState TEXT,
  birthCountry TEXT,
  highSchool TEXT,
  hsCity TEXT,
  hsState TEXT,
  hsCountry TEXT,
  deathDate DATE,
  race TEXT
);
Sample rows from `players`:
abdelal01, Alaa, Alaa, None, Abdelnaby, None, None, None, None, F-C, 0, 0, 82.0, 240, Duke, None, 1968-06-24, Cairo, None, EGY, Bloomfield Senior, Bloomfield, NJ, USA, 0000-00-00, B
abdulka01, Kareem, Kareem, None, Abdul-Jabbar, None, Ferdinand Lewis Alcindor, Jr., None, Lew, Cap, C, 0, 0, 85.0, 225, UCLA, None, 1947-04-16, New York, NY, USA, Power Memorial, New York, NY, USA, 0000-00-00, B
abdulma01, Mahdi, Mahdi, None, Abdul-Rahman, None, Walter Raphael Hazzard, Jr., None, Walt, G, 0, 0, 74.0, 185, UCLA, Santa Monica City, 1942-04-15, Wilmington, DE, USA, Overbrook / Moton, Philadelphia / Easton, PA / MD, USA, 2011-11-18, B

CREATE TABLE `teams` (
  year INTEGER PRIMARY KEY,
  lgID TEXT,
  tmID TEXT PRIMARY KEY,
  franchID TEXT,
  confID TEXT,
  divID TEXT,
  rank INTEGER,
  confRank INTEGER,
  playoff TEXT,
  name TEXT,
  o_fgm INTEGER,
  o_ftm INTEGER,
  o_pts INTEGER,
  d_pts INTEGER,
  homeWon INTEGER,
  homeLost INTEGER,
  awayWon INTEGER,
  awayLost INTEGER,
  won INTEGER,
  lost INTEGER,
  games INTEGER,
  arena TEXT
);
Sample rows from `teams`:
1937, NBL, AFS, AFS, None, EA, 1, 0, CF, Akron Firestone Non-Skids, 249, 183, 681, 578, 8, 1, 5, 3, 14, 4, 18, None
1937, NBL, AGW, AGW, None, EA, 2, 0, WC, Akron Goodyear Wingfoots, 243, 159, 645, 498, 8, 1, 5, 4, 13, 5, 18, None
1937, NBL, BFB, BFB, None, EA, 4, 0, None, Buffalo Bisons, 108, 46, 262, 275, 2, 2, 1, 4, 3, 6, 9, None

CREATE TABLE `awards_coaches` (
  id INTEGER,
  year INTEGER REFERENCES coaches(year),
  coachID TEXT REFERENCES coaches(coachID),
  award TEXT,
  lgID TEXT,
  note TEXT
);
Sample rows from `awards_coaches`:
1, 1962, gallaha01, NBA Coach of the Year, NBA, None
2, 1963, hannual01, NBA Coach of the Year, NBA, None
3, 1964, auerbre01, NBA Coach of the Year, NBA, None

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
awards_coaches, 61
players_teams, 23751
series_post, 775

CREATE TABLE `players_teams` (
  id INTEGER,
  playerID TEXT REFERENCES players(None),
  year INTEGER REFERENCES teams(year),
  stint INTEGER,
  tmID TEXT REFERENCES teams(tmID),
  lgID TEXT,
  GP INTEGER,
  GS INTEGER,
  minutes INTEGER,
  points INTEGER,
  oRebounds INTEGER,
  dRebounds INTEGER,
  rebounds INTEGER,
  assists INTEGER,
  steals INTEGER,
  blocks INTEGER,
  turnovers INTEGER,
  PF INTEGER,
  fgAttempted INTEGER,
  fgMade INTEGER,
  ftAttempted INTEGER,
  ftMade INTEGER,
  threeAttempted INTEGER,
  threeMade INTEGER,
  PostGP INTEGER,
  PostGS INTEGER,
  PostMinutes INTEGER,
  PostPoints INTEGER,
  PostoRebounds INTEGER,
  PostdRebounds INTEGER,
  PostRebounds INTEGER,
  PostAssists INTEGER,
  PostSteals INTEGER,
  PostBlocks INTEGER,
  PostTurnovers INTEGER,
  PostPF INTEGER,
  PostfgAttempted INTEGER,
  PostfgMade INTEGER,
  PostftAttempted INTEGER,
  PostftMade INTEGER,
  PostthreeAttempted INTEGER,
  PostthreeMade INTEGER,
  note TEXT
);
Sample rows from `players_teams`:
1, abdelal01, 1990, 1, POR, NBA, 43, 0, 290, 135, 27, 62, 89, 12, 4, 12, 22, 39, 116, 55, 44, 25, 0, 0, 5, 0, 13, 4, 1, 2, 3, 0, 0, 0, 0, 0, 6, 2, 0, 0, 0, 0, None
2, abdelal01, 1991, 1, POR, NBA, 71, 0, 934, 432, 81, 179, 260, 30, 25, 17, 66, 132, 361, 178, 101, 76, 0, 0, 8, 0, 25, 12, 0, 4, 4, 2, 0, 0, 2, 4, 10, 5, 4, 2, 0, 0, None
3, abdelal01, 1992, 1, MIL, NBA, 12, 0, 159, 64, 12, 25, 37, 10, 6, 4, 0, 24, 56, 26, 16, 12, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, None

CREATE TABLE `series_post` (
  id INTEGER,
  year INTEGER REFERENCES teams(year) REFERENCES teams(year),
  round TEXT,
  series TEXT,
  tmIDWinner TEXT REFERENCES teams(tmID),
  lgIDWinner TEXT,
  tmIDLoser TEXT REFERENCES teams(tmID),
  lgIDLoser TEXT,
  W INTEGER,
  L INTEGER
);
Sample rows from `series_post`:
1, 1946, F, O, PHW, NBA, CHS, NBA, 4, 1
2, 1946, QF, M, NYK, NBA, CLR, NBA, 2, 1
3, 1946, QF, M, PHW, NBA, STB, NBA, 2, 1

","players, players_teams","players.playerid, players_teams.playerid, players_teams.lgid, players.pos"
regional_sales,"How many stores procured products on October 27, 2018, in the city of Oregon?",SELECT SUM(case when t1.procureddate = '10/27/18' AND t2.`city name` = 'Orlando' then 1 else 0 end) FROM `sales orders` as t1 inner JOIN `store locations` as t2 ON t2.storeID = t1._storeID,"CREATE TABLE `sales orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `sales orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

CREATE TABLE `store locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `store locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  Customer Names TEXT
);
Sample rows from `Customers`:
1, Avon Corp
2, WakeFern 
3, Elorac, Corp

CREATE TABLE `Products` (
  ProductID INTEGER,
  Product Name TEXT
);
Sample rows from `Products`:
1, Cookware
2, Photo Frames
3, Table Lamps

CREATE TABLE `Regions` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `Regions`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `Sales Team` (
  SalesTeamID INTEGER,
  Sales Team TEXT,
  Region TEXT
);
Sample rows from `Sales Team`:
1, Adam Hernandez, Northeast
2, Keith Griffin, Northeast
3, Jerry Green, West

CREATE TABLE `Store Locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `Store Locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

CREATE TABLE `Sales Orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `Sales Orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

","sales orders, store locations","sales orders.procureddate, store locations.city name, store locations.storeID, sales orders._storeID"
talkingdata,What is the gender of the majority of Vivo phone users?,"SELECt t.gender FROM ( SELECt t2.gender, COUNT(t2.gender) as num FROM phone_brand_device_model2 as t1 inner JOIN gender_age as t2 ON t2.device_id = t1.device_id WHERE t1.phone_brand = 'vivo' GROUP BY t2.gender ) as t ORDER BY t.num DESC LIMIt 1","CREATE TABLE `phone_brand_device_model2` (
  device_id INTEGER PRIMARY KEY,
  phone_brand TEXT PRIMARY KEY,
  device_model TEXT PRIMARY KEY
);
Sample rows from `phone_brand_device_model2`:
-9223321966609553846, 小米, 红米note
-9223067244542181226, vivo, Y19T
-9223042152723782980, 小米, MI 3

CREATE TABLE `gender_age` (
  device_id INTEGER REFERENCES phone_brand_device_model2(device_id),
  gender TEXT,
  age INTEGER,
  group TEXT
);
Sample rows from `gender_age`:
-9221086586254644858, M, 29, M29-31
-9221079146476055829, None, None, None
-9221066489596332354, M, 31, M29-31

","CREATE TABLE `app_all` (
  app_id INTEGER
);
Sample rows from `app_all`:
-9223281467940916832
-9222877069545393219
-9222785464897897681

CREATE TABLE `app_events` (
  event_id INTEGER PRIMARY KEY REFERENCES events(event_id),
  app_id INTEGER PRIMARY KEY,
  is_installed INTEGER,
  is_active INTEGER
);
Sample rows from `app_events`:
2, -8942695423876075857, 1, 0
2, -8022267440849930066, 1, 0
2, -5720078949152207372, 1, 0

CREATE TABLE `app_events_relevant` (
  event_id INTEGER PRIMARY KEY REFERENCES events_relevant(event_id),
  app_id INTEGER PRIMARY KEY REFERENCES app_all(app_id),
  is_installed INTEGER,
  is_active INTEGER
);
Sample rows from `app_events_relevant`:
2, -8942695423876075857, 1, 0
2, -8022267440849930066, 1, 0
2, -5720078949152207372, 1, 0

CREATE TABLE `app_labels` (
  app_id INTEGER REFERENCES app_all(app_id),
  label_id INTEGER REFERENCES label_categories(label_id)
);
Sample rows from `app_labels`:
7324884708820027918, 251
-4494216993218550286, 251
6058196446775239644, 406

CREATE TABLE `events` (
  event_id INTEGER,
  device_id INTEGER,
  timestamp DATETIME,
  longitude REAL,
  latitude REAL
);
Sample rows from `events`:
1, 29182687948017175, 2016-05-01 00:55:25.0, 121.0, 31.0
2, -6401643145415154744, 2016-05-01 00:54:12.0, 104.0, 31.0
3, -4833982096941402721, 2016-05-01 00:08:05.0, 107.0, 30.0

CREATE TABLE `events_relevant` (
  event_id INTEGER,
  device_id INTEGER REFERENCES gender_age(device_id),
  timestamp DATETIME,
  longitude REAL,
  latitude REAL
);
Sample rows from `events_relevant`:
2, None, -8942695423876075857, 1.0, 0.0
6, None, -8764672938472212518, 1.0, 1.0
7, None, -9050100410106163077, 1.0, 0.0

CREATE TABLE `gender_age` (
  device_id INTEGER REFERENCES phone_brand_device_model2(device_id),
  gender TEXT,
  age INTEGER,
  group TEXT
);
Sample rows from `gender_age`:
-9221086586254644858, M, 29, M29-31
-9221079146476055829, None, None, None
-9221066489596332354, M, 31, M29-31

CREATE TABLE `gender_age_test` (
  device_id INTEGER
);
Sample rows from `gender_age_test`:
-9223321966609553846
-9223042152723782980
-9222896629442493034

CREATE TABLE `gender_age_train` (
  device_id INTEGER,
  gender TEXT,
  age INTEGER,
  group TEXT
);
Sample rows from `gender_age_train`:
-9223067244542181226, M, 24, M23-26
-9222956879900151005, M, 36, M32-38
-9222754701995937853, M, 29, M29-31

CREATE TABLE `label_categories` (
  label_id INTEGER,
  category TEXT
);
Sample rows from `label_categories`:
1, None
2, game-game type
3, game-Game themes

CREATE TABLE `phone_brand_device_model2` (
  device_id INTEGER PRIMARY KEY,
  phone_brand TEXT PRIMARY KEY,
  device_model TEXT PRIMARY KEY
);
Sample rows from `phone_brand_device_model2`:
-9223321966609553846, 小米, 红米note
-9223067244542181226, vivo, Y19T
-9223042152723782980, 小米, MI 3

CREATE TABLE `sample_submission` (
  device_id INTEGER,
  F23- REAL,
  F24-26 REAL,
  F27-28 REAL,
  F29-32 REAL,
  F33-42 REAL,
  F43+ REAL,
  M22- REAL,
  M23-26 REAL,
  M27-28 REAL,
  M29-31 REAL,
  M32-38 REAL,
  M39+ REAL
);
Sample rows from `sample_submission`:
-9223321966609553846, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833
-9223042152723782980, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833
-9222896629442493034, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833

","phone_brand_device_model2, gender_age","gender_age.gender, gender_age.device_id, phone_brand_device_model2.device_id, phone_brand_device_model2.phone_brand"
public_review_platform,"Among the review votes of funny and cool hit uber with long review length, describe the business ID, active status, user ID and user year of joining Yelp.","SELECT t1.business_id, t1.active, t3.user_id, t3.user_yelping_since_year FROM business as t1 inner JOIN reviews as t2 ON t1.business_id = t2.business_id inner JOIN users as t3 ON t2.user_id = t3.user_id WHERE t2.review_votes_cool = 'Uber' AND t2.review_votes_funny = 'Uber' AND t2.review_length = 'Long'","CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","business, reviews, users","business.business_id, business.active, users.user_id, users.user_yelping_since_year, reviews.business_id, reviews.user_id, reviews.review_votes_cool, reviews.review_votes_funny, reviews.review_length"
software_company,"Among the widowed female customers, give the income of those who has an level of education of 5 and below.",SELECT income_k FROM demog WHERE geoid IN ( SELECT geoid FROM customers WHERE educationnum < 5 AND sex = 'Female' AND marital_status = 'Widowed' ),"CREATE TABLE `demog` (
  GEOID INTEGER,
  INHABITANTS_K REAL,
  INCOME_K REAL,
  A_VAR1 REAL,
  A_VAR2 REAL,
  A_VAR3 REAL,
  A_VAR4 REAL,
  A_VAR5 REAL,
  A_VAR6 REAL,
  A_VAR7 REAL,
  A_VAR8 REAL,
  A_VAR9 REAL,
  A_VAR10 REAL,
  A_VAR11 REAL,
  A_VAR12 REAL,
  A_VAR13 REAL,
  A_VAR14 REAL,
  A_VAR15 REAL,
  A_VAR16 REAL,
  A_VAR17 REAL,
  A_VAR18 REAL
);
Sample rows from `demog`:
0, 30.046, 2631.47, 6.084, 5.79, 8.595, 3.935, 6.362, 8.626, 4.624, 8.324, 5.233, 6.232, 5.205, 8.231, 6.746, 8.679, 5.292, 3.5, 5.512, 5.783
1, 36.25, 3012.75, 4.604, 8.309, 6.007, 5.938, 8.773, 3.579, 6.349, 4.694, 6.884, 7.062, 7.319, 3.72, 6.405, 7.202, 4.932, 7.969, 8.15, 5.633
2, 47.645, 2192.41, 4.911, 8.557, 5.934, 6.494, 9.172, 3.202, 6.157, 4.822, 7.942, 7.901, 7.928, 2.33, 6.029, 6.455, 4.72, 8.564, 8.342, 4.938

CREATE TABLE `customers` (
  ID INTEGER,
  SEX TEXT,
  MARITAL_STATUS TEXT,
  GEOID INTEGER REFERENCES Demog(None),
  EDUCATIONNUM INTEGER,
  OCCUPATION TEXT,
  age INTEGER
);
Sample rows from `customers`:
0, Male, Never-married, 61, 7, Machine-op-inspct, 62
1, Male, Married-civ-spouse, 70, 3, Handlers-cleaners, 78
2, Male, Never-married, 53, 7, Machine-op-inspct, 69

","CREATE TABLE `Demog` (
  GEOID INTEGER,
  INHABITANTS_K REAL,
  INCOME_K REAL,
  A_VAR1 REAL,
  A_VAR2 REAL,
  A_VAR3 REAL,
  A_VAR4 REAL,
  A_VAR5 REAL,
  A_VAR6 REAL,
  A_VAR7 REAL,
  A_VAR8 REAL,
  A_VAR9 REAL,
  A_VAR10 REAL,
  A_VAR11 REAL,
  A_VAR12 REAL,
  A_VAR13 REAL,
  A_VAR14 REAL,
  A_VAR15 REAL,
  A_VAR16 REAL,
  A_VAR17 REAL,
  A_VAR18 REAL
);
Sample rows from `Demog`:
0, 30.046, 2631.47, 6.084, 5.79, 8.595, 3.935, 6.362, 8.626, 4.624, 8.324, 5.233, 6.232, 5.205, 8.231, 6.746, 8.679, 5.292, 3.5, 5.512, 5.783
1, 36.25, 3012.75, 4.604, 8.309, 6.007, 5.938, 8.773, 3.579, 6.349, 4.694, 6.884, 7.062, 7.319, 3.72, 6.405, 7.202, 4.932, 7.969, 8.15, 5.633
2, 47.645, 2192.41, 4.911, 8.557, 5.934, 6.494, 9.172, 3.202, 6.157, 4.822, 7.942, 7.901, 7.928, 2.33, 6.029, 6.455, 4.72, 8.564, 8.342, 4.938

CREATE TABLE `mailings3` (
  REFID INTEGER,
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `mailings3`:
60000, 2007-07-01 12:00:00.0, false
60001, 2007-07-01 12:00:00.0, false
60002, 2007-07-01 12:00:00.0, false

CREATE TABLE `Customers` (
  ID INTEGER,
  SEX TEXT,
  MARITAL_STATUS TEXT,
  GEOID INTEGER REFERENCES Demog(None),
  EDUCATIONNUM INTEGER,
  OCCUPATION TEXT,
  age INTEGER
);
Sample rows from `Customers`:
0, Male, Never-married, 61, 7, Machine-op-inspct, 62
1, Male, Married-civ-spouse, 70, 3, Handlers-cleaners, 78
2, Male, Never-married, 53, 7, Machine-op-inspct, 69

CREATE TABLE `Mailings1_2` (
  REFID INTEGER REFERENCES Customers(None),
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `Mailings1_2`:
0, 2007-02-01 12:00:00.0, false
1, 2007-02-01 12:00:00.0, false
2, 2007-02-01 12:00:00.0, false

CREATE TABLE `Sales` (
  EVENTID INTEGER,
  REFID INTEGER REFERENCES Customers(None),
  EVENT_DATE DATETIME,
  AMOUNT REAL
);
Sample rows from `Sales`:
0, 0, 2006-12-21 12:00:00.0, 17.907
1, 0, 2006-12-25 12:00:00.0, 17.401
2, 0, 2007-01-26 12:00:00.0, 13.277

","demog, customers","income_k, geoid, educationnum, sex, marital_status"
cookbook,List the names of recipes that can lead to constipation.,SELECT t1.title FROM recipe as t1 inner JOIN nutrition as t2 ON t1.recipe_id = t2.recipe_id WHERE t2.iron > 20,"CREATE TABLE `recipe` (
  recipe_id INTEGER,
  title TEXT,
  subtitle TEXT,
  servings INTEGER,
  yield_unit TEXT,
  prep_min INTEGER,
  cook_min INTEGER,
  stnd_min INTEGER,
  source TEXT,
  intro TEXT,
  directions TEXT
);
Sample rows from `recipe`:
214, Raspberry Chiffon Pie, None, 10, 1 pie, 20, 8, 305, The California Tree Fruit Agreement, None, For crust, preheat oven to 375 degrees F.
In lightly greased 10-inch pie plate, combine graham cracker crumbs, melted butter and 1/4 cup sugar. Press evenly on bottom and up side of plate. Bake 5 minutes; cool.

For filling, in medium saucepan, combine juice or water and gelatin; let stand 5 minutes. Add 1/3 cup sugar and heat over medium heat, stirring to dissolve gelatin. In blender or food processor, puree 6 plums. Add puree and raspberries to gelatin mixture. Refrigerate until mixture begins to set about 1 hour. Stir yogurt into fruit mixture. In large bowl, beat egg whites until frothy. Gradually add cream of tartar and remaining 1/3 cup sugar and beat until stiff peaks form. Gently fold egg whites into fruit mixture so as not to reduce volume. Spoon into crust. Refrigerate 4 hours or overnight. Thinly slice remaining 2 plums and garnish top of pie.
215, Apricot Yogurt Parfaits, None, 4, None, 5, 2, 65, Produce for Better Health Foundation and 5 a Day, None, Drain canned apricots, pour 1/4 cup of the juice into saucepan or microwave-safe dish. Sprinkle gelatin over juice and let stand for 5 minutes to soften. Warm over low heat or microwave at medium (50% power) for 30 seconds or until gelatin has dissolved.
 
In food processor or blender, puree canned apricots; add lemon juice brandy, yogurt and gelatin mixture and process for 30 seconds or until combined.
 
Pour into parfait or stemmed glasses or champagne flutes. Cover and refrigerate until set, at least 1 hour or overnight.
 
Just before serving arrange fresh apricots on top. (If apricots are not available substitute kiwi slices or berries). Garnish each with a small spoonful of yogurt and sprinkling of brown sugar or mint.
216, Fresh Apricot Bavarian, None, 8, None, 5, 13, 0, The California Apricot Advisory Board, Serve in stemmed glasses and top with sliced apricots for elegant endings., Drop apricots into boiling water to cover. Return to boil and simmer for 5 minutes or until skins begin to split. Drain and rinse under cold water. Halve fruit and discard skins and pits. Puree apricots in electric blender. Combine water and gelatin in small saucepan; stir over low heat until dissolved. Mix sugar, apricot puree and yogurt with a wire whip until smooth; mix in dissolved gelatin. Sweeten to taste if desired. Chill mixture until thick. Spoon into stemmed glasses.

Note: One pound fresh apricots is 15 to 20. One and a half envelopes gelatin is 4 teaspoons.

CREATE TABLE `nutrition` (
  recipe_id INTEGER REFERENCES Recipe(recipe_id),
  protein REAL,
  carbo REAL,
  alcohol REAL,
  total_fat REAL,
  sat_fat REAL,
  cholestrl REAL,
  sodium REAL,
  iron REAL,
  vitamin_c REAL,
  vitamin_a REAL,
  fiber REAL,
  pcnt_cal_carb REAL,
  pcnt_cal_fat REAL,
  pcnt_cal_prot REAL,
  calories REAL
);
Sample rows from `nutrition`:
214, 5.47, 41.29, 0.0, 11.53, 2.21, 1.39, 260.78, 0.81, 8.89, 586.2, 0.87, 56.8, 35.68, 7.53, 290.79
215, 5.7, 23.75, 1.93, 1.08, 0.58, 3.48, 46.17, 0.57, 13.02, 2738.24, 0.62, 67.38, 6.89, 16.17, 141.01
216, 4.9, 26.88, 0.0, 1.1, 0.58, 3.46, 41.79, 0.37, 6.13, 1521.1, 0.34, 78.45, 7.24, 14.3, 137.06

","CREATE TABLE `Ingredient` (
  ingredient_id INTEGER,
  category TEXT,
  name TEXT,
  plural TEXT
);
Sample rows from `Ingredient`:
1, dairy, 1% lowfat cottage cheese, None
6, dairy, 1% lowfat milk, None
10, Mexican products, 10-inch flour tortilla, s

CREATE TABLE `Recipe` (
  recipe_id INTEGER,
  title TEXT,
  subtitle TEXT,
  servings INTEGER,
  yield_unit TEXT,
  prep_min INTEGER,
  cook_min INTEGER,
  stnd_min INTEGER,
  source TEXT,
  intro TEXT,
  directions TEXT
);
Sample rows from `Recipe`:
214, Raspberry Chiffon Pie, None, 10, 1 pie, 20, 8, 305, The California Tree Fruit Agreement, None, For crust, preheat oven to 375 degrees F.
In lightly greased 10-inch pie plate, combine graham cracker crumbs, melted butter and 1/4 cup sugar. Press evenly on bottom and up side of plate. Bake 5 minutes; cool.

For filling, in medium saucepan, combine juice or water and gelatin; let stand 5 minutes. Add 1/3 cup sugar and heat over medium heat, stirring to dissolve gelatin. In blender or food processor, puree 6 plums. Add puree and raspberries to gelatin mixture. Refrigerate until mixture begins to set about 1 hour. Stir yogurt into fruit mixture. In large bowl, beat egg whites until frothy. Gradually add cream of tartar and remaining 1/3 cup sugar and beat until stiff peaks form. Gently fold egg whites into fruit mixture so as not to reduce volume. Spoon into crust. Refrigerate 4 hours or overnight. Thinly slice remaining 2 plums and garnish top of pie.
215, Apricot Yogurt Parfaits, None, 4, None, 5, 2, 65, Produce for Better Health Foundation and 5 a Day, None, Drain canned apricots, pour 1/4 cup of the juice into saucepan or microwave-safe dish. Sprinkle gelatin over juice and let stand for 5 minutes to soften. Warm over low heat or microwave at medium (50% power) for 30 seconds or until gelatin has dissolved.
 
In food processor or blender, puree canned apricots; add lemon juice brandy, yogurt and gelatin mixture and process for 30 seconds or until combined.
 
Pour into parfait or stemmed glasses or champagne flutes. Cover and refrigerate until set, at least 1 hour or overnight.
 
Just before serving arrange fresh apricots on top. (If apricots are not available substitute kiwi slices or berries). Garnish each with a small spoonful of yogurt and sprinkling of brown sugar or mint.
216, Fresh Apricot Bavarian, None, 8, None, 5, 13, 0, The California Apricot Advisory Board, Serve in stemmed glasses and top with sliced apricots for elegant endings., Drop apricots into boiling water to cover. Return to boil and simmer for 5 minutes or until skins begin to split. Drain and rinse under cold water. Halve fruit and discard skins and pits. Puree apricots in electric blender. Combine water and gelatin in small saucepan; stir over low heat until dissolved. Mix sugar, apricot puree and yogurt with a wire whip until smooth; mix in dissolved gelatin. Sweeten to taste if desired. Chill mixture until thick. Spoon into stemmed glasses.

Note: One pound fresh apricots is 15 to 20. One and a half envelopes gelatin is 4 teaspoons.

CREATE TABLE `Nutrition` (
  recipe_id INTEGER REFERENCES Recipe(recipe_id),
  protein REAL,
  carbo REAL,
  alcohol REAL,
  total_fat REAL,
  sat_fat REAL,
  cholestrl REAL,
  sodium REAL,
  iron REAL,
  vitamin_c REAL,
  vitamin_a REAL,
  fiber REAL,
  pcnt_cal_carb REAL,
  pcnt_cal_fat REAL,
  pcnt_cal_prot REAL,
  calories REAL
);
Sample rows from `Nutrition`:
214, 5.47, 41.29, 0.0, 11.53, 2.21, 1.39, 260.78, 0.81, 8.89, 586.2, 0.87, 56.8, 35.68, 7.53, 290.79
215, 5.7, 23.75, 1.93, 1.08, 0.58, 3.48, 46.17, 0.57, 13.02, 2738.24, 0.62, 67.38, 6.89, 16.17, 141.01
216, 4.9, 26.88, 0.0, 1.1, 0.58, 3.46, 41.79, 0.37, 6.13, 1521.1, 0.34, 78.45, 7.24, 14.3, 137.06

CREATE TABLE `Quantity` (
  quantity_id INTEGER,
  recipe_id INTEGER REFERENCES Nutrition(recipe_id) REFERENCES Recipe(recipe_id),
  ingredient_id INTEGER REFERENCES Ingredient(ingredient_id),
  max_qty REAL,
  min_qty REAL,
  unit TEXT,
  preparation TEXT,
  optional TEXT
);
Sample rows from `Quantity`:
1, 214, 1613, 2.0, 2.0, cup(s), None, FALSE
2, 214, 3334, 0.25, 0.25, cup(s), None, FALSE
3, 214, 2222, 0.5, 0.5, cup(s), melted, FALSE

","recipe, nutrition","recipe.title, recipe.recipe_id, nutrition.recipe_id, nutrition.iron"
software_company,"Of the first 60,000 customers who sent a true response to the incentive mailing sent by the marketing department, how many of them are from a place with more than 30,000 inhabitants?",SELECT COUNT(t1.id) FROM customers as t1 inner JOIN mailings1_2 as t2 ON t1.id = t2.REFid inner JOIN demog as t3 ON t1.GEOid = t3.GEOid WHERE t3.inhabitants_k > 30 AND t2.response = 'true',"CREATE TABLE `customers` (
  ID INTEGER,
  SEX TEXT,
  MARITAL_STATUS TEXT,
  GEOID INTEGER REFERENCES Demog(None),
  EDUCATIONNUM INTEGER,
  OCCUPATION TEXT,
  age INTEGER
);
Sample rows from `customers`:
0, Male, Never-married, 61, 7, Machine-op-inspct, 62
1, Male, Married-civ-spouse, 70, 3, Handlers-cleaners, 78
2, Male, Never-married, 53, 7, Machine-op-inspct, 69

CREATE TABLE `mailings1_2` (
  REFID INTEGER REFERENCES Customers(None),
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `mailings1_2`:
0, 2007-02-01 12:00:00.0, false
1, 2007-02-01 12:00:00.0, false
2, 2007-02-01 12:00:00.0, false

CREATE TABLE `demog` (
  GEOID INTEGER,
  INHABITANTS_K REAL,
  INCOME_K REAL,
  A_VAR1 REAL,
  A_VAR2 REAL,
  A_VAR3 REAL,
  A_VAR4 REAL,
  A_VAR5 REAL,
  A_VAR6 REAL,
  A_VAR7 REAL,
  A_VAR8 REAL,
  A_VAR9 REAL,
  A_VAR10 REAL,
  A_VAR11 REAL,
  A_VAR12 REAL,
  A_VAR13 REAL,
  A_VAR14 REAL,
  A_VAR15 REAL,
  A_VAR16 REAL,
  A_VAR17 REAL,
  A_VAR18 REAL
);
Sample rows from `demog`:
0, 30.046, 2631.47, 6.084, 5.79, 8.595, 3.935, 6.362, 8.626, 4.624, 8.324, 5.233, 6.232, 5.205, 8.231, 6.746, 8.679, 5.292, 3.5, 5.512, 5.783
1, 36.25, 3012.75, 4.604, 8.309, 6.007, 5.938, 8.773, 3.579, 6.349, 4.694, 6.884, 7.062, 7.319, 3.72, 6.405, 7.202, 4.932, 7.969, 8.15, 5.633
2, 47.645, 2192.41, 4.911, 8.557, 5.934, 6.494, 9.172, 3.202, 6.157, 4.822, 7.942, 7.901, 7.928, 2.33, 6.029, 6.455, 4.72, 8.564, 8.342, 4.938

","CREATE TABLE `Demog` (
  GEOID INTEGER,
  INHABITANTS_K REAL,
  INCOME_K REAL,
  A_VAR1 REAL,
  A_VAR2 REAL,
  A_VAR3 REAL,
  A_VAR4 REAL,
  A_VAR5 REAL,
  A_VAR6 REAL,
  A_VAR7 REAL,
  A_VAR8 REAL,
  A_VAR9 REAL,
  A_VAR10 REAL,
  A_VAR11 REAL,
  A_VAR12 REAL,
  A_VAR13 REAL,
  A_VAR14 REAL,
  A_VAR15 REAL,
  A_VAR16 REAL,
  A_VAR17 REAL,
  A_VAR18 REAL
);
Sample rows from `Demog`:
0, 30.046, 2631.47, 6.084, 5.79, 8.595, 3.935, 6.362, 8.626, 4.624, 8.324, 5.233, 6.232, 5.205, 8.231, 6.746, 8.679, 5.292, 3.5, 5.512, 5.783
1, 36.25, 3012.75, 4.604, 8.309, 6.007, 5.938, 8.773, 3.579, 6.349, 4.694, 6.884, 7.062, 7.319, 3.72, 6.405, 7.202, 4.932, 7.969, 8.15, 5.633
2, 47.645, 2192.41, 4.911, 8.557, 5.934, 6.494, 9.172, 3.202, 6.157, 4.822, 7.942, 7.901, 7.928, 2.33, 6.029, 6.455, 4.72, 8.564, 8.342, 4.938

CREATE TABLE `mailings3` (
  REFID INTEGER,
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `mailings3`:
60000, 2007-07-01 12:00:00.0, false
60001, 2007-07-01 12:00:00.0, false
60002, 2007-07-01 12:00:00.0, false

CREATE TABLE `Customers` (
  ID INTEGER,
  SEX TEXT,
  MARITAL_STATUS TEXT,
  GEOID INTEGER REFERENCES Demog(None),
  EDUCATIONNUM INTEGER,
  OCCUPATION TEXT,
  age INTEGER
);
Sample rows from `Customers`:
0, Male, Never-married, 61, 7, Machine-op-inspct, 62
1, Male, Married-civ-spouse, 70, 3, Handlers-cleaners, 78
2, Male, Never-married, 53, 7, Machine-op-inspct, 69

CREATE TABLE `Mailings1_2` (
  REFID INTEGER REFERENCES Customers(None),
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `Mailings1_2`:
0, 2007-02-01 12:00:00.0, false
1, 2007-02-01 12:00:00.0, false
2, 2007-02-01 12:00:00.0, false

CREATE TABLE `Sales` (
  EVENTID INTEGER,
  REFID INTEGER REFERENCES Customers(None),
  EVENT_DATE DATETIME,
  AMOUNT REAL
);
Sample rows from `Sales`:
0, 0, 2006-12-21 12:00:00.0, 17.907
1, 0, 2006-12-25 12:00:00.0, 17.401
2, 0, 2007-01-26 12:00:00.0, 13.277

","customers, mailings1_2, demog","customers.id, mailings1_2.REFid, customers.GEOid, demog.GEOid, demog.inhabitants_k, mailings1_2.response"
student_loan,Which organization does student 313 belong to?,SELECT organ FROM enlist WHERE name = 'studenT113',"CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

",enlist,"organ, name"
codebase_comments,"What is the solution's path of method ""HtmlSharp.HtmlParser.Feed""?",SELECT t1.path FROM solution as t1 inner JOIN method as t2 ON t1.id = t2.solutionid WHERE t2.name = 'HtmlSharp.HtmlParser.Feed',"CREATE TABLE `solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

CREATE TABLE `method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Method, 10860640
MethodParameter, 17514858
Repo, 156550

CREATE TABLE `Method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `Method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

CREATE TABLE `MethodParameter` (
  Id INTEGER,
  MethodId TEXT,
  Type TEXT,
  Name TEXT
);
Sample rows from `MethodParameter`:
1, 1, System.String, data
2, 2, System.Int32, i
3, 2, System.Int32, declstartpos

CREATE TABLE `Repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `Repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

CREATE TABLE `Solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `Solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

","solution, method","solution.path, solution.id, method.solutionid, method.name"
public_review_platform,Mention the number of businesses that have no any attribute.,"SELECT COUNT(business_id) FROM business_attributes WHERE attribute_value IN ('none', 'no', 'false')","CREATE TABLE `business_attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `business_attributes`:
1, 2, none
1, 3, none
1, 13, none

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

",business_attributes,"business_id, attribute_value"
image_and_language,Provide the number of predicted classes.,SELECT COUNT(pred_class_id) FROM pred_classes,"CREATE TABLE `pred_classes` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `pred_classes`:
0, playing on
1, looking a
2, to left of

","CREATE TABLE `ATT_CLASSES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `ATT_CLASSES`:
0, building s
1, indoors
2, cluttered

CREATE TABLE `OBJ_CLASSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLASSES`:
0, awning
1, goggles
2, dot

CREATE TABLE `IMG_OBJ` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `IMG_OBJ`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `IMG_OBJ_ATT` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_OBJ_ATT`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `PRED_CLASSES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `PRED_CLASSES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `IMG_REL` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_REL`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

",pred_classes,pred_class_id
soccer_2016,What is the venue name of Bandladore?,SELECT t1.venue_name FROM venue as t1 inner JOIN city as t2 ON t1.city_ID = t2.city_ID WHERE t2.city_Name = 'Bangalore',"CREATE TABLE `venue` (
  Venue_Id INTEGER,
  Venue_Name TEXT,
  City_Id INTEGER REFERENCES City(City_Id)
);
Sample rows from `venue`:
1, M Chinnaswamy Stadium, 1
2, Punjab Cricket Association Stadium, 2
3, Feroz Shah Kotla, 3

CREATE TABLE `city` (
  City_Id INTEGER,
  City_Name TEXT,
  Country_id INTEGER
);
Sample rows from `city`:
1, Bangalore, 1
2, Chandigarh, 1
3, Delhi, 1

","CREATE TABLE `Batting_Style` (
  Batting_Id INTEGER,
  Batting_hand TEXT
);
Sample rows from `Batting_Style`:
1, Left-hand bat
2, Right-hand bat

CREATE TABLE `Bowling_Style` (
  Bowling_Id INTEGER,
  Bowling_skill TEXT
);
Sample rows from `Bowling_Style`:
1, Right-arm medium
2, Right-arm offbreak
3, Right-arm fast-medium

CREATE TABLE `City` (
  City_Id INTEGER,
  City_Name TEXT,
  Country_id INTEGER
);
Sample rows from `City`:
1, Bangalore, 1
2, Chandigarh, 1
3, Delhi, 1

CREATE TABLE `Country` (
  Country_Id INTEGER REFERENCES Country(Country_Id),
  Country_Name TEXT
);
Sample rows from `Country`:
1, India
2, South Africa
3, U.A.E

CREATE TABLE `Extra_Type` (
  Extra_Id INTEGER,
  Extra_Name TEXT
);
Sample rows from `Extra_Type`:
1, legbyes
2, wides
3, byes

CREATE TABLE `Extra_Runs` (
  Match_Id INTEGER PRIMARY KEY,
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Extra_Type_Id INTEGER REFERENCES Extra_Type(Extra_Id),
  Extra_Runs INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Extra_Runs`:
335987, 1, 1, 1, 1, 1
335987, 1, 2, 2, 1, 2
335987, 1, 3, 2, 1, 1

CREATE TABLE `Out_Type` (
  Out_Id INTEGER,
  Out_Name TEXT
);
Sample rows from `Out_Type`:
1, caught
2, bowled
3, run out

CREATE TABLE `Outcome` (
  Outcome_Id INTEGER,
  Outcome_Type TEXT
);
Sample rows from `Outcome`:
1, Result
2, No Result
3, Superover

CREATE TABLE `Player` (
  Player_Id INTEGER,
  Player_Name TEXT,
  DOB DATE,
  Batting_hand INTEGER REFERENCES Batting_Style(Batting_Id),
  Bowling_skill INTEGER REFERENCES Bowling_Style(Bowling_Id),
  Country_Name INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Player`:
1, SC Ganguly, 1972-07-08, 1, 1, 1
2, BB McCullum, 1981-09-27, 2, 1, 4
3, RT Ponting, 1974-12-19, 2, 1, 5

CREATE TABLE `Rolee` (
  Role_Id INTEGER,
  Role_Desc TEXT
);
Sample rows from `Rolee`:
1, Captain
2, Keeper
3, Player

CREATE TABLE `Season` (
  Season_Id INTEGER,
  Man_of_the_Series INTEGER,
  Orange_Cap INTEGER,
  Purple_Cap INTEGER,
  Season_Year INTEGER
);
Sample rows from `Season`:
1, 32, 100, 102, 2008
2, 53, 18, 61, 2009
3, 133, 133, 131, 2010

CREATE TABLE `Team` (
  Team_Id INTEGER,
  Team_Name TEXT
);
Sample rows from `Team`:
1, Kolkata Knight Riders
2, Royal Challengers Bangalore
3, Chennai Super Kings

CREATE TABLE `Toss_Decision` (
  Toss_Id INTEGER,
  Toss_Name TEXT
);
Sample rows from `Toss_Decision`:
1, field
2, bat

CREATE TABLE `Umpire` (
  Umpire_Id INTEGER,
  Umpire_Name TEXT,
  Umpire_Country INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Umpire`:
1, Asad Rauf, 6
2, MR Benson, 10
3, Aleem Dar, 6

CREATE TABLE `Venue` (
  Venue_Id INTEGER,
  Venue_Name TEXT,
  City_Id INTEGER REFERENCES City(City_Id)
);
Sample rows from `Venue`:
1, M Chinnaswamy Stadium, 1
2, Punjab Cricket Association Stadium, 2
3, Feroz Shah Kotla, 3

CREATE TABLE `Win_By` (
  Win_Id INTEGER,
  Win_Type TEXT
);
Sample rows from `Win_By`:
1, runs
2, wickets
3, NO Result

CREATE TABLE `Match` (
  Match_Id INTEGER,
  Team_1 INTEGER REFERENCES Team(Team_Id),
  Team_2 INTEGER REFERENCES Team(Team_Id),
  Match_Date DATE,
  Season_Id INTEGER REFERENCES Season(Season_Id),
  Venue_Id INTEGER REFERENCES Venue(Venue_Id),
  Toss_Winner INTEGER REFERENCES Team(Team_Id),
  Toss_Decide INTEGER REFERENCES Toss_Decision(Toss_Id),
  Win_Type INTEGER REFERENCES Win_By(Win_Id),
  Win_Margin INTEGER,
  Outcome_type INTEGER REFERENCES Out_Type(Out_Id),
  Match_Winner INTEGER REFERENCES Team(Team_Id),
  Man_of_the_Match INTEGER REFERENCES Player(Player_Id)
);
Sample rows from `Match`:
335987, 2, 1, 2008-04-18, 1, 1, 2, 1, 1, 140, 1, 1, 2
335988, 4, 3, 2008-04-19, 1, 2, 3, 2, 1, 33, 1, 3, 19
335989, 6, 5, 2008-04-19, 1, 3, 5, 2, 2, 9, 1, 6, 90

CREATE TABLE `Ball_by_Ball` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Innings_No INTEGER PRIMARY KEY,
  Team_Batting INTEGER,
  Team_Bowling INTEGER,
  Striker_Batting_Position INTEGER,
  Striker INTEGER,
  Non_Striker INTEGER,
  Bowler INTEGER
);
Sample rows from `Ball_by_Ball`:
335987, 1, 1, 1, 1, 2, 1, 1, 2, 14
335987, 1, 1, 2, 2, 1, 1, 6, 7, 106
335987, 1, 2, 1, 1, 2, 2, 2, 1, 14

CREATE TABLE `Batsman_Scored` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Runs_Scored INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Batsman_Scored`:
335987, 1, 1, 0, 1
335987, 1, 1, 1, 2
335987, 1, 2, 0, 1

CREATE TABLE `Player_Match` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Player_Id INTEGER PRIMARY KEY REFERENCES Player(Player_Id),
  Role_Id INTEGER PRIMARY KEY REFERENCES Rolee(Role_Id),
  Team_Id INTEGER REFERENCES Team(Team_Id)
);
Sample rows from `Player_Match`:
335987, 1, 1, 1
335987, 2, 3, 1
335987, 3, 3, 1

CREATE TABLE `Wicket_Taken` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Player_Out INTEGER REFERENCES Player(Player_Id),
  Kind_Out INTEGER REFERENCES Out_Type(Out_Id),
  Fielders INTEGER REFERENCES Player(Player_Id),
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Wicket_Taken`:
335987, 2, 1, 6, 2, None, 2
335987, 3, 2, 8, 2, None, 2
335987, 5, 5, 9, 1, 83, 2

","venue, city","venue.venue_name, venue.city_ID, city.city_ID, city.city_Name"
shakespeare,"What are the character names and descriptions of characters in ""Venus and Adonis""?","SELECT DISTINCT t4.charname, t2.description FROM works as t1 inner JOIN chapters as t2 ON t1.id = t2.work_id inner JOIN paragraphs as t3 ON t2.id = t3.chapter_id inner JOIN characters as t4 ON t3.character_id = t4.id WHERE t1.title = 'Venus and Adonis'","CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

","CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
chapters, 19648
characters, 1266
paragraphs, 666327

CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

","works, chapters, paragraphs, characters","characters.charname, chapters.description, works.id, chapters.work_id, chapters.id, paragraphs.chapter_id, paragraphs.character_id, characters.id, works.title"
chicago_crime,How many crimes against society happened in the Wentworth district according to the FBI?,SELECT SUM(case when t1.crime_against = 'Society' then 1 else 0 end) FROM fbi_code as t1 inner JOIN crime as t2 ON t2.fbi_code_no = t1.fbi_code_no inner JOIN district as t3 ON t3.district_no = t2.district_no WHERE t3.district_name = 'Wentworth',"CREATE TABLE `fbi_code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `fbi_code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

CREATE TABLE `district` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `district`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

","CREATE TABLE `Community_Area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `Community_Area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `District` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `District`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `FBI_Code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `FBI_Code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `IUCR` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `IUCR`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `Neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `Neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `Ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `Ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `Crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `Crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","fbi_code, crime, district","fbi_code.crime_against, crime.fbi_code_no, fbi_code.fbi_code_no, district.district_no, crime.district_no, district.district_name"
movies_4,What is the role of Mark Hammel?,SELECT t2.job FROM person as t1 inner JOIN movie_crew as t2 ON t1.person_id = t2.person_id WHERE t1.person_name = 'Mark Hammel',"CREATE TABLE `person` (
  person_id INTEGER,
  person_name TEXT
);
Sample rows from `person`:
1, George Lucas
2, Mark Hamill
3, Harrison Ford

CREATE TABLE `movie_crew` (
  movie_id INTEGER REFERENCES movie(movie_id),
  person_id INTEGER REFERENCES person(person_id),
  department_id INTEGER REFERENCES department(department_id),
  job TEXT
);
Sample rows from `movie_crew`:
285, 120, 1, Director of Photography
285, 1704, 2, Director
285, 770, 3, Producer

","CREATE TABLE `country` (
  country_id INTEGER,
  country_iso_code TEXT,
  country_name TEXT
);
Sample rows from `country`:
128, AE, United Arab Emirates
129, AF, Afghanistan
130, AO, Angola

CREATE TABLE `department` (
  department_id INTEGER,
  department_name TEXT
);
Sample rows from `department`:
1, Camera
2, Directing
3, Production

CREATE TABLE `gender` (
  gender_id INTEGER,
  gender TEXT
);
Sample rows from `gender`:
0, Unspecified
1, Female
2, Male

CREATE TABLE `genre` (
  genre_id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
12, Adventure
14, Fantasy
16, Animation

CREATE TABLE `keyword` (
  keyword_id INTEGER,
  keyword_name TEXT
);
Sample rows from `keyword`:
30, individual
65, holiday
74, germany

CREATE TABLE `language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `language`:
24574, en, English
24575, sv, svenska
24576, de, Deutsch

CREATE TABLE `language_role` (
  role_id INTEGER,
  language_role TEXT
);
Sample rows from `language_role`:
1, Original
2, Spoken

CREATE TABLE `movie` (
  movie_id INTEGER,
  title TEXT,
  budget INTEGER,
  homepage TEXT,
  overview TEXT,
  popularity REAL,
  release_date DATE,
  revenue INTEGER,
  runtime INTEGER,
  movie_status TEXT,
  tagline TEXT,
  vote_average REAL,
  vote_count INTEGER
);
Sample rows from `movie`:
5, Four Rooms, 4000000, , It's Ted the Bellhop's first night on the job...and the hotel's very unusual guests are about to place him in some outrageous predicaments. It seems that this evening's room service is serving up one unbelievable happening after another., 22.87623, 1995-12-09, 4300000, 98, Released, Twelve outrageous guests. Four scandalous requests. And one lone bellhop, in his first day on the job, who's in for the wildest New year's Eve of his life., 6.5, 530
11, Star Wars, 11000000, http://www.starwars.com/films/star-wars-episode-iv-a-new-hope, Princess Leia is captured and held hostage by the evil Imperial forces in their effort to take over the galactic Empire. Venturesome Luke Skywalker and dashing captain Han Solo team together with the loveable robot duo R2-D2 and C-3PO to rescue the beauti, 126.393695, 1977-05-25, 775398007, 121, Released, A long time ago in a galaxy far, far away..., 8.1, 6624
12, Finding Nemo, 94000000, http://movies.disney.com/finding-nemo, Nemo, an adventurous young clownfish, is unexpectedly taken from his Great Barrier Reef home to a dentist's office aquarium. It's up to his worrisome father Marlin and a friendly but forgetful fish Dory to bring Nemo home -- meeting vegetarian sharks, sur, 85.688789, 2003-05-30, 940335536, 100, Released, There are 3.7 trillion fish in the ocean, they're looking for one., 7.6, 6122

CREATE TABLE `movie_genres` (
  movie_id INTEGER REFERENCES movie(movie_id),
  genre_id INTEGER REFERENCES genre(genre_id)
);
Sample rows from `movie_genres`:
5, 35
5, 80
11, 12

CREATE TABLE `movie_languages` (
  movie_id INTEGER REFERENCES movie(movie_id),
  language_id INTEGER REFERENCES language(language_id),
  language_role_id INTEGER REFERENCES language_role(role_id)
);
Sample rows from `movie_languages`:
5, 24574, 2
11, 24574, 2
12, 24574, 2

CREATE TABLE `person` (
  person_id INTEGER,
  person_name TEXT
);
Sample rows from `person`:
1, George Lucas
2, Mark Hamill
3, Harrison Ford

CREATE TABLE `movie_crew` (
  movie_id INTEGER REFERENCES movie(movie_id),
  person_id INTEGER REFERENCES person(person_id),
  department_id INTEGER REFERENCES department(department_id),
  job TEXT
);
Sample rows from `movie_crew`:
285, 120, 1, Director of Photography
285, 1704, 2, Director
285, 770, 3, Producer

CREATE TABLE `production_company` (
  company_id INTEGER,
  company_name TEXT
);
Sample rows from `production_company`:
1, Lucasfilm
2, Walt Disney Pictures
3, Pixar Animation Studios

CREATE TABLE `production_country` (
  movie_id INTEGER REFERENCES movie(movie_id),
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `production_country`:
5, 214
11, 214
12, 214

CREATE TABLE `movie_cast` (
  movie_id INTEGER REFERENCES movie(movie_id),
  person_id INTEGER REFERENCES person(person_id),
  character_name TEXT,
  gender_id INTEGER REFERENCES gender(gender_id),
  cast_order INTEGER
);
Sample rows from `movie_cast`:
285, 85, Captain Jack Sparrow, 2, 0
285, 114, Will Turner, 2, 1
285, 116, Elizabeth Swann, 1, 2

CREATE TABLE `movie_keywords` (
  movie_id INTEGER REFERENCES movie(None),
  keyword_id INTEGER REFERENCES keyword(None)
);
Sample rows from `movie_keywords`:
5, 612
5, 613
5, 616

CREATE TABLE `movie_company` (
  movie_id INTEGER REFERENCES movie(None),
  company_id INTEGER REFERENCES production_company(None)
);
Sample rows from `movie_company`:
5, 14
5, 59
11, 1

","person, movie_crew","movie_crew.job, person.person_id, movie_crew.person_id, person.person_name"
college_completion,Which institute has the highest percentage of male White students graduating in 2011 within 150 percent of normal/expected time?,SELECT t1.chronname FROm institution_details as t1 inner JOIN institution_grads as t2 ON t2.unitid = t1.unitid wHERE t2.year = 2011 AND t2.gender = 'm' AND t2.race = 'w' AND t2.grad_150 = ( SELECT MAX(t2.grad_150) FROm institution_details as t1 inner JOIN institution_grads as t2 ON t2.unitid = t1.unitid wHERE t2.year = 2011 AND t2.gender = 'm' AND t2.race = 'w' ),"CREATE TABLE `institution_details` (
  unitid INTEGER,
  chronname TEXT,
  city TEXT,
  state TEXT,
  level TEXT,
  control TEXT,
  basic TEXT,
  hbcu TEXT,
  flagship TEXT,
  long_x REAL,
  lat_y REAL,
  site TEXT,
  student_count INTEGER,
  awards_per_value REAL,
  awards_per_state_value REAL,
  awards_per_natl_value REAL,
  exp_award_value INTEGER,
  exp_award_state_value INTEGER,
  exp_award_natl_value INTEGER,
  exp_award_percentile INTEGER,
  ft_pct REAL,
  fte_value INTEGER,
  fte_percentile INTEGER,
  med_sat_value TEXT,
  med_sat_percentile TEXT,
  aid_value INTEGER,
  aid_percentile INTEGER,
  endow_value TEXT,
  endow_percentile TEXT,
  grad_100_value REAL,
  grad_100_percentile INTEGER,
  grad_150_value REAL,
  grad_150_percentile INTEGER,
  pell_value REAL,
  pell_percentile INTEGER,
  retain_value REAL,
  retain_percentile INTEGER,
  ft_fac_value REAL,
  ft_fac_percentile INTEGER,
  vsa_year TEXT,
  vsa_grad_after4_first TEXT,
  vsa_grad_elsewhere_after4_first TEXT,
  vsa_enroll_after4_first TEXT,
  vsa_enroll_elsewhere_after4_first TEXT,
  vsa_grad_after6_first TEXT,
  vsa_grad_elsewhere_after6_first TEXT,
  vsa_enroll_after6_first TEXT,
  vsa_enroll_elsewhere_after6_first TEXT,
  vsa_grad_after4_transfer TEXT,
  vsa_grad_elsewhere_after4_transfer TEXT,
  vsa_enroll_after4_transfer TEXT,
  vsa_enroll_elsewhere_after4_transfer TEXT,
  vsa_grad_after6_transfer TEXT,
  vsa_grad_elsewhere_after6_transfer TEXT,
  vsa_enroll_after6_transfer TEXT,
  vsa_enroll_elsewhere_after6_transfer TEXT,
  similar TEXT,
  state_sector_ct INTEGER,
  carnegie_ct INTEGER,
  counted_pct TEXT,
  nicknames TEXT,
  cohort_size INTEGER
);
Sample rows from `institution_details`:
100654, Alabama A&M University, Normal, Alabama, 4-year, Public, Masters Colleges and Universities--larger programs, X, NULL, -86.568502, 34.783368, www.aamu.edu/, 4051, 14.2, 18.8, 21.5, 105331, 75743, 66436, 90, 93.8, 3906, 33, 823, 0, 7142, 72, NULL, NULL, 10.0, 15, 29.1, 14, 71.2, 98, 63.1, 17, 82.8, 89, 2010, 14.7, 2, 36.5, 16.1, 33, 5.3, 12.5, 14.6, 15.7, 1.5, 40.9, 17.2, 36.4, 5.6, 17.2, 11.1, 232937|100724|405997|113607|139533|144005|228501|101480|131876|144759|419509|176479|243197|228529|372222|228431|206695|139366|159993|224147, 13, 386, 99.7|07, NULL, 882
100663, University of Alabama at Birmingham, Birmingham, Alabama, 4-year, Public, Research Universities--very high research activity, NULL, NULL, -86.80917, 33.50223, www.uab.edu, 11502, 20.9, 18.8, 21.5, 136546, 75743, 66436, 97, 72.7, 10032, 67, 1146, 84, 6088, 50, 24136, 93, 29.4, 67, 53.5, 66, 35.1, 39, 80.2, 70, 92.4, 98, 2011, 22.3, 2.9, 34.2, 19.2, 42.6, 10.5, 7.9, 13.1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 196060|180461|201885|145600|209542|236939|126818|230764|104151|104179|157085|171100|153603|141574|155317|110714|137351|126562|243780|196088, 13, 106, 56.0|07, UAB, 1376
100690, Amridge University, Montgomery, Alabama, 4-year, Private not-for-profit, Baccalaureate Colleges--Arts & Sciences, NULL, NULL, -86.17401, 32.362609, www.amridgeuniversity.edu, 322, 29.9, 17.8, 22.5, 58414, 92268, 101725, 30, 62.7, 294, 12, NULL, NULL, 2540, 1, 302, 1, 0.0, 0, 66.7, 72, 68.4, 91, 37.5, 2, 67.2, 71, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 217925|441511|205124|247825|197647|221856|135364|117575|164207|193070|199315|166054|367893|183804|439701|193052|197744|193247|137777|176789, 16, 252, 100.0|07, NULL, 3

CREATE TABLE `institution_grads` (
  unitid INTEGER REFERENCES institution_details(unitid),
  year INTEGER,
  gender TEXT,
  race TEXT,
  cohort TEXT,
  grad_cohort TEXT,
  grad_100 TEXT,
  grad_150 TEXT,
  grad_100_rate TEXT,
  grad_150_rate TEXT
);
Sample rows from `institution_grads`:
100760, 2011, B, X, 2y all, 446, 73, 105, 16.4, 23.5
100760, 2011, M, X, 2y all, 185, NULL, 40, NULL, 21.6
100760, 2011, F, X, 2y all, 261, NULL, 65, NULL, 24.9

","CREATE TABLE `institution_details` (
  unitid INTEGER,
  chronname TEXT,
  city TEXT,
  state TEXT,
  level TEXT,
  control TEXT,
  basic TEXT,
  hbcu TEXT,
  flagship TEXT,
  long_x REAL,
  lat_y REAL,
  site TEXT,
  student_count INTEGER,
  awards_per_value REAL,
  awards_per_state_value REAL,
  awards_per_natl_value REAL,
  exp_award_value INTEGER,
  exp_award_state_value INTEGER,
  exp_award_natl_value INTEGER,
  exp_award_percentile INTEGER,
  ft_pct REAL,
  fte_value INTEGER,
  fte_percentile INTEGER,
  med_sat_value TEXT,
  med_sat_percentile TEXT,
  aid_value INTEGER,
  aid_percentile INTEGER,
  endow_value TEXT,
  endow_percentile TEXT,
  grad_100_value REAL,
  grad_100_percentile INTEGER,
  grad_150_value REAL,
  grad_150_percentile INTEGER,
  pell_value REAL,
  pell_percentile INTEGER,
  retain_value REAL,
  retain_percentile INTEGER,
  ft_fac_value REAL,
  ft_fac_percentile INTEGER,
  vsa_year TEXT,
  vsa_grad_after4_first TEXT,
  vsa_grad_elsewhere_after4_first TEXT,
  vsa_enroll_after4_first TEXT,
  vsa_enroll_elsewhere_after4_first TEXT,
  vsa_grad_after6_first TEXT,
  vsa_grad_elsewhere_after6_first TEXT,
  vsa_enroll_after6_first TEXT,
  vsa_enroll_elsewhere_after6_first TEXT,
  vsa_grad_after4_transfer TEXT,
  vsa_grad_elsewhere_after4_transfer TEXT,
  vsa_enroll_after4_transfer TEXT,
  vsa_enroll_elsewhere_after4_transfer TEXT,
  vsa_grad_after6_transfer TEXT,
  vsa_grad_elsewhere_after6_transfer TEXT,
  vsa_enroll_after6_transfer TEXT,
  vsa_enroll_elsewhere_after6_transfer TEXT,
  similar TEXT,
  state_sector_ct INTEGER,
  carnegie_ct INTEGER,
  counted_pct TEXT,
  nicknames TEXT,
  cohort_size INTEGER
);
Sample rows from `institution_details`:
100654, Alabama A&M University, Normal, Alabama, 4-year, Public, Masters Colleges and Universities--larger programs, X, NULL, -86.568502, 34.783368, www.aamu.edu/, 4051, 14.2, 18.8, 21.5, 105331, 75743, 66436, 90, 93.8, 3906, 33, 823, 0, 7142, 72, NULL, NULL, 10.0, 15, 29.1, 14, 71.2, 98, 63.1, 17, 82.8, 89, 2010, 14.7, 2, 36.5, 16.1, 33, 5.3, 12.5, 14.6, 15.7, 1.5, 40.9, 17.2, 36.4, 5.6, 17.2, 11.1, 232937|100724|405997|113607|139533|144005|228501|101480|131876|144759|419509|176479|243197|228529|372222|228431|206695|139366|159993|224147, 13, 386, 99.7|07, NULL, 882
100663, University of Alabama at Birmingham, Birmingham, Alabama, 4-year, Public, Research Universities--very high research activity, NULL, NULL, -86.80917, 33.50223, www.uab.edu, 11502, 20.9, 18.8, 21.5, 136546, 75743, 66436, 97, 72.7, 10032, 67, 1146, 84, 6088, 50, 24136, 93, 29.4, 67, 53.5, 66, 35.1, 39, 80.2, 70, 92.4, 98, 2011, 22.3, 2.9, 34.2, 19.2, 42.6, 10.5, 7.9, 13.1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 196060|180461|201885|145600|209542|236939|126818|230764|104151|104179|157085|171100|153603|141574|155317|110714|137351|126562|243780|196088, 13, 106, 56.0|07, UAB, 1376
100690, Amridge University, Montgomery, Alabama, 4-year, Private not-for-profit, Baccalaureate Colleges--Arts & Sciences, NULL, NULL, -86.17401, 32.362609, www.amridgeuniversity.edu, 322, 29.9, 17.8, 22.5, 58414, 92268, 101725, 30, 62.7, 294, 12, NULL, NULL, 2540, 1, 302, 1, 0.0, 0, 66.7, 72, 68.4, 91, 37.5, 2, 67.2, 71, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 217925|441511|205124|247825|197647|221856|135364|117575|164207|193070|199315|166054|367893|183804|439701|193052|197744|193247|137777|176789, 16, 252, 100.0|07, NULL, 3

CREATE TABLE `institution_grads` (
  unitid INTEGER REFERENCES institution_details(unitid),
  year INTEGER,
  gender TEXT,
  race TEXT,
  cohort TEXT,
  grad_cohort TEXT,
  grad_100 TEXT,
  grad_150 TEXT,
  grad_100_rate TEXT,
  grad_150_rate TEXT
);
Sample rows from `institution_grads`:
100760, 2011, B, X, 2y all, 446, 73, 105, 16.4, 23.5
100760, 2011, M, X, 2y all, 185, NULL, 40, NULL, 21.6
100760, 2011, F, X, 2y all, 261, NULL, 65, NULL, 24.9

CREATE TABLE `state_sector_grads` (
  stateid INTEGER REFERENCES state_sector_details(stateid),
  state TEXT REFERENCES institution_details(state),
  state_abbr TEXT,
  control TEXT,
  level TEXT,
  year INTEGER,
  gender TEXT,
  race TEXT,
  cohort TEXT,
  grad_cohort TEXT,
  grad_100 TEXT,
  grad_150 TEXT,
  grad_100_rate TEXT,
  grad_150_rate TEXT,
  grad_cohort_ct INTEGER
);
Sample rows from `state_sector_grads`:
1, Alabama, AL, Private for-profit, 4-year, 2011, B, A, 4y bach, 0, 0, 0, NULL, NULL, 9
1, Alabama, AL, Private for-profit, 4-year, 2011, B, Ai, 4y bach, 1, 0, 0, 0, 0, 9
1, Alabama, AL, Private for-profit, 4-year, 2011, B, B, 4y bach, 51, 2, 3, 3.9, 5.9, 9

CREATE TABLE `state_sector_details` (
  stateid INTEGER PRIMARY KEY,
  state TEXT REFERENCES institution_details(state),
  state_post TEXT,
  level TEXT PRIMARY KEY,
  control TEXT PRIMARY KEY,
  schools_count INTEGER,
  counted_pct TEXT,
  awards_per_state_value TEXT,
  awards_per_natl_value REAL,
  exp_award_state_value TEXT,
  exp_award_natl_value INTEGER,
  state_appr_value TEXT,
  state_appr_rank TEXT,
  grad_rate_rank TEXT,
  awards_per_rank TEXT
);
Sample rows from `state_sector_details`:
0, United States, U.S., 4-year, Public, 632, NULL, NULL, 21.5, NULL, 66436, NULL, NULL, 23, NULL
0, United States, U.S., 4-year, Private not-for-profit, 1180, NULL, NULL, 22.5, NULL, 101725, NULL, NULL, 18, NULL
0, United States, U.S., 4-year, Private for-profit, 527, NULL, NULL, 24.6, NULL, 38763, NULL, NULL, 8, NULL

","institution_details, institution_grads","institution_details.chronname, institution_grads.unitid, institution_details.unitid, institution_grads.year, institution_grads.gender, institution_grads.race, institution_grads.grad_150"
image_and_language,"Indicating the bounding box of ""kitchen"" in image id 250.","SELECT t1.x, t1.y, t1.w, t1.h FROM img_obj as t1 inner JOIN OBJ_CLasSES as t2 ON t1.OBJ_CLasS_ID = t2.OBJ_CLasS_ID whERE t1.img_id = 250 AND t2.OBJ_CLasS = 'kitchen'","CREATE TABLE `img_obj` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `img_obj`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `OBJ_CLasSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLasSES`:
0, awning
1, goggles
2, dot

","CREATE TABLE `ATT_CLASSES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `ATT_CLASSES`:
0, building s
1, indoors
2, cluttered

CREATE TABLE `OBJ_CLASSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLASSES`:
0, awning
1, goggles
2, dot

CREATE TABLE `IMG_OBJ` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `IMG_OBJ`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `IMG_OBJ_ATT` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_OBJ_ATT`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `PRED_CLASSES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `PRED_CLASSES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `IMG_REL` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_REL`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

","img_obj, OBJ_CLasSES","img_obj.x, img_obj.y, img_obj.w, img_obj.h, img_obj.OBJ_CLasS_ID, OBJ_CLasSES.OBJ_CLasS_ID, img_obj.img_id, OBJ_CLasSES.OBJ_CLasS"
airline,How many airports have a code starting with the letter C?,SELECT COUNT(*) FROM airports WHERE code LIKE 'C%',"CREATE TABLE `airports` (
  Code TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `airports`:
01A, Afognak Lake, AK: Afognak Lake Airport
03A, Granite Mountain, AK: Bear Creek Mining Strip
04A, Lik, AK: Lik Mining Camp

","CREATE TABLE `Air Carriers` (
  Code INTEGER,
  Description TEXT
);
Sample rows from `Air Carriers`:
19031, Mackey International Inc.: MAC
19032, Munz Northern Airlines Inc.: XY
19033, Cochise Airlines Inc.: COC

CREATE TABLE `Airports` (
  Code TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `Airports`:
01A, Afognak Lake, AK: Afognak Lake Airport
03A, Granite Mountain, AK: Bear Creek Mining Strip
04A, Lik, AK: Lik Mining Camp

CREATE TABLE `Airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `Airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

",airports,code
retails,List the country name of the customers in the building marketing segment with an account balance greater than 80% of the average account balance of all customers.,SELECT t2.n_name FROM customer as t1 inner JOIN nation as t2 ON t1.c_nationkey = t2.n_nationkey inner JOIN ( SELECT AVG(c_acctbal) * 0.8 as avg_acctbal FROM customer ) as t3 WHERE t1.c_acctbal > t3.avg_acctbal,"CREATE TABLE `customer` (
  c_custkey INTEGER,
  c_mktsegment TEXT,
  c_nationkey INTEGER REFERENCES nation(n_nationkey),
  c_name TEXT,
  c_address TEXT,
  c_phone TEXT,
  c_acctbal REAL,
  c_comment TEXT
);
Sample rows from `customer`:
1, BUILDING, 8, Customer#000000001, KwX3hMHjZ6, 937-241-3198, 3560.03, ironic excuses detect slyly silent requests. requests according to the exc
2, MACHINERY, 16, Customer#000000002, ioUn,eqTTXOdo, 906-965-7556, 7550.21, final express accounts mold slyly. ironic accounts cajole! quickly express a
3, FURNITURE, 11, Customer#000000003, YddJqmIdouNT9Yj, 328-750-7603, -926.96, carefully express foxes sleep carefully. pending platelets sleep thinly for t

CREATE TABLE `nation` (
  n_nationkey INTEGER,
  n_name TEXT,
  n_regionkey INTEGER REFERENCES region(r_regionkey),
  n_comment TEXT
);
Sample rows from `nation`:
0, ALGERIA, 0, slyly express pinto beans cajole idly. deposits use blithely unusual packages? fluffily final accounts x-r
1, ARGENTINA, 1, instructions detect blithely stealthily pending packages
2, BRAZIL, 1, blithely unusual deposits are quickly--

","CREATE TABLE `customer` (
  c_custkey INTEGER,
  c_mktsegment TEXT,
  c_nationkey INTEGER REFERENCES nation(n_nationkey),
  c_name TEXT,
  c_address TEXT,
  c_phone TEXT,
  c_acctbal REAL,
  c_comment TEXT
);
Sample rows from `customer`:
1, BUILDING, 8, Customer#000000001, KwX3hMHjZ6, 937-241-3198, 3560.03, ironic excuses detect slyly silent requests. requests according to the exc
2, MACHINERY, 16, Customer#000000002, ioUn,eqTTXOdo, 906-965-7556, 7550.21, final express accounts mold slyly. ironic accounts cajole! quickly express a
3, FURNITURE, 11, Customer#000000003, YddJqmIdouNT9Yj, 328-750-7603, -926.96, carefully express foxes sleep carefully. pending platelets sleep thinly for t

CREATE TABLE `lineitem` (
  l_shipdate DATE,
  l_orderkey INTEGER PRIMARY KEY REFERENCES orders(o_orderkey),
  l_discount REAL,
  l_extendedprice REAL,
  l_suppkey INTEGER REFERENCES partsupp(ps_suppkey),
  l_quantity INTEGER,
  l_returnflag TEXT,
  l_partkey INTEGER REFERENCES partsupp(ps_partkey),
  l_linestatus TEXT,
  l_tax REAL,
  l_commitdate DATE,
  l_receiptdate DATE,
  l_shipmode TEXT,
  l_linenumber INTEGER PRIMARY KEY,
  l_shipinstruct TEXT,
  l_comment TEXT
);
Sample rows from `lineitem`:
1995-08-16, 1, 0.1, 58303.08, 6296, 33, N, 98768, O, 0.06, 1995-07-12, 1995-09-14, RAIL, 1, NONE, carefully bo
1995-08-13, 1, 0.09, 16947.7, 8776, 10, N, 23771, O, 0.08, 1995-07-09, 1995-08-27, TRUCK, 2, TAKE BACK RETURN, blithely regular pac
1995-06-17, 1, 0.1, 63642.9, 3859, 34, N, 113858, O, 0.08, 1995-05-22, 1995-06-30, SHIP, 3, COLLECT COD, ironic accounts sleep furiously silen

CREATE TABLE `nation` (
  n_nationkey INTEGER,
  n_name TEXT,
  n_regionkey INTEGER REFERENCES region(r_regionkey),
  n_comment TEXT
);
Sample rows from `nation`:
0, ALGERIA, 0, slyly express pinto beans cajole idly. deposits use blithely unusual packages? fluffily final accounts x-r
1, ARGENTINA, 1, instructions detect blithely stealthily pending packages
2, BRAZIL, 1, blithely unusual deposits are quickly--

CREATE TABLE `orders` (
  o_orderdate DATE,
  o_orderkey INTEGER,
  o_custkey INTEGER REFERENCES customer(c_custkey),
  o_orderpriority TEXT,
  o_shippriority INTEGER,
  o_clerk TEXT,
  o_orderstatus TEXT,
  o_totalprice REAL,
  o_comment TEXT
);
Sample rows from `orders`:
1995-04-19, 1, 73100, 4-NOT SPECIFIED, 0, Clerk#000000916, P, 203198.56, final packages sleep blithely packa
1996-11-04, 2, 92861, 1-URGENT, 0, Clerk#000000373, O, 317719.99, final excuses about the ironic even deposits detect express request
1992-02-15, 3, 44875, 1-URGENT, 0, Clerk#000000485, F, 146674.98, final final deposits cajole foxes. blithely pendin

CREATE TABLE `part` (
  p_partkey INTEGER,
  p_type TEXT,
  p_size INTEGER,
  p_brand TEXT,
  p_name TEXT,
  p_container TEXT,
  p_mfgr TEXT,
  p_retailprice REAL,
  p_comment TEXT
);
Sample rows from `part`:
1, LARGE PLATED TIN, 31, Brand#43, burlywood plum powder puff mint, LG BAG, Manufacturer#4, 901.0, blithely busy reque
2, LARGE POLISHED STEEL, 4, Brand#55, hot spring dodger dim light, LG CASE, Manufacturer#5, 902.0, even ironic requests s
3, STANDARD PLATED COPPER, 30, Brand#53, dark slate grey steel misty, WRAP CASE, Manufacturer#5, 903.0, slyly ironic fox

CREATE TABLE `partsupp` (
  ps_partkey INTEGER PRIMARY KEY REFERENCES part(p_partkey),
  ps_suppkey INTEGER PRIMARY KEY REFERENCES supplier(s_suppkey),
  ps_supplycost REAL,
  ps_availqty INTEGER,
  ps_comment TEXT
);
Sample rows from `partsupp`:
1, 2, 400.75, 1111, carefully ironic deposits use against the carefully unusual accounts. slyly silent platelets nag quickly even
1, 2502, 702.61, 3999, slyly regular accounts serve carefully. asymptotes after the slyly even instructions cajole quickly ironic requests. pending dugouts about the slyly 
1, 5002, 383.95, 7411, carefully special ideas are slyly. slyly ironic epitaphs use pending pending foxes. furiously express pinto beans lose quiet even requests: special final packages ar

CREATE TABLE `region` (
  r_regionkey INTEGER,
  r_name TEXT,
  r_comment TEXT
);
Sample rows from `region`:
0, AFRICA, asymptotes sublate after the r
1, AMERICA, requests affix quickly final tithes. blithely even packages above the a
2, ASIA, accounts cajole carefully according to the carefully exp

CREATE TABLE `supplier` (
  s_suppkey INTEGER,
  s_nationkey INTEGER REFERENCES nation(n_nationkey),
  s_comment TEXT,
  s_name TEXT,
  s_address TEXT,
  s_phone TEXT,
  s_acctbal REAL
);
Sample rows from `supplier`:
1, 13, blithely final pearls are. instructions thra, Supplier#000000001, ,wWs4pnykQOFl8mgVCU8EZMXqZs1w, 800-807-9579, 3082.86
2, 5, requests integrate fluffily. fluffily ironic deposits wake. bold, Supplier#000000002, WkXT6MSAJrp4qWq3W9N, 348-617-6055, 3009.73
3, 22, carefully express ideas shall have to unwin, Supplier#000000003, KjUqa42JEHaRDVQTHV6Yq2h, 471-986-9888, 9159.78

","customer, nation","nation.n_name, customer.c_nationkey, nation.n_nationkey, c_acctbal, customer.c_acctbal"
soccer_2016,What year was R Dravid born and the role he played?,"SELECT t1.dob, t3.role_desc FROM player as t1 inner JOIN player_Match as t2 ON t1.player_Id = t2.player_Id inner JOIN rolee as t3 ON t2.role_id = t3.role_id WHERE t1.player_Name = 'R Dravid' GROUP BY t1.dob, t3.role_desc","CREATE TABLE `player` (
  Player_Id INTEGER,
  Player_Name TEXT,
  DOB DATE,
  Batting_hand INTEGER REFERENCES Batting_Style(Batting_Id),
  Bowling_skill INTEGER REFERENCES Bowling_Style(Bowling_Id),
  Country_Name INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `player`:
1, SC Ganguly, 1972-07-08, 1, 1, 1
2, BB McCullum, 1981-09-27, 2, 1, 4
3, RT Ponting, 1974-12-19, 2, 1, 5

CREATE TABLE `player_Match` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Player_Id INTEGER PRIMARY KEY REFERENCES Player(Player_Id),
  Role_Id INTEGER PRIMARY KEY REFERENCES Rolee(Role_Id),
  Team_Id INTEGER REFERENCES Team(Team_Id)
);
Sample rows from `player_Match`:
335987, 1, 1, 1
335987, 2, 3, 1
335987, 3, 3, 1

CREATE TABLE `rolee` (
  Role_Id INTEGER,
  Role_Desc TEXT
);
Sample rows from `rolee`:
1, Captain
2, Keeper
3, Player

","CREATE TABLE `Batting_Style` (
  Batting_Id INTEGER,
  Batting_hand TEXT
);
Sample rows from `Batting_Style`:
1, Left-hand bat
2, Right-hand bat

CREATE TABLE `Bowling_Style` (
  Bowling_Id INTEGER,
  Bowling_skill TEXT
);
Sample rows from `Bowling_Style`:
1, Right-arm medium
2, Right-arm offbreak
3, Right-arm fast-medium

CREATE TABLE `City` (
  City_Id INTEGER,
  City_Name TEXT,
  Country_id INTEGER
);
Sample rows from `City`:
1, Bangalore, 1
2, Chandigarh, 1
3, Delhi, 1

CREATE TABLE `Country` (
  Country_Id INTEGER REFERENCES Country(Country_Id),
  Country_Name TEXT
);
Sample rows from `Country`:
1, India
2, South Africa
3, U.A.E

CREATE TABLE `Extra_Type` (
  Extra_Id INTEGER,
  Extra_Name TEXT
);
Sample rows from `Extra_Type`:
1, legbyes
2, wides
3, byes

CREATE TABLE `Extra_Runs` (
  Match_Id INTEGER PRIMARY KEY,
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Extra_Type_Id INTEGER REFERENCES Extra_Type(Extra_Id),
  Extra_Runs INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Extra_Runs`:
335987, 1, 1, 1, 1, 1
335987, 1, 2, 2, 1, 2
335987, 1, 3, 2, 1, 1

CREATE TABLE `Out_Type` (
  Out_Id INTEGER,
  Out_Name TEXT
);
Sample rows from `Out_Type`:
1, caught
2, bowled
3, run out

CREATE TABLE `Outcome` (
  Outcome_Id INTEGER,
  Outcome_Type TEXT
);
Sample rows from `Outcome`:
1, Result
2, No Result
3, Superover

CREATE TABLE `Player` (
  Player_Id INTEGER,
  Player_Name TEXT,
  DOB DATE,
  Batting_hand INTEGER REFERENCES Batting_Style(Batting_Id),
  Bowling_skill INTEGER REFERENCES Bowling_Style(Bowling_Id),
  Country_Name INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Player`:
1, SC Ganguly, 1972-07-08, 1, 1, 1
2, BB McCullum, 1981-09-27, 2, 1, 4
3, RT Ponting, 1974-12-19, 2, 1, 5

CREATE TABLE `Rolee` (
  Role_Id INTEGER,
  Role_Desc TEXT
);
Sample rows from `Rolee`:
1, Captain
2, Keeper
3, Player

CREATE TABLE `Season` (
  Season_Id INTEGER,
  Man_of_the_Series INTEGER,
  Orange_Cap INTEGER,
  Purple_Cap INTEGER,
  Season_Year INTEGER
);
Sample rows from `Season`:
1, 32, 100, 102, 2008
2, 53, 18, 61, 2009
3, 133, 133, 131, 2010

CREATE TABLE `Team` (
  Team_Id INTEGER,
  Team_Name TEXT
);
Sample rows from `Team`:
1, Kolkata Knight Riders
2, Royal Challengers Bangalore
3, Chennai Super Kings

CREATE TABLE `Toss_Decision` (
  Toss_Id INTEGER,
  Toss_Name TEXT
);
Sample rows from `Toss_Decision`:
1, field
2, bat

CREATE TABLE `Umpire` (
  Umpire_Id INTEGER,
  Umpire_Name TEXT,
  Umpire_Country INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Umpire`:
1, Asad Rauf, 6
2, MR Benson, 10
3, Aleem Dar, 6

CREATE TABLE `Venue` (
  Venue_Id INTEGER,
  Venue_Name TEXT,
  City_Id INTEGER REFERENCES City(City_Id)
);
Sample rows from `Venue`:
1, M Chinnaswamy Stadium, 1
2, Punjab Cricket Association Stadium, 2
3, Feroz Shah Kotla, 3

CREATE TABLE `Win_By` (
  Win_Id INTEGER,
  Win_Type TEXT
);
Sample rows from `Win_By`:
1, runs
2, wickets
3, NO Result

CREATE TABLE `Match` (
  Match_Id INTEGER,
  Team_1 INTEGER REFERENCES Team(Team_Id),
  Team_2 INTEGER REFERENCES Team(Team_Id),
  Match_Date DATE,
  Season_Id INTEGER REFERENCES Season(Season_Id),
  Venue_Id INTEGER REFERENCES Venue(Venue_Id),
  Toss_Winner INTEGER REFERENCES Team(Team_Id),
  Toss_Decide INTEGER REFERENCES Toss_Decision(Toss_Id),
  Win_Type INTEGER REFERENCES Win_By(Win_Id),
  Win_Margin INTEGER,
  Outcome_type INTEGER REFERENCES Out_Type(Out_Id),
  Match_Winner INTEGER REFERENCES Team(Team_Id),
  Man_of_the_Match INTEGER REFERENCES Player(Player_Id)
);
Sample rows from `Match`:
335987, 2, 1, 2008-04-18, 1, 1, 2, 1, 1, 140, 1, 1, 2
335988, 4, 3, 2008-04-19, 1, 2, 3, 2, 1, 33, 1, 3, 19
335989, 6, 5, 2008-04-19, 1, 3, 5, 2, 2, 9, 1, 6, 90

CREATE TABLE `Ball_by_Ball` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Innings_No INTEGER PRIMARY KEY,
  Team_Batting INTEGER,
  Team_Bowling INTEGER,
  Striker_Batting_Position INTEGER,
  Striker INTEGER,
  Non_Striker INTEGER,
  Bowler INTEGER
);
Sample rows from `Ball_by_Ball`:
335987, 1, 1, 1, 1, 2, 1, 1, 2, 14
335987, 1, 1, 2, 2, 1, 1, 6, 7, 106
335987, 1, 2, 1, 1, 2, 2, 2, 1, 14

CREATE TABLE `Batsman_Scored` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Runs_Scored INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Batsman_Scored`:
335987, 1, 1, 0, 1
335987, 1, 1, 1, 2
335987, 1, 2, 0, 1

CREATE TABLE `Player_Match` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Player_Id INTEGER PRIMARY KEY REFERENCES Player(Player_Id),
  Role_Id INTEGER PRIMARY KEY REFERENCES Rolee(Role_Id),
  Team_Id INTEGER REFERENCES Team(Team_Id)
);
Sample rows from `Player_Match`:
335987, 1, 1, 1
335987, 2, 3, 1
335987, 3, 3, 1

CREATE TABLE `Wicket_Taken` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Player_Out INTEGER REFERENCES Player(Player_Id),
  Kind_Out INTEGER REFERENCES Out_Type(Out_Id),
  Fielders INTEGER REFERENCES Player(Player_Id),
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Wicket_Taken`:
335987, 2, 1, 6, 2, None, 2
335987, 3, 2, 8, 2, None, 2
335987, 5, 5, 9, 1, 83, 2

","player, player_Match, rolee","player.dob, rolee.role_desc, player.player_Id, player_Match.player_Id, player_Match.role_id, rolee.role_id, player.player_Name"
talkingdata,How many females use ZUK Z1 phones in the age group under 23?,SELECT COUNT(t1.device_id) fROM gender_age as t1 inner JOIN phone_brand_device_model2 as t2 ON t1.device_id = t2.device_id WHERE t1.gender = 'f' AND t2.device_model = 'Z1' AND t1.`group` = 'f23-' AND t2.phone_brand = 'ZUK',"CREATE TABLE `gender_age` (
  device_id INTEGER REFERENCES phone_brand_device_model2(device_id),
  gender TEXT,
  age INTEGER,
  group TEXT
);
Sample rows from `gender_age`:
-9221086586254644858, M, 29, M29-31
-9221079146476055829, None, None, None
-9221066489596332354, M, 31, M29-31

CREATE TABLE `phone_brand_device_model2` (
  device_id INTEGER PRIMARY KEY,
  phone_brand TEXT PRIMARY KEY,
  device_model TEXT PRIMARY KEY
);
Sample rows from `phone_brand_device_model2`:
-9223321966609553846, 小米, 红米note
-9223067244542181226, vivo, Y19T
-9223042152723782980, 小米, MI 3

","CREATE TABLE `app_all` (
  app_id INTEGER
);
Sample rows from `app_all`:
-9223281467940916832
-9222877069545393219
-9222785464897897681

CREATE TABLE `app_events` (
  event_id INTEGER PRIMARY KEY REFERENCES events(event_id),
  app_id INTEGER PRIMARY KEY,
  is_installed INTEGER,
  is_active INTEGER
);
Sample rows from `app_events`:
2, -8942695423876075857, 1, 0
2, -8022267440849930066, 1, 0
2, -5720078949152207372, 1, 0

CREATE TABLE `app_events_relevant` (
  event_id INTEGER PRIMARY KEY REFERENCES events_relevant(event_id),
  app_id INTEGER PRIMARY KEY REFERENCES app_all(app_id),
  is_installed INTEGER,
  is_active INTEGER
);
Sample rows from `app_events_relevant`:
2, -8942695423876075857, 1, 0
2, -8022267440849930066, 1, 0
2, -5720078949152207372, 1, 0

CREATE TABLE `app_labels` (
  app_id INTEGER REFERENCES app_all(app_id),
  label_id INTEGER REFERENCES label_categories(label_id)
);
Sample rows from `app_labels`:
7324884708820027918, 251
-4494216993218550286, 251
6058196446775239644, 406

CREATE TABLE `events` (
  event_id INTEGER,
  device_id INTEGER,
  timestamp DATETIME,
  longitude REAL,
  latitude REAL
);
Sample rows from `events`:
1, 29182687948017175, 2016-05-01 00:55:25.0, 121.0, 31.0
2, -6401643145415154744, 2016-05-01 00:54:12.0, 104.0, 31.0
3, -4833982096941402721, 2016-05-01 00:08:05.0, 107.0, 30.0

CREATE TABLE `events_relevant` (
  event_id INTEGER,
  device_id INTEGER REFERENCES gender_age(device_id),
  timestamp DATETIME,
  longitude REAL,
  latitude REAL
);
Sample rows from `events_relevant`:
2, None, -8942695423876075857, 1.0, 0.0
6, None, -8764672938472212518, 1.0, 1.0
7, None, -9050100410106163077, 1.0, 0.0

CREATE TABLE `gender_age` (
  device_id INTEGER REFERENCES phone_brand_device_model2(device_id),
  gender TEXT,
  age INTEGER,
  group TEXT
);
Sample rows from `gender_age`:
-9221086586254644858, M, 29, M29-31
-9221079146476055829, None, None, None
-9221066489596332354, M, 31, M29-31

CREATE TABLE `gender_age_test` (
  device_id INTEGER
);
Sample rows from `gender_age_test`:
-9223321966609553846
-9223042152723782980
-9222896629442493034

CREATE TABLE `gender_age_train` (
  device_id INTEGER,
  gender TEXT,
  age INTEGER,
  group TEXT
);
Sample rows from `gender_age_train`:
-9223067244542181226, M, 24, M23-26
-9222956879900151005, M, 36, M32-38
-9222754701995937853, M, 29, M29-31

CREATE TABLE `label_categories` (
  label_id INTEGER,
  category TEXT
);
Sample rows from `label_categories`:
1, None
2, game-game type
3, game-Game themes

CREATE TABLE `phone_brand_device_model2` (
  device_id INTEGER PRIMARY KEY,
  phone_brand TEXT PRIMARY KEY,
  device_model TEXT PRIMARY KEY
);
Sample rows from `phone_brand_device_model2`:
-9223321966609553846, 小米, 红米note
-9223067244542181226, vivo, Y19T
-9223042152723782980, 小米, MI 3

CREATE TABLE `sample_submission` (
  device_id INTEGER,
  F23- REAL,
  F24-26 REAL,
  F27-28 REAL,
  F29-32 REAL,
  F33-42 REAL,
  F43+ REAL,
  M22- REAL,
  M23-26 REAL,
  M27-28 REAL,
  M29-31 REAL,
  M32-38 REAL,
  M39+ REAL
);
Sample rows from `sample_submission`:
-9223321966609553846, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833
-9223042152723782980, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833
-9222896629442493034, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833

","gender_age, phone_brand_device_model2","gender_age.device_id, phone_brand_device_model2.device_id, gender_age.gender, phone_brand_device_model2.device_model, gender_age.group, phone_brand_device_model2.phone_brand"
law_episode,List out all award titles nominated for episode 20.,"SELECT t2.award FROM episode as t1 inner JOIN award as t2 ON t1.episode_id = t2.episode_id WHERE t1.episode = 20 AND t2.result IN ('Winner', 'Nominee')","CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  series TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  person_id TEXT REFERENCES Person(person_id),
  role TEXT,
  result TEXT
);
Sample rows from `award`:
258, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0937725, None, Winner
259, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0792309, None, Winner
260, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0049569, None, Winner

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
tt0629239, nun
tt0629239, priest
tt0629420, police officer

CREATE TABLE `Person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  series TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  person_id TEXT REFERENCES Person(person_id),
  role TEXT,
  result TEXT
);
Sample rows from `Award`:
258, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0937725, None, Winner
259, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0792309, None, Winner
260, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0049569, None, Winner

CREATE TABLE `Credit` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  person_id TEXT PRIMARY KEY REFERENCES Person(person_id),
  category TEXT,
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
tt0629204, nm0226352, Additional Crew, technical advisor, true
tt0629204, nm0506974, Additional Crew, production accountant, true
tt0629204, nm4103116, Additional Crew, production accountant, true

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
tt0629204, 10, 36, 17.7
tt0629204, 9, 39, 19.2
tt0629204, 8, 64, 31.5

","episode, award","award.award, episode.episode_id, award.episode_id, episode.episode, award.result"
cs_semester,Which student failed the course Intro to Database 2? Please give his or her full name.,"SELECT t1.f_name, t1.l_name FROM student as t1 inner JOIN registration as t2 ON t1.student_id = t2.student_id inner JOIN course as t3 ON t2.course_id = t3.course_id WHERE t2.grade is null AND t3.name = 'Intro to Database 2'","CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

","CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

CREATE TABLE `prof` (
  prof_id INTEGER,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  popularity INTEGER,
  teachingability INTEGER,
  graduate_from TEXT
);
Sample rows from `prof`:
1, Male, Nathaniel, Pigford, npigford0@hku.hk, 3, 5, University of Washington
2, Male, Zhihua, Zhou, zzhihua@hku.hk, 2, 1, Beijing Polytechnic University
3, Male, Ogdon, Zywicki, ozywicki2@hku.hk, 2, 2, University of Boston

CREATE TABLE `RA` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `RA`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

","student, registration, course","student.f_name, student.l_name, student.student_id, registration.student_id, registration.course_id, course.course_id, registration.grade, course.name"
law_episode,"Which episode was nominated for the award for ""Outstanding Costume Design for a Series""?",SELECT t2.title FROM award as t1 inner JOIN episode as t2 ON t1.episode_id = t2.episode_id WHERE t1.award = 'Outstanding Costume Design for a Series',"CREATE TABLE `award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  series TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  person_id TEXT REFERENCES Person(person_id),
  role TEXT,
  result TEXT
);
Sample rows from `award`:
258, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0937725, None, Winner
259, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0792309, None, Winner
260, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0049569, None, Winner

CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
tt0629239, nun
tt0629239, priest
tt0629420, police officer

CREATE TABLE `Person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  series TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  person_id TEXT REFERENCES Person(person_id),
  role TEXT,
  result TEXT
);
Sample rows from `Award`:
258, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0937725, None, Winner
259, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0792309, None, Winner
260, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0049569, None, Winner

CREATE TABLE `Credit` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  person_id TEXT PRIMARY KEY REFERENCES Person(person_id),
  category TEXT,
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
tt0629204, nm0226352, Additional Crew, technical advisor, true
tt0629204, nm0506974, Additional Crew, production accountant, true
tt0629204, nm4103116, Additional Crew, production accountant, true

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
tt0629204, 10, 36, 17.7
tt0629204, 9, 39, 19.2
tt0629204, 8, 64, 31.5

","award, episode","episode.title, award.episode_id, episode.episode_id, award.award"
movies_4,"How many producers does the movie ""The Amityville Horror"" have?",SELECT COUNT(t2.person_id) FROM movie as t1 inner JOIN movie_crew as t2 ON t1.movie_id = t2.movie_id WHERE t1.title = 'The Amityville Horror' AND t2.job = 'Producer',"CREATE TABLE `movie` (
  movie_id INTEGER,
  title TEXT,
  budget INTEGER,
  homepage TEXT,
  overview TEXT,
  popularity REAL,
  release_date DATE,
  revenue INTEGER,
  runtime INTEGER,
  movie_status TEXT,
  tagline TEXT,
  vote_average REAL,
  vote_count INTEGER
);
Sample rows from `movie`:
5, Four Rooms, 4000000, , It's Ted the Bellhop's first night on the job...and the hotel's very unusual guests are about to place him in some outrageous predicaments. It seems that this evening's room service is serving up one unbelievable happening after another., 22.87623, 1995-12-09, 4300000, 98, Released, Twelve outrageous guests. Four scandalous requests. And one lone bellhop, in his first day on the job, who's in for the wildest New year's Eve of his life., 6.5, 530
11, Star Wars, 11000000, http://www.starwars.com/films/star-wars-episode-iv-a-new-hope, Princess Leia is captured and held hostage by the evil Imperial forces in their effort to take over the galactic Empire. Venturesome Luke Skywalker and dashing captain Han Solo team together with the loveable robot duo R2-D2 and C-3PO to rescue the beauti, 126.393695, 1977-05-25, 775398007, 121, Released, A long time ago in a galaxy far, far away..., 8.1, 6624
12, Finding Nemo, 94000000, http://movies.disney.com/finding-nemo, Nemo, an adventurous young clownfish, is unexpectedly taken from his Great Barrier Reef home to a dentist's office aquarium. It's up to his worrisome father Marlin and a friendly but forgetful fish Dory to bring Nemo home -- meeting vegetarian sharks, sur, 85.688789, 2003-05-30, 940335536, 100, Released, There are 3.7 trillion fish in the ocean, they're looking for one., 7.6, 6122

CREATE TABLE `movie_crew` (
  movie_id INTEGER REFERENCES movie(movie_id),
  person_id INTEGER REFERENCES person(person_id),
  department_id INTEGER REFERENCES department(department_id),
  job TEXT
);
Sample rows from `movie_crew`:
285, 120, 1, Director of Photography
285, 1704, 2, Director
285, 770, 3, Producer

","CREATE TABLE `country` (
  country_id INTEGER,
  country_iso_code TEXT,
  country_name TEXT
);
Sample rows from `country`:
128, AE, United Arab Emirates
129, AF, Afghanistan
130, AO, Angola

CREATE TABLE `department` (
  department_id INTEGER,
  department_name TEXT
);
Sample rows from `department`:
1, Camera
2, Directing
3, Production

CREATE TABLE `gender` (
  gender_id INTEGER,
  gender TEXT
);
Sample rows from `gender`:
0, Unspecified
1, Female
2, Male

CREATE TABLE `genre` (
  genre_id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
12, Adventure
14, Fantasy
16, Animation

CREATE TABLE `keyword` (
  keyword_id INTEGER,
  keyword_name TEXT
);
Sample rows from `keyword`:
30, individual
65, holiday
74, germany

CREATE TABLE `language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `language`:
24574, en, English
24575, sv, svenska
24576, de, Deutsch

CREATE TABLE `language_role` (
  role_id INTEGER,
  language_role TEXT
);
Sample rows from `language_role`:
1, Original
2, Spoken

CREATE TABLE `movie` (
  movie_id INTEGER,
  title TEXT,
  budget INTEGER,
  homepage TEXT,
  overview TEXT,
  popularity REAL,
  release_date DATE,
  revenue INTEGER,
  runtime INTEGER,
  movie_status TEXT,
  tagline TEXT,
  vote_average REAL,
  vote_count INTEGER
);
Sample rows from `movie`:
5, Four Rooms, 4000000, , It's Ted the Bellhop's first night on the job...and the hotel's very unusual guests are about to place him in some outrageous predicaments. It seems that this evening's room service is serving up one unbelievable happening after another., 22.87623, 1995-12-09, 4300000, 98, Released, Twelve outrageous guests. Four scandalous requests. And one lone bellhop, in his first day on the job, who's in for the wildest New year's Eve of his life., 6.5, 530
11, Star Wars, 11000000, http://www.starwars.com/films/star-wars-episode-iv-a-new-hope, Princess Leia is captured and held hostage by the evil Imperial forces in their effort to take over the galactic Empire. Venturesome Luke Skywalker and dashing captain Han Solo team together with the loveable robot duo R2-D2 and C-3PO to rescue the beauti, 126.393695, 1977-05-25, 775398007, 121, Released, A long time ago in a galaxy far, far away..., 8.1, 6624
12, Finding Nemo, 94000000, http://movies.disney.com/finding-nemo, Nemo, an adventurous young clownfish, is unexpectedly taken from his Great Barrier Reef home to a dentist's office aquarium. It's up to his worrisome father Marlin and a friendly but forgetful fish Dory to bring Nemo home -- meeting vegetarian sharks, sur, 85.688789, 2003-05-30, 940335536, 100, Released, There are 3.7 trillion fish in the ocean, they're looking for one., 7.6, 6122

CREATE TABLE `movie_genres` (
  movie_id INTEGER REFERENCES movie(movie_id),
  genre_id INTEGER REFERENCES genre(genre_id)
);
Sample rows from `movie_genres`:
5, 35
5, 80
11, 12

CREATE TABLE `movie_languages` (
  movie_id INTEGER REFERENCES movie(movie_id),
  language_id INTEGER REFERENCES language(language_id),
  language_role_id INTEGER REFERENCES language_role(role_id)
);
Sample rows from `movie_languages`:
5, 24574, 2
11, 24574, 2
12, 24574, 2

CREATE TABLE `person` (
  person_id INTEGER,
  person_name TEXT
);
Sample rows from `person`:
1, George Lucas
2, Mark Hamill
3, Harrison Ford

CREATE TABLE `movie_crew` (
  movie_id INTEGER REFERENCES movie(movie_id),
  person_id INTEGER REFERENCES person(person_id),
  department_id INTEGER REFERENCES department(department_id),
  job TEXT
);
Sample rows from `movie_crew`:
285, 120, 1, Director of Photography
285, 1704, 2, Director
285, 770, 3, Producer

CREATE TABLE `production_company` (
  company_id INTEGER,
  company_name TEXT
);
Sample rows from `production_company`:
1, Lucasfilm
2, Walt Disney Pictures
3, Pixar Animation Studios

CREATE TABLE `production_country` (
  movie_id INTEGER REFERENCES movie(movie_id),
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `production_country`:
5, 214
11, 214
12, 214

CREATE TABLE `movie_cast` (
  movie_id INTEGER REFERENCES movie(movie_id),
  person_id INTEGER REFERENCES person(person_id),
  character_name TEXT,
  gender_id INTEGER REFERENCES gender(gender_id),
  cast_order INTEGER
);
Sample rows from `movie_cast`:
285, 85, Captain Jack Sparrow, 2, 0
285, 114, Will Turner, 2, 1
285, 116, Elizabeth Swann, 1, 2

CREATE TABLE `movie_keywords` (
  movie_id INTEGER REFERENCES movie(None),
  keyword_id INTEGER REFERENCES keyword(None)
);
Sample rows from `movie_keywords`:
5, 612
5, 613
5, 616

CREATE TABLE `movie_company` (
  movie_id INTEGER REFERENCES movie(None),
  company_id INTEGER REFERENCES production_company(None)
);
Sample rows from `movie_company`:
5, 14
5, 59
11, 1

","movie, movie_crew","movie_crew.person_id, movie.movie_id, movie_crew.movie_id, movie.title, movie_crew.job"
movielens,"For different directors who direct well, how many of them have directed an action film?",SELECT COUNT(DISTINCT t2.directorid) FROM movies2directors as t2 inner JOIN directors as t3 ON t2.directorid = t3.directorid WHERE t2.genre = 'Action' AND t3.d_quality = 4,"CREATE TABLE `movies2directors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  directorid INTEGER PRIMARY KEY REFERENCES directors(None),
  genre TEXT
);
Sample rows from `movies2directors`:
1672111, 54934, Action
1672946, 188940, Action
1679461, 179783, Action

CREATE TABLE `directors` (
  directorid INTEGER,
  d_quality INTEGER PRIMARY KEY,
  avg_revenue INTEGER PRIMARY KEY
);
Sample rows from `directors`:
67, 4, 1
92, 2, 3
284, 4, 0

","CREATE TABLE `users` (
  userid INTEGER,
  age TEXT,
  u_gender TEXT,
  occupation TEXT
);
Sample rows from `users`:
1, 1, F, 2
2, 56, M, 3
3, 25, M, 2

CREATE TABLE `directors` (
  directorid INTEGER,
  d_quality INTEGER PRIMARY KEY,
  avg_revenue INTEGER PRIMARY KEY
);
Sample rows from `directors`:
67, 4, 1
92, 2, 3
284, 4, 0

CREATE TABLE `actors` (
  actorid INTEGER,
  a_gender TEXT,
  a_quality INTEGER
);
Sample rows from `actors`:
4, M, 4
16, M, 0
28, M, 4

CREATE TABLE `movies` (
  movieid INTEGER,
  year INTEGER,
  isEnglish TEXT,
  country TEXT,
  runningtime INTEGER
);
Sample rows from `movies`:
1672052, 3, T, other, 2
1672111, 4, T, other, 2
1672580, 4, T, USA, 3

CREATE TABLE `movies2actors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  actorid INTEGER PRIMARY KEY REFERENCES actors(None),
  cast_num INTEGER
);
Sample rows from `movies2actors`:
1672580, 981535, 0
1672946, 1094968, 0
1673647, 149985, 0

CREATE TABLE `movies2directors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  directorid INTEGER PRIMARY KEY REFERENCES directors(None),
  genre TEXT
);
Sample rows from `movies2directors`:
1672111, 54934, Action
1672946, 188940, Action
1679461, 179783, Action

CREATE TABLE `u2base` (
  userid INTEGER PRIMARY KEY REFERENCES users(None),
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  rating TEXT
);
Sample rows from `u2base`:
2, 1964242, 1
2, 2219779, 1
3, 1856939, 1

","movies2directors, directors","movies2directors.directorid, directors.directorid, movies2directors.genre, directors.d_quality"
university,"Among the universities with over 20000 students in 2011, how many of them have an international students percentage of over 25% in the same year?",SELECT COUNT(*) FROM university_year WHERE year = 2011 AND pct_international_students > 25 AND num_students > 20000,"CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

","CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

CREATE TABLE `ranking_system` (
  id INTEGER,
  system_name TEXT
);
Sample rows from `ranking_system`:
1, Times Higher Education World University Ranking
2, Shanghai Ranking
3, Center for World University Rankings

CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

",university_year,"pct_international_students, num_students"
superstore,What product category that Sam Craven ordered from the central and east superstore?,SELECT DISTINCT t3.category FROM east_superstore as t1 inner JOIN people as t2 ON t1.`customer id` = t2.`customer id` inner JOIN product as t3 ON t3.`product id` = t1.`product id` left JOIN central_superstore as t4 ON t3.`product id` = t4.`product id` WHERE t2.`customer name` = 'Sam Craven',"CREATE TABLE `east_superstore` (
  Row ID INTEGER,
  Order ID TEXT,
  Order Date DATE,
  Ship Date DATE,
  Ship Mode TEXT,
  Customer ID TEXT REFERENCES people(Customer ID),
  Region TEXT REFERENCES product(Region) REFERENCES people(Region),
  Product ID TEXT REFERENCES product(Product ID),
  Sales REAL,
  Quantity INTEGER,
  Discount REAL,
  Profit REAL
);
Sample rows from `east_superstore`:
4647, CA-2011-141817, 2013-01-05, 2013-01-12, Standard Class, MB-18085, East, OFF-AR-10003478, 19.536, 3, 0.2, 4.884
4648, CA-2011-130092, 2013-01-11, 2013-01-14, First Class, SV-20365, East, FUR-FU-10000010, 9.94, 2, 0.0, 3.0814
4649, CA-2011-118192, 2013-01-13, 2013-01-18, Standard Class, MM-17920, East, OFF-PA-10002947, 37.408, 7, 0.2, 13.0928

CREATE TABLE `people` (
  Customer ID TEXT PRIMARY KEY,
  Customer Name TEXT,
  Segment TEXT,
  Country TEXT,
  City TEXT,
  State TEXT,
  Postal Code INTEGER,
  Region TEXT PRIMARY KEY
);
Sample rows from `people`:
AA-10315, Alex Avila, Consumer, United States, Round Rock, Texas, 78664, Central
AA-10375, Allen Armold, Consumer, United States, Omaha, Nebraska, 68104, Central
AA-10480, Andrew Allen, Consumer, United States, Springfield, Missouri, 65807, Central

CREATE TABLE `product` (
  Product ID TEXT PRIMARY KEY,
  Product Name TEXT,
  Category TEXT,
  Sub-Category TEXT,
  Region TEXT PRIMARY KEY
);
Sample rows from `product`:
FUR-BO-10000330, Sauder Camden County Barrister Bookcase, Planked Cherry Finish, Furniture, Bookcases, West
FUR-BO-10000362, Sauder Inglewood Library Bookcases, Furniture, Bookcases, West
FUR-BO-10000468, O'Sullivan 2-Shelf Heavy-Duty Bookcases, Furniture, Bookcases, West

CREATE TABLE `central_superstore` (
  Row ID INTEGER,
  Order ID TEXT,
  Order Date DATE,
  Ship Date DATE,
  Ship Mode TEXT,
  Customer ID TEXT REFERENCES people(Customer ID),
  Region TEXT REFERENCES product(Region) REFERENCES people(Region),
  Product ID TEXT REFERENCES product(Product ID),
  Sales REAL,
  Quantity INTEGER,
  Discount REAL,
  Profit REAL
);
Sample rows from `central_superstore`:
1, CA-2011-103800, 2013-01-03, 2013-01-07, Standard Class, DP-13000, Central, OFF-PA-10000174, 16.448, 2, 0.2, 5.5512
2, CA-2011-112326, 2013-01-04, 2013-01-08, Standard Class, PO-19195, Central, OFF-LA-10003223, 11.784, 3, 0.2, 4.2717
3, CA-2011-112326, 2013-01-04, 2013-01-08, Standard Class, PO-19195, Central, OFF-ST-10002743, 272.736, 3, 0.2, -64.7748

","CREATE TABLE `people` (
  Customer ID TEXT PRIMARY KEY,
  Customer Name TEXT,
  Segment TEXT,
  Country TEXT,
  City TEXT,
  State TEXT,
  Postal Code INTEGER,
  Region TEXT PRIMARY KEY
);
Sample rows from `people`:
AA-10315, Alex Avila, Consumer, United States, Round Rock, Texas, 78664, Central
AA-10375, Allen Armold, Consumer, United States, Omaha, Nebraska, 68104, Central
AA-10480, Andrew Allen, Consumer, United States, Springfield, Missouri, 65807, Central

CREATE TABLE `product` (
  Product ID TEXT PRIMARY KEY,
  Product Name TEXT,
  Category TEXT,
  Sub-Category TEXT,
  Region TEXT PRIMARY KEY
);
Sample rows from `product`:
FUR-BO-10000330, Sauder Camden County Barrister Bookcase, Planked Cherry Finish, Furniture, Bookcases, West
FUR-BO-10000362, Sauder Inglewood Library Bookcases, Furniture, Bookcases, West
FUR-BO-10000468, O'Sullivan 2-Shelf Heavy-Duty Bookcases, Furniture, Bookcases, West

CREATE TABLE `central_superstore` (
  Row ID INTEGER,
  Order ID TEXT,
  Order Date DATE,
  Ship Date DATE,
  Ship Mode TEXT,
  Customer ID TEXT REFERENCES people(Customer ID),
  Region TEXT REFERENCES product(Region) REFERENCES people(Region),
  Product ID TEXT REFERENCES product(Product ID),
  Sales REAL,
  Quantity INTEGER,
  Discount REAL,
  Profit REAL
);
Sample rows from `central_superstore`:
1, CA-2011-103800, 2013-01-03, 2013-01-07, Standard Class, DP-13000, Central, OFF-PA-10000174, 16.448, 2, 0.2, 5.5512
2, CA-2011-112326, 2013-01-04, 2013-01-08, Standard Class, PO-19195, Central, OFF-LA-10003223, 11.784, 3, 0.2, 4.2717
3, CA-2011-112326, 2013-01-04, 2013-01-08, Standard Class, PO-19195, Central, OFF-ST-10002743, 272.736, 3, 0.2, -64.7748

CREATE TABLE `east_superstore` (
  Row ID INTEGER,
  Order ID TEXT,
  Order Date DATE,
  Ship Date DATE,
  Ship Mode TEXT,
  Customer ID TEXT REFERENCES people(Customer ID),
  Region TEXT REFERENCES product(Region) REFERENCES people(Region),
  Product ID TEXT REFERENCES product(Product ID),
  Sales REAL,
  Quantity INTEGER,
  Discount REAL,
  Profit REAL
);
Sample rows from `east_superstore`:
4647, CA-2011-141817, 2013-01-05, 2013-01-12, Standard Class, MB-18085, East, OFF-AR-10003478, 19.536, 3, 0.2, 4.884
4648, CA-2011-130092, 2013-01-11, 2013-01-14, First Class, SV-20365, East, FUR-FU-10000010, 9.94, 2, 0.0, 3.0814
4649, CA-2011-118192, 2013-01-13, 2013-01-18, Standard Class, MM-17920, East, OFF-PA-10002947, 37.408, 7, 0.2, 13.0928

CREATE TABLE `south_superstore` (
  Row ID INTEGER,
  Order ID TEXT,
  Order Date DATE,
  Ship Date DATE,
  Ship Mode TEXT,
  Customer ID TEXT REFERENCES people(Customer ID),
  Region TEXT REFERENCES product(Region) REFERENCES people(Region),
  Product ID TEXT REFERENCES product(Product ID),
  Sales REAL,
  Quantity INTEGER,
  Discount REAL,
  Profit REAL
);
Sample rows from `south_superstore`:
10343, CA-2011-106054, 2013-01-06, 2013-01-07, First Class, JO-15145, South, OFF-AR-10002399, 12.78, 3, 0.0, 5.2398
10344, CA-2011-167199, 2013-01-06, 2013-01-10, Standard Class, ME-17320, South, FUR-CH-10004063, 2573.82, 9, 0.0, 746.4078
10345, CA-2011-167199, 2013-01-06, 2013-01-10, Standard Class, ME-17320, South, OFF-BI-10004632, 609.98, 2, 0.0, 274.491

CREATE TABLE `west_superstore` (
  Row ID INTEGER,
  Order ID TEXT,
  Order Date DATE,
  Ship Date DATE,
  Ship Mode TEXT,
  Customer ID TEXT REFERENCES people(Customer ID),
  Region TEXT REFERENCES product(Region) REFERENCES people(Region),
  Product ID TEXT REFERENCES product(Product ID),
  Sales REAL,
  Quantity INTEGER,
  Discount REAL,
  Profit REAL
);
Sample rows from `west_superstore`:
13583, CA-2011-130813, 2013-01-06, 2013-01-08, Second Class, LS-17230, West, OFF-PA-10002005, 19.44, 3, 0.0, 9.3312
13584, CA-2011-157147, 2013-01-13, 2013-01-18, Standard Class, BD-11605, West, OFF-ST-10000078, 1325.85, 5, 0.0, 238.653
13585, CA-2011-157147, 2013-01-13, 2013-01-18, Standard Class, BD-11605, West, FUR-BO-10003034, 333.999, 3, 0.15, 3.9294

","east_superstore, people, product, central_superstore","product.category, east_superstore.customer id, people.customer id, product.product id, east_superstore.product id, central_superstore.product id, people.customer name"
law_episode,What is the name of the actors born in the USA?,SELECT name FROM person WHERE birth_country = 'USA',"CREATE TABLE `person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
tt0629239, nun
tt0629239, priest
tt0629420, police officer

CREATE TABLE `Person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  series TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  person_id TEXT REFERENCES Person(person_id),
  role TEXT,
  result TEXT
);
Sample rows from `Award`:
258, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0937725, None, Winner
259, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0792309, None, Winner
260, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0049569, None, Winner

CREATE TABLE `Credit` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  person_id TEXT PRIMARY KEY REFERENCES Person(person_id),
  category TEXT,
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
tt0629204, nm0226352, Additional Crew, technical advisor, true
tt0629204, nm0506974, Additional Crew, production accountant, true
tt0629204, nm4103116, Additional Crew, production accountant, true

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
tt0629204, 10, 36, 17.7
tt0629204, 9, 39, 19.2
tt0629204, 8, 64, 31.5

",person,"name, birth_country"
app_store,Indicate the number of installs and include the percentage of positive sentiments of FREEDOME VPN Unlimited anonymous Wifi Security.,"SELECT t1.installs , cast(SUM(case when t2.sentiment = 'Positive' then 1 else 0 end) * 100 / SUM(case when t2.sentiment is NOT null then 1.0 else 0 end) as real) FROM playstore as t1 inner JOIN user_reviews as t2 ON t1.app = t2.app WHERE t1.app = 'FREEDOME VPN Unlimited anonymous Wifi Security'","CREATE TABLE `playstore` (
  App TEXT,
  Category TEXT,
  Rating REAL,
  Reviews INTEGER,
  Size TEXT,
  Installs TEXT,
  Type TEXT,
  Price TEXT,
  Content Rating TEXT,
  Genres TEXT
);
Sample rows from `playstore`:
Photo Editor & Candy Camera & Grid & ScrapBook, ART_AND_DESIGN, 4.1, 159, 19M, 10,000+, Free, 0, Everyone, Art & Design
Coloring book moana, ART_AND_DESIGN, 3.9, 967, 14M, 500,000+, Free, 0, Everyone, Art & Design;Pretend Play
U Launcher Lite – FREE Live Cool Themes, Hide Apps, ART_AND_DESIGN, 4.7, 87510, 8.7M, 5,000,000+, Free, 0, Everyone, Art & Design

CREATE TABLE `user_reviews` (
  App TEXT REFERENCES playstore(App),
  Translated_Review TEXT,
  Sentiment TEXT,
  Sentiment_Polarity TEXT,
  Sentiment_Subjectivity TEXT
);
Sample rows from `user_reviews`:
10 Best Foods for You, I like eat delicious food. That's I'm cooking food myself, case ""10 Best Foods"" helps lot, also ""Best Before (Shelf Life)"", Positive, 1.0, 0.5333333333333333
10 Best Foods for You, This help eating healthy exercise regular basis, Positive, 0.25, 0.28846153846153844
10 Best Foods for You, nan, nan, nan, nan

","CREATE TABLE `playstore` (
  App TEXT,
  Category TEXT,
  Rating REAL,
  Reviews INTEGER,
  Size TEXT,
  Installs TEXT,
  Type TEXT,
  Price TEXT,
  Content Rating TEXT,
  Genres TEXT
);
Sample rows from `playstore`:
Photo Editor & Candy Camera & Grid & ScrapBook, ART_AND_DESIGN, 4.1, 159, 19M, 10,000+, Free, 0, Everyone, Art & Design
Coloring book moana, ART_AND_DESIGN, 3.9, 967, 14M, 500,000+, Free, 0, Everyone, Art & Design;Pretend Play
U Launcher Lite – FREE Live Cool Themes, Hide Apps, ART_AND_DESIGN, 4.7, 87510, 8.7M, 5,000,000+, Free, 0, Everyone, Art & Design

CREATE TABLE `user_reviews` (
  App TEXT REFERENCES playstore(App),
  Translated_Review TEXT,
  Sentiment TEXT,
  Sentiment_Polarity TEXT,
  Sentiment_Subjectivity TEXT
);
Sample rows from `user_reviews`:
10 Best Foods for You, I like eat delicious food. That's I'm cooking food myself, case ""10 Best Foods"" helps lot, also ""Best Before (Shelf Life)"", Positive, 1.0, 0.5333333333333333
10 Best Foods for You, This help eating healthy exercise regular basis, Positive, 0.25, 0.28846153846153844
10 Best Foods for You, nan, nan, nan, nan

","playstore, user_reviews","playstore.installs, user_reviews.sentiment, playstore.app, user_reviews.app"
university,Give the name of the country that has the most universities.,SELECT t2.country_name FROM university as t1 inner JOIN country as t2 ON t1.country_id = t2.id GROUP BY t2.country_name ORDER BY COUNT(t1.university_name) DESC LIMIT 1,"CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

","CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

CREATE TABLE `ranking_system` (
  id INTEGER,
  system_name TEXT
);
Sample rows from `ranking_system`:
1, Times Higher Education World University Ranking
2, Shanghai Ranking
3, Center for World University Rankings

CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

","university, country","country.country_name, university.country_id, country.id, university.university_name"
shakespeare,"How many scenes are there in work id 7, act 1?",SELECT COUNT(id) FROM chapters WHERE work_id = 7 AND act = 1,"CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

","CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
chapters, 19648
characters, 1266
paragraphs, 666327

CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

",chapters,"id, work_id, act"
chicago_crime,"How many crime cases have been classified as ""Weapons Violation"" by the FBI?",SELECT SUM(case when t2.title = 'Weapons Violation' then 1 else 0 end) FROM crime as t1 inner JOIN fbi_code as t2 ON t1.fbi_code_no = t2.fbi_code_no,"CREATE TABLE `crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

CREATE TABLE `fbi_code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `fbi_code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

","CREATE TABLE `Community_Area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `Community_Area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `District` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `District`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `FBI_Code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `FBI_Code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `IUCR` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `IUCR`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `Neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `Neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `Ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `Ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `Crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `Crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","crime, fbi_code","fbi_code.title, crime.fbi_code_no, fbi_code.fbi_code_no"
soccer_2016,"On average, how many players from each country bat with their right hand?",SELECT cast(SUM(case when t1.batting_hand = 'Right-hand bat' then 1 else 0 end) as real) * 100 / COUNT(t2.country_name) FROM batting_style as t1 inner JOIN player as t2 ON t1.batting_id = t2.batting_hand,"CREATE TABLE `batting_style` (
  Batting_Id INTEGER,
  Batting_hand TEXT
);
Sample rows from `batting_style`:
1, Left-hand bat
2, Right-hand bat

CREATE TABLE `player` (
  Player_Id INTEGER,
  Player_Name TEXT,
  DOB DATE,
  Batting_hand INTEGER REFERENCES Batting_Style(Batting_Id),
  Bowling_skill INTEGER REFERENCES Bowling_Style(Bowling_Id),
  Country_Name INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `player`:
1, SC Ganguly, 1972-07-08, 1, 1, 1
2, BB McCullum, 1981-09-27, 2, 1, 4
3, RT Ponting, 1974-12-19, 2, 1, 5

","CREATE TABLE `Batting_Style` (
  Batting_Id INTEGER,
  Batting_hand TEXT
);
Sample rows from `Batting_Style`:
1, Left-hand bat
2, Right-hand bat

CREATE TABLE `Bowling_Style` (
  Bowling_Id INTEGER,
  Bowling_skill TEXT
);
Sample rows from `Bowling_Style`:
1, Right-arm medium
2, Right-arm offbreak
3, Right-arm fast-medium

CREATE TABLE `City` (
  City_Id INTEGER,
  City_Name TEXT,
  Country_id INTEGER
);
Sample rows from `City`:
1, Bangalore, 1
2, Chandigarh, 1
3, Delhi, 1

CREATE TABLE `Country` (
  Country_Id INTEGER REFERENCES Country(Country_Id),
  Country_Name TEXT
);
Sample rows from `Country`:
1, India
2, South Africa
3, U.A.E

CREATE TABLE `Extra_Type` (
  Extra_Id INTEGER,
  Extra_Name TEXT
);
Sample rows from `Extra_Type`:
1, legbyes
2, wides
3, byes

CREATE TABLE `Extra_Runs` (
  Match_Id INTEGER PRIMARY KEY,
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Extra_Type_Id INTEGER REFERENCES Extra_Type(Extra_Id),
  Extra_Runs INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Extra_Runs`:
335987, 1, 1, 1, 1, 1
335987, 1, 2, 2, 1, 2
335987, 1, 3, 2, 1, 1

CREATE TABLE `Out_Type` (
  Out_Id INTEGER,
  Out_Name TEXT
);
Sample rows from `Out_Type`:
1, caught
2, bowled
3, run out

CREATE TABLE `Outcome` (
  Outcome_Id INTEGER,
  Outcome_Type TEXT
);
Sample rows from `Outcome`:
1, Result
2, No Result
3, Superover

CREATE TABLE `Player` (
  Player_Id INTEGER,
  Player_Name TEXT,
  DOB DATE,
  Batting_hand INTEGER REFERENCES Batting_Style(Batting_Id),
  Bowling_skill INTEGER REFERENCES Bowling_Style(Bowling_Id),
  Country_Name INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Player`:
1, SC Ganguly, 1972-07-08, 1, 1, 1
2, BB McCullum, 1981-09-27, 2, 1, 4
3, RT Ponting, 1974-12-19, 2, 1, 5

CREATE TABLE `Rolee` (
  Role_Id INTEGER,
  Role_Desc TEXT
);
Sample rows from `Rolee`:
1, Captain
2, Keeper
3, Player

CREATE TABLE `Season` (
  Season_Id INTEGER,
  Man_of_the_Series INTEGER,
  Orange_Cap INTEGER,
  Purple_Cap INTEGER,
  Season_Year INTEGER
);
Sample rows from `Season`:
1, 32, 100, 102, 2008
2, 53, 18, 61, 2009
3, 133, 133, 131, 2010

CREATE TABLE `Team` (
  Team_Id INTEGER,
  Team_Name TEXT
);
Sample rows from `Team`:
1, Kolkata Knight Riders
2, Royal Challengers Bangalore
3, Chennai Super Kings

CREATE TABLE `Toss_Decision` (
  Toss_Id INTEGER,
  Toss_Name TEXT
);
Sample rows from `Toss_Decision`:
1, field
2, bat

CREATE TABLE `Umpire` (
  Umpire_Id INTEGER,
  Umpire_Name TEXT,
  Umpire_Country INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Umpire`:
1, Asad Rauf, 6
2, MR Benson, 10
3, Aleem Dar, 6

CREATE TABLE `Venue` (
  Venue_Id INTEGER,
  Venue_Name TEXT,
  City_Id INTEGER REFERENCES City(City_Id)
);
Sample rows from `Venue`:
1, M Chinnaswamy Stadium, 1
2, Punjab Cricket Association Stadium, 2
3, Feroz Shah Kotla, 3

CREATE TABLE `Win_By` (
  Win_Id INTEGER,
  Win_Type TEXT
);
Sample rows from `Win_By`:
1, runs
2, wickets
3, NO Result

CREATE TABLE `Match` (
  Match_Id INTEGER,
  Team_1 INTEGER REFERENCES Team(Team_Id),
  Team_2 INTEGER REFERENCES Team(Team_Id),
  Match_Date DATE,
  Season_Id INTEGER REFERENCES Season(Season_Id),
  Venue_Id INTEGER REFERENCES Venue(Venue_Id),
  Toss_Winner INTEGER REFERENCES Team(Team_Id),
  Toss_Decide INTEGER REFERENCES Toss_Decision(Toss_Id),
  Win_Type INTEGER REFERENCES Win_By(Win_Id),
  Win_Margin INTEGER,
  Outcome_type INTEGER REFERENCES Out_Type(Out_Id),
  Match_Winner INTEGER REFERENCES Team(Team_Id),
  Man_of_the_Match INTEGER REFERENCES Player(Player_Id)
);
Sample rows from `Match`:
335987, 2, 1, 2008-04-18, 1, 1, 2, 1, 1, 140, 1, 1, 2
335988, 4, 3, 2008-04-19, 1, 2, 3, 2, 1, 33, 1, 3, 19
335989, 6, 5, 2008-04-19, 1, 3, 5, 2, 2, 9, 1, 6, 90

CREATE TABLE `Ball_by_Ball` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Innings_No INTEGER PRIMARY KEY,
  Team_Batting INTEGER,
  Team_Bowling INTEGER,
  Striker_Batting_Position INTEGER,
  Striker INTEGER,
  Non_Striker INTEGER,
  Bowler INTEGER
);
Sample rows from `Ball_by_Ball`:
335987, 1, 1, 1, 1, 2, 1, 1, 2, 14
335987, 1, 1, 2, 2, 1, 1, 6, 7, 106
335987, 1, 2, 1, 1, 2, 2, 2, 1, 14

CREATE TABLE `Batsman_Scored` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Runs_Scored INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Batsman_Scored`:
335987, 1, 1, 0, 1
335987, 1, 1, 1, 2
335987, 1, 2, 0, 1

CREATE TABLE `Player_Match` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Player_Id INTEGER PRIMARY KEY REFERENCES Player(Player_Id),
  Role_Id INTEGER PRIMARY KEY REFERENCES Rolee(Role_Id),
  Team_Id INTEGER REFERENCES Team(Team_Id)
);
Sample rows from `Player_Match`:
335987, 1, 1, 1
335987, 2, 3, 1
335987, 3, 3, 1

CREATE TABLE `Wicket_Taken` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Player_Out INTEGER REFERENCES Player(Player_Id),
  Kind_Out INTEGER REFERENCES Out_Type(Out_Id),
  Fielders INTEGER REFERENCES Player(Player_Id),
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Wicket_Taken`:
335987, 2, 1, 6, 2, None, 2
335987, 3, 2, 8, 2, None, 2
335987, 5, 5, 9, 1, 83, 2

","batting_style, player","batting_style.batting_hand, player.country_name, batting_style.batting_id, player.batting_hand"
app_store,List apps whose rating is 3.9 and state the translated review of each app.,"SELECT t1.app, t2.translated_review FROM playstore as t1 inner JOIN user_reviews as t2 ON t1.app = t2.app WHERE t1.rating = 3.9","CREATE TABLE `playstore` (
  App TEXT,
  Category TEXT,
  Rating REAL,
  Reviews INTEGER,
  Size TEXT,
  Installs TEXT,
  Type TEXT,
  Price TEXT,
  Content Rating TEXT,
  Genres TEXT
);
Sample rows from `playstore`:
Photo Editor & Candy Camera & Grid & ScrapBook, ART_AND_DESIGN, 4.1, 159, 19M, 10,000+, Free, 0, Everyone, Art & Design
Coloring book moana, ART_AND_DESIGN, 3.9, 967, 14M, 500,000+, Free, 0, Everyone, Art & Design;Pretend Play
U Launcher Lite – FREE Live Cool Themes, Hide Apps, ART_AND_DESIGN, 4.7, 87510, 8.7M, 5,000,000+, Free, 0, Everyone, Art & Design

CREATE TABLE `user_reviews` (
  App TEXT REFERENCES playstore(App),
  Translated_Review TEXT,
  Sentiment TEXT,
  Sentiment_Polarity TEXT,
  Sentiment_Subjectivity TEXT
);
Sample rows from `user_reviews`:
10 Best Foods for You, I like eat delicious food. That's I'm cooking food myself, case ""10 Best Foods"" helps lot, also ""Best Before (Shelf Life)"", Positive, 1.0, 0.5333333333333333
10 Best Foods for You, This help eating healthy exercise regular basis, Positive, 0.25, 0.28846153846153844
10 Best Foods for You, nan, nan, nan, nan

","CREATE TABLE `playstore` (
  App TEXT,
  Category TEXT,
  Rating REAL,
  Reviews INTEGER,
  Size TEXT,
  Installs TEXT,
  Type TEXT,
  Price TEXT,
  Content Rating TEXT,
  Genres TEXT
);
Sample rows from `playstore`:
Photo Editor & Candy Camera & Grid & ScrapBook, ART_AND_DESIGN, 4.1, 159, 19M, 10,000+, Free, 0, Everyone, Art & Design
Coloring book moana, ART_AND_DESIGN, 3.9, 967, 14M, 500,000+, Free, 0, Everyone, Art & Design;Pretend Play
U Launcher Lite – FREE Live Cool Themes, Hide Apps, ART_AND_DESIGN, 4.7, 87510, 8.7M, 5,000,000+, Free, 0, Everyone, Art & Design

CREATE TABLE `user_reviews` (
  App TEXT REFERENCES playstore(App),
  Translated_Review TEXT,
  Sentiment TEXT,
  Sentiment_Polarity TEXT,
  Sentiment_Subjectivity TEXT
);
Sample rows from `user_reviews`:
10 Best Foods for You, I like eat delicious food. That's I'm cooking food myself, case ""10 Best Foods"" helps lot, also ""Best Before (Shelf Life)"", Positive, 1.0, 0.5333333333333333
10 Best Foods for You, This help eating healthy exercise regular basis, Positive, 0.25, 0.28846153846153844
10 Best Foods for You, nan, nan, nan, nan

","playstore, user_reviews","playstore.app, user_reviews.translated_review, user_reviews.app, playstore.rating"
video_games,How many games were released in 2001?,SELECt COUNT(t.id) FROM game_platform as t WHERE t.release_year = 2001,"CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

","CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

",game_platform,"game_platform.id, game_platform.release_year"
donor,What is the teacher prefix for the teacher who wrote the project 'Creating Memories and Inspiring Dreams'?,SELECT t2.teacher_prefix FROM essays as t1 inner JOIN projects as t2 ON t1.projectid = t2.projectid WHERE t1.title LIKE 'Creating Memories and Inspiring Dreams%',"CREATE TABLE `essays` (
  projectid TEXT,
  teacher_acctid TEXT,
  title TEXT,
  short_description TEXT,
  need_statement TEXT,
  essay TEXT
);
Sample rows from `essays`:
ffffc4f85b60efc5b52347df489d0238, c24011b20fc161ed02248e85beb59a90, iMath, It is imperative that teachers bring technology into the classroom, if students are going to be able to survive in the 21st Century. The classroom needs to be ever changing along with the outside world. The iMath project will help students by obtaining cl, My students need four iPods., I am a fourth year fifth grade math teacher. The school I teach in is a fifth and sixth grade public school and is a Title One school which means that 95% of our students get free lunch. Presently, I am in the process of completing a Masters degree in Tec
ffffac55ee02a49d1abc87ba6fc61135, 947066d0af47e0566f334566553dd6a6, Recording Rockin' Readers, Can you imagine having to translate everything you read into sign language and relate it to what you already know? Help us do just that by giving us the camera that will record our stories and..., My students need a camcorder. , Can you imagine having to translate everything you read into sign language and relate it to what you already know? Help us do just that by giving us the camera that will record our stories and interpretations! 
\n
\nMy students are all deaf or hard of hea
ffff97ed93720407d70a2787475932b0, 462270f5d5c212162fcab11afa2623cb, Kindergarten In Need of Important Materials!, It takes a special person to donate to a group of children they don't know, especially in these hard economic times, but my students are worth it.  They deserve to have the proper supplies to ensure that their long education gets off to the right start, s, My students need 17 assorted classroom materials to ensure that they can learn as much as possible this year., Hi. I teach a wonderful group of 4-5 year old Kindergarten students.  They come in wanting and willing to learn new and exciting things each and every day. I work hard to ensure that my students get the most out of the entire school year. 
\n
\nFor the mo

CREATE TABLE `projects` (
  projectid TEXT PRIMARY KEY,
  teacher_acctid TEXT,
  schoolid TEXT,
  school_ncesid TEXT,
  school_latitude REAL,
  school_longitude REAL,
  school_city TEXT,
  school_state TEXT,
  school_zip INTEGER,
  school_metro TEXT,
  school_district TEXT,
  school_county TEXT,
  school_charter TEXT,
  school_magnet TEXT,
  school_year_round TEXT,
  school_nlns TEXT,
  school_kipp TEXT,
  school_charter_ready_promise TEXT,
  teacher_prefix TEXT,
  teacher_teach_for_america TEXT,
  teacher_ny_teaching_fellow TEXT,
  primary_focus_subject TEXT,
  primary_focus_area TEXT,
  secondary_focus_subject TEXT,
  secondary_focus_area TEXT,
  resource_type TEXT,
  poverty_level TEXT,
  grade_level TEXT,
  fulfillment_labor_materials REAL,
  total_price_excluding_optional_support REAL,
  total_price_including_optional_support REAL,
  students_reached INTEGER,
  eligible_double_your_impact_match TEXT,
  eligible_almost_home_match TEXT,
  date_posted DATE
);
Sample rows from `projects`:
316ed8fb3b81402ff6ac8f721bb31192, 42d43fa6f37314365d08692e08680973, c0e6ce89b244764085691a1b8e28cb81, 063627006187, 36.57634, -119.608713, Selma, CA, 93662, None, Selma Unified Sch District, Fresno, f, f, f, f, f, f, Mrs., f, f, Literature & Writing, Literacy & Language, College & Career Prep, Applied Learning, Books, highest poverty, Grades 6-8, 30.0, 555.81, 653.89, 32, f, f, 2014-05-12
90de744e368a7e4883223ca49318ae30, 864eb466462bf704bf7a16a585ef296a, d711e47810900c96f26a5d0be30c446d, 483702008193, 32.911179, -96.72364, Dallas, TX, 75243, urban, Richardson Ind School District, Dallas, f, f, f, f, f, f, Mrs., f, f, Literacy, Literacy & Language, ESL, Literacy & Language, Books, highest poverty, Grades PreK-2, 30.0, 296.47, 348.79, 22, f, f, 2014-05-12
32943bb1063267de6ed19fc0ceb4b9a7, 37f85135259ece793213aca9d8765542, 665c3613013ba0a66e3a2a26b89f1b68, 410327000109, 45.166039, -122.414576, Colton, OR, 97017, rural, Colton School District 53, Clackamas, f, f, f, f, f, f, Mr., f, f, Literacy, Literacy & Language, Mathematics, Math & Science, Technology, high poverty, Grades PreK-2, 30.0, 430.89, 506.93, 17, f, f, 2014-05-11

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `essays` (
  projectid TEXT,
  teacher_acctid TEXT,
  title TEXT,
  short_description TEXT,
  need_statement TEXT,
  essay TEXT
);
Sample rows from `essays`:
ffffc4f85b60efc5b52347df489d0238, c24011b20fc161ed02248e85beb59a90, iMath, It is imperative that teachers bring technology into the classroom, if students are going to be able to survive in the 21st Century. The classroom needs to be ever changing along with the outside world. The iMath project will help students by obtaining cl, My students need four iPods., I am a fourth year fifth grade math teacher. The school I teach in is a fifth and sixth grade public school and is a Title One school which means that 95% of our students get free lunch. Presently, I am in the process of completing a Masters degree in Tec
ffffac55ee02a49d1abc87ba6fc61135, 947066d0af47e0566f334566553dd6a6, Recording Rockin' Readers, Can you imagine having to translate everything you read into sign language and relate it to what you already know? Help us do just that by giving us the camera that will record our stories and..., My students need a camcorder. , Can you imagine having to translate everything you read into sign language and relate it to what you already know? Help us do just that by giving us the camera that will record our stories and interpretations! 
\n
\nMy students are all deaf or hard of hea
ffff97ed93720407d70a2787475932b0, 462270f5d5c212162fcab11afa2623cb, Kindergarten In Need of Important Materials!, It takes a special person to donate to a group of children they don't know, especially in these hard economic times, but my students are worth it.  They deserve to have the proper supplies to ensure that their long education gets off to the right start, s, My students need 17 assorted classroom materials to ensure that they can learn as much as possible this year., Hi. I teach a wonderful group of 4-5 year old Kindergarten students.  They come in wanting and willing to learn new and exciting things each and every day. I work hard to ensure that my students get the most out of the entire school year. 
\n
\nFor the mo

CREATE TABLE `projects` (
  projectid TEXT PRIMARY KEY,
  teacher_acctid TEXT,
  schoolid TEXT,
  school_ncesid TEXT,
  school_latitude REAL,
  school_longitude REAL,
  school_city TEXT,
  school_state TEXT,
  school_zip INTEGER,
  school_metro TEXT,
  school_district TEXT,
  school_county TEXT,
  school_charter TEXT,
  school_magnet TEXT,
  school_year_round TEXT,
  school_nlns TEXT,
  school_kipp TEXT,
  school_charter_ready_promise TEXT,
  teacher_prefix TEXT,
  teacher_teach_for_america TEXT,
  teacher_ny_teaching_fellow TEXT,
  primary_focus_subject TEXT,
  primary_focus_area TEXT,
  secondary_focus_subject TEXT,
  secondary_focus_area TEXT,
  resource_type TEXT,
  poverty_level TEXT,
  grade_level TEXT,
  fulfillment_labor_materials REAL,
  total_price_excluding_optional_support REAL,
  total_price_including_optional_support REAL,
  students_reached INTEGER,
  eligible_double_your_impact_match TEXT,
  eligible_almost_home_match TEXT,
  date_posted DATE
);
Sample rows from `projects`:
316ed8fb3b81402ff6ac8f721bb31192, 42d43fa6f37314365d08692e08680973, c0e6ce89b244764085691a1b8e28cb81, 063627006187, 36.57634, -119.608713, Selma, CA, 93662, None, Selma Unified Sch District, Fresno, f, f, f, f, f, f, Mrs., f, f, Literature & Writing, Literacy & Language, College & Career Prep, Applied Learning, Books, highest poverty, Grades 6-8, 30.0, 555.81, 653.89, 32, f, f, 2014-05-12
90de744e368a7e4883223ca49318ae30, 864eb466462bf704bf7a16a585ef296a, d711e47810900c96f26a5d0be30c446d, 483702008193, 32.911179, -96.72364, Dallas, TX, 75243, urban, Richardson Ind School District, Dallas, f, f, f, f, f, f, Mrs., f, f, Literacy, Literacy & Language, ESL, Literacy & Language, Books, highest poverty, Grades PreK-2, 30.0, 296.47, 348.79, 22, f, f, 2014-05-12
32943bb1063267de6ed19fc0ceb4b9a7, 37f85135259ece793213aca9d8765542, 665c3613013ba0a66e3a2a26b89f1b68, 410327000109, 45.166039, -122.414576, Colton, OR, 97017, rural, Colton School District 53, Clackamas, f, f, f, f, f, f, Mr., f, f, Literacy, Literacy & Language, Mathematics, Math & Science, Technology, high poverty, Grades PreK-2, 30.0, 430.89, 506.93, 17, f, f, 2014-05-11

CREATE TABLE `donations` (
  donationid TEXT PRIMARY KEY,
  projectid TEXT REFERENCES projects(projectid),
  donor_acctid TEXT,
  donor_city TEXT,
  donor_state TEXT,
  donor_zip TEXT,
  is_teacher_acct TEXT,
  donation_timestamp DATETIME,
  donation_to_project REAL,
  donation_optional_support REAL,
  donation_total REAL,
  dollar_amount TEXT,
  donation_included_optional_support TEXT,
  payment_method TEXT,
  payment_included_acct_credit TEXT,
  payment_included_campaign_gift_card TEXT,
  payment_included_web_purchased_gift_card TEXT,
  payment_was_promo_matched TEXT,
  via_giving_page TEXT,
  for_honoree TEXT,
  donation_message TEXT
);
Sample rows from `donations`:
431d720bc3dfd75ae445a5eaa0b0638d, ffffac55ee02a49d1abc87ba6fc61135, 22cbc920c9b5fa08dfb331422f5926b5, Peachtree City, GA, 30269, f, 2011-08-25 14:27:34.807, 42.5, 7.5, 50.0, 10_to_100, t, no_cash_received, f, t, f, f, f, f, I gave to this project because I support the efforts of this teacher with each of her students, and her school, Suder Elementary School.
fcfedba1c8a0ba77d280cace80a909f6, ffffac55ee02a49d1abc87ba6fc61135, 521f1830a77c9dbbf8119d99c6206a16, None, GA, None, f, 2011-11-04 07:54:21.552, 26.83, 4.73, 31.56, 10_to_100, t, creditcard, f, t, f, f, f, f, I donated because I want to support kids in Georgia.
3fa95d29986aa6f401c6719ced3a3ce7, ffffac55ee02a49d1abc87ba6fc61135, 1e0a63fc8141c7ba26b8b44ca0871b90, Rockville, MD, 20853, f, 2011-11-02 22:53:53.019, 55.35, 0.0, 55.35, 10_to_100, f, no_cash_received, t, f, f, f, t, f, The Spark's 'pet' projects include those which support deaf students.  With just a few days left, the Spark's donors fund half of what remains, and challenge others to pull this project through to fruition.

CREATE TABLE `resources` (
  resourceid TEXT PRIMARY KEY,
  projectid TEXT REFERENCES projects(projectid),
  vendorid INTEGER,
  vendor_name TEXT,
  project_resource_type TEXT,
  item_name TEXT,
  item_number TEXT,
  item_unit_price REAL,
  item_quantity INTEGER
);
Sample rows from `resources`:
8a1c1c45bc30d065061912fd9114fcf3, ffffc4f85b60efc5b52347df489d0238, 430, Woodwind and Brasswind, Technology, iPod nano 4th Gen 8GB (Black), 249995.001, 149.0, 4
015d2c4935c50427964a12dc3f584091, ffffac55ee02a49d1abc87ba6fc61135, 82, Best Buy for Business, Technology, Sony bloggie MHS-FS1 - camcorder - internal flash memory, BB11216668, 148.0, 1
26a02944b2f0c25f9abdeacca3ede3ee, ffff97ed93720407d70a2787475932b0, 767, Lakeshore Learning Materials, Supplies, VX748 - Best-Buy Jumbo Crayons - 12-Color Box, VX748, 69.95, 1

","essays, projects","projects.teacher_prefix, essays.projectid, projects.projectid, essays.title"
soccer_2016,What is the nationality of the 7th season Purple Cap winner?,SELECT t3.country_name FROM season as t1 inner JOIN player as t2 ON t1.man_of_the_series = t2.player_Id inner JOIN country as t3 ON t2.country_name = t3.country_Id WHERE t1.season_Id = 7 AND t1.purple_cap is NOT null,"CREATE TABLE `season` (
  Season_Id INTEGER,
  Man_of_the_Series INTEGER,
  Orange_Cap INTEGER,
  Purple_Cap INTEGER,
  Season_Year INTEGER
);
Sample rows from `season`:
1, 32, 100, 102, 2008
2, 53, 18, 61, 2009
3, 133, 133, 131, 2010

CREATE TABLE `player` (
  Player_Id INTEGER,
  Player_Name TEXT,
  DOB DATE,
  Batting_hand INTEGER REFERENCES Batting_Style(Batting_Id),
  Bowling_skill INTEGER REFERENCES Bowling_Style(Bowling_Id),
  Country_Name INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `player`:
1, SC Ganguly, 1972-07-08, 1, 1, 1
2, BB McCullum, 1981-09-27, 2, 1, 4
3, RT Ponting, 1974-12-19, 2, 1, 5

CREATE TABLE `country` (
  Country_Id INTEGER REFERENCES Country(Country_Id),
  Country_Name TEXT
);
Sample rows from `country`:
1, India
2, South Africa
3, U.A.E

","CREATE TABLE `Batting_Style` (
  Batting_Id INTEGER,
  Batting_hand TEXT
);
Sample rows from `Batting_Style`:
1, Left-hand bat
2, Right-hand bat

CREATE TABLE `Bowling_Style` (
  Bowling_Id INTEGER,
  Bowling_skill TEXT
);
Sample rows from `Bowling_Style`:
1, Right-arm medium
2, Right-arm offbreak
3, Right-arm fast-medium

CREATE TABLE `City` (
  City_Id INTEGER,
  City_Name TEXT,
  Country_id INTEGER
);
Sample rows from `City`:
1, Bangalore, 1
2, Chandigarh, 1
3, Delhi, 1

CREATE TABLE `Country` (
  Country_Id INTEGER REFERENCES Country(Country_Id),
  Country_Name TEXT
);
Sample rows from `Country`:
1, India
2, South Africa
3, U.A.E

CREATE TABLE `Extra_Type` (
  Extra_Id INTEGER,
  Extra_Name TEXT
);
Sample rows from `Extra_Type`:
1, legbyes
2, wides
3, byes

CREATE TABLE `Extra_Runs` (
  Match_Id INTEGER PRIMARY KEY,
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Extra_Type_Id INTEGER REFERENCES Extra_Type(Extra_Id),
  Extra_Runs INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Extra_Runs`:
335987, 1, 1, 1, 1, 1
335987, 1, 2, 2, 1, 2
335987, 1, 3, 2, 1, 1

CREATE TABLE `Out_Type` (
  Out_Id INTEGER,
  Out_Name TEXT
);
Sample rows from `Out_Type`:
1, caught
2, bowled
3, run out

CREATE TABLE `Outcome` (
  Outcome_Id INTEGER,
  Outcome_Type TEXT
);
Sample rows from `Outcome`:
1, Result
2, No Result
3, Superover

CREATE TABLE `Player` (
  Player_Id INTEGER,
  Player_Name TEXT,
  DOB DATE,
  Batting_hand INTEGER REFERENCES Batting_Style(Batting_Id),
  Bowling_skill INTEGER REFERENCES Bowling_Style(Bowling_Id),
  Country_Name INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Player`:
1, SC Ganguly, 1972-07-08, 1, 1, 1
2, BB McCullum, 1981-09-27, 2, 1, 4
3, RT Ponting, 1974-12-19, 2, 1, 5

CREATE TABLE `Rolee` (
  Role_Id INTEGER,
  Role_Desc TEXT
);
Sample rows from `Rolee`:
1, Captain
2, Keeper
3, Player

CREATE TABLE `Season` (
  Season_Id INTEGER,
  Man_of_the_Series INTEGER,
  Orange_Cap INTEGER,
  Purple_Cap INTEGER,
  Season_Year INTEGER
);
Sample rows from `Season`:
1, 32, 100, 102, 2008
2, 53, 18, 61, 2009
3, 133, 133, 131, 2010

CREATE TABLE `Team` (
  Team_Id INTEGER,
  Team_Name TEXT
);
Sample rows from `Team`:
1, Kolkata Knight Riders
2, Royal Challengers Bangalore
3, Chennai Super Kings

CREATE TABLE `Toss_Decision` (
  Toss_Id INTEGER,
  Toss_Name TEXT
);
Sample rows from `Toss_Decision`:
1, field
2, bat

CREATE TABLE `Umpire` (
  Umpire_Id INTEGER,
  Umpire_Name TEXT,
  Umpire_Country INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Umpire`:
1, Asad Rauf, 6
2, MR Benson, 10
3, Aleem Dar, 6

CREATE TABLE `Venue` (
  Venue_Id INTEGER,
  Venue_Name TEXT,
  City_Id INTEGER REFERENCES City(City_Id)
);
Sample rows from `Venue`:
1, M Chinnaswamy Stadium, 1
2, Punjab Cricket Association Stadium, 2
3, Feroz Shah Kotla, 3

CREATE TABLE `Win_By` (
  Win_Id INTEGER,
  Win_Type TEXT
);
Sample rows from `Win_By`:
1, runs
2, wickets
3, NO Result

CREATE TABLE `Match` (
  Match_Id INTEGER,
  Team_1 INTEGER REFERENCES Team(Team_Id),
  Team_2 INTEGER REFERENCES Team(Team_Id),
  Match_Date DATE,
  Season_Id INTEGER REFERENCES Season(Season_Id),
  Venue_Id INTEGER REFERENCES Venue(Venue_Id),
  Toss_Winner INTEGER REFERENCES Team(Team_Id),
  Toss_Decide INTEGER REFERENCES Toss_Decision(Toss_Id),
  Win_Type INTEGER REFERENCES Win_By(Win_Id),
  Win_Margin INTEGER,
  Outcome_type INTEGER REFERENCES Out_Type(Out_Id),
  Match_Winner INTEGER REFERENCES Team(Team_Id),
  Man_of_the_Match INTEGER REFERENCES Player(Player_Id)
);
Sample rows from `Match`:
335987, 2, 1, 2008-04-18, 1, 1, 2, 1, 1, 140, 1, 1, 2
335988, 4, 3, 2008-04-19, 1, 2, 3, 2, 1, 33, 1, 3, 19
335989, 6, 5, 2008-04-19, 1, 3, 5, 2, 2, 9, 1, 6, 90

CREATE TABLE `Ball_by_Ball` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Innings_No INTEGER PRIMARY KEY,
  Team_Batting INTEGER,
  Team_Bowling INTEGER,
  Striker_Batting_Position INTEGER,
  Striker INTEGER,
  Non_Striker INTEGER,
  Bowler INTEGER
);
Sample rows from `Ball_by_Ball`:
335987, 1, 1, 1, 1, 2, 1, 1, 2, 14
335987, 1, 1, 2, 2, 1, 1, 6, 7, 106
335987, 1, 2, 1, 1, 2, 2, 2, 1, 14

CREATE TABLE `Batsman_Scored` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Runs_Scored INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Batsman_Scored`:
335987, 1, 1, 0, 1
335987, 1, 1, 1, 2
335987, 1, 2, 0, 1

CREATE TABLE `Player_Match` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Player_Id INTEGER PRIMARY KEY REFERENCES Player(Player_Id),
  Role_Id INTEGER PRIMARY KEY REFERENCES Rolee(Role_Id),
  Team_Id INTEGER REFERENCES Team(Team_Id)
);
Sample rows from `Player_Match`:
335987, 1, 1, 1
335987, 2, 3, 1
335987, 3, 3, 1

CREATE TABLE `Wicket_Taken` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Player_Out INTEGER REFERENCES Player(Player_Id),
  Kind_Out INTEGER REFERENCES Out_Type(Out_Id),
  Fielders INTEGER REFERENCES Player(Player_Id),
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Wicket_Taken`:
335987, 2, 1, 6, 2, None, 2
335987, 3, 2, 8, 2, None, 2
335987, 5, 5, 9, 1, 83, 2

","season, player, country","country.country_name, season.man_of_the_series, player.player_Id, player.country_name, country.country_Id, season.season_Id, season.purple_cap"
european_football_1,"In which division was the match between Hibernian, the away team, and Hearts, the home team, played? To which country does this division belong?","SELECT DISTINCT t2.division,t2.country FROM matchs as t1 inner JOIN divisions as t2 ON t1.div = t2.division WHERE t1.hometeam = 'Hearts' AND t1.awayteam = 'Hibernian'","CREATE TABLE `matchs` (
  Div TEXT REFERENCES divisions(division),
  Date DATE,
  HomeTeam TEXT,
  AwayTeam TEXT,
  FTHG INTEGER,
  FTAG INTEGER,
  FTR TEXT,
  season INTEGER
);
Sample rows from `matchs`:
B1, 2020-08-08, Club Brugge, Charleroi, 0, 1, A, 2021
B1, 2020-08-08, Antwerp, Mouscron, 1, 1, D, 2021
B1, 2020-08-08, Standard, Cercle Brugge, 1, 0, H, 2021

CREATE TABLE `divisions` (
  division TEXT PRIMARY KEY,
  name TEXT,
  country TEXT
);
Sample rows from `divisions`:
B1, Division 1A, Belgium
D1, Bundesliga, Deutschland
D2, 2. Bundesliga, Deutschland

","CREATE TABLE `divisions` (
  division TEXT PRIMARY KEY,
  name TEXT,
  country TEXT
);
Sample rows from `divisions`:
B1, Division 1A, Belgium
D1, Bundesliga, Deutschland
D2, 2. Bundesliga, Deutschland

CREATE TABLE `matchs` (
  Div TEXT REFERENCES divisions(division),
  Date DATE,
  HomeTeam TEXT,
  AwayTeam TEXT,
  FTHG INTEGER,
  FTAG INTEGER,
  FTR TEXT,
  season INTEGER
);
Sample rows from `matchs`:
B1, 2020-08-08, Club Brugge, Charleroi, 0, 1, A, 2021
B1, 2020-08-08, Antwerp, Mouscron, 1, 1, D, 2021
B1, 2020-08-08, Standard, Cercle Brugge, 1, 0, H, 2021

","matchs, divisions","divisions.division, divisions.country, matchs.div, matchs.hometeam, matchs.awayteam"
public_review_platform,"Does Yelp business No.""4960"" have TV?",SELECT DISTINCT case when t1.attribute_name LIKE 'Has TV' then 'yes' else 'no' end FROM attributes as t1 inner JOIN Business_attributes as t2 ON t1.attribute_id = t2.attribute_id WHERE t2.business_id = 4960,"CREATE TABLE `attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Business_attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_attributes`:
1, 2, none
1, 3, none
1, 13, none

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","attributes, Business_attributes","attributes.attribute_name, attributes.attribute_id, Business_attributes.attribute_id, Business_attributes.business_id"
citeseer,Which paper ID cited the most word? In which class label does it belongs to?,"SELECT t1.paper_id, t1.class_label FROM paper as t1 inner JOIN content as t2 ON t1.paper_id = t2.paper_id GROUP BY t1.paper_id, t1.class_label ORDER BY COUNT(t2.word_cited_id) DESC LIMIT 1","CREATE TABLE `paper` (
  paper_id TEXT PRIMARY KEY,
  class_label TEXT
);
Sample rows from `paper`:
100157, Agents
100598, IR
101570, ML

CREATE TABLE `content` (
  paper_id TEXT PRIMARY KEY REFERENCES paper(paper_id),
  word_cited_id TEXT PRIMARY KEY
);
Sample rows from `content`:
100157, word1163
100157, word1509
100157, word1614

","CREATE TABLE `cites` (
  cited_paper_id TEXT PRIMARY KEY,
  citing_paper_id TEXT PRIMARY KEY
);
Sample rows from `cites`:
100157, 100157
100157, 364207
100157, 38848

CREATE TABLE `paper` (
  paper_id TEXT PRIMARY KEY,
  class_label TEXT
);
Sample rows from `paper`:
100157, Agents
100598, IR
101570, ML

CREATE TABLE `content` (
  paper_id TEXT PRIMARY KEY REFERENCES paper(paper_id),
  word_cited_id TEXT PRIMARY KEY
);
Sample rows from `content`:
100157, word1163
100157, word1509
100157, word1614

","paper, content","paper.paper_id, paper.class_label, content.paper_id, content.word_cited_id"
cs_semester,What is the average teaching ability of the most popular professors?,SELECT cast(SUM(teachingability) as real) / COUNT(prof_id) FROM prof WHERE popularity = ( SELECT MAX(popularity) FROM prof ),"CREATE TABLE `prof` (
  prof_id INTEGER,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  popularity INTEGER,
  teachingability INTEGER,
  graduate_from TEXT
);
Sample rows from `prof`:
1, Male, Nathaniel, Pigford, npigford0@hku.hk, 3, 5, University of Washington
2, Male, Zhihua, Zhou, zzhihua@hku.hk, 2, 1, Beijing Polytechnic University
3, Male, Ogdon, Zywicki, ozywicki2@hku.hk, 2, 2, University of Boston

","CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

CREATE TABLE `prof` (
  prof_id INTEGER,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  popularity INTEGER,
  teachingability INTEGER,
  graduate_from TEXT
);
Sample rows from `prof`:
1, Male, Nathaniel, Pigford, npigford0@hku.hk, 3, 5, University of Washington
2, Male, Zhihua, Zhou, zzhihua@hku.hk, 2, 1, Beijing Polytechnic University
3, Male, Ogdon, Zywicki, ozywicki2@hku.hk, 2, 2, University of Boston

CREATE TABLE `RA` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `RA`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

",prof,"teachingability, prof_id, popularity"
soccer_2016,"Among the matches held in 2015, who is the winning team in the match ID 829768?",SELECT t2.team_name FROM match as t1 inner JOIN team as t2 ON t2.team_Id = t1.match_Winner WHERE t1.match_Date LIKE '2015%' AND t1.match_Id = 829768,"CREATE TABLE `match` (
  Match_Id INTEGER,
  Team_1 INTEGER REFERENCES Team(Team_Id),
  Team_2 INTEGER REFERENCES Team(Team_Id),
  Match_Date DATE,
  Season_Id INTEGER REFERENCES Season(Season_Id),
  Venue_Id INTEGER REFERENCES Venue(Venue_Id),
  Toss_Winner INTEGER REFERENCES Team(Team_Id),
  Toss_Decide INTEGER REFERENCES Toss_Decision(Toss_Id),
  Win_Type INTEGER REFERENCES Win_By(Win_Id),
  Win_Margin INTEGER,
  Outcome_type INTEGER REFERENCES Out_Type(Out_Id),
  Match_Winner INTEGER REFERENCES Team(Team_Id),
  Man_of_the_Match INTEGER REFERENCES Player(Player_Id)
);
Sample rows from `match`:
335987, 2, 1, 2008-04-18, 1, 1, 2, 1, 1, 140, 1, 1, 2
335988, 4, 3, 2008-04-19, 1, 2, 3, 2, 1, 33, 1, 3, 19
335989, 6, 5, 2008-04-19, 1, 3, 5, 2, 2, 9, 1, 6, 90

CREATE TABLE `team` (
  Team_Id INTEGER,
  Team_Name TEXT
);
Sample rows from `team`:
1, Kolkata Knight Riders
2, Royal Challengers Bangalore
3, Chennai Super Kings

","CREATE TABLE `Batting_Style` (
  Batting_Id INTEGER,
  Batting_hand TEXT
);
Sample rows from `Batting_Style`:
1, Left-hand bat
2, Right-hand bat

CREATE TABLE `Bowling_Style` (
  Bowling_Id INTEGER,
  Bowling_skill TEXT
);
Sample rows from `Bowling_Style`:
1, Right-arm medium
2, Right-arm offbreak
3, Right-arm fast-medium

CREATE TABLE `City` (
  City_Id INTEGER,
  City_Name TEXT,
  Country_id INTEGER
);
Sample rows from `City`:
1, Bangalore, 1
2, Chandigarh, 1
3, Delhi, 1

CREATE TABLE `Country` (
  Country_Id INTEGER REFERENCES Country(Country_Id),
  Country_Name TEXT
);
Sample rows from `Country`:
1, India
2, South Africa
3, U.A.E

CREATE TABLE `Extra_Type` (
  Extra_Id INTEGER,
  Extra_Name TEXT
);
Sample rows from `Extra_Type`:
1, legbyes
2, wides
3, byes

CREATE TABLE `Extra_Runs` (
  Match_Id INTEGER PRIMARY KEY,
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Extra_Type_Id INTEGER REFERENCES Extra_Type(Extra_Id),
  Extra_Runs INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Extra_Runs`:
335987, 1, 1, 1, 1, 1
335987, 1, 2, 2, 1, 2
335987, 1, 3, 2, 1, 1

CREATE TABLE `Out_Type` (
  Out_Id INTEGER,
  Out_Name TEXT
);
Sample rows from `Out_Type`:
1, caught
2, bowled
3, run out

CREATE TABLE `Outcome` (
  Outcome_Id INTEGER,
  Outcome_Type TEXT
);
Sample rows from `Outcome`:
1, Result
2, No Result
3, Superover

CREATE TABLE `Player` (
  Player_Id INTEGER,
  Player_Name TEXT,
  DOB DATE,
  Batting_hand INTEGER REFERENCES Batting_Style(Batting_Id),
  Bowling_skill INTEGER REFERENCES Bowling_Style(Bowling_Id),
  Country_Name INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Player`:
1, SC Ganguly, 1972-07-08, 1, 1, 1
2, BB McCullum, 1981-09-27, 2, 1, 4
3, RT Ponting, 1974-12-19, 2, 1, 5

CREATE TABLE `Rolee` (
  Role_Id INTEGER,
  Role_Desc TEXT
);
Sample rows from `Rolee`:
1, Captain
2, Keeper
3, Player

CREATE TABLE `Season` (
  Season_Id INTEGER,
  Man_of_the_Series INTEGER,
  Orange_Cap INTEGER,
  Purple_Cap INTEGER,
  Season_Year INTEGER
);
Sample rows from `Season`:
1, 32, 100, 102, 2008
2, 53, 18, 61, 2009
3, 133, 133, 131, 2010

CREATE TABLE `Team` (
  Team_Id INTEGER,
  Team_Name TEXT
);
Sample rows from `Team`:
1, Kolkata Knight Riders
2, Royal Challengers Bangalore
3, Chennai Super Kings

CREATE TABLE `Toss_Decision` (
  Toss_Id INTEGER,
  Toss_Name TEXT
);
Sample rows from `Toss_Decision`:
1, field
2, bat

CREATE TABLE `Umpire` (
  Umpire_Id INTEGER,
  Umpire_Name TEXT,
  Umpire_Country INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Umpire`:
1, Asad Rauf, 6
2, MR Benson, 10
3, Aleem Dar, 6

CREATE TABLE `Venue` (
  Venue_Id INTEGER,
  Venue_Name TEXT,
  City_Id INTEGER REFERENCES City(City_Id)
);
Sample rows from `Venue`:
1, M Chinnaswamy Stadium, 1
2, Punjab Cricket Association Stadium, 2
3, Feroz Shah Kotla, 3

CREATE TABLE `Win_By` (
  Win_Id INTEGER,
  Win_Type TEXT
);
Sample rows from `Win_By`:
1, runs
2, wickets
3, NO Result

CREATE TABLE `Match` (
  Match_Id INTEGER,
  Team_1 INTEGER REFERENCES Team(Team_Id),
  Team_2 INTEGER REFERENCES Team(Team_Id),
  Match_Date DATE,
  Season_Id INTEGER REFERENCES Season(Season_Id),
  Venue_Id INTEGER REFERENCES Venue(Venue_Id),
  Toss_Winner INTEGER REFERENCES Team(Team_Id),
  Toss_Decide INTEGER REFERENCES Toss_Decision(Toss_Id),
  Win_Type INTEGER REFERENCES Win_By(Win_Id),
  Win_Margin INTEGER,
  Outcome_type INTEGER REFERENCES Out_Type(Out_Id),
  Match_Winner INTEGER REFERENCES Team(Team_Id),
  Man_of_the_Match INTEGER REFERENCES Player(Player_Id)
);
Sample rows from `Match`:
335987, 2, 1, 2008-04-18, 1, 1, 2, 1, 1, 140, 1, 1, 2
335988, 4, 3, 2008-04-19, 1, 2, 3, 2, 1, 33, 1, 3, 19
335989, 6, 5, 2008-04-19, 1, 3, 5, 2, 2, 9, 1, 6, 90

CREATE TABLE `Ball_by_Ball` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Innings_No INTEGER PRIMARY KEY,
  Team_Batting INTEGER,
  Team_Bowling INTEGER,
  Striker_Batting_Position INTEGER,
  Striker INTEGER,
  Non_Striker INTEGER,
  Bowler INTEGER
);
Sample rows from `Ball_by_Ball`:
335987, 1, 1, 1, 1, 2, 1, 1, 2, 14
335987, 1, 1, 2, 2, 1, 1, 6, 7, 106
335987, 1, 2, 1, 1, 2, 2, 2, 1, 14

CREATE TABLE `Batsman_Scored` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Runs_Scored INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Batsman_Scored`:
335987, 1, 1, 0, 1
335987, 1, 1, 1, 2
335987, 1, 2, 0, 1

CREATE TABLE `Player_Match` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Player_Id INTEGER PRIMARY KEY REFERENCES Player(Player_Id),
  Role_Id INTEGER PRIMARY KEY REFERENCES Rolee(Role_Id),
  Team_Id INTEGER REFERENCES Team(Team_Id)
);
Sample rows from `Player_Match`:
335987, 1, 1, 1
335987, 2, 3, 1
335987, 3, 3, 1

CREATE TABLE `Wicket_Taken` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Player_Out INTEGER REFERENCES Player(Player_Id),
  Kind_Out INTEGER REFERENCES Out_Type(Out_Id),
  Fielders INTEGER REFERENCES Player(Player_Id),
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Wicket_Taken`:
335987, 2, 1, 6, 2, None, 2
335987, 3, 2, 8, 2, None, 2
335987, 5, 5, 9, 1, 83, 2

","match, team","team.team_name, team.team_Id, match.match_Winner, match.match_Date, match.match_Id"
regional_sales,What was the best discount applied to sales orders in 2020?,SELECT MAX(`discount applied`) FROM `sales orders` WHERE orderdate LIKE '%/%/20',"CREATE TABLE `sales orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `sales orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  Customer Names TEXT
);
Sample rows from `Customers`:
1, Avon Corp
2, WakeFern 
3, Elorac, Corp

CREATE TABLE `Products` (
  ProductID INTEGER,
  Product Name TEXT
);
Sample rows from `Products`:
1, Cookware
2, Photo Frames
3, Table Lamps

CREATE TABLE `Regions` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `Regions`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `Sales Team` (
  SalesTeamID INTEGER,
  Sales Team TEXT,
  Region TEXT
);
Sample rows from `Sales Team`:
1, Adam Hernandez, Northeast
2, Keith Griffin, Northeast
3, Jerry Green, West

CREATE TABLE `Store Locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `Store Locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

CREATE TABLE `Sales Orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `Sales Orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

",sales orders,"discount applied, orderdate"
student_loan,List out the number of female students who enlisted in the air force.,SELECT COUNT(name) FROM enlist WHERE organ = 'air_force' AND name NOT IN ( SELECT name FROM male ),"CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

","enlist, male","name, organ"
donor,"What is the total price including optional support received by the teacher who posted the essay titled ""Recording Rockin' Readers""?",SELECT SUM(t1.total_price_including_optional_support) FROM projects as t1 inner JOIN essays as t2 ON t1.projectid = t2.projectid WHERE t2.title = 'Recording Rockin'' Readers',"CREATE TABLE `projects` (
  projectid TEXT PRIMARY KEY,
  teacher_acctid TEXT,
  schoolid TEXT,
  school_ncesid TEXT,
  school_latitude REAL,
  school_longitude REAL,
  school_city TEXT,
  school_state TEXT,
  school_zip INTEGER,
  school_metro TEXT,
  school_district TEXT,
  school_county TEXT,
  school_charter TEXT,
  school_magnet TEXT,
  school_year_round TEXT,
  school_nlns TEXT,
  school_kipp TEXT,
  school_charter_ready_promise TEXT,
  teacher_prefix TEXT,
  teacher_teach_for_america TEXT,
  teacher_ny_teaching_fellow TEXT,
  primary_focus_subject TEXT,
  primary_focus_area TEXT,
  secondary_focus_subject TEXT,
  secondary_focus_area TEXT,
  resource_type TEXT,
  poverty_level TEXT,
  grade_level TEXT,
  fulfillment_labor_materials REAL,
  total_price_excluding_optional_support REAL,
  total_price_including_optional_support REAL,
  students_reached INTEGER,
  eligible_double_your_impact_match TEXT,
  eligible_almost_home_match TEXT,
  date_posted DATE
);
Sample rows from `projects`:
316ed8fb3b81402ff6ac8f721bb31192, 42d43fa6f37314365d08692e08680973, c0e6ce89b244764085691a1b8e28cb81, 063627006187, 36.57634, -119.608713, Selma, CA, 93662, None, Selma Unified Sch District, Fresno, f, f, f, f, f, f, Mrs., f, f, Literature & Writing, Literacy & Language, College & Career Prep, Applied Learning, Books, highest poverty, Grades 6-8, 30.0, 555.81, 653.89, 32, f, f, 2014-05-12
90de744e368a7e4883223ca49318ae30, 864eb466462bf704bf7a16a585ef296a, d711e47810900c96f26a5d0be30c446d, 483702008193, 32.911179, -96.72364, Dallas, TX, 75243, urban, Richardson Ind School District, Dallas, f, f, f, f, f, f, Mrs., f, f, Literacy, Literacy & Language, ESL, Literacy & Language, Books, highest poverty, Grades PreK-2, 30.0, 296.47, 348.79, 22, f, f, 2014-05-12
32943bb1063267de6ed19fc0ceb4b9a7, 37f85135259ece793213aca9d8765542, 665c3613013ba0a66e3a2a26b89f1b68, 410327000109, 45.166039, -122.414576, Colton, OR, 97017, rural, Colton School District 53, Clackamas, f, f, f, f, f, f, Mr., f, f, Literacy, Literacy & Language, Mathematics, Math & Science, Technology, high poverty, Grades PreK-2, 30.0, 430.89, 506.93, 17, f, f, 2014-05-11

CREATE TABLE `essays` (
  projectid TEXT,
  teacher_acctid TEXT,
  title TEXT,
  short_description TEXT,
  need_statement TEXT,
  essay TEXT
);
Sample rows from `essays`:
ffffc4f85b60efc5b52347df489d0238, c24011b20fc161ed02248e85beb59a90, iMath, It is imperative that teachers bring technology into the classroom, if students are going to be able to survive in the 21st Century. The classroom needs to be ever changing along with the outside world. The iMath project will help students by obtaining cl, My students need four iPods., I am a fourth year fifth grade math teacher. The school I teach in is a fifth and sixth grade public school and is a Title One school which means that 95% of our students get free lunch. Presently, I am in the process of completing a Masters degree in Tec
ffffac55ee02a49d1abc87ba6fc61135, 947066d0af47e0566f334566553dd6a6, Recording Rockin' Readers, Can you imagine having to translate everything you read into sign language and relate it to what you already know? Help us do just that by giving us the camera that will record our stories and..., My students need a camcorder. , Can you imagine having to translate everything you read into sign language and relate it to what you already know? Help us do just that by giving us the camera that will record our stories and interpretations! 
\n
\nMy students are all deaf or hard of hea
ffff97ed93720407d70a2787475932b0, 462270f5d5c212162fcab11afa2623cb, Kindergarten In Need of Important Materials!, It takes a special person to donate to a group of children they don't know, especially in these hard economic times, but my students are worth it.  They deserve to have the proper supplies to ensure that their long education gets off to the right start, s, My students need 17 assorted classroom materials to ensure that they can learn as much as possible this year., Hi. I teach a wonderful group of 4-5 year old Kindergarten students.  They come in wanting and willing to learn new and exciting things each and every day. I work hard to ensure that my students get the most out of the entire school year. 
\n
\nFor the mo

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `essays` (
  projectid TEXT,
  teacher_acctid TEXT,
  title TEXT,
  short_description TEXT,
  need_statement TEXT,
  essay TEXT
);
Sample rows from `essays`:
ffffc4f85b60efc5b52347df489d0238, c24011b20fc161ed02248e85beb59a90, iMath, It is imperative that teachers bring technology into the classroom, if students are going to be able to survive in the 21st Century. The classroom needs to be ever changing along with the outside world. The iMath project will help students by obtaining cl, My students need four iPods., I am a fourth year fifth grade math teacher. The school I teach in is a fifth and sixth grade public school and is a Title One school which means that 95% of our students get free lunch. Presently, I am in the process of completing a Masters degree in Tec
ffffac55ee02a49d1abc87ba6fc61135, 947066d0af47e0566f334566553dd6a6, Recording Rockin' Readers, Can you imagine having to translate everything you read into sign language and relate it to what you already know? Help us do just that by giving us the camera that will record our stories and..., My students need a camcorder. , Can you imagine having to translate everything you read into sign language and relate it to what you already know? Help us do just that by giving us the camera that will record our stories and interpretations! 
\n
\nMy students are all deaf or hard of hea
ffff97ed93720407d70a2787475932b0, 462270f5d5c212162fcab11afa2623cb, Kindergarten In Need of Important Materials!, It takes a special person to donate to a group of children they don't know, especially in these hard economic times, but my students are worth it.  They deserve to have the proper supplies to ensure that their long education gets off to the right start, s, My students need 17 assorted classroom materials to ensure that they can learn as much as possible this year., Hi. I teach a wonderful group of 4-5 year old Kindergarten students.  They come in wanting and willing to learn new and exciting things each and every day. I work hard to ensure that my students get the most out of the entire school year. 
\n
\nFor the mo

CREATE TABLE `projects` (
  projectid TEXT PRIMARY KEY,
  teacher_acctid TEXT,
  schoolid TEXT,
  school_ncesid TEXT,
  school_latitude REAL,
  school_longitude REAL,
  school_city TEXT,
  school_state TEXT,
  school_zip INTEGER,
  school_metro TEXT,
  school_district TEXT,
  school_county TEXT,
  school_charter TEXT,
  school_magnet TEXT,
  school_year_round TEXT,
  school_nlns TEXT,
  school_kipp TEXT,
  school_charter_ready_promise TEXT,
  teacher_prefix TEXT,
  teacher_teach_for_america TEXT,
  teacher_ny_teaching_fellow TEXT,
  primary_focus_subject TEXT,
  primary_focus_area TEXT,
  secondary_focus_subject TEXT,
  secondary_focus_area TEXT,
  resource_type TEXT,
  poverty_level TEXT,
  grade_level TEXT,
  fulfillment_labor_materials REAL,
  total_price_excluding_optional_support REAL,
  total_price_including_optional_support REAL,
  students_reached INTEGER,
  eligible_double_your_impact_match TEXT,
  eligible_almost_home_match TEXT,
  date_posted DATE
);
Sample rows from `projects`:
316ed8fb3b81402ff6ac8f721bb31192, 42d43fa6f37314365d08692e08680973, c0e6ce89b244764085691a1b8e28cb81, 063627006187, 36.57634, -119.608713, Selma, CA, 93662, None, Selma Unified Sch District, Fresno, f, f, f, f, f, f, Mrs., f, f, Literature & Writing, Literacy & Language, College & Career Prep, Applied Learning, Books, highest poverty, Grades 6-8, 30.0, 555.81, 653.89, 32, f, f, 2014-05-12
90de744e368a7e4883223ca49318ae30, 864eb466462bf704bf7a16a585ef296a, d711e47810900c96f26a5d0be30c446d, 483702008193, 32.911179, -96.72364, Dallas, TX, 75243, urban, Richardson Ind School District, Dallas, f, f, f, f, f, f, Mrs., f, f, Literacy, Literacy & Language, ESL, Literacy & Language, Books, highest poverty, Grades PreK-2, 30.0, 296.47, 348.79, 22, f, f, 2014-05-12
32943bb1063267de6ed19fc0ceb4b9a7, 37f85135259ece793213aca9d8765542, 665c3613013ba0a66e3a2a26b89f1b68, 410327000109, 45.166039, -122.414576, Colton, OR, 97017, rural, Colton School District 53, Clackamas, f, f, f, f, f, f, Mr., f, f, Literacy, Literacy & Language, Mathematics, Math & Science, Technology, high poverty, Grades PreK-2, 30.0, 430.89, 506.93, 17, f, f, 2014-05-11

CREATE TABLE `donations` (
  donationid TEXT PRIMARY KEY,
  projectid TEXT REFERENCES projects(projectid),
  donor_acctid TEXT,
  donor_city TEXT,
  donor_state TEXT,
  donor_zip TEXT,
  is_teacher_acct TEXT,
  donation_timestamp DATETIME,
  donation_to_project REAL,
  donation_optional_support REAL,
  donation_total REAL,
  dollar_amount TEXT,
  donation_included_optional_support TEXT,
  payment_method TEXT,
  payment_included_acct_credit TEXT,
  payment_included_campaign_gift_card TEXT,
  payment_included_web_purchased_gift_card TEXT,
  payment_was_promo_matched TEXT,
  via_giving_page TEXT,
  for_honoree TEXT,
  donation_message TEXT
);
Sample rows from `donations`:
431d720bc3dfd75ae445a5eaa0b0638d, ffffac55ee02a49d1abc87ba6fc61135, 22cbc920c9b5fa08dfb331422f5926b5, Peachtree City, GA, 30269, f, 2011-08-25 14:27:34.807, 42.5, 7.5, 50.0, 10_to_100, t, no_cash_received, f, t, f, f, f, f, I gave to this project because I support the efforts of this teacher with each of her students, and her school, Suder Elementary School.
fcfedba1c8a0ba77d280cace80a909f6, ffffac55ee02a49d1abc87ba6fc61135, 521f1830a77c9dbbf8119d99c6206a16, None, GA, None, f, 2011-11-04 07:54:21.552, 26.83, 4.73, 31.56, 10_to_100, t, creditcard, f, t, f, f, f, f, I donated because I want to support kids in Georgia.
3fa95d29986aa6f401c6719ced3a3ce7, ffffac55ee02a49d1abc87ba6fc61135, 1e0a63fc8141c7ba26b8b44ca0871b90, Rockville, MD, 20853, f, 2011-11-02 22:53:53.019, 55.35, 0.0, 55.35, 10_to_100, f, no_cash_received, t, f, f, f, t, f, The Spark's 'pet' projects include those which support deaf students.  With just a few days left, the Spark's donors fund half of what remains, and challenge others to pull this project through to fruition.

CREATE TABLE `resources` (
  resourceid TEXT PRIMARY KEY,
  projectid TEXT REFERENCES projects(projectid),
  vendorid INTEGER,
  vendor_name TEXT,
  project_resource_type TEXT,
  item_name TEXT,
  item_number TEXT,
  item_unit_price REAL,
  item_quantity INTEGER
);
Sample rows from `resources`:
8a1c1c45bc30d065061912fd9114fcf3, ffffc4f85b60efc5b52347df489d0238, 430, Woodwind and Brasswind, Technology, iPod nano 4th Gen 8GB (Black), 249995.001, 149.0, 4
015d2c4935c50427964a12dc3f584091, ffffac55ee02a49d1abc87ba6fc61135, 82, Best Buy for Business, Technology, Sony bloggie MHS-FS1 - camcorder - internal flash memory, BB11216668, 148.0, 1
26a02944b2f0c25f9abdeacca3ede3ee, ffff97ed93720407d70a2787475932b0, 767, Lakeshore Learning Materials, Supplies, VX748 - Best-Buy Jumbo Crayons - 12-Color Box, VX748, 69.95, 1

","projects, essays","projects.total_price_including_optional_support, projects.projectid, essays.projectid, essays.title"
disney,Which director has made the most movies?,"SELECT director, COUNT(name) FROM director GROUP BY director ORDER BY COUNT(name) DESC LIMIT 1","CREATE TABLE `director` (
  name TEXT PRIMARY KEY REFERENCES characters(movie_title),
  director TEXT
);
Sample rows from `director`:
Snow White and the Seven Dwarfs, David Hand
Pinocchio, Ben Sharpsteen
Fantasia, full credits

","CREATE TABLE `characters` (
  movie_title TEXT PRIMARY KEY,
  release_date TEXT,
  hero TEXT REFERENCES voice-actors(character),
  villian TEXT,
  song TEXT
);
Sample rows from `characters`:
Snow White and the Seven Dwarfs, 21-Dec-37, Snow White, Evil Queen, Some Day My Prince Will Come
Pinocchio, 7-Feb-40, Pinocchio, Stromboli, When You Wish upon a Star
Fantasia, 13-Nov-40, None, Chernabog, None

CREATE TABLE `director` (
  name TEXT PRIMARY KEY REFERENCES characters(movie_title),
  director TEXT
);
Sample rows from `director`:
Snow White and the Seven Dwarfs, David Hand
Pinocchio, Ben Sharpsteen
Fantasia, full credits

CREATE TABLE `movies_total_gross` (
  movie_title TEXT PRIMARY KEY REFERENCES characters(movie_title),
  release_date TEXT PRIMARY KEY,
  genre TEXT,
  MPAA_rating TEXT,
  total_gross TEXT,
  inflation_adjusted_gross TEXT
);
Sample rows from `movies_total_gross`:
Snow White and the Seven Dwarfs, Dec 21, 1937, Musical, G, $184,925,485, $5,228,953,251
Pinocchio, Feb 9, 1940, Adventure, G, $84,300,000, $2,188,229,052
Fantasia, Nov 13, 1940, Musical, G, $83,320,000, $2,187,090,808

CREATE TABLE `revenue` (
  Year INTEGER,
  Studio Entertainment[NI 1] REAL,
  Disney Consumer Products[NI 2] REAL,
  Disney Interactive[NI 3][Rev 1] INTEGER,
  Walt Disney Parks and Resorts REAL,
  Disney Media Networks TEXT,
  Total INTEGER
);
Sample rows from `revenue`:
1991, 2593.0, 724.0, None, 2794.0, None, 6111
1992, 3115.0, 1081.0, None, 3306.0, None, 7502
1993, 3673.4, 1415.1, None, 3440.7, None, 8529

CREATE TABLE `voice-actors` (
  character TEXT PRIMARY KEY,
  voice-actor TEXT,
  movie TEXT REFERENCES characters(movie_title)
);
Sample rows from `voice-actors`:
Abby Mallard, Joan Cusack, Chicken Little
Abigail Gabble, Monica Evans, The Aristocats
Abis Mal, Jason Alexander, The Return of Jafar

",director,"director, name"
legislator,State all the Facebook ID for current legislators under the democrat party.,SELECT t2.facebook_id FROM `current-terms` as t1 inner JOIN `social-media` as t2 ON t1.bioguide = t2.bioguide WHERE t1.party = 'Democrat' GROUP BY t2.facebook_id,"CREATE TABLE `current-terms` (
  address TEXT,
  bioguide TEXT PRIMARY KEY REFERENCES current(bioguide_id),
  caucus TEXT,
  chamber TEXT,
  class REAL,
  contact_form TEXT,
  district REAL,
  end TEXT PRIMARY KEY,
  fax TEXT,
  last TEXT,
  name TEXT,
  office TEXT,
  party TEXT,
  party_affiliations TEXT,
  phone TEXT,
  relation TEXT,
  rss_url TEXT,
  start TEXT,
  state TEXT,
  state_rank TEXT,
  title TEXT,
  type TEXT,
  url TEXT
);
Sample rows from `current-terms`:
None, B000944, None, None, None, None, 13.0, 1995-01-03, None, None, None, None, Democrat, None, None, None, None, 1993-01-05, OH, None, None, rep, None
None, B000944, None, None, None, None, 13.0, 1997-01-03, None, None, None, None, Democrat, None, None, None, None, 1995-01-04, OH, None, None, rep, None
None, B000944, None, None, None, None, 13.0, 1999-01-03, None, None, None, None, Democrat, None, None, None, None, 1997-01-07, OH, None, None, rep, None

CREATE TABLE `social-media` (
  bioguide TEXT PRIMARY KEY REFERENCES current(bioguide_id),
  facebook TEXT,
  facebook_id REAL,
  govtrack REAL,
  instagram TEXT,
  instagram_id REAL,
  thomas INTEGER,
  twitter TEXT,
  twitter_id REAL,
  youtube TEXT,
  youtube_id TEXT
);
Sample rows from `social-media`:
R000600, congresswomanaumuaamata, 1537155909907320.0, 412664.0, None, None, 2222, RepAmata, 3026622545.0, None, UCGdrLQbt1PYDTPsampx4t1A
Y000064, RepToddYoung, 186203844738421.0, 412428.0, None, None, 2019, RepToddYoung, 234128524.0, RepToddYoung, UCuknj4PGn91gHDNAfboZEgQ
E000295, senjoniernst, 351671691660938.0, 412667.0, senjoniernst, 1582702853.0, 2283, SenJoniErnst, 2856787757.0, None, UCLwrmtF_84FIcK3TyMs4MIw

","CREATE TABLE `current` (
  ballotpedia_id TEXT,
  bioguide_id TEXT PRIMARY KEY,
  birthday_bio DATE,
  cspan_id REAL PRIMARY KEY,
  fec_id TEXT,
  first_name TEXT,
  gender_bio TEXT,
  google_entity_id_id TEXT,
  govtrack_id INTEGER,
  house_history_id REAL,
  icpsr_id REAL,
  last_name TEXT,
  lis_id TEXT,
  maplight_id REAL,
  middle_name TEXT,
  nickname_name TEXT,
  official_full_name TEXT,
  opensecrets_id TEXT,
  religion_bio TEXT,
  suffix_name TEXT,
  thomas_id INTEGER,
  votesmart_id REAL,
  wikidata_id TEXT,
  wikipedia_id TEXT
);
Sample rows from `current`:
Sherrod Brown, B000944, 1952-11-09, 5051.0, ['H2OH13033', 'S6OH00163'], Sherrod, M, kg:/m/034s80, 400050, 9996.0, 29389.0, Brown, S307, 168.0, None, None, Sherrod Brown, N00003535, Lutheran, None, 136, 27018.0, Q381880, Sherrod Brown
Maria Cantwell, C000127, 1958-10-13, 26137.0, ['S8WA00194', 'H2WA01054'], Maria, F, kg:/m/01x68t, 300018, 10608.0, 39310.0, Cantwell, S275, 544.0, None, None, Maria Cantwell, N00007836, Roman Catholic, None, 172, 27122.0, Q22250, Maria Cantwell
Ben Cardin, C000141, 1943-10-05, 4004.0, ['H6MD03177', 'S6MD03177'], Benjamin, M, kg:/m/025k3k, 400064, 10629.0, 15408.0, Cardin, S308, 182.0, L., None, Benjamin L. Cardin, N00001955, Jewish, None, 174, 26888.0, Q723295, Ben Cardin

CREATE TABLE `current-terms` (
  address TEXT,
  bioguide TEXT PRIMARY KEY REFERENCES current(bioguide_id),
  caucus TEXT,
  chamber TEXT,
  class REAL,
  contact_form TEXT,
  district REAL,
  end TEXT PRIMARY KEY,
  fax TEXT,
  last TEXT,
  name TEXT,
  office TEXT,
  party TEXT,
  party_affiliations TEXT,
  phone TEXT,
  relation TEXT,
  rss_url TEXT,
  start TEXT,
  state TEXT,
  state_rank TEXT,
  title TEXT,
  type TEXT,
  url TEXT
);
Sample rows from `current-terms`:
None, B000944, None, None, None, None, 13.0, 1995-01-03, None, None, None, None, Democrat, None, None, None, None, 1993-01-05, OH, None, None, rep, None
None, B000944, None, None, None, None, 13.0, 1997-01-03, None, None, None, None, Democrat, None, None, None, None, 1995-01-04, OH, None, None, rep, None
None, B000944, None, None, None, None, 13.0, 1999-01-03, None, None, None, None, Democrat, None, None, None, None, 1997-01-07, OH, None, None, rep, None

CREATE TABLE `historical` (
  ballotpedia_id TEXT,
  bioguide_id TEXT PRIMARY KEY,
  bioguide_previous_id TEXT,
  birthday_bio TEXT,
  cspan_id TEXT,
  fec_id TEXT,
  first_name TEXT,
  gender_bio TEXT,
  google_entity_id_id TEXT,
  govtrack_id INTEGER,
  house_history_alternate_id TEXT,
  house_history_id REAL,
  icpsr_id REAL,
  last_name TEXT,
  lis_id TEXT,
  maplight_id TEXT,
  middle_name TEXT,
  nickname_name TEXT,
  official_full_name TEXT,
  opensecrets_id TEXT,
  religion_bio TEXT,
  suffix_name TEXT,
  thomas_id TEXT,
  votesmart_id TEXT,
  wikidata_id TEXT,
  wikipedia_id TEXT
);
Sample rows from `historical`:
None, B000226, None, 1745-04-02, None, None, Richard, M, kg:/m/02pz46, 401222, None, None, 507.0, Bassett, None, None, None, None, None, None, None, None, None, None, Q518823, Richard Bassett (politician)
None, B000546, None, 1742-03-21, None, None, Theodorick, M, kg:/m/033mf4, 401521, None, 9479.0, 786.0, Bland, None, None, None, None, None, None, None, None, None, None, Q1749152, Theodorick Bland (congressman)
None, B001086, None, 1743-06-16, None, None, Aedanus, M, kg:/m/03yccv, 402032, None, 10177.0, 1260.0, Burke, None, None, None, None, None, None, None, None, None, None, Q380504, Aedanus Burke

CREATE TABLE `historical-terms` (
  address TEXT,
  bioguide TEXT PRIMARY KEY REFERENCES historical(bioguide_id),
  chamber TEXT,
  class REAL,
  contact_form TEXT,
  district REAL,
  end TEXT,
  fax TEXT,
  last TEXT,
  middle TEXT,
  name TEXT,
  office TEXT,
  party TEXT,
  party_affiliations TEXT,
  phone TEXT,
  relation TEXT,
  rss_url TEXT,
  start TEXT,
  state TEXT,
  state_rank TEXT,
  title TEXT,
  type TEXT,
  url TEXT
);
Sample rows from `historical-terms`:
None, B000226, None, 2.0, None, None, 1793-03-03, None, None, None, None, None, Anti-Administration, None, None, None, None, 1789-03-04, DE, None, None, sen, None
None, B000546, None, None, None, 9.0, 1791-03-03, None, None, None, None, None, None, None, None, None, None, 1789-03-04, VA, None, None, rep, None
None, B001086, None, None, None, 2.0, 1791-03-03, None, None, None, None, None, None, None, None, None, None, 1789-03-04, SC, None, None, rep, None

CREATE TABLE `social-media` (
  bioguide TEXT PRIMARY KEY REFERENCES current(bioguide_id),
  facebook TEXT,
  facebook_id REAL,
  govtrack REAL,
  instagram TEXT,
  instagram_id REAL,
  thomas INTEGER,
  twitter TEXT,
  twitter_id REAL,
  youtube TEXT,
  youtube_id TEXT
);
Sample rows from `social-media`:
R000600, congresswomanaumuaamata, 1537155909907320.0, 412664.0, None, None, 2222, RepAmata, 3026622545.0, None, UCGdrLQbt1PYDTPsampx4t1A
Y000064, RepToddYoung, 186203844738421.0, 412428.0, None, None, 2019, RepToddYoung, 234128524.0, RepToddYoung, UCuknj4PGn91gHDNAfboZEgQ
E000295, senjoniernst, 351671691660938.0, 412667.0, senjoniernst, 1582702853.0, 2283, SenJoniErnst, 2856787757.0, None, UCLwrmtF_84FIcK3TyMs4MIw

","current-terms, social-media","social-media.facebook_id, current-terms.bioguide, social-media.bioguide, current-terms.party"
donor,Name the project titles meant for school whereby 65% of the students are on reduced lunch.,SELECT t1.title FROM essays as t1 inner JOIN projects as t2 ON t1.projectid = t2.projectid WHERE t2.poverty_level LIKE 'highest%',"CREATE TABLE `essays` (
  projectid TEXT,
  teacher_acctid TEXT,
  title TEXT,
  short_description TEXT,
  need_statement TEXT,
  essay TEXT
);
Sample rows from `essays`:
ffffc4f85b60efc5b52347df489d0238, c24011b20fc161ed02248e85beb59a90, iMath, It is imperative that teachers bring technology into the classroom, if students are going to be able to survive in the 21st Century. The classroom needs to be ever changing along with the outside world. The iMath project will help students by obtaining cl, My students need four iPods., I am a fourth year fifth grade math teacher. The school I teach in is a fifth and sixth grade public school and is a Title One school which means that 95% of our students get free lunch. Presently, I am in the process of completing a Masters degree in Tec
ffffac55ee02a49d1abc87ba6fc61135, 947066d0af47e0566f334566553dd6a6, Recording Rockin' Readers, Can you imagine having to translate everything you read into sign language and relate it to what you already know? Help us do just that by giving us the camera that will record our stories and..., My students need a camcorder. , Can you imagine having to translate everything you read into sign language and relate it to what you already know? Help us do just that by giving us the camera that will record our stories and interpretations! 
\n
\nMy students are all deaf or hard of hea
ffff97ed93720407d70a2787475932b0, 462270f5d5c212162fcab11afa2623cb, Kindergarten In Need of Important Materials!, It takes a special person to donate to a group of children they don't know, especially in these hard economic times, but my students are worth it.  They deserve to have the proper supplies to ensure that their long education gets off to the right start, s, My students need 17 assorted classroom materials to ensure that they can learn as much as possible this year., Hi. I teach a wonderful group of 4-5 year old Kindergarten students.  They come in wanting and willing to learn new and exciting things each and every day. I work hard to ensure that my students get the most out of the entire school year. 
\n
\nFor the mo

CREATE TABLE `projects` (
  projectid TEXT PRIMARY KEY,
  teacher_acctid TEXT,
  schoolid TEXT,
  school_ncesid TEXT,
  school_latitude REAL,
  school_longitude REAL,
  school_city TEXT,
  school_state TEXT,
  school_zip INTEGER,
  school_metro TEXT,
  school_district TEXT,
  school_county TEXT,
  school_charter TEXT,
  school_magnet TEXT,
  school_year_round TEXT,
  school_nlns TEXT,
  school_kipp TEXT,
  school_charter_ready_promise TEXT,
  teacher_prefix TEXT,
  teacher_teach_for_america TEXT,
  teacher_ny_teaching_fellow TEXT,
  primary_focus_subject TEXT,
  primary_focus_area TEXT,
  secondary_focus_subject TEXT,
  secondary_focus_area TEXT,
  resource_type TEXT,
  poverty_level TEXT,
  grade_level TEXT,
  fulfillment_labor_materials REAL,
  total_price_excluding_optional_support REAL,
  total_price_including_optional_support REAL,
  students_reached INTEGER,
  eligible_double_your_impact_match TEXT,
  eligible_almost_home_match TEXT,
  date_posted DATE
);
Sample rows from `projects`:
316ed8fb3b81402ff6ac8f721bb31192, 42d43fa6f37314365d08692e08680973, c0e6ce89b244764085691a1b8e28cb81, 063627006187, 36.57634, -119.608713, Selma, CA, 93662, None, Selma Unified Sch District, Fresno, f, f, f, f, f, f, Mrs., f, f, Literature & Writing, Literacy & Language, College & Career Prep, Applied Learning, Books, highest poverty, Grades 6-8, 30.0, 555.81, 653.89, 32, f, f, 2014-05-12
90de744e368a7e4883223ca49318ae30, 864eb466462bf704bf7a16a585ef296a, d711e47810900c96f26a5d0be30c446d, 483702008193, 32.911179, -96.72364, Dallas, TX, 75243, urban, Richardson Ind School District, Dallas, f, f, f, f, f, f, Mrs., f, f, Literacy, Literacy & Language, ESL, Literacy & Language, Books, highest poverty, Grades PreK-2, 30.0, 296.47, 348.79, 22, f, f, 2014-05-12
32943bb1063267de6ed19fc0ceb4b9a7, 37f85135259ece793213aca9d8765542, 665c3613013ba0a66e3a2a26b89f1b68, 410327000109, 45.166039, -122.414576, Colton, OR, 97017, rural, Colton School District 53, Clackamas, f, f, f, f, f, f, Mr., f, f, Literacy, Literacy & Language, Mathematics, Math & Science, Technology, high poverty, Grades PreK-2, 30.0, 430.89, 506.93, 17, f, f, 2014-05-11

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `essays` (
  projectid TEXT,
  teacher_acctid TEXT,
  title TEXT,
  short_description TEXT,
  need_statement TEXT,
  essay TEXT
);
Sample rows from `essays`:
ffffc4f85b60efc5b52347df489d0238, c24011b20fc161ed02248e85beb59a90, iMath, It is imperative that teachers bring technology into the classroom, if students are going to be able to survive in the 21st Century. The classroom needs to be ever changing along with the outside world. The iMath project will help students by obtaining cl, My students need four iPods., I am a fourth year fifth grade math teacher. The school I teach in is a fifth and sixth grade public school and is a Title One school which means that 95% of our students get free lunch. Presently, I am in the process of completing a Masters degree in Tec
ffffac55ee02a49d1abc87ba6fc61135, 947066d0af47e0566f334566553dd6a6, Recording Rockin' Readers, Can you imagine having to translate everything you read into sign language and relate it to what you already know? Help us do just that by giving us the camera that will record our stories and..., My students need a camcorder. , Can you imagine having to translate everything you read into sign language and relate it to what you already know? Help us do just that by giving us the camera that will record our stories and interpretations! 
\n
\nMy students are all deaf or hard of hea
ffff97ed93720407d70a2787475932b0, 462270f5d5c212162fcab11afa2623cb, Kindergarten In Need of Important Materials!, It takes a special person to donate to a group of children they don't know, especially in these hard economic times, but my students are worth it.  They deserve to have the proper supplies to ensure that their long education gets off to the right start, s, My students need 17 assorted classroom materials to ensure that they can learn as much as possible this year., Hi. I teach a wonderful group of 4-5 year old Kindergarten students.  They come in wanting and willing to learn new and exciting things each and every day. I work hard to ensure that my students get the most out of the entire school year. 
\n
\nFor the mo

CREATE TABLE `projects` (
  projectid TEXT PRIMARY KEY,
  teacher_acctid TEXT,
  schoolid TEXT,
  school_ncesid TEXT,
  school_latitude REAL,
  school_longitude REAL,
  school_city TEXT,
  school_state TEXT,
  school_zip INTEGER,
  school_metro TEXT,
  school_district TEXT,
  school_county TEXT,
  school_charter TEXT,
  school_magnet TEXT,
  school_year_round TEXT,
  school_nlns TEXT,
  school_kipp TEXT,
  school_charter_ready_promise TEXT,
  teacher_prefix TEXT,
  teacher_teach_for_america TEXT,
  teacher_ny_teaching_fellow TEXT,
  primary_focus_subject TEXT,
  primary_focus_area TEXT,
  secondary_focus_subject TEXT,
  secondary_focus_area TEXT,
  resource_type TEXT,
  poverty_level TEXT,
  grade_level TEXT,
  fulfillment_labor_materials REAL,
  total_price_excluding_optional_support REAL,
  total_price_including_optional_support REAL,
  students_reached INTEGER,
  eligible_double_your_impact_match TEXT,
  eligible_almost_home_match TEXT,
  date_posted DATE
);
Sample rows from `projects`:
316ed8fb3b81402ff6ac8f721bb31192, 42d43fa6f37314365d08692e08680973, c0e6ce89b244764085691a1b8e28cb81, 063627006187, 36.57634, -119.608713, Selma, CA, 93662, None, Selma Unified Sch District, Fresno, f, f, f, f, f, f, Mrs., f, f, Literature & Writing, Literacy & Language, College & Career Prep, Applied Learning, Books, highest poverty, Grades 6-8, 30.0, 555.81, 653.89, 32, f, f, 2014-05-12
90de744e368a7e4883223ca49318ae30, 864eb466462bf704bf7a16a585ef296a, d711e47810900c96f26a5d0be30c446d, 483702008193, 32.911179, -96.72364, Dallas, TX, 75243, urban, Richardson Ind School District, Dallas, f, f, f, f, f, f, Mrs., f, f, Literacy, Literacy & Language, ESL, Literacy & Language, Books, highest poverty, Grades PreK-2, 30.0, 296.47, 348.79, 22, f, f, 2014-05-12
32943bb1063267de6ed19fc0ceb4b9a7, 37f85135259ece793213aca9d8765542, 665c3613013ba0a66e3a2a26b89f1b68, 410327000109, 45.166039, -122.414576, Colton, OR, 97017, rural, Colton School District 53, Clackamas, f, f, f, f, f, f, Mr., f, f, Literacy, Literacy & Language, Mathematics, Math & Science, Technology, high poverty, Grades PreK-2, 30.0, 430.89, 506.93, 17, f, f, 2014-05-11

CREATE TABLE `donations` (
  donationid TEXT PRIMARY KEY,
  projectid TEXT REFERENCES projects(projectid),
  donor_acctid TEXT,
  donor_city TEXT,
  donor_state TEXT,
  donor_zip TEXT,
  is_teacher_acct TEXT,
  donation_timestamp DATETIME,
  donation_to_project REAL,
  donation_optional_support REAL,
  donation_total REAL,
  dollar_amount TEXT,
  donation_included_optional_support TEXT,
  payment_method TEXT,
  payment_included_acct_credit TEXT,
  payment_included_campaign_gift_card TEXT,
  payment_included_web_purchased_gift_card TEXT,
  payment_was_promo_matched TEXT,
  via_giving_page TEXT,
  for_honoree TEXT,
  donation_message TEXT
);
Sample rows from `donations`:
431d720bc3dfd75ae445a5eaa0b0638d, ffffac55ee02a49d1abc87ba6fc61135, 22cbc920c9b5fa08dfb331422f5926b5, Peachtree City, GA, 30269, f, 2011-08-25 14:27:34.807, 42.5, 7.5, 50.0, 10_to_100, t, no_cash_received, f, t, f, f, f, f, I gave to this project because I support the efforts of this teacher with each of her students, and her school, Suder Elementary School.
fcfedba1c8a0ba77d280cace80a909f6, ffffac55ee02a49d1abc87ba6fc61135, 521f1830a77c9dbbf8119d99c6206a16, None, GA, None, f, 2011-11-04 07:54:21.552, 26.83, 4.73, 31.56, 10_to_100, t, creditcard, f, t, f, f, f, f, I donated because I want to support kids in Georgia.
3fa95d29986aa6f401c6719ced3a3ce7, ffffac55ee02a49d1abc87ba6fc61135, 1e0a63fc8141c7ba26b8b44ca0871b90, Rockville, MD, 20853, f, 2011-11-02 22:53:53.019, 55.35, 0.0, 55.35, 10_to_100, f, no_cash_received, t, f, f, f, t, f, The Spark's 'pet' projects include those which support deaf students.  With just a few days left, the Spark's donors fund half of what remains, and challenge others to pull this project through to fruition.

CREATE TABLE `resources` (
  resourceid TEXT PRIMARY KEY,
  projectid TEXT REFERENCES projects(projectid),
  vendorid INTEGER,
  vendor_name TEXT,
  project_resource_type TEXT,
  item_name TEXT,
  item_number TEXT,
  item_unit_price REAL,
  item_quantity INTEGER
);
Sample rows from `resources`:
8a1c1c45bc30d065061912fd9114fcf3, ffffc4f85b60efc5b52347df489d0238, 430, Woodwind and Brasswind, Technology, iPod nano 4th Gen 8GB (Black), 249995.001, 149.0, 4
015d2c4935c50427964a12dc3f584091, ffffac55ee02a49d1abc87ba6fc61135, 82, Best Buy for Business, Technology, Sony bloggie MHS-FS1 - camcorder - internal flash memory, BB11216668, 148.0, 1
26a02944b2f0c25f9abdeacca3ede3ee, ffff97ed93720407d70a2787475932b0, 767, Lakeshore Learning Materials, Supplies, VX748 - Best-Buy Jumbo Crayons - 12-Color Box, VX748, 69.95, 1

","essays, projects","essays.title, essays.projectid, projects.projectid, projects.poverty_level"
regional_sales,"State the full name of state code ""GA"".","SELECt t FROM ( SELECt iif(statecode = 'GA', state, null) as t FROM regions ) WHERE t is NOt null","CREATE TABLE `regions` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `regions`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  Customer Names TEXT
);
Sample rows from `Customers`:
1, Avon Corp
2, WakeFern 
3, Elorac, Corp

CREATE TABLE `Products` (
  ProductID INTEGER,
  Product Name TEXT
);
Sample rows from `Products`:
1, Cookware
2, Photo Frames
3, Table Lamps

CREATE TABLE `Regions` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `Regions`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `Sales Team` (
  SalesTeamID INTEGER,
  Sales Team TEXT,
  Region TEXT
);
Sample rows from `Sales Team`:
1, Adam Hernandez, Northeast
2, Keith Griffin, Northeast
3, Jerry Green, West

CREATE TABLE `Store Locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `Store Locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

CREATE TABLE `Sales Orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `Sales Orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

",regions,"statecode, state"
sales,"Among the products that have price ranges from 100 to 150, what is the customer ID and sales ID of the product with a quantity lower than 25?","SELECT t2.customerid, t2.salesid FROM products as t1 inner JOIN sales as t2 ON t1.productid = t2.productid WHERE t1.price BETWEEN 100 AND 150 AND t2.quantity < 25","CREATE TABLE `products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

CREATE TABLE `sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Employees`:
1, Abraham, e, Bennet
2, Reginald, l, Blotchet-Halls
3, Cheryl, a, Carson

CREATE TABLE `Products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

CREATE TABLE `Sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `Sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

","products, sales","sales.customerid, sales.salesid, products.productid, sales.productid, products.price, sales.quantity"
cookbook,What kind of preparation is needed for apple juice to make a raspberry-pear couscous cake?,SELECT t2.preparation FROM recipe as t1 inner JOIN quantity as t2 ON t1.recipe_id = t2.recipe_id inner JOIN ingredient as t3 ON t3.ingredient_id = t2.ingredient_id WHERE t1.title = 'Raspberry-Pear Couscous Cake' AND t3.name = 'apple juice',"CREATE TABLE `recipe` (
  recipe_id INTEGER,
  title TEXT,
  subtitle TEXT,
  servings INTEGER,
  yield_unit TEXT,
  prep_min INTEGER,
  cook_min INTEGER,
  stnd_min INTEGER,
  source TEXT,
  intro TEXT,
  directions TEXT
);
Sample rows from `recipe`:
214, Raspberry Chiffon Pie, None, 10, 1 pie, 20, 8, 305, The California Tree Fruit Agreement, None, For crust, preheat oven to 375 degrees F.
In lightly greased 10-inch pie plate, combine graham cracker crumbs, melted butter and 1/4 cup sugar. Press evenly on bottom and up side of plate. Bake 5 minutes; cool.

For filling, in medium saucepan, combine juice or water and gelatin; let stand 5 minutes. Add 1/3 cup sugar and heat over medium heat, stirring to dissolve gelatin. In blender or food processor, puree 6 plums. Add puree and raspberries to gelatin mixture. Refrigerate until mixture begins to set about 1 hour. Stir yogurt into fruit mixture. In large bowl, beat egg whites until frothy. Gradually add cream of tartar and remaining 1/3 cup sugar and beat until stiff peaks form. Gently fold egg whites into fruit mixture so as not to reduce volume. Spoon into crust. Refrigerate 4 hours or overnight. Thinly slice remaining 2 plums and garnish top of pie.
215, Apricot Yogurt Parfaits, None, 4, None, 5, 2, 65, Produce for Better Health Foundation and 5 a Day, None, Drain canned apricots, pour 1/4 cup of the juice into saucepan or microwave-safe dish. Sprinkle gelatin over juice and let stand for 5 minutes to soften. Warm over low heat or microwave at medium (50% power) for 30 seconds or until gelatin has dissolved.
 
In food processor or blender, puree canned apricots; add lemon juice brandy, yogurt and gelatin mixture and process for 30 seconds or until combined.
 
Pour into parfait or stemmed glasses or champagne flutes. Cover and refrigerate until set, at least 1 hour or overnight.
 
Just before serving arrange fresh apricots on top. (If apricots are not available substitute kiwi slices or berries). Garnish each with a small spoonful of yogurt and sprinkling of brown sugar or mint.
216, Fresh Apricot Bavarian, None, 8, None, 5, 13, 0, The California Apricot Advisory Board, Serve in stemmed glasses and top with sliced apricots for elegant endings., Drop apricots into boiling water to cover. Return to boil and simmer for 5 minutes or until skins begin to split. Drain and rinse under cold water. Halve fruit and discard skins and pits. Puree apricots in electric blender. Combine water and gelatin in small saucepan; stir over low heat until dissolved. Mix sugar, apricot puree and yogurt with a wire whip until smooth; mix in dissolved gelatin. Sweeten to taste if desired. Chill mixture until thick. Spoon into stemmed glasses.

Note: One pound fresh apricots is 15 to 20. One and a half envelopes gelatin is 4 teaspoons.

CREATE TABLE `quantity` (
  quantity_id INTEGER,
  recipe_id INTEGER REFERENCES Nutrition(recipe_id) REFERENCES Recipe(recipe_id),
  ingredient_id INTEGER REFERENCES Ingredient(ingredient_id),
  max_qty REAL,
  min_qty REAL,
  unit TEXT,
  preparation TEXT,
  optional TEXT
);
Sample rows from `quantity`:
1, 214, 1613, 2.0, 2.0, cup(s), None, FALSE
2, 214, 3334, 0.25, 0.25, cup(s), None, FALSE
3, 214, 2222, 0.5, 0.5, cup(s), melted, FALSE

CREATE TABLE `ingredient` (
  ingredient_id INTEGER,
  category TEXT,
  name TEXT,
  plural TEXT
);
Sample rows from `ingredient`:
1, dairy, 1% lowfat cottage cheese, None
6, dairy, 1% lowfat milk, None
10, Mexican products, 10-inch flour tortilla, s

","CREATE TABLE `Ingredient` (
  ingredient_id INTEGER,
  category TEXT,
  name TEXT,
  plural TEXT
);
Sample rows from `Ingredient`:
1, dairy, 1% lowfat cottage cheese, None
6, dairy, 1% lowfat milk, None
10, Mexican products, 10-inch flour tortilla, s

CREATE TABLE `Recipe` (
  recipe_id INTEGER,
  title TEXT,
  subtitle TEXT,
  servings INTEGER,
  yield_unit TEXT,
  prep_min INTEGER,
  cook_min INTEGER,
  stnd_min INTEGER,
  source TEXT,
  intro TEXT,
  directions TEXT
);
Sample rows from `Recipe`:
214, Raspberry Chiffon Pie, None, 10, 1 pie, 20, 8, 305, The California Tree Fruit Agreement, None, For crust, preheat oven to 375 degrees F.
In lightly greased 10-inch pie plate, combine graham cracker crumbs, melted butter and 1/4 cup sugar. Press evenly on bottom and up side of plate. Bake 5 minutes; cool.

For filling, in medium saucepan, combine juice or water and gelatin; let stand 5 minutes. Add 1/3 cup sugar and heat over medium heat, stirring to dissolve gelatin. In blender or food processor, puree 6 plums. Add puree and raspberries to gelatin mixture. Refrigerate until mixture begins to set about 1 hour. Stir yogurt into fruit mixture. In large bowl, beat egg whites until frothy. Gradually add cream of tartar and remaining 1/3 cup sugar and beat until stiff peaks form. Gently fold egg whites into fruit mixture so as not to reduce volume. Spoon into crust. Refrigerate 4 hours or overnight. Thinly slice remaining 2 plums and garnish top of pie.
215, Apricot Yogurt Parfaits, None, 4, None, 5, 2, 65, Produce for Better Health Foundation and 5 a Day, None, Drain canned apricots, pour 1/4 cup of the juice into saucepan or microwave-safe dish. Sprinkle gelatin over juice and let stand for 5 minutes to soften. Warm over low heat or microwave at medium (50% power) for 30 seconds or until gelatin has dissolved.
 
In food processor or blender, puree canned apricots; add lemon juice brandy, yogurt and gelatin mixture and process for 30 seconds or until combined.
 
Pour into parfait or stemmed glasses or champagne flutes. Cover and refrigerate until set, at least 1 hour or overnight.
 
Just before serving arrange fresh apricots on top. (If apricots are not available substitute kiwi slices or berries). Garnish each with a small spoonful of yogurt and sprinkling of brown sugar or mint.
216, Fresh Apricot Bavarian, None, 8, None, 5, 13, 0, The California Apricot Advisory Board, Serve in stemmed glasses and top with sliced apricots for elegant endings., Drop apricots into boiling water to cover. Return to boil and simmer for 5 minutes or until skins begin to split. Drain and rinse under cold water. Halve fruit and discard skins and pits. Puree apricots in electric blender. Combine water and gelatin in small saucepan; stir over low heat until dissolved. Mix sugar, apricot puree and yogurt with a wire whip until smooth; mix in dissolved gelatin. Sweeten to taste if desired. Chill mixture until thick. Spoon into stemmed glasses.

Note: One pound fresh apricots is 15 to 20. One and a half envelopes gelatin is 4 teaspoons.

CREATE TABLE `Nutrition` (
  recipe_id INTEGER REFERENCES Recipe(recipe_id),
  protein REAL,
  carbo REAL,
  alcohol REAL,
  total_fat REAL,
  sat_fat REAL,
  cholestrl REAL,
  sodium REAL,
  iron REAL,
  vitamin_c REAL,
  vitamin_a REAL,
  fiber REAL,
  pcnt_cal_carb REAL,
  pcnt_cal_fat REAL,
  pcnt_cal_prot REAL,
  calories REAL
);
Sample rows from `Nutrition`:
214, 5.47, 41.29, 0.0, 11.53, 2.21, 1.39, 260.78, 0.81, 8.89, 586.2, 0.87, 56.8, 35.68, 7.53, 290.79
215, 5.7, 23.75, 1.93, 1.08, 0.58, 3.48, 46.17, 0.57, 13.02, 2738.24, 0.62, 67.38, 6.89, 16.17, 141.01
216, 4.9, 26.88, 0.0, 1.1, 0.58, 3.46, 41.79, 0.37, 6.13, 1521.1, 0.34, 78.45, 7.24, 14.3, 137.06

CREATE TABLE `Quantity` (
  quantity_id INTEGER,
  recipe_id INTEGER REFERENCES Nutrition(recipe_id) REFERENCES Recipe(recipe_id),
  ingredient_id INTEGER REFERENCES Ingredient(ingredient_id),
  max_qty REAL,
  min_qty REAL,
  unit TEXT,
  preparation TEXT,
  optional TEXT
);
Sample rows from `Quantity`:
1, 214, 1613, 2.0, 2.0, cup(s), None, FALSE
2, 214, 3334, 0.25, 0.25, cup(s), None, FALSE
3, 214, 2222, 0.5, 0.5, cup(s), melted, FALSE

","recipe, quantity, ingredient","quantity.preparation, recipe.recipe_id, quantity.recipe_id, ingredient.ingredient_id, quantity.ingredient_id, recipe.title, ingredient.name"
retails,How many orders of more than 10 items have been returned?,SELECT COUNT(l_linenumber) FrOM lineitem WHErE l_quantity > 10 AND l_returnflag = 'r',"CREATE TABLE `lineitem` (
  l_shipdate DATE,
  l_orderkey INTEGER PRIMARY KEY REFERENCES orders(o_orderkey),
  l_discount REAL,
  l_extendedprice REAL,
  l_suppkey INTEGER REFERENCES partsupp(ps_suppkey),
  l_quantity INTEGER,
  l_returnflag TEXT,
  l_partkey INTEGER REFERENCES partsupp(ps_partkey),
  l_linestatus TEXT,
  l_tax REAL,
  l_commitdate DATE,
  l_receiptdate DATE,
  l_shipmode TEXT,
  l_linenumber INTEGER PRIMARY KEY,
  l_shipinstruct TEXT,
  l_comment TEXT
);
Sample rows from `lineitem`:
1995-08-16, 1, 0.1, 58303.08, 6296, 33, N, 98768, O, 0.06, 1995-07-12, 1995-09-14, RAIL, 1, NONE, carefully bo
1995-08-13, 1, 0.09, 16947.7, 8776, 10, N, 23771, O, 0.08, 1995-07-09, 1995-08-27, TRUCK, 2, TAKE BACK RETURN, blithely regular pac
1995-06-17, 1, 0.1, 63642.9, 3859, 34, N, 113858, O, 0.08, 1995-05-22, 1995-06-30, SHIP, 3, COLLECT COD, ironic accounts sleep furiously silen

","CREATE TABLE `customer` (
  c_custkey INTEGER,
  c_mktsegment TEXT,
  c_nationkey INTEGER REFERENCES nation(n_nationkey),
  c_name TEXT,
  c_address TEXT,
  c_phone TEXT,
  c_acctbal REAL,
  c_comment TEXT
);
Sample rows from `customer`:
1, BUILDING, 8, Customer#000000001, KwX3hMHjZ6, 937-241-3198, 3560.03, ironic excuses detect slyly silent requests. requests according to the exc
2, MACHINERY, 16, Customer#000000002, ioUn,eqTTXOdo, 906-965-7556, 7550.21, final express accounts mold slyly. ironic accounts cajole! quickly express a
3, FURNITURE, 11, Customer#000000003, YddJqmIdouNT9Yj, 328-750-7603, -926.96, carefully express foxes sleep carefully. pending platelets sleep thinly for t

CREATE TABLE `lineitem` (
  l_shipdate DATE,
  l_orderkey INTEGER PRIMARY KEY REFERENCES orders(o_orderkey),
  l_discount REAL,
  l_extendedprice REAL,
  l_suppkey INTEGER REFERENCES partsupp(ps_suppkey),
  l_quantity INTEGER,
  l_returnflag TEXT,
  l_partkey INTEGER REFERENCES partsupp(ps_partkey),
  l_linestatus TEXT,
  l_tax REAL,
  l_commitdate DATE,
  l_receiptdate DATE,
  l_shipmode TEXT,
  l_linenumber INTEGER PRIMARY KEY,
  l_shipinstruct TEXT,
  l_comment TEXT
);
Sample rows from `lineitem`:
1995-08-16, 1, 0.1, 58303.08, 6296, 33, N, 98768, O, 0.06, 1995-07-12, 1995-09-14, RAIL, 1, NONE, carefully bo
1995-08-13, 1, 0.09, 16947.7, 8776, 10, N, 23771, O, 0.08, 1995-07-09, 1995-08-27, TRUCK, 2, TAKE BACK RETURN, blithely regular pac
1995-06-17, 1, 0.1, 63642.9, 3859, 34, N, 113858, O, 0.08, 1995-05-22, 1995-06-30, SHIP, 3, COLLECT COD, ironic accounts sleep furiously silen

CREATE TABLE `nation` (
  n_nationkey INTEGER,
  n_name TEXT,
  n_regionkey INTEGER REFERENCES region(r_regionkey),
  n_comment TEXT
);
Sample rows from `nation`:
0, ALGERIA, 0, slyly express pinto beans cajole idly. deposits use blithely unusual packages? fluffily final accounts x-r
1, ARGENTINA, 1, instructions detect blithely stealthily pending packages
2, BRAZIL, 1, blithely unusual deposits are quickly--

CREATE TABLE `orders` (
  o_orderdate DATE,
  o_orderkey INTEGER,
  o_custkey INTEGER REFERENCES customer(c_custkey),
  o_orderpriority TEXT,
  o_shippriority INTEGER,
  o_clerk TEXT,
  o_orderstatus TEXT,
  o_totalprice REAL,
  o_comment TEXT
);
Sample rows from `orders`:
1995-04-19, 1, 73100, 4-NOT SPECIFIED, 0, Clerk#000000916, P, 203198.56, final packages sleep blithely packa
1996-11-04, 2, 92861, 1-URGENT, 0, Clerk#000000373, O, 317719.99, final excuses about the ironic even deposits detect express request
1992-02-15, 3, 44875, 1-URGENT, 0, Clerk#000000485, F, 146674.98, final final deposits cajole foxes. blithely pendin

CREATE TABLE `part` (
  p_partkey INTEGER,
  p_type TEXT,
  p_size INTEGER,
  p_brand TEXT,
  p_name TEXT,
  p_container TEXT,
  p_mfgr TEXT,
  p_retailprice REAL,
  p_comment TEXT
);
Sample rows from `part`:
1, LARGE PLATED TIN, 31, Brand#43, burlywood plum powder puff mint, LG BAG, Manufacturer#4, 901.0, blithely busy reque
2, LARGE POLISHED STEEL, 4, Brand#55, hot spring dodger dim light, LG CASE, Manufacturer#5, 902.0, even ironic requests s
3, STANDARD PLATED COPPER, 30, Brand#53, dark slate grey steel misty, WRAP CASE, Manufacturer#5, 903.0, slyly ironic fox

CREATE TABLE `partsupp` (
  ps_partkey INTEGER PRIMARY KEY REFERENCES part(p_partkey),
  ps_suppkey INTEGER PRIMARY KEY REFERENCES supplier(s_suppkey),
  ps_supplycost REAL,
  ps_availqty INTEGER,
  ps_comment TEXT
);
Sample rows from `partsupp`:
1, 2, 400.75, 1111, carefully ironic deposits use against the carefully unusual accounts. slyly silent platelets nag quickly even
1, 2502, 702.61, 3999, slyly regular accounts serve carefully. asymptotes after the slyly even instructions cajole quickly ironic requests. pending dugouts about the slyly 
1, 5002, 383.95, 7411, carefully special ideas are slyly. slyly ironic epitaphs use pending pending foxes. furiously express pinto beans lose quiet even requests: special final packages ar

CREATE TABLE `region` (
  r_regionkey INTEGER,
  r_name TEXT,
  r_comment TEXT
);
Sample rows from `region`:
0, AFRICA, asymptotes sublate after the r
1, AMERICA, requests affix quickly final tithes. blithely even packages above the a
2, ASIA, accounts cajole carefully according to the carefully exp

CREATE TABLE `supplier` (
  s_suppkey INTEGER,
  s_nationkey INTEGER REFERENCES nation(n_nationkey),
  s_comment TEXT,
  s_name TEXT,
  s_address TEXT,
  s_phone TEXT,
  s_acctbal REAL
);
Sample rows from `supplier`:
1, 13, blithely final pearls are. instructions thra, Supplier#000000001, ,wWs4pnykQOFl8mgVCU8EZMXqZs1w, 800-807-9579, 3082.86
2, 5, requests integrate fluffily. fluffily ironic deposits wake. bold, Supplier#000000002, WkXT6MSAJrp4qWq3W9N, 348-617-6055, 3009.73
3, 22, carefully express ideas shall have to unwin, Supplier#000000003, KjUqa42JEHaRDVQTHV6Yq2h, 471-986-9888, 9159.78

",lineitem,"l_linenumber, l_quantity, l_returnflag"
language_corpus,Calculate the average of repetitions in the pages that have a total of 100 different words.,SELECT cast(SUM(t2.occurrences) as real) / COUNT(t1.page) FROM pages as t1 inner JOIN pages_words as t2 ON t1.pid = t2.pid WHERE t1.words = 100,"CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

","CREATE TABLE `langs` (
  lid INTEGER,
  lang TEXT PRIMARY KEY,
  locale TEXT PRIMARY KEY,
  pages INTEGER,
  words INTEGER
);
Sample rows from `langs`:
1, ca, ca_ES, 1129144, 2764996

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
langs, 1
pages, 1129144
words, 2764996

CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `langs_words` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `langs_words`:
1, 1, 242
1, 2, 16841
1, 3, 48700

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

","pages, pages_words","pages_words.occurrences, pages.page, pages.pid, pages_words.pid, pages.words"
airline,"Provide the date and tail number of flight with air carrier ""Ross Aviation Inc.: GWE"".","SELECT t1.fl_date, t1.tail_num FROM airlines as t1 inner JOIN `air carriers` as t2 ON t1.op_carrier_airline_id = t2.code WHERE t2.description = 'Ross Aviation Inc.: GWE'","CREATE TABLE `airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

CREATE TABLE `air carriers` (
  Code INTEGER,
  Description TEXT
);
Sample rows from `air carriers`:
19031, Mackey International Inc.: MAC
19032, Munz Northern Airlines Inc.: XY
19033, Cochise Airlines Inc.: COC

","CREATE TABLE `Air Carriers` (
  Code INTEGER,
  Description TEXT
);
Sample rows from `Air Carriers`:
19031, Mackey International Inc.: MAC
19032, Munz Northern Airlines Inc.: XY
19033, Cochise Airlines Inc.: COC

CREATE TABLE `Airports` (
  Code TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `Airports`:
01A, Afognak Lake, AK: Afognak Lake Airport
03A, Granite Mountain, AK: Bear Creek Mining Strip
04A, Lik, AK: Lik Mining Camp

CREATE TABLE `Airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `Airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

","airlines, air carriers","airlines.fl_date, airlines.tail_num, airlines.op_carrier_airline_id, air carriers.code, air carriers.description"
authors,"How many papers are published in year 2000 under the conference ""SSPR""?",SELECT COUNT(t1.id) FROM paper as t1 inner JOIN conference as t2 ON t1.conferenceid = t2.id WHERE t1.year = 2000 AND t2.shortname = 'SSPR',"CREATE TABLE `paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

","CREATE TABLE `Author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `Author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

CREATE TABLE `Conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

CREATE TABLE `Journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `Paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `Paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `PaperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `PaperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

","paper, conference","paper.id, paper.conferenceid, conference.id, paper.year, conference.shortname"
regional_sales,"In 2020, what were the total orders of all stores in Maricopa County?",SELECT SUM(case when t2.county = 'Maricopa county' AND orderdate LIKE '%/%/20' then 1 else 0 end) FROM `sales orders` as t1 inner JOIN `store locations` as t2 ON t2.storeID = t1._storeID,"CREATE TABLE `sales orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `sales orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

CREATE TABLE `store locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `store locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  Customer Names TEXT
);
Sample rows from `Customers`:
1, Avon Corp
2, WakeFern 
3, Elorac, Corp

CREATE TABLE `Products` (
  ProductID INTEGER,
  Product Name TEXT
);
Sample rows from `Products`:
1, Cookware
2, Photo Frames
3, Table Lamps

CREATE TABLE `Regions` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `Regions`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `Sales Team` (
  SalesTeamID INTEGER,
  Sales Team TEXT,
  Region TEXT
);
Sample rows from `Sales Team`:
1, Adam Hernandez, Northeast
2, Keith Griffin, Northeast
3, Jerry Green, West

CREATE TABLE `Store Locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `Store Locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

CREATE TABLE `Sales Orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `Sales Orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

","sales orders, store locations","store locations.county, orderdate, store locations.storeID, sales orders._storeID"
authors,"Write down the author name, affiliation, jounal short name and full name of the paper ""Decreased Saliva Secretion and Down-Regulation of AQP5 in Submandibular Gland in Irradiated Rats"".","SELECT t2.name, t2.affiliation, t3.Shortname, t3.Fullname FROM paper as t1 inner JOIN paperAuthor as t2 ON t1.id = t2.paperid inner JOIN journal as t3 ON t1.journalid = t3.id WHERE t1.title = 'Decreased Saliva Secretion and Down-Regulation of AQP5 in Submandibular Gland in Irradiated Rats'","CREATE TABLE `paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `paperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `paperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

CREATE TABLE `journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

","CREATE TABLE `Author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `Author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

CREATE TABLE `Conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

CREATE TABLE `Journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `Paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `Paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `PaperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `PaperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

","paper, paperAuthor, journal","paperAuthor.name, paperAuthor.affiliation, journal.Shortname, journal.Fullname, paper.id, paperAuthor.paperid, paper.journalid, journal.id, paper.title"
car_retails,What is the full address of the office where 4 people work and one of them is Sales Representation?,"SELECT t1.addressline1, t1.addressline2 FROM customers as t1 inner JOIN employees as t2 ON t1.salesrepemployeenumber = t2.employeenumber WHERE t2.jobtitle = 'Sales Rep'","CREATE TABLE `customers` (
  customerNumber INTEGER,
  customerName TEXT,
  contactLastName TEXT,
  contactFirstName TEXT,
  phone TEXT,
  addressLine1 TEXT,
  addressLine2 TEXT,
  city TEXT,
  state TEXT,
  postalCode TEXT,
  country TEXT,
  salesRepEmployeeNumber INTEGER REFERENCES employees(employeeNumber),
  creditLimit REAL
);
Sample rows from `customers`:
103, Atelier graphique, Schmitt, Carine , 40.32.2555, 54, rue Royale, None, Nantes, None, 44000, France, 1370, 21000.0
112, Signal Gift Stores, King, Jean, 7025551838, 8489 Strong St., None, Las Vegas, NV, 83030, USA, 1166, 71800.0
114, Australian Collectors, Co., Ferguson, Peter, 03 9520 4555, 636 St Kilda Road, Level 3, Melbourne, Victoria, 3004, Australia, 1611, 117300.0

CREATE TABLE `employees` (
  employeeNumber INTEGER,
  lastName TEXT,
  firstName TEXT,
  extension TEXT,
  email TEXT,
  officeCode TEXT REFERENCES offices(officeCode),
  reportsTo INTEGER REFERENCES employees(employeeNumber),
  jobTitle TEXT
);
Sample rows from `employees`:
1002, Murphy, Diane, x5800, dmurphy@classicmodelcars.com, 1, None, President
1056, Patterson, Mary, x4611, mpatterso@classicmodelcars.com, 1, 1002, VP Sales
1076, Firrelli, Jeff, x9273, jfirrelli@classicmodelcars.com, 1, 1002, VP Marketing

","CREATE TABLE `offices` (
  officeCode TEXT PRIMARY KEY,
  city TEXT,
  phone TEXT,
  addressLine1 TEXT,
  addressLine2 TEXT,
  state TEXT,
  country TEXT,
  postalCode TEXT,
  territory TEXT
);
Sample rows from `offices`:
1, San Francisco, +1 650 219 4782, 100 Market Street, Suite 300, CA, USA, 94080, NA
2, Boston, +1 215 837 0825, 1550 Court Place, Suite 102, MA, USA, 02107, NA
3, NYC, +1 212 555 3000, 523 East 53rd Street, apt. 5A, NY, USA, 10022, NA

CREATE TABLE `employees` (
  employeeNumber INTEGER,
  lastName TEXT,
  firstName TEXT,
  extension TEXT,
  email TEXT,
  officeCode TEXT REFERENCES offices(officeCode),
  reportsTo INTEGER REFERENCES employees(employeeNumber),
  jobTitle TEXT
);
Sample rows from `employees`:
1002, Murphy, Diane, x5800, dmurphy@classicmodelcars.com, 1, None, President
1056, Patterson, Mary, x4611, mpatterso@classicmodelcars.com, 1, 1002, VP Sales
1076, Firrelli, Jeff, x9273, jfirrelli@classicmodelcars.com, 1, 1002, VP Marketing

CREATE TABLE `customers` (
  customerNumber INTEGER,
  customerName TEXT,
  contactLastName TEXT,
  contactFirstName TEXT,
  phone TEXT,
  addressLine1 TEXT,
  addressLine2 TEXT,
  city TEXT,
  state TEXT,
  postalCode TEXT,
  country TEXT,
  salesRepEmployeeNumber INTEGER REFERENCES employees(employeeNumber),
  creditLimit REAL
);
Sample rows from `customers`:
103, Atelier graphique, Schmitt, Carine , 40.32.2555, 54, rue Royale, None, Nantes, None, 44000, France, 1370, 21000.0
112, Signal Gift Stores, King, Jean, 7025551838, 8489 Strong St., None, Las Vegas, NV, 83030, USA, 1166, 71800.0
114, Australian Collectors, Co., Ferguson, Peter, 03 9520 4555, 636 St Kilda Road, Level 3, Melbourne, Victoria, 3004, Australia, 1611, 117300.0

CREATE TABLE `orders` (
  orderNumber INTEGER,
  orderDate DATE,
  requiredDate DATE,
  shippedDate DATE,
  status TEXT,
  comments TEXT,
  customerNumber INTEGER REFERENCES customers(customerNumber)
);
Sample rows from `orders`:
10100, 2003-01-06, 2003-01-13, 2003-01-10, Shipped, None, 363
10101, 2003-01-09, 2003-01-18, 2003-01-11, Shipped, Check on availability., 128
10102, 2003-01-10, 2003-01-18, 2003-01-14, Shipped, None, 181

CREATE TABLE `payments` (
  customerNumber INTEGER PRIMARY KEY REFERENCES customers(customerNumber),
  checkNumber TEXT PRIMARY KEY,
  paymentDate DATE,
  amount REAL
);
Sample rows from `payments`:
103, HQ336336, 2004-10-19, 6066.78
103, JM555205, 2003-06-05, 14571.44
103, OM314933, 2004-12-18, 1676.14

CREATE TABLE `productlines` (
  productLine TEXT PRIMARY KEY,
  textDescription TEXT,
  htmlDescription TEXT,
  image BLOB
);
Sample rows from `productlines`:
Classic Cars, Attention car enthusiasts: Make your wildest car ownership dreams come true. Whether you are looking for classic muscle cars, dream sports cars or movie-inspired miniatures, you will find great choices in this category. These replicas feature superb atten, None, None
Motorcycles, Our motorcycles are state of the art replicas of classic as well as contemporary motorcycle legends such as Harley Davidson, Ducati and Vespa. Models contain stunning details such as official logos, rotating wheels, working kickstand, front suspension, ge, None, None
Planes, Unique, diecast airplane and helicopter replicas suitable for collections, as well as home, office or classroom decorations. Models contain stunning details such as official logos and insignias, rotating jet engines and propellers, retractable wheels, and, None, None

CREATE TABLE `products` (
  productCode TEXT PRIMARY KEY,
  productName TEXT,
  productLine TEXT REFERENCES productlines(productLine),
  productScale TEXT,
  productVendor TEXT,
  productDescription TEXT,
  quantityInStock INTEGER,
  buyPrice REAL,
  MSRP REAL
);
Sample rows from `products`:
S10_1678, 1969 Harley Davidson Ultimate Chopper, Motorcycles, 1:10, Min Lin Diecast, This replica features working kickstand, front suspension, gear-shift lever, footbrake lever, drive chain, wheels and steering. All parts are particularly delicate due to their precise scale and require special care and attention., 7933, 48.81, 95.7
S10_1949, 1952 Alpine Renault 1300, Classic Cars, 1:10, Classic Metal Creations, Turnable front wheels; steering function; detailed interior; detailed engine; opening hood; opening trunk; opening doors; and detailed chassis., 7305, 98.58, 214.3
S10_2016, 1996 Moto Guzzi 1100i, Motorcycles, 1:10, Highway 66 Mini Classics, Official Moto Guzzi logos and insignias, saddle bags located on side of motorcycle, detailed engine, working steering, working suspension, two leather seats, luggage rack, dual exhaust pipes, small saddle bag located on handle bars, two-tone paint with chrome accents, superior die-cast detail , rotating wheels , working kick stand, diecast metal with plastic parts and baked enamel finish., 6625, 68.99, 118.94

CREATE TABLE `orderdetails` (
  orderNumber INTEGER PRIMARY KEY REFERENCES orders(None),
  productCode TEXT PRIMARY KEY REFERENCES products(None),
  quantityOrdered INTEGER,
  priceEach REAL,
  orderLineNumber INTEGER
);
Sample rows from `orderdetails`:
10100, S18_1749, 30, 136.0, 3
10100, S18_2248, 50, 55.09, 2
10100, S18_4409, 22, 75.46, 4

","customers, employees","customers.addressline1, customers.addressline2, customers.salesrepemployeenumber, employees.employeenumber, employees.jobtitle"
simpson_episodes,What are the roles of the cast and crew from countries other than the USA?,SELECT t2.role FROM person as t1 inner JOIN credit as t2 ON t1.name = t2.person WHERE t1.birth_country != 'USA';,"CREATE TABLE `person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","person, credit","credit.role, person.name, credit.person, person.birth_country"
world_development_indicators,"In 2005, which series codes use the International Monetary Fund, Balance of Payments Statistics Yearbook and data files source?","SELECT t1.seriescode, t2.source FROM footnotes as t1 inner JOIN series as t2 ON t1.seriescode = t2.seriesCode WHERE t1.year LIKE '%2005%' AND t2.source LIKE 'International Monetary Fund%'","CREATE TABLE `footnotes` (
  Countrycode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Year TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `footnotes`:
ABW, AG.LND.FRST.K2, YR1990, Not specified
ABW, AG.LND.FRST.K2, YR2000, Not specified
ABW, AG.LND.FRST.K2, YR2005, Not specified

CREATE TABLE `series` (
  SeriesCode TEXT PRIMARY KEY,
  Topic TEXT,
  IndicatorName TEXT,
  ShortDefinition TEXT,
  LongDefinition TEXT,
  UnitOfMeasure TEXT,
  Periodicity TEXT,
  BasePeriod TEXT,
  OtherNotes INTEGER,
  AggregationMethod TEXT,
  LimitationsAndExceptions TEXT,
  NotesFromOriginalSource TEXT,
  GeneralComments TEXT,
  Source TEXT,
  StatisticalConceptAndMethodology TEXT,
  DevelopmentRelevance TEXT,
  RelatedSourceLinks TEXT,
  OtherWebLinks INTEGER,
  RelatedIndicators INTEGER,
  LicenseType TEXT
);
Sample rows from `series`:
BN.KLT.DINV.CD, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net (BoP, current US$), , Foreign direct investment are the net inflows of investment to acquire a lasting management interest (10 percent or more of voting stock) in an enterprise operating in an economy other than that of the investor. It is the sum of equity capital, reinvestme, , Annual, , None, , , , Note: Data are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6) and are only available from 2005 onwards. In BPM6, the headings of the financial account have been changed from credits and debits to net acquisition of financial ass, International Monetary Fund, Balance of Payments Statistics Yearbook and data files., , , , None, None, Open
BX.KLT.DINV.WD.GD.ZS, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net inflows (% of GDP), , Foreign direct investment are the net inflows of investment to acquire a lasting management interest (10 percent or more of voting stock) in an enterprise operating in an economy other than that of the investor. It is the sum of equity capital, reinvestme, , Annual, , None, Weighted average, FDI data do not give a complete picture of international investment in an economy. Balance of payments data on FDI do not include capital raised locally, an important source of investment financing in some developing countries. In addition, FDI data omit , , Note: Data starting from 2005 are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6)., International Monetary Fund, International Financial Statistics and Balance of Payments databases, World Bank, International Debt Statistics, and World Bank and OECD GDP estimates., Data on equity flows are based on balance of payments data reported by the International Monetary Fund (IMF). Foreign direct investment (FDI) data are supplemented by the World Bank staff estimates using data from the United Nations Conference on Trade an, Private financial flows - equity and debt - account for the bulk of development finance. Equity flows comprise foreign direct investment (FDI) and portfolio equity. Debt flows are financing raised through bond issuance, bank lending, and supplier credits., , None, None, Open
BX.KLT.DINV.CD.WD, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net inflows (BoP, current US$), , Foreign direct investment refers to direct investment equity flows in the reporting economy. It is the sum of equity capital, reinvestment of earnings, and other capital. Direct investment is a category of cross-border investment associated with a residen, , Annual, , None, Sum, FDI data do not give a complete picture of international investment in an economy. Balance of payments data on FDI do not include capital raised locally, an important source of investment financing in some developing countries. In addition, FDI data omit , , Note: Data starting from 2005 are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6)., International Monetary Fund, Balance of Payments database, supplemented by data from the United Nations Conference on Trade and Development and official national sources., Data on equity flows are based on balance of payments data reported by the International Monetary Fund (IMF). Foreign direct investment (FDI) data are supplemented by the World Bank staff estimates using data from the United Nations Conference on Trade an, Private financial flows - equity and debt - account for the bulk of development finance. Equity flows comprise foreign direct investment (FDI) and portfolio equity. Debt flows are financing raised through bond issuance, bank lending, and supplier credits., , None, None, Open

","CREATE TABLE `Country` (
  CountryCode TEXT PRIMARY KEY,
  ShortName TEXT,
  TableName TEXT,
  LongName TEXT,
  Alpha2Code TEXT,
  CurrencyUnit TEXT,
  SpecialNotes TEXT,
  Region TEXT,
  IncomeGroup TEXT,
  Wb2Code TEXT,
  NationalAccountsBaseYear TEXT,
  NationalAccountsReferenceYear TEXT,
  SnaPriceValuation TEXT,
  LendingCategory TEXT,
  OtherGroups TEXT,
  SystemOfNationalAccounts TEXT,
  AlternativeConversionFactor TEXT,
  PppSurveyYear TEXT,
  BalanceOfPaymentsManualInUse TEXT,
  ExternalDebtReportingStatus TEXT,
  SystemOfTrade TEXT,
  GovernmentAccountingConcept TEXT,
  ImfDataDisseminationStandard TEXT,
  LatestPopulationCensus TEXT,
  LatestHouseholdSurvey TEXT,
  SourceOfMostRecentIncomeAndExpenditureData TEXT,
  VitalRegistrationComplete TEXT,
  LatestAgriculturalCensus TEXT,
  LatestIndustrialData INTEGER,
  LatestTradeData INTEGER,
  LatestWaterWithdrawalData INTEGER
);
Sample rows from `Country`:
AFG, Afghanistan, Afghanistan, Islamic State of Afghanistan, AF, Afghan afghani, Fiscal year end: March 20; reporting period for national accounts data: FY (from 2013 are CY). National accounts data are sourced from the IMF and differ from the Central Statistics Organization numbers due to exclusion of the opium economy., South Asia, Low income, AF, 2002/03, , Value added at basic prices (VAB), IDA, HIPC, Country uses the 1993 System of National Accounts methodology., , , , Actual, General trade system, Consolidated central government, General Data Dissemination System (GDDS), 1979, Multiple Indicator Cluster Survey (MICS), 2010/11, Integrated household survey (IHS), 2008, , 2013/14, None, 2013, 2000
ALB, Albania, Albania, Republic of Albania, AL, Albanian lek, , Europe & Central Asia, Upper middle income, AL, Original chained constant price data are rescaled., 1996, Value added at basic prices (VAB), IBRD, , Country uses the 1993 System of National Accounts methodology., , Rolling, IMF Balance of Payments Manual, 6th edition., Actual, General trade system, Budgetary central government, General Data Dissemination System (GDDS), 2011, Demographic and Health Survey (DHS), 2008/09, Living Standards Measurement Study Survey (LSMS), 2011/12, Yes, 2012, 2011, 2013, 2006
DZA, Algeria, Algeria, People's Democratic Republic of Algeria, DZ, Algerian dinar, , Middle East & North Africa, Upper middle income, DZ, 1980, , Value added at basic prices (VAB), IBRD, , Country uses the 1968 System of National Accounts methodology., , 2011, IMF Balance of Payments Manual, 6th edition., Actual, Special trade system, Budgetary central government, General Data Dissemination System (GDDS), 2008, Multiple Indicator Cluster Survey (MICS), 2012, Integrated household survey (IHS), 1995, , , 2010, 2013, 2001

CREATE TABLE `Series` (
  SeriesCode TEXT PRIMARY KEY,
  Topic TEXT,
  IndicatorName TEXT,
  ShortDefinition TEXT,
  LongDefinition TEXT,
  UnitOfMeasure TEXT,
  Periodicity TEXT,
  BasePeriod TEXT,
  OtherNotes INTEGER,
  AggregationMethod TEXT,
  LimitationsAndExceptions TEXT,
  NotesFromOriginalSource TEXT,
  GeneralComments TEXT,
  Source TEXT,
  StatisticalConceptAndMethodology TEXT,
  DevelopmentRelevance TEXT,
  RelatedSourceLinks TEXT,
  OtherWebLinks INTEGER,
  RelatedIndicators INTEGER,
  LicenseType TEXT
);
Sample rows from `Series`:
BN.KLT.DINV.CD, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net (BoP, current US$), , Foreign direct investment are the net inflows of investment to acquire a lasting management interest (10 percent or more of voting stock) in an enterprise operating in an economy other than that of the investor. It is the sum of equity capital, reinvestme, , Annual, , None, , , , Note: Data are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6) and are only available from 2005 onwards. In BPM6, the headings of the financial account have been changed from credits and debits to net acquisition of financial ass, International Monetary Fund, Balance of Payments Statistics Yearbook and data files., , , , None, None, Open
BX.KLT.DINV.WD.GD.ZS, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net inflows (% of GDP), , Foreign direct investment are the net inflows of investment to acquire a lasting management interest (10 percent or more of voting stock) in an enterprise operating in an economy other than that of the investor. It is the sum of equity capital, reinvestme, , Annual, , None, Weighted average, FDI data do not give a complete picture of international investment in an economy. Balance of payments data on FDI do not include capital raised locally, an important source of investment financing in some developing countries. In addition, FDI data omit , , Note: Data starting from 2005 are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6)., International Monetary Fund, International Financial Statistics and Balance of Payments databases, World Bank, International Debt Statistics, and World Bank and OECD GDP estimates., Data on equity flows are based on balance of payments data reported by the International Monetary Fund (IMF). Foreign direct investment (FDI) data are supplemented by the World Bank staff estimates using data from the United Nations Conference on Trade an, Private financial flows - equity and debt - account for the bulk of development finance. Equity flows comprise foreign direct investment (FDI) and portfolio equity. Debt flows are financing raised through bond issuance, bank lending, and supplier credits., , None, None, Open
BX.KLT.DINV.CD.WD, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net inflows (BoP, current US$), , Foreign direct investment refers to direct investment equity flows in the reporting economy. It is the sum of equity capital, reinvestment of earnings, and other capital. Direct investment is a category of cross-border investment associated with a residen, , Annual, , None, Sum, FDI data do not give a complete picture of international investment in an economy. Balance of payments data on FDI do not include capital raised locally, an important source of investment financing in some developing countries. In addition, FDI data omit , , Note: Data starting from 2005 are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6)., International Monetary Fund, Balance of Payments database, supplemented by data from the United Nations Conference on Trade and Development and official national sources., Data on equity flows are based on balance of payments data reported by the International Monetary Fund (IMF). Foreign direct investment (FDI) data are supplemented by the World Bank staff estimates using data from the United Nations Conference on Trade an, Private financial flows - equity and debt - account for the bulk of development finance. Equity flows comprise foreign direct investment (FDI) and portfolio equity. Debt flows are financing raised through bond issuance, bank lending, and supplier credits., , None, None, Open

CREATE TABLE `CountryNotes` (
  Countrycode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Description TEXT
);
Sample rows from `CountryNotes`:
ABW, EG.EGY.PRIM.PP.KD, Sources: Estimated based on UN Energy Statistics (2014); World Development Indicators, WDI (2014)
ABW, EG.ELC.RNEW.ZS, Sources: UN Energy Statistics (2014)
ABW, EG.FEC.RNEW.ZS, Sources: UN Energy Statistics (2014)

CREATE TABLE `Footnotes` (
  Countrycode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Year TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `Footnotes`:
ABW, AG.LND.FRST.K2, YR1990, Not specified
ABW, AG.LND.FRST.K2, YR2000, Not specified
ABW, AG.LND.FRST.K2, YR2005, Not specified

CREATE TABLE `Indicators` (
  CountryName TEXT,
  CountryCode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  IndicatorName TEXT,
  IndicatorCode TEXT PRIMARY KEY,
  Year INTEGER PRIMARY KEY,
  Value INTEGER
);
Sample rows from `Indicators`:
Arab World, ARB, Adolescent fertility rate (births per 1,000 women ages 15-19), SP.ADO.TFRT, 1960, 133
Arab World, ARB, Age dependency ratio (% of working-age population), SP.POP.DPND, 1960, 87
Arab World, ARB, Age dependency ratio, old (% of working-age population), SP.POP.DPND.OL, 1960, 6

CREATE TABLE `SeriesNotes` (
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Year TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `SeriesNotes`:
SP.ADO.TFRT, YR1960, Interpolated using data for 1957 and 1962.
SP.DYN.AMRT.FE, YR1960, Interpolated using data for 1957 and 1962, if the data source is United Nations World Population Prospects.
SP.DYN.AMRT.MA, YR1960, Interpolated using data for 1957 and 1962, if the data source is United Nations World Population Prospects.

","footnotes, series","footnotes.seriescode, series.source, series.seriesCode, footnotes.year"
public_review_platform,How many businesses in the city of Scottsdale open on Sunday at 12PM?,SELECT COUNT(DISTINCT t2.business_id) FROM business as t1 inner JOIN business_hours as t2 ON t1.business_id = t2.business_id inner JOIN days as t3 ON t2.day_id = t3.day_id WHERE t1.city = 'Scottsdale' AND t3.day_of_week = 'Sunday' AND t2.opening_time = '12PM',"CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `business_hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `business_hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `days`:
1, Sunday
2, Monday
3, Tuesday

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","business, business_hours, days","business_hours.business_id, business.business_id, business_hours.day_id, days.day_id, business.city, days.day_of_week, business_hours.opening_time"
retail_world,"Of the customers who are from Canada, how many used Federal Shipping?",SELECT COUNT(t3.customerid) FROM shippers as t1 inner JOIN orders as t2 ON t1.shipperid = t2.shipvia inner JOIN customers as t3 ON t2.customerid = t3.customerid WHERE t2.shipname = 'Federal Shipping',"CREATE TABLE `shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

","shippers, orders, customers","customers.customerid, shippers.shipperid, orders.shipvia, orders.customerid, orders.shipname"
public_review_platform,"How many Yelp businesses are there in 'AZ' with less than ""3"" stars?",SELECT COUNT(business_id) FROM business WHERE state LIKE 'AZ' AND stars < 3,"CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

",business,"business_id, state, stars"
image_and_language,"Find the object in image 5 where the object with the coordinate of (634, 468).",SELECT obj_sample_id FROM img_obj WHERE img_id = 5 AND x = 634 AND y = 468,"CREATE TABLE `img_obj` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `img_obj`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

","CREATE TABLE `ATT_CLASSES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `ATT_CLASSES`:
0, building s
1, indoors
2, cluttered

CREATE TABLE `OBJ_CLASSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLASSES`:
0, awning
1, goggles
2, dot

CREATE TABLE `IMG_OBJ` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `IMG_OBJ`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `IMG_OBJ_ATT` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_OBJ_ATT`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `PRED_CLASSES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `PRED_CLASSES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `IMG_REL` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_REL`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

",img_obj,"obj_sample_id, img_id, x, y"
world,Give the head of the state of the country with the lowest percentage use of English as their language.,SELECT t1.headofstate FROM country as t1 inner JOIN countrylanguage as t2 ON t1.code = t2.countrycode WHERE t2.language = 'English' ORDER BY t2.percentage LIMIT 1,"CREATE TABLE `country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

CREATE TABLE `countrylanguage` (
  CountryCode TEXT PRIMARY KEY REFERENCES Country(Code),
  Language TEXT PRIMARY KEY,
  IsOfficial TEXT,
  Percentage REAL
);
Sample rows from `countrylanguage`:
ABW, Dutch, T, 5.3
ABW, English, F, 9.5
ABW, Papiamento, F, 76.7

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
City, 4079

CREATE TABLE `City` (
  ID INTEGER,
  Name TEXT,
  CountryCode TEXT REFERENCES Country(Code),
  District TEXT,
  Population INTEGER
);
Sample rows from `City`:
1, Kabul, AFG, Kabol, 1780000
2, Qandahar, AFG, Qandahar, 237500
3, Herat, AFG, Herat, 186800

CREATE TABLE `Country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `Country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

CREATE TABLE `CountryLanguage` (
  CountryCode TEXT PRIMARY KEY REFERENCES Country(Code),
  Language TEXT PRIMARY KEY,
  IsOfficial TEXT,
  Percentage REAL
);
Sample rows from `CountryLanguage`:
ABW, Dutch, T, 5.3
ABW, English, F, 9.5
ABW, Papiamento, F, 76.7

","country, countrylanguage","country.headofstate, country.code, countrylanguage.countrycode, countrylanguage.language, countrylanguage.percentage"
soccer_2016,Provide the players' names in both teams of the match that was held in June 2014.,"SELECT t1.player_name FROM player as t1 inner JOIN player_match as t2 ON t1.player_Id = t2.player_Id inner JOIN match as t3 ON t2.match_Id = t3.match_Id WHERE substr(t3.match_Date, 1, 4) = '2014' AND substr(t3.match_Date, 7, 1) = '6' LIMIT 2","CREATE TABLE `player` (
  Player_Id INTEGER,
  Player_Name TEXT,
  DOB DATE,
  Batting_hand INTEGER REFERENCES Batting_Style(Batting_Id),
  Bowling_skill INTEGER REFERENCES Bowling_Style(Bowling_Id),
  Country_Name INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `player`:
1, SC Ganguly, 1972-07-08, 1, 1, 1
2, BB McCullum, 1981-09-27, 2, 1, 4
3, RT Ponting, 1974-12-19, 2, 1, 5

CREATE TABLE `player_match` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Player_Id INTEGER PRIMARY KEY REFERENCES Player(Player_Id),
  Role_Id INTEGER PRIMARY KEY REFERENCES Rolee(Role_Id),
  Team_Id INTEGER REFERENCES Team(Team_Id)
);
Sample rows from `player_match`:
335987, 1, 1, 1
335987, 2, 3, 1
335987, 3, 3, 1

CREATE TABLE `match` (
  Match_Id INTEGER,
  Team_1 INTEGER REFERENCES Team(Team_Id),
  Team_2 INTEGER REFERENCES Team(Team_Id),
  Match_Date DATE,
  Season_Id INTEGER REFERENCES Season(Season_Id),
  Venue_Id INTEGER REFERENCES Venue(Venue_Id),
  Toss_Winner INTEGER REFERENCES Team(Team_Id),
  Toss_Decide INTEGER REFERENCES Toss_Decision(Toss_Id),
  Win_Type INTEGER REFERENCES Win_By(Win_Id),
  Win_Margin INTEGER,
  Outcome_type INTEGER REFERENCES Out_Type(Out_Id),
  Match_Winner INTEGER REFERENCES Team(Team_Id),
  Man_of_the_Match INTEGER REFERENCES Player(Player_Id)
);
Sample rows from `match`:
335987, 2, 1, 2008-04-18, 1, 1, 2, 1, 1, 140, 1, 1, 2
335988, 4, 3, 2008-04-19, 1, 2, 3, 2, 1, 33, 1, 3, 19
335989, 6, 5, 2008-04-19, 1, 3, 5, 2, 2, 9, 1, 6, 90

","CREATE TABLE `Batting_Style` (
  Batting_Id INTEGER,
  Batting_hand TEXT
);
Sample rows from `Batting_Style`:
1, Left-hand bat
2, Right-hand bat

CREATE TABLE `Bowling_Style` (
  Bowling_Id INTEGER,
  Bowling_skill TEXT
);
Sample rows from `Bowling_Style`:
1, Right-arm medium
2, Right-arm offbreak
3, Right-arm fast-medium

CREATE TABLE `City` (
  City_Id INTEGER,
  City_Name TEXT,
  Country_id INTEGER
);
Sample rows from `City`:
1, Bangalore, 1
2, Chandigarh, 1
3, Delhi, 1

CREATE TABLE `Country` (
  Country_Id INTEGER REFERENCES Country(Country_Id),
  Country_Name TEXT
);
Sample rows from `Country`:
1, India
2, South Africa
3, U.A.E

CREATE TABLE `Extra_Type` (
  Extra_Id INTEGER,
  Extra_Name TEXT
);
Sample rows from `Extra_Type`:
1, legbyes
2, wides
3, byes

CREATE TABLE `Extra_Runs` (
  Match_Id INTEGER PRIMARY KEY,
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Extra_Type_Id INTEGER REFERENCES Extra_Type(Extra_Id),
  Extra_Runs INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Extra_Runs`:
335987, 1, 1, 1, 1, 1
335987, 1, 2, 2, 1, 2
335987, 1, 3, 2, 1, 1

CREATE TABLE `Out_Type` (
  Out_Id INTEGER,
  Out_Name TEXT
);
Sample rows from `Out_Type`:
1, caught
2, bowled
3, run out

CREATE TABLE `Outcome` (
  Outcome_Id INTEGER,
  Outcome_Type TEXT
);
Sample rows from `Outcome`:
1, Result
2, No Result
3, Superover

CREATE TABLE `Player` (
  Player_Id INTEGER,
  Player_Name TEXT,
  DOB DATE,
  Batting_hand INTEGER REFERENCES Batting_Style(Batting_Id),
  Bowling_skill INTEGER REFERENCES Bowling_Style(Bowling_Id),
  Country_Name INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Player`:
1, SC Ganguly, 1972-07-08, 1, 1, 1
2, BB McCullum, 1981-09-27, 2, 1, 4
3, RT Ponting, 1974-12-19, 2, 1, 5

CREATE TABLE `Rolee` (
  Role_Id INTEGER,
  Role_Desc TEXT
);
Sample rows from `Rolee`:
1, Captain
2, Keeper
3, Player

CREATE TABLE `Season` (
  Season_Id INTEGER,
  Man_of_the_Series INTEGER,
  Orange_Cap INTEGER,
  Purple_Cap INTEGER,
  Season_Year INTEGER
);
Sample rows from `Season`:
1, 32, 100, 102, 2008
2, 53, 18, 61, 2009
3, 133, 133, 131, 2010

CREATE TABLE `Team` (
  Team_Id INTEGER,
  Team_Name TEXT
);
Sample rows from `Team`:
1, Kolkata Knight Riders
2, Royal Challengers Bangalore
3, Chennai Super Kings

CREATE TABLE `Toss_Decision` (
  Toss_Id INTEGER,
  Toss_Name TEXT
);
Sample rows from `Toss_Decision`:
1, field
2, bat

CREATE TABLE `Umpire` (
  Umpire_Id INTEGER,
  Umpire_Name TEXT,
  Umpire_Country INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Umpire`:
1, Asad Rauf, 6
2, MR Benson, 10
3, Aleem Dar, 6

CREATE TABLE `Venue` (
  Venue_Id INTEGER,
  Venue_Name TEXT,
  City_Id INTEGER REFERENCES City(City_Id)
);
Sample rows from `Venue`:
1, M Chinnaswamy Stadium, 1
2, Punjab Cricket Association Stadium, 2
3, Feroz Shah Kotla, 3

CREATE TABLE `Win_By` (
  Win_Id INTEGER,
  Win_Type TEXT
);
Sample rows from `Win_By`:
1, runs
2, wickets
3, NO Result

CREATE TABLE `Match` (
  Match_Id INTEGER,
  Team_1 INTEGER REFERENCES Team(Team_Id),
  Team_2 INTEGER REFERENCES Team(Team_Id),
  Match_Date DATE,
  Season_Id INTEGER REFERENCES Season(Season_Id),
  Venue_Id INTEGER REFERENCES Venue(Venue_Id),
  Toss_Winner INTEGER REFERENCES Team(Team_Id),
  Toss_Decide INTEGER REFERENCES Toss_Decision(Toss_Id),
  Win_Type INTEGER REFERENCES Win_By(Win_Id),
  Win_Margin INTEGER,
  Outcome_type INTEGER REFERENCES Out_Type(Out_Id),
  Match_Winner INTEGER REFERENCES Team(Team_Id),
  Man_of_the_Match INTEGER REFERENCES Player(Player_Id)
);
Sample rows from `Match`:
335987, 2, 1, 2008-04-18, 1, 1, 2, 1, 1, 140, 1, 1, 2
335988, 4, 3, 2008-04-19, 1, 2, 3, 2, 1, 33, 1, 3, 19
335989, 6, 5, 2008-04-19, 1, 3, 5, 2, 2, 9, 1, 6, 90

CREATE TABLE `Ball_by_Ball` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Innings_No INTEGER PRIMARY KEY,
  Team_Batting INTEGER,
  Team_Bowling INTEGER,
  Striker_Batting_Position INTEGER,
  Striker INTEGER,
  Non_Striker INTEGER,
  Bowler INTEGER
);
Sample rows from `Ball_by_Ball`:
335987, 1, 1, 1, 1, 2, 1, 1, 2, 14
335987, 1, 1, 2, 2, 1, 1, 6, 7, 106
335987, 1, 2, 1, 1, 2, 2, 2, 1, 14

CREATE TABLE `Batsman_Scored` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Runs_Scored INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Batsman_Scored`:
335987, 1, 1, 0, 1
335987, 1, 1, 1, 2
335987, 1, 2, 0, 1

CREATE TABLE `Player_Match` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Player_Id INTEGER PRIMARY KEY REFERENCES Player(Player_Id),
  Role_Id INTEGER PRIMARY KEY REFERENCES Rolee(Role_Id),
  Team_Id INTEGER REFERENCES Team(Team_Id)
);
Sample rows from `Player_Match`:
335987, 1, 1, 1
335987, 2, 3, 1
335987, 3, 3, 1

CREATE TABLE `Wicket_Taken` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Player_Out INTEGER REFERENCES Player(Player_Id),
  Kind_Out INTEGER REFERENCES Out_Type(Out_Id),
  Fielders INTEGER REFERENCES Player(Player_Id),
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Wicket_Taken`:
335987, 2, 1, 6, 2, None, 2
335987, 3, 2, 8, 2, None, 2
335987, 5, 5, 9, 1, 83, 2

","player, player_match, match","player.player_name, player.player_Id, player_match.player_Id, player_match.match_Id, match.match_Id, match.match_Date"
food_inspection_2,How many restaurants were inspected on 2015/5/8?,SELECT COUNT(t2.license_no) FROM establishment as t1 inner JOIN inspection as t2 ON t1.license_no = t2.license_no WHERE t2.inspection_date = '2015-05-08' AND t1.facility_type = 'Restaurant',"CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

","establishment, inspection","inspection.license_no, establishment.license_no, inspection.inspection_date, establishment.facility_type"
university,What is the university ID of the university with the largest student staff ratio?,SELECT university_id FROM university_year ORDER BY student_staff_ratio DESC LIMIT 1,"CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

","CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

CREATE TABLE `ranking_system` (
  id INTEGER,
  system_name TEXT
);
Sample rows from `ranking_system`:
1, Times Higher Education World University Ranking
2, Shanghai Ranking
3, Center for World University Rankings

CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

",university_year,"university_id, student_staff_ratio"
food_inspection_2,How many businesses from ward 42 have at least 5 failed inspection results between 1/1/2010 to 12/31/2015?,SELECT COUNT(DISTINCT t1.license_no) FROM establishment as t1 inner JOIN inspection as t2 ON t1.license_no = t2.license_no WHERE t2.inspection_date BETWEEN '2010-01-01' AND '2015-12-31' AND t1.ward = 42 AND t1.license_no IN ( SELECT license_no FROM ( SELECT license_no FROM inspection WHERE results = 'Fail' GROUP BY license_no HAVING COUNT(results) >= 5 ) ),"CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

","establishment, inspection","establishment.license_no, inspection.license_no, inspection.inspection_date, establishment.ward, license_no, results"
retail_complains,What is the email address of clients who submitted their complaints via postal mail?,SELECT t1.email FROM client as t1 inner JOIN events as t2 ON t1.client_id = t2.client_id WHERE t2.`submitted via` = 'Postal mail',"CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

","CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

","client, events","client.email, client.client_id, events.client_id, events.submitted via"
retail_complains,What is the most common issue for the highest priority complaints?,SELECT t1.issue FROM events as t1 inner JOIN callcenterlogs as t2 ON t1.`complaint id` = t2.`complaint id` WHERE t2.priority = 2 GROUP BY t1.issue ORDER BY COUNT(t1.issue) DESC LIMIT 1,"CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

","CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

","events, callcenterlogs","events.issue, events.complaint id, callcenterlogs.complaint id, callcenterlogs.priority"
books,How many books were published in Japanese?,SELECT COUNT(t2.book_id) FROM book_language as t1 inner JOIN book as t2 ON t1.language_id = t2.language_id WHERE t1.language_name = 'Japanese',"CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","book_language, book","book.book_id, book_language.language_id, book.language_id, book_language.language_name"
disney,How many voice-actors were involved in the Bambi movie?,SELECT COUNT(DISTINCT 'voice-actor') FROM `voice-actors` WHERE movie = 'Bambi',"CREATE TABLE `voice-actors` (
  character TEXT PRIMARY KEY,
  voice-actor TEXT,
  movie TEXT REFERENCES characters(movie_title)
);
Sample rows from `voice-actors`:
Abby Mallard, Joan Cusack, Chicken Little
Abigail Gabble, Monica Evans, The Aristocats
Abis Mal, Jason Alexander, The Return of Jafar

","CREATE TABLE `characters` (
  movie_title TEXT PRIMARY KEY,
  release_date TEXT,
  hero TEXT REFERENCES voice-actors(character),
  villian TEXT,
  song TEXT
);
Sample rows from `characters`:
Snow White and the Seven Dwarfs, 21-Dec-37, Snow White, Evil Queen, Some Day My Prince Will Come
Pinocchio, 7-Feb-40, Pinocchio, Stromboli, When You Wish upon a Star
Fantasia, 13-Nov-40, None, Chernabog, None

CREATE TABLE `director` (
  name TEXT PRIMARY KEY REFERENCES characters(movie_title),
  director TEXT
);
Sample rows from `director`:
Snow White and the Seven Dwarfs, David Hand
Pinocchio, Ben Sharpsteen
Fantasia, full credits

CREATE TABLE `movies_total_gross` (
  movie_title TEXT PRIMARY KEY REFERENCES characters(movie_title),
  release_date TEXT PRIMARY KEY,
  genre TEXT,
  MPAA_rating TEXT,
  total_gross TEXT,
  inflation_adjusted_gross TEXT
);
Sample rows from `movies_total_gross`:
Snow White and the Seven Dwarfs, Dec 21, 1937, Musical, G, $184,925,485, $5,228,953,251
Pinocchio, Feb 9, 1940, Adventure, G, $84,300,000, $2,188,229,052
Fantasia, Nov 13, 1940, Musical, G, $83,320,000, $2,187,090,808

CREATE TABLE `revenue` (
  Year INTEGER,
  Studio Entertainment[NI 1] REAL,
  Disney Consumer Products[NI 2] REAL,
  Disney Interactive[NI 3][Rev 1] INTEGER,
  Walt Disney Parks and Resorts REAL,
  Disney Media Networks TEXT,
  Total INTEGER
);
Sample rows from `revenue`:
1991, 2593.0, 724.0, None, 2794.0, None, 6111
1992, 3115.0, 1081.0, None, 3306.0, None, 7502
1993, 3673.4, 1415.1, None, 3440.7, None, 8529

CREATE TABLE `voice-actors` (
  character TEXT PRIMARY KEY,
  voice-actor TEXT,
  movie TEXT REFERENCES characters(movie_title)
);
Sample rows from `voice-actors`:
Abby Mallard, Joan Cusack, Chicken Little
Abigail Gabble, Monica Evans, The Aristocats
Abis Mal, Jason Alexander, The Return of Jafar

",voice-actors,movie
retail_world,List all the product names and categories of the highest reorder level.,"SELECT t2.productname, t1.categoryname FROM categories as t1 inner JOIN products as t2 ON t1.categoryid = t2.categoryid ORDER BY t2.reorderlevel DESC LIMIT 1","CREATE TABLE `categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

","categories, products","products.productname, categories.categoryname, categories.categoryid, products.categoryid, products.reorderlevel"
books,How many books written by Akira Watanabe are available on Gravity?,SELECT COUNT(*) FROM author as t1 inner JOIN book_author as t2 ON t1.author_id = t2.author_id WHERE t1.author_name = 'Akira Watanabe',"CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","author, book_author","author.author_id, book_author.author_id, author.author_name"
simpson_episodes,How many people who were born after 1970 are animation executive producer?,SELECT COUNT(*) FROM person as t1 inner JOIN credit as t2 ON t1.name = t2.person WHERE strftime(t1.birthdate) > '1970' AND t2.role = 'animation executive producer';,"CREATE TABLE `person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","person, credit","person.name, credit.person, person.birthdate, credit.role"
movies_4,Write down the release date of the movies produced by Twentieth Century Fox Film Corporation.,SELECT t3.release_date FROM production_company as t1 inner JOIN movie_company as t2 ON t1.company_id = t2.company_id inner JOIN movie as t3 ON t2.movie_id = t3.movie_id WHERE t1.company_name = 'Twentieth Century Fox Film Corporation',"CREATE TABLE `production_company` (
  company_id INTEGER,
  company_name TEXT
);
Sample rows from `production_company`:
1, Lucasfilm
2, Walt Disney Pictures
3, Pixar Animation Studios

CREATE TABLE `movie_company` (
  movie_id INTEGER REFERENCES movie(None),
  company_id INTEGER REFERENCES production_company(None)
);
Sample rows from `movie_company`:
5, 14
5, 59
11, 1

CREATE TABLE `movie` (
  movie_id INTEGER,
  title TEXT,
  budget INTEGER,
  homepage TEXT,
  overview TEXT,
  popularity REAL,
  release_date DATE,
  revenue INTEGER,
  runtime INTEGER,
  movie_status TEXT,
  tagline TEXT,
  vote_average REAL,
  vote_count INTEGER
);
Sample rows from `movie`:
5, Four Rooms, 4000000, , It's Ted the Bellhop's first night on the job...and the hotel's very unusual guests are about to place him in some outrageous predicaments. It seems that this evening's room service is serving up one unbelievable happening after another., 22.87623, 1995-12-09, 4300000, 98, Released, Twelve outrageous guests. Four scandalous requests. And one lone bellhop, in his first day on the job, who's in for the wildest New year's Eve of his life., 6.5, 530
11, Star Wars, 11000000, http://www.starwars.com/films/star-wars-episode-iv-a-new-hope, Princess Leia is captured and held hostage by the evil Imperial forces in their effort to take over the galactic Empire. Venturesome Luke Skywalker and dashing captain Han Solo team together with the loveable robot duo R2-D2 and C-3PO to rescue the beauti, 126.393695, 1977-05-25, 775398007, 121, Released, A long time ago in a galaxy far, far away..., 8.1, 6624
12, Finding Nemo, 94000000, http://movies.disney.com/finding-nemo, Nemo, an adventurous young clownfish, is unexpectedly taken from his Great Barrier Reef home to a dentist's office aquarium. It's up to his worrisome father Marlin and a friendly but forgetful fish Dory to bring Nemo home -- meeting vegetarian sharks, sur, 85.688789, 2003-05-30, 940335536, 100, Released, There are 3.7 trillion fish in the ocean, they're looking for one., 7.6, 6122

","CREATE TABLE `country` (
  country_id INTEGER,
  country_iso_code TEXT,
  country_name TEXT
);
Sample rows from `country`:
128, AE, United Arab Emirates
129, AF, Afghanistan
130, AO, Angola

CREATE TABLE `department` (
  department_id INTEGER,
  department_name TEXT
);
Sample rows from `department`:
1, Camera
2, Directing
3, Production

CREATE TABLE `gender` (
  gender_id INTEGER,
  gender TEXT
);
Sample rows from `gender`:
0, Unspecified
1, Female
2, Male

CREATE TABLE `genre` (
  genre_id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
12, Adventure
14, Fantasy
16, Animation

CREATE TABLE `keyword` (
  keyword_id INTEGER,
  keyword_name TEXT
);
Sample rows from `keyword`:
30, individual
65, holiday
74, germany

CREATE TABLE `language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `language`:
24574, en, English
24575, sv, svenska
24576, de, Deutsch

CREATE TABLE `language_role` (
  role_id INTEGER,
  language_role TEXT
);
Sample rows from `language_role`:
1, Original
2, Spoken

CREATE TABLE `movie` (
  movie_id INTEGER,
  title TEXT,
  budget INTEGER,
  homepage TEXT,
  overview TEXT,
  popularity REAL,
  release_date DATE,
  revenue INTEGER,
  runtime INTEGER,
  movie_status TEXT,
  tagline TEXT,
  vote_average REAL,
  vote_count INTEGER
);
Sample rows from `movie`:
5, Four Rooms, 4000000, , It's Ted the Bellhop's first night on the job...and the hotel's very unusual guests are about to place him in some outrageous predicaments. It seems that this evening's room service is serving up one unbelievable happening after another., 22.87623, 1995-12-09, 4300000, 98, Released, Twelve outrageous guests. Four scandalous requests. And one lone bellhop, in his first day on the job, who's in for the wildest New year's Eve of his life., 6.5, 530
11, Star Wars, 11000000, http://www.starwars.com/films/star-wars-episode-iv-a-new-hope, Princess Leia is captured and held hostage by the evil Imperial forces in their effort to take over the galactic Empire. Venturesome Luke Skywalker and dashing captain Han Solo team together with the loveable robot duo R2-D2 and C-3PO to rescue the beauti, 126.393695, 1977-05-25, 775398007, 121, Released, A long time ago in a galaxy far, far away..., 8.1, 6624
12, Finding Nemo, 94000000, http://movies.disney.com/finding-nemo, Nemo, an adventurous young clownfish, is unexpectedly taken from his Great Barrier Reef home to a dentist's office aquarium. It's up to his worrisome father Marlin and a friendly but forgetful fish Dory to bring Nemo home -- meeting vegetarian sharks, sur, 85.688789, 2003-05-30, 940335536, 100, Released, There are 3.7 trillion fish in the ocean, they're looking for one., 7.6, 6122

CREATE TABLE `movie_genres` (
  movie_id INTEGER REFERENCES movie(movie_id),
  genre_id INTEGER REFERENCES genre(genre_id)
);
Sample rows from `movie_genres`:
5, 35
5, 80
11, 12

CREATE TABLE `movie_languages` (
  movie_id INTEGER REFERENCES movie(movie_id),
  language_id INTEGER REFERENCES language(language_id),
  language_role_id INTEGER REFERENCES language_role(role_id)
);
Sample rows from `movie_languages`:
5, 24574, 2
11, 24574, 2
12, 24574, 2

CREATE TABLE `person` (
  person_id INTEGER,
  person_name TEXT
);
Sample rows from `person`:
1, George Lucas
2, Mark Hamill
3, Harrison Ford

CREATE TABLE `movie_crew` (
  movie_id INTEGER REFERENCES movie(movie_id),
  person_id INTEGER REFERENCES person(person_id),
  department_id INTEGER REFERENCES department(department_id),
  job TEXT
);
Sample rows from `movie_crew`:
285, 120, 1, Director of Photography
285, 1704, 2, Director
285, 770, 3, Producer

CREATE TABLE `production_company` (
  company_id INTEGER,
  company_name TEXT
);
Sample rows from `production_company`:
1, Lucasfilm
2, Walt Disney Pictures
3, Pixar Animation Studios

CREATE TABLE `production_country` (
  movie_id INTEGER REFERENCES movie(movie_id),
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `production_country`:
5, 214
11, 214
12, 214

CREATE TABLE `movie_cast` (
  movie_id INTEGER REFERENCES movie(movie_id),
  person_id INTEGER REFERENCES person(person_id),
  character_name TEXT,
  gender_id INTEGER REFERENCES gender(gender_id),
  cast_order INTEGER
);
Sample rows from `movie_cast`:
285, 85, Captain Jack Sparrow, 2, 0
285, 114, Will Turner, 2, 1
285, 116, Elizabeth Swann, 1, 2

CREATE TABLE `movie_keywords` (
  movie_id INTEGER REFERENCES movie(None),
  keyword_id INTEGER REFERENCES keyword(None)
);
Sample rows from `movie_keywords`:
5, 612
5, 613
5, 616

CREATE TABLE `movie_company` (
  movie_id INTEGER REFERENCES movie(None),
  company_id INTEGER REFERENCES production_company(None)
);
Sample rows from `movie_company`:
5, 14
5, 59
11, 1

","production_company, movie_company, movie","movie.release_date, production_company.company_id, movie_company.company_id, movie_company.movie_id, movie.movie_id, production_company.company_name"
soccer_2016,"Among the matches of Delhi Daredevils in 2014, how many won matches are there?",SELECT COUNT(t1.match_winner) FROM `match` as t1 inner JOIN team as t2 ON t2.team_Id = t1.team_1 OR t2.team_Id = t1.team_2 WHERE t2.team_name = 'Delhi Daredevils' AND t1.match_Date LIKE '2014%',"CREATE TABLE `match` (
  Match_Id INTEGER,
  Team_1 INTEGER REFERENCES Team(Team_Id),
  Team_2 INTEGER REFERENCES Team(Team_Id),
  Match_Date DATE,
  Season_Id INTEGER REFERENCES Season(Season_Id),
  Venue_Id INTEGER REFERENCES Venue(Venue_Id),
  Toss_Winner INTEGER REFERENCES Team(Team_Id),
  Toss_Decide INTEGER REFERENCES Toss_Decision(Toss_Id),
  Win_Type INTEGER REFERENCES Win_By(Win_Id),
  Win_Margin INTEGER,
  Outcome_type INTEGER REFERENCES Out_Type(Out_Id),
  Match_Winner INTEGER REFERENCES Team(Team_Id),
  Man_of_the_Match INTEGER REFERENCES Player(Player_Id)
);
Sample rows from `match`:
335987, 2, 1, 2008-04-18, 1, 1, 2, 1, 1, 140, 1, 1, 2
335988, 4, 3, 2008-04-19, 1, 2, 3, 2, 1, 33, 1, 3, 19
335989, 6, 5, 2008-04-19, 1, 3, 5, 2, 2, 9, 1, 6, 90

CREATE TABLE `team` (
  Team_Id INTEGER,
  Team_Name TEXT
);
Sample rows from `team`:
1, Kolkata Knight Riders
2, Royal Challengers Bangalore
3, Chennai Super Kings

","CREATE TABLE `Batting_Style` (
  Batting_Id INTEGER,
  Batting_hand TEXT
);
Sample rows from `Batting_Style`:
1, Left-hand bat
2, Right-hand bat

CREATE TABLE `Bowling_Style` (
  Bowling_Id INTEGER,
  Bowling_skill TEXT
);
Sample rows from `Bowling_Style`:
1, Right-arm medium
2, Right-arm offbreak
3, Right-arm fast-medium

CREATE TABLE `City` (
  City_Id INTEGER,
  City_Name TEXT,
  Country_id INTEGER
);
Sample rows from `City`:
1, Bangalore, 1
2, Chandigarh, 1
3, Delhi, 1

CREATE TABLE `Country` (
  Country_Id INTEGER REFERENCES Country(Country_Id),
  Country_Name TEXT
);
Sample rows from `Country`:
1, India
2, South Africa
3, U.A.E

CREATE TABLE `Extra_Type` (
  Extra_Id INTEGER,
  Extra_Name TEXT
);
Sample rows from `Extra_Type`:
1, legbyes
2, wides
3, byes

CREATE TABLE `Extra_Runs` (
  Match_Id INTEGER PRIMARY KEY,
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Extra_Type_Id INTEGER REFERENCES Extra_Type(Extra_Id),
  Extra_Runs INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Extra_Runs`:
335987, 1, 1, 1, 1, 1
335987, 1, 2, 2, 1, 2
335987, 1, 3, 2, 1, 1

CREATE TABLE `Out_Type` (
  Out_Id INTEGER,
  Out_Name TEXT
);
Sample rows from `Out_Type`:
1, caught
2, bowled
3, run out

CREATE TABLE `Outcome` (
  Outcome_Id INTEGER,
  Outcome_Type TEXT
);
Sample rows from `Outcome`:
1, Result
2, No Result
3, Superover

CREATE TABLE `Player` (
  Player_Id INTEGER,
  Player_Name TEXT,
  DOB DATE,
  Batting_hand INTEGER REFERENCES Batting_Style(Batting_Id),
  Bowling_skill INTEGER REFERENCES Bowling_Style(Bowling_Id),
  Country_Name INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Player`:
1, SC Ganguly, 1972-07-08, 1, 1, 1
2, BB McCullum, 1981-09-27, 2, 1, 4
3, RT Ponting, 1974-12-19, 2, 1, 5

CREATE TABLE `Rolee` (
  Role_Id INTEGER,
  Role_Desc TEXT
);
Sample rows from `Rolee`:
1, Captain
2, Keeper
3, Player

CREATE TABLE `Season` (
  Season_Id INTEGER,
  Man_of_the_Series INTEGER,
  Orange_Cap INTEGER,
  Purple_Cap INTEGER,
  Season_Year INTEGER
);
Sample rows from `Season`:
1, 32, 100, 102, 2008
2, 53, 18, 61, 2009
3, 133, 133, 131, 2010

CREATE TABLE `Team` (
  Team_Id INTEGER,
  Team_Name TEXT
);
Sample rows from `Team`:
1, Kolkata Knight Riders
2, Royal Challengers Bangalore
3, Chennai Super Kings

CREATE TABLE `Toss_Decision` (
  Toss_Id INTEGER,
  Toss_Name TEXT
);
Sample rows from `Toss_Decision`:
1, field
2, bat

CREATE TABLE `Umpire` (
  Umpire_Id INTEGER,
  Umpire_Name TEXT,
  Umpire_Country INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Umpire`:
1, Asad Rauf, 6
2, MR Benson, 10
3, Aleem Dar, 6

CREATE TABLE `Venue` (
  Venue_Id INTEGER,
  Venue_Name TEXT,
  City_Id INTEGER REFERENCES City(City_Id)
);
Sample rows from `Venue`:
1, M Chinnaswamy Stadium, 1
2, Punjab Cricket Association Stadium, 2
3, Feroz Shah Kotla, 3

CREATE TABLE `Win_By` (
  Win_Id INTEGER,
  Win_Type TEXT
);
Sample rows from `Win_By`:
1, runs
2, wickets
3, NO Result

CREATE TABLE `Match` (
  Match_Id INTEGER,
  Team_1 INTEGER REFERENCES Team(Team_Id),
  Team_2 INTEGER REFERENCES Team(Team_Id),
  Match_Date DATE,
  Season_Id INTEGER REFERENCES Season(Season_Id),
  Venue_Id INTEGER REFERENCES Venue(Venue_Id),
  Toss_Winner INTEGER REFERENCES Team(Team_Id),
  Toss_Decide INTEGER REFERENCES Toss_Decision(Toss_Id),
  Win_Type INTEGER REFERENCES Win_By(Win_Id),
  Win_Margin INTEGER,
  Outcome_type INTEGER REFERENCES Out_Type(Out_Id),
  Match_Winner INTEGER REFERENCES Team(Team_Id),
  Man_of_the_Match INTEGER REFERENCES Player(Player_Id)
);
Sample rows from `Match`:
335987, 2, 1, 2008-04-18, 1, 1, 2, 1, 1, 140, 1, 1, 2
335988, 4, 3, 2008-04-19, 1, 2, 3, 2, 1, 33, 1, 3, 19
335989, 6, 5, 2008-04-19, 1, 3, 5, 2, 2, 9, 1, 6, 90

CREATE TABLE `Ball_by_Ball` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Innings_No INTEGER PRIMARY KEY,
  Team_Batting INTEGER,
  Team_Bowling INTEGER,
  Striker_Batting_Position INTEGER,
  Striker INTEGER,
  Non_Striker INTEGER,
  Bowler INTEGER
);
Sample rows from `Ball_by_Ball`:
335987, 1, 1, 1, 1, 2, 1, 1, 2, 14
335987, 1, 1, 2, 2, 1, 1, 6, 7, 106
335987, 1, 2, 1, 1, 2, 2, 2, 1, 14

CREATE TABLE `Batsman_Scored` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Runs_Scored INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Batsman_Scored`:
335987, 1, 1, 0, 1
335987, 1, 1, 1, 2
335987, 1, 2, 0, 1

CREATE TABLE `Player_Match` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Player_Id INTEGER PRIMARY KEY REFERENCES Player(Player_Id),
  Role_Id INTEGER PRIMARY KEY REFERENCES Rolee(Role_Id),
  Team_Id INTEGER REFERENCES Team(Team_Id)
);
Sample rows from `Player_Match`:
335987, 1, 1, 1
335987, 2, 3, 1
335987, 3, 3, 1

CREATE TABLE `Wicket_Taken` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Player_Out INTEGER REFERENCES Player(Player_Id),
  Kind_Out INTEGER REFERENCES Out_Type(Out_Id),
  Fielders INTEGER REFERENCES Player(Player_Id),
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Wicket_Taken`:
335987, 2, 1, 6, 2, None, 2
335987, 3, 2, 8, 2, None, 2
335987, 5, 5, 9, 1, 83, 2

","match, team","match.match_winner, team.team_Id, match.team_1, match.team_2, team.team_name, match.match_Date"
regional_sales,List the order for all in-store sales along with the products sold.,"SELECT DISTINCT t1.ordernumber, t2.`product name` FROM `sales orders` as t1 inner JOIN products as t2 ON t2.productID = t1._productID WHERE t1.`sales channel` = 'In-Store'","CREATE TABLE `sales orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `sales orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

CREATE TABLE `products` (
  ProductID INTEGER,
  Product Name TEXT
);
Sample rows from `products`:
1, Cookware
2, Photo Frames
3, Table Lamps

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  Customer Names TEXT
);
Sample rows from `Customers`:
1, Avon Corp
2, WakeFern 
3, Elorac, Corp

CREATE TABLE `Products` (
  ProductID INTEGER,
  Product Name TEXT
);
Sample rows from `Products`:
1, Cookware
2, Photo Frames
3, Table Lamps

CREATE TABLE `Regions` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `Regions`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `Sales Team` (
  SalesTeamID INTEGER,
  Sales Team TEXT,
  Region TEXT
);
Sample rows from `Sales Team`:
1, Adam Hernandez, Northeast
2, Keith Griffin, Northeast
3, Jerry Green, West

CREATE TABLE `Store Locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `Store Locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

CREATE TABLE `Sales Orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `Sales Orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

","sales orders, products","sales orders.ordernumber, products.product name, products.productID, sales orders._productID, sales orders.sales channel"
soccer_2016,Identify by their ID all the overs in which the player with ID 7 was on strike.,SELECT DISTINCT over_id FROM ball_by_ball WHERE striker = 7,"CREATE TABLE `ball_by_ball` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Innings_No INTEGER PRIMARY KEY,
  Team_Batting INTEGER,
  Team_Bowling INTEGER,
  Striker_Batting_Position INTEGER,
  Striker INTEGER,
  Non_Striker INTEGER,
  Bowler INTEGER
);
Sample rows from `ball_by_ball`:
335987, 1, 1, 1, 1, 2, 1, 1, 2, 14
335987, 1, 1, 2, 2, 1, 1, 6, 7, 106
335987, 1, 2, 1, 1, 2, 2, 2, 1, 14

","CREATE TABLE `Batting_Style` (
  Batting_Id INTEGER,
  Batting_hand TEXT
);
Sample rows from `Batting_Style`:
1, Left-hand bat
2, Right-hand bat

CREATE TABLE `Bowling_Style` (
  Bowling_Id INTEGER,
  Bowling_skill TEXT
);
Sample rows from `Bowling_Style`:
1, Right-arm medium
2, Right-arm offbreak
3, Right-arm fast-medium

CREATE TABLE `City` (
  City_Id INTEGER,
  City_Name TEXT,
  Country_id INTEGER
);
Sample rows from `City`:
1, Bangalore, 1
2, Chandigarh, 1
3, Delhi, 1

CREATE TABLE `Country` (
  Country_Id INTEGER REFERENCES Country(Country_Id),
  Country_Name TEXT
);
Sample rows from `Country`:
1, India
2, South Africa
3, U.A.E

CREATE TABLE `Extra_Type` (
  Extra_Id INTEGER,
  Extra_Name TEXT
);
Sample rows from `Extra_Type`:
1, legbyes
2, wides
3, byes

CREATE TABLE `Extra_Runs` (
  Match_Id INTEGER PRIMARY KEY,
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Extra_Type_Id INTEGER REFERENCES Extra_Type(Extra_Id),
  Extra_Runs INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Extra_Runs`:
335987, 1, 1, 1, 1, 1
335987, 1, 2, 2, 1, 2
335987, 1, 3, 2, 1, 1

CREATE TABLE `Out_Type` (
  Out_Id INTEGER,
  Out_Name TEXT
);
Sample rows from `Out_Type`:
1, caught
2, bowled
3, run out

CREATE TABLE `Outcome` (
  Outcome_Id INTEGER,
  Outcome_Type TEXT
);
Sample rows from `Outcome`:
1, Result
2, No Result
3, Superover

CREATE TABLE `Player` (
  Player_Id INTEGER,
  Player_Name TEXT,
  DOB DATE,
  Batting_hand INTEGER REFERENCES Batting_Style(Batting_Id),
  Bowling_skill INTEGER REFERENCES Bowling_Style(Bowling_Id),
  Country_Name INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Player`:
1, SC Ganguly, 1972-07-08, 1, 1, 1
2, BB McCullum, 1981-09-27, 2, 1, 4
3, RT Ponting, 1974-12-19, 2, 1, 5

CREATE TABLE `Rolee` (
  Role_Id INTEGER,
  Role_Desc TEXT
);
Sample rows from `Rolee`:
1, Captain
2, Keeper
3, Player

CREATE TABLE `Season` (
  Season_Id INTEGER,
  Man_of_the_Series INTEGER,
  Orange_Cap INTEGER,
  Purple_Cap INTEGER,
  Season_Year INTEGER
);
Sample rows from `Season`:
1, 32, 100, 102, 2008
2, 53, 18, 61, 2009
3, 133, 133, 131, 2010

CREATE TABLE `Team` (
  Team_Id INTEGER,
  Team_Name TEXT
);
Sample rows from `Team`:
1, Kolkata Knight Riders
2, Royal Challengers Bangalore
3, Chennai Super Kings

CREATE TABLE `Toss_Decision` (
  Toss_Id INTEGER,
  Toss_Name TEXT
);
Sample rows from `Toss_Decision`:
1, field
2, bat

CREATE TABLE `Umpire` (
  Umpire_Id INTEGER,
  Umpire_Name TEXT,
  Umpire_Country INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Umpire`:
1, Asad Rauf, 6
2, MR Benson, 10
3, Aleem Dar, 6

CREATE TABLE `Venue` (
  Venue_Id INTEGER,
  Venue_Name TEXT,
  City_Id INTEGER REFERENCES City(City_Id)
);
Sample rows from `Venue`:
1, M Chinnaswamy Stadium, 1
2, Punjab Cricket Association Stadium, 2
3, Feroz Shah Kotla, 3

CREATE TABLE `Win_By` (
  Win_Id INTEGER,
  Win_Type TEXT
);
Sample rows from `Win_By`:
1, runs
2, wickets
3, NO Result

CREATE TABLE `Match` (
  Match_Id INTEGER,
  Team_1 INTEGER REFERENCES Team(Team_Id),
  Team_2 INTEGER REFERENCES Team(Team_Id),
  Match_Date DATE,
  Season_Id INTEGER REFERENCES Season(Season_Id),
  Venue_Id INTEGER REFERENCES Venue(Venue_Id),
  Toss_Winner INTEGER REFERENCES Team(Team_Id),
  Toss_Decide INTEGER REFERENCES Toss_Decision(Toss_Id),
  Win_Type INTEGER REFERENCES Win_By(Win_Id),
  Win_Margin INTEGER,
  Outcome_type INTEGER REFERENCES Out_Type(Out_Id),
  Match_Winner INTEGER REFERENCES Team(Team_Id),
  Man_of_the_Match INTEGER REFERENCES Player(Player_Id)
);
Sample rows from `Match`:
335987, 2, 1, 2008-04-18, 1, 1, 2, 1, 1, 140, 1, 1, 2
335988, 4, 3, 2008-04-19, 1, 2, 3, 2, 1, 33, 1, 3, 19
335989, 6, 5, 2008-04-19, 1, 3, 5, 2, 2, 9, 1, 6, 90

CREATE TABLE `Ball_by_Ball` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Innings_No INTEGER PRIMARY KEY,
  Team_Batting INTEGER,
  Team_Bowling INTEGER,
  Striker_Batting_Position INTEGER,
  Striker INTEGER,
  Non_Striker INTEGER,
  Bowler INTEGER
);
Sample rows from `Ball_by_Ball`:
335987, 1, 1, 1, 1, 2, 1, 1, 2, 14
335987, 1, 1, 2, 2, 1, 1, 6, 7, 106
335987, 1, 2, 1, 1, 2, 2, 2, 1, 14

CREATE TABLE `Batsman_Scored` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Runs_Scored INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Batsman_Scored`:
335987, 1, 1, 0, 1
335987, 1, 1, 1, 2
335987, 1, 2, 0, 1

CREATE TABLE `Player_Match` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Player_Id INTEGER PRIMARY KEY REFERENCES Player(Player_Id),
  Role_Id INTEGER PRIMARY KEY REFERENCES Rolee(Role_Id),
  Team_Id INTEGER REFERENCES Team(Team_Id)
);
Sample rows from `Player_Match`:
335987, 1, 1, 1
335987, 2, 3, 1
335987, 3, 3, 1

CREATE TABLE `Wicket_Taken` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Player_Out INTEGER REFERENCES Player(Player_Id),
  Kind_Out INTEGER REFERENCES Out_Type(Out_Id),
  Fielders INTEGER REFERENCES Player(Player_Id),
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Wicket_Taken`:
335987, 2, 1, 6, 2, None, 2
335987, 3, 2, 8, 2, None, 2
335987, 5, 5, 9, 1, 83, 2

",ball_by_ball,"over_id, striker"
food_inspection_2,"What is the inspection ID where the employee named ""David Hodges"" is currently employed in the ""Kamayan Express"" establishment?",SELECT t2.inspection_id FROM establishment as t1 inner JOIN inspection as t2 ON t1.license_no = t2.license_no inner JOIN employee as t3 ON t2.employee_id = t3.employee_id WHERE t3.first_name = 'David' AND t3.last_name = 'Hodges' AND t1.dba_name = 'KAMAYAN EXPRESS',"CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

","establishment, inspection, employee","inspection.inspection_id, establishment.license_no, inspection.license_no, inspection.employee_id, employee.employee_id, employee.first_name, employee.last_name, establishment.dba_name"
image_and_language,"Name the object class of the image with a bounding (422, 63, 77, 363).",SELECT t2.obj_class FROM img_obj as t1 inner JOIN obj_classES as t2 ON t1.obj_class_ID = t2.obj_class_ID whERE t1.x = 422 AND t1.y = 63 AND t1.w = 77 AND t1.h = 363,"CREATE TABLE `img_obj` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `img_obj`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `obj_classES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `obj_classES`:
0, awning
1, goggles
2, dot

","CREATE TABLE `ATT_CLASSES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `ATT_CLASSES`:
0, building s
1, indoors
2, cluttered

CREATE TABLE `OBJ_CLASSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLASSES`:
0, awning
1, goggles
2, dot

CREATE TABLE `IMG_OBJ` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `IMG_OBJ`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `IMG_OBJ_ATT` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_OBJ_ATT`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `PRED_CLASSES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `PRED_CLASSES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `IMG_REL` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_REL`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

","img_obj, obj_classES","obj_classES.obj_class, img_obj.obj_class_ID, obj_classES.obj_class_ID, img_obj.x, img_obj.y, img_obj.w, img_obj.h"
soccer_2016,State the name of the city with the most venues.,SELECT t1.city_name FROM city as t1 inner JOIN venue as t2 ON t1.city_Id = t2.city_Id GROUP BY t1.city_Id ORDER BY COUNT(t2.venue_Id) DESC LIMIT 1,"CREATE TABLE `city` (
  City_Id INTEGER,
  City_Name TEXT,
  Country_id INTEGER
);
Sample rows from `city`:
1, Bangalore, 1
2, Chandigarh, 1
3, Delhi, 1

CREATE TABLE `venue` (
  Venue_Id INTEGER,
  Venue_Name TEXT,
  City_Id INTEGER REFERENCES City(City_Id)
);
Sample rows from `venue`:
1, M Chinnaswamy Stadium, 1
2, Punjab Cricket Association Stadium, 2
3, Feroz Shah Kotla, 3

","CREATE TABLE `Batting_Style` (
  Batting_Id INTEGER,
  Batting_hand TEXT
);
Sample rows from `Batting_Style`:
1, Left-hand bat
2, Right-hand bat

CREATE TABLE `Bowling_Style` (
  Bowling_Id INTEGER,
  Bowling_skill TEXT
);
Sample rows from `Bowling_Style`:
1, Right-arm medium
2, Right-arm offbreak
3, Right-arm fast-medium

CREATE TABLE `City` (
  City_Id INTEGER,
  City_Name TEXT,
  Country_id INTEGER
);
Sample rows from `City`:
1, Bangalore, 1
2, Chandigarh, 1
3, Delhi, 1

CREATE TABLE `Country` (
  Country_Id INTEGER REFERENCES Country(Country_Id),
  Country_Name TEXT
);
Sample rows from `Country`:
1, India
2, South Africa
3, U.A.E

CREATE TABLE `Extra_Type` (
  Extra_Id INTEGER,
  Extra_Name TEXT
);
Sample rows from `Extra_Type`:
1, legbyes
2, wides
3, byes

CREATE TABLE `Extra_Runs` (
  Match_Id INTEGER PRIMARY KEY,
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Extra_Type_Id INTEGER REFERENCES Extra_Type(Extra_Id),
  Extra_Runs INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Extra_Runs`:
335987, 1, 1, 1, 1, 1
335987, 1, 2, 2, 1, 2
335987, 1, 3, 2, 1, 1

CREATE TABLE `Out_Type` (
  Out_Id INTEGER,
  Out_Name TEXT
);
Sample rows from `Out_Type`:
1, caught
2, bowled
3, run out

CREATE TABLE `Outcome` (
  Outcome_Id INTEGER,
  Outcome_Type TEXT
);
Sample rows from `Outcome`:
1, Result
2, No Result
3, Superover

CREATE TABLE `Player` (
  Player_Id INTEGER,
  Player_Name TEXT,
  DOB DATE,
  Batting_hand INTEGER REFERENCES Batting_Style(Batting_Id),
  Bowling_skill INTEGER REFERENCES Bowling_Style(Bowling_Id),
  Country_Name INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Player`:
1, SC Ganguly, 1972-07-08, 1, 1, 1
2, BB McCullum, 1981-09-27, 2, 1, 4
3, RT Ponting, 1974-12-19, 2, 1, 5

CREATE TABLE `Rolee` (
  Role_Id INTEGER,
  Role_Desc TEXT
);
Sample rows from `Rolee`:
1, Captain
2, Keeper
3, Player

CREATE TABLE `Season` (
  Season_Id INTEGER,
  Man_of_the_Series INTEGER,
  Orange_Cap INTEGER,
  Purple_Cap INTEGER,
  Season_Year INTEGER
);
Sample rows from `Season`:
1, 32, 100, 102, 2008
2, 53, 18, 61, 2009
3, 133, 133, 131, 2010

CREATE TABLE `Team` (
  Team_Id INTEGER,
  Team_Name TEXT
);
Sample rows from `Team`:
1, Kolkata Knight Riders
2, Royal Challengers Bangalore
3, Chennai Super Kings

CREATE TABLE `Toss_Decision` (
  Toss_Id INTEGER,
  Toss_Name TEXT
);
Sample rows from `Toss_Decision`:
1, field
2, bat

CREATE TABLE `Umpire` (
  Umpire_Id INTEGER,
  Umpire_Name TEXT,
  Umpire_Country INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Umpire`:
1, Asad Rauf, 6
2, MR Benson, 10
3, Aleem Dar, 6

CREATE TABLE `Venue` (
  Venue_Id INTEGER,
  Venue_Name TEXT,
  City_Id INTEGER REFERENCES City(City_Id)
);
Sample rows from `Venue`:
1, M Chinnaswamy Stadium, 1
2, Punjab Cricket Association Stadium, 2
3, Feroz Shah Kotla, 3

CREATE TABLE `Win_By` (
  Win_Id INTEGER,
  Win_Type TEXT
);
Sample rows from `Win_By`:
1, runs
2, wickets
3, NO Result

CREATE TABLE `Match` (
  Match_Id INTEGER,
  Team_1 INTEGER REFERENCES Team(Team_Id),
  Team_2 INTEGER REFERENCES Team(Team_Id),
  Match_Date DATE,
  Season_Id INTEGER REFERENCES Season(Season_Id),
  Venue_Id INTEGER REFERENCES Venue(Venue_Id),
  Toss_Winner INTEGER REFERENCES Team(Team_Id),
  Toss_Decide INTEGER REFERENCES Toss_Decision(Toss_Id),
  Win_Type INTEGER REFERENCES Win_By(Win_Id),
  Win_Margin INTEGER,
  Outcome_type INTEGER REFERENCES Out_Type(Out_Id),
  Match_Winner INTEGER REFERENCES Team(Team_Id),
  Man_of_the_Match INTEGER REFERENCES Player(Player_Id)
);
Sample rows from `Match`:
335987, 2, 1, 2008-04-18, 1, 1, 2, 1, 1, 140, 1, 1, 2
335988, 4, 3, 2008-04-19, 1, 2, 3, 2, 1, 33, 1, 3, 19
335989, 6, 5, 2008-04-19, 1, 3, 5, 2, 2, 9, 1, 6, 90

CREATE TABLE `Ball_by_Ball` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Innings_No INTEGER PRIMARY KEY,
  Team_Batting INTEGER,
  Team_Bowling INTEGER,
  Striker_Batting_Position INTEGER,
  Striker INTEGER,
  Non_Striker INTEGER,
  Bowler INTEGER
);
Sample rows from `Ball_by_Ball`:
335987, 1, 1, 1, 1, 2, 1, 1, 2, 14
335987, 1, 1, 2, 2, 1, 1, 6, 7, 106
335987, 1, 2, 1, 1, 2, 2, 2, 1, 14

CREATE TABLE `Batsman_Scored` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Runs_Scored INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Batsman_Scored`:
335987, 1, 1, 0, 1
335987, 1, 1, 1, 2
335987, 1, 2, 0, 1

CREATE TABLE `Player_Match` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Player_Id INTEGER PRIMARY KEY REFERENCES Player(Player_Id),
  Role_Id INTEGER PRIMARY KEY REFERENCES Rolee(Role_Id),
  Team_Id INTEGER REFERENCES Team(Team_Id)
);
Sample rows from `Player_Match`:
335987, 1, 1, 1
335987, 2, 3, 1
335987, 3, 3, 1

CREATE TABLE `Wicket_Taken` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Player_Out INTEGER REFERENCES Player(Player_Id),
  Kind_Out INTEGER REFERENCES Out_Type(Out_Id),
  Fielders INTEGER REFERENCES Player(Player_Id),
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Wicket_Taken`:
335987, 2, 1, 6, 2, None, 2
335987, 3, 2, 8, 2, None, 2
335987, 5, 5, 9, 1, 83, 2

","city, venue","city.city_name, city.city_Id, venue.city_Id, venue.venue_Id"
image_and_language,List all the object classes in image 10.,SELECT DISTINCT t2.obj_class FROM img_obj as t1 inner JOIN obj_classES as t2 ON t1.obj_class_ID = t2.obj_class_ID WHERE t1.img_id = 10,"CREATE TABLE `img_obj` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `img_obj`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `obj_classES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `obj_classES`:
0, awning
1, goggles
2, dot

","CREATE TABLE `ATT_CLASSES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `ATT_CLASSES`:
0, building s
1, indoors
2, cluttered

CREATE TABLE `OBJ_CLASSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLASSES`:
0, awning
1, goggles
2, dot

CREATE TABLE `IMG_OBJ` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `IMG_OBJ`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `IMG_OBJ_ATT` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_OBJ_ATT`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `PRED_CLASSES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `PRED_CLASSES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `IMG_REL` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_REL`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

","img_obj, obj_classES","obj_classES.obj_class, img_obj.obj_class_ID, obj_classES.obj_class_ID, img_obj.img_id"
cs_semester,Please list the names of the courses taken by Laughton Antonio.,SELECT t3.name FROM student as t1 inner JOIN registration as t2 ON t1.student_id = t2.student_id inner JOIN course as t3 ON t2.course_id = t3.course_id WHERE t1.f_name = 'Laughton' AND t1.l_name = 'Antonio',"CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

","CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

CREATE TABLE `prof` (
  prof_id INTEGER,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  popularity INTEGER,
  teachingability INTEGER,
  graduate_from TEXT
);
Sample rows from `prof`:
1, Male, Nathaniel, Pigford, npigford0@hku.hk, 3, 5, University of Washington
2, Male, Zhihua, Zhou, zzhihua@hku.hk, 2, 1, Beijing Polytechnic University
3, Male, Ogdon, Zywicki, ozywicki2@hku.hk, 2, 2, University of Boston

CREATE TABLE `RA` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `RA`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

","student, registration, course","course.name, student.student_id, registration.student_id, registration.course_id, course.course_id, student.f_name, student.l_name"
menu,"For how many times had the dish ""Chicken gumbo"" appeared on a menu page?",SELECT SUM(case when t1.name = 'Chicken gumbo' then 1 else 0 end) FROM dish as t1 inner JOIN menuitem as t2 ON t1.id = t2.dish_id,"CREATE TABLE `dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

CREATE TABLE `menuitem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `menuitem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

","CREATE TABLE `Dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `Dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

CREATE TABLE `Menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `Menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

CREATE TABLE `MenuPage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `MenuPage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

CREATE TABLE `MenuItem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `MenuItem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

","dish, menuitem","dish.name, dish.id, menuitem.dish_id"
shooting,What is the percentage of the cases involved more than 3 officers from year 2010 to 2015?,"SELECT cast(SUM(iif(officer_count > 3, 1, 0)) as real) * 100 / COUNT(case_number) FROM incidents WHERE strftime('%Y', date) BETWEEN '2010' AND '2015'","CREATE TABLE `incidents` (
  case_number TEXT PRIMARY KEY,
  date DATE,
  location TEXT,
  subject_statuses TEXT,
  subject_weapon TEXT,
  subjects TEXT,
  subject_count INTEGER,
  officers TEXT
);
Sample rows from `incidents`:
031347-2015, 2015/2/9, 7400 Bonnie View Road, Deceased, Vehicle, Luster, Desmond Dwayne B/M, 1, Tollerton, Aaron W/M
072458-2016, 2016/3/26, 8218 Willoughby Boulevard, Shoot and Miss, Shotgun, Gilstrap, Bryan B/M, 1, Cardenas, Steven L/M
089985-2016, 2016/4/16, 4800 Columbia Ave, Shoot and Miss, Handgun, Unknown L/M, 1, Ruben, Fredirick W/M

","CREATE TABLE `incidents` (
  case_number TEXT PRIMARY KEY,
  date DATE,
  location TEXT,
  subject_statuses TEXT,
  subject_weapon TEXT,
  subjects TEXT,
  subject_count INTEGER,
  officers TEXT
);
Sample rows from `incidents`:
031347-2015, 2015/2/9, 7400 Bonnie View Road, Deceased, Vehicle, Luster, Desmond Dwayne B/M, 1, Tollerton, Aaron W/M
072458-2016, 2016/3/26, 8218 Willoughby Boulevard, Shoot and Miss, Shotgun, Gilstrap, Bryan B/M, 1, Cardenas, Steven L/M
089985-2016, 2016/4/16, 4800 Columbia Ave, Shoot and Miss, Handgun, Unknown L/M, 1, Ruben, Fredirick W/M

CREATE TABLE `officers` (
  case_number TEXT REFERENCES incidents(case_number),
  race TEXT,
  gender TEXT,
  last_name TEXT,
  first_name TEXT,
  full_name TEXT
);
Sample rows from `officers`:
44523A, L, M, Patino, Michael, Patino, Michael
44523A, W, M, Fillingim, Brian, Fillingim, Brian
121982X, L, M, Padilla, Gilbert, Padilla, Gilbert

CREATE TABLE `subjects` (
  case_number TEXT REFERENCES incidents(case_number),
  race TEXT,
  gender TEXT,
  last_name TEXT,
  first_name TEXT,
  full_name TEXT
);
Sample rows from `subjects`:
44523A, L, M, Curry, James, Curry, James
121982X, L, M, Chavez, Gabriel, Chavez, Gabriel
605484T, L, M, Salinas, Nick, Salinas, Nick

",incidents,"officer_count, case_number"
retails,What is the total number of suppliers from Germany?,SELECT COUNT(t1.s_suppkey) FROM supplier as t1 inner JOIN nation as t2 ON t1.s_nationkey = t2.n_nationkey WHERE t2.n_name = 'GERMANY',"CREATE TABLE `supplier` (
  s_suppkey INTEGER,
  s_nationkey INTEGER REFERENCES nation(n_nationkey),
  s_comment TEXT,
  s_name TEXT,
  s_address TEXT,
  s_phone TEXT,
  s_acctbal REAL
);
Sample rows from `supplier`:
1, 13, blithely final pearls are. instructions thra, Supplier#000000001, ,wWs4pnykQOFl8mgVCU8EZMXqZs1w, 800-807-9579, 3082.86
2, 5, requests integrate fluffily. fluffily ironic deposits wake. bold, Supplier#000000002, WkXT6MSAJrp4qWq3W9N, 348-617-6055, 3009.73
3, 22, carefully express ideas shall have to unwin, Supplier#000000003, KjUqa42JEHaRDVQTHV6Yq2h, 471-986-9888, 9159.78

CREATE TABLE `nation` (
  n_nationkey INTEGER,
  n_name TEXT,
  n_regionkey INTEGER REFERENCES region(r_regionkey),
  n_comment TEXT
);
Sample rows from `nation`:
0, ALGERIA, 0, slyly express pinto beans cajole idly. deposits use blithely unusual packages? fluffily final accounts x-r
1, ARGENTINA, 1, instructions detect blithely stealthily pending packages
2, BRAZIL, 1, blithely unusual deposits are quickly--

","CREATE TABLE `customer` (
  c_custkey INTEGER,
  c_mktsegment TEXT,
  c_nationkey INTEGER REFERENCES nation(n_nationkey),
  c_name TEXT,
  c_address TEXT,
  c_phone TEXT,
  c_acctbal REAL,
  c_comment TEXT
);
Sample rows from `customer`:
1, BUILDING, 8, Customer#000000001, KwX3hMHjZ6, 937-241-3198, 3560.03, ironic excuses detect slyly silent requests. requests according to the exc
2, MACHINERY, 16, Customer#000000002, ioUn,eqTTXOdo, 906-965-7556, 7550.21, final express accounts mold slyly. ironic accounts cajole! quickly express a
3, FURNITURE, 11, Customer#000000003, YddJqmIdouNT9Yj, 328-750-7603, -926.96, carefully express foxes sleep carefully. pending platelets sleep thinly for t

CREATE TABLE `lineitem` (
  l_shipdate DATE,
  l_orderkey INTEGER PRIMARY KEY REFERENCES orders(o_orderkey),
  l_discount REAL,
  l_extendedprice REAL,
  l_suppkey INTEGER REFERENCES partsupp(ps_suppkey),
  l_quantity INTEGER,
  l_returnflag TEXT,
  l_partkey INTEGER REFERENCES partsupp(ps_partkey),
  l_linestatus TEXT,
  l_tax REAL,
  l_commitdate DATE,
  l_receiptdate DATE,
  l_shipmode TEXT,
  l_linenumber INTEGER PRIMARY KEY,
  l_shipinstruct TEXT,
  l_comment TEXT
);
Sample rows from `lineitem`:
1995-08-16, 1, 0.1, 58303.08, 6296, 33, N, 98768, O, 0.06, 1995-07-12, 1995-09-14, RAIL, 1, NONE, carefully bo
1995-08-13, 1, 0.09, 16947.7, 8776, 10, N, 23771, O, 0.08, 1995-07-09, 1995-08-27, TRUCK, 2, TAKE BACK RETURN, blithely regular pac
1995-06-17, 1, 0.1, 63642.9, 3859, 34, N, 113858, O, 0.08, 1995-05-22, 1995-06-30, SHIP, 3, COLLECT COD, ironic accounts sleep furiously silen

CREATE TABLE `nation` (
  n_nationkey INTEGER,
  n_name TEXT,
  n_regionkey INTEGER REFERENCES region(r_regionkey),
  n_comment TEXT
);
Sample rows from `nation`:
0, ALGERIA, 0, slyly express pinto beans cajole idly. deposits use blithely unusual packages? fluffily final accounts x-r
1, ARGENTINA, 1, instructions detect blithely stealthily pending packages
2, BRAZIL, 1, blithely unusual deposits are quickly--

CREATE TABLE `orders` (
  o_orderdate DATE,
  o_orderkey INTEGER,
  o_custkey INTEGER REFERENCES customer(c_custkey),
  o_orderpriority TEXT,
  o_shippriority INTEGER,
  o_clerk TEXT,
  o_orderstatus TEXT,
  o_totalprice REAL,
  o_comment TEXT
);
Sample rows from `orders`:
1995-04-19, 1, 73100, 4-NOT SPECIFIED, 0, Clerk#000000916, P, 203198.56, final packages sleep blithely packa
1996-11-04, 2, 92861, 1-URGENT, 0, Clerk#000000373, O, 317719.99, final excuses about the ironic even deposits detect express request
1992-02-15, 3, 44875, 1-URGENT, 0, Clerk#000000485, F, 146674.98, final final deposits cajole foxes. blithely pendin

CREATE TABLE `part` (
  p_partkey INTEGER,
  p_type TEXT,
  p_size INTEGER,
  p_brand TEXT,
  p_name TEXT,
  p_container TEXT,
  p_mfgr TEXT,
  p_retailprice REAL,
  p_comment TEXT
);
Sample rows from `part`:
1, LARGE PLATED TIN, 31, Brand#43, burlywood plum powder puff mint, LG BAG, Manufacturer#4, 901.0, blithely busy reque
2, LARGE POLISHED STEEL, 4, Brand#55, hot spring dodger dim light, LG CASE, Manufacturer#5, 902.0, even ironic requests s
3, STANDARD PLATED COPPER, 30, Brand#53, dark slate grey steel misty, WRAP CASE, Manufacturer#5, 903.0, slyly ironic fox

CREATE TABLE `partsupp` (
  ps_partkey INTEGER PRIMARY KEY REFERENCES part(p_partkey),
  ps_suppkey INTEGER PRIMARY KEY REFERENCES supplier(s_suppkey),
  ps_supplycost REAL,
  ps_availqty INTEGER,
  ps_comment TEXT
);
Sample rows from `partsupp`:
1, 2, 400.75, 1111, carefully ironic deposits use against the carefully unusual accounts. slyly silent platelets nag quickly even
1, 2502, 702.61, 3999, slyly regular accounts serve carefully. asymptotes after the slyly even instructions cajole quickly ironic requests. pending dugouts about the slyly 
1, 5002, 383.95, 7411, carefully special ideas are slyly. slyly ironic epitaphs use pending pending foxes. furiously express pinto beans lose quiet even requests: special final packages ar

CREATE TABLE `region` (
  r_regionkey INTEGER,
  r_name TEXT,
  r_comment TEXT
);
Sample rows from `region`:
0, AFRICA, asymptotes sublate after the r
1, AMERICA, requests affix quickly final tithes. blithely even packages above the a
2, ASIA, accounts cajole carefully according to the carefully exp

CREATE TABLE `supplier` (
  s_suppkey INTEGER,
  s_nationkey INTEGER REFERENCES nation(n_nationkey),
  s_comment TEXT,
  s_name TEXT,
  s_address TEXT,
  s_phone TEXT,
  s_acctbal REAL
);
Sample rows from `supplier`:
1, 13, blithely final pearls are. instructions thra, Supplier#000000001, ,wWs4pnykQOFl8mgVCU8EZMXqZs1w, 800-807-9579, 3082.86
2, 5, requests integrate fluffily. fluffily ironic deposits wake. bold, Supplier#000000002, WkXT6MSAJrp4qWq3W9N, 348-617-6055, 3009.73
3, 22, carefully express ideas shall have to unwin, Supplier#000000003, KjUqa42JEHaRDVQTHV6Yq2h, 471-986-9888, 9159.78

","supplier, nation","supplier.s_suppkey, supplier.s_nationkey, nation.n_nationkey, nation.n_name"
public_review_platform,Please list the business IDs of all the Yelp_Businesses that are good for kids.,SELECT t2.business_id FROM attributes as t1 inner JOIN Business_attributes as t2 ON t1.attribute_id = t2.attribute_id WHERE t1.attribute_name LIKE 'Good for Kids' AND t2.attribute_value LIKE 'TRUE',"CREATE TABLE `attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Business_attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_attributes`:
1, 2, none
1, 3, none
1, 13, none

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","attributes, Business_attributes","Business_attributes.business_id, attributes.attribute_id, Business_attributes.attribute_id, attributes.attribute_name, Business_attributes.attribute_value"
video_games,How many games were sold on PS3 platform in Japan?,SELECT SUM(t1.num_sales * 100000) FROM region_sales as t1 inner JOIN region as t2 ON t1.region_id = t2.id inner JOIN game_platform as t3 ON t1.game_platform_id = t3.id inner JOIN platform as t4 ON t3.platform_id = t4.id WHERE t2.region_name = 'Japan' AND t4.platform_name = 'PS3',"CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

","CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

","region_sales, region, game_platform, platform","region_sales.num_sales, region_sales.region_id, region.id, region_sales.game_platform_id, game_platform.id, game_platform.platform_id, platform.id, region.region_name, platform.platform_name"
talkingdata,"Describe the number of app IDs and location of the event ID ""79641"".","SELECT COUNT(t1.app_id), t2.longitude, t2.latitude FROM app_events as t1 inner JOIN events as t2 ON t1.event_id = t2.event_id WHERE t1.event_id = 79641 GROUP BY t2.longitude, t2.latitude","CREATE TABLE `app_events` (
  event_id INTEGER PRIMARY KEY REFERENCES events(event_id),
  app_id INTEGER PRIMARY KEY,
  is_installed INTEGER,
  is_active INTEGER
);
Sample rows from `app_events`:
2, -8942695423876075857, 1, 0
2, -8022267440849930066, 1, 0
2, -5720078949152207372, 1, 0

CREATE TABLE `events` (
  event_id INTEGER,
  device_id INTEGER,
  timestamp DATETIME,
  longitude REAL,
  latitude REAL
);
Sample rows from `events`:
1, 29182687948017175, 2016-05-01 00:55:25.0, 121.0, 31.0
2, -6401643145415154744, 2016-05-01 00:54:12.0, 104.0, 31.0
3, -4833982096941402721, 2016-05-01 00:08:05.0, 107.0, 30.0

","CREATE TABLE `app_all` (
  app_id INTEGER
);
Sample rows from `app_all`:
-9223281467940916832
-9222877069545393219
-9222785464897897681

CREATE TABLE `app_events` (
  event_id INTEGER PRIMARY KEY REFERENCES events(event_id),
  app_id INTEGER PRIMARY KEY,
  is_installed INTEGER,
  is_active INTEGER
);
Sample rows from `app_events`:
2, -8942695423876075857, 1, 0
2, -8022267440849930066, 1, 0
2, -5720078949152207372, 1, 0

CREATE TABLE `app_events_relevant` (
  event_id INTEGER PRIMARY KEY REFERENCES events_relevant(event_id),
  app_id INTEGER PRIMARY KEY REFERENCES app_all(app_id),
  is_installed INTEGER,
  is_active INTEGER
);
Sample rows from `app_events_relevant`:
2, -8942695423876075857, 1, 0
2, -8022267440849930066, 1, 0
2, -5720078949152207372, 1, 0

CREATE TABLE `app_labels` (
  app_id INTEGER REFERENCES app_all(app_id),
  label_id INTEGER REFERENCES label_categories(label_id)
);
Sample rows from `app_labels`:
7324884708820027918, 251
-4494216993218550286, 251
6058196446775239644, 406

CREATE TABLE `events` (
  event_id INTEGER,
  device_id INTEGER,
  timestamp DATETIME,
  longitude REAL,
  latitude REAL
);
Sample rows from `events`:
1, 29182687948017175, 2016-05-01 00:55:25.0, 121.0, 31.0
2, -6401643145415154744, 2016-05-01 00:54:12.0, 104.0, 31.0
3, -4833982096941402721, 2016-05-01 00:08:05.0, 107.0, 30.0

CREATE TABLE `events_relevant` (
  event_id INTEGER,
  device_id INTEGER REFERENCES gender_age(device_id),
  timestamp DATETIME,
  longitude REAL,
  latitude REAL
);
Sample rows from `events_relevant`:
2, None, -8942695423876075857, 1.0, 0.0
6, None, -8764672938472212518, 1.0, 1.0
7, None, -9050100410106163077, 1.0, 0.0

CREATE TABLE `gender_age` (
  device_id INTEGER REFERENCES phone_brand_device_model2(device_id),
  gender TEXT,
  age INTEGER,
  group TEXT
);
Sample rows from `gender_age`:
-9221086586254644858, M, 29, M29-31
-9221079146476055829, None, None, None
-9221066489596332354, M, 31, M29-31

CREATE TABLE `gender_age_test` (
  device_id INTEGER
);
Sample rows from `gender_age_test`:
-9223321966609553846
-9223042152723782980
-9222896629442493034

CREATE TABLE `gender_age_train` (
  device_id INTEGER,
  gender TEXT,
  age INTEGER,
  group TEXT
);
Sample rows from `gender_age_train`:
-9223067244542181226, M, 24, M23-26
-9222956879900151005, M, 36, M32-38
-9222754701995937853, M, 29, M29-31

CREATE TABLE `label_categories` (
  label_id INTEGER,
  category TEXT
);
Sample rows from `label_categories`:
1, None
2, game-game type
3, game-Game themes

CREATE TABLE `phone_brand_device_model2` (
  device_id INTEGER PRIMARY KEY,
  phone_brand TEXT PRIMARY KEY,
  device_model TEXT PRIMARY KEY
);
Sample rows from `phone_brand_device_model2`:
-9223321966609553846, 小米, 红米note
-9223067244542181226, vivo, Y19T
-9223042152723782980, 小米, MI 3

CREATE TABLE `sample_submission` (
  device_id INTEGER,
  F23- REAL,
  F24-26 REAL,
  F27-28 REAL,
  F29-32 REAL,
  F33-42 REAL,
  F43+ REAL,
  M22- REAL,
  M23-26 REAL,
  M27-28 REAL,
  M29-31 REAL,
  M32-38 REAL,
  M39+ REAL
);
Sample rows from `sample_submission`:
-9223321966609553846, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833
-9223042152723782980, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833
-9222896629442493034, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833

","app_events, events","app_events.app_id, events.longitude, events.latitude, app_events.event_id, events.event_id"
movie_platform,Which movie got the most critic comments? Give the name of the movie.,SELECT t2.movie_title FROM ratings as t1 inner JOIN movies as t2 ON t1.movie_id = t2.movie_id GROUP BY t2.movie_title ORDER BY COUNT(t1.critic_comments) DESC LIMIT 1,"CREATE TABLE `ratings` (
  movie_id INTEGER REFERENCES movies(movie_id),
  rating_id INTEGER REFERENCES ratings(rating_id),
  rating_url TEXT,
  rating_score INTEGER,
  rating_timestamp_utc TEXT,
  critic TEXT,
  critic_likes INTEGER,
  critic_comments INTEGER,
  user_id INTEGER REFERENCES ratings_users(user_id) REFERENCES lists_users(user_id),
  user_trialist INTEGER,
  user_subscriber INTEGER,
  user_eligible_for_trial INTEGER,
  user_has_payment_method INTEGER
);
Sample rows from `ratings`:
1066, 15610495, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/15610495, 3, 2017-06-10 12:38:33, None, 0, 0, 41579158, 0, 0, 1, 0
1066, 10704606, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/10704606, 2, 2014-08-15 23:42:31, None, 0, 0, 85981819, 1, 1, 0, 1
1066, 10177114, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/10177114, 2, 2014-01-30 13:21:57, None, 0, 0, 4208563, 0, 0, 1, 1

CREATE TABLE `movies` (
  movie_id INTEGER,
  movie_title TEXT,
  movie_release_year INTEGER,
  movie_url TEXT,
  movie_title_language TEXT,
  movie_popularity INTEGER,
  movie_image_url TEXT,
  director_id TEXT,
  director_name TEXT,
  director_url TEXT
);
Sample rows from `movies`:
1, La Antena, 2007, http://mubi.com/films/la-antena, en, 105, https://images.mubicdn.net/images/film/1/cache-7927-1581389497/image-w1280.jpg, 131, Esteban Sapir, http://mubi.com/cast/esteban-sapir
2, Elementary Particles, 2006, http://mubi.com/films/elementary-particles, en, 23, https://images.mubicdn.net/images/film/2/cache-512179-1581389841/image-w1280.jpg, 73, Oskar Roehler, http://mubi.com/cast/oskar-roehler
3, It's Winter, 2006, http://mubi.com/films/its-winter, en, 21, https://images.mubicdn.net/images/film/3/cache-7929-1481539519/image-w1280.jpg, 82, Rafi Pitts, http://mubi.com/cast/rafi-pitts

","CREATE TABLE `lists` (
  user_id INTEGER REFERENCES lists_users(user_id),
  list_id INTEGER,
  list_title TEXT,
  list_movie_number INTEGER,
  list_update_timestamp_utc TEXT,
  list_creation_timestamp_utc TEXT,
  list_followers INTEGER,
  list_url TEXT,
  list_comments INTEGER,
  list_description TEXT,
  list_cover_image_url TEXT,
  list_first_image_url TEXT,
  list_second_image_url TEXT,
  list_third_image_url TEXT
);
Sample rows from `lists`:
88260493, 1, Films that made your kid sister cry, 5, 2019-01-24 19:16:18, 2009-11-11 00:02:21, 5, http://mubi.com/lists/films-that-made-your-kid-sister-cry, 3, <p>Don’t be such a baby!!</p>
<p><strong>bold</strong></p>, https://assets.mubicdn.net/images/film/3822/image-w1280.jpg?1445914994, https://assets.mubicdn.net/images/film/3822/image-w320.jpg?1445914994, https://assets.mubicdn.net/images/film/506/image-w320.jpg?1543838422, https://assets.mubicdn.net/images/film/485/image-w320.jpg?1575331204
45204418, 2, Headscratchers, 3, 2018-12-03 15:12:20, 2009-11-11 00:05:11, 1, http://mubi.com/lists/headscratchers, 2, <p>Films that need at least two viewings to really make sense.</p>
<p>Or at least… they did for <em>me</em>.</p>, https://assets.mubicdn.net/images/film/4343/image-w1280.jpg?1583331932, https://assets.mubicdn.net/images/film/4343/image-w320.jpg?1583331932, https://assets.mubicdn.net/images/film/159/image-w320.jpg?1548864573, https://assets.mubicdn.net/images/film/142/image-w320.jpg?1544094102
48905025, 3, Sexy Time Movies, 7, 2019-05-30 03:00:07, 2009-11-11 00:20:00, 6, http://mubi.com/lists/sexy-time-movies, 5, <p>Films that get you in the mood…for love. In development.</p>
<p>Remarks</p>
<p><strong>Enter the Void</strong><br>
If you’ve seen <a href=""http://www.theauteurs.com/films/2377"" rel=""nofollow"">Enter the Void</a> then you’ll know why that’s on this list., https://assets.mubicdn.net/images/film/3491/image-w1280.jpg?1564112978, https://assets.mubicdn.net/images/film/3491/image-w320.jpg?1564112978, https://assets.mubicdn.net/images/film/2377/image-w320.jpg?1564675204, https://assets.mubicdn.net/images/film/2874/image-w320.jpg?1546574412

CREATE TABLE `movies` (
  movie_id INTEGER,
  movie_title TEXT,
  movie_release_year INTEGER,
  movie_url TEXT,
  movie_title_language TEXT,
  movie_popularity INTEGER,
  movie_image_url TEXT,
  director_id TEXT,
  director_name TEXT,
  director_url TEXT
);
Sample rows from `movies`:
1, La Antena, 2007, http://mubi.com/films/la-antena, en, 105, https://images.mubicdn.net/images/film/1/cache-7927-1581389497/image-w1280.jpg, 131, Esteban Sapir, http://mubi.com/cast/esteban-sapir
2, Elementary Particles, 2006, http://mubi.com/films/elementary-particles, en, 23, https://images.mubicdn.net/images/film/2/cache-512179-1581389841/image-w1280.jpg, 73, Oskar Roehler, http://mubi.com/cast/oskar-roehler
3, It's Winter, 2006, http://mubi.com/films/its-winter, en, 21, https://images.mubicdn.net/images/film/3/cache-7929-1481539519/image-w1280.jpg, 82, Rafi Pitts, http://mubi.com/cast/rafi-pitts

CREATE TABLE `ratings_users` (
  user_id INTEGER REFERENCES lists_users(user_id),
  rating_date_utc TEXT,
  user_trialist INTEGER,
  user_subscriber INTEGER,
  user_avatar_image_url TEXT,
  user_cover_image_url TEXT,
  user_eligible_for_trial INTEGER,
  user_has_payment_method INTEGER
);
Sample rows from `ratings_users`:
41579158, 2017-06-10, 0, 0, https://assets.mubicdn.net/images/avatars/74283/images-w150.jpg?1523895155, None, 1, 0
68654088, 2012-10-02, 0, 0, https://assets.mubicdn.net/images/avatars/27714/images-w150.jpg?1523889463, None, 1, 1
84114365, 2010-12-25, 0, 0, https://assets.mubicdn.net/images/avatars/1808/images-w150.jpg?1523883471, None, 1, 0

CREATE TABLE `lists_users` (
  user_id INTEGER PRIMARY KEY REFERENCES lists(user_id),
  list_id INTEGER PRIMARY KEY REFERENCES lists(list_id),
  list_update_date_utc TEXT,
  list_creation_date_utc TEXT,
  user_trialist INTEGER,
  user_subscriber INTEGER,
  user_avatar_image_url TEXT,
  user_cover_image_url TEXT,
  user_eligible_for_trial TEXT,
  user_has_payment_method TEXT
);
Sample rows from `lists_users`:
85981819, 1969, 2019-11-26, 2009-12-18, 1, 1, https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214, None, 0, 1
85981819, 3946, 2020-05-01, 2010-01-30, 1, 1, https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214, None, 0, 1
85981819, 6683, 2020-04-12, 2010-03-31, 1, 1, https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214, None, 0, 1

CREATE TABLE `ratings` (
  movie_id INTEGER REFERENCES movies(movie_id),
  rating_id INTEGER REFERENCES ratings(rating_id),
  rating_url TEXT,
  rating_score INTEGER,
  rating_timestamp_utc TEXT,
  critic TEXT,
  critic_likes INTEGER,
  critic_comments INTEGER,
  user_id INTEGER REFERENCES ratings_users(user_id) REFERENCES lists_users(user_id),
  user_trialist INTEGER,
  user_subscriber INTEGER,
  user_eligible_for_trial INTEGER,
  user_has_payment_method INTEGER
);
Sample rows from `ratings`:
1066, 15610495, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/15610495, 3, 2017-06-10 12:38:33, None, 0, 0, 41579158, 0, 0, 1, 0
1066, 10704606, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/10704606, 2, 2014-08-15 23:42:31, None, 0, 0, 85981819, 1, 1, 0, 1
1066, 10177114, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/10177114, 2, 2014-01-30 13:21:57, None, 0, 0, 4208563, 0, 0, 1, 1

","ratings, movies","movies.movie_title, ratings.movie_id, movies.movie_id, ratings.critic_comments"
donor,When was the highest amount of donated? How much was the amount?,"SELECT donation_timestamp, donation_total FROM donations WHERE donation_total = ( SELECT donation_total FROM donations ORDER BY donation_total DESC LIMIT 1 )","CREATE TABLE `donations` (
  donationid TEXT PRIMARY KEY,
  projectid TEXT REFERENCES projects(projectid),
  donor_acctid TEXT,
  donor_city TEXT,
  donor_state TEXT,
  donor_zip TEXT,
  is_teacher_acct TEXT,
  donation_timestamp DATETIME,
  donation_to_project REAL,
  donation_optional_support REAL,
  donation_total REAL,
  dollar_amount TEXT,
  donation_included_optional_support TEXT,
  payment_method TEXT,
  payment_included_acct_credit TEXT,
  payment_included_campaign_gift_card TEXT,
  payment_included_web_purchased_gift_card TEXT,
  payment_was_promo_matched TEXT,
  via_giving_page TEXT,
  for_honoree TEXT,
  donation_message TEXT
);
Sample rows from `donations`:
431d720bc3dfd75ae445a5eaa0b0638d, ffffac55ee02a49d1abc87ba6fc61135, 22cbc920c9b5fa08dfb331422f5926b5, Peachtree City, GA, 30269, f, 2011-08-25 14:27:34.807, 42.5, 7.5, 50.0, 10_to_100, t, no_cash_received, f, t, f, f, f, f, I gave to this project because I support the efforts of this teacher with each of her students, and her school, Suder Elementary School.
fcfedba1c8a0ba77d280cace80a909f6, ffffac55ee02a49d1abc87ba6fc61135, 521f1830a77c9dbbf8119d99c6206a16, None, GA, None, f, 2011-11-04 07:54:21.552, 26.83, 4.73, 31.56, 10_to_100, t, creditcard, f, t, f, f, f, f, I donated because I want to support kids in Georgia.
3fa95d29986aa6f401c6719ced3a3ce7, ffffac55ee02a49d1abc87ba6fc61135, 1e0a63fc8141c7ba26b8b44ca0871b90, Rockville, MD, 20853, f, 2011-11-02 22:53:53.019, 55.35, 0.0, 55.35, 10_to_100, f, no_cash_received, t, f, f, f, t, f, The Spark's 'pet' projects include those which support deaf students.  With just a few days left, the Spark's donors fund half of what remains, and challenge others to pull this project through to fruition.

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `essays` (
  projectid TEXT,
  teacher_acctid TEXT,
  title TEXT,
  short_description TEXT,
  need_statement TEXT,
  essay TEXT
);
Sample rows from `essays`:
ffffc4f85b60efc5b52347df489d0238, c24011b20fc161ed02248e85beb59a90, iMath, It is imperative that teachers bring technology into the classroom, if students are going to be able to survive in the 21st Century. The classroom needs to be ever changing along with the outside world. The iMath project will help students by obtaining cl, My students need four iPods., I am a fourth year fifth grade math teacher. The school I teach in is a fifth and sixth grade public school and is a Title One school which means that 95% of our students get free lunch. Presently, I am in the process of completing a Masters degree in Tec
ffffac55ee02a49d1abc87ba6fc61135, 947066d0af47e0566f334566553dd6a6, Recording Rockin' Readers, Can you imagine having to translate everything you read into sign language and relate it to what you already know? Help us do just that by giving us the camera that will record our stories and..., My students need a camcorder. , Can you imagine having to translate everything you read into sign language and relate it to what you already know? Help us do just that by giving us the camera that will record our stories and interpretations! 
\n
\nMy students are all deaf or hard of hea
ffff97ed93720407d70a2787475932b0, 462270f5d5c212162fcab11afa2623cb, Kindergarten In Need of Important Materials!, It takes a special person to donate to a group of children they don't know, especially in these hard economic times, but my students are worth it.  They deserve to have the proper supplies to ensure that their long education gets off to the right start, s, My students need 17 assorted classroom materials to ensure that they can learn as much as possible this year., Hi. I teach a wonderful group of 4-5 year old Kindergarten students.  They come in wanting and willing to learn new and exciting things each and every day. I work hard to ensure that my students get the most out of the entire school year. 
\n
\nFor the mo

CREATE TABLE `projects` (
  projectid TEXT PRIMARY KEY,
  teacher_acctid TEXT,
  schoolid TEXT,
  school_ncesid TEXT,
  school_latitude REAL,
  school_longitude REAL,
  school_city TEXT,
  school_state TEXT,
  school_zip INTEGER,
  school_metro TEXT,
  school_district TEXT,
  school_county TEXT,
  school_charter TEXT,
  school_magnet TEXT,
  school_year_round TEXT,
  school_nlns TEXT,
  school_kipp TEXT,
  school_charter_ready_promise TEXT,
  teacher_prefix TEXT,
  teacher_teach_for_america TEXT,
  teacher_ny_teaching_fellow TEXT,
  primary_focus_subject TEXT,
  primary_focus_area TEXT,
  secondary_focus_subject TEXT,
  secondary_focus_area TEXT,
  resource_type TEXT,
  poverty_level TEXT,
  grade_level TEXT,
  fulfillment_labor_materials REAL,
  total_price_excluding_optional_support REAL,
  total_price_including_optional_support REAL,
  students_reached INTEGER,
  eligible_double_your_impact_match TEXT,
  eligible_almost_home_match TEXT,
  date_posted DATE
);
Sample rows from `projects`:
316ed8fb3b81402ff6ac8f721bb31192, 42d43fa6f37314365d08692e08680973, c0e6ce89b244764085691a1b8e28cb81, 063627006187, 36.57634, -119.608713, Selma, CA, 93662, None, Selma Unified Sch District, Fresno, f, f, f, f, f, f, Mrs., f, f, Literature & Writing, Literacy & Language, College & Career Prep, Applied Learning, Books, highest poverty, Grades 6-8, 30.0, 555.81, 653.89, 32, f, f, 2014-05-12
90de744e368a7e4883223ca49318ae30, 864eb466462bf704bf7a16a585ef296a, d711e47810900c96f26a5d0be30c446d, 483702008193, 32.911179, -96.72364, Dallas, TX, 75243, urban, Richardson Ind School District, Dallas, f, f, f, f, f, f, Mrs., f, f, Literacy, Literacy & Language, ESL, Literacy & Language, Books, highest poverty, Grades PreK-2, 30.0, 296.47, 348.79, 22, f, f, 2014-05-12
32943bb1063267de6ed19fc0ceb4b9a7, 37f85135259ece793213aca9d8765542, 665c3613013ba0a66e3a2a26b89f1b68, 410327000109, 45.166039, -122.414576, Colton, OR, 97017, rural, Colton School District 53, Clackamas, f, f, f, f, f, f, Mr., f, f, Literacy, Literacy & Language, Mathematics, Math & Science, Technology, high poverty, Grades PreK-2, 30.0, 430.89, 506.93, 17, f, f, 2014-05-11

CREATE TABLE `donations` (
  donationid TEXT PRIMARY KEY,
  projectid TEXT REFERENCES projects(projectid),
  donor_acctid TEXT,
  donor_city TEXT,
  donor_state TEXT,
  donor_zip TEXT,
  is_teacher_acct TEXT,
  donation_timestamp DATETIME,
  donation_to_project REAL,
  donation_optional_support REAL,
  donation_total REAL,
  dollar_amount TEXT,
  donation_included_optional_support TEXT,
  payment_method TEXT,
  payment_included_acct_credit TEXT,
  payment_included_campaign_gift_card TEXT,
  payment_included_web_purchased_gift_card TEXT,
  payment_was_promo_matched TEXT,
  via_giving_page TEXT,
  for_honoree TEXT,
  donation_message TEXT
);
Sample rows from `donations`:
431d720bc3dfd75ae445a5eaa0b0638d, ffffac55ee02a49d1abc87ba6fc61135, 22cbc920c9b5fa08dfb331422f5926b5, Peachtree City, GA, 30269, f, 2011-08-25 14:27:34.807, 42.5, 7.5, 50.0, 10_to_100, t, no_cash_received, f, t, f, f, f, f, I gave to this project because I support the efforts of this teacher with each of her students, and her school, Suder Elementary School.
fcfedba1c8a0ba77d280cace80a909f6, ffffac55ee02a49d1abc87ba6fc61135, 521f1830a77c9dbbf8119d99c6206a16, None, GA, None, f, 2011-11-04 07:54:21.552, 26.83, 4.73, 31.56, 10_to_100, t, creditcard, f, t, f, f, f, f, I donated because I want to support kids in Georgia.
3fa95d29986aa6f401c6719ced3a3ce7, ffffac55ee02a49d1abc87ba6fc61135, 1e0a63fc8141c7ba26b8b44ca0871b90, Rockville, MD, 20853, f, 2011-11-02 22:53:53.019, 55.35, 0.0, 55.35, 10_to_100, f, no_cash_received, t, f, f, f, t, f, The Spark's 'pet' projects include those which support deaf students.  With just a few days left, the Spark's donors fund half of what remains, and challenge others to pull this project through to fruition.

CREATE TABLE `resources` (
  resourceid TEXT PRIMARY KEY,
  projectid TEXT REFERENCES projects(projectid),
  vendorid INTEGER,
  vendor_name TEXT,
  project_resource_type TEXT,
  item_name TEXT,
  item_number TEXT,
  item_unit_price REAL,
  item_quantity INTEGER
);
Sample rows from `resources`:
8a1c1c45bc30d065061912fd9114fcf3, ffffc4f85b60efc5b52347df489d0238, 430, Woodwind and Brasswind, Technology, iPod nano 4th Gen 8GB (Black), 249995.001, 149.0, 4
015d2c4935c50427964a12dc3f584091, ffffac55ee02a49d1abc87ba6fc61135, 82, Best Buy for Business, Technology, Sony bloggie MHS-FS1 - camcorder - internal flash memory, BB11216668, 148.0, 1
26a02944b2f0c25f9abdeacca3ede3ee, ffff97ed93720407d70a2787475932b0, 767, Lakeshore Learning Materials, Supplies, VX748 - Best-Buy Jumbo Crayons - 12-Color Box, VX748, 69.95, 1

",donations,"donation_timestamp, donation_total"
bike_share_1,"When was the hottest temperature recorded? If there are multiple dates with the hottest temperature, indicate all of the dates.","SELECT max_temperature_f, date FROM weather WHERE max_temperature_f = ( SELECT MAX(max_temperature_f) FROM weather WHERE max_temperature_f is NOT null AND max_temperature_f is NOT '' )","CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches REAL,
  mean_sea_level_pressure_inches REAL,
  min_sea_level_pressure_inches REAL,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches TEXT,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code TEXT
);
Sample rows from `weather`:
8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107
8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30.0, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107
8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30.0, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107

","CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat REAL,
  long REAL,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);
Sample rows from `station`:
2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013
3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013
4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013

CREATE TABLE `status` (
  station_id INTEGER,
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);
Sample rows from `status`:
2, 2, 25, 2013/08/29 12:06:01
2, 2, 25, 2013/08/29 12:07:01
2, 2, 25, 2013/08/29 12:08:01

CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);
Sample rows from `trip`:
4069, 174, 8/29/2013 9:08, 2nd at South Park, 64, 8/29/2013 9:11, 2nd at South Park, 64, 288, Subscriber, 94114
4073, 1067, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:42, San Francisco Caltrain 2 (330 Townsend), 69, 321, Subscriber, 94703
4074, 1131, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:43, San Francisco Caltrain 2 (330 Townsend), 69, 317, Subscriber, 94115

CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches REAL,
  mean_sea_level_pressure_inches REAL,
  min_sea_level_pressure_inches REAL,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches TEXT,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code TEXT
);
Sample rows from `weather`:
8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107
8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30.0, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107
8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30.0, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107

",weather,max_temperature_f
soccer_2016,Provide the country ID of East London.,SELECT country_id FROM city WHERE city_Name = 'East London',"CREATE TABLE `city` (
  City_Id INTEGER,
  City_Name TEXT,
  Country_id INTEGER
);
Sample rows from `city`:
1, Bangalore, 1
2, Chandigarh, 1
3, Delhi, 1

","CREATE TABLE `Batting_Style` (
  Batting_Id INTEGER,
  Batting_hand TEXT
);
Sample rows from `Batting_Style`:
1, Left-hand bat
2, Right-hand bat

CREATE TABLE `Bowling_Style` (
  Bowling_Id INTEGER,
  Bowling_skill TEXT
);
Sample rows from `Bowling_Style`:
1, Right-arm medium
2, Right-arm offbreak
3, Right-arm fast-medium

CREATE TABLE `City` (
  City_Id INTEGER,
  City_Name TEXT,
  Country_id INTEGER
);
Sample rows from `City`:
1, Bangalore, 1
2, Chandigarh, 1
3, Delhi, 1

CREATE TABLE `Country` (
  Country_Id INTEGER REFERENCES Country(Country_Id),
  Country_Name TEXT
);
Sample rows from `Country`:
1, India
2, South Africa
3, U.A.E

CREATE TABLE `Extra_Type` (
  Extra_Id INTEGER,
  Extra_Name TEXT
);
Sample rows from `Extra_Type`:
1, legbyes
2, wides
3, byes

CREATE TABLE `Extra_Runs` (
  Match_Id INTEGER PRIMARY KEY,
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Extra_Type_Id INTEGER REFERENCES Extra_Type(Extra_Id),
  Extra_Runs INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Extra_Runs`:
335987, 1, 1, 1, 1, 1
335987, 1, 2, 2, 1, 2
335987, 1, 3, 2, 1, 1

CREATE TABLE `Out_Type` (
  Out_Id INTEGER,
  Out_Name TEXT
);
Sample rows from `Out_Type`:
1, caught
2, bowled
3, run out

CREATE TABLE `Outcome` (
  Outcome_Id INTEGER,
  Outcome_Type TEXT
);
Sample rows from `Outcome`:
1, Result
2, No Result
3, Superover

CREATE TABLE `Player` (
  Player_Id INTEGER,
  Player_Name TEXT,
  DOB DATE,
  Batting_hand INTEGER REFERENCES Batting_Style(Batting_Id),
  Bowling_skill INTEGER REFERENCES Bowling_Style(Bowling_Id),
  Country_Name INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Player`:
1, SC Ganguly, 1972-07-08, 1, 1, 1
2, BB McCullum, 1981-09-27, 2, 1, 4
3, RT Ponting, 1974-12-19, 2, 1, 5

CREATE TABLE `Rolee` (
  Role_Id INTEGER,
  Role_Desc TEXT
);
Sample rows from `Rolee`:
1, Captain
2, Keeper
3, Player

CREATE TABLE `Season` (
  Season_Id INTEGER,
  Man_of_the_Series INTEGER,
  Orange_Cap INTEGER,
  Purple_Cap INTEGER,
  Season_Year INTEGER
);
Sample rows from `Season`:
1, 32, 100, 102, 2008
2, 53, 18, 61, 2009
3, 133, 133, 131, 2010

CREATE TABLE `Team` (
  Team_Id INTEGER,
  Team_Name TEXT
);
Sample rows from `Team`:
1, Kolkata Knight Riders
2, Royal Challengers Bangalore
3, Chennai Super Kings

CREATE TABLE `Toss_Decision` (
  Toss_Id INTEGER,
  Toss_Name TEXT
);
Sample rows from `Toss_Decision`:
1, field
2, bat

CREATE TABLE `Umpire` (
  Umpire_Id INTEGER,
  Umpire_Name TEXT,
  Umpire_Country INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Umpire`:
1, Asad Rauf, 6
2, MR Benson, 10
3, Aleem Dar, 6

CREATE TABLE `Venue` (
  Venue_Id INTEGER,
  Venue_Name TEXT,
  City_Id INTEGER REFERENCES City(City_Id)
);
Sample rows from `Venue`:
1, M Chinnaswamy Stadium, 1
2, Punjab Cricket Association Stadium, 2
3, Feroz Shah Kotla, 3

CREATE TABLE `Win_By` (
  Win_Id INTEGER,
  Win_Type TEXT
);
Sample rows from `Win_By`:
1, runs
2, wickets
3, NO Result

CREATE TABLE `Match` (
  Match_Id INTEGER,
  Team_1 INTEGER REFERENCES Team(Team_Id),
  Team_2 INTEGER REFERENCES Team(Team_Id),
  Match_Date DATE,
  Season_Id INTEGER REFERENCES Season(Season_Id),
  Venue_Id INTEGER REFERENCES Venue(Venue_Id),
  Toss_Winner INTEGER REFERENCES Team(Team_Id),
  Toss_Decide INTEGER REFERENCES Toss_Decision(Toss_Id),
  Win_Type INTEGER REFERENCES Win_By(Win_Id),
  Win_Margin INTEGER,
  Outcome_type INTEGER REFERENCES Out_Type(Out_Id),
  Match_Winner INTEGER REFERENCES Team(Team_Id),
  Man_of_the_Match INTEGER REFERENCES Player(Player_Id)
);
Sample rows from `Match`:
335987, 2, 1, 2008-04-18, 1, 1, 2, 1, 1, 140, 1, 1, 2
335988, 4, 3, 2008-04-19, 1, 2, 3, 2, 1, 33, 1, 3, 19
335989, 6, 5, 2008-04-19, 1, 3, 5, 2, 2, 9, 1, 6, 90

CREATE TABLE `Ball_by_Ball` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Innings_No INTEGER PRIMARY KEY,
  Team_Batting INTEGER,
  Team_Bowling INTEGER,
  Striker_Batting_Position INTEGER,
  Striker INTEGER,
  Non_Striker INTEGER,
  Bowler INTEGER
);
Sample rows from `Ball_by_Ball`:
335987, 1, 1, 1, 1, 2, 1, 1, 2, 14
335987, 1, 1, 2, 2, 1, 1, 6, 7, 106
335987, 1, 2, 1, 1, 2, 2, 2, 1, 14

CREATE TABLE `Batsman_Scored` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Runs_Scored INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Batsman_Scored`:
335987, 1, 1, 0, 1
335987, 1, 1, 1, 2
335987, 1, 2, 0, 1

CREATE TABLE `Player_Match` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Player_Id INTEGER PRIMARY KEY REFERENCES Player(Player_Id),
  Role_Id INTEGER PRIMARY KEY REFERENCES Rolee(Role_Id),
  Team_Id INTEGER REFERENCES Team(Team_Id)
);
Sample rows from `Player_Match`:
335987, 1, 1, 1
335987, 2, 3, 1
335987, 3, 3, 1

CREATE TABLE `Wicket_Taken` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Player_Out INTEGER REFERENCES Player(Player_Id),
  Kind_Out INTEGER REFERENCES Out_Type(Out_Id),
  Fielders INTEGER REFERENCES Player(Player_Id),
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Wicket_Taken`:
335987, 2, 1, 6, 2, None, 2
335987, 3, 2, 8, 2, None, 2
335987, 5, 5, 9, 1, 83, 2

",city,"country_id, city_Name"
university,Which university had the highest reputation in 2012?,SELECT t2.university_name FROM university_ranking_year as t1 inner JOIN university as t2 ON t1.university_id = t2.id WHERE t1.year = 2012 ORDER BY t1.score DESC LIMIT 1,"CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

","CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

CREATE TABLE `ranking_system` (
  id INTEGER,
  system_name TEXT
);
Sample rows from `ranking_system`:
1, Times Higher Education World University Ranking
2, Shanghai Ranking
3, Center for World University Rankings

CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

","university_ranking_year, university","university.university_name, university_ranking_year.university_id, university.id, university_ranking_year.year, university_ranking_year.score"
university,What are the names of the top 5 universities with the highest number of international students?,SELECT DISTINCT t2.university_name FROM university_year as t1 inner JOIN university as t2 ON t1.university_id = t2.id ORDER BY (CasT(t1.num_students * t1.pct_international_students as real) / 100) DESC LIMIT 5,"CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

","CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

CREATE TABLE `ranking_system` (
  id INTEGER,
  system_name TEXT
);
Sample rows from `ranking_system`:
1, Times Higher Education World University Ranking
2, Shanghai Ranking
3, Center for World University Rankings

CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

","university_year, university","university.university_name, university_year.university_id, university.id, university_year.num_students, university_year.pct_international_students"
public_review_platform,Count the active businesses that has an attribute of BYOB with high review count.,SELECT COUNT(DISTINCT t1.business_id) FROM business as t1 inner JOIN business_attributes as t2 ON t1.business_id = t2.business_id inner JOIN attributes as t3 ON t2.attribute_id = t3.attribute_id WHERE t3.attribute_name = 'BYOB' AND t1.review_count = 'High' AND t1.active = 'true',"CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `business_attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `business_attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","business, business_attributes, attributes","business.business_id, business_attributes.business_id, business_attributes.attribute_id, attributes.attribute_id, attributes.attribute_name, business.review_count, business.active"
donor,State the name of vendor that supplies book resources to all school with literacy subject as their primary focus.,SELECT DISTINCT t1.vendor_name FROM resources as t1 inner JOIN projects as t2 ON t1.projectid = t2.projectid WHERE t2.primary_focus_subject LIKE 'Literacy',"CREATE TABLE `resources` (
  resourceid TEXT PRIMARY KEY,
  projectid TEXT REFERENCES projects(projectid),
  vendorid INTEGER,
  vendor_name TEXT,
  project_resource_type TEXT,
  item_name TEXT,
  item_number TEXT,
  item_unit_price REAL,
  item_quantity INTEGER
);
Sample rows from `resources`:
8a1c1c45bc30d065061912fd9114fcf3, ffffc4f85b60efc5b52347df489d0238, 430, Woodwind and Brasswind, Technology, iPod nano 4th Gen 8GB (Black), 249995.001, 149.0, 4
015d2c4935c50427964a12dc3f584091, ffffac55ee02a49d1abc87ba6fc61135, 82, Best Buy for Business, Technology, Sony bloggie MHS-FS1 - camcorder - internal flash memory, BB11216668, 148.0, 1
26a02944b2f0c25f9abdeacca3ede3ee, ffff97ed93720407d70a2787475932b0, 767, Lakeshore Learning Materials, Supplies, VX748 - Best-Buy Jumbo Crayons - 12-Color Box, VX748, 69.95, 1

CREATE TABLE `projects` (
  projectid TEXT PRIMARY KEY,
  teacher_acctid TEXT,
  schoolid TEXT,
  school_ncesid TEXT,
  school_latitude REAL,
  school_longitude REAL,
  school_city TEXT,
  school_state TEXT,
  school_zip INTEGER,
  school_metro TEXT,
  school_district TEXT,
  school_county TEXT,
  school_charter TEXT,
  school_magnet TEXT,
  school_year_round TEXT,
  school_nlns TEXT,
  school_kipp TEXT,
  school_charter_ready_promise TEXT,
  teacher_prefix TEXT,
  teacher_teach_for_america TEXT,
  teacher_ny_teaching_fellow TEXT,
  primary_focus_subject TEXT,
  primary_focus_area TEXT,
  secondary_focus_subject TEXT,
  secondary_focus_area TEXT,
  resource_type TEXT,
  poverty_level TEXT,
  grade_level TEXT,
  fulfillment_labor_materials REAL,
  total_price_excluding_optional_support REAL,
  total_price_including_optional_support REAL,
  students_reached INTEGER,
  eligible_double_your_impact_match TEXT,
  eligible_almost_home_match TEXT,
  date_posted DATE
);
Sample rows from `projects`:
316ed8fb3b81402ff6ac8f721bb31192, 42d43fa6f37314365d08692e08680973, c0e6ce89b244764085691a1b8e28cb81, 063627006187, 36.57634, -119.608713, Selma, CA, 93662, None, Selma Unified Sch District, Fresno, f, f, f, f, f, f, Mrs., f, f, Literature & Writing, Literacy & Language, College & Career Prep, Applied Learning, Books, highest poverty, Grades 6-8, 30.0, 555.81, 653.89, 32, f, f, 2014-05-12
90de744e368a7e4883223ca49318ae30, 864eb466462bf704bf7a16a585ef296a, d711e47810900c96f26a5d0be30c446d, 483702008193, 32.911179, -96.72364, Dallas, TX, 75243, urban, Richardson Ind School District, Dallas, f, f, f, f, f, f, Mrs., f, f, Literacy, Literacy & Language, ESL, Literacy & Language, Books, highest poverty, Grades PreK-2, 30.0, 296.47, 348.79, 22, f, f, 2014-05-12
32943bb1063267de6ed19fc0ceb4b9a7, 37f85135259ece793213aca9d8765542, 665c3613013ba0a66e3a2a26b89f1b68, 410327000109, 45.166039, -122.414576, Colton, OR, 97017, rural, Colton School District 53, Clackamas, f, f, f, f, f, f, Mr., f, f, Literacy, Literacy & Language, Mathematics, Math & Science, Technology, high poverty, Grades PreK-2, 30.0, 430.89, 506.93, 17, f, f, 2014-05-11

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `essays` (
  projectid TEXT,
  teacher_acctid TEXT,
  title TEXT,
  short_description TEXT,
  need_statement TEXT,
  essay TEXT
);
Sample rows from `essays`:
ffffc4f85b60efc5b52347df489d0238, c24011b20fc161ed02248e85beb59a90, iMath, It is imperative that teachers bring technology into the classroom, if students are going to be able to survive in the 21st Century. The classroom needs to be ever changing along with the outside world. The iMath project will help students by obtaining cl, My students need four iPods., I am a fourth year fifth grade math teacher. The school I teach in is a fifth and sixth grade public school and is a Title One school which means that 95% of our students get free lunch. Presently, I am in the process of completing a Masters degree in Tec
ffffac55ee02a49d1abc87ba6fc61135, 947066d0af47e0566f334566553dd6a6, Recording Rockin' Readers, Can you imagine having to translate everything you read into sign language and relate it to what you already know? Help us do just that by giving us the camera that will record our stories and..., My students need a camcorder. , Can you imagine having to translate everything you read into sign language and relate it to what you already know? Help us do just that by giving us the camera that will record our stories and interpretations! 
\n
\nMy students are all deaf or hard of hea
ffff97ed93720407d70a2787475932b0, 462270f5d5c212162fcab11afa2623cb, Kindergarten In Need of Important Materials!, It takes a special person to donate to a group of children they don't know, especially in these hard economic times, but my students are worth it.  They deserve to have the proper supplies to ensure that their long education gets off to the right start, s, My students need 17 assorted classroom materials to ensure that they can learn as much as possible this year., Hi. I teach a wonderful group of 4-5 year old Kindergarten students.  They come in wanting and willing to learn new and exciting things each and every day. I work hard to ensure that my students get the most out of the entire school year. 
\n
\nFor the mo

CREATE TABLE `projects` (
  projectid TEXT PRIMARY KEY,
  teacher_acctid TEXT,
  schoolid TEXT,
  school_ncesid TEXT,
  school_latitude REAL,
  school_longitude REAL,
  school_city TEXT,
  school_state TEXT,
  school_zip INTEGER,
  school_metro TEXT,
  school_district TEXT,
  school_county TEXT,
  school_charter TEXT,
  school_magnet TEXT,
  school_year_round TEXT,
  school_nlns TEXT,
  school_kipp TEXT,
  school_charter_ready_promise TEXT,
  teacher_prefix TEXT,
  teacher_teach_for_america TEXT,
  teacher_ny_teaching_fellow TEXT,
  primary_focus_subject TEXT,
  primary_focus_area TEXT,
  secondary_focus_subject TEXT,
  secondary_focus_area TEXT,
  resource_type TEXT,
  poverty_level TEXT,
  grade_level TEXT,
  fulfillment_labor_materials REAL,
  total_price_excluding_optional_support REAL,
  total_price_including_optional_support REAL,
  students_reached INTEGER,
  eligible_double_your_impact_match TEXT,
  eligible_almost_home_match TEXT,
  date_posted DATE
);
Sample rows from `projects`:
316ed8fb3b81402ff6ac8f721bb31192, 42d43fa6f37314365d08692e08680973, c0e6ce89b244764085691a1b8e28cb81, 063627006187, 36.57634, -119.608713, Selma, CA, 93662, None, Selma Unified Sch District, Fresno, f, f, f, f, f, f, Mrs., f, f, Literature & Writing, Literacy & Language, College & Career Prep, Applied Learning, Books, highest poverty, Grades 6-8, 30.0, 555.81, 653.89, 32, f, f, 2014-05-12
90de744e368a7e4883223ca49318ae30, 864eb466462bf704bf7a16a585ef296a, d711e47810900c96f26a5d0be30c446d, 483702008193, 32.911179, -96.72364, Dallas, TX, 75243, urban, Richardson Ind School District, Dallas, f, f, f, f, f, f, Mrs., f, f, Literacy, Literacy & Language, ESL, Literacy & Language, Books, highest poverty, Grades PreK-2, 30.0, 296.47, 348.79, 22, f, f, 2014-05-12
32943bb1063267de6ed19fc0ceb4b9a7, 37f85135259ece793213aca9d8765542, 665c3613013ba0a66e3a2a26b89f1b68, 410327000109, 45.166039, -122.414576, Colton, OR, 97017, rural, Colton School District 53, Clackamas, f, f, f, f, f, f, Mr., f, f, Literacy, Literacy & Language, Mathematics, Math & Science, Technology, high poverty, Grades PreK-2, 30.0, 430.89, 506.93, 17, f, f, 2014-05-11

CREATE TABLE `donations` (
  donationid TEXT PRIMARY KEY,
  projectid TEXT REFERENCES projects(projectid),
  donor_acctid TEXT,
  donor_city TEXT,
  donor_state TEXT,
  donor_zip TEXT,
  is_teacher_acct TEXT,
  donation_timestamp DATETIME,
  donation_to_project REAL,
  donation_optional_support REAL,
  donation_total REAL,
  dollar_amount TEXT,
  donation_included_optional_support TEXT,
  payment_method TEXT,
  payment_included_acct_credit TEXT,
  payment_included_campaign_gift_card TEXT,
  payment_included_web_purchased_gift_card TEXT,
  payment_was_promo_matched TEXT,
  via_giving_page TEXT,
  for_honoree TEXT,
  donation_message TEXT
);
Sample rows from `donations`:
431d720bc3dfd75ae445a5eaa0b0638d, ffffac55ee02a49d1abc87ba6fc61135, 22cbc920c9b5fa08dfb331422f5926b5, Peachtree City, GA, 30269, f, 2011-08-25 14:27:34.807, 42.5, 7.5, 50.0, 10_to_100, t, no_cash_received, f, t, f, f, f, f, I gave to this project because I support the efforts of this teacher with each of her students, and her school, Suder Elementary School.
fcfedba1c8a0ba77d280cace80a909f6, ffffac55ee02a49d1abc87ba6fc61135, 521f1830a77c9dbbf8119d99c6206a16, None, GA, None, f, 2011-11-04 07:54:21.552, 26.83, 4.73, 31.56, 10_to_100, t, creditcard, f, t, f, f, f, f, I donated because I want to support kids in Georgia.
3fa95d29986aa6f401c6719ced3a3ce7, ffffac55ee02a49d1abc87ba6fc61135, 1e0a63fc8141c7ba26b8b44ca0871b90, Rockville, MD, 20853, f, 2011-11-02 22:53:53.019, 55.35, 0.0, 55.35, 10_to_100, f, no_cash_received, t, f, f, f, t, f, The Spark's 'pet' projects include those which support deaf students.  With just a few days left, the Spark's donors fund half of what remains, and challenge others to pull this project through to fruition.

CREATE TABLE `resources` (
  resourceid TEXT PRIMARY KEY,
  projectid TEXT REFERENCES projects(projectid),
  vendorid INTEGER,
  vendor_name TEXT,
  project_resource_type TEXT,
  item_name TEXT,
  item_number TEXT,
  item_unit_price REAL,
  item_quantity INTEGER
);
Sample rows from `resources`:
8a1c1c45bc30d065061912fd9114fcf3, ffffc4f85b60efc5b52347df489d0238, 430, Woodwind and Brasswind, Technology, iPod nano 4th Gen 8GB (Black), 249995.001, 149.0, 4
015d2c4935c50427964a12dc3f584091, ffffac55ee02a49d1abc87ba6fc61135, 82, Best Buy for Business, Technology, Sony bloggie MHS-FS1 - camcorder - internal flash memory, BB11216668, 148.0, 1
26a02944b2f0c25f9abdeacca3ede3ee, ffff97ed93720407d70a2787475932b0, 767, Lakeshore Learning Materials, Supplies, VX748 - Best-Buy Jumbo Crayons - 12-Color Box, VX748, 69.95, 1

","resources, projects","resources.vendor_name, resources.projectid, projects.projectid, projects.primary_focus_subject"
public_review_platform,How long is the Yelp business No. 15098 opened on Monday?,"SELECT substr(t1.closing_time, 1, 2) + 12 - substr(t1.opening_time, 1, 2) as yysj FROM business_hours as t1 inner JOIN days as t2 ON t1.day_id = t2.day_id WHERE t2.day_of_week = 'Monday' AND t1.business_id = 15098","CREATE TABLE `business_hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `business_hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `days`:
1, Sunday
2, Monday
3, Tuesday

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","business_hours, days","business_hours.closing_time, business_hours.opening_time, business_hours.day_id, days.day_id, days.day_of_week, business_hours.business_id"
chicago_crime,"Among all the crimes that had happened in Central Chicago, how many of them were cases of domestic violence?",SELECT COUNT(*) FROM crime as t1 inner JOIN district as t2 ON t1.district_no = t2.district_no WHERE t2.district_name = 'Central' AND t1.domestic = 'TRUE',"CREATE TABLE `crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

CREATE TABLE `district` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `district`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

","CREATE TABLE `Community_Area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `Community_Area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `District` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `District`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `FBI_Code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `FBI_Code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `IUCR` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `IUCR`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `Neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `Neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `Ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `Ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `Crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `Crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","crime, district","crime.district_no, district.district_no, district.district_name, crime.domestic"
soccer_2016,"Among all the players born after the year 1985, what is the percentage of the players who use the right hand as their batting hand?","SELECT cast(SUM(case when t2.batting_hand = 'Right-hand bat' then 1 else 0 end) as real) * 100 / COUNT(t1.player_id) FROM player as t1 inner JOIN batting_style as t2 ON t1.batting_hand = t2.batting_id WHERE substr(t1.dob, 1, 4) > 1985","CREATE TABLE `player` (
  Player_Id INTEGER,
  Player_Name TEXT,
  DOB DATE,
  Batting_hand INTEGER REFERENCES Batting_Style(Batting_Id),
  Bowling_skill INTEGER REFERENCES Bowling_Style(Bowling_Id),
  Country_Name INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `player`:
1, SC Ganguly, 1972-07-08, 1, 1, 1
2, BB McCullum, 1981-09-27, 2, 1, 4
3, RT Ponting, 1974-12-19, 2, 1, 5

CREATE TABLE `batting_style` (
  Batting_Id INTEGER,
  Batting_hand TEXT
);
Sample rows from `batting_style`:
1, Left-hand bat
2, Right-hand bat

","CREATE TABLE `Batting_Style` (
  Batting_Id INTEGER,
  Batting_hand TEXT
);
Sample rows from `Batting_Style`:
1, Left-hand bat
2, Right-hand bat

CREATE TABLE `Bowling_Style` (
  Bowling_Id INTEGER,
  Bowling_skill TEXT
);
Sample rows from `Bowling_Style`:
1, Right-arm medium
2, Right-arm offbreak
3, Right-arm fast-medium

CREATE TABLE `City` (
  City_Id INTEGER,
  City_Name TEXT,
  Country_id INTEGER
);
Sample rows from `City`:
1, Bangalore, 1
2, Chandigarh, 1
3, Delhi, 1

CREATE TABLE `Country` (
  Country_Id INTEGER REFERENCES Country(Country_Id),
  Country_Name TEXT
);
Sample rows from `Country`:
1, India
2, South Africa
3, U.A.E

CREATE TABLE `Extra_Type` (
  Extra_Id INTEGER,
  Extra_Name TEXT
);
Sample rows from `Extra_Type`:
1, legbyes
2, wides
3, byes

CREATE TABLE `Extra_Runs` (
  Match_Id INTEGER PRIMARY KEY,
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Extra_Type_Id INTEGER REFERENCES Extra_Type(Extra_Id),
  Extra_Runs INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Extra_Runs`:
335987, 1, 1, 1, 1, 1
335987, 1, 2, 2, 1, 2
335987, 1, 3, 2, 1, 1

CREATE TABLE `Out_Type` (
  Out_Id INTEGER,
  Out_Name TEXT
);
Sample rows from `Out_Type`:
1, caught
2, bowled
3, run out

CREATE TABLE `Outcome` (
  Outcome_Id INTEGER,
  Outcome_Type TEXT
);
Sample rows from `Outcome`:
1, Result
2, No Result
3, Superover

CREATE TABLE `Player` (
  Player_Id INTEGER,
  Player_Name TEXT,
  DOB DATE,
  Batting_hand INTEGER REFERENCES Batting_Style(Batting_Id),
  Bowling_skill INTEGER REFERENCES Bowling_Style(Bowling_Id),
  Country_Name INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Player`:
1, SC Ganguly, 1972-07-08, 1, 1, 1
2, BB McCullum, 1981-09-27, 2, 1, 4
3, RT Ponting, 1974-12-19, 2, 1, 5

CREATE TABLE `Rolee` (
  Role_Id INTEGER,
  Role_Desc TEXT
);
Sample rows from `Rolee`:
1, Captain
2, Keeper
3, Player

CREATE TABLE `Season` (
  Season_Id INTEGER,
  Man_of_the_Series INTEGER,
  Orange_Cap INTEGER,
  Purple_Cap INTEGER,
  Season_Year INTEGER
);
Sample rows from `Season`:
1, 32, 100, 102, 2008
2, 53, 18, 61, 2009
3, 133, 133, 131, 2010

CREATE TABLE `Team` (
  Team_Id INTEGER,
  Team_Name TEXT
);
Sample rows from `Team`:
1, Kolkata Knight Riders
2, Royal Challengers Bangalore
3, Chennai Super Kings

CREATE TABLE `Toss_Decision` (
  Toss_Id INTEGER,
  Toss_Name TEXT
);
Sample rows from `Toss_Decision`:
1, field
2, bat

CREATE TABLE `Umpire` (
  Umpire_Id INTEGER,
  Umpire_Name TEXT,
  Umpire_Country INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Umpire`:
1, Asad Rauf, 6
2, MR Benson, 10
3, Aleem Dar, 6

CREATE TABLE `Venue` (
  Venue_Id INTEGER,
  Venue_Name TEXT,
  City_Id INTEGER REFERENCES City(City_Id)
);
Sample rows from `Venue`:
1, M Chinnaswamy Stadium, 1
2, Punjab Cricket Association Stadium, 2
3, Feroz Shah Kotla, 3

CREATE TABLE `Win_By` (
  Win_Id INTEGER,
  Win_Type TEXT
);
Sample rows from `Win_By`:
1, runs
2, wickets
3, NO Result

CREATE TABLE `Match` (
  Match_Id INTEGER,
  Team_1 INTEGER REFERENCES Team(Team_Id),
  Team_2 INTEGER REFERENCES Team(Team_Id),
  Match_Date DATE,
  Season_Id INTEGER REFERENCES Season(Season_Id),
  Venue_Id INTEGER REFERENCES Venue(Venue_Id),
  Toss_Winner INTEGER REFERENCES Team(Team_Id),
  Toss_Decide INTEGER REFERENCES Toss_Decision(Toss_Id),
  Win_Type INTEGER REFERENCES Win_By(Win_Id),
  Win_Margin INTEGER,
  Outcome_type INTEGER REFERENCES Out_Type(Out_Id),
  Match_Winner INTEGER REFERENCES Team(Team_Id),
  Man_of_the_Match INTEGER REFERENCES Player(Player_Id)
);
Sample rows from `Match`:
335987, 2, 1, 2008-04-18, 1, 1, 2, 1, 1, 140, 1, 1, 2
335988, 4, 3, 2008-04-19, 1, 2, 3, 2, 1, 33, 1, 3, 19
335989, 6, 5, 2008-04-19, 1, 3, 5, 2, 2, 9, 1, 6, 90

CREATE TABLE `Ball_by_Ball` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Innings_No INTEGER PRIMARY KEY,
  Team_Batting INTEGER,
  Team_Bowling INTEGER,
  Striker_Batting_Position INTEGER,
  Striker INTEGER,
  Non_Striker INTEGER,
  Bowler INTEGER
);
Sample rows from `Ball_by_Ball`:
335987, 1, 1, 1, 1, 2, 1, 1, 2, 14
335987, 1, 1, 2, 2, 1, 1, 6, 7, 106
335987, 1, 2, 1, 1, 2, 2, 2, 1, 14

CREATE TABLE `Batsman_Scored` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Runs_Scored INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Batsman_Scored`:
335987, 1, 1, 0, 1
335987, 1, 1, 1, 2
335987, 1, 2, 0, 1

CREATE TABLE `Player_Match` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Player_Id INTEGER PRIMARY KEY REFERENCES Player(Player_Id),
  Role_Id INTEGER PRIMARY KEY REFERENCES Rolee(Role_Id),
  Team_Id INTEGER REFERENCES Team(Team_Id)
);
Sample rows from `Player_Match`:
335987, 1, 1, 1
335987, 2, 3, 1
335987, 3, 3, 1

CREATE TABLE `Wicket_Taken` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Player_Out INTEGER REFERENCES Player(Player_Id),
  Kind_Out INTEGER REFERENCES Out_Type(Out_Id),
  Fielders INTEGER REFERENCES Player(Player_Id),
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Wicket_Taken`:
335987, 2, 1, 6, 2, None, 2
335987, 3, 2, 8, 2, None, 2
335987, 5, 5, 9, 1, 83, 2

","player, batting_style","batting_style.batting_hand, player.player_id, player.batting_hand, batting_style.batting_id, player.dob"
sales,What is the last name of sales person for sales id 100?,SELECT t1.lastname FROM employees as t1 inner JOIN sales as t2 ON t1.employeeid = t2.salesPersonID WHERE t2.salesID = 100,"CREATE TABLE `employees` (
  EmployeeID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `employees`:
1, Abraham, e, Bennet
2, Reginald, l, Blotchet-Halls
3, Cheryl, a, Carson

CREATE TABLE `sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Employees`:
1, Abraham, e, Bennet
2, Reginald, l, Blotchet-Halls
3, Cheryl, a, Carson

CREATE TABLE `Products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

CREATE TABLE `Sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `Sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

","employees, sales","employees.lastname, employees.employeeid, sales.salesPersonID, sales.salesID"
food_inspection_2,Give the address of the schools that passed the inspection in March 2010.,"SELECT DISTINCT t1.address FROM establishment as t1 inner JOIN inspection as t2 ON t1.license_no = t2.license_no WHERE strftime('%Y-%m', t2.inspection_date) = '2010-03' AND t2.results = 'Pass' AND t1.facility_type = 'School'","CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

","establishment, inspection","establishment.address, establishment.license_no, inspection.license_no, inspection.inspection_date, inspection.results, establishment.facility_type"
movie_platform,"Among the users who are trailists when rating the movie ""When Will I Be Loved"", how many of them have rated ""1"" on the movie?",SELECT COUNT(t1.user_id) FROM ratings as t1 inner JOIN movies as t2 ON t1.movie_id = t2.movie_id WHERE t2.movie_title = 'When Will I Be Loved' AND t1.rating_score = 1 AND t1.user_trialist = 1,"CREATE TABLE `ratings` (
  movie_id INTEGER REFERENCES movies(movie_id),
  rating_id INTEGER REFERENCES ratings(rating_id),
  rating_url TEXT,
  rating_score INTEGER,
  rating_timestamp_utc TEXT,
  critic TEXT,
  critic_likes INTEGER,
  critic_comments INTEGER,
  user_id INTEGER REFERENCES ratings_users(user_id) REFERENCES lists_users(user_id),
  user_trialist INTEGER,
  user_subscriber INTEGER,
  user_eligible_for_trial INTEGER,
  user_has_payment_method INTEGER
);
Sample rows from `ratings`:
1066, 15610495, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/15610495, 3, 2017-06-10 12:38:33, None, 0, 0, 41579158, 0, 0, 1, 0
1066, 10704606, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/10704606, 2, 2014-08-15 23:42:31, None, 0, 0, 85981819, 1, 1, 0, 1
1066, 10177114, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/10177114, 2, 2014-01-30 13:21:57, None, 0, 0, 4208563, 0, 0, 1, 1

CREATE TABLE `movies` (
  movie_id INTEGER,
  movie_title TEXT,
  movie_release_year INTEGER,
  movie_url TEXT,
  movie_title_language TEXT,
  movie_popularity INTEGER,
  movie_image_url TEXT,
  director_id TEXT,
  director_name TEXT,
  director_url TEXT
);
Sample rows from `movies`:
1, La Antena, 2007, http://mubi.com/films/la-antena, en, 105, https://images.mubicdn.net/images/film/1/cache-7927-1581389497/image-w1280.jpg, 131, Esteban Sapir, http://mubi.com/cast/esteban-sapir
2, Elementary Particles, 2006, http://mubi.com/films/elementary-particles, en, 23, https://images.mubicdn.net/images/film/2/cache-512179-1581389841/image-w1280.jpg, 73, Oskar Roehler, http://mubi.com/cast/oskar-roehler
3, It's Winter, 2006, http://mubi.com/films/its-winter, en, 21, https://images.mubicdn.net/images/film/3/cache-7929-1481539519/image-w1280.jpg, 82, Rafi Pitts, http://mubi.com/cast/rafi-pitts

","CREATE TABLE `lists` (
  user_id INTEGER REFERENCES lists_users(user_id),
  list_id INTEGER,
  list_title TEXT,
  list_movie_number INTEGER,
  list_update_timestamp_utc TEXT,
  list_creation_timestamp_utc TEXT,
  list_followers INTEGER,
  list_url TEXT,
  list_comments INTEGER,
  list_description TEXT,
  list_cover_image_url TEXT,
  list_first_image_url TEXT,
  list_second_image_url TEXT,
  list_third_image_url TEXT
);
Sample rows from `lists`:
88260493, 1, Films that made your kid sister cry, 5, 2019-01-24 19:16:18, 2009-11-11 00:02:21, 5, http://mubi.com/lists/films-that-made-your-kid-sister-cry, 3, <p>Don’t be such a baby!!</p>
<p><strong>bold</strong></p>, https://assets.mubicdn.net/images/film/3822/image-w1280.jpg?1445914994, https://assets.mubicdn.net/images/film/3822/image-w320.jpg?1445914994, https://assets.mubicdn.net/images/film/506/image-w320.jpg?1543838422, https://assets.mubicdn.net/images/film/485/image-w320.jpg?1575331204
45204418, 2, Headscratchers, 3, 2018-12-03 15:12:20, 2009-11-11 00:05:11, 1, http://mubi.com/lists/headscratchers, 2, <p>Films that need at least two viewings to really make sense.</p>
<p>Or at least… they did for <em>me</em>.</p>, https://assets.mubicdn.net/images/film/4343/image-w1280.jpg?1583331932, https://assets.mubicdn.net/images/film/4343/image-w320.jpg?1583331932, https://assets.mubicdn.net/images/film/159/image-w320.jpg?1548864573, https://assets.mubicdn.net/images/film/142/image-w320.jpg?1544094102
48905025, 3, Sexy Time Movies, 7, 2019-05-30 03:00:07, 2009-11-11 00:20:00, 6, http://mubi.com/lists/sexy-time-movies, 5, <p>Films that get you in the mood…for love. In development.</p>
<p>Remarks</p>
<p><strong>Enter the Void</strong><br>
If you’ve seen <a href=""http://www.theauteurs.com/films/2377"" rel=""nofollow"">Enter the Void</a> then you’ll know why that’s on this list., https://assets.mubicdn.net/images/film/3491/image-w1280.jpg?1564112978, https://assets.mubicdn.net/images/film/3491/image-w320.jpg?1564112978, https://assets.mubicdn.net/images/film/2377/image-w320.jpg?1564675204, https://assets.mubicdn.net/images/film/2874/image-w320.jpg?1546574412

CREATE TABLE `movies` (
  movie_id INTEGER,
  movie_title TEXT,
  movie_release_year INTEGER,
  movie_url TEXT,
  movie_title_language TEXT,
  movie_popularity INTEGER,
  movie_image_url TEXT,
  director_id TEXT,
  director_name TEXT,
  director_url TEXT
);
Sample rows from `movies`:
1, La Antena, 2007, http://mubi.com/films/la-antena, en, 105, https://images.mubicdn.net/images/film/1/cache-7927-1581389497/image-w1280.jpg, 131, Esteban Sapir, http://mubi.com/cast/esteban-sapir
2, Elementary Particles, 2006, http://mubi.com/films/elementary-particles, en, 23, https://images.mubicdn.net/images/film/2/cache-512179-1581389841/image-w1280.jpg, 73, Oskar Roehler, http://mubi.com/cast/oskar-roehler
3, It's Winter, 2006, http://mubi.com/films/its-winter, en, 21, https://images.mubicdn.net/images/film/3/cache-7929-1481539519/image-w1280.jpg, 82, Rafi Pitts, http://mubi.com/cast/rafi-pitts

CREATE TABLE `ratings_users` (
  user_id INTEGER REFERENCES lists_users(user_id),
  rating_date_utc TEXT,
  user_trialist INTEGER,
  user_subscriber INTEGER,
  user_avatar_image_url TEXT,
  user_cover_image_url TEXT,
  user_eligible_for_trial INTEGER,
  user_has_payment_method INTEGER
);
Sample rows from `ratings_users`:
41579158, 2017-06-10, 0, 0, https://assets.mubicdn.net/images/avatars/74283/images-w150.jpg?1523895155, None, 1, 0
68654088, 2012-10-02, 0, 0, https://assets.mubicdn.net/images/avatars/27714/images-w150.jpg?1523889463, None, 1, 1
84114365, 2010-12-25, 0, 0, https://assets.mubicdn.net/images/avatars/1808/images-w150.jpg?1523883471, None, 1, 0

CREATE TABLE `lists_users` (
  user_id INTEGER PRIMARY KEY REFERENCES lists(user_id),
  list_id INTEGER PRIMARY KEY REFERENCES lists(list_id),
  list_update_date_utc TEXT,
  list_creation_date_utc TEXT,
  user_trialist INTEGER,
  user_subscriber INTEGER,
  user_avatar_image_url TEXT,
  user_cover_image_url TEXT,
  user_eligible_for_trial TEXT,
  user_has_payment_method TEXT
);
Sample rows from `lists_users`:
85981819, 1969, 2019-11-26, 2009-12-18, 1, 1, https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214, None, 0, 1
85981819, 3946, 2020-05-01, 2010-01-30, 1, 1, https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214, None, 0, 1
85981819, 6683, 2020-04-12, 2010-03-31, 1, 1, https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214, None, 0, 1

CREATE TABLE `ratings` (
  movie_id INTEGER REFERENCES movies(movie_id),
  rating_id INTEGER REFERENCES ratings(rating_id),
  rating_url TEXT,
  rating_score INTEGER,
  rating_timestamp_utc TEXT,
  critic TEXT,
  critic_likes INTEGER,
  critic_comments INTEGER,
  user_id INTEGER REFERENCES ratings_users(user_id) REFERENCES lists_users(user_id),
  user_trialist INTEGER,
  user_subscriber INTEGER,
  user_eligible_for_trial INTEGER,
  user_has_payment_method INTEGER
);
Sample rows from `ratings`:
1066, 15610495, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/15610495, 3, 2017-06-10 12:38:33, None, 0, 0, 41579158, 0, 0, 1, 0
1066, 10704606, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/10704606, 2, 2014-08-15 23:42:31, None, 0, 0, 85981819, 1, 1, 0, 1
1066, 10177114, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/10177114, 2, 2014-01-30 13:21:57, None, 0, 0, 4208563, 0, 0, 1, 1

","ratings, movies","ratings.user_id, ratings.movie_id, movies.movie_id, movies.movie_title, ratings.rating_score, ratings.user_trialist"
university,How many universities are there in the United States of America?,SELECT COUNT(*) FROM university as t1 inner JOIN country as t2 ON t1.country_id = t2.id WHERE t2.country_name = 'United States of America',"CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

","CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

CREATE TABLE `ranking_system` (
  id INTEGER,
  system_name TEXT
);
Sample rows from `ranking_system`:
1, Times Higher Education World University Ranking
2, Shanghai Ranking
3, Center for World University Rankings

CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

","university, country","university.country_id, country.id, country.country_name"
books,"Among the books published by publisher ID 1929, how many of them have over 500 pages?",SELECT COUNT(*) FROM book WHERE publisher_id = 1929 AND num_pages > 500,"CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

",book,"publisher_id, num_pages"
cookbook,How many ingredients are there in Apricot Yogurt Parfaits?,SELECT COUNT(*) FROM recipe as t1 inner JOIN quantity as t2 ON t1.recipe_id = t2.recipe_id WHERE t1.title = 'Apricot Yogurt Parfaits',"CREATE TABLE `recipe` (
  recipe_id INTEGER,
  title TEXT,
  subtitle TEXT,
  servings INTEGER,
  yield_unit TEXT,
  prep_min INTEGER,
  cook_min INTEGER,
  stnd_min INTEGER,
  source TEXT,
  intro TEXT,
  directions TEXT
);
Sample rows from `recipe`:
214, Raspberry Chiffon Pie, None, 10, 1 pie, 20, 8, 305, The California Tree Fruit Agreement, None, For crust, preheat oven to 375 degrees F.
In lightly greased 10-inch pie plate, combine graham cracker crumbs, melted butter and 1/4 cup sugar. Press evenly on bottom and up side of plate. Bake 5 minutes; cool.

For filling, in medium saucepan, combine juice or water and gelatin; let stand 5 minutes. Add 1/3 cup sugar and heat over medium heat, stirring to dissolve gelatin. In blender or food processor, puree 6 plums. Add puree and raspberries to gelatin mixture. Refrigerate until mixture begins to set about 1 hour. Stir yogurt into fruit mixture. In large bowl, beat egg whites until frothy. Gradually add cream of tartar and remaining 1/3 cup sugar and beat until stiff peaks form. Gently fold egg whites into fruit mixture so as not to reduce volume. Spoon into crust. Refrigerate 4 hours or overnight. Thinly slice remaining 2 plums and garnish top of pie.
215, Apricot Yogurt Parfaits, None, 4, None, 5, 2, 65, Produce for Better Health Foundation and 5 a Day, None, Drain canned apricots, pour 1/4 cup of the juice into saucepan or microwave-safe dish. Sprinkle gelatin over juice and let stand for 5 minutes to soften. Warm over low heat or microwave at medium (50% power) for 30 seconds or until gelatin has dissolved.
 
In food processor or blender, puree canned apricots; add lemon juice brandy, yogurt and gelatin mixture and process for 30 seconds or until combined.
 
Pour into parfait or stemmed glasses or champagne flutes. Cover and refrigerate until set, at least 1 hour or overnight.
 
Just before serving arrange fresh apricots on top. (If apricots are not available substitute kiwi slices or berries). Garnish each with a small spoonful of yogurt and sprinkling of brown sugar or mint.
216, Fresh Apricot Bavarian, None, 8, None, 5, 13, 0, The California Apricot Advisory Board, Serve in stemmed glasses and top with sliced apricots for elegant endings., Drop apricots into boiling water to cover. Return to boil and simmer for 5 minutes or until skins begin to split. Drain and rinse under cold water. Halve fruit and discard skins and pits. Puree apricots in electric blender. Combine water and gelatin in small saucepan; stir over low heat until dissolved. Mix sugar, apricot puree and yogurt with a wire whip until smooth; mix in dissolved gelatin. Sweeten to taste if desired. Chill mixture until thick. Spoon into stemmed glasses.

Note: One pound fresh apricots is 15 to 20. One and a half envelopes gelatin is 4 teaspoons.

CREATE TABLE `quantity` (
  quantity_id INTEGER,
  recipe_id INTEGER REFERENCES Nutrition(recipe_id) REFERENCES Recipe(recipe_id),
  ingredient_id INTEGER REFERENCES Ingredient(ingredient_id),
  max_qty REAL,
  min_qty REAL,
  unit TEXT,
  preparation TEXT,
  optional TEXT
);
Sample rows from `quantity`:
1, 214, 1613, 2.0, 2.0, cup(s), None, FALSE
2, 214, 3334, 0.25, 0.25, cup(s), None, FALSE
3, 214, 2222, 0.5, 0.5, cup(s), melted, FALSE

","CREATE TABLE `Ingredient` (
  ingredient_id INTEGER,
  category TEXT,
  name TEXT,
  plural TEXT
);
Sample rows from `Ingredient`:
1, dairy, 1% lowfat cottage cheese, None
6, dairy, 1% lowfat milk, None
10, Mexican products, 10-inch flour tortilla, s

CREATE TABLE `Recipe` (
  recipe_id INTEGER,
  title TEXT,
  subtitle TEXT,
  servings INTEGER,
  yield_unit TEXT,
  prep_min INTEGER,
  cook_min INTEGER,
  stnd_min INTEGER,
  source TEXT,
  intro TEXT,
  directions TEXT
);
Sample rows from `Recipe`:
214, Raspberry Chiffon Pie, None, 10, 1 pie, 20, 8, 305, The California Tree Fruit Agreement, None, For crust, preheat oven to 375 degrees F.
In lightly greased 10-inch pie plate, combine graham cracker crumbs, melted butter and 1/4 cup sugar. Press evenly on bottom and up side of plate. Bake 5 minutes; cool.

For filling, in medium saucepan, combine juice or water and gelatin; let stand 5 minutes. Add 1/3 cup sugar and heat over medium heat, stirring to dissolve gelatin. In blender or food processor, puree 6 plums. Add puree and raspberries to gelatin mixture. Refrigerate until mixture begins to set about 1 hour. Stir yogurt into fruit mixture. In large bowl, beat egg whites until frothy. Gradually add cream of tartar and remaining 1/3 cup sugar and beat until stiff peaks form. Gently fold egg whites into fruit mixture so as not to reduce volume. Spoon into crust. Refrigerate 4 hours or overnight. Thinly slice remaining 2 plums and garnish top of pie.
215, Apricot Yogurt Parfaits, None, 4, None, 5, 2, 65, Produce for Better Health Foundation and 5 a Day, None, Drain canned apricots, pour 1/4 cup of the juice into saucepan or microwave-safe dish. Sprinkle gelatin over juice and let stand for 5 minutes to soften. Warm over low heat or microwave at medium (50% power) for 30 seconds or until gelatin has dissolved.
 
In food processor or blender, puree canned apricots; add lemon juice brandy, yogurt and gelatin mixture and process for 30 seconds or until combined.
 
Pour into parfait or stemmed glasses or champagne flutes. Cover and refrigerate until set, at least 1 hour or overnight.
 
Just before serving arrange fresh apricots on top. (If apricots are not available substitute kiwi slices or berries). Garnish each with a small spoonful of yogurt and sprinkling of brown sugar or mint.
216, Fresh Apricot Bavarian, None, 8, None, 5, 13, 0, The California Apricot Advisory Board, Serve in stemmed glasses and top with sliced apricots for elegant endings., Drop apricots into boiling water to cover. Return to boil and simmer for 5 minutes or until skins begin to split. Drain and rinse under cold water. Halve fruit and discard skins and pits. Puree apricots in electric blender. Combine water and gelatin in small saucepan; stir over low heat until dissolved. Mix sugar, apricot puree and yogurt with a wire whip until smooth; mix in dissolved gelatin. Sweeten to taste if desired. Chill mixture until thick. Spoon into stemmed glasses.

Note: One pound fresh apricots is 15 to 20. One and a half envelopes gelatin is 4 teaspoons.

CREATE TABLE `Nutrition` (
  recipe_id INTEGER REFERENCES Recipe(recipe_id),
  protein REAL,
  carbo REAL,
  alcohol REAL,
  total_fat REAL,
  sat_fat REAL,
  cholestrl REAL,
  sodium REAL,
  iron REAL,
  vitamin_c REAL,
  vitamin_a REAL,
  fiber REAL,
  pcnt_cal_carb REAL,
  pcnt_cal_fat REAL,
  pcnt_cal_prot REAL,
  calories REAL
);
Sample rows from `Nutrition`:
214, 5.47, 41.29, 0.0, 11.53, 2.21, 1.39, 260.78, 0.81, 8.89, 586.2, 0.87, 56.8, 35.68, 7.53, 290.79
215, 5.7, 23.75, 1.93, 1.08, 0.58, 3.48, 46.17, 0.57, 13.02, 2738.24, 0.62, 67.38, 6.89, 16.17, 141.01
216, 4.9, 26.88, 0.0, 1.1, 0.58, 3.46, 41.79, 0.37, 6.13, 1521.1, 0.34, 78.45, 7.24, 14.3, 137.06

CREATE TABLE `Quantity` (
  quantity_id INTEGER,
  recipe_id INTEGER REFERENCES Nutrition(recipe_id) REFERENCES Recipe(recipe_id),
  ingredient_id INTEGER REFERENCES Ingredient(ingredient_id),
  max_qty REAL,
  min_qty REAL,
  unit TEXT,
  preparation TEXT,
  optional TEXT
);
Sample rows from `Quantity`:
1, 214, 1613, 2.0, 2.0, cup(s), None, FALSE
2, 214, 3334, 0.25, 0.25, cup(s), None, FALSE
3, 214, 2222, 0.5, 0.5, cup(s), melted, FALSE

","recipe, quantity","recipe.recipe_id, quantity.recipe_id, recipe.title"
car_retails,"For the product No. S18_3482 in the Order No.10108, how much discount did the customer have?",SELECT (t1.msrp - t2.priceeach) / t1.msrp FROM products as t1 inner JOIN orderdetails as t2 ON t1.productcode = t2.productcode WHERE t1.productcode = 'S18_3482' AND t2.ordernumber = '10108',"CREATE TABLE `products` (
  productCode TEXT PRIMARY KEY,
  productName TEXT,
  productLine TEXT REFERENCES productlines(productLine),
  productScale TEXT,
  productVendor TEXT,
  productDescription TEXT,
  quantityInStock INTEGER,
  buyPrice REAL,
  MSRP REAL
);
Sample rows from `products`:
S10_1678, 1969 Harley Davidson Ultimate Chopper, Motorcycles, 1:10, Min Lin Diecast, This replica features working kickstand, front suspension, gear-shift lever, footbrake lever, drive chain, wheels and steering. All parts are particularly delicate due to their precise scale and require special care and attention., 7933, 48.81, 95.7
S10_1949, 1952 Alpine Renault 1300, Classic Cars, 1:10, Classic Metal Creations, Turnable front wheels; steering function; detailed interior; detailed engine; opening hood; opening trunk; opening doors; and detailed chassis., 7305, 98.58, 214.3
S10_2016, 1996 Moto Guzzi 1100i, Motorcycles, 1:10, Highway 66 Mini Classics, Official Moto Guzzi logos and insignias, saddle bags located on side of motorcycle, detailed engine, working steering, working suspension, two leather seats, luggage rack, dual exhaust pipes, small saddle bag located on handle bars, two-tone paint with chrome accents, superior die-cast detail , rotating wheels , working kick stand, diecast metal with plastic parts and baked enamel finish., 6625, 68.99, 118.94

CREATE TABLE `orderdetails` (
  orderNumber INTEGER PRIMARY KEY REFERENCES orders(None),
  productCode TEXT PRIMARY KEY REFERENCES products(None),
  quantityOrdered INTEGER,
  priceEach REAL,
  orderLineNumber INTEGER
);
Sample rows from `orderdetails`:
10100, S18_1749, 30, 136.0, 3
10100, S18_2248, 50, 55.09, 2
10100, S18_4409, 22, 75.46, 4

","CREATE TABLE `offices` (
  officeCode TEXT PRIMARY KEY,
  city TEXT,
  phone TEXT,
  addressLine1 TEXT,
  addressLine2 TEXT,
  state TEXT,
  country TEXT,
  postalCode TEXT,
  territory TEXT
);
Sample rows from `offices`:
1, San Francisco, +1 650 219 4782, 100 Market Street, Suite 300, CA, USA, 94080, NA
2, Boston, +1 215 837 0825, 1550 Court Place, Suite 102, MA, USA, 02107, NA
3, NYC, +1 212 555 3000, 523 East 53rd Street, apt. 5A, NY, USA, 10022, NA

CREATE TABLE `employees` (
  employeeNumber INTEGER,
  lastName TEXT,
  firstName TEXT,
  extension TEXT,
  email TEXT,
  officeCode TEXT REFERENCES offices(officeCode),
  reportsTo INTEGER REFERENCES employees(employeeNumber),
  jobTitle TEXT
);
Sample rows from `employees`:
1002, Murphy, Diane, x5800, dmurphy@classicmodelcars.com, 1, None, President
1056, Patterson, Mary, x4611, mpatterso@classicmodelcars.com, 1, 1002, VP Sales
1076, Firrelli, Jeff, x9273, jfirrelli@classicmodelcars.com, 1, 1002, VP Marketing

CREATE TABLE `customers` (
  customerNumber INTEGER,
  customerName TEXT,
  contactLastName TEXT,
  contactFirstName TEXT,
  phone TEXT,
  addressLine1 TEXT,
  addressLine2 TEXT,
  city TEXT,
  state TEXT,
  postalCode TEXT,
  country TEXT,
  salesRepEmployeeNumber INTEGER REFERENCES employees(employeeNumber),
  creditLimit REAL
);
Sample rows from `customers`:
103, Atelier graphique, Schmitt, Carine , 40.32.2555, 54, rue Royale, None, Nantes, None, 44000, France, 1370, 21000.0
112, Signal Gift Stores, King, Jean, 7025551838, 8489 Strong St., None, Las Vegas, NV, 83030, USA, 1166, 71800.0
114, Australian Collectors, Co., Ferguson, Peter, 03 9520 4555, 636 St Kilda Road, Level 3, Melbourne, Victoria, 3004, Australia, 1611, 117300.0

CREATE TABLE `orders` (
  orderNumber INTEGER,
  orderDate DATE,
  requiredDate DATE,
  shippedDate DATE,
  status TEXT,
  comments TEXT,
  customerNumber INTEGER REFERENCES customers(customerNumber)
);
Sample rows from `orders`:
10100, 2003-01-06, 2003-01-13, 2003-01-10, Shipped, None, 363
10101, 2003-01-09, 2003-01-18, 2003-01-11, Shipped, Check on availability., 128
10102, 2003-01-10, 2003-01-18, 2003-01-14, Shipped, None, 181

CREATE TABLE `payments` (
  customerNumber INTEGER PRIMARY KEY REFERENCES customers(customerNumber),
  checkNumber TEXT PRIMARY KEY,
  paymentDate DATE,
  amount REAL
);
Sample rows from `payments`:
103, HQ336336, 2004-10-19, 6066.78
103, JM555205, 2003-06-05, 14571.44
103, OM314933, 2004-12-18, 1676.14

CREATE TABLE `productlines` (
  productLine TEXT PRIMARY KEY,
  textDescription TEXT,
  htmlDescription TEXT,
  image BLOB
);
Sample rows from `productlines`:
Classic Cars, Attention car enthusiasts: Make your wildest car ownership dreams come true. Whether you are looking for classic muscle cars, dream sports cars or movie-inspired miniatures, you will find great choices in this category. These replicas feature superb atten, None, None
Motorcycles, Our motorcycles are state of the art replicas of classic as well as contemporary motorcycle legends such as Harley Davidson, Ducati and Vespa. Models contain stunning details such as official logos, rotating wheels, working kickstand, front suspension, ge, None, None
Planes, Unique, diecast airplane and helicopter replicas suitable for collections, as well as home, office or classroom decorations. Models contain stunning details such as official logos and insignias, rotating jet engines and propellers, retractable wheels, and, None, None

CREATE TABLE `products` (
  productCode TEXT PRIMARY KEY,
  productName TEXT,
  productLine TEXT REFERENCES productlines(productLine),
  productScale TEXT,
  productVendor TEXT,
  productDescription TEXT,
  quantityInStock INTEGER,
  buyPrice REAL,
  MSRP REAL
);
Sample rows from `products`:
S10_1678, 1969 Harley Davidson Ultimate Chopper, Motorcycles, 1:10, Min Lin Diecast, This replica features working kickstand, front suspension, gear-shift lever, footbrake lever, drive chain, wheels and steering. All parts are particularly delicate due to their precise scale and require special care and attention., 7933, 48.81, 95.7
S10_1949, 1952 Alpine Renault 1300, Classic Cars, 1:10, Classic Metal Creations, Turnable front wheels; steering function; detailed interior; detailed engine; opening hood; opening trunk; opening doors; and detailed chassis., 7305, 98.58, 214.3
S10_2016, 1996 Moto Guzzi 1100i, Motorcycles, 1:10, Highway 66 Mini Classics, Official Moto Guzzi logos and insignias, saddle bags located on side of motorcycle, detailed engine, working steering, working suspension, two leather seats, luggage rack, dual exhaust pipes, small saddle bag located on handle bars, two-tone paint with chrome accents, superior die-cast detail , rotating wheels , working kick stand, diecast metal with plastic parts and baked enamel finish., 6625, 68.99, 118.94

CREATE TABLE `orderdetails` (
  orderNumber INTEGER PRIMARY KEY REFERENCES orders(None),
  productCode TEXT PRIMARY KEY REFERENCES products(None),
  quantityOrdered INTEGER,
  priceEach REAL,
  orderLineNumber INTEGER
);
Sample rows from `orderdetails`:
10100, S18_1749, 30, 136.0, 3
10100, S18_2248, 50, 55.09, 2
10100, S18_4409, 22, 75.46, 4

","products, orderdetails","products.msrp, orderdetails.priceeach, products.productcode, orderdetails.productcode, orderdetails.ordernumber"
menu,"Among the menu pages on which the dish ""Paysanne Soup"" had appeared, how many of them had a stable price for the dish?",SELECT SUM(case when t1.name = 'Paysanne Soup' then 1 else 0 end) FROM dish as t1 inner JOIN menuitem as t2 ON t1.id = t2.dish_id WHERE t1.highest_price is null,"CREATE TABLE `dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

CREATE TABLE `menuitem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `menuitem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

","CREATE TABLE `Dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `Dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

CREATE TABLE `Menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `Menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

CREATE TABLE `MenuPage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `MenuPage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

CREATE TABLE `MenuItem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `MenuItem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

","dish, menuitem","dish.name, dish.id, menuitem.dish_id, dish.highest_price"
codebase_comments,How many solution paths are there inside the 2nd most popular repository?,"SELECT COUNT(DISTINCT t2.path) FROM repo as t1 inner JOIN solution as t2 ON t1.id = t2.repoid WHERE t1.watchers = ( SELECT watchers FROM repo ORDER BY watchers DESC LIMIT 1, 1 )","CREATE TABLE `repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

CREATE TABLE `solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Method, 10860640
MethodParameter, 17514858
Repo, 156550

CREATE TABLE `Method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `Method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

CREATE TABLE `MethodParameter` (
  Id INTEGER,
  MethodId TEXT,
  Type TEXT,
  Name TEXT
);
Sample rows from `MethodParameter`:
1, 1, System.String, data
2, 2, System.Int32, i
3, 2, System.Int32, declstartpos

CREATE TABLE `Repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `Repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

CREATE TABLE `Solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `Solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

","repo, solution","solution.path, repo.id, solution.repoid, repo.watchers, watchers"
ice_hockey_draft,What is the average height in centimeters of all the players in the position of defense?,SELECT cast(SUM(t2.height_in_cm) as real) / COUNT(t1.eliteid) FROM playerinfo as t1 inner JOIN height_info as t2 ON t1.height = t2.height_id WHERE t1.position_info = 'D',"CREATE TABLE `playerinfo` (
  ELITEID INTEGER,
  PlayerName TEXT,
  birthdate TEXT,
  birthyear DATE,
  birthmonth INTEGER,
  birthday INTEGER,
  birthplace TEXT,
  nation TEXT,
  height INTEGER REFERENCES height_info(height_id),
  weight INTEGER REFERENCES weight_info(weight_id),
  position_info TEXT,
  shoots TEXT,
  draftyear INTEGER,
  draftround INTEGER,
  overall INTEGER,
  overallby TEXT,
  CSS_rank INTEGER,
  sum_7yr_GP INTEGER,
  sum_7yr_TOI INTEGER,
  GP_greater_than_0 TEXT
);
Sample rows from `playerinfo`:
9, David Bornhammar, 1981-06-15, 1981, 6, 15, Lidingo, SWE, Sweden, 73, 198, D, L, 1999, 7, 192, Washington Capitals, 192, 0, 0, no
18, David Printz, 1980-07-24, 1980, 7, 24, Stockholm, SWE, Sweden, 76, 220, D, L, 2001, 7, 225, Philadelphia Flyers, 176, 13, 84, yes
27, Yared Hagos, 1983-03-27, 1983, 3, 27, Stockholm, SWE, Sweden, 73, 218, C, L, 2001, 3, 70, Dallas Stars, 24, 0, 0, no

CREATE TABLE `height_info` (
  height_id INTEGER,
  height_in_cm INTEGER,
  height_in_inch TEXT
);
Sample rows from `height_info`:
65, 165, 5'5""
67, 170, 5'7""
68, 172, 5'8""

","CREATE TABLE `height_info` (
  height_id INTEGER,
  height_in_cm INTEGER,
  height_in_inch TEXT
);
Sample rows from `height_info`:
65, 165, 5'5""
67, 170, 5'7""
68, 172, 5'8""

CREATE TABLE `weight_info` (
  weight_id INTEGER,
  weight_in_kg INTEGER,
  weight_in_lbs INTEGER
);
Sample rows from `weight_info`:
154, 70, 154
159, 72, 159
161, 73, 161

CREATE TABLE `PlayerInfo` (
  ELITEID INTEGER,
  PlayerName TEXT,
  birthdate TEXT,
  birthyear DATE,
  birthmonth INTEGER,
  birthday INTEGER,
  birthplace TEXT,
  nation TEXT,
  height INTEGER REFERENCES height_info(height_id),
  weight INTEGER REFERENCES weight_info(weight_id),
  position_info TEXT,
  shoots TEXT,
  draftyear INTEGER,
  draftround INTEGER,
  overall INTEGER,
  overallby TEXT,
  CSS_rank INTEGER,
  sum_7yr_GP INTEGER,
  sum_7yr_TOI INTEGER,
  GP_greater_than_0 TEXT
);
Sample rows from `PlayerInfo`:
9, David Bornhammar, 1981-06-15, 1981, 6, 15, Lidingo, SWE, Sweden, 73, 198, D, L, 1999, 7, 192, Washington Capitals, 192, 0, 0, no
18, David Printz, 1980-07-24, 1980, 7, 24, Stockholm, SWE, Sweden, 76, 220, D, L, 2001, 7, 225, Philadelphia Flyers, 176, 13, 84, yes
27, Yared Hagos, 1983-03-27, 1983, 3, 27, Stockholm, SWE, Sweden, 73, 218, C, L, 2001, 3, 70, Dallas Stars, 24, 0, 0, no

CREATE TABLE `SeasonStatus` (
  ELITEID INTEGER REFERENCES PlayerInfo(ELITEID),
  SEASON TEXT,
  TEAM TEXT,
  LEAGUE TEXT,
  GAMETYPE TEXT,
  GP INTEGER,
  G INTEGER,
  A INTEGER,
  P INTEGER,
  PIM INTEGER,
  PLUSMINUS INTEGER
);
Sample rows from `SeasonStatus`:
3667, 1997-1998, Rimouski Oceanic, QMJHL, Regular Season, 58, 44, 71, 115, 117, 27
3667, 1997-1998, Rimouski Oceanic, QMJHL, Playoffs, 18, 15, 26, 41, 46, 4
3667, 1997-1998, Canada U20, WJC-20, Regular Season, 7, 1, 1, 2, 4, 0

","playerinfo, height_info","height_info.height_in_cm, playerinfo.eliteid, playerinfo.height, height_info.height_id, playerinfo.position_info"
donor,"What is the name of the vendor that the project ""Bloody Times"" uses for their resources?",SELECT t3.vendor_name FROM essays as t1 inner JOIN projects as t2 ON t1.projectid = t2.projectid inner JOIN resources as t3 ON t2.projectid = t3.projectid WHERE t1.title = 'Bloody Times',"CREATE TABLE `essays` (
  projectid TEXT,
  teacher_acctid TEXT,
  title TEXT,
  short_description TEXT,
  need_statement TEXT,
  essay TEXT
);
Sample rows from `essays`:
ffffc4f85b60efc5b52347df489d0238, c24011b20fc161ed02248e85beb59a90, iMath, It is imperative that teachers bring technology into the classroom, if students are going to be able to survive in the 21st Century. The classroom needs to be ever changing along with the outside world. The iMath project will help students by obtaining cl, My students need four iPods., I am a fourth year fifth grade math teacher. The school I teach in is a fifth and sixth grade public school and is a Title One school which means that 95% of our students get free lunch. Presently, I am in the process of completing a Masters degree in Tec
ffffac55ee02a49d1abc87ba6fc61135, 947066d0af47e0566f334566553dd6a6, Recording Rockin' Readers, Can you imagine having to translate everything you read into sign language and relate it to what you already know? Help us do just that by giving us the camera that will record our stories and..., My students need a camcorder. , Can you imagine having to translate everything you read into sign language and relate it to what you already know? Help us do just that by giving us the camera that will record our stories and interpretations! 
\n
\nMy students are all deaf or hard of hea
ffff97ed93720407d70a2787475932b0, 462270f5d5c212162fcab11afa2623cb, Kindergarten In Need of Important Materials!, It takes a special person to donate to a group of children they don't know, especially in these hard economic times, but my students are worth it.  They deserve to have the proper supplies to ensure that their long education gets off to the right start, s, My students need 17 assorted classroom materials to ensure that they can learn as much as possible this year., Hi. I teach a wonderful group of 4-5 year old Kindergarten students.  They come in wanting and willing to learn new and exciting things each and every day. I work hard to ensure that my students get the most out of the entire school year. 
\n
\nFor the mo

CREATE TABLE `projects` (
  projectid TEXT PRIMARY KEY,
  teacher_acctid TEXT,
  schoolid TEXT,
  school_ncesid TEXT,
  school_latitude REAL,
  school_longitude REAL,
  school_city TEXT,
  school_state TEXT,
  school_zip INTEGER,
  school_metro TEXT,
  school_district TEXT,
  school_county TEXT,
  school_charter TEXT,
  school_magnet TEXT,
  school_year_round TEXT,
  school_nlns TEXT,
  school_kipp TEXT,
  school_charter_ready_promise TEXT,
  teacher_prefix TEXT,
  teacher_teach_for_america TEXT,
  teacher_ny_teaching_fellow TEXT,
  primary_focus_subject TEXT,
  primary_focus_area TEXT,
  secondary_focus_subject TEXT,
  secondary_focus_area TEXT,
  resource_type TEXT,
  poverty_level TEXT,
  grade_level TEXT,
  fulfillment_labor_materials REAL,
  total_price_excluding_optional_support REAL,
  total_price_including_optional_support REAL,
  students_reached INTEGER,
  eligible_double_your_impact_match TEXT,
  eligible_almost_home_match TEXT,
  date_posted DATE
);
Sample rows from `projects`:
316ed8fb3b81402ff6ac8f721bb31192, 42d43fa6f37314365d08692e08680973, c0e6ce89b244764085691a1b8e28cb81, 063627006187, 36.57634, -119.608713, Selma, CA, 93662, None, Selma Unified Sch District, Fresno, f, f, f, f, f, f, Mrs., f, f, Literature & Writing, Literacy & Language, College & Career Prep, Applied Learning, Books, highest poverty, Grades 6-8, 30.0, 555.81, 653.89, 32, f, f, 2014-05-12
90de744e368a7e4883223ca49318ae30, 864eb466462bf704bf7a16a585ef296a, d711e47810900c96f26a5d0be30c446d, 483702008193, 32.911179, -96.72364, Dallas, TX, 75243, urban, Richardson Ind School District, Dallas, f, f, f, f, f, f, Mrs., f, f, Literacy, Literacy & Language, ESL, Literacy & Language, Books, highest poverty, Grades PreK-2, 30.0, 296.47, 348.79, 22, f, f, 2014-05-12
32943bb1063267de6ed19fc0ceb4b9a7, 37f85135259ece793213aca9d8765542, 665c3613013ba0a66e3a2a26b89f1b68, 410327000109, 45.166039, -122.414576, Colton, OR, 97017, rural, Colton School District 53, Clackamas, f, f, f, f, f, f, Mr., f, f, Literacy, Literacy & Language, Mathematics, Math & Science, Technology, high poverty, Grades PreK-2, 30.0, 430.89, 506.93, 17, f, f, 2014-05-11

CREATE TABLE `resources` (
  resourceid TEXT PRIMARY KEY,
  projectid TEXT REFERENCES projects(projectid),
  vendorid INTEGER,
  vendor_name TEXT,
  project_resource_type TEXT,
  item_name TEXT,
  item_number TEXT,
  item_unit_price REAL,
  item_quantity INTEGER
);
Sample rows from `resources`:
8a1c1c45bc30d065061912fd9114fcf3, ffffc4f85b60efc5b52347df489d0238, 430, Woodwind and Brasswind, Technology, iPod nano 4th Gen 8GB (Black), 249995.001, 149.0, 4
015d2c4935c50427964a12dc3f584091, ffffac55ee02a49d1abc87ba6fc61135, 82, Best Buy for Business, Technology, Sony bloggie MHS-FS1 - camcorder - internal flash memory, BB11216668, 148.0, 1
26a02944b2f0c25f9abdeacca3ede3ee, ffff97ed93720407d70a2787475932b0, 767, Lakeshore Learning Materials, Supplies, VX748 - Best-Buy Jumbo Crayons - 12-Color Box, VX748, 69.95, 1

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `essays` (
  projectid TEXT,
  teacher_acctid TEXT,
  title TEXT,
  short_description TEXT,
  need_statement TEXT,
  essay TEXT
);
Sample rows from `essays`:
ffffc4f85b60efc5b52347df489d0238, c24011b20fc161ed02248e85beb59a90, iMath, It is imperative that teachers bring technology into the classroom, if students are going to be able to survive in the 21st Century. The classroom needs to be ever changing along with the outside world. The iMath project will help students by obtaining cl, My students need four iPods., I am a fourth year fifth grade math teacher. The school I teach in is a fifth and sixth grade public school and is a Title One school which means that 95% of our students get free lunch. Presently, I am in the process of completing a Masters degree in Tec
ffffac55ee02a49d1abc87ba6fc61135, 947066d0af47e0566f334566553dd6a6, Recording Rockin' Readers, Can you imagine having to translate everything you read into sign language and relate it to what you already know? Help us do just that by giving us the camera that will record our stories and..., My students need a camcorder. , Can you imagine having to translate everything you read into sign language and relate it to what you already know? Help us do just that by giving us the camera that will record our stories and interpretations! 
\n
\nMy students are all deaf or hard of hea
ffff97ed93720407d70a2787475932b0, 462270f5d5c212162fcab11afa2623cb, Kindergarten In Need of Important Materials!, It takes a special person to donate to a group of children they don't know, especially in these hard economic times, but my students are worth it.  They deserve to have the proper supplies to ensure that their long education gets off to the right start, s, My students need 17 assorted classroom materials to ensure that they can learn as much as possible this year., Hi. I teach a wonderful group of 4-5 year old Kindergarten students.  They come in wanting and willing to learn new and exciting things each and every day. I work hard to ensure that my students get the most out of the entire school year. 
\n
\nFor the mo

CREATE TABLE `projects` (
  projectid TEXT PRIMARY KEY,
  teacher_acctid TEXT,
  schoolid TEXT,
  school_ncesid TEXT,
  school_latitude REAL,
  school_longitude REAL,
  school_city TEXT,
  school_state TEXT,
  school_zip INTEGER,
  school_metro TEXT,
  school_district TEXT,
  school_county TEXT,
  school_charter TEXT,
  school_magnet TEXT,
  school_year_round TEXT,
  school_nlns TEXT,
  school_kipp TEXT,
  school_charter_ready_promise TEXT,
  teacher_prefix TEXT,
  teacher_teach_for_america TEXT,
  teacher_ny_teaching_fellow TEXT,
  primary_focus_subject TEXT,
  primary_focus_area TEXT,
  secondary_focus_subject TEXT,
  secondary_focus_area TEXT,
  resource_type TEXT,
  poverty_level TEXT,
  grade_level TEXT,
  fulfillment_labor_materials REAL,
  total_price_excluding_optional_support REAL,
  total_price_including_optional_support REAL,
  students_reached INTEGER,
  eligible_double_your_impact_match TEXT,
  eligible_almost_home_match TEXT,
  date_posted DATE
);
Sample rows from `projects`:
316ed8fb3b81402ff6ac8f721bb31192, 42d43fa6f37314365d08692e08680973, c0e6ce89b244764085691a1b8e28cb81, 063627006187, 36.57634, -119.608713, Selma, CA, 93662, None, Selma Unified Sch District, Fresno, f, f, f, f, f, f, Mrs., f, f, Literature & Writing, Literacy & Language, College & Career Prep, Applied Learning, Books, highest poverty, Grades 6-8, 30.0, 555.81, 653.89, 32, f, f, 2014-05-12
90de744e368a7e4883223ca49318ae30, 864eb466462bf704bf7a16a585ef296a, d711e47810900c96f26a5d0be30c446d, 483702008193, 32.911179, -96.72364, Dallas, TX, 75243, urban, Richardson Ind School District, Dallas, f, f, f, f, f, f, Mrs., f, f, Literacy, Literacy & Language, ESL, Literacy & Language, Books, highest poverty, Grades PreK-2, 30.0, 296.47, 348.79, 22, f, f, 2014-05-12
32943bb1063267de6ed19fc0ceb4b9a7, 37f85135259ece793213aca9d8765542, 665c3613013ba0a66e3a2a26b89f1b68, 410327000109, 45.166039, -122.414576, Colton, OR, 97017, rural, Colton School District 53, Clackamas, f, f, f, f, f, f, Mr., f, f, Literacy, Literacy & Language, Mathematics, Math & Science, Technology, high poverty, Grades PreK-2, 30.0, 430.89, 506.93, 17, f, f, 2014-05-11

CREATE TABLE `donations` (
  donationid TEXT PRIMARY KEY,
  projectid TEXT REFERENCES projects(projectid),
  donor_acctid TEXT,
  donor_city TEXT,
  donor_state TEXT,
  donor_zip TEXT,
  is_teacher_acct TEXT,
  donation_timestamp DATETIME,
  donation_to_project REAL,
  donation_optional_support REAL,
  donation_total REAL,
  dollar_amount TEXT,
  donation_included_optional_support TEXT,
  payment_method TEXT,
  payment_included_acct_credit TEXT,
  payment_included_campaign_gift_card TEXT,
  payment_included_web_purchased_gift_card TEXT,
  payment_was_promo_matched TEXT,
  via_giving_page TEXT,
  for_honoree TEXT,
  donation_message TEXT
);
Sample rows from `donations`:
431d720bc3dfd75ae445a5eaa0b0638d, ffffac55ee02a49d1abc87ba6fc61135, 22cbc920c9b5fa08dfb331422f5926b5, Peachtree City, GA, 30269, f, 2011-08-25 14:27:34.807, 42.5, 7.5, 50.0, 10_to_100, t, no_cash_received, f, t, f, f, f, f, I gave to this project because I support the efforts of this teacher with each of her students, and her school, Suder Elementary School.
fcfedba1c8a0ba77d280cace80a909f6, ffffac55ee02a49d1abc87ba6fc61135, 521f1830a77c9dbbf8119d99c6206a16, None, GA, None, f, 2011-11-04 07:54:21.552, 26.83, 4.73, 31.56, 10_to_100, t, creditcard, f, t, f, f, f, f, I donated because I want to support kids in Georgia.
3fa95d29986aa6f401c6719ced3a3ce7, ffffac55ee02a49d1abc87ba6fc61135, 1e0a63fc8141c7ba26b8b44ca0871b90, Rockville, MD, 20853, f, 2011-11-02 22:53:53.019, 55.35, 0.0, 55.35, 10_to_100, f, no_cash_received, t, f, f, f, t, f, The Spark's 'pet' projects include those which support deaf students.  With just a few days left, the Spark's donors fund half of what remains, and challenge others to pull this project through to fruition.

CREATE TABLE `resources` (
  resourceid TEXT PRIMARY KEY,
  projectid TEXT REFERENCES projects(projectid),
  vendorid INTEGER,
  vendor_name TEXT,
  project_resource_type TEXT,
  item_name TEXT,
  item_number TEXT,
  item_unit_price REAL,
  item_quantity INTEGER
);
Sample rows from `resources`:
8a1c1c45bc30d065061912fd9114fcf3, ffffc4f85b60efc5b52347df489d0238, 430, Woodwind and Brasswind, Technology, iPod nano 4th Gen 8GB (Black), 249995.001, 149.0, 4
015d2c4935c50427964a12dc3f584091, ffffac55ee02a49d1abc87ba6fc61135, 82, Best Buy for Business, Technology, Sony bloggie MHS-FS1 - camcorder - internal flash memory, BB11216668, 148.0, 1
26a02944b2f0c25f9abdeacca3ede3ee, ffff97ed93720407d70a2787475932b0, 767, Lakeshore Learning Materials, Supplies, VX748 - Best-Buy Jumbo Crayons - 12-Color Box, VX748, 69.95, 1

","essays, projects, resources","resources.vendor_name, essays.projectid, projects.projectid, resources.projectid, essays.title"
authors,"Write down the title and affiliation of the preprinted paper written by ""Roger J.Marshal"".","SELECT t1.title, t2.affiliation FROM paper as t1 inner JOIN paperAuthor as t2 ON t1.id = t2.paperid WHERE t2.name = 'Roger J. Marshall' AND t1.conferenceid = 0 AND t1.journalid = 0","CREATE TABLE `paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `paperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `paperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

","CREATE TABLE `Author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `Author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

CREATE TABLE `Conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

CREATE TABLE `Journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `Paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `Paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `PaperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `PaperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

","paper, paperAuthor","paper.title, paperAuthor.affiliation, paper.id, paperAuthor.paperid, paperAuthor.name, paper.conferenceid, paper.journalid"
retail_world,Which product of Exotic Liquids company that have the highest reorder levels?,SELECT t1.productname FROM products as t1 inner JOIN suppliers as t2 ON t1.supplierid = t2.supplierid WHERE t2.companyname = 'Exotic Liquids' ORDER BY t1.reorderlevel DESC LIMIT 1,"CREATE TABLE `products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

","products, suppliers","products.productname, products.supplierid, suppliers.supplierid, suppliers.companyname, products.reorderlevel"
menu,"State the full height and width for menu called ""El Fuerte Del Palmar"".","SELECT t1.full_height, t1.full_width FROM menupage as t1 inner JOIN menu as t2 ON t2.id = t1.menu_id WHERE t2.name = 'El Fuerte Del Palmar'","CREATE TABLE `menupage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `menupage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

CREATE TABLE `menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

","CREATE TABLE `Dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `Dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

CREATE TABLE `Menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `Menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

CREATE TABLE `MenuPage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `MenuPage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

CREATE TABLE `MenuItem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `MenuItem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

","menupage, menu","menupage.full_height, menupage.full_width, menu.id, menupage.menu_id, menu.name"
professional_basketball,"For the players who belongs to the east conference, please list the name of the college they went to.",SELECT DISTINCT t1.college FROM players as t1 inner JOIN player_allstar as t2 ON t1.playerid = t2.playerid WHERE t2.conference = 'East',"CREATE TABLE `players` (
  playerID TEXT PRIMARY KEY,
  useFirst TEXT,
  firstName TEXT,
  middleName TEXT,
  lastName TEXT,
  nameGiven TEXT,
  fullGivenName TEXT,
  nameSuffix TEXT,
  nameNick TEXT,
  pos TEXT,
  firstseason INTEGER,
  lastseason INTEGER,
  height REAL,
  weight INTEGER,
  college TEXT,
  collegeOther TEXT,
  birthDate DATE,
  birthCity TEXT,
  birthState TEXT,
  birthCountry TEXT,
  highSchool TEXT,
  hsCity TEXT,
  hsState TEXT,
  hsCountry TEXT,
  deathDate DATE,
  race TEXT
);
Sample rows from `players`:
abdelal01, Alaa, Alaa, None, Abdelnaby, None, None, None, None, F-C, 0, 0, 82.0, 240, Duke, None, 1968-06-24, Cairo, None, EGY, Bloomfield Senior, Bloomfield, NJ, USA, 0000-00-00, B
abdulka01, Kareem, Kareem, None, Abdul-Jabbar, None, Ferdinand Lewis Alcindor, Jr., None, Lew, Cap, C, 0, 0, 85.0, 225, UCLA, None, 1947-04-16, New York, NY, USA, Power Memorial, New York, NY, USA, 0000-00-00, B
abdulma01, Mahdi, Mahdi, None, Abdul-Rahman, None, Walter Raphael Hazzard, Jr., None, Walt, G, 0, 0, 74.0, 185, UCLA, Santa Monica City, 1942-04-15, Wilmington, DE, USA, Overbrook / Moton, Philadelphia / Easton, PA / MD, USA, 2011-11-18, B

CREATE TABLE `player_allstar` (
  playerID TEXT PRIMARY KEY REFERENCES players(playerID),
  last_name TEXT,
  first_name TEXT,
  season_id INTEGER PRIMARY KEY,
  conference TEXT,
  league_id TEXT,
  games_played INTEGER,
  minutes INTEGER,
  points INTEGER,
  o_rebounds INTEGER,
  d_rebounds INTEGER,
  rebounds INTEGER,
  assists INTEGER,
  steals INTEGER,
  blocks INTEGER,
  turnovers INTEGER,
  personal_fouls INTEGER,
  fg_attempted INTEGER,
  fg_made INTEGER,
  ft_attempted INTEGER,
  ft_made INTEGER,
  three_attempted INTEGER,
  three_made INTEGER
);
Sample rows from `player_allstar`:
abdulka01, Abdul-Jabbar, Kareem, 1969, East, NBA, 1, 18, 10, None, None, 11, 4, None, None, None, None, 8, 4, 2, 2, None, None
abdulka01, Abdul-Jabbar, Kareem, 1970, West, NBA, 1, 30, 19, None, None, 14, 1, None, None, None, None, 16, 8, 4, 3, None, None
abdulka01, Abdul-Jabbar, Kareem, 1971, West, NBA, 1, 19, 12, None, None, 7, 2, None, None, None, None, 10, 5, 2, 2, None, None

","CREATE TABLE `awards_players` (
  playerID TEXT PRIMARY KEY REFERENCES players(playerID),
  award TEXT PRIMARY KEY,
  year INTEGER PRIMARY KEY,
  lgID TEXT,
  note TEXT,
  pos TEXT
);
Sample rows from `awards_players`:
abdulka01, All-Defensive Second Team, 1969, NBA, None, None
abdulka01, All-NBA Second Team, 1969, NBA, None, C
abdulka01, Rookie of the Year, 1969, NBA, None, None

CREATE TABLE `coaches` (
  coachID TEXT PRIMARY KEY,
  year INTEGER PRIMARY KEY REFERENCES teams(year),
  tmID TEXT PRIMARY KEY REFERENCES teams(tmID),
  lgID TEXT,
  stint INTEGER PRIMARY KEY,
  won INTEGER,
  lost INTEGER,
  post_wins INTEGER,
  post_losses INTEGER
);
Sample rows from `coaches`:
adelmri01, 1988, POR, NBA, 2, 14, 21, 0, 3
adelmri01, 1989, POR, NBA, 1, 59, 23, 12, 9
adelmri01, 1990, POR, NBA, 1, 63, 19, 9, 7

CREATE TABLE `draft` (
  id INTEGER,
  draftYear INTEGER REFERENCES teams(year),
  draftRound INTEGER,
  draftSelection INTEGER,
  draftOverall INTEGER,
  tmID TEXT REFERENCES teams(tmID),
  firstName TEXT,
  lastName TEXT,
  suffixName TEXT,
  playerID TEXT,
  draftFrom TEXT,
  lgID TEXT
);
Sample rows from `draft`:
1, 1967, 0, 0, 0, ANA, Darrell, Hardy, None, hardyda01, Baylor, ABA
2, 1967, 0, 0, 0, ANA, Bob, Krulish, None, None, Pacific, ABA
3, 1967, 0, 0, 0, ANA, Bob, Lewis, None, lewisbo01, North Carolina, ABA

CREATE TABLE `player_allstar` (
  playerID TEXT PRIMARY KEY REFERENCES players(playerID),
  last_name TEXT,
  first_name TEXT,
  season_id INTEGER PRIMARY KEY,
  conference TEXT,
  league_id TEXT,
  games_played INTEGER,
  minutes INTEGER,
  points INTEGER,
  o_rebounds INTEGER,
  d_rebounds INTEGER,
  rebounds INTEGER,
  assists INTEGER,
  steals INTEGER,
  blocks INTEGER,
  turnovers INTEGER,
  personal_fouls INTEGER,
  fg_attempted INTEGER,
  fg_made INTEGER,
  ft_attempted INTEGER,
  ft_made INTEGER,
  three_attempted INTEGER,
  three_made INTEGER
);
Sample rows from `player_allstar`:
abdulka01, Abdul-Jabbar, Kareem, 1969, East, NBA, 1, 18, 10, None, None, 11, 4, None, None, None, None, 8, 4, 2, 2, None, None
abdulka01, Abdul-Jabbar, Kareem, 1970, West, NBA, 1, 30, 19, None, None, 14, 1, None, None, None, None, 16, 8, 4, 3, None, None
abdulka01, Abdul-Jabbar, Kareem, 1971, West, NBA, 1, 19, 12, None, None, 7, 2, None, None, None, None, 10, 5, 2, 2, None, None

CREATE TABLE `players` (
  playerID TEXT PRIMARY KEY,
  useFirst TEXT,
  firstName TEXT,
  middleName TEXT,
  lastName TEXT,
  nameGiven TEXT,
  fullGivenName TEXT,
  nameSuffix TEXT,
  nameNick TEXT,
  pos TEXT,
  firstseason INTEGER,
  lastseason INTEGER,
  height REAL,
  weight INTEGER,
  college TEXT,
  collegeOther TEXT,
  birthDate DATE,
  birthCity TEXT,
  birthState TEXT,
  birthCountry TEXT,
  highSchool TEXT,
  hsCity TEXT,
  hsState TEXT,
  hsCountry TEXT,
  deathDate DATE,
  race TEXT
);
Sample rows from `players`:
abdelal01, Alaa, Alaa, None, Abdelnaby, None, None, None, None, F-C, 0, 0, 82.0, 240, Duke, None, 1968-06-24, Cairo, None, EGY, Bloomfield Senior, Bloomfield, NJ, USA, 0000-00-00, B
abdulka01, Kareem, Kareem, None, Abdul-Jabbar, None, Ferdinand Lewis Alcindor, Jr., None, Lew, Cap, C, 0, 0, 85.0, 225, UCLA, None, 1947-04-16, New York, NY, USA, Power Memorial, New York, NY, USA, 0000-00-00, B
abdulma01, Mahdi, Mahdi, None, Abdul-Rahman, None, Walter Raphael Hazzard, Jr., None, Walt, G, 0, 0, 74.0, 185, UCLA, Santa Monica City, 1942-04-15, Wilmington, DE, USA, Overbrook / Moton, Philadelphia / Easton, PA / MD, USA, 2011-11-18, B

CREATE TABLE `teams` (
  year INTEGER PRIMARY KEY,
  lgID TEXT,
  tmID TEXT PRIMARY KEY,
  franchID TEXT,
  confID TEXT,
  divID TEXT,
  rank INTEGER,
  confRank INTEGER,
  playoff TEXT,
  name TEXT,
  o_fgm INTEGER,
  o_ftm INTEGER,
  o_pts INTEGER,
  d_pts INTEGER,
  homeWon INTEGER,
  homeLost INTEGER,
  awayWon INTEGER,
  awayLost INTEGER,
  won INTEGER,
  lost INTEGER,
  games INTEGER,
  arena TEXT
);
Sample rows from `teams`:
1937, NBL, AFS, AFS, None, EA, 1, 0, CF, Akron Firestone Non-Skids, 249, 183, 681, 578, 8, 1, 5, 3, 14, 4, 18, None
1937, NBL, AGW, AGW, None, EA, 2, 0, WC, Akron Goodyear Wingfoots, 243, 159, 645, 498, 8, 1, 5, 4, 13, 5, 18, None
1937, NBL, BFB, BFB, None, EA, 4, 0, None, Buffalo Bisons, 108, 46, 262, 275, 2, 2, 1, 4, 3, 6, 9, None

CREATE TABLE `awards_coaches` (
  id INTEGER,
  year INTEGER REFERENCES coaches(year),
  coachID TEXT REFERENCES coaches(coachID),
  award TEXT,
  lgID TEXT,
  note TEXT
);
Sample rows from `awards_coaches`:
1, 1962, gallaha01, NBA Coach of the Year, NBA, None
2, 1963, hannual01, NBA Coach of the Year, NBA, None
3, 1964, auerbre01, NBA Coach of the Year, NBA, None

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
awards_coaches, 61
players_teams, 23751
series_post, 775

CREATE TABLE `players_teams` (
  id INTEGER,
  playerID TEXT REFERENCES players(None),
  year INTEGER REFERENCES teams(year),
  stint INTEGER,
  tmID TEXT REFERENCES teams(tmID),
  lgID TEXT,
  GP INTEGER,
  GS INTEGER,
  minutes INTEGER,
  points INTEGER,
  oRebounds INTEGER,
  dRebounds INTEGER,
  rebounds INTEGER,
  assists INTEGER,
  steals INTEGER,
  blocks INTEGER,
  turnovers INTEGER,
  PF INTEGER,
  fgAttempted INTEGER,
  fgMade INTEGER,
  ftAttempted INTEGER,
  ftMade INTEGER,
  threeAttempted INTEGER,
  threeMade INTEGER,
  PostGP INTEGER,
  PostGS INTEGER,
  PostMinutes INTEGER,
  PostPoints INTEGER,
  PostoRebounds INTEGER,
  PostdRebounds INTEGER,
  PostRebounds INTEGER,
  PostAssists INTEGER,
  PostSteals INTEGER,
  PostBlocks INTEGER,
  PostTurnovers INTEGER,
  PostPF INTEGER,
  PostfgAttempted INTEGER,
  PostfgMade INTEGER,
  PostftAttempted INTEGER,
  PostftMade INTEGER,
  PostthreeAttempted INTEGER,
  PostthreeMade INTEGER,
  note TEXT
);
Sample rows from `players_teams`:
1, abdelal01, 1990, 1, POR, NBA, 43, 0, 290, 135, 27, 62, 89, 12, 4, 12, 22, 39, 116, 55, 44, 25, 0, 0, 5, 0, 13, 4, 1, 2, 3, 0, 0, 0, 0, 0, 6, 2, 0, 0, 0, 0, None
2, abdelal01, 1991, 1, POR, NBA, 71, 0, 934, 432, 81, 179, 260, 30, 25, 17, 66, 132, 361, 178, 101, 76, 0, 0, 8, 0, 25, 12, 0, 4, 4, 2, 0, 0, 2, 4, 10, 5, 4, 2, 0, 0, None
3, abdelal01, 1992, 1, MIL, NBA, 12, 0, 159, 64, 12, 25, 37, 10, 6, 4, 0, 24, 56, 26, 16, 12, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, None

CREATE TABLE `series_post` (
  id INTEGER,
  year INTEGER REFERENCES teams(year) REFERENCES teams(year),
  round TEXT,
  series TEXT,
  tmIDWinner TEXT REFERENCES teams(tmID),
  lgIDWinner TEXT,
  tmIDLoser TEXT REFERENCES teams(tmID),
  lgIDLoser TEXT,
  W INTEGER,
  L INTEGER
);
Sample rows from `series_post`:
1, 1946, F, O, PHW, NBA, CHS, NBA, 4, 1
2, 1946, QF, M, NYK, NBA, CLR, NBA, 2, 1
3, 1946, QF, M, PHW, NBA, STB, NBA, 2, 1

","players, player_allstar","players.college, players.playerid, player_allstar.playerid, player_allstar.conference"
sales,List the full name of the customer who purchased the most quantity of products.,"SELECT t1.firstname, t1.lastname FROM customers as t1 inner JOIN sales as t2 ON t1.customerid = t2.customerid ORDER BY t2.quantity DESC LIMIT 1","CREATE TABLE `customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

CREATE TABLE `sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Employees`:
1, Abraham, e, Bennet
2, Reginald, l, Blotchet-Halls
3, Cheryl, a, Carson

CREATE TABLE `Products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

CREATE TABLE `Sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `Sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

","customers, sales","customers.firstname, customers.lastname, customers.customerid, sales.customerid, sales.quantity"
legislator,Give the full name of legislators who have accounts on OpenSecrets.org.,SELECT COUNT(*) FROM current WHERE opensecrets_id is NOT null AND opensecrets_id <> '',"CREATE TABLE `current` (
  ballotpedia_id TEXT,
  bioguide_id TEXT PRIMARY KEY,
  birthday_bio DATE,
  cspan_id REAL PRIMARY KEY,
  fec_id TEXT,
  first_name TEXT,
  gender_bio TEXT,
  google_entity_id_id TEXT,
  govtrack_id INTEGER,
  house_history_id REAL,
  icpsr_id REAL,
  last_name TEXT,
  lis_id TEXT,
  maplight_id REAL,
  middle_name TEXT,
  nickname_name TEXT,
  official_full_name TEXT,
  opensecrets_id TEXT,
  religion_bio TEXT,
  suffix_name TEXT,
  thomas_id INTEGER,
  votesmart_id REAL,
  wikidata_id TEXT,
  wikipedia_id TEXT
);
Sample rows from `current`:
Sherrod Brown, B000944, 1952-11-09, 5051.0, ['H2OH13033', 'S6OH00163'], Sherrod, M, kg:/m/034s80, 400050, 9996.0, 29389.0, Brown, S307, 168.0, None, None, Sherrod Brown, N00003535, Lutheran, None, 136, 27018.0, Q381880, Sherrod Brown
Maria Cantwell, C000127, 1958-10-13, 26137.0, ['S8WA00194', 'H2WA01054'], Maria, F, kg:/m/01x68t, 300018, 10608.0, 39310.0, Cantwell, S275, 544.0, None, None, Maria Cantwell, N00007836, Roman Catholic, None, 172, 27122.0, Q22250, Maria Cantwell
Ben Cardin, C000141, 1943-10-05, 4004.0, ['H6MD03177', 'S6MD03177'], Benjamin, M, kg:/m/025k3k, 400064, 10629.0, 15408.0, Cardin, S308, 182.0, L., None, Benjamin L. Cardin, N00001955, Jewish, None, 174, 26888.0, Q723295, Ben Cardin

","CREATE TABLE `current` (
  ballotpedia_id TEXT,
  bioguide_id TEXT PRIMARY KEY,
  birthday_bio DATE,
  cspan_id REAL PRIMARY KEY,
  fec_id TEXT,
  first_name TEXT,
  gender_bio TEXT,
  google_entity_id_id TEXT,
  govtrack_id INTEGER,
  house_history_id REAL,
  icpsr_id REAL,
  last_name TEXT,
  lis_id TEXT,
  maplight_id REAL,
  middle_name TEXT,
  nickname_name TEXT,
  official_full_name TEXT,
  opensecrets_id TEXT,
  religion_bio TEXT,
  suffix_name TEXT,
  thomas_id INTEGER,
  votesmart_id REAL,
  wikidata_id TEXT,
  wikipedia_id TEXT
);
Sample rows from `current`:
Sherrod Brown, B000944, 1952-11-09, 5051.0, ['H2OH13033', 'S6OH00163'], Sherrod, M, kg:/m/034s80, 400050, 9996.0, 29389.0, Brown, S307, 168.0, None, None, Sherrod Brown, N00003535, Lutheran, None, 136, 27018.0, Q381880, Sherrod Brown
Maria Cantwell, C000127, 1958-10-13, 26137.0, ['S8WA00194', 'H2WA01054'], Maria, F, kg:/m/01x68t, 300018, 10608.0, 39310.0, Cantwell, S275, 544.0, None, None, Maria Cantwell, N00007836, Roman Catholic, None, 172, 27122.0, Q22250, Maria Cantwell
Ben Cardin, C000141, 1943-10-05, 4004.0, ['H6MD03177', 'S6MD03177'], Benjamin, M, kg:/m/025k3k, 400064, 10629.0, 15408.0, Cardin, S308, 182.0, L., None, Benjamin L. Cardin, N00001955, Jewish, None, 174, 26888.0, Q723295, Ben Cardin

CREATE TABLE `current-terms` (
  address TEXT,
  bioguide TEXT PRIMARY KEY REFERENCES current(bioguide_id),
  caucus TEXT,
  chamber TEXT,
  class REAL,
  contact_form TEXT,
  district REAL,
  end TEXT PRIMARY KEY,
  fax TEXT,
  last TEXT,
  name TEXT,
  office TEXT,
  party TEXT,
  party_affiliations TEXT,
  phone TEXT,
  relation TEXT,
  rss_url TEXT,
  start TEXT,
  state TEXT,
  state_rank TEXT,
  title TEXT,
  type TEXT,
  url TEXT
);
Sample rows from `current-terms`:
None, B000944, None, None, None, None, 13.0, 1995-01-03, None, None, None, None, Democrat, None, None, None, None, 1993-01-05, OH, None, None, rep, None
None, B000944, None, None, None, None, 13.0, 1997-01-03, None, None, None, None, Democrat, None, None, None, None, 1995-01-04, OH, None, None, rep, None
None, B000944, None, None, None, None, 13.0, 1999-01-03, None, None, None, None, Democrat, None, None, None, None, 1997-01-07, OH, None, None, rep, None

CREATE TABLE `historical` (
  ballotpedia_id TEXT,
  bioguide_id TEXT PRIMARY KEY,
  bioguide_previous_id TEXT,
  birthday_bio TEXT,
  cspan_id TEXT,
  fec_id TEXT,
  first_name TEXT,
  gender_bio TEXT,
  google_entity_id_id TEXT,
  govtrack_id INTEGER,
  house_history_alternate_id TEXT,
  house_history_id REAL,
  icpsr_id REAL,
  last_name TEXT,
  lis_id TEXT,
  maplight_id TEXT,
  middle_name TEXT,
  nickname_name TEXT,
  official_full_name TEXT,
  opensecrets_id TEXT,
  religion_bio TEXT,
  suffix_name TEXT,
  thomas_id TEXT,
  votesmart_id TEXT,
  wikidata_id TEXT,
  wikipedia_id TEXT
);
Sample rows from `historical`:
None, B000226, None, 1745-04-02, None, None, Richard, M, kg:/m/02pz46, 401222, None, None, 507.0, Bassett, None, None, None, None, None, None, None, None, None, None, Q518823, Richard Bassett (politician)
None, B000546, None, 1742-03-21, None, None, Theodorick, M, kg:/m/033mf4, 401521, None, 9479.0, 786.0, Bland, None, None, None, None, None, None, None, None, None, None, Q1749152, Theodorick Bland (congressman)
None, B001086, None, 1743-06-16, None, None, Aedanus, M, kg:/m/03yccv, 402032, None, 10177.0, 1260.0, Burke, None, None, None, None, None, None, None, None, None, None, Q380504, Aedanus Burke

CREATE TABLE `historical-terms` (
  address TEXT,
  bioguide TEXT PRIMARY KEY REFERENCES historical(bioguide_id),
  chamber TEXT,
  class REAL,
  contact_form TEXT,
  district REAL,
  end TEXT,
  fax TEXT,
  last TEXT,
  middle TEXT,
  name TEXT,
  office TEXT,
  party TEXT,
  party_affiliations TEXT,
  phone TEXT,
  relation TEXT,
  rss_url TEXT,
  start TEXT,
  state TEXT,
  state_rank TEXT,
  title TEXT,
  type TEXT,
  url TEXT
);
Sample rows from `historical-terms`:
None, B000226, None, 2.0, None, None, 1793-03-03, None, None, None, None, None, Anti-Administration, None, None, None, None, 1789-03-04, DE, None, None, sen, None
None, B000546, None, None, None, 9.0, 1791-03-03, None, None, None, None, None, None, None, None, None, None, 1789-03-04, VA, None, None, rep, None
None, B001086, None, None, None, 2.0, 1791-03-03, None, None, None, None, None, None, None, None, None, None, 1789-03-04, SC, None, None, rep, None

CREATE TABLE `social-media` (
  bioguide TEXT PRIMARY KEY REFERENCES current(bioguide_id),
  facebook TEXT,
  facebook_id REAL,
  govtrack REAL,
  instagram TEXT,
  instagram_id REAL,
  thomas INTEGER,
  twitter TEXT,
  twitter_id REAL,
  youtube TEXT,
  youtube_id TEXT
);
Sample rows from `social-media`:
R000600, congresswomanaumuaamata, 1537155909907320.0, 412664.0, None, None, 2222, RepAmata, 3026622545.0, None, UCGdrLQbt1PYDTPsampx4t1A
Y000064, RepToddYoung, 186203844738421.0, 412428.0, None, None, 2019, RepToddYoung, 234128524.0, RepToddYoung, UCuknj4PGn91gHDNAfboZEgQ
E000295, senjoniernst, 351671691660938.0, 412667.0, senjoniernst, 1582702853.0, 2283, SenJoniErnst, 2856787757.0, None, UCLwrmtF_84FIcK3TyMs4MIw

",current,opensecrets_id
talkingdata,"Please list any five app categories that are related to games, along with their label ID.","SELECT category, label_id FROM label_categories WHERE category LIKE '%game%' LIMIT 5","CREATE TABLE `label_categories` (
  label_id INTEGER,
  category TEXT
);
Sample rows from `label_categories`:
1, None
2, game-game type
3, game-Game themes

","CREATE TABLE `app_all` (
  app_id INTEGER
);
Sample rows from `app_all`:
-9223281467940916832
-9222877069545393219
-9222785464897897681

CREATE TABLE `app_events` (
  event_id INTEGER PRIMARY KEY REFERENCES events(event_id),
  app_id INTEGER PRIMARY KEY,
  is_installed INTEGER,
  is_active INTEGER
);
Sample rows from `app_events`:
2, -8942695423876075857, 1, 0
2, -8022267440849930066, 1, 0
2, -5720078949152207372, 1, 0

CREATE TABLE `app_events_relevant` (
  event_id INTEGER PRIMARY KEY REFERENCES events_relevant(event_id),
  app_id INTEGER PRIMARY KEY REFERENCES app_all(app_id),
  is_installed INTEGER,
  is_active INTEGER
);
Sample rows from `app_events_relevant`:
2, -8942695423876075857, 1, 0
2, -8022267440849930066, 1, 0
2, -5720078949152207372, 1, 0

CREATE TABLE `app_labels` (
  app_id INTEGER REFERENCES app_all(app_id),
  label_id INTEGER REFERENCES label_categories(label_id)
);
Sample rows from `app_labels`:
7324884708820027918, 251
-4494216993218550286, 251
6058196446775239644, 406

CREATE TABLE `events` (
  event_id INTEGER,
  device_id INTEGER,
  timestamp DATETIME,
  longitude REAL,
  latitude REAL
);
Sample rows from `events`:
1, 29182687948017175, 2016-05-01 00:55:25.0, 121.0, 31.0
2, -6401643145415154744, 2016-05-01 00:54:12.0, 104.0, 31.0
3, -4833982096941402721, 2016-05-01 00:08:05.0, 107.0, 30.0

CREATE TABLE `events_relevant` (
  event_id INTEGER,
  device_id INTEGER REFERENCES gender_age(device_id),
  timestamp DATETIME,
  longitude REAL,
  latitude REAL
);
Sample rows from `events_relevant`:
2, None, -8942695423876075857, 1.0, 0.0
6, None, -8764672938472212518, 1.0, 1.0
7, None, -9050100410106163077, 1.0, 0.0

CREATE TABLE `gender_age` (
  device_id INTEGER REFERENCES phone_brand_device_model2(device_id),
  gender TEXT,
  age INTEGER,
  group TEXT
);
Sample rows from `gender_age`:
-9221086586254644858, M, 29, M29-31
-9221079146476055829, None, None, None
-9221066489596332354, M, 31, M29-31

CREATE TABLE `gender_age_test` (
  device_id INTEGER
);
Sample rows from `gender_age_test`:
-9223321966609553846
-9223042152723782980
-9222896629442493034

CREATE TABLE `gender_age_train` (
  device_id INTEGER,
  gender TEXT,
  age INTEGER,
  group TEXT
);
Sample rows from `gender_age_train`:
-9223067244542181226, M, 24, M23-26
-9222956879900151005, M, 36, M32-38
-9222754701995937853, M, 29, M29-31

CREATE TABLE `label_categories` (
  label_id INTEGER,
  category TEXT
);
Sample rows from `label_categories`:
1, None
2, game-game type
3, game-Game themes

CREATE TABLE `phone_brand_device_model2` (
  device_id INTEGER PRIMARY KEY,
  phone_brand TEXT PRIMARY KEY,
  device_model TEXT PRIMARY KEY
);
Sample rows from `phone_brand_device_model2`:
-9223321966609553846, 小米, 红米note
-9223067244542181226, vivo, Y19T
-9223042152723782980, 小米, MI 3

CREATE TABLE `sample_submission` (
  device_id INTEGER,
  F23- REAL,
  F24-26 REAL,
  F27-28 REAL,
  F29-32 REAL,
  F33-42 REAL,
  F43+ REAL,
  M22- REAL,
  M23-26 REAL,
  M27-28 REAL,
  M29-31 REAL,
  M32-38 REAL,
  M39+ REAL
);
Sample rows from `sample_submission`:
-9223321966609553846, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833
-9223042152723782980, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833
-9222896629442493034, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833

",label_categories,"category, label_id"
image_and_language,What is the prediction relationship class id of the tallest image?,SELECT t1.pred_class_id FROM img_rel as t1 inner JOIN img_obj as t2 ON t1.img_id = t2.img_id ORDER BY t2.h DESC LIMIT 1,"CREATE TABLE `img_rel` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `img_rel`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

CREATE TABLE `img_obj` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `img_obj`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

","CREATE TABLE `ATT_CLASSES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `ATT_CLASSES`:
0, building s
1, indoors
2, cluttered

CREATE TABLE `OBJ_CLASSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLASSES`:
0, awning
1, goggles
2, dot

CREATE TABLE `IMG_OBJ` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `IMG_OBJ`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `IMG_OBJ_ATT` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_OBJ_ATT`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `PRED_CLASSES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `PRED_CLASSES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `IMG_REL` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_REL`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

","img_rel, img_obj","img_rel.pred_class_id, img_rel.img_id, img_obj.img_id, img_obj.h"
cookbook,Provide the ingredients and maximum quantities of the recipe which can serve 7 people.,"SELECT t3.name, t2.max_qty FROM recipe as t1 inner JOIN quantity as t2 ON t1.recipe_id = t2.recipe_id inner JOIN ingredient as t3 ON t3.ingredient_id = t2.ingredient_id WHERE t1.servings = 7","CREATE TABLE `recipe` (
  recipe_id INTEGER,
  title TEXT,
  subtitle TEXT,
  servings INTEGER,
  yield_unit TEXT,
  prep_min INTEGER,
  cook_min INTEGER,
  stnd_min INTEGER,
  source TEXT,
  intro TEXT,
  directions TEXT
);
Sample rows from `recipe`:
214, Raspberry Chiffon Pie, None, 10, 1 pie, 20, 8, 305, The California Tree Fruit Agreement, None, For crust, preheat oven to 375 degrees F.
In lightly greased 10-inch pie plate, combine graham cracker crumbs, melted butter and 1/4 cup sugar. Press evenly on bottom and up side of plate. Bake 5 minutes; cool.

For filling, in medium saucepan, combine juice or water and gelatin; let stand 5 minutes. Add 1/3 cup sugar and heat over medium heat, stirring to dissolve gelatin. In blender or food processor, puree 6 plums. Add puree and raspberries to gelatin mixture. Refrigerate until mixture begins to set about 1 hour. Stir yogurt into fruit mixture. In large bowl, beat egg whites until frothy. Gradually add cream of tartar and remaining 1/3 cup sugar and beat until stiff peaks form. Gently fold egg whites into fruit mixture so as not to reduce volume. Spoon into crust. Refrigerate 4 hours or overnight. Thinly slice remaining 2 plums and garnish top of pie.
215, Apricot Yogurt Parfaits, None, 4, None, 5, 2, 65, Produce for Better Health Foundation and 5 a Day, None, Drain canned apricots, pour 1/4 cup of the juice into saucepan or microwave-safe dish. Sprinkle gelatin over juice and let stand for 5 minutes to soften. Warm over low heat or microwave at medium (50% power) for 30 seconds or until gelatin has dissolved.
 
In food processor or blender, puree canned apricots; add lemon juice brandy, yogurt and gelatin mixture and process for 30 seconds or until combined.
 
Pour into parfait or stemmed glasses or champagne flutes. Cover and refrigerate until set, at least 1 hour or overnight.
 
Just before serving arrange fresh apricots on top. (If apricots are not available substitute kiwi slices or berries). Garnish each with a small spoonful of yogurt and sprinkling of brown sugar or mint.
216, Fresh Apricot Bavarian, None, 8, None, 5, 13, 0, The California Apricot Advisory Board, Serve in stemmed glasses and top with sliced apricots for elegant endings., Drop apricots into boiling water to cover. Return to boil and simmer for 5 minutes or until skins begin to split. Drain and rinse under cold water. Halve fruit and discard skins and pits. Puree apricots in electric blender. Combine water and gelatin in small saucepan; stir over low heat until dissolved. Mix sugar, apricot puree and yogurt with a wire whip until smooth; mix in dissolved gelatin. Sweeten to taste if desired. Chill mixture until thick. Spoon into stemmed glasses.

Note: One pound fresh apricots is 15 to 20. One and a half envelopes gelatin is 4 teaspoons.

CREATE TABLE `quantity` (
  quantity_id INTEGER,
  recipe_id INTEGER REFERENCES Nutrition(recipe_id) REFERENCES Recipe(recipe_id),
  ingredient_id INTEGER REFERENCES Ingredient(ingredient_id),
  max_qty REAL,
  min_qty REAL,
  unit TEXT,
  preparation TEXT,
  optional TEXT
);
Sample rows from `quantity`:
1, 214, 1613, 2.0, 2.0, cup(s), None, FALSE
2, 214, 3334, 0.25, 0.25, cup(s), None, FALSE
3, 214, 2222, 0.5, 0.5, cup(s), melted, FALSE

CREATE TABLE `ingredient` (
  ingredient_id INTEGER,
  category TEXT,
  name TEXT,
  plural TEXT
);
Sample rows from `ingredient`:
1, dairy, 1% lowfat cottage cheese, None
6, dairy, 1% lowfat milk, None
10, Mexican products, 10-inch flour tortilla, s

","CREATE TABLE `Ingredient` (
  ingredient_id INTEGER,
  category TEXT,
  name TEXT,
  plural TEXT
);
Sample rows from `Ingredient`:
1, dairy, 1% lowfat cottage cheese, None
6, dairy, 1% lowfat milk, None
10, Mexican products, 10-inch flour tortilla, s

CREATE TABLE `Recipe` (
  recipe_id INTEGER,
  title TEXT,
  subtitle TEXT,
  servings INTEGER,
  yield_unit TEXT,
  prep_min INTEGER,
  cook_min INTEGER,
  stnd_min INTEGER,
  source TEXT,
  intro TEXT,
  directions TEXT
);
Sample rows from `Recipe`:
214, Raspberry Chiffon Pie, None, 10, 1 pie, 20, 8, 305, The California Tree Fruit Agreement, None, For crust, preheat oven to 375 degrees F.
In lightly greased 10-inch pie plate, combine graham cracker crumbs, melted butter and 1/4 cup sugar. Press evenly on bottom and up side of plate. Bake 5 minutes; cool.

For filling, in medium saucepan, combine juice or water and gelatin; let stand 5 minutes. Add 1/3 cup sugar and heat over medium heat, stirring to dissolve gelatin. In blender or food processor, puree 6 plums. Add puree and raspberries to gelatin mixture. Refrigerate until mixture begins to set about 1 hour. Stir yogurt into fruit mixture. In large bowl, beat egg whites until frothy. Gradually add cream of tartar and remaining 1/3 cup sugar and beat until stiff peaks form. Gently fold egg whites into fruit mixture so as not to reduce volume. Spoon into crust. Refrigerate 4 hours or overnight. Thinly slice remaining 2 plums and garnish top of pie.
215, Apricot Yogurt Parfaits, None, 4, None, 5, 2, 65, Produce for Better Health Foundation and 5 a Day, None, Drain canned apricots, pour 1/4 cup of the juice into saucepan or microwave-safe dish. Sprinkle gelatin over juice and let stand for 5 minutes to soften. Warm over low heat or microwave at medium (50% power) for 30 seconds or until gelatin has dissolved.
 
In food processor or blender, puree canned apricots; add lemon juice brandy, yogurt and gelatin mixture and process for 30 seconds or until combined.
 
Pour into parfait or stemmed glasses or champagne flutes. Cover and refrigerate until set, at least 1 hour or overnight.
 
Just before serving arrange fresh apricots on top. (If apricots are not available substitute kiwi slices or berries). Garnish each with a small spoonful of yogurt and sprinkling of brown sugar or mint.
216, Fresh Apricot Bavarian, None, 8, None, 5, 13, 0, The California Apricot Advisory Board, Serve in stemmed glasses and top with sliced apricots for elegant endings., Drop apricots into boiling water to cover. Return to boil and simmer for 5 minutes or until skins begin to split. Drain and rinse under cold water. Halve fruit and discard skins and pits. Puree apricots in electric blender. Combine water and gelatin in small saucepan; stir over low heat until dissolved. Mix sugar, apricot puree and yogurt with a wire whip until smooth; mix in dissolved gelatin. Sweeten to taste if desired. Chill mixture until thick. Spoon into stemmed glasses.

Note: One pound fresh apricots is 15 to 20. One and a half envelopes gelatin is 4 teaspoons.

CREATE TABLE `Nutrition` (
  recipe_id INTEGER REFERENCES Recipe(recipe_id),
  protein REAL,
  carbo REAL,
  alcohol REAL,
  total_fat REAL,
  sat_fat REAL,
  cholestrl REAL,
  sodium REAL,
  iron REAL,
  vitamin_c REAL,
  vitamin_a REAL,
  fiber REAL,
  pcnt_cal_carb REAL,
  pcnt_cal_fat REAL,
  pcnt_cal_prot REAL,
  calories REAL
);
Sample rows from `Nutrition`:
214, 5.47, 41.29, 0.0, 11.53, 2.21, 1.39, 260.78, 0.81, 8.89, 586.2, 0.87, 56.8, 35.68, 7.53, 290.79
215, 5.7, 23.75, 1.93, 1.08, 0.58, 3.48, 46.17, 0.57, 13.02, 2738.24, 0.62, 67.38, 6.89, 16.17, 141.01
216, 4.9, 26.88, 0.0, 1.1, 0.58, 3.46, 41.79, 0.37, 6.13, 1521.1, 0.34, 78.45, 7.24, 14.3, 137.06

CREATE TABLE `Quantity` (
  quantity_id INTEGER,
  recipe_id INTEGER REFERENCES Nutrition(recipe_id) REFERENCES Recipe(recipe_id),
  ingredient_id INTEGER REFERENCES Ingredient(ingredient_id),
  max_qty REAL,
  min_qty REAL,
  unit TEXT,
  preparation TEXT,
  optional TEXT
);
Sample rows from `Quantity`:
1, 214, 1613, 2.0, 2.0, cup(s), None, FALSE
2, 214, 3334, 0.25, 0.25, cup(s), None, FALSE
3, 214, 2222, 0.5, 0.5, cup(s), melted, FALSE

","recipe, quantity, ingredient","ingredient.name, quantity.max_qty, recipe.recipe_id, quantity.recipe_id, ingredient.ingredient_id, quantity.ingredient_id, recipe.servings"
world_development_indicators,What's the long name of the country that got 3000000 on the indicator Arms exports in 1960?,SELECT t1.longname FROM country as t1 inner JOIN indicators as t2 ON t1.countryCode = t2.countryCode WHERE t2.indicatorname = 'Arms exports (SIPRI trend indicator values)' AND t2.year = 1960 AND t2.value = 3000000,"CREATE TABLE `country` (
  CountryCode TEXT PRIMARY KEY,
  ShortName TEXT,
  TableName TEXT,
  LongName TEXT,
  Alpha2Code TEXT,
  CurrencyUnit TEXT,
  SpecialNotes TEXT,
  Region TEXT,
  IncomeGroup TEXT,
  Wb2Code TEXT,
  NationalAccountsBaseYear TEXT,
  NationalAccountsReferenceYear TEXT,
  SnaPriceValuation TEXT,
  LendingCategory TEXT,
  OtherGroups TEXT,
  SystemOfNationalAccounts TEXT,
  AlternativeConversionFactor TEXT,
  PppSurveyYear TEXT,
  BalanceOfPaymentsManualInUse TEXT,
  ExternalDebtReportingStatus TEXT,
  SystemOfTrade TEXT,
  GovernmentAccountingConcept TEXT,
  ImfDataDisseminationStandard TEXT,
  LatestPopulationCensus TEXT,
  LatestHouseholdSurvey TEXT,
  SourceOfMostRecentIncomeAndExpenditureData TEXT,
  VitalRegistrationComplete TEXT,
  LatestAgriculturalCensus TEXT,
  LatestIndustrialData INTEGER,
  LatestTradeData INTEGER,
  LatestWaterWithdrawalData INTEGER
);
Sample rows from `country`:
AFG, Afghanistan, Afghanistan, Islamic State of Afghanistan, AF, Afghan afghani, Fiscal year end: March 20; reporting period for national accounts data: FY (from 2013 are CY). National accounts data are sourced from the IMF and differ from the Central Statistics Organization numbers due to exclusion of the opium economy., South Asia, Low income, AF, 2002/03, , Value added at basic prices (VAB), IDA, HIPC, Country uses the 1993 System of National Accounts methodology., , , , Actual, General trade system, Consolidated central government, General Data Dissemination System (GDDS), 1979, Multiple Indicator Cluster Survey (MICS), 2010/11, Integrated household survey (IHS), 2008, , 2013/14, None, 2013, 2000
ALB, Albania, Albania, Republic of Albania, AL, Albanian lek, , Europe & Central Asia, Upper middle income, AL, Original chained constant price data are rescaled., 1996, Value added at basic prices (VAB), IBRD, , Country uses the 1993 System of National Accounts methodology., , Rolling, IMF Balance of Payments Manual, 6th edition., Actual, General trade system, Budgetary central government, General Data Dissemination System (GDDS), 2011, Demographic and Health Survey (DHS), 2008/09, Living Standards Measurement Study Survey (LSMS), 2011/12, Yes, 2012, 2011, 2013, 2006
DZA, Algeria, Algeria, People's Democratic Republic of Algeria, DZ, Algerian dinar, , Middle East & North Africa, Upper middle income, DZ, 1980, , Value added at basic prices (VAB), IBRD, , Country uses the 1968 System of National Accounts methodology., , 2011, IMF Balance of Payments Manual, 6th edition., Actual, Special trade system, Budgetary central government, General Data Dissemination System (GDDS), 2008, Multiple Indicator Cluster Survey (MICS), 2012, Integrated household survey (IHS), 1995, , , 2010, 2013, 2001

CREATE TABLE `indicators` (
  CountryName TEXT,
  CountryCode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  IndicatorName TEXT,
  IndicatorCode TEXT PRIMARY KEY,
  Year INTEGER PRIMARY KEY,
  Value INTEGER
);
Sample rows from `indicators`:
Arab World, ARB, Adolescent fertility rate (births per 1,000 women ages 15-19), SP.ADO.TFRT, 1960, 133
Arab World, ARB, Age dependency ratio (% of working-age population), SP.POP.DPND, 1960, 87
Arab World, ARB, Age dependency ratio, old (% of working-age population), SP.POP.DPND.OL, 1960, 6

","CREATE TABLE `Country` (
  CountryCode TEXT PRIMARY KEY,
  ShortName TEXT,
  TableName TEXT,
  LongName TEXT,
  Alpha2Code TEXT,
  CurrencyUnit TEXT,
  SpecialNotes TEXT,
  Region TEXT,
  IncomeGroup TEXT,
  Wb2Code TEXT,
  NationalAccountsBaseYear TEXT,
  NationalAccountsReferenceYear TEXT,
  SnaPriceValuation TEXT,
  LendingCategory TEXT,
  OtherGroups TEXT,
  SystemOfNationalAccounts TEXT,
  AlternativeConversionFactor TEXT,
  PppSurveyYear TEXT,
  BalanceOfPaymentsManualInUse TEXT,
  ExternalDebtReportingStatus TEXT,
  SystemOfTrade TEXT,
  GovernmentAccountingConcept TEXT,
  ImfDataDisseminationStandard TEXT,
  LatestPopulationCensus TEXT,
  LatestHouseholdSurvey TEXT,
  SourceOfMostRecentIncomeAndExpenditureData TEXT,
  VitalRegistrationComplete TEXT,
  LatestAgriculturalCensus TEXT,
  LatestIndustrialData INTEGER,
  LatestTradeData INTEGER,
  LatestWaterWithdrawalData INTEGER
);
Sample rows from `Country`:
AFG, Afghanistan, Afghanistan, Islamic State of Afghanistan, AF, Afghan afghani, Fiscal year end: March 20; reporting period for national accounts data: FY (from 2013 are CY). National accounts data are sourced from the IMF and differ from the Central Statistics Organization numbers due to exclusion of the opium economy., South Asia, Low income, AF, 2002/03, , Value added at basic prices (VAB), IDA, HIPC, Country uses the 1993 System of National Accounts methodology., , , , Actual, General trade system, Consolidated central government, General Data Dissemination System (GDDS), 1979, Multiple Indicator Cluster Survey (MICS), 2010/11, Integrated household survey (IHS), 2008, , 2013/14, None, 2013, 2000
ALB, Albania, Albania, Republic of Albania, AL, Albanian lek, , Europe & Central Asia, Upper middle income, AL, Original chained constant price data are rescaled., 1996, Value added at basic prices (VAB), IBRD, , Country uses the 1993 System of National Accounts methodology., , Rolling, IMF Balance of Payments Manual, 6th edition., Actual, General trade system, Budgetary central government, General Data Dissemination System (GDDS), 2011, Demographic and Health Survey (DHS), 2008/09, Living Standards Measurement Study Survey (LSMS), 2011/12, Yes, 2012, 2011, 2013, 2006
DZA, Algeria, Algeria, People's Democratic Republic of Algeria, DZ, Algerian dinar, , Middle East & North Africa, Upper middle income, DZ, 1980, , Value added at basic prices (VAB), IBRD, , Country uses the 1968 System of National Accounts methodology., , 2011, IMF Balance of Payments Manual, 6th edition., Actual, Special trade system, Budgetary central government, General Data Dissemination System (GDDS), 2008, Multiple Indicator Cluster Survey (MICS), 2012, Integrated household survey (IHS), 1995, , , 2010, 2013, 2001

CREATE TABLE `Series` (
  SeriesCode TEXT PRIMARY KEY,
  Topic TEXT,
  IndicatorName TEXT,
  ShortDefinition TEXT,
  LongDefinition TEXT,
  UnitOfMeasure TEXT,
  Periodicity TEXT,
  BasePeriod TEXT,
  OtherNotes INTEGER,
  AggregationMethod TEXT,
  LimitationsAndExceptions TEXT,
  NotesFromOriginalSource TEXT,
  GeneralComments TEXT,
  Source TEXT,
  StatisticalConceptAndMethodology TEXT,
  DevelopmentRelevance TEXT,
  RelatedSourceLinks TEXT,
  OtherWebLinks INTEGER,
  RelatedIndicators INTEGER,
  LicenseType TEXT
);
Sample rows from `Series`:
BN.KLT.DINV.CD, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net (BoP, current US$), , Foreign direct investment are the net inflows of investment to acquire a lasting management interest (10 percent or more of voting stock) in an enterprise operating in an economy other than that of the investor. It is the sum of equity capital, reinvestme, , Annual, , None, , , , Note: Data are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6) and are only available from 2005 onwards. In BPM6, the headings of the financial account have been changed from credits and debits to net acquisition of financial ass, International Monetary Fund, Balance of Payments Statistics Yearbook and data files., , , , None, None, Open
BX.KLT.DINV.WD.GD.ZS, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net inflows (% of GDP), , Foreign direct investment are the net inflows of investment to acquire a lasting management interest (10 percent or more of voting stock) in an enterprise operating in an economy other than that of the investor. It is the sum of equity capital, reinvestme, , Annual, , None, Weighted average, FDI data do not give a complete picture of international investment in an economy. Balance of payments data on FDI do not include capital raised locally, an important source of investment financing in some developing countries. In addition, FDI data omit , , Note: Data starting from 2005 are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6)., International Monetary Fund, International Financial Statistics and Balance of Payments databases, World Bank, International Debt Statistics, and World Bank and OECD GDP estimates., Data on equity flows are based on balance of payments data reported by the International Monetary Fund (IMF). Foreign direct investment (FDI) data are supplemented by the World Bank staff estimates using data from the United Nations Conference on Trade an, Private financial flows - equity and debt - account for the bulk of development finance. Equity flows comprise foreign direct investment (FDI) and portfolio equity. Debt flows are financing raised through bond issuance, bank lending, and supplier credits., , None, None, Open
BX.KLT.DINV.CD.WD, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net inflows (BoP, current US$), , Foreign direct investment refers to direct investment equity flows in the reporting economy. It is the sum of equity capital, reinvestment of earnings, and other capital. Direct investment is a category of cross-border investment associated with a residen, , Annual, , None, Sum, FDI data do not give a complete picture of international investment in an economy. Balance of payments data on FDI do not include capital raised locally, an important source of investment financing in some developing countries. In addition, FDI data omit , , Note: Data starting from 2005 are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6)., International Monetary Fund, Balance of Payments database, supplemented by data from the United Nations Conference on Trade and Development and official national sources., Data on equity flows are based on balance of payments data reported by the International Monetary Fund (IMF). Foreign direct investment (FDI) data are supplemented by the World Bank staff estimates using data from the United Nations Conference on Trade an, Private financial flows - equity and debt - account for the bulk of development finance. Equity flows comprise foreign direct investment (FDI) and portfolio equity. Debt flows are financing raised through bond issuance, bank lending, and supplier credits., , None, None, Open

CREATE TABLE `CountryNotes` (
  Countrycode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Description TEXT
);
Sample rows from `CountryNotes`:
ABW, EG.EGY.PRIM.PP.KD, Sources: Estimated based on UN Energy Statistics (2014); World Development Indicators, WDI (2014)
ABW, EG.ELC.RNEW.ZS, Sources: UN Energy Statistics (2014)
ABW, EG.FEC.RNEW.ZS, Sources: UN Energy Statistics (2014)

CREATE TABLE `Footnotes` (
  Countrycode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Year TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `Footnotes`:
ABW, AG.LND.FRST.K2, YR1990, Not specified
ABW, AG.LND.FRST.K2, YR2000, Not specified
ABW, AG.LND.FRST.K2, YR2005, Not specified

CREATE TABLE `Indicators` (
  CountryName TEXT,
  CountryCode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  IndicatorName TEXT,
  IndicatorCode TEXT PRIMARY KEY,
  Year INTEGER PRIMARY KEY,
  Value INTEGER
);
Sample rows from `Indicators`:
Arab World, ARB, Adolescent fertility rate (births per 1,000 women ages 15-19), SP.ADO.TFRT, 1960, 133
Arab World, ARB, Age dependency ratio (% of working-age population), SP.POP.DPND, 1960, 87
Arab World, ARB, Age dependency ratio, old (% of working-age population), SP.POP.DPND.OL, 1960, 6

CREATE TABLE `SeriesNotes` (
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Year TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `SeriesNotes`:
SP.ADO.TFRT, YR1960, Interpolated using data for 1957 and 1962.
SP.DYN.AMRT.FE, YR1960, Interpolated using data for 1957 and 1962, if the data source is United Nations World Population Prospects.
SP.DYN.AMRT.MA, YR1960, Interpolated using data for 1957 and 1962, if the data source is United Nations World Population Prospects.

","country, indicators","country.longname, country.countryCode, indicators.countryCode, indicators.indicatorname, indicators.year, indicators.value"
shipping,How many shipments did Holger Nohr transport to North Las Vegas overall?,SELECT COUNT(*) FROM driver as t1 inner JOIN shipment as t2 ON t1.driver_id = t2.driver_id inner JOIN city as t3 ON t3.city_id = t2.city_id WHERE t1.first_name = 'Holger' AND t1.last_name = 'Nohr' AND t3.city_name = 'North Las Vegas',"CREATE TABLE `driver` (
  driver_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip_code INTEGER,
  phone TEXT
);
Sample rows from `driver`:
20, Sue, Newell, 268 Richmond Ave, Memphis, TN, 38106, (901) 774-6569
21, Andrea, Simons, 3574 Oak Limb Cv, Memphis, TN, 38135, (901) 384-0984
22, Roger, McHaney, 1839 S Orleans St, Memphis, TN, 38106, (901) 948-1043

CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

CREATE TABLE `city` (
  city_id INTEGER,
  city_name TEXT,
  state TEXT,
  population INTEGER,
  area REAL
);
Sample rows from `city`:
100, Union City, New Jersey, 67088, 1.3
101, Huntington Park, California, 61348, 3.0
102, Passaic, New Jersey, 67861, 3.1

","CREATE TABLE `city` (
  city_id INTEGER,
  city_name TEXT,
  state TEXT,
  population INTEGER,
  area REAL
);
Sample rows from `city`:
100, Union City, New Jersey, 67088, 1.3
101, Huntington Park, California, 61348, 3.0
102, Passaic, New Jersey, 67861, 3.1

CREATE TABLE `customer` (
  cust_id INTEGER,
  cust_name TEXT,
  annual_revenue INTEGER,
  cust_type TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip REAL,
  phone TEXT
);
Sample rows from `customer`:
193, Advanced Fabricators, 39588651, manufacturer, 5141 Summit Boulevard, West Palm Beach, FL, 33415.0, (561) 683-3535
304, Pard's Trailer Sales, 17158109, wholesaler, 5910 South 300 West, Salt Lake City, UT, 84107.0, (801) 262-4864
314, Saar Enterprises, Inc., 47403613, retailer, 11687 192nd Street, Council Bluffs, IA, 51503.0, (712) 366-4929

CREATE TABLE `driver` (
  driver_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip_code INTEGER,
  phone TEXT
);
Sample rows from `driver`:
20, Sue, Newell, 268 Richmond Ave, Memphis, TN, 38106, (901) 774-6569
21, Andrea, Simons, 3574 Oak Limb Cv, Memphis, TN, 38135, (901) 384-0984
22, Roger, McHaney, 1839 S Orleans St, Memphis, TN, 38106, (901) 948-1043

CREATE TABLE `truck` (
  truck_id INTEGER,
  make TEXT,
  model_year INTEGER
);
Sample rows from `truck`:
1, Peterbilt, 2005
2, Mack, 2006
3, Peterbilt, 2007

CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

","driver, shipment, city","driver.driver_id, shipment.driver_id, city.city_id, shipment.city_id, driver.first_name, driver.last_name, city.city_name"
student_loan,Please provide a disability breakdown for each school.,SELECT COUNT(t1.name) FROM enrolled as t1 inner JOIN disabled as t2 ON t2.name = t1.name GROUP BY t1.school,"CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

","enrolled, disabled","enrolled.name, disabled.name, enrolled.school"
authors,"Show the keywords of the paper that was presented at ""International Radar Symposium"" in 2012.",SELECT t1.keyword FROM paper as t1 inner JOIN conference as t2 ON t1.conferenceid = t2.id WHERE t2.fullname = 'International Radar Symposium' AND t1.year = 2012,"CREATE TABLE `paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

","CREATE TABLE `Author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `Author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

CREATE TABLE `Conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

CREATE TABLE `Journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `Paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `Paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `PaperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `PaperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

","paper, conference","paper.keyword, paper.conferenceid, conference.id, conference.fullname, paper.year"
cars,How many cars in the database are originated from Europe?,SELECT COUNT(*) FROM production as t1 inner JOIN country as t2 ON t1.country = t2.origin WHERE t2.country = 'Europe',"CREATE TABLE `production` (
  ID INTEGER PRIMARY KEY REFERENCES price(ID) REFERENCES data(ID),
  model_year INTEGER PRIMARY KEY,
  country INTEGER REFERENCES country(origin)
);
Sample rows from `production`:
1, 1970, 1
1, 1971, 1
2, 1970, 1

CREATE TABLE `country` (
  origin INTEGER,
  country TEXT
);
Sample rows from `country`:
1, USA
2, Europe
3, Japan

","CREATE TABLE `country` (
  origin INTEGER,
  country TEXT
);
Sample rows from `country`:
1, USA
2, Europe
3, Japan

CREATE TABLE `price` (
  ID INTEGER,
  price REAL
);
Sample rows from `price`:
1, 25561.59078
2, 24221.42273
3, 27240.84373

CREATE TABLE `data` (
  ID INTEGER REFERENCES price(ID),
  mpg REAL,
  cylinders INTEGER,
  displacement REAL,
  horsepower INTEGER,
  weight INTEGER,
  acceleration REAL,
  model INTEGER,
  car_name TEXT
);
Sample rows from `data`:
1, 18.0, 8, 307.0, 130, 3504, 12.0, 70, chevrolet chevelle malibu
2, 15.0, 8, 350.0, 165, 3693, 11.5, 70, buick skylark 320
3, 18.0, 8, 318.0, 150, 3436, 11.0, 70, plymouth satellite

CREATE TABLE `production` (
  ID INTEGER PRIMARY KEY REFERENCES price(ID) REFERENCES data(ID),
  model_year INTEGER PRIMARY KEY,
  country INTEGER REFERENCES country(origin)
);
Sample rows from `production`:
1, 1970, 1
1, 1971, 1
2, 1970, 1

","production, country","production.country, country.origin, country.country"
authors,How many papers whose authors include Thomas Wiegand were published in 1995?,SELECT COUNT(t2.title) FROM paperauthor as t1 inner JOIN paper as t2 ON t1.paperid = t2.id WHERE t1.name = 'Thomas Wiegand' AND t2.year = 1995,"CREATE TABLE `paperauthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `paperauthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

CREATE TABLE `paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

","CREATE TABLE `Author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `Author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

CREATE TABLE `Conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

CREATE TABLE `Journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `Paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `Paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `PaperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `PaperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

","paperauthor, paper","paper.title, paperauthor.paperid, paper.id, paperauthor.name, paper.year"
food_inspection_2,"Among the employees that receive a salary between $75000 to $85000, what is the difference between the number of employees which undergone an inspection that fined 100 and 500?",SELECT SUM(case when t3.fine = 100 then 1 else 0 end) - SUM(case when t3.fine = 500 then 1 else 0 end) FROM employee as t1 inner JOIN inspection as t2 ON t1.employee_id = t2.employee_id inner JOIN violation as t3 ON t2.inspection_id = t3.inspection_id WHERE t1.salary BETWEEN 75000 AND 80000,"CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

","employee, inspection, violation","violation.fine, employee.employee_id, inspection.employee_id, inspection.inspection_id, violation.inspection_id, employee.salary"
law_episode,In what year did the episodes titled DWB get an award?,SELECT DISTINCT t1.year FROM award as t1 inner JOIN episode as t2 ON t1.episode_id = t2.episode_id WHERE t2.title = 'DWB' AND t1.result = 'Winner',"CREATE TABLE `award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  series TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  person_id TEXT REFERENCES Person(person_id),
  role TEXT,
  result TEXT
);
Sample rows from `award`:
258, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0937725, None, Winner
259, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0792309, None, Winner
260, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0049569, None, Winner

CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
tt0629239, nun
tt0629239, priest
tt0629420, police officer

CREATE TABLE `Person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  series TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  person_id TEXT REFERENCES Person(person_id),
  role TEXT,
  result TEXT
);
Sample rows from `Award`:
258, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0937725, None, Winner
259, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0792309, None, Winner
260, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0049569, None, Winner

CREATE TABLE `Credit` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  person_id TEXT PRIMARY KEY REFERENCES Person(person_id),
  category TEXT,
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
tt0629204, nm0226352, Additional Crew, technical advisor, true
tt0629204, nm0506974, Additional Crew, production accountant, true
tt0629204, nm4103116, Additional Crew, production accountant, true

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
tt0629204, 10, 36, 17.7
tt0629204, 9, 39, 19.2
tt0629204, 8, 64, 31.5

","award, episode","award.year, award.episode_id, episode.episode_id, episode.title, award.result"
food_inspection_2,"Out of all the short form complaint inspections done by David Hodges, how many businesses passed?",SELECT COUNT(DISTINCT t2.license_no) FROM employee as t1 inner JOIN inspection as t2 ON t1.employee_id = t2.employee_id WHERE t1.first_name = 'David' AND t1.last_name = 'Hodges' AND t1.employee_id = 153225 AND t2.inspection_type = 'Short Form Complaint' AND t2.results = 'Pass',"CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

","employee, inspection","inspection.license_no, employee.employee_id, inspection.employee_id, employee.first_name, employee.last_name, inspection.inspection_type, inspection.results"
shipping,How many customers who live in California that are retailers?,SELECT COUNT(*) FROM customer WHERE cust_type = 'retailer' AND state = 'CA',"CREATE TABLE `customer` (
  cust_id INTEGER,
  cust_name TEXT,
  annual_revenue INTEGER,
  cust_type TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip REAL,
  phone TEXT
);
Sample rows from `customer`:
193, Advanced Fabricators, 39588651, manufacturer, 5141 Summit Boulevard, West Palm Beach, FL, 33415.0, (561) 683-3535
304, Pard's Trailer Sales, 17158109, wholesaler, 5910 South 300 West, Salt Lake City, UT, 84107.0, (801) 262-4864
314, Saar Enterprises, Inc., 47403613, retailer, 11687 192nd Street, Council Bluffs, IA, 51503.0, (712) 366-4929

","CREATE TABLE `city` (
  city_id INTEGER,
  city_name TEXT,
  state TEXT,
  population INTEGER,
  area REAL
);
Sample rows from `city`:
100, Union City, New Jersey, 67088, 1.3
101, Huntington Park, California, 61348, 3.0
102, Passaic, New Jersey, 67861, 3.1

CREATE TABLE `customer` (
  cust_id INTEGER,
  cust_name TEXT,
  annual_revenue INTEGER,
  cust_type TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip REAL,
  phone TEXT
);
Sample rows from `customer`:
193, Advanced Fabricators, 39588651, manufacturer, 5141 Summit Boulevard, West Palm Beach, FL, 33415.0, (561) 683-3535
304, Pard's Trailer Sales, 17158109, wholesaler, 5910 South 300 West, Salt Lake City, UT, 84107.0, (801) 262-4864
314, Saar Enterprises, Inc., 47403613, retailer, 11687 192nd Street, Council Bluffs, IA, 51503.0, (712) 366-4929

CREATE TABLE `driver` (
  driver_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip_code INTEGER,
  phone TEXT
);
Sample rows from `driver`:
20, Sue, Newell, 268 Richmond Ave, Memphis, TN, 38106, (901) 774-6569
21, Andrea, Simons, 3574 Oak Limb Cv, Memphis, TN, 38135, (901) 384-0984
22, Roger, McHaney, 1839 S Orleans St, Memphis, TN, 38106, (901) 948-1043

CREATE TABLE `truck` (
  truck_id INTEGER,
  make TEXT,
  model_year INTEGER
);
Sample rows from `truck`:
1, Peterbilt, 2005
2, Mack, 2006
3, Peterbilt, 2007

CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

",customer,"cust_type, state"
donor,"What are the coordinates of the school with the project ""Wiping Away Bad Grades""?","SELECT t1.school_longitude, t1.school_latitude FROM projects as t1 inner JOIN essays as t2 ON t1.projectid = t2.projectid WHERE t2.title LIKE 'Wiping Away Bad Grades'","CREATE TABLE `projects` (
  projectid TEXT PRIMARY KEY,
  teacher_acctid TEXT,
  schoolid TEXT,
  school_ncesid TEXT,
  school_latitude REAL,
  school_longitude REAL,
  school_city TEXT,
  school_state TEXT,
  school_zip INTEGER,
  school_metro TEXT,
  school_district TEXT,
  school_county TEXT,
  school_charter TEXT,
  school_magnet TEXT,
  school_year_round TEXT,
  school_nlns TEXT,
  school_kipp TEXT,
  school_charter_ready_promise TEXT,
  teacher_prefix TEXT,
  teacher_teach_for_america TEXT,
  teacher_ny_teaching_fellow TEXT,
  primary_focus_subject TEXT,
  primary_focus_area TEXT,
  secondary_focus_subject TEXT,
  secondary_focus_area TEXT,
  resource_type TEXT,
  poverty_level TEXT,
  grade_level TEXT,
  fulfillment_labor_materials REAL,
  total_price_excluding_optional_support REAL,
  total_price_including_optional_support REAL,
  students_reached INTEGER,
  eligible_double_your_impact_match TEXT,
  eligible_almost_home_match TEXT,
  date_posted DATE
);
Sample rows from `projects`:
316ed8fb3b81402ff6ac8f721bb31192, 42d43fa6f37314365d08692e08680973, c0e6ce89b244764085691a1b8e28cb81, 063627006187, 36.57634, -119.608713, Selma, CA, 93662, None, Selma Unified Sch District, Fresno, f, f, f, f, f, f, Mrs., f, f, Literature & Writing, Literacy & Language, College & Career Prep, Applied Learning, Books, highest poverty, Grades 6-8, 30.0, 555.81, 653.89, 32, f, f, 2014-05-12
90de744e368a7e4883223ca49318ae30, 864eb466462bf704bf7a16a585ef296a, d711e47810900c96f26a5d0be30c446d, 483702008193, 32.911179, -96.72364, Dallas, TX, 75243, urban, Richardson Ind School District, Dallas, f, f, f, f, f, f, Mrs., f, f, Literacy, Literacy & Language, ESL, Literacy & Language, Books, highest poverty, Grades PreK-2, 30.0, 296.47, 348.79, 22, f, f, 2014-05-12
32943bb1063267de6ed19fc0ceb4b9a7, 37f85135259ece793213aca9d8765542, 665c3613013ba0a66e3a2a26b89f1b68, 410327000109, 45.166039, -122.414576, Colton, OR, 97017, rural, Colton School District 53, Clackamas, f, f, f, f, f, f, Mr., f, f, Literacy, Literacy & Language, Mathematics, Math & Science, Technology, high poverty, Grades PreK-2, 30.0, 430.89, 506.93, 17, f, f, 2014-05-11

CREATE TABLE `essays` (
  projectid TEXT,
  teacher_acctid TEXT,
  title TEXT,
  short_description TEXT,
  need_statement TEXT,
  essay TEXT
);
Sample rows from `essays`:
ffffc4f85b60efc5b52347df489d0238, c24011b20fc161ed02248e85beb59a90, iMath, It is imperative that teachers bring technology into the classroom, if students are going to be able to survive in the 21st Century. The classroom needs to be ever changing along with the outside world. The iMath project will help students by obtaining cl, My students need four iPods., I am a fourth year fifth grade math teacher. The school I teach in is a fifth and sixth grade public school and is a Title One school which means that 95% of our students get free lunch. Presently, I am in the process of completing a Masters degree in Tec
ffffac55ee02a49d1abc87ba6fc61135, 947066d0af47e0566f334566553dd6a6, Recording Rockin' Readers, Can you imagine having to translate everything you read into sign language and relate it to what you already know? Help us do just that by giving us the camera that will record our stories and..., My students need a camcorder. , Can you imagine having to translate everything you read into sign language and relate it to what you already know? Help us do just that by giving us the camera that will record our stories and interpretations! 
\n
\nMy students are all deaf or hard of hea
ffff97ed93720407d70a2787475932b0, 462270f5d5c212162fcab11afa2623cb, Kindergarten In Need of Important Materials!, It takes a special person to donate to a group of children they don't know, especially in these hard economic times, but my students are worth it.  They deserve to have the proper supplies to ensure that their long education gets off to the right start, s, My students need 17 assorted classroom materials to ensure that they can learn as much as possible this year., Hi. I teach a wonderful group of 4-5 year old Kindergarten students.  They come in wanting and willing to learn new and exciting things each and every day. I work hard to ensure that my students get the most out of the entire school year. 
\n
\nFor the mo

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `essays` (
  projectid TEXT,
  teacher_acctid TEXT,
  title TEXT,
  short_description TEXT,
  need_statement TEXT,
  essay TEXT
);
Sample rows from `essays`:
ffffc4f85b60efc5b52347df489d0238, c24011b20fc161ed02248e85beb59a90, iMath, It is imperative that teachers bring technology into the classroom, if students are going to be able to survive in the 21st Century. The classroom needs to be ever changing along with the outside world. The iMath project will help students by obtaining cl, My students need four iPods., I am a fourth year fifth grade math teacher. The school I teach in is a fifth and sixth grade public school and is a Title One school which means that 95% of our students get free lunch. Presently, I am in the process of completing a Masters degree in Tec
ffffac55ee02a49d1abc87ba6fc61135, 947066d0af47e0566f334566553dd6a6, Recording Rockin' Readers, Can you imagine having to translate everything you read into sign language and relate it to what you already know? Help us do just that by giving us the camera that will record our stories and..., My students need a camcorder. , Can you imagine having to translate everything you read into sign language and relate it to what you already know? Help us do just that by giving us the camera that will record our stories and interpretations! 
\n
\nMy students are all deaf or hard of hea
ffff97ed93720407d70a2787475932b0, 462270f5d5c212162fcab11afa2623cb, Kindergarten In Need of Important Materials!, It takes a special person to donate to a group of children they don't know, especially in these hard economic times, but my students are worth it.  They deserve to have the proper supplies to ensure that their long education gets off to the right start, s, My students need 17 assorted classroom materials to ensure that they can learn as much as possible this year., Hi. I teach a wonderful group of 4-5 year old Kindergarten students.  They come in wanting and willing to learn new and exciting things each and every day. I work hard to ensure that my students get the most out of the entire school year. 
\n
\nFor the mo

CREATE TABLE `projects` (
  projectid TEXT PRIMARY KEY,
  teacher_acctid TEXT,
  schoolid TEXT,
  school_ncesid TEXT,
  school_latitude REAL,
  school_longitude REAL,
  school_city TEXT,
  school_state TEXT,
  school_zip INTEGER,
  school_metro TEXT,
  school_district TEXT,
  school_county TEXT,
  school_charter TEXT,
  school_magnet TEXT,
  school_year_round TEXT,
  school_nlns TEXT,
  school_kipp TEXT,
  school_charter_ready_promise TEXT,
  teacher_prefix TEXT,
  teacher_teach_for_america TEXT,
  teacher_ny_teaching_fellow TEXT,
  primary_focus_subject TEXT,
  primary_focus_area TEXT,
  secondary_focus_subject TEXT,
  secondary_focus_area TEXT,
  resource_type TEXT,
  poverty_level TEXT,
  grade_level TEXT,
  fulfillment_labor_materials REAL,
  total_price_excluding_optional_support REAL,
  total_price_including_optional_support REAL,
  students_reached INTEGER,
  eligible_double_your_impact_match TEXT,
  eligible_almost_home_match TEXT,
  date_posted DATE
);
Sample rows from `projects`:
316ed8fb3b81402ff6ac8f721bb31192, 42d43fa6f37314365d08692e08680973, c0e6ce89b244764085691a1b8e28cb81, 063627006187, 36.57634, -119.608713, Selma, CA, 93662, None, Selma Unified Sch District, Fresno, f, f, f, f, f, f, Mrs., f, f, Literature & Writing, Literacy & Language, College & Career Prep, Applied Learning, Books, highest poverty, Grades 6-8, 30.0, 555.81, 653.89, 32, f, f, 2014-05-12
90de744e368a7e4883223ca49318ae30, 864eb466462bf704bf7a16a585ef296a, d711e47810900c96f26a5d0be30c446d, 483702008193, 32.911179, -96.72364, Dallas, TX, 75243, urban, Richardson Ind School District, Dallas, f, f, f, f, f, f, Mrs., f, f, Literacy, Literacy & Language, ESL, Literacy & Language, Books, highest poverty, Grades PreK-2, 30.0, 296.47, 348.79, 22, f, f, 2014-05-12
32943bb1063267de6ed19fc0ceb4b9a7, 37f85135259ece793213aca9d8765542, 665c3613013ba0a66e3a2a26b89f1b68, 410327000109, 45.166039, -122.414576, Colton, OR, 97017, rural, Colton School District 53, Clackamas, f, f, f, f, f, f, Mr., f, f, Literacy, Literacy & Language, Mathematics, Math & Science, Technology, high poverty, Grades PreK-2, 30.0, 430.89, 506.93, 17, f, f, 2014-05-11

CREATE TABLE `donations` (
  donationid TEXT PRIMARY KEY,
  projectid TEXT REFERENCES projects(projectid),
  donor_acctid TEXT,
  donor_city TEXT,
  donor_state TEXT,
  donor_zip TEXT,
  is_teacher_acct TEXT,
  donation_timestamp DATETIME,
  donation_to_project REAL,
  donation_optional_support REAL,
  donation_total REAL,
  dollar_amount TEXT,
  donation_included_optional_support TEXT,
  payment_method TEXT,
  payment_included_acct_credit TEXT,
  payment_included_campaign_gift_card TEXT,
  payment_included_web_purchased_gift_card TEXT,
  payment_was_promo_matched TEXT,
  via_giving_page TEXT,
  for_honoree TEXT,
  donation_message TEXT
);
Sample rows from `donations`:
431d720bc3dfd75ae445a5eaa0b0638d, ffffac55ee02a49d1abc87ba6fc61135, 22cbc920c9b5fa08dfb331422f5926b5, Peachtree City, GA, 30269, f, 2011-08-25 14:27:34.807, 42.5, 7.5, 50.0, 10_to_100, t, no_cash_received, f, t, f, f, f, f, I gave to this project because I support the efforts of this teacher with each of her students, and her school, Suder Elementary School.
fcfedba1c8a0ba77d280cace80a909f6, ffffac55ee02a49d1abc87ba6fc61135, 521f1830a77c9dbbf8119d99c6206a16, None, GA, None, f, 2011-11-04 07:54:21.552, 26.83, 4.73, 31.56, 10_to_100, t, creditcard, f, t, f, f, f, f, I donated because I want to support kids in Georgia.
3fa95d29986aa6f401c6719ced3a3ce7, ffffac55ee02a49d1abc87ba6fc61135, 1e0a63fc8141c7ba26b8b44ca0871b90, Rockville, MD, 20853, f, 2011-11-02 22:53:53.019, 55.35, 0.0, 55.35, 10_to_100, f, no_cash_received, t, f, f, f, t, f, The Spark's 'pet' projects include those which support deaf students.  With just a few days left, the Spark's donors fund half of what remains, and challenge others to pull this project through to fruition.

CREATE TABLE `resources` (
  resourceid TEXT PRIMARY KEY,
  projectid TEXT REFERENCES projects(projectid),
  vendorid INTEGER,
  vendor_name TEXT,
  project_resource_type TEXT,
  item_name TEXT,
  item_number TEXT,
  item_unit_price REAL,
  item_quantity INTEGER
);
Sample rows from `resources`:
8a1c1c45bc30d065061912fd9114fcf3, ffffc4f85b60efc5b52347df489d0238, 430, Woodwind and Brasswind, Technology, iPod nano 4th Gen 8GB (Black), 249995.001, 149.0, 4
015d2c4935c50427964a12dc3f584091, ffffac55ee02a49d1abc87ba6fc61135, 82, Best Buy for Business, Technology, Sony bloggie MHS-FS1 - camcorder - internal flash memory, BB11216668, 148.0, 1
26a02944b2f0c25f9abdeacca3ede3ee, ffff97ed93720407d70a2787475932b0, 767, Lakeshore Learning Materials, Supplies, VX748 - Best-Buy Jumbo Crayons - 12-Color Box, VX748, 69.95, 1

","projects, essays","projects.school_longitude, projects.school_latitude, projects.projectid, essays.projectid, essays.title"
simpson_episodes,Who is the oldest among all the casts and crews?,SELECT name FROM person ORDER BY birthdate ASC LIMIT 1;,"CREATE TABLE `person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

",person,"name, birthdate"
soccer_2016,"Tally the player IDs of ""Man of the Series"" awardees for the seasons from 2011 to 2015.",SELECT man_of_the_series FROM season WHERE 2011 < season_Year < 2015,"CREATE TABLE `season` (
  Season_Id INTEGER,
  Man_of_the_Series INTEGER,
  Orange_Cap INTEGER,
  Purple_Cap INTEGER,
  Season_Year INTEGER
);
Sample rows from `season`:
1, 32, 100, 102, 2008
2, 53, 18, 61, 2009
3, 133, 133, 131, 2010

","CREATE TABLE `Batting_Style` (
  Batting_Id INTEGER,
  Batting_hand TEXT
);
Sample rows from `Batting_Style`:
1, Left-hand bat
2, Right-hand bat

CREATE TABLE `Bowling_Style` (
  Bowling_Id INTEGER,
  Bowling_skill TEXT
);
Sample rows from `Bowling_Style`:
1, Right-arm medium
2, Right-arm offbreak
3, Right-arm fast-medium

CREATE TABLE `City` (
  City_Id INTEGER,
  City_Name TEXT,
  Country_id INTEGER
);
Sample rows from `City`:
1, Bangalore, 1
2, Chandigarh, 1
3, Delhi, 1

CREATE TABLE `Country` (
  Country_Id INTEGER REFERENCES Country(Country_Id),
  Country_Name TEXT
);
Sample rows from `Country`:
1, India
2, South Africa
3, U.A.E

CREATE TABLE `Extra_Type` (
  Extra_Id INTEGER,
  Extra_Name TEXT
);
Sample rows from `Extra_Type`:
1, legbyes
2, wides
3, byes

CREATE TABLE `Extra_Runs` (
  Match_Id INTEGER PRIMARY KEY,
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Extra_Type_Id INTEGER REFERENCES Extra_Type(Extra_Id),
  Extra_Runs INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Extra_Runs`:
335987, 1, 1, 1, 1, 1
335987, 1, 2, 2, 1, 2
335987, 1, 3, 2, 1, 1

CREATE TABLE `Out_Type` (
  Out_Id INTEGER,
  Out_Name TEXT
);
Sample rows from `Out_Type`:
1, caught
2, bowled
3, run out

CREATE TABLE `Outcome` (
  Outcome_Id INTEGER,
  Outcome_Type TEXT
);
Sample rows from `Outcome`:
1, Result
2, No Result
3, Superover

CREATE TABLE `Player` (
  Player_Id INTEGER,
  Player_Name TEXT,
  DOB DATE,
  Batting_hand INTEGER REFERENCES Batting_Style(Batting_Id),
  Bowling_skill INTEGER REFERENCES Bowling_Style(Bowling_Id),
  Country_Name INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Player`:
1, SC Ganguly, 1972-07-08, 1, 1, 1
2, BB McCullum, 1981-09-27, 2, 1, 4
3, RT Ponting, 1974-12-19, 2, 1, 5

CREATE TABLE `Rolee` (
  Role_Id INTEGER,
  Role_Desc TEXT
);
Sample rows from `Rolee`:
1, Captain
2, Keeper
3, Player

CREATE TABLE `Season` (
  Season_Id INTEGER,
  Man_of_the_Series INTEGER,
  Orange_Cap INTEGER,
  Purple_Cap INTEGER,
  Season_Year INTEGER
);
Sample rows from `Season`:
1, 32, 100, 102, 2008
2, 53, 18, 61, 2009
3, 133, 133, 131, 2010

CREATE TABLE `Team` (
  Team_Id INTEGER,
  Team_Name TEXT
);
Sample rows from `Team`:
1, Kolkata Knight Riders
2, Royal Challengers Bangalore
3, Chennai Super Kings

CREATE TABLE `Toss_Decision` (
  Toss_Id INTEGER,
  Toss_Name TEXT
);
Sample rows from `Toss_Decision`:
1, field
2, bat

CREATE TABLE `Umpire` (
  Umpire_Id INTEGER,
  Umpire_Name TEXT,
  Umpire_Country INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Umpire`:
1, Asad Rauf, 6
2, MR Benson, 10
3, Aleem Dar, 6

CREATE TABLE `Venue` (
  Venue_Id INTEGER,
  Venue_Name TEXT,
  City_Id INTEGER REFERENCES City(City_Id)
);
Sample rows from `Venue`:
1, M Chinnaswamy Stadium, 1
2, Punjab Cricket Association Stadium, 2
3, Feroz Shah Kotla, 3

CREATE TABLE `Win_By` (
  Win_Id INTEGER,
  Win_Type TEXT
);
Sample rows from `Win_By`:
1, runs
2, wickets
3, NO Result

CREATE TABLE `Match` (
  Match_Id INTEGER,
  Team_1 INTEGER REFERENCES Team(Team_Id),
  Team_2 INTEGER REFERENCES Team(Team_Id),
  Match_Date DATE,
  Season_Id INTEGER REFERENCES Season(Season_Id),
  Venue_Id INTEGER REFERENCES Venue(Venue_Id),
  Toss_Winner INTEGER REFERENCES Team(Team_Id),
  Toss_Decide INTEGER REFERENCES Toss_Decision(Toss_Id),
  Win_Type INTEGER REFERENCES Win_By(Win_Id),
  Win_Margin INTEGER,
  Outcome_type INTEGER REFERENCES Out_Type(Out_Id),
  Match_Winner INTEGER REFERENCES Team(Team_Id),
  Man_of_the_Match INTEGER REFERENCES Player(Player_Id)
);
Sample rows from `Match`:
335987, 2, 1, 2008-04-18, 1, 1, 2, 1, 1, 140, 1, 1, 2
335988, 4, 3, 2008-04-19, 1, 2, 3, 2, 1, 33, 1, 3, 19
335989, 6, 5, 2008-04-19, 1, 3, 5, 2, 2, 9, 1, 6, 90

CREATE TABLE `Ball_by_Ball` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Innings_No INTEGER PRIMARY KEY,
  Team_Batting INTEGER,
  Team_Bowling INTEGER,
  Striker_Batting_Position INTEGER,
  Striker INTEGER,
  Non_Striker INTEGER,
  Bowler INTEGER
);
Sample rows from `Ball_by_Ball`:
335987, 1, 1, 1, 1, 2, 1, 1, 2, 14
335987, 1, 1, 2, 2, 1, 1, 6, 7, 106
335987, 1, 2, 1, 1, 2, 2, 2, 1, 14

CREATE TABLE `Batsman_Scored` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Runs_Scored INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Batsman_Scored`:
335987, 1, 1, 0, 1
335987, 1, 1, 1, 2
335987, 1, 2, 0, 1

CREATE TABLE `Player_Match` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Player_Id INTEGER PRIMARY KEY REFERENCES Player(Player_Id),
  Role_Id INTEGER PRIMARY KEY REFERENCES Rolee(Role_Id),
  Team_Id INTEGER REFERENCES Team(Team_Id)
);
Sample rows from `Player_Match`:
335987, 1, 1, 1
335987, 2, 3, 1
335987, 3, 3, 1

CREATE TABLE `Wicket_Taken` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Player_Out INTEGER REFERENCES Player(Player_Id),
  Kind_Out INTEGER REFERENCES Out_Type(Out_Id),
  Fielders INTEGER REFERENCES Player(Player_Id),
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Wicket_Taken`:
335987, 2, 1, 6, 2, None, 2
335987, 3, 2, 8, 2, None, 2
335987, 5, 5, 9, 1, 83, 2

",season,"man_of_the_series, season_Year"
public_review_platform,Indicate the opening hours of businesses are with category in fashion.,SELECT t4.opening_time FROM categories as t1 inner JOIN business_categories as t2 ON t1.category_id = t2.category_id inner JOIN business as t3 ON t2.business_id = t3.business_id inner JOIN business_Hours as t4 ON t3.business_id = t4.business_id WHERE t1.category_name LIKE 'Fashion',"CREATE TABLE `categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `business_categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `business_categories`:
1, 8
1, 143
2, 18

CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","categories, business_categories, business, business_Hours","business_Hours.opening_time, categories.category_id, business_categories.category_id, business_categories.business_id, business.business_id, business_Hours.business_id, categories.category_name"
social_media,Please list the texts of all the tweets posted from Buenos Aires with a positive sentiment.,SELECT t1.text FROM twitter as t1 inner JOIN location as t2 ON t2.locationid = t1.locationid WHERE t1.sentiment > 0 AND t2.city = 'Buenos Aires',"CREATE TABLE `twitter` (
  TweetID TEXT PRIMARY KEY,
  Weekday TEXT,
  Hour INTEGER,
  Day INTEGER,
  Lang TEXT,
  IsReshare TEXT,
  Reach INTEGER,
  RetweetCount INTEGER,
  Likes INTEGER,
  Klout INTEGER,
  Sentiment REAL,
  text TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  UserID TEXT REFERENCES user(UserID)
);
Sample rows from `twitter`:
tw-682712873332805633, Thursday, 17, 31, en, FALSE, 44, 0, 0, 35, 0.0, We are hiring: Senior Software Engineer - Proto http://www.reqcloud.com/jobs/719865/?k=0LaPxXuFwczs1e32ZURJKrgCIDMQtRO7BquFSQthUKY&utm_source=twitter&utm_campaign=reqCloud_JobPost #job @awscloud #job #protocol #networking #aws #mediastreaming, 3751, tw-40932430
tw-682713045357998080, Thursday, 17, 31, en, TRUE, 1810, 5, 0, 53, 2.0, RT @CodeMineStatus: This is true Amazon Web Services https://aws.amazon.com/ #php #html #html5 #css #webdesign #seo #java #javascript htt, 3989, tw-3179389829
tw-682713219375476736, Thursday, 17, 31, en, FALSE, 282, 0, 0, 47, 0.0, Devops Engineer Aws Ansible Cassandra Mysql Ubuntu Ruby On Rails Jobs in Austin TX #Austin #TX #jobs #jobsearch https://www.jobfindly.com/devops-engineer-aws-ansible-cassandra-mysql-ubuntu-ruby-on-rails-jobs-austin-tx.html, 3741, tw-4624808414

CREATE TABLE `location` (
  LocationID INTEGER,
  Country TEXT,
  State TEXT,
  StateCode TEXT,
  City TEXT
);
Sample rows from `location`:
1, Albania, Elbasan, AL, Elbasan
2, Albania, Tirane, AL, Tirana
3, Algeria, Souk Ahras, DZ, Souk Ahras

","CREATE TABLE `location` (
  LocationID INTEGER,
  Country TEXT,
  State TEXT,
  StateCode TEXT,
  City TEXT
);
Sample rows from `location`:
1, Albania, Elbasan, AL, Elbasan
2, Albania, Tirane, AL, Tirana
3, Algeria, Souk Ahras, DZ, Souk Ahras

CREATE TABLE `user` (
  UserID TEXT PRIMARY KEY,
  Gender TEXT
);
Sample rows from `user`:
tw-1267804344, Unknown
tw-27229880, Male
tw-199664730, Male

CREATE TABLE `twitter` (
  TweetID TEXT PRIMARY KEY,
  Weekday TEXT,
  Hour INTEGER,
  Day INTEGER,
  Lang TEXT,
  IsReshare TEXT,
  Reach INTEGER,
  RetweetCount INTEGER,
  Likes INTEGER,
  Klout INTEGER,
  Sentiment REAL,
  text TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  UserID TEXT REFERENCES user(UserID)
);
Sample rows from `twitter`:
tw-682712873332805633, Thursday, 17, 31, en, FALSE, 44, 0, 0, 35, 0.0, We are hiring: Senior Software Engineer - Proto http://www.reqcloud.com/jobs/719865/?k=0LaPxXuFwczs1e32ZURJKrgCIDMQtRO7BquFSQthUKY&utm_source=twitter&utm_campaign=reqCloud_JobPost #job @awscloud #job #protocol #networking #aws #mediastreaming, 3751, tw-40932430
tw-682713045357998080, Thursday, 17, 31, en, TRUE, 1810, 5, 0, 53, 2.0, RT @CodeMineStatus: This is true Amazon Web Services https://aws.amazon.com/ #php #html #html5 #css #webdesign #seo #java #javascript htt, 3989, tw-3179389829
tw-682713219375476736, Thursday, 17, 31, en, FALSE, 282, 0, 0, 47, 0.0, Devops Engineer Aws Ansible Cassandra Mysql Ubuntu Ruby On Rails Jobs in Austin TX #Austin #TX #jobs #jobsearch https://www.jobfindly.com/devops-engineer-aws-ansible-cassandra-mysql-ubuntu-ruby-on-rails-jobs-austin-tx.html, 3741, tw-4624808414

","twitter, location","twitter.text, location.locationid, twitter.locationid, twitter.sentiment, location.city"
movie_platform,"Who is the director that directed the highest number of movies in the 70s? If there are multiple directors with the same amount of movies, list all of their names and indicate the highest rating score that those movies got from the users.","SELECT t2.director_name, t1.rating_score FROM ratings as t1 inner JOIN movies as t2 ON t1.movie_id = t2.movie_id WHERE t2.movie_release_year BETWEEN 1970 AND 1979 GROUP BY t2.director_id ORDER BY COUNT(t2.movie_id) DESC LIMIT 1","CREATE TABLE `ratings` (
  movie_id INTEGER REFERENCES movies(movie_id),
  rating_id INTEGER REFERENCES ratings(rating_id),
  rating_url TEXT,
  rating_score INTEGER,
  rating_timestamp_utc TEXT,
  critic TEXT,
  critic_likes INTEGER,
  critic_comments INTEGER,
  user_id INTEGER REFERENCES ratings_users(user_id) REFERENCES lists_users(user_id),
  user_trialist INTEGER,
  user_subscriber INTEGER,
  user_eligible_for_trial INTEGER,
  user_has_payment_method INTEGER
);
Sample rows from `ratings`:
1066, 15610495, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/15610495, 3, 2017-06-10 12:38:33, None, 0, 0, 41579158, 0, 0, 1, 0
1066, 10704606, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/10704606, 2, 2014-08-15 23:42:31, None, 0, 0, 85981819, 1, 1, 0, 1
1066, 10177114, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/10177114, 2, 2014-01-30 13:21:57, None, 0, 0, 4208563, 0, 0, 1, 1

CREATE TABLE `movies` (
  movie_id INTEGER,
  movie_title TEXT,
  movie_release_year INTEGER,
  movie_url TEXT,
  movie_title_language TEXT,
  movie_popularity INTEGER,
  movie_image_url TEXT,
  director_id TEXT,
  director_name TEXT,
  director_url TEXT
);
Sample rows from `movies`:
1, La Antena, 2007, http://mubi.com/films/la-antena, en, 105, https://images.mubicdn.net/images/film/1/cache-7927-1581389497/image-w1280.jpg, 131, Esteban Sapir, http://mubi.com/cast/esteban-sapir
2, Elementary Particles, 2006, http://mubi.com/films/elementary-particles, en, 23, https://images.mubicdn.net/images/film/2/cache-512179-1581389841/image-w1280.jpg, 73, Oskar Roehler, http://mubi.com/cast/oskar-roehler
3, It's Winter, 2006, http://mubi.com/films/its-winter, en, 21, https://images.mubicdn.net/images/film/3/cache-7929-1481539519/image-w1280.jpg, 82, Rafi Pitts, http://mubi.com/cast/rafi-pitts

","CREATE TABLE `lists` (
  user_id INTEGER REFERENCES lists_users(user_id),
  list_id INTEGER,
  list_title TEXT,
  list_movie_number INTEGER,
  list_update_timestamp_utc TEXT,
  list_creation_timestamp_utc TEXT,
  list_followers INTEGER,
  list_url TEXT,
  list_comments INTEGER,
  list_description TEXT,
  list_cover_image_url TEXT,
  list_first_image_url TEXT,
  list_second_image_url TEXT,
  list_third_image_url TEXT
);
Sample rows from `lists`:
88260493, 1, Films that made your kid sister cry, 5, 2019-01-24 19:16:18, 2009-11-11 00:02:21, 5, http://mubi.com/lists/films-that-made-your-kid-sister-cry, 3, <p>Don’t be such a baby!!</p>
<p><strong>bold</strong></p>, https://assets.mubicdn.net/images/film/3822/image-w1280.jpg?1445914994, https://assets.mubicdn.net/images/film/3822/image-w320.jpg?1445914994, https://assets.mubicdn.net/images/film/506/image-w320.jpg?1543838422, https://assets.mubicdn.net/images/film/485/image-w320.jpg?1575331204
45204418, 2, Headscratchers, 3, 2018-12-03 15:12:20, 2009-11-11 00:05:11, 1, http://mubi.com/lists/headscratchers, 2, <p>Films that need at least two viewings to really make sense.</p>
<p>Or at least… they did for <em>me</em>.</p>, https://assets.mubicdn.net/images/film/4343/image-w1280.jpg?1583331932, https://assets.mubicdn.net/images/film/4343/image-w320.jpg?1583331932, https://assets.mubicdn.net/images/film/159/image-w320.jpg?1548864573, https://assets.mubicdn.net/images/film/142/image-w320.jpg?1544094102
48905025, 3, Sexy Time Movies, 7, 2019-05-30 03:00:07, 2009-11-11 00:20:00, 6, http://mubi.com/lists/sexy-time-movies, 5, <p>Films that get you in the mood…for love. In development.</p>
<p>Remarks</p>
<p><strong>Enter the Void</strong><br>
If you’ve seen <a href=""http://www.theauteurs.com/films/2377"" rel=""nofollow"">Enter the Void</a> then you’ll know why that’s on this list., https://assets.mubicdn.net/images/film/3491/image-w1280.jpg?1564112978, https://assets.mubicdn.net/images/film/3491/image-w320.jpg?1564112978, https://assets.mubicdn.net/images/film/2377/image-w320.jpg?1564675204, https://assets.mubicdn.net/images/film/2874/image-w320.jpg?1546574412

CREATE TABLE `movies` (
  movie_id INTEGER,
  movie_title TEXT,
  movie_release_year INTEGER,
  movie_url TEXT,
  movie_title_language TEXT,
  movie_popularity INTEGER,
  movie_image_url TEXT,
  director_id TEXT,
  director_name TEXT,
  director_url TEXT
);
Sample rows from `movies`:
1, La Antena, 2007, http://mubi.com/films/la-antena, en, 105, https://images.mubicdn.net/images/film/1/cache-7927-1581389497/image-w1280.jpg, 131, Esteban Sapir, http://mubi.com/cast/esteban-sapir
2, Elementary Particles, 2006, http://mubi.com/films/elementary-particles, en, 23, https://images.mubicdn.net/images/film/2/cache-512179-1581389841/image-w1280.jpg, 73, Oskar Roehler, http://mubi.com/cast/oskar-roehler
3, It's Winter, 2006, http://mubi.com/films/its-winter, en, 21, https://images.mubicdn.net/images/film/3/cache-7929-1481539519/image-w1280.jpg, 82, Rafi Pitts, http://mubi.com/cast/rafi-pitts

CREATE TABLE `ratings_users` (
  user_id INTEGER REFERENCES lists_users(user_id),
  rating_date_utc TEXT,
  user_trialist INTEGER,
  user_subscriber INTEGER,
  user_avatar_image_url TEXT,
  user_cover_image_url TEXT,
  user_eligible_for_trial INTEGER,
  user_has_payment_method INTEGER
);
Sample rows from `ratings_users`:
41579158, 2017-06-10, 0, 0, https://assets.mubicdn.net/images/avatars/74283/images-w150.jpg?1523895155, None, 1, 0
68654088, 2012-10-02, 0, 0, https://assets.mubicdn.net/images/avatars/27714/images-w150.jpg?1523889463, None, 1, 1
84114365, 2010-12-25, 0, 0, https://assets.mubicdn.net/images/avatars/1808/images-w150.jpg?1523883471, None, 1, 0

CREATE TABLE `lists_users` (
  user_id INTEGER PRIMARY KEY REFERENCES lists(user_id),
  list_id INTEGER PRIMARY KEY REFERENCES lists(list_id),
  list_update_date_utc TEXT,
  list_creation_date_utc TEXT,
  user_trialist INTEGER,
  user_subscriber INTEGER,
  user_avatar_image_url TEXT,
  user_cover_image_url TEXT,
  user_eligible_for_trial TEXT,
  user_has_payment_method TEXT
);
Sample rows from `lists_users`:
85981819, 1969, 2019-11-26, 2009-12-18, 1, 1, https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214, None, 0, 1
85981819, 3946, 2020-05-01, 2010-01-30, 1, 1, https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214, None, 0, 1
85981819, 6683, 2020-04-12, 2010-03-31, 1, 1, https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214, None, 0, 1

CREATE TABLE `ratings` (
  movie_id INTEGER REFERENCES movies(movie_id),
  rating_id INTEGER REFERENCES ratings(rating_id),
  rating_url TEXT,
  rating_score INTEGER,
  rating_timestamp_utc TEXT,
  critic TEXT,
  critic_likes INTEGER,
  critic_comments INTEGER,
  user_id INTEGER REFERENCES ratings_users(user_id) REFERENCES lists_users(user_id),
  user_trialist INTEGER,
  user_subscriber INTEGER,
  user_eligible_for_trial INTEGER,
  user_has_payment_method INTEGER
);
Sample rows from `ratings`:
1066, 15610495, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/15610495, 3, 2017-06-10 12:38:33, None, 0, 0, 41579158, 0, 0, 1, 0
1066, 10704606, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/10704606, 2, 2014-08-15 23:42:31, None, 0, 0, 85981819, 1, 1, 0, 1
1066, 10177114, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/10177114, 2, 2014-01-30 13:21:57, None, 0, 0, 4208563, 0, 0, 1, 1

","ratings, movies","movies.director_name, ratings.rating_score, ratings.movie_id, movies.movie_id, movies.movie_release_year, movies.director_id"
ice_hockey_draft,Who is the most valuable player in QMJHL league during the 2004-2005 season?,SELECT t2.playername FROM seasonstatus as t1 inner JOIN playerinfo as t2 ON t1.eliteid = t2.eliteid WHERE t1.SEasON BETWEEN '2004' AND '2005' AND t1.league = 'QMJHL' ORDER BY t1.p DESC LIMIT 1,"CREATE TABLE `seasonstatus` (
  ELITEID INTEGER REFERENCES PlayerInfo(ELITEID),
  SEASON TEXT,
  TEAM TEXT,
  LEAGUE TEXT,
  GAMETYPE TEXT,
  GP INTEGER,
  G INTEGER,
  A INTEGER,
  P INTEGER,
  PIM INTEGER,
  PLUSMINUS INTEGER
);
Sample rows from `seasonstatus`:
3667, 1997-1998, Rimouski Oceanic, QMJHL, Regular Season, 58, 44, 71, 115, 117, 27
3667, 1997-1998, Rimouski Oceanic, QMJHL, Playoffs, 18, 15, 26, 41, 46, 4
3667, 1997-1998, Canada U20, WJC-20, Regular Season, 7, 1, 1, 2, 4, 0

CREATE TABLE `playerinfo` (
  ELITEID INTEGER,
  PlayerName TEXT,
  birthdate TEXT,
  birthyear DATE,
  birthmonth INTEGER,
  birthday INTEGER,
  birthplace TEXT,
  nation TEXT,
  height INTEGER REFERENCES height_info(height_id),
  weight INTEGER REFERENCES weight_info(weight_id),
  position_info TEXT,
  shoots TEXT,
  draftyear INTEGER,
  draftround INTEGER,
  overall INTEGER,
  overallby TEXT,
  CSS_rank INTEGER,
  sum_7yr_GP INTEGER,
  sum_7yr_TOI INTEGER,
  GP_greater_than_0 TEXT
);
Sample rows from `playerinfo`:
9, David Bornhammar, 1981-06-15, 1981, 6, 15, Lidingo, SWE, Sweden, 73, 198, D, L, 1999, 7, 192, Washington Capitals, 192, 0, 0, no
18, David Printz, 1980-07-24, 1980, 7, 24, Stockholm, SWE, Sweden, 76, 220, D, L, 2001, 7, 225, Philadelphia Flyers, 176, 13, 84, yes
27, Yared Hagos, 1983-03-27, 1983, 3, 27, Stockholm, SWE, Sweden, 73, 218, C, L, 2001, 3, 70, Dallas Stars, 24, 0, 0, no

","CREATE TABLE `height_info` (
  height_id INTEGER,
  height_in_cm INTEGER,
  height_in_inch TEXT
);
Sample rows from `height_info`:
65, 165, 5'5""
67, 170, 5'7""
68, 172, 5'8""

CREATE TABLE `weight_info` (
  weight_id INTEGER,
  weight_in_kg INTEGER,
  weight_in_lbs INTEGER
);
Sample rows from `weight_info`:
154, 70, 154
159, 72, 159
161, 73, 161

CREATE TABLE `PlayerInfo` (
  ELITEID INTEGER,
  PlayerName TEXT,
  birthdate TEXT,
  birthyear DATE,
  birthmonth INTEGER,
  birthday INTEGER,
  birthplace TEXT,
  nation TEXT,
  height INTEGER REFERENCES height_info(height_id),
  weight INTEGER REFERENCES weight_info(weight_id),
  position_info TEXT,
  shoots TEXT,
  draftyear INTEGER,
  draftround INTEGER,
  overall INTEGER,
  overallby TEXT,
  CSS_rank INTEGER,
  sum_7yr_GP INTEGER,
  sum_7yr_TOI INTEGER,
  GP_greater_than_0 TEXT
);
Sample rows from `PlayerInfo`:
9, David Bornhammar, 1981-06-15, 1981, 6, 15, Lidingo, SWE, Sweden, 73, 198, D, L, 1999, 7, 192, Washington Capitals, 192, 0, 0, no
18, David Printz, 1980-07-24, 1980, 7, 24, Stockholm, SWE, Sweden, 76, 220, D, L, 2001, 7, 225, Philadelphia Flyers, 176, 13, 84, yes
27, Yared Hagos, 1983-03-27, 1983, 3, 27, Stockholm, SWE, Sweden, 73, 218, C, L, 2001, 3, 70, Dallas Stars, 24, 0, 0, no

CREATE TABLE `SeasonStatus` (
  ELITEID INTEGER REFERENCES PlayerInfo(ELITEID),
  SEASON TEXT,
  TEAM TEXT,
  LEAGUE TEXT,
  GAMETYPE TEXT,
  GP INTEGER,
  G INTEGER,
  A INTEGER,
  P INTEGER,
  PIM INTEGER,
  PLUSMINUS INTEGER
);
Sample rows from `SeasonStatus`:
3667, 1997-1998, Rimouski Oceanic, QMJHL, Regular Season, 58, 44, 71, 115, 117, 27
3667, 1997-1998, Rimouski Oceanic, QMJHL, Playoffs, 18, 15, 26, 41, 46, 4
3667, 1997-1998, Canada U20, WJC-20, Regular Season, 7, 1, 1, 2, 4, 0

","seasonstatus, playerinfo","playerinfo.playername, seasonstatus.eliteid, playerinfo.eliteid, seasonstatus.SEasON, seasonstatus.league, seasonstatus.p"
beer_factory,What is the amount difference between the bottles of root beer sold from Louisiana and Missouri?,SELECT ( SELECT COUNT(t1.brandid) FROM rootbeer as t1 inner JOIN rootbeerbrand as t2 ON t1.brandid = t2.brandid WHERE t2.state = 'LA' AND t1.containertype = 'Bottle' ) - ( SELECT COUNT(t3.brandid) FROM rootbeer as t3 inner JOIN rootbeerbrand as t4 ON t3.brandid = t4.brandid WHERE t4.state = 'MO' AND t3.containertype = 'Bottle' ) as difference,"CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

","CREATE TABLE `customers` (
  CustomerID INTEGER,
  First TEXT,
  Last TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER,
  Email TEXT,
  PhoneNumber TEXT,
  FirstPurchaseDate DATE,
  SubscribedToEmailList TEXT,
  Gender TEXT
);
Sample rows from `customers`:
101811, Kenneth, Walton, 6715 Commonwealth Dr, Sacramento, CA, 94256, walton.k76@fastmail.com, (916) 918-1561, 2013-05-30, FALSE, M
103508, Madeleine, Jones, 3603 Leola Way, Sacramento, CA, 94258, j_madeleine@gmail.com, (916) 186-9423, 2013-02-06, FALSE, F
104939, Damen, Wheeler, 6740 Branwood Way, Orangevale, CA, 95662, dwheeler@outlook.com, (916) 164-1156, 2013-04-11, FALSE, M

CREATE TABLE `geolocation` (
  LocationID INTEGER REFERENCES location(LocationID),
  Latitude REAL,
  Longitude REAL
);
Sample rows from `geolocation`:
0, 0.0, 0.0
1, 38.566129, -121.426432
2, 38.559615, -121.42243

CREATE TABLE `location` (
  LocationID INTEGER REFERENCES geolocation(LocationID),
  LocationName TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER
);
Sample rows from `location`:
0, LOST, None, None, None, None
1, Sac State American River Courtyard, 6000 J St, Sacramento, CA, 95819
2, Sac State Union, 6000 J St, Sacramento, CA, 95819

CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

CREATE TABLE `rootbeerreview` (
  CustomerID INTEGER PRIMARY KEY REFERENCES customers(CustomerID),
  BrandID INTEGER PRIMARY KEY REFERENCES rootbeerbrand(BrandID),
  StarRating INTEGER,
  ReviewDate DATE,
  Review TEXT
);
Sample rows from `rootbeerreview`:
101811, 10012, 5, 2013-07-15, None
101811, 10014, 1, 2013-07-08, None
101811, 10015, 3, 2013-07-25, None

CREATE TABLE `transaction` (
  TransactionID INTEGER,
  CreditCardNumber INTEGER,
  CustomerID INTEGER REFERENCES customers(CustomerID),
  TransactionDate DATE,
  CreditCardType TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  RootBeerID INTEGER REFERENCES rootbeer(RootBeerID),
  PurchasePrice REAL
);
Sample rows from `transaction`:
100000, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105661, 3.0
100001, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105798, 3.0
100002, 6011583832864739, 864896, 2014-07-07, Discover, 2, 102514, 3.0

","rootbeer, rootbeerbrand","rootbeer.brandid, rootbeerbrand.brandid, rootbeerbrand.state, rootbeer.containertype"
public_review_platform,"What is the attribute value of an active business with a low review count and 3 stars which is located at Goodyear, AZ?",SELECT DISTINCT t2.attribute_value FROM business as t1 inner JOIN business_attributes as t2 ON t1.business_id = t2.business_id inner JOIN attributes as t3 ON t2.attribute_id = t3.attribute_id WHERE t1.state = 'AZ' AND t1.city = 'Goodyear' AND t1.active = 'true' AND t1.stars = 3 AND t1.review_count = 'Low',"CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `business_attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `business_attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","business, business_attributes, attributes","business_attributes.attribute_value, business.business_id, business_attributes.business_id, business_attributes.attribute_id, attributes.attribute_id, business.state, business.city, business.active, business.stars, business.review_count"
books,List all the books published by BBC Audiobooks.,SELECT t1.title FROM book as t1 inner JOIN publisher as t2 ON t1.publisher_id = t2.publisher_id WHERE t2.publisher_name = 'BBC Audiobooks',"CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","book, publisher","book.title, book.publisher_id, publisher.publisher_id, publisher.publisher_name"
retail_complains,What is the first name of clients who have the highest priority?,SELECT t1.first FROM client as t1 inner JOIN callcenterlogs as t2 ON t1.client_id = t2.`rand client` WHERE t2.priority = ( SELECT MAX(priority) FROM callcenterlogs ),"CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

","CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

","client, callcenterlogs","client.first, client.client_id, callcenterlogs.rand client, callcenterlogs.priority, priority"
software_company,What is the occupation and response of female customers within the number of inhabitants range of 20 to 25?,"SELECT DISTINCT t1.occupation, t2.response FROM customers as t1 inner JOIN mailings1_2 as t2 ON t1.id = t2.REFid inner JOIN demog as t3 ON t1.GEOid = t3.GEOid WHERE t1.sex = 'Female' AND t3.inhabitants_k >= 20 AND t3.inhabitants_k <= 25","CREATE TABLE `customers` (
  ID INTEGER,
  SEX TEXT,
  MARITAL_STATUS TEXT,
  GEOID INTEGER REFERENCES Demog(None),
  EDUCATIONNUM INTEGER,
  OCCUPATION TEXT,
  age INTEGER
);
Sample rows from `customers`:
0, Male, Never-married, 61, 7, Machine-op-inspct, 62
1, Male, Married-civ-spouse, 70, 3, Handlers-cleaners, 78
2, Male, Never-married, 53, 7, Machine-op-inspct, 69

CREATE TABLE `mailings1_2` (
  REFID INTEGER REFERENCES Customers(None),
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `mailings1_2`:
0, 2007-02-01 12:00:00.0, false
1, 2007-02-01 12:00:00.0, false
2, 2007-02-01 12:00:00.0, false

CREATE TABLE `demog` (
  GEOID INTEGER,
  INHABITANTS_K REAL,
  INCOME_K REAL,
  A_VAR1 REAL,
  A_VAR2 REAL,
  A_VAR3 REAL,
  A_VAR4 REAL,
  A_VAR5 REAL,
  A_VAR6 REAL,
  A_VAR7 REAL,
  A_VAR8 REAL,
  A_VAR9 REAL,
  A_VAR10 REAL,
  A_VAR11 REAL,
  A_VAR12 REAL,
  A_VAR13 REAL,
  A_VAR14 REAL,
  A_VAR15 REAL,
  A_VAR16 REAL,
  A_VAR17 REAL,
  A_VAR18 REAL
);
Sample rows from `demog`:
0, 30.046, 2631.47, 6.084, 5.79, 8.595, 3.935, 6.362, 8.626, 4.624, 8.324, 5.233, 6.232, 5.205, 8.231, 6.746, 8.679, 5.292, 3.5, 5.512, 5.783
1, 36.25, 3012.75, 4.604, 8.309, 6.007, 5.938, 8.773, 3.579, 6.349, 4.694, 6.884, 7.062, 7.319, 3.72, 6.405, 7.202, 4.932, 7.969, 8.15, 5.633
2, 47.645, 2192.41, 4.911, 8.557, 5.934, 6.494, 9.172, 3.202, 6.157, 4.822, 7.942, 7.901, 7.928, 2.33, 6.029, 6.455, 4.72, 8.564, 8.342, 4.938

","CREATE TABLE `Demog` (
  GEOID INTEGER,
  INHABITANTS_K REAL,
  INCOME_K REAL,
  A_VAR1 REAL,
  A_VAR2 REAL,
  A_VAR3 REAL,
  A_VAR4 REAL,
  A_VAR5 REAL,
  A_VAR6 REAL,
  A_VAR7 REAL,
  A_VAR8 REAL,
  A_VAR9 REAL,
  A_VAR10 REAL,
  A_VAR11 REAL,
  A_VAR12 REAL,
  A_VAR13 REAL,
  A_VAR14 REAL,
  A_VAR15 REAL,
  A_VAR16 REAL,
  A_VAR17 REAL,
  A_VAR18 REAL
);
Sample rows from `Demog`:
0, 30.046, 2631.47, 6.084, 5.79, 8.595, 3.935, 6.362, 8.626, 4.624, 8.324, 5.233, 6.232, 5.205, 8.231, 6.746, 8.679, 5.292, 3.5, 5.512, 5.783
1, 36.25, 3012.75, 4.604, 8.309, 6.007, 5.938, 8.773, 3.579, 6.349, 4.694, 6.884, 7.062, 7.319, 3.72, 6.405, 7.202, 4.932, 7.969, 8.15, 5.633
2, 47.645, 2192.41, 4.911, 8.557, 5.934, 6.494, 9.172, 3.202, 6.157, 4.822, 7.942, 7.901, 7.928, 2.33, 6.029, 6.455, 4.72, 8.564, 8.342, 4.938

CREATE TABLE `mailings3` (
  REFID INTEGER,
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `mailings3`:
60000, 2007-07-01 12:00:00.0, false
60001, 2007-07-01 12:00:00.0, false
60002, 2007-07-01 12:00:00.0, false

CREATE TABLE `Customers` (
  ID INTEGER,
  SEX TEXT,
  MARITAL_STATUS TEXT,
  GEOID INTEGER REFERENCES Demog(None),
  EDUCATIONNUM INTEGER,
  OCCUPATION TEXT,
  age INTEGER
);
Sample rows from `Customers`:
0, Male, Never-married, 61, 7, Machine-op-inspct, 62
1, Male, Married-civ-spouse, 70, 3, Handlers-cleaners, 78
2, Male, Never-married, 53, 7, Machine-op-inspct, 69

CREATE TABLE `Mailings1_2` (
  REFID INTEGER REFERENCES Customers(None),
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `Mailings1_2`:
0, 2007-02-01 12:00:00.0, false
1, 2007-02-01 12:00:00.0, false
2, 2007-02-01 12:00:00.0, false

CREATE TABLE `Sales` (
  EVENTID INTEGER,
  REFID INTEGER REFERENCES Customers(None),
  EVENT_DATE DATETIME,
  AMOUNT REAL
);
Sample rows from `Sales`:
0, 0, 2006-12-21 12:00:00.0, 17.907
1, 0, 2006-12-25 12:00:00.0, 17.401
2, 0, 2007-01-26 12:00:00.0, 13.277

","customers, mailings1_2, demog","customers.occupation, mailings1_2.response, customers.id, mailings1_2.REFid, customers.GEOid, demog.GEOid, customers.sex, demog.inhabitants_k"
social_media,"Users in which country has posted more numbers of positive tweets, Argentina or Australia?","SELECT t2.country FROM twitter as t1 inner JOIN location as t2 ON t2.locationid = t1.locationid WHERE t2.country IN ('Argentina', 'Australia') AND t1.sentiment > 0 GROUP BY t2.country ORDER BY COUNT(t1.tweetid) DESC LIMIT 1","CREATE TABLE `twitter` (
  TweetID TEXT PRIMARY KEY,
  Weekday TEXT,
  Hour INTEGER,
  Day INTEGER,
  Lang TEXT,
  IsReshare TEXT,
  Reach INTEGER,
  RetweetCount INTEGER,
  Likes INTEGER,
  Klout INTEGER,
  Sentiment REAL,
  text TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  UserID TEXT REFERENCES user(UserID)
);
Sample rows from `twitter`:
tw-682712873332805633, Thursday, 17, 31, en, FALSE, 44, 0, 0, 35, 0.0, We are hiring: Senior Software Engineer - Proto http://www.reqcloud.com/jobs/719865/?k=0LaPxXuFwczs1e32ZURJKrgCIDMQtRO7BquFSQthUKY&utm_source=twitter&utm_campaign=reqCloud_JobPost #job @awscloud #job #protocol #networking #aws #mediastreaming, 3751, tw-40932430
tw-682713045357998080, Thursday, 17, 31, en, TRUE, 1810, 5, 0, 53, 2.0, RT @CodeMineStatus: This is true Amazon Web Services https://aws.amazon.com/ #php #html #html5 #css #webdesign #seo #java #javascript htt, 3989, tw-3179389829
tw-682713219375476736, Thursday, 17, 31, en, FALSE, 282, 0, 0, 47, 0.0, Devops Engineer Aws Ansible Cassandra Mysql Ubuntu Ruby On Rails Jobs in Austin TX #Austin #TX #jobs #jobsearch https://www.jobfindly.com/devops-engineer-aws-ansible-cassandra-mysql-ubuntu-ruby-on-rails-jobs-austin-tx.html, 3741, tw-4624808414

CREATE TABLE `location` (
  LocationID INTEGER,
  Country TEXT,
  State TEXT,
  StateCode TEXT,
  City TEXT
);
Sample rows from `location`:
1, Albania, Elbasan, AL, Elbasan
2, Albania, Tirane, AL, Tirana
3, Algeria, Souk Ahras, DZ, Souk Ahras

","CREATE TABLE `location` (
  LocationID INTEGER,
  Country TEXT,
  State TEXT,
  StateCode TEXT,
  City TEXT
);
Sample rows from `location`:
1, Albania, Elbasan, AL, Elbasan
2, Albania, Tirane, AL, Tirana
3, Algeria, Souk Ahras, DZ, Souk Ahras

CREATE TABLE `user` (
  UserID TEXT PRIMARY KEY,
  Gender TEXT
);
Sample rows from `user`:
tw-1267804344, Unknown
tw-27229880, Male
tw-199664730, Male

CREATE TABLE `twitter` (
  TweetID TEXT PRIMARY KEY,
  Weekday TEXT,
  Hour INTEGER,
  Day INTEGER,
  Lang TEXT,
  IsReshare TEXT,
  Reach INTEGER,
  RetweetCount INTEGER,
  Likes INTEGER,
  Klout INTEGER,
  Sentiment REAL,
  text TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  UserID TEXT REFERENCES user(UserID)
);
Sample rows from `twitter`:
tw-682712873332805633, Thursday, 17, 31, en, FALSE, 44, 0, 0, 35, 0.0, We are hiring: Senior Software Engineer - Proto http://www.reqcloud.com/jobs/719865/?k=0LaPxXuFwczs1e32ZURJKrgCIDMQtRO7BquFSQthUKY&utm_source=twitter&utm_campaign=reqCloud_JobPost #job @awscloud #job #protocol #networking #aws #mediastreaming, 3751, tw-40932430
tw-682713045357998080, Thursday, 17, 31, en, TRUE, 1810, 5, 0, 53, 2.0, RT @CodeMineStatus: This is true Amazon Web Services https://aws.amazon.com/ #php #html #html5 #css #webdesign #seo #java #javascript htt, 3989, tw-3179389829
tw-682713219375476736, Thursday, 17, 31, en, FALSE, 282, 0, 0, 47, 0.0, Devops Engineer Aws Ansible Cassandra Mysql Ubuntu Ruby On Rails Jobs in Austin TX #Austin #TX #jobs #jobsearch https://www.jobfindly.com/devops-engineer-aws-ansible-cassandra-mysql-ubuntu-ruby-on-rails-jobs-austin-tx.html, 3741, tw-4624808414

","twitter, location","location.country, location.locationid, twitter.locationid, twitter.sentiment, twitter.tweetid"
professional_basketball,Please list the birth date of the player who has won the most MVPs.,"SELECT t1.birthdate FROM players as t1 inner JOIN awards_players as t2 ON t1.playerid = t2.playerid WHERE t2.award = 'Most Valuable Player' GROUP BY t1.playerid, t1.birthdate ORDER BY COUNT(award) DESC LIMIT 1","CREATE TABLE `players` (
  playerID TEXT PRIMARY KEY,
  useFirst TEXT,
  firstName TEXT,
  middleName TEXT,
  lastName TEXT,
  nameGiven TEXT,
  fullGivenName TEXT,
  nameSuffix TEXT,
  nameNick TEXT,
  pos TEXT,
  firstseason INTEGER,
  lastseason INTEGER,
  height REAL,
  weight INTEGER,
  college TEXT,
  collegeOther TEXT,
  birthDate DATE,
  birthCity TEXT,
  birthState TEXT,
  birthCountry TEXT,
  highSchool TEXT,
  hsCity TEXT,
  hsState TEXT,
  hsCountry TEXT,
  deathDate DATE,
  race TEXT
);
Sample rows from `players`:
abdelal01, Alaa, Alaa, None, Abdelnaby, None, None, None, None, F-C, 0, 0, 82.0, 240, Duke, None, 1968-06-24, Cairo, None, EGY, Bloomfield Senior, Bloomfield, NJ, USA, 0000-00-00, B
abdulka01, Kareem, Kareem, None, Abdul-Jabbar, None, Ferdinand Lewis Alcindor, Jr., None, Lew, Cap, C, 0, 0, 85.0, 225, UCLA, None, 1947-04-16, New York, NY, USA, Power Memorial, New York, NY, USA, 0000-00-00, B
abdulma01, Mahdi, Mahdi, None, Abdul-Rahman, None, Walter Raphael Hazzard, Jr., None, Walt, G, 0, 0, 74.0, 185, UCLA, Santa Monica City, 1942-04-15, Wilmington, DE, USA, Overbrook / Moton, Philadelphia / Easton, PA / MD, USA, 2011-11-18, B

CREATE TABLE `awards_players` (
  playerID TEXT PRIMARY KEY REFERENCES players(playerID),
  award TEXT PRIMARY KEY,
  year INTEGER PRIMARY KEY,
  lgID TEXT,
  note TEXT,
  pos TEXT
);
Sample rows from `awards_players`:
abdulka01, All-Defensive Second Team, 1969, NBA, None, None
abdulka01, All-NBA Second Team, 1969, NBA, None, C
abdulka01, Rookie of the Year, 1969, NBA, None, None

","CREATE TABLE `awards_players` (
  playerID TEXT PRIMARY KEY REFERENCES players(playerID),
  award TEXT PRIMARY KEY,
  year INTEGER PRIMARY KEY,
  lgID TEXT,
  note TEXT,
  pos TEXT
);
Sample rows from `awards_players`:
abdulka01, All-Defensive Second Team, 1969, NBA, None, None
abdulka01, All-NBA Second Team, 1969, NBA, None, C
abdulka01, Rookie of the Year, 1969, NBA, None, None

CREATE TABLE `coaches` (
  coachID TEXT PRIMARY KEY,
  year INTEGER PRIMARY KEY REFERENCES teams(year),
  tmID TEXT PRIMARY KEY REFERENCES teams(tmID),
  lgID TEXT,
  stint INTEGER PRIMARY KEY,
  won INTEGER,
  lost INTEGER,
  post_wins INTEGER,
  post_losses INTEGER
);
Sample rows from `coaches`:
adelmri01, 1988, POR, NBA, 2, 14, 21, 0, 3
adelmri01, 1989, POR, NBA, 1, 59, 23, 12, 9
adelmri01, 1990, POR, NBA, 1, 63, 19, 9, 7

CREATE TABLE `draft` (
  id INTEGER,
  draftYear INTEGER REFERENCES teams(year),
  draftRound INTEGER,
  draftSelection INTEGER,
  draftOverall INTEGER,
  tmID TEXT REFERENCES teams(tmID),
  firstName TEXT,
  lastName TEXT,
  suffixName TEXT,
  playerID TEXT,
  draftFrom TEXT,
  lgID TEXT
);
Sample rows from `draft`:
1, 1967, 0, 0, 0, ANA, Darrell, Hardy, None, hardyda01, Baylor, ABA
2, 1967, 0, 0, 0, ANA, Bob, Krulish, None, None, Pacific, ABA
3, 1967, 0, 0, 0, ANA, Bob, Lewis, None, lewisbo01, North Carolina, ABA

CREATE TABLE `player_allstar` (
  playerID TEXT PRIMARY KEY REFERENCES players(playerID),
  last_name TEXT,
  first_name TEXT,
  season_id INTEGER PRIMARY KEY,
  conference TEXT,
  league_id TEXT,
  games_played INTEGER,
  minutes INTEGER,
  points INTEGER,
  o_rebounds INTEGER,
  d_rebounds INTEGER,
  rebounds INTEGER,
  assists INTEGER,
  steals INTEGER,
  blocks INTEGER,
  turnovers INTEGER,
  personal_fouls INTEGER,
  fg_attempted INTEGER,
  fg_made INTEGER,
  ft_attempted INTEGER,
  ft_made INTEGER,
  three_attempted INTEGER,
  three_made INTEGER
);
Sample rows from `player_allstar`:
abdulka01, Abdul-Jabbar, Kareem, 1969, East, NBA, 1, 18, 10, None, None, 11, 4, None, None, None, None, 8, 4, 2, 2, None, None
abdulka01, Abdul-Jabbar, Kareem, 1970, West, NBA, 1, 30, 19, None, None, 14, 1, None, None, None, None, 16, 8, 4, 3, None, None
abdulka01, Abdul-Jabbar, Kareem, 1971, West, NBA, 1, 19, 12, None, None, 7, 2, None, None, None, None, 10, 5, 2, 2, None, None

CREATE TABLE `players` (
  playerID TEXT PRIMARY KEY,
  useFirst TEXT,
  firstName TEXT,
  middleName TEXT,
  lastName TEXT,
  nameGiven TEXT,
  fullGivenName TEXT,
  nameSuffix TEXT,
  nameNick TEXT,
  pos TEXT,
  firstseason INTEGER,
  lastseason INTEGER,
  height REAL,
  weight INTEGER,
  college TEXT,
  collegeOther TEXT,
  birthDate DATE,
  birthCity TEXT,
  birthState TEXT,
  birthCountry TEXT,
  highSchool TEXT,
  hsCity TEXT,
  hsState TEXT,
  hsCountry TEXT,
  deathDate DATE,
  race TEXT
);
Sample rows from `players`:
abdelal01, Alaa, Alaa, None, Abdelnaby, None, None, None, None, F-C, 0, 0, 82.0, 240, Duke, None, 1968-06-24, Cairo, None, EGY, Bloomfield Senior, Bloomfield, NJ, USA, 0000-00-00, B
abdulka01, Kareem, Kareem, None, Abdul-Jabbar, None, Ferdinand Lewis Alcindor, Jr., None, Lew, Cap, C, 0, 0, 85.0, 225, UCLA, None, 1947-04-16, New York, NY, USA, Power Memorial, New York, NY, USA, 0000-00-00, B
abdulma01, Mahdi, Mahdi, None, Abdul-Rahman, None, Walter Raphael Hazzard, Jr., None, Walt, G, 0, 0, 74.0, 185, UCLA, Santa Monica City, 1942-04-15, Wilmington, DE, USA, Overbrook / Moton, Philadelphia / Easton, PA / MD, USA, 2011-11-18, B

CREATE TABLE `teams` (
  year INTEGER PRIMARY KEY,
  lgID TEXT,
  tmID TEXT PRIMARY KEY,
  franchID TEXT,
  confID TEXT,
  divID TEXT,
  rank INTEGER,
  confRank INTEGER,
  playoff TEXT,
  name TEXT,
  o_fgm INTEGER,
  o_ftm INTEGER,
  o_pts INTEGER,
  d_pts INTEGER,
  homeWon INTEGER,
  homeLost INTEGER,
  awayWon INTEGER,
  awayLost INTEGER,
  won INTEGER,
  lost INTEGER,
  games INTEGER,
  arena TEXT
);
Sample rows from `teams`:
1937, NBL, AFS, AFS, None, EA, 1, 0, CF, Akron Firestone Non-Skids, 249, 183, 681, 578, 8, 1, 5, 3, 14, 4, 18, None
1937, NBL, AGW, AGW, None, EA, 2, 0, WC, Akron Goodyear Wingfoots, 243, 159, 645, 498, 8, 1, 5, 4, 13, 5, 18, None
1937, NBL, BFB, BFB, None, EA, 4, 0, None, Buffalo Bisons, 108, 46, 262, 275, 2, 2, 1, 4, 3, 6, 9, None

CREATE TABLE `awards_coaches` (
  id INTEGER,
  year INTEGER REFERENCES coaches(year),
  coachID TEXT REFERENCES coaches(coachID),
  award TEXT,
  lgID TEXT,
  note TEXT
);
Sample rows from `awards_coaches`:
1, 1962, gallaha01, NBA Coach of the Year, NBA, None
2, 1963, hannual01, NBA Coach of the Year, NBA, None
3, 1964, auerbre01, NBA Coach of the Year, NBA, None

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
awards_coaches, 61
players_teams, 23751
series_post, 775

CREATE TABLE `players_teams` (
  id INTEGER,
  playerID TEXT REFERENCES players(None),
  year INTEGER REFERENCES teams(year),
  stint INTEGER,
  tmID TEXT REFERENCES teams(tmID),
  lgID TEXT,
  GP INTEGER,
  GS INTEGER,
  minutes INTEGER,
  points INTEGER,
  oRebounds INTEGER,
  dRebounds INTEGER,
  rebounds INTEGER,
  assists INTEGER,
  steals INTEGER,
  blocks INTEGER,
  turnovers INTEGER,
  PF INTEGER,
  fgAttempted INTEGER,
  fgMade INTEGER,
  ftAttempted INTEGER,
  ftMade INTEGER,
  threeAttempted INTEGER,
  threeMade INTEGER,
  PostGP INTEGER,
  PostGS INTEGER,
  PostMinutes INTEGER,
  PostPoints INTEGER,
  PostoRebounds INTEGER,
  PostdRebounds INTEGER,
  PostRebounds INTEGER,
  PostAssists INTEGER,
  PostSteals INTEGER,
  PostBlocks INTEGER,
  PostTurnovers INTEGER,
  PostPF INTEGER,
  PostfgAttempted INTEGER,
  PostfgMade INTEGER,
  PostftAttempted INTEGER,
  PostftMade INTEGER,
  PostthreeAttempted INTEGER,
  PostthreeMade INTEGER,
  note TEXT
);
Sample rows from `players_teams`:
1, abdelal01, 1990, 1, POR, NBA, 43, 0, 290, 135, 27, 62, 89, 12, 4, 12, 22, 39, 116, 55, 44, 25, 0, 0, 5, 0, 13, 4, 1, 2, 3, 0, 0, 0, 0, 0, 6, 2, 0, 0, 0, 0, None
2, abdelal01, 1991, 1, POR, NBA, 71, 0, 934, 432, 81, 179, 260, 30, 25, 17, 66, 132, 361, 178, 101, 76, 0, 0, 8, 0, 25, 12, 0, 4, 4, 2, 0, 0, 2, 4, 10, 5, 4, 2, 0, 0, None
3, abdelal01, 1992, 1, MIL, NBA, 12, 0, 159, 64, 12, 25, 37, 10, 6, 4, 0, 24, 56, 26, 16, 12, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, None

CREATE TABLE `series_post` (
  id INTEGER,
  year INTEGER REFERENCES teams(year) REFERENCES teams(year),
  round TEXT,
  series TEXT,
  tmIDWinner TEXT REFERENCES teams(tmID),
  lgIDWinner TEXT,
  tmIDLoser TEXT REFERENCES teams(tmID),
  lgIDLoser TEXT,
  W INTEGER,
  L INTEGER
);
Sample rows from `series_post`:
1, 1946, F, O, PHW, NBA, CHS, NBA, 4, 1
2, 1946, QF, M, NYK, NBA, CLR, NBA, 2, 1
3, 1946, QF, M, PHW, NBA, STB, NBA, 2, 1

","players, awards_players","players.birthdate, players.playerid, awards_players.playerid, awards_players.award, award"
public_review_platform,What is the closing and opening time of businesses located at Glendale with highest star rating?,"SELECT t2.opening_time, t2.closing_time FROM business as t1 inner JOIN business_Hours as t2 ON t1.business_id = t2.business_id WHERE t1.city = 'Glendale' ORDER BY t1.stars DESC LIMIT 1","CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","business, business_Hours","business_Hours.opening_time, business_Hours.closing_time, business.business_id, business_Hours.business_id, business.city, business.stars"
video_games,Indicate the publisher who has published the most games of all time.,"SELECt t.publisher_name FROM ( SELECt t2.publisher_name, COUNT(DIStINCt t1.game_id) FROM game_publisher as t1 inner JOIN publisher as t2 ON t1.publisher_id = t2.id GROUP BY t2.publisher_name ORDER BY COUNT(DIStINCt t1.game_id) DESC LIMIt 1 ) t","CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

","CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

","game_publisher, publisher","publisher.publisher_name, game_publisher.game_id, game_publisher.publisher_id, publisher.id"
world_development_indicators,What country have the series code of SP.DYN.CBRT.IN?,SELECT t1.shortname FROM country as t1 inner JOIN countryNotes as t2 ON t1.countryCode = t2.countrycode WHERE t2.seriescode = 'SP.DYN.CBRT.IN',"CREATE TABLE `country` (
  CountryCode TEXT PRIMARY KEY,
  ShortName TEXT,
  TableName TEXT,
  LongName TEXT,
  Alpha2Code TEXT,
  CurrencyUnit TEXT,
  SpecialNotes TEXT,
  Region TEXT,
  IncomeGroup TEXT,
  Wb2Code TEXT,
  NationalAccountsBaseYear TEXT,
  NationalAccountsReferenceYear TEXT,
  SnaPriceValuation TEXT,
  LendingCategory TEXT,
  OtherGroups TEXT,
  SystemOfNationalAccounts TEXT,
  AlternativeConversionFactor TEXT,
  PppSurveyYear TEXT,
  BalanceOfPaymentsManualInUse TEXT,
  ExternalDebtReportingStatus TEXT,
  SystemOfTrade TEXT,
  GovernmentAccountingConcept TEXT,
  ImfDataDisseminationStandard TEXT,
  LatestPopulationCensus TEXT,
  LatestHouseholdSurvey TEXT,
  SourceOfMostRecentIncomeAndExpenditureData TEXT,
  VitalRegistrationComplete TEXT,
  LatestAgriculturalCensus TEXT,
  LatestIndustrialData INTEGER,
  LatestTradeData INTEGER,
  LatestWaterWithdrawalData INTEGER
);
Sample rows from `country`:
AFG, Afghanistan, Afghanistan, Islamic State of Afghanistan, AF, Afghan afghani, Fiscal year end: March 20; reporting period for national accounts data: FY (from 2013 are CY). National accounts data are sourced from the IMF and differ from the Central Statistics Organization numbers due to exclusion of the opium economy., South Asia, Low income, AF, 2002/03, , Value added at basic prices (VAB), IDA, HIPC, Country uses the 1993 System of National Accounts methodology., , , , Actual, General trade system, Consolidated central government, General Data Dissemination System (GDDS), 1979, Multiple Indicator Cluster Survey (MICS), 2010/11, Integrated household survey (IHS), 2008, , 2013/14, None, 2013, 2000
ALB, Albania, Albania, Republic of Albania, AL, Albanian lek, , Europe & Central Asia, Upper middle income, AL, Original chained constant price data are rescaled., 1996, Value added at basic prices (VAB), IBRD, , Country uses the 1993 System of National Accounts methodology., , Rolling, IMF Balance of Payments Manual, 6th edition., Actual, General trade system, Budgetary central government, General Data Dissemination System (GDDS), 2011, Demographic and Health Survey (DHS), 2008/09, Living Standards Measurement Study Survey (LSMS), 2011/12, Yes, 2012, 2011, 2013, 2006
DZA, Algeria, Algeria, People's Democratic Republic of Algeria, DZ, Algerian dinar, , Middle East & North Africa, Upper middle income, DZ, 1980, , Value added at basic prices (VAB), IBRD, , Country uses the 1968 System of National Accounts methodology., , 2011, IMF Balance of Payments Manual, 6th edition., Actual, Special trade system, Budgetary central government, General Data Dissemination System (GDDS), 2008, Multiple Indicator Cluster Survey (MICS), 2012, Integrated household survey (IHS), 1995, , , 2010, 2013, 2001

CREATE TABLE `countryNotes` (
  Countrycode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Description TEXT
);
Sample rows from `countryNotes`:
ABW, EG.EGY.PRIM.PP.KD, Sources: Estimated based on UN Energy Statistics (2014); World Development Indicators, WDI (2014)
ABW, EG.ELC.RNEW.ZS, Sources: UN Energy Statistics (2014)
ABW, EG.FEC.RNEW.ZS, Sources: UN Energy Statistics (2014)

","CREATE TABLE `Country` (
  CountryCode TEXT PRIMARY KEY,
  ShortName TEXT,
  TableName TEXT,
  LongName TEXT,
  Alpha2Code TEXT,
  CurrencyUnit TEXT,
  SpecialNotes TEXT,
  Region TEXT,
  IncomeGroup TEXT,
  Wb2Code TEXT,
  NationalAccountsBaseYear TEXT,
  NationalAccountsReferenceYear TEXT,
  SnaPriceValuation TEXT,
  LendingCategory TEXT,
  OtherGroups TEXT,
  SystemOfNationalAccounts TEXT,
  AlternativeConversionFactor TEXT,
  PppSurveyYear TEXT,
  BalanceOfPaymentsManualInUse TEXT,
  ExternalDebtReportingStatus TEXT,
  SystemOfTrade TEXT,
  GovernmentAccountingConcept TEXT,
  ImfDataDisseminationStandard TEXT,
  LatestPopulationCensus TEXT,
  LatestHouseholdSurvey TEXT,
  SourceOfMostRecentIncomeAndExpenditureData TEXT,
  VitalRegistrationComplete TEXT,
  LatestAgriculturalCensus TEXT,
  LatestIndustrialData INTEGER,
  LatestTradeData INTEGER,
  LatestWaterWithdrawalData INTEGER
);
Sample rows from `Country`:
AFG, Afghanistan, Afghanistan, Islamic State of Afghanistan, AF, Afghan afghani, Fiscal year end: March 20; reporting period for national accounts data: FY (from 2013 are CY). National accounts data are sourced from the IMF and differ from the Central Statistics Organization numbers due to exclusion of the opium economy., South Asia, Low income, AF, 2002/03, , Value added at basic prices (VAB), IDA, HIPC, Country uses the 1993 System of National Accounts methodology., , , , Actual, General trade system, Consolidated central government, General Data Dissemination System (GDDS), 1979, Multiple Indicator Cluster Survey (MICS), 2010/11, Integrated household survey (IHS), 2008, , 2013/14, None, 2013, 2000
ALB, Albania, Albania, Republic of Albania, AL, Albanian lek, , Europe & Central Asia, Upper middle income, AL, Original chained constant price data are rescaled., 1996, Value added at basic prices (VAB), IBRD, , Country uses the 1993 System of National Accounts methodology., , Rolling, IMF Balance of Payments Manual, 6th edition., Actual, General trade system, Budgetary central government, General Data Dissemination System (GDDS), 2011, Demographic and Health Survey (DHS), 2008/09, Living Standards Measurement Study Survey (LSMS), 2011/12, Yes, 2012, 2011, 2013, 2006
DZA, Algeria, Algeria, People's Democratic Republic of Algeria, DZ, Algerian dinar, , Middle East & North Africa, Upper middle income, DZ, 1980, , Value added at basic prices (VAB), IBRD, , Country uses the 1968 System of National Accounts methodology., , 2011, IMF Balance of Payments Manual, 6th edition., Actual, Special trade system, Budgetary central government, General Data Dissemination System (GDDS), 2008, Multiple Indicator Cluster Survey (MICS), 2012, Integrated household survey (IHS), 1995, , , 2010, 2013, 2001

CREATE TABLE `Series` (
  SeriesCode TEXT PRIMARY KEY,
  Topic TEXT,
  IndicatorName TEXT,
  ShortDefinition TEXT,
  LongDefinition TEXT,
  UnitOfMeasure TEXT,
  Periodicity TEXT,
  BasePeriod TEXT,
  OtherNotes INTEGER,
  AggregationMethod TEXT,
  LimitationsAndExceptions TEXT,
  NotesFromOriginalSource TEXT,
  GeneralComments TEXT,
  Source TEXT,
  StatisticalConceptAndMethodology TEXT,
  DevelopmentRelevance TEXT,
  RelatedSourceLinks TEXT,
  OtherWebLinks INTEGER,
  RelatedIndicators INTEGER,
  LicenseType TEXT
);
Sample rows from `Series`:
BN.KLT.DINV.CD, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net (BoP, current US$), , Foreign direct investment are the net inflows of investment to acquire a lasting management interest (10 percent or more of voting stock) in an enterprise operating in an economy other than that of the investor. It is the sum of equity capital, reinvestme, , Annual, , None, , , , Note: Data are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6) and are only available from 2005 onwards. In BPM6, the headings of the financial account have been changed from credits and debits to net acquisition of financial ass, International Monetary Fund, Balance of Payments Statistics Yearbook and data files., , , , None, None, Open
BX.KLT.DINV.WD.GD.ZS, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net inflows (% of GDP), , Foreign direct investment are the net inflows of investment to acquire a lasting management interest (10 percent or more of voting stock) in an enterprise operating in an economy other than that of the investor. It is the sum of equity capital, reinvestme, , Annual, , None, Weighted average, FDI data do not give a complete picture of international investment in an economy. Balance of payments data on FDI do not include capital raised locally, an important source of investment financing in some developing countries. In addition, FDI data omit , , Note: Data starting from 2005 are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6)., International Monetary Fund, International Financial Statistics and Balance of Payments databases, World Bank, International Debt Statistics, and World Bank and OECD GDP estimates., Data on equity flows are based on balance of payments data reported by the International Monetary Fund (IMF). Foreign direct investment (FDI) data are supplemented by the World Bank staff estimates using data from the United Nations Conference on Trade an, Private financial flows - equity and debt - account for the bulk of development finance. Equity flows comprise foreign direct investment (FDI) and portfolio equity. Debt flows are financing raised through bond issuance, bank lending, and supplier credits., , None, None, Open
BX.KLT.DINV.CD.WD, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net inflows (BoP, current US$), , Foreign direct investment refers to direct investment equity flows in the reporting economy. It is the sum of equity capital, reinvestment of earnings, and other capital. Direct investment is a category of cross-border investment associated with a residen, , Annual, , None, Sum, FDI data do not give a complete picture of international investment in an economy. Balance of payments data on FDI do not include capital raised locally, an important source of investment financing in some developing countries. In addition, FDI data omit , , Note: Data starting from 2005 are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6)., International Monetary Fund, Balance of Payments database, supplemented by data from the United Nations Conference on Trade and Development and official national sources., Data on equity flows are based on balance of payments data reported by the International Monetary Fund (IMF). Foreign direct investment (FDI) data are supplemented by the World Bank staff estimates using data from the United Nations Conference on Trade an, Private financial flows - equity and debt - account for the bulk of development finance. Equity flows comprise foreign direct investment (FDI) and portfolio equity. Debt flows are financing raised through bond issuance, bank lending, and supplier credits., , None, None, Open

CREATE TABLE `CountryNotes` (
  Countrycode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Description TEXT
);
Sample rows from `CountryNotes`:
ABW, EG.EGY.PRIM.PP.KD, Sources: Estimated based on UN Energy Statistics (2014); World Development Indicators, WDI (2014)
ABW, EG.ELC.RNEW.ZS, Sources: UN Energy Statistics (2014)
ABW, EG.FEC.RNEW.ZS, Sources: UN Energy Statistics (2014)

CREATE TABLE `Footnotes` (
  Countrycode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Year TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `Footnotes`:
ABW, AG.LND.FRST.K2, YR1990, Not specified
ABW, AG.LND.FRST.K2, YR2000, Not specified
ABW, AG.LND.FRST.K2, YR2005, Not specified

CREATE TABLE `Indicators` (
  CountryName TEXT,
  CountryCode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  IndicatorName TEXT,
  IndicatorCode TEXT PRIMARY KEY,
  Year INTEGER PRIMARY KEY,
  Value INTEGER
);
Sample rows from `Indicators`:
Arab World, ARB, Adolescent fertility rate (births per 1,000 women ages 15-19), SP.ADO.TFRT, 1960, 133
Arab World, ARB, Age dependency ratio (% of working-age population), SP.POP.DPND, 1960, 87
Arab World, ARB, Age dependency ratio, old (% of working-age population), SP.POP.DPND.OL, 1960, 6

CREATE TABLE `SeriesNotes` (
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Year TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `SeriesNotes`:
SP.ADO.TFRT, YR1960, Interpolated using data for 1957 and 1962.
SP.DYN.AMRT.FE, YR1960, Interpolated using data for 1957 and 1962, if the data source is United Nations World Population Prospects.
SP.DYN.AMRT.MA, YR1960, Interpolated using data for 1957 and 1962, if the data source is United Nations World Population Prospects.

","country, countryNotes","country.shortname, country.countryCode, countryNotes.countrycode, countryNotes.seriescode"
bike_share_1,"On 8/29/2013, who took the longest to arrive in California Ave Caltrain Station from University and Emerson? Indicate the bike id.",SELECT bike_id FROM trip WHERE start_date LIKE '8/29/2013%' AND end_date LIKE '8/29/2013%' AND end_station_name = 'California Ave Caltrain Station' AND start_station_name = 'University and Emerson' AND duration = ( SELECT MAX(duration) FROM trip WHERE start_date LIKE '8/29/2013%' AND end_date LIKE '8/29/2013%' AND end_station_name = 'California Ave Caltrain Station' AND start_station_name = 'University and Emerson' ),"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);
Sample rows from `trip`:
4069, 174, 8/29/2013 9:08, 2nd at South Park, 64, 8/29/2013 9:11, 2nd at South Park, 64, 288, Subscriber, 94114
4073, 1067, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:42, San Francisco Caltrain 2 (330 Townsend), 69, 321, Subscriber, 94703
4074, 1131, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:43, San Francisco Caltrain 2 (330 Townsend), 69, 317, Subscriber, 94115

","CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat REAL,
  long REAL,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);
Sample rows from `station`:
2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013
3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013
4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013

CREATE TABLE `status` (
  station_id INTEGER,
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);
Sample rows from `status`:
2, 2, 25, 2013/08/29 12:06:01
2, 2, 25, 2013/08/29 12:07:01
2, 2, 25, 2013/08/29 12:08:01

CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);
Sample rows from `trip`:
4069, 174, 8/29/2013 9:08, 2nd at South Park, 64, 8/29/2013 9:11, 2nd at South Park, 64, 288, Subscriber, 94114
4073, 1067, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:42, San Francisco Caltrain 2 (330 Townsend), 69, 321, Subscriber, 94703
4074, 1131, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:43, San Francisco Caltrain 2 (330 Townsend), 69, 317, Subscriber, 94115

CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches REAL,
  mean_sea_level_pressure_inches REAL,
  min_sea_level_pressure_inches REAL,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches TEXT,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code TEXT
);
Sample rows from `weather`:
8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107
8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30.0, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107
8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30.0, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107

",trip,"bike_id, start_date, end_date, end_station_name, start_station_name, duration"
public_review_platform,Provide the businesses name in Tempe city whose opening hours are earlier than 8AM.,SELECT t1.category_name FROM categories as t1 inner JOIN business_categories as t2 ON t1.category_id = t2.category_id inner JOIN business as t3 ON t2.business_id = t3.business_id inner JOIN business_Hours as t4 ON t3.business_id = t4.business_id WHERE t3.city LIKE 'Tempe' AND t4.opening_time < '8AM',"CREATE TABLE `categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `business_categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `business_categories`:
1, 8
1, 143
2, 18

CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","categories, business_categories, business, business_Hours","categories.category_name, categories.category_id, business_categories.category_id, business_categories.business_id, business.business_id, business_Hours.business_id, business.city, business_Hours.opening_time"
books,How many of the customer addresses are inactive?,SELECT COUNT(*) FROM customer_address as t1 inner JOIN address_status as t2 ON t1.status_id = t2.status_id WHERE t2.address_status = 'Inactive',"CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","customer_address, address_status","customer_address.status_id, address_status.status_id, address_status.address_status"
simpson_episodes,"How many executive producers are the nominees for the award of ""Outstanding Animated Program (For Programming Less Than One Hour)""?",SELECT COUNT(*) FROM award WHERE role = 'executive producer' AND result = 'Nominee' AND award = 'Outstanding Animated Program (For Programming Less Than One Hour)';,"CREATE TABLE `award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

",award,award
shakespeare,How many characters are there in Twelfth Night?,SELECT COUNT(DISTINCT t4.id) FROM works as t1 inner JOIN chapters as t2 ON t1.id = t2.work_id inner JOIN paragraphs as t3 ON t2.id = t3.chapter_id inner JOIN characters as t4 ON t3.character_id = t4.id WHERE t1.title = 'Twelfth Night',"CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

","CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
chapters, 19648
characters, 1266
paragraphs, 666327

CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

","works, chapters, paragraphs, characters","characters.id, works.id, chapters.work_id, chapters.id, paragraphs.chapter_id, paragraphs.character_id, works.title"
public_review_platform,"There was only one tip that user No. 69722 gave to the Yelp business, what was the ratings of that business?",SELECT t2.stars FROM tips as t1 inner JOIN business as t2 ON t1.business_id = t2.business_id WHERE t1.user_id = 69722,"CREATE TABLE `tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","tips, business","business.stars, tips.business_id, business.business_id, tips.user_id"
university,In what year does the Brown University score the highest?,SELECT t1.year FROM university_ranking_year as t1 inner JOIN university as t2 ON t1.university_id = t2.id WHERE t2.university_name = 'Brown University' ORDER BY t1.score DESC LIMIT 1,"CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

","CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

CREATE TABLE `ranking_system` (
  id INTEGER,
  system_name TEXT
);
Sample rows from `ranking_system`:
1, Times Higher Education World University Ranking
2, Shanghai Ranking
3, Center for World University Rankings

CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

","university_ranking_year, university","university_ranking_year.year, university_ranking_year.university_id, university.id, university.university_name, university_ranking_year.score"
movielens,Who are cast members in an English movie which has a running time equal to 2? Please list their IDs.,SELECt t2.actorid FROM movies as t1 inner JOIN movies2actors as t2 ON t1.movieid = t2.movieid WHERE t1.runningtime = 2 AND t1.isenglish = 't',"CREATE TABLE `movies` (
  movieid INTEGER,
  year INTEGER,
  isEnglish TEXT,
  country TEXT,
  runningtime INTEGER
);
Sample rows from `movies`:
1672052, 3, T, other, 2
1672111, 4, T, other, 2
1672580, 4, T, USA, 3

CREATE TABLE `movies2actors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  actorid INTEGER PRIMARY KEY REFERENCES actors(None),
  cast_num INTEGER
);
Sample rows from `movies2actors`:
1672580, 981535, 0
1672946, 1094968, 0
1673647, 149985, 0

","CREATE TABLE `users` (
  userid INTEGER,
  age TEXT,
  u_gender TEXT,
  occupation TEXT
);
Sample rows from `users`:
1, 1, F, 2
2, 56, M, 3
3, 25, M, 2

CREATE TABLE `directors` (
  directorid INTEGER,
  d_quality INTEGER PRIMARY KEY,
  avg_revenue INTEGER PRIMARY KEY
);
Sample rows from `directors`:
67, 4, 1
92, 2, 3
284, 4, 0

CREATE TABLE `actors` (
  actorid INTEGER,
  a_gender TEXT,
  a_quality INTEGER
);
Sample rows from `actors`:
4, M, 4
16, M, 0
28, M, 4

CREATE TABLE `movies` (
  movieid INTEGER,
  year INTEGER,
  isEnglish TEXT,
  country TEXT,
  runningtime INTEGER
);
Sample rows from `movies`:
1672052, 3, T, other, 2
1672111, 4, T, other, 2
1672580, 4, T, USA, 3

CREATE TABLE `movies2actors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  actorid INTEGER PRIMARY KEY REFERENCES actors(None),
  cast_num INTEGER
);
Sample rows from `movies2actors`:
1672580, 981535, 0
1672946, 1094968, 0
1673647, 149985, 0

CREATE TABLE `movies2directors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  directorid INTEGER PRIMARY KEY REFERENCES directors(None),
  genre TEXT
);
Sample rows from `movies2directors`:
1672111, 54934, Action
1672946, 188940, Action
1679461, 179783, Action

CREATE TABLE `u2base` (
  userid INTEGER PRIMARY KEY REFERENCES users(None),
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  rating TEXT
);
Sample rows from `u2base`:
2, 1964242, 1
2, 2219779, 1
3, 1856939, 1

","movies, movies2actors","movies2actors.actorid, movies.movieid, movies2actors.movieid, movies.runningtime, movies.isenglish"
chicago_crime,"Find the commander's name, email address, and phone number of the Ogden district.","SELECT commander, email, phone FROM district WHERE district_name = 'Ogden'","CREATE TABLE `district` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `district`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

","CREATE TABLE `Community_Area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `Community_Area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `District` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `District`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `FBI_Code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `FBI_Code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `IUCR` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `IUCR`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `Neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `Neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `Ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `Ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `Crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `Crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

",district,"commander, email, phone, district_name"
world,"Among the countries that have GNP greater than 1500, what is the percentage of the countries have English as its language?","SELECT cast(SUM(iif(t2.language = 'English', 1, 0)) as real) * 100 / COUNT(t1.code) FROM country as t1 inner JOIN countrylanguage as t2 ON t1.code = t2.countrycode WHERE t1.gnp > 1500","CREATE TABLE `country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

CREATE TABLE `countrylanguage` (
  CountryCode TEXT PRIMARY KEY REFERENCES Country(Code),
  Language TEXT PRIMARY KEY,
  IsOfficial TEXT,
  Percentage REAL
);
Sample rows from `countrylanguage`:
ABW, Dutch, T, 5.3
ABW, English, F, 9.5
ABW, Papiamento, F, 76.7

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
City, 4079

CREATE TABLE `City` (
  ID INTEGER,
  Name TEXT,
  CountryCode TEXT REFERENCES Country(Code),
  District TEXT,
  Population INTEGER
);
Sample rows from `City`:
1, Kabul, AFG, Kabol, 1780000
2, Qandahar, AFG, Qandahar, 237500
3, Herat, AFG, Herat, 186800

CREATE TABLE `Country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `Country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

CREATE TABLE `CountryLanguage` (
  CountryCode TEXT PRIMARY KEY REFERENCES Country(Code),
  Language TEXT PRIMARY KEY,
  IsOfficial TEXT,
  Percentage REAL
);
Sample rows from `CountryLanguage`:
ABW, Dutch, T, 5.3
ABW, English, F, 9.5
ABW, Papiamento, F, 76.7

","country, countrylanguage","countrylanguage.language, country.code, countrylanguage.countrycode, country.gnp"
sales,"Among the products with product ID lower than 15, how many of them costs 10 and below?",SELECT COUNT(productid) FROM products WHERE productid < 15 AND price <= 10,"CREATE TABLE `products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Employees`:
1, Abraham, e, Bennet
2, Reginald, l, Blotchet-Halls
3, Cheryl, a, Carson

CREATE TABLE `Products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

CREATE TABLE `Sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `Sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

",products,"productid, price"
law_episode,List out all the credit names for episode 9.,SELECT t3.name FROM episode as t1 inner JOIN credit as t2 ON t1.episode_id = t2.episode_id inner JOIN person as t3 ON t3.person_id = t2.person_id WHERE t1.episode = 9,"CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `credit` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  person_id TEXT PRIMARY KEY REFERENCES Person(person_id),
  category TEXT,
  role TEXT,
  credited TEXT
);
Sample rows from `credit`:
tt0629204, nm0226352, Additional Crew, technical advisor, true
tt0629204, nm0506974, Additional Crew, production accountant, true
tt0629204, nm4103116, Additional Crew, production accountant, true

CREATE TABLE `person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
tt0629239, nun
tt0629239, priest
tt0629420, police officer

CREATE TABLE `Person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  series TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  person_id TEXT REFERENCES Person(person_id),
  role TEXT,
  result TEXT
);
Sample rows from `Award`:
258, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0937725, None, Winner
259, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0792309, None, Winner
260, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0049569, None, Winner

CREATE TABLE `Credit` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  person_id TEXT PRIMARY KEY REFERENCES Person(person_id),
  category TEXT,
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
tt0629204, nm0226352, Additional Crew, technical advisor, true
tt0629204, nm0506974, Additional Crew, production accountant, true
tt0629204, nm4103116, Additional Crew, production accountant, true

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
tt0629204, 10, 36, 17.7
tt0629204, 9, 39, 19.2
tt0629204, 8, 64, 31.5

","episode, credit, person","person.name, episode.episode_id, credit.episode_id, person.person_id, credit.person_id, episode.episode"
retail_complains,What is the oldest age of male clients?,SELECT MAX(age) FROM client WHERE sex = 'Male',"CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

","CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

",client,"age, sex"
simpson_episodes,How many awards did simpson 20 won in 2009?,"SELECT COUNT(award_id) FROM award WHERE substr(year, 1, 4) = '2009' AND result = 'Winner';","CREATE TABLE `award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

",award,award_id
retails,"What is the name of the supplier that provides the part ""hot spring dodger dim light"" with the lowest supply cost?",SELECT t2.s_name FROM partsupp as t1 inner JOIN supplier as t2 ON t1.ps_suppkey = t2.s_suppkey inner JOIN part as t3 ON t1.ps_partkey = t3.p_partkey WHERE t3.p_name = 'hot spring dodger dim light' ORDER BY t1.ps_supplycost LIMIT 1,"CREATE TABLE `partsupp` (
  ps_partkey INTEGER PRIMARY KEY REFERENCES part(p_partkey),
  ps_suppkey INTEGER PRIMARY KEY REFERENCES supplier(s_suppkey),
  ps_supplycost REAL,
  ps_availqty INTEGER,
  ps_comment TEXT
);
Sample rows from `partsupp`:
1, 2, 400.75, 1111, carefully ironic deposits use against the carefully unusual accounts. slyly silent platelets nag quickly even
1, 2502, 702.61, 3999, slyly regular accounts serve carefully. asymptotes after the slyly even instructions cajole quickly ironic requests. pending dugouts about the slyly 
1, 5002, 383.95, 7411, carefully special ideas are slyly. slyly ironic epitaphs use pending pending foxes. furiously express pinto beans lose quiet even requests: special final packages ar

CREATE TABLE `supplier` (
  s_suppkey INTEGER,
  s_nationkey INTEGER REFERENCES nation(n_nationkey),
  s_comment TEXT,
  s_name TEXT,
  s_address TEXT,
  s_phone TEXT,
  s_acctbal REAL
);
Sample rows from `supplier`:
1, 13, blithely final pearls are. instructions thra, Supplier#000000001, ,wWs4pnykQOFl8mgVCU8EZMXqZs1w, 800-807-9579, 3082.86
2, 5, requests integrate fluffily. fluffily ironic deposits wake. bold, Supplier#000000002, WkXT6MSAJrp4qWq3W9N, 348-617-6055, 3009.73
3, 22, carefully express ideas shall have to unwin, Supplier#000000003, KjUqa42JEHaRDVQTHV6Yq2h, 471-986-9888, 9159.78

CREATE TABLE `part` (
  p_partkey INTEGER,
  p_type TEXT,
  p_size INTEGER,
  p_brand TEXT,
  p_name TEXT,
  p_container TEXT,
  p_mfgr TEXT,
  p_retailprice REAL,
  p_comment TEXT
);
Sample rows from `part`:
1, LARGE PLATED TIN, 31, Brand#43, burlywood plum powder puff mint, LG BAG, Manufacturer#4, 901.0, blithely busy reque
2, LARGE POLISHED STEEL, 4, Brand#55, hot spring dodger dim light, LG CASE, Manufacturer#5, 902.0, even ironic requests s
3, STANDARD PLATED COPPER, 30, Brand#53, dark slate grey steel misty, WRAP CASE, Manufacturer#5, 903.0, slyly ironic fox

","CREATE TABLE `customer` (
  c_custkey INTEGER,
  c_mktsegment TEXT,
  c_nationkey INTEGER REFERENCES nation(n_nationkey),
  c_name TEXT,
  c_address TEXT,
  c_phone TEXT,
  c_acctbal REAL,
  c_comment TEXT
);
Sample rows from `customer`:
1, BUILDING, 8, Customer#000000001, KwX3hMHjZ6, 937-241-3198, 3560.03, ironic excuses detect slyly silent requests. requests according to the exc
2, MACHINERY, 16, Customer#000000002, ioUn,eqTTXOdo, 906-965-7556, 7550.21, final express accounts mold slyly. ironic accounts cajole! quickly express a
3, FURNITURE, 11, Customer#000000003, YddJqmIdouNT9Yj, 328-750-7603, -926.96, carefully express foxes sleep carefully. pending platelets sleep thinly for t

CREATE TABLE `lineitem` (
  l_shipdate DATE,
  l_orderkey INTEGER PRIMARY KEY REFERENCES orders(o_orderkey),
  l_discount REAL,
  l_extendedprice REAL,
  l_suppkey INTEGER REFERENCES partsupp(ps_suppkey),
  l_quantity INTEGER,
  l_returnflag TEXT,
  l_partkey INTEGER REFERENCES partsupp(ps_partkey),
  l_linestatus TEXT,
  l_tax REAL,
  l_commitdate DATE,
  l_receiptdate DATE,
  l_shipmode TEXT,
  l_linenumber INTEGER PRIMARY KEY,
  l_shipinstruct TEXT,
  l_comment TEXT
);
Sample rows from `lineitem`:
1995-08-16, 1, 0.1, 58303.08, 6296, 33, N, 98768, O, 0.06, 1995-07-12, 1995-09-14, RAIL, 1, NONE, carefully bo
1995-08-13, 1, 0.09, 16947.7, 8776, 10, N, 23771, O, 0.08, 1995-07-09, 1995-08-27, TRUCK, 2, TAKE BACK RETURN, blithely regular pac
1995-06-17, 1, 0.1, 63642.9, 3859, 34, N, 113858, O, 0.08, 1995-05-22, 1995-06-30, SHIP, 3, COLLECT COD, ironic accounts sleep furiously silen

CREATE TABLE `nation` (
  n_nationkey INTEGER,
  n_name TEXT,
  n_regionkey INTEGER REFERENCES region(r_regionkey),
  n_comment TEXT
);
Sample rows from `nation`:
0, ALGERIA, 0, slyly express pinto beans cajole idly. deposits use blithely unusual packages? fluffily final accounts x-r
1, ARGENTINA, 1, instructions detect blithely stealthily pending packages
2, BRAZIL, 1, blithely unusual deposits are quickly--

CREATE TABLE `orders` (
  o_orderdate DATE,
  o_orderkey INTEGER,
  o_custkey INTEGER REFERENCES customer(c_custkey),
  o_orderpriority TEXT,
  o_shippriority INTEGER,
  o_clerk TEXT,
  o_orderstatus TEXT,
  o_totalprice REAL,
  o_comment TEXT
);
Sample rows from `orders`:
1995-04-19, 1, 73100, 4-NOT SPECIFIED, 0, Clerk#000000916, P, 203198.56, final packages sleep blithely packa
1996-11-04, 2, 92861, 1-URGENT, 0, Clerk#000000373, O, 317719.99, final excuses about the ironic even deposits detect express request
1992-02-15, 3, 44875, 1-URGENT, 0, Clerk#000000485, F, 146674.98, final final deposits cajole foxes. blithely pendin

CREATE TABLE `part` (
  p_partkey INTEGER,
  p_type TEXT,
  p_size INTEGER,
  p_brand TEXT,
  p_name TEXT,
  p_container TEXT,
  p_mfgr TEXT,
  p_retailprice REAL,
  p_comment TEXT
);
Sample rows from `part`:
1, LARGE PLATED TIN, 31, Brand#43, burlywood plum powder puff mint, LG BAG, Manufacturer#4, 901.0, blithely busy reque
2, LARGE POLISHED STEEL, 4, Brand#55, hot spring dodger dim light, LG CASE, Manufacturer#5, 902.0, even ironic requests s
3, STANDARD PLATED COPPER, 30, Brand#53, dark slate grey steel misty, WRAP CASE, Manufacturer#5, 903.0, slyly ironic fox

CREATE TABLE `partsupp` (
  ps_partkey INTEGER PRIMARY KEY REFERENCES part(p_partkey),
  ps_suppkey INTEGER PRIMARY KEY REFERENCES supplier(s_suppkey),
  ps_supplycost REAL,
  ps_availqty INTEGER,
  ps_comment TEXT
);
Sample rows from `partsupp`:
1, 2, 400.75, 1111, carefully ironic deposits use against the carefully unusual accounts. slyly silent platelets nag quickly even
1, 2502, 702.61, 3999, slyly regular accounts serve carefully. asymptotes after the slyly even instructions cajole quickly ironic requests. pending dugouts about the slyly 
1, 5002, 383.95, 7411, carefully special ideas are slyly. slyly ironic epitaphs use pending pending foxes. furiously express pinto beans lose quiet even requests: special final packages ar

CREATE TABLE `region` (
  r_regionkey INTEGER,
  r_name TEXT,
  r_comment TEXT
);
Sample rows from `region`:
0, AFRICA, asymptotes sublate after the r
1, AMERICA, requests affix quickly final tithes. blithely even packages above the a
2, ASIA, accounts cajole carefully according to the carefully exp

CREATE TABLE `supplier` (
  s_suppkey INTEGER,
  s_nationkey INTEGER REFERENCES nation(n_nationkey),
  s_comment TEXT,
  s_name TEXT,
  s_address TEXT,
  s_phone TEXT,
  s_acctbal REAL
);
Sample rows from `supplier`:
1, 13, blithely final pearls are. instructions thra, Supplier#000000001, ,wWs4pnykQOFl8mgVCU8EZMXqZs1w, 800-807-9579, 3082.86
2, 5, requests integrate fluffily. fluffily ironic deposits wake. bold, Supplier#000000002, WkXT6MSAJrp4qWq3W9N, 348-617-6055, 3009.73
3, 22, carefully express ideas shall have to unwin, Supplier#000000003, KjUqa42JEHaRDVQTHV6Yq2h, 471-986-9888, 9159.78

","partsupp, supplier, part","supplier.s_name, partsupp.ps_suppkey, supplier.s_suppkey, partsupp.ps_partkey, part.p_partkey, part.p_name, partsupp.ps_supplycost"
sales_in_weather,"How many units of item no.9 were sold in store no.1 in total in January, 2012?","SELECT SUM(units) FROM sales_in_weather WHERE substr(`date`, 6, 2) = '01' AND substr(`date`, 1, 4) = '2012' AND item_nbr = 9 AND store_nbr = 1","CREATE TABLE `sales_in_weather` (
  date DATE PRIMARY KEY,
  store_nbr INTEGER PRIMARY KEY,
  item_nbr INTEGER PRIMARY KEY,
  units INTEGER
);
Sample rows from `sales_in_weather`:
2012-01-01, 1, 1, 0
2012-01-01, 1, 2, 0
2012-01-01, 1, 3, 0

","CREATE TABLE `sales_in_weather` (
  date DATE PRIMARY KEY,
  store_nbr INTEGER PRIMARY KEY,
  item_nbr INTEGER PRIMARY KEY,
  units INTEGER
);
Sample rows from `sales_in_weather`:
2012-01-01, 1, 1, 0
2012-01-01, 1, 2, 0
2012-01-01, 1, 3, 0

CREATE TABLE `weather` (
  station_nbr INTEGER PRIMARY KEY,
  date DATE PRIMARY KEY,
  tmax INTEGER,
  tmin INTEGER,
  tavg INTEGER,
  depart INTEGER,
  dewpoint INTEGER,
  wetbulb INTEGER,
  heat INTEGER,
  cool INTEGER,
  sunrise TEXT,
  sunset TEXT,
  codesum TEXT,
  snowfall REAL,
  preciptotal REAL,
  stnpressure REAL,
  sealevel REAL,
  resultspeed REAL,
  resultdir INTEGER,
  avgspeed REAL
);
Sample rows from `weather`:
1, 2012-01-01, 52, 31, 42, None, 36, 40, 23, 0, None, None, RA FZFG BR, None, 0.05, 29.78, 29.92, 3.6, 20, 4.6
1, 2012-01-02, 50, 31, 41, None, 26, 35, 24, 0, None, None,  , None, 0.01, 29.44, 29.62, 9.8, 24, 10.3
1, 2012-01-03, 32, 11, 22, None, 4, 18, 43, 0, None, None,  , None, 0.0, 29.67, 29.87, 10.8, 31, 11.6

CREATE TABLE `relation` (
  store_nbr INTEGER REFERENCES sales_in_weather(store_nbr),
  station_nbr INTEGER REFERENCES weather(station_nbr)
);
Sample rows from `relation`:
1, 1
2, 14
3, 7

",sales_in_weather,"units, date, item_nbr, store_nbr"
language_corpus,"What is the total number of words in page containing pair of word id ""100"" and ""317""?",SELECT words FROM langs WHERE lid = ( SELECT lid FROM biwords WHERE w1st = 100 AND w2nd = 317 ),"CREATE TABLE `langs` (
  lid INTEGER,
  lang TEXT PRIMARY KEY,
  locale TEXT PRIMARY KEY,
  pages INTEGER,
  words INTEGER
);
Sample rows from `langs`:
1, ca, ca_ES, 1129144, 2764996

CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

","CREATE TABLE `langs` (
  lid INTEGER,
  lang TEXT PRIMARY KEY,
  locale TEXT PRIMARY KEY,
  pages INTEGER,
  words INTEGER
);
Sample rows from `langs`:
1, ca, ca_ES, 1129144, 2764996

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
langs, 1
pages, 1129144
words, 2764996

CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `langs_words` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `langs_words`:
1, 1, 242
1, 2, 16841
1, 3, 48700

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

","langs, biwords","words, lid, w1st, w2nd"
college_completion,"In 2012, how many Asian female graduates were seeking another type of degree or certificate at the 4-year institution at University of Alaska at Anchorage?",SELECT COUNT(*) fROM institution_details as t1 inner JOIN institution_grads as t2 ON t1.unitid = t2.unitid WHERE t2.gender = 'f' aND t2.race = 'a' aND t1.chronname = 'University of alaska at anchorage' aND t2.cohort = '4y other',"CREATE TABLE `institution_details` (
  unitid INTEGER,
  chronname TEXT,
  city TEXT,
  state TEXT,
  level TEXT,
  control TEXT,
  basic TEXT,
  hbcu TEXT,
  flagship TEXT,
  long_x REAL,
  lat_y REAL,
  site TEXT,
  student_count INTEGER,
  awards_per_value REAL,
  awards_per_state_value REAL,
  awards_per_natl_value REAL,
  exp_award_value INTEGER,
  exp_award_state_value INTEGER,
  exp_award_natl_value INTEGER,
  exp_award_percentile INTEGER,
  ft_pct REAL,
  fte_value INTEGER,
  fte_percentile INTEGER,
  med_sat_value TEXT,
  med_sat_percentile TEXT,
  aid_value INTEGER,
  aid_percentile INTEGER,
  endow_value TEXT,
  endow_percentile TEXT,
  grad_100_value REAL,
  grad_100_percentile INTEGER,
  grad_150_value REAL,
  grad_150_percentile INTEGER,
  pell_value REAL,
  pell_percentile INTEGER,
  retain_value REAL,
  retain_percentile INTEGER,
  ft_fac_value REAL,
  ft_fac_percentile INTEGER,
  vsa_year TEXT,
  vsa_grad_after4_first TEXT,
  vsa_grad_elsewhere_after4_first TEXT,
  vsa_enroll_after4_first TEXT,
  vsa_enroll_elsewhere_after4_first TEXT,
  vsa_grad_after6_first TEXT,
  vsa_grad_elsewhere_after6_first TEXT,
  vsa_enroll_after6_first TEXT,
  vsa_enroll_elsewhere_after6_first TEXT,
  vsa_grad_after4_transfer TEXT,
  vsa_grad_elsewhere_after4_transfer TEXT,
  vsa_enroll_after4_transfer TEXT,
  vsa_enroll_elsewhere_after4_transfer TEXT,
  vsa_grad_after6_transfer TEXT,
  vsa_grad_elsewhere_after6_transfer TEXT,
  vsa_enroll_after6_transfer TEXT,
  vsa_enroll_elsewhere_after6_transfer TEXT,
  similar TEXT,
  state_sector_ct INTEGER,
  carnegie_ct INTEGER,
  counted_pct TEXT,
  nicknames TEXT,
  cohort_size INTEGER
);
Sample rows from `institution_details`:
100654, Alabama A&M University, Normal, Alabama, 4-year, Public, Masters Colleges and Universities--larger programs, X, NULL, -86.568502, 34.783368, www.aamu.edu/, 4051, 14.2, 18.8, 21.5, 105331, 75743, 66436, 90, 93.8, 3906, 33, 823, 0, 7142, 72, NULL, NULL, 10.0, 15, 29.1, 14, 71.2, 98, 63.1, 17, 82.8, 89, 2010, 14.7, 2, 36.5, 16.1, 33, 5.3, 12.5, 14.6, 15.7, 1.5, 40.9, 17.2, 36.4, 5.6, 17.2, 11.1, 232937|100724|405997|113607|139533|144005|228501|101480|131876|144759|419509|176479|243197|228529|372222|228431|206695|139366|159993|224147, 13, 386, 99.7|07, NULL, 882
100663, University of Alabama at Birmingham, Birmingham, Alabama, 4-year, Public, Research Universities--very high research activity, NULL, NULL, -86.80917, 33.50223, www.uab.edu, 11502, 20.9, 18.8, 21.5, 136546, 75743, 66436, 97, 72.7, 10032, 67, 1146, 84, 6088, 50, 24136, 93, 29.4, 67, 53.5, 66, 35.1, 39, 80.2, 70, 92.4, 98, 2011, 22.3, 2.9, 34.2, 19.2, 42.6, 10.5, 7.9, 13.1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 196060|180461|201885|145600|209542|236939|126818|230764|104151|104179|157085|171100|153603|141574|155317|110714|137351|126562|243780|196088, 13, 106, 56.0|07, UAB, 1376
100690, Amridge University, Montgomery, Alabama, 4-year, Private not-for-profit, Baccalaureate Colleges--Arts & Sciences, NULL, NULL, -86.17401, 32.362609, www.amridgeuniversity.edu, 322, 29.9, 17.8, 22.5, 58414, 92268, 101725, 30, 62.7, 294, 12, NULL, NULL, 2540, 1, 302, 1, 0.0, 0, 66.7, 72, 68.4, 91, 37.5, 2, 67.2, 71, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 217925|441511|205124|247825|197647|221856|135364|117575|164207|193070|199315|166054|367893|183804|439701|193052|197744|193247|137777|176789, 16, 252, 100.0|07, NULL, 3

CREATE TABLE `institution_grads` (
  unitid INTEGER REFERENCES institution_details(unitid),
  year INTEGER,
  gender TEXT,
  race TEXT,
  cohort TEXT,
  grad_cohort TEXT,
  grad_100 TEXT,
  grad_150 TEXT,
  grad_100_rate TEXT,
  grad_150_rate TEXT
);
Sample rows from `institution_grads`:
100760, 2011, B, X, 2y all, 446, 73, 105, 16.4, 23.5
100760, 2011, M, X, 2y all, 185, NULL, 40, NULL, 21.6
100760, 2011, F, X, 2y all, 261, NULL, 65, NULL, 24.9

","CREATE TABLE `institution_details` (
  unitid INTEGER,
  chronname TEXT,
  city TEXT,
  state TEXT,
  level TEXT,
  control TEXT,
  basic TEXT,
  hbcu TEXT,
  flagship TEXT,
  long_x REAL,
  lat_y REAL,
  site TEXT,
  student_count INTEGER,
  awards_per_value REAL,
  awards_per_state_value REAL,
  awards_per_natl_value REAL,
  exp_award_value INTEGER,
  exp_award_state_value INTEGER,
  exp_award_natl_value INTEGER,
  exp_award_percentile INTEGER,
  ft_pct REAL,
  fte_value INTEGER,
  fte_percentile INTEGER,
  med_sat_value TEXT,
  med_sat_percentile TEXT,
  aid_value INTEGER,
  aid_percentile INTEGER,
  endow_value TEXT,
  endow_percentile TEXT,
  grad_100_value REAL,
  grad_100_percentile INTEGER,
  grad_150_value REAL,
  grad_150_percentile INTEGER,
  pell_value REAL,
  pell_percentile INTEGER,
  retain_value REAL,
  retain_percentile INTEGER,
  ft_fac_value REAL,
  ft_fac_percentile INTEGER,
  vsa_year TEXT,
  vsa_grad_after4_first TEXT,
  vsa_grad_elsewhere_after4_first TEXT,
  vsa_enroll_after4_first TEXT,
  vsa_enroll_elsewhere_after4_first TEXT,
  vsa_grad_after6_first TEXT,
  vsa_grad_elsewhere_after6_first TEXT,
  vsa_enroll_after6_first TEXT,
  vsa_enroll_elsewhere_after6_first TEXT,
  vsa_grad_after4_transfer TEXT,
  vsa_grad_elsewhere_after4_transfer TEXT,
  vsa_enroll_after4_transfer TEXT,
  vsa_enroll_elsewhere_after4_transfer TEXT,
  vsa_grad_after6_transfer TEXT,
  vsa_grad_elsewhere_after6_transfer TEXT,
  vsa_enroll_after6_transfer TEXT,
  vsa_enroll_elsewhere_after6_transfer TEXT,
  similar TEXT,
  state_sector_ct INTEGER,
  carnegie_ct INTEGER,
  counted_pct TEXT,
  nicknames TEXT,
  cohort_size INTEGER
);
Sample rows from `institution_details`:
100654, Alabama A&M University, Normal, Alabama, 4-year, Public, Masters Colleges and Universities--larger programs, X, NULL, -86.568502, 34.783368, www.aamu.edu/, 4051, 14.2, 18.8, 21.5, 105331, 75743, 66436, 90, 93.8, 3906, 33, 823, 0, 7142, 72, NULL, NULL, 10.0, 15, 29.1, 14, 71.2, 98, 63.1, 17, 82.8, 89, 2010, 14.7, 2, 36.5, 16.1, 33, 5.3, 12.5, 14.6, 15.7, 1.5, 40.9, 17.2, 36.4, 5.6, 17.2, 11.1, 232937|100724|405997|113607|139533|144005|228501|101480|131876|144759|419509|176479|243197|228529|372222|228431|206695|139366|159993|224147, 13, 386, 99.7|07, NULL, 882
100663, University of Alabama at Birmingham, Birmingham, Alabama, 4-year, Public, Research Universities--very high research activity, NULL, NULL, -86.80917, 33.50223, www.uab.edu, 11502, 20.9, 18.8, 21.5, 136546, 75743, 66436, 97, 72.7, 10032, 67, 1146, 84, 6088, 50, 24136, 93, 29.4, 67, 53.5, 66, 35.1, 39, 80.2, 70, 92.4, 98, 2011, 22.3, 2.9, 34.2, 19.2, 42.6, 10.5, 7.9, 13.1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 196060|180461|201885|145600|209542|236939|126818|230764|104151|104179|157085|171100|153603|141574|155317|110714|137351|126562|243780|196088, 13, 106, 56.0|07, UAB, 1376
100690, Amridge University, Montgomery, Alabama, 4-year, Private not-for-profit, Baccalaureate Colleges--Arts & Sciences, NULL, NULL, -86.17401, 32.362609, www.amridgeuniversity.edu, 322, 29.9, 17.8, 22.5, 58414, 92268, 101725, 30, 62.7, 294, 12, NULL, NULL, 2540, 1, 302, 1, 0.0, 0, 66.7, 72, 68.4, 91, 37.5, 2, 67.2, 71, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 217925|441511|205124|247825|197647|221856|135364|117575|164207|193070|199315|166054|367893|183804|439701|193052|197744|193247|137777|176789, 16, 252, 100.0|07, NULL, 3

CREATE TABLE `institution_grads` (
  unitid INTEGER REFERENCES institution_details(unitid),
  year INTEGER,
  gender TEXT,
  race TEXT,
  cohort TEXT,
  grad_cohort TEXT,
  grad_100 TEXT,
  grad_150 TEXT,
  grad_100_rate TEXT,
  grad_150_rate TEXT
);
Sample rows from `institution_grads`:
100760, 2011, B, X, 2y all, 446, 73, 105, 16.4, 23.5
100760, 2011, M, X, 2y all, 185, NULL, 40, NULL, 21.6
100760, 2011, F, X, 2y all, 261, NULL, 65, NULL, 24.9

CREATE TABLE `state_sector_grads` (
  stateid INTEGER REFERENCES state_sector_details(stateid),
  state TEXT REFERENCES institution_details(state),
  state_abbr TEXT,
  control TEXT,
  level TEXT,
  year INTEGER,
  gender TEXT,
  race TEXT,
  cohort TEXT,
  grad_cohort TEXT,
  grad_100 TEXT,
  grad_150 TEXT,
  grad_100_rate TEXT,
  grad_150_rate TEXT,
  grad_cohort_ct INTEGER
);
Sample rows from `state_sector_grads`:
1, Alabama, AL, Private for-profit, 4-year, 2011, B, A, 4y bach, 0, 0, 0, NULL, NULL, 9
1, Alabama, AL, Private for-profit, 4-year, 2011, B, Ai, 4y bach, 1, 0, 0, 0, 0, 9
1, Alabama, AL, Private for-profit, 4-year, 2011, B, B, 4y bach, 51, 2, 3, 3.9, 5.9, 9

CREATE TABLE `state_sector_details` (
  stateid INTEGER PRIMARY KEY,
  state TEXT REFERENCES institution_details(state),
  state_post TEXT,
  level TEXT PRIMARY KEY,
  control TEXT PRIMARY KEY,
  schools_count INTEGER,
  counted_pct TEXT,
  awards_per_state_value TEXT,
  awards_per_natl_value REAL,
  exp_award_state_value TEXT,
  exp_award_natl_value INTEGER,
  state_appr_value TEXT,
  state_appr_rank TEXT,
  grad_rate_rank TEXT,
  awards_per_rank TEXT
);
Sample rows from `state_sector_details`:
0, United States, U.S., 4-year, Public, 632, NULL, NULL, 21.5, NULL, 66436, NULL, NULL, 23, NULL
0, United States, U.S., 4-year, Private not-for-profit, 1180, NULL, NULL, 22.5, NULL, 101725, NULL, NULL, 18, NULL
0, United States, U.S., 4-year, Private for-profit, 527, NULL, NULL, 24.6, NULL, 38763, NULL, NULL, 8, NULL

","institution_details, institution_grads","institution_details.unitid, institution_grads.unitid, institution_grads.gender, institution_grads.race, institution_details.chronname, institution_grads.cohort"
retail_world,"Mention the oldest empoyee's full name, title, salary and number of orders which were shipped to USA by him.","SELECT t1.firstname, t1.lastname, t1.title, t1.salary , COUNT(t2.orderid) FROM employees as t1 inner JOIN orders as t2 ON t1.employeeid = t2.employeeid WHERE shipcountry = 'USA' GROUP BY t1.firstname, t1.lastname, t1.title, t1.salary, t1.birthdate ORDER BY t1.birthdate LIMIT 1","CREATE TABLE `employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

","employees, orders","employees.firstname, employees.lastname, employees.title, employees.salary, orders.orderid, employees.employeeid, orders.employeeid, shipcountry, employees.birthdate"
language_corpus,Please list the top three most frequently occurring words and their ids.,"SELECT word, wid FROM words ORDER BY occurrences DESC LIMIT 3","CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

","CREATE TABLE `langs` (
  lid INTEGER,
  lang TEXT PRIMARY KEY,
  locale TEXT PRIMARY KEY,
  pages INTEGER,
  words INTEGER
);
Sample rows from `langs`:
1, ca, ca_ES, 1129144, 2764996

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
langs, 1
pages, 1129144
words, 2764996

CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `langs_words` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `langs_words`:
1, 1, 242
1, 2, 16841
1, 3, 48700

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

",words,"word, wid, occurrences"
disney,List the titles of movies directed by Jack Kinney that were released before 1947.,"SELECT t1.movie_title FROM characters as t1 inner JOIN director as t2 ON t1.movie_title = t2.name WHERE t2.director = 'Jack Kinney' AND substr(t1.release_date, length(t1.release_date) - 1, length(t1.release_date)) < '47'","CREATE TABLE `characters` (
  movie_title TEXT PRIMARY KEY,
  release_date TEXT,
  hero TEXT REFERENCES voice-actors(character),
  villian TEXT,
  song TEXT
);
Sample rows from `characters`:
Snow White and the Seven Dwarfs, 21-Dec-37, Snow White, Evil Queen, Some Day My Prince Will Come
Pinocchio, 7-Feb-40, Pinocchio, Stromboli, When You Wish upon a Star
Fantasia, 13-Nov-40, None, Chernabog, None

CREATE TABLE `director` (
  name TEXT PRIMARY KEY REFERENCES characters(movie_title),
  director TEXT
);
Sample rows from `director`:
Snow White and the Seven Dwarfs, David Hand
Pinocchio, Ben Sharpsteen
Fantasia, full credits

","CREATE TABLE `characters` (
  movie_title TEXT PRIMARY KEY,
  release_date TEXT,
  hero TEXT REFERENCES voice-actors(character),
  villian TEXT,
  song TEXT
);
Sample rows from `characters`:
Snow White and the Seven Dwarfs, 21-Dec-37, Snow White, Evil Queen, Some Day My Prince Will Come
Pinocchio, 7-Feb-40, Pinocchio, Stromboli, When You Wish upon a Star
Fantasia, 13-Nov-40, None, Chernabog, None

CREATE TABLE `director` (
  name TEXT PRIMARY KEY REFERENCES characters(movie_title),
  director TEXT
);
Sample rows from `director`:
Snow White and the Seven Dwarfs, David Hand
Pinocchio, Ben Sharpsteen
Fantasia, full credits

CREATE TABLE `movies_total_gross` (
  movie_title TEXT PRIMARY KEY REFERENCES characters(movie_title),
  release_date TEXT PRIMARY KEY,
  genre TEXT,
  MPAA_rating TEXT,
  total_gross TEXT,
  inflation_adjusted_gross TEXT
);
Sample rows from `movies_total_gross`:
Snow White and the Seven Dwarfs, Dec 21, 1937, Musical, G, $184,925,485, $5,228,953,251
Pinocchio, Feb 9, 1940, Adventure, G, $84,300,000, $2,188,229,052
Fantasia, Nov 13, 1940, Musical, G, $83,320,000, $2,187,090,808

CREATE TABLE `revenue` (
  Year INTEGER,
  Studio Entertainment[NI 1] REAL,
  Disney Consumer Products[NI 2] REAL,
  Disney Interactive[NI 3][Rev 1] INTEGER,
  Walt Disney Parks and Resorts REAL,
  Disney Media Networks TEXT,
  Total INTEGER
);
Sample rows from `revenue`:
1991, 2593.0, 724.0, None, 2794.0, None, 6111
1992, 3115.0, 1081.0, None, 3306.0, None, 7502
1993, 3673.4, 1415.1, None, 3440.7, None, 8529

CREATE TABLE `voice-actors` (
  character TEXT PRIMARY KEY,
  voice-actor TEXT,
  movie TEXT REFERENCES characters(movie_title)
);
Sample rows from `voice-actors`:
Abby Mallard, Joan Cusack, Chicken Little
Abigail Gabble, Monica Evans, The Aristocats
Abis Mal, Jason Alexander, The Return of Jafar

","characters, director","characters.movie_title, director.name, director.director, characters.release_date"
talkingdata,"How many of the apps belong in the ""Equity Fund"" category?",SELECT COUNT(t1.app_id) FROM app_labels as t1 inner JOIN label_categories as t2 ON t1.label_id = t2.label_id WHERE t2.category = 'Equity Fund',"CREATE TABLE `app_labels` (
  app_id INTEGER REFERENCES app_all(app_id),
  label_id INTEGER REFERENCES label_categories(label_id)
);
Sample rows from `app_labels`:
7324884708820027918, 251
-4494216993218550286, 251
6058196446775239644, 406

CREATE TABLE `label_categories` (
  label_id INTEGER,
  category TEXT
);
Sample rows from `label_categories`:
1, None
2, game-game type
3, game-Game themes

","CREATE TABLE `app_all` (
  app_id INTEGER
);
Sample rows from `app_all`:
-9223281467940916832
-9222877069545393219
-9222785464897897681

CREATE TABLE `app_events` (
  event_id INTEGER PRIMARY KEY REFERENCES events(event_id),
  app_id INTEGER PRIMARY KEY,
  is_installed INTEGER,
  is_active INTEGER
);
Sample rows from `app_events`:
2, -8942695423876075857, 1, 0
2, -8022267440849930066, 1, 0
2, -5720078949152207372, 1, 0

CREATE TABLE `app_events_relevant` (
  event_id INTEGER PRIMARY KEY REFERENCES events_relevant(event_id),
  app_id INTEGER PRIMARY KEY REFERENCES app_all(app_id),
  is_installed INTEGER,
  is_active INTEGER
);
Sample rows from `app_events_relevant`:
2, -8942695423876075857, 1, 0
2, -8022267440849930066, 1, 0
2, -5720078949152207372, 1, 0

CREATE TABLE `app_labels` (
  app_id INTEGER REFERENCES app_all(app_id),
  label_id INTEGER REFERENCES label_categories(label_id)
);
Sample rows from `app_labels`:
7324884708820027918, 251
-4494216993218550286, 251
6058196446775239644, 406

CREATE TABLE `events` (
  event_id INTEGER,
  device_id INTEGER,
  timestamp DATETIME,
  longitude REAL,
  latitude REAL
);
Sample rows from `events`:
1, 29182687948017175, 2016-05-01 00:55:25.0, 121.0, 31.0
2, -6401643145415154744, 2016-05-01 00:54:12.0, 104.0, 31.0
3, -4833982096941402721, 2016-05-01 00:08:05.0, 107.0, 30.0

CREATE TABLE `events_relevant` (
  event_id INTEGER,
  device_id INTEGER REFERENCES gender_age(device_id),
  timestamp DATETIME,
  longitude REAL,
  latitude REAL
);
Sample rows from `events_relevant`:
2, None, -8942695423876075857, 1.0, 0.0
6, None, -8764672938472212518, 1.0, 1.0
7, None, -9050100410106163077, 1.0, 0.0

CREATE TABLE `gender_age` (
  device_id INTEGER REFERENCES phone_brand_device_model2(device_id),
  gender TEXT,
  age INTEGER,
  group TEXT
);
Sample rows from `gender_age`:
-9221086586254644858, M, 29, M29-31
-9221079146476055829, None, None, None
-9221066489596332354, M, 31, M29-31

CREATE TABLE `gender_age_test` (
  device_id INTEGER
);
Sample rows from `gender_age_test`:
-9223321966609553846
-9223042152723782980
-9222896629442493034

CREATE TABLE `gender_age_train` (
  device_id INTEGER,
  gender TEXT,
  age INTEGER,
  group TEXT
);
Sample rows from `gender_age_train`:
-9223067244542181226, M, 24, M23-26
-9222956879900151005, M, 36, M32-38
-9222754701995937853, M, 29, M29-31

CREATE TABLE `label_categories` (
  label_id INTEGER,
  category TEXT
);
Sample rows from `label_categories`:
1, None
2, game-game type
3, game-Game themes

CREATE TABLE `phone_brand_device_model2` (
  device_id INTEGER PRIMARY KEY,
  phone_brand TEXT PRIMARY KEY,
  device_model TEXT PRIMARY KEY
);
Sample rows from `phone_brand_device_model2`:
-9223321966609553846, 小米, 红米note
-9223067244542181226, vivo, Y19T
-9223042152723782980, 小米, MI 3

CREATE TABLE `sample_submission` (
  device_id INTEGER,
  F23- REAL,
  F24-26 REAL,
  F27-28 REAL,
  F29-32 REAL,
  F33-42 REAL,
  F43+ REAL,
  M22- REAL,
  M23-26 REAL,
  M27-28 REAL,
  M29-31 REAL,
  M32-38 REAL,
  M39+ REAL
);
Sample rows from `sample_submission`:
-9223321966609553846, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833
-9223042152723782980, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833
-9222896629442493034, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833

","app_labels, label_categories","app_labels.app_id, app_labels.label_id, label_categories.label_id, label_categories.category"
student_loan,"Among students with 1 month of absenses, how many of them are enlisted in the air force department?",SELECT COUNT(t1.name) FROM longest_absense_from_school as t1 inner JOIN enlist as t2 ON t1.name = t2.name WHERE t1.month = 1 AND t2.organ = 'air_force',"CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

","longest_absense_from_school, enlist","longest_absense_from_school.name, enlist.name, longest_absense_from_school.month, enlist.organ"
sales_in_weather,How many inches of total precipitation was recorded by the weather station of store no.2 on 2012/12/25?,SELECT t1.preciptotal FROM weather as t1 inner JOIN relation as t2 ON t1.station_nbr = t2.station_nbr WHERE t1.`date` = '2012-12-25' AND t2.store_nbr = 2,"CREATE TABLE `weather` (
  station_nbr INTEGER PRIMARY KEY,
  date DATE PRIMARY KEY,
  tmax INTEGER,
  tmin INTEGER,
  tavg INTEGER,
  depart INTEGER,
  dewpoint INTEGER,
  wetbulb INTEGER,
  heat INTEGER,
  cool INTEGER,
  sunrise TEXT,
  sunset TEXT,
  codesum TEXT,
  snowfall REAL,
  preciptotal REAL,
  stnpressure REAL,
  sealevel REAL,
  resultspeed REAL,
  resultdir INTEGER,
  avgspeed REAL
);
Sample rows from `weather`:
1, 2012-01-01, 52, 31, 42, None, 36, 40, 23, 0, None, None, RA FZFG BR, None, 0.05, 29.78, 29.92, 3.6, 20, 4.6
1, 2012-01-02, 50, 31, 41, None, 26, 35, 24, 0, None, None,  , None, 0.01, 29.44, 29.62, 9.8, 24, 10.3
1, 2012-01-03, 32, 11, 22, None, 4, 18, 43, 0, None, None,  , None, 0.0, 29.67, 29.87, 10.8, 31, 11.6

CREATE TABLE `relation` (
  store_nbr INTEGER REFERENCES sales_in_weather(store_nbr),
  station_nbr INTEGER REFERENCES weather(station_nbr)
);
Sample rows from `relation`:
1, 1
2, 14
3, 7

","CREATE TABLE `sales_in_weather` (
  date DATE PRIMARY KEY,
  store_nbr INTEGER PRIMARY KEY,
  item_nbr INTEGER PRIMARY KEY,
  units INTEGER
);
Sample rows from `sales_in_weather`:
2012-01-01, 1, 1, 0
2012-01-01, 1, 2, 0
2012-01-01, 1, 3, 0

CREATE TABLE `weather` (
  station_nbr INTEGER PRIMARY KEY,
  date DATE PRIMARY KEY,
  tmax INTEGER,
  tmin INTEGER,
  tavg INTEGER,
  depart INTEGER,
  dewpoint INTEGER,
  wetbulb INTEGER,
  heat INTEGER,
  cool INTEGER,
  sunrise TEXT,
  sunset TEXT,
  codesum TEXT,
  snowfall REAL,
  preciptotal REAL,
  stnpressure REAL,
  sealevel REAL,
  resultspeed REAL,
  resultdir INTEGER,
  avgspeed REAL
);
Sample rows from `weather`:
1, 2012-01-01, 52, 31, 42, None, 36, 40, 23, 0, None, None, RA FZFG BR, None, 0.05, 29.78, 29.92, 3.6, 20, 4.6
1, 2012-01-02, 50, 31, 41, None, 26, 35, 24, 0, None, None,  , None, 0.01, 29.44, 29.62, 9.8, 24, 10.3
1, 2012-01-03, 32, 11, 22, None, 4, 18, 43, 0, None, None,  , None, 0.0, 29.67, 29.87, 10.8, 31, 11.6

CREATE TABLE `relation` (
  store_nbr INTEGER REFERENCES sales_in_weather(store_nbr),
  station_nbr INTEGER REFERENCES weather(station_nbr)
);
Sample rows from `relation`:
1, 1
2, 14
3, 7

","weather, relation","weather.preciptotal, weather.station_nbr, relation.station_nbr, weather.date, relation.store_nbr"
world_development_indicators,On which years did Aruba got a footnote on the series code AG.LND.FRST.K2?,SELECT t2.year FROM country as t1 inner JOIN footnotes as t2 ON t1.countryCode = t2.countrycode WHERE t1.shortname = 'Aruba' AND t2.seriescode = 'AG.LND.FRST.K2',"CREATE TABLE `country` (
  CountryCode TEXT PRIMARY KEY,
  ShortName TEXT,
  TableName TEXT,
  LongName TEXT,
  Alpha2Code TEXT,
  CurrencyUnit TEXT,
  SpecialNotes TEXT,
  Region TEXT,
  IncomeGroup TEXT,
  Wb2Code TEXT,
  NationalAccountsBaseYear TEXT,
  NationalAccountsReferenceYear TEXT,
  SnaPriceValuation TEXT,
  LendingCategory TEXT,
  OtherGroups TEXT,
  SystemOfNationalAccounts TEXT,
  AlternativeConversionFactor TEXT,
  PppSurveyYear TEXT,
  BalanceOfPaymentsManualInUse TEXT,
  ExternalDebtReportingStatus TEXT,
  SystemOfTrade TEXT,
  GovernmentAccountingConcept TEXT,
  ImfDataDisseminationStandard TEXT,
  LatestPopulationCensus TEXT,
  LatestHouseholdSurvey TEXT,
  SourceOfMostRecentIncomeAndExpenditureData TEXT,
  VitalRegistrationComplete TEXT,
  LatestAgriculturalCensus TEXT,
  LatestIndustrialData INTEGER,
  LatestTradeData INTEGER,
  LatestWaterWithdrawalData INTEGER
);
Sample rows from `country`:
AFG, Afghanistan, Afghanistan, Islamic State of Afghanistan, AF, Afghan afghani, Fiscal year end: March 20; reporting period for national accounts data: FY (from 2013 are CY). National accounts data are sourced from the IMF and differ from the Central Statistics Organization numbers due to exclusion of the opium economy., South Asia, Low income, AF, 2002/03, , Value added at basic prices (VAB), IDA, HIPC, Country uses the 1993 System of National Accounts methodology., , , , Actual, General trade system, Consolidated central government, General Data Dissemination System (GDDS), 1979, Multiple Indicator Cluster Survey (MICS), 2010/11, Integrated household survey (IHS), 2008, , 2013/14, None, 2013, 2000
ALB, Albania, Albania, Republic of Albania, AL, Albanian lek, , Europe & Central Asia, Upper middle income, AL, Original chained constant price data are rescaled., 1996, Value added at basic prices (VAB), IBRD, , Country uses the 1993 System of National Accounts methodology., , Rolling, IMF Balance of Payments Manual, 6th edition., Actual, General trade system, Budgetary central government, General Data Dissemination System (GDDS), 2011, Demographic and Health Survey (DHS), 2008/09, Living Standards Measurement Study Survey (LSMS), 2011/12, Yes, 2012, 2011, 2013, 2006
DZA, Algeria, Algeria, People's Democratic Republic of Algeria, DZ, Algerian dinar, , Middle East & North Africa, Upper middle income, DZ, 1980, , Value added at basic prices (VAB), IBRD, , Country uses the 1968 System of National Accounts methodology., , 2011, IMF Balance of Payments Manual, 6th edition., Actual, Special trade system, Budgetary central government, General Data Dissemination System (GDDS), 2008, Multiple Indicator Cluster Survey (MICS), 2012, Integrated household survey (IHS), 1995, , , 2010, 2013, 2001

CREATE TABLE `footnotes` (
  Countrycode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Year TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `footnotes`:
ABW, AG.LND.FRST.K2, YR1990, Not specified
ABW, AG.LND.FRST.K2, YR2000, Not specified
ABW, AG.LND.FRST.K2, YR2005, Not specified

","CREATE TABLE `Country` (
  CountryCode TEXT PRIMARY KEY,
  ShortName TEXT,
  TableName TEXT,
  LongName TEXT,
  Alpha2Code TEXT,
  CurrencyUnit TEXT,
  SpecialNotes TEXT,
  Region TEXT,
  IncomeGroup TEXT,
  Wb2Code TEXT,
  NationalAccountsBaseYear TEXT,
  NationalAccountsReferenceYear TEXT,
  SnaPriceValuation TEXT,
  LendingCategory TEXT,
  OtherGroups TEXT,
  SystemOfNationalAccounts TEXT,
  AlternativeConversionFactor TEXT,
  PppSurveyYear TEXT,
  BalanceOfPaymentsManualInUse TEXT,
  ExternalDebtReportingStatus TEXT,
  SystemOfTrade TEXT,
  GovernmentAccountingConcept TEXT,
  ImfDataDisseminationStandard TEXT,
  LatestPopulationCensus TEXT,
  LatestHouseholdSurvey TEXT,
  SourceOfMostRecentIncomeAndExpenditureData TEXT,
  VitalRegistrationComplete TEXT,
  LatestAgriculturalCensus TEXT,
  LatestIndustrialData INTEGER,
  LatestTradeData INTEGER,
  LatestWaterWithdrawalData INTEGER
);
Sample rows from `Country`:
AFG, Afghanistan, Afghanistan, Islamic State of Afghanistan, AF, Afghan afghani, Fiscal year end: March 20; reporting period for national accounts data: FY (from 2013 are CY). National accounts data are sourced from the IMF and differ from the Central Statistics Organization numbers due to exclusion of the opium economy., South Asia, Low income, AF, 2002/03, , Value added at basic prices (VAB), IDA, HIPC, Country uses the 1993 System of National Accounts methodology., , , , Actual, General trade system, Consolidated central government, General Data Dissemination System (GDDS), 1979, Multiple Indicator Cluster Survey (MICS), 2010/11, Integrated household survey (IHS), 2008, , 2013/14, None, 2013, 2000
ALB, Albania, Albania, Republic of Albania, AL, Albanian lek, , Europe & Central Asia, Upper middle income, AL, Original chained constant price data are rescaled., 1996, Value added at basic prices (VAB), IBRD, , Country uses the 1993 System of National Accounts methodology., , Rolling, IMF Balance of Payments Manual, 6th edition., Actual, General trade system, Budgetary central government, General Data Dissemination System (GDDS), 2011, Demographic and Health Survey (DHS), 2008/09, Living Standards Measurement Study Survey (LSMS), 2011/12, Yes, 2012, 2011, 2013, 2006
DZA, Algeria, Algeria, People's Democratic Republic of Algeria, DZ, Algerian dinar, , Middle East & North Africa, Upper middle income, DZ, 1980, , Value added at basic prices (VAB), IBRD, , Country uses the 1968 System of National Accounts methodology., , 2011, IMF Balance of Payments Manual, 6th edition., Actual, Special trade system, Budgetary central government, General Data Dissemination System (GDDS), 2008, Multiple Indicator Cluster Survey (MICS), 2012, Integrated household survey (IHS), 1995, , , 2010, 2013, 2001

CREATE TABLE `Series` (
  SeriesCode TEXT PRIMARY KEY,
  Topic TEXT,
  IndicatorName TEXT,
  ShortDefinition TEXT,
  LongDefinition TEXT,
  UnitOfMeasure TEXT,
  Periodicity TEXT,
  BasePeriod TEXT,
  OtherNotes INTEGER,
  AggregationMethod TEXT,
  LimitationsAndExceptions TEXT,
  NotesFromOriginalSource TEXT,
  GeneralComments TEXT,
  Source TEXT,
  StatisticalConceptAndMethodology TEXT,
  DevelopmentRelevance TEXT,
  RelatedSourceLinks TEXT,
  OtherWebLinks INTEGER,
  RelatedIndicators INTEGER,
  LicenseType TEXT
);
Sample rows from `Series`:
BN.KLT.DINV.CD, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net (BoP, current US$), , Foreign direct investment are the net inflows of investment to acquire a lasting management interest (10 percent or more of voting stock) in an enterprise operating in an economy other than that of the investor. It is the sum of equity capital, reinvestme, , Annual, , None, , , , Note: Data are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6) and are only available from 2005 onwards. In BPM6, the headings of the financial account have been changed from credits and debits to net acquisition of financial ass, International Monetary Fund, Balance of Payments Statistics Yearbook and data files., , , , None, None, Open
BX.KLT.DINV.WD.GD.ZS, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net inflows (% of GDP), , Foreign direct investment are the net inflows of investment to acquire a lasting management interest (10 percent or more of voting stock) in an enterprise operating in an economy other than that of the investor. It is the sum of equity capital, reinvestme, , Annual, , None, Weighted average, FDI data do not give a complete picture of international investment in an economy. Balance of payments data on FDI do not include capital raised locally, an important source of investment financing in some developing countries. In addition, FDI data omit , , Note: Data starting from 2005 are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6)., International Monetary Fund, International Financial Statistics and Balance of Payments databases, World Bank, International Debt Statistics, and World Bank and OECD GDP estimates., Data on equity flows are based on balance of payments data reported by the International Monetary Fund (IMF). Foreign direct investment (FDI) data are supplemented by the World Bank staff estimates using data from the United Nations Conference on Trade an, Private financial flows - equity and debt - account for the bulk of development finance. Equity flows comprise foreign direct investment (FDI) and portfolio equity. Debt flows are financing raised through bond issuance, bank lending, and supplier credits., , None, None, Open
BX.KLT.DINV.CD.WD, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net inflows (BoP, current US$), , Foreign direct investment refers to direct investment equity flows in the reporting economy. It is the sum of equity capital, reinvestment of earnings, and other capital. Direct investment is a category of cross-border investment associated with a residen, , Annual, , None, Sum, FDI data do not give a complete picture of international investment in an economy. Balance of payments data on FDI do not include capital raised locally, an important source of investment financing in some developing countries. In addition, FDI data omit , , Note: Data starting from 2005 are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6)., International Monetary Fund, Balance of Payments database, supplemented by data from the United Nations Conference on Trade and Development and official national sources., Data on equity flows are based on balance of payments data reported by the International Monetary Fund (IMF). Foreign direct investment (FDI) data are supplemented by the World Bank staff estimates using data from the United Nations Conference on Trade an, Private financial flows - equity and debt - account for the bulk of development finance. Equity flows comprise foreign direct investment (FDI) and portfolio equity. Debt flows are financing raised through bond issuance, bank lending, and supplier credits., , None, None, Open

CREATE TABLE `CountryNotes` (
  Countrycode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Description TEXT
);
Sample rows from `CountryNotes`:
ABW, EG.EGY.PRIM.PP.KD, Sources: Estimated based on UN Energy Statistics (2014); World Development Indicators, WDI (2014)
ABW, EG.ELC.RNEW.ZS, Sources: UN Energy Statistics (2014)
ABW, EG.FEC.RNEW.ZS, Sources: UN Energy Statistics (2014)

CREATE TABLE `Footnotes` (
  Countrycode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Year TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `Footnotes`:
ABW, AG.LND.FRST.K2, YR1990, Not specified
ABW, AG.LND.FRST.K2, YR2000, Not specified
ABW, AG.LND.FRST.K2, YR2005, Not specified

CREATE TABLE `Indicators` (
  CountryName TEXT,
  CountryCode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  IndicatorName TEXT,
  IndicatorCode TEXT PRIMARY KEY,
  Year INTEGER PRIMARY KEY,
  Value INTEGER
);
Sample rows from `Indicators`:
Arab World, ARB, Adolescent fertility rate (births per 1,000 women ages 15-19), SP.ADO.TFRT, 1960, 133
Arab World, ARB, Age dependency ratio (% of working-age population), SP.POP.DPND, 1960, 87
Arab World, ARB, Age dependency ratio, old (% of working-age population), SP.POP.DPND.OL, 1960, 6

CREATE TABLE `SeriesNotes` (
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Year TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `SeriesNotes`:
SP.ADO.TFRT, YR1960, Interpolated using data for 1957 and 1962.
SP.DYN.AMRT.FE, YR1960, Interpolated using data for 1957 and 1962, if the data source is United Nations World Population Prospects.
SP.DYN.AMRT.MA, YR1960, Interpolated using data for 1957 and 1962, if the data source is United Nations World Population Prospects.

","country, footnotes","footnotes.year, country.countryCode, footnotes.countrycode, country.shortname, footnotes.seriescode"
disney,The main character Elsa is voiced by which actor and who is the director of the movie?,"SELECT t1.`voice-actor`, t3.director FROM `voice-actors` as t1 inner JOIN characters as t2 ON t1.movie = t2.movie_title inner JOIN director as t3 ON t2.movie_title = t3.name WHERE t2.hero = 'Elsa'","CREATE TABLE `voice-actors` (
  character TEXT PRIMARY KEY,
  voice-actor TEXT,
  movie TEXT REFERENCES characters(movie_title)
);
Sample rows from `voice-actors`:
Abby Mallard, Joan Cusack, Chicken Little
Abigail Gabble, Monica Evans, The Aristocats
Abis Mal, Jason Alexander, The Return of Jafar

CREATE TABLE `characters` (
  movie_title TEXT PRIMARY KEY,
  release_date TEXT,
  hero TEXT REFERENCES voice-actors(character),
  villian TEXT,
  song TEXT
);
Sample rows from `characters`:
Snow White and the Seven Dwarfs, 21-Dec-37, Snow White, Evil Queen, Some Day My Prince Will Come
Pinocchio, 7-Feb-40, Pinocchio, Stromboli, When You Wish upon a Star
Fantasia, 13-Nov-40, None, Chernabog, None

CREATE TABLE `director` (
  name TEXT PRIMARY KEY REFERENCES characters(movie_title),
  director TEXT
);
Sample rows from `director`:
Snow White and the Seven Dwarfs, David Hand
Pinocchio, Ben Sharpsteen
Fantasia, full credits

","CREATE TABLE `characters` (
  movie_title TEXT PRIMARY KEY,
  release_date TEXT,
  hero TEXT REFERENCES voice-actors(character),
  villian TEXT,
  song TEXT
);
Sample rows from `characters`:
Snow White and the Seven Dwarfs, 21-Dec-37, Snow White, Evil Queen, Some Day My Prince Will Come
Pinocchio, 7-Feb-40, Pinocchio, Stromboli, When You Wish upon a Star
Fantasia, 13-Nov-40, None, Chernabog, None

CREATE TABLE `director` (
  name TEXT PRIMARY KEY REFERENCES characters(movie_title),
  director TEXT
);
Sample rows from `director`:
Snow White and the Seven Dwarfs, David Hand
Pinocchio, Ben Sharpsteen
Fantasia, full credits

CREATE TABLE `movies_total_gross` (
  movie_title TEXT PRIMARY KEY REFERENCES characters(movie_title),
  release_date TEXT PRIMARY KEY,
  genre TEXT,
  MPAA_rating TEXT,
  total_gross TEXT,
  inflation_adjusted_gross TEXT
);
Sample rows from `movies_total_gross`:
Snow White and the Seven Dwarfs, Dec 21, 1937, Musical, G, $184,925,485, $5,228,953,251
Pinocchio, Feb 9, 1940, Adventure, G, $84,300,000, $2,188,229,052
Fantasia, Nov 13, 1940, Musical, G, $83,320,000, $2,187,090,808

CREATE TABLE `revenue` (
  Year INTEGER,
  Studio Entertainment[NI 1] REAL,
  Disney Consumer Products[NI 2] REAL,
  Disney Interactive[NI 3][Rev 1] INTEGER,
  Walt Disney Parks and Resorts REAL,
  Disney Media Networks TEXT,
  Total INTEGER
);
Sample rows from `revenue`:
1991, 2593.0, 724.0, None, 2794.0, None, 6111
1992, 3115.0, 1081.0, None, 3306.0, None, 7502
1993, 3673.4, 1415.1, None, 3440.7, None, 8529

CREATE TABLE `voice-actors` (
  character TEXT PRIMARY KEY,
  voice-actor TEXT,
  movie TEXT REFERENCES characters(movie_title)
);
Sample rows from `voice-actors`:
Abby Mallard, Joan Cusack, Chicken Little
Abigail Gabble, Monica Evans, The Aristocats
Abis Mal, Jason Alexander, The Return of Jafar

","voice-actors, characters, director","voice-actors.voice-actor, director.director, voice-actors.movie, characters.movie_title, director.name, characters.hero"
public_review_platform,Please provide the attribute values ​​of the bussinesses with fashion in Scottsdale.,SELECT t2.attribute_value FROM business as t1 inner JOIN business_Attributes as t2 ON t1.business_id = t2.business_id inner JOIN business_categories as t3 ON t1.business_id = t3.business_id inner JOIN categories as t4 ON t3.category_id = t4.category_id WHERE t4.category_name LIKE 'Fashion' AND t1.city LIKE 'Scottsdale',"CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `business_categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `business_categories`:
1, 8
1, 143
2, 18

CREATE TABLE `categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","business, business_Attributes, business_categories, categories","business_Attributes.attribute_value, business.business_id, business_Attributes.business_id, business_categories.business_id, business_categories.category_id, categories.category_id, categories.category_name, business.city"
european_football_1,What was the final score for the game Bursaspor vs Denizlispor on 2009/4/26?,"SELECT fthg, ftag FROM matchs WHERE date = '2009-04-26' AND hometeam = 'Bursaspor' AND awayteam = 'Denizlispor'","CREATE TABLE `matchs` (
  Div TEXT REFERENCES divisions(division),
  Date DATE,
  HomeTeam TEXT,
  AwayTeam TEXT,
  FTHG INTEGER,
  FTAG INTEGER,
  FTR TEXT,
  season INTEGER
);
Sample rows from `matchs`:
B1, 2020-08-08, Club Brugge, Charleroi, 0, 1, A, 2021
B1, 2020-08-08, Antwerp, Mouscron, 1, 1, D, 2021
B1, 2020-08-08, Standard, Cercle Brugge, 1, 0, H, 2021

","CREATE TABLE `divisions` (
  division TEXT PRIMARY KEY,
  name TEXT,
  country TEXT
);
Sample rows from `divisions`:
B1, Division 1A, Belgium
D1, Bundesliga, Deutschland
D2, 2. Bundesliga, Deutschland

CREATE TABLE `matchs` (
  Div TEXT REFERENCES divisions(division),
  Date DATE,
  HomeTeam TEXT,
  AwayTeam TEXT,
  FTHG INTEGER,
  FTAG INTEGER,
  FTR TEXT,
  season INTEGER
);
Sample rows from `matchs`:
B1, 2020-08-08, Club Brugge, Charleroi, 0, 1, A, 2021
B1, 2020-08-08, Antwerp, Mouscron, 1, 1, D, 2021
B1, 2020-08-08, Standard, Cercle Brugge, 1, 0, H, 2021

",matchs,"fthg, ftag, hometeam, awayteam"
codebase_comments,What is the total processed time of all solutions from the repository with the most forks?,SELECT SUM(t2.processedtime) FROM repo as t1 inner JOIN solution as t2 ON t1.id = t2.repoid WHERE t1.forks = ( SELECT MAX(forks) FROM repo ),"CREATE TABLE `repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

CREATE TABLE `solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Method, 10860640
MethodParameter, 17514858
Repo, 156550

CREATE TABLE `Method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `Method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

CREATE TABLE `MethodParameter` (
  Id INTEGER,
  MethodId TEXT,
  Type TEXT,
  Name TEXT
);
Sample rows from `MethodParameter`:
1, 1, System.String, data
2, 2, System.Int32, i
3, 2, System.Int32, declstartpos

CREATE TABLE `Repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `Repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

CREATE TABLE `Solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `Solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

","repo, solution","solution.processedtime, repo.id, solution.repoid, repo.forks, forks"
social_media,Is 3751 the location ID for tweet with ID tw-682714048199311366?,SELECT locationid FROM twitter WHERE tweetid = 'tw-682714048199311366',"CREATE TABLE `twitter` (
  TweetID TEXT PRIMARY KEY,
  Weekday TEXT,
  Hour INTEGER,
  Day INTEGER,
  Lang TEXT,
  IsReshare TEXT,
  Reach INTEGER,
  RetweetCount INTEGER,
  Likes INTEGER,
  Klout INTEGER,
  Sentiment REAL,
  text TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  UserID TEXT REFERENCES user(UserID)
);
Sample rows from `twitter`:
tw-682712873332805633, Thursday, 17, 31, en, FALSE, 44, 0, 0, 35, 0.0, We are hiring: Senior Software Engineer - Proto http://www.reqcloud.com/jobs/719865/?k=0LaPxXuFwczs1e32ZURJKrgCIDMQtRO7BquFSQthUKY&utm_source=twitter&utm_campaign=reqCloud_JobPost #job @awscloud #job #protocol #networking #aws #mediastreaming, 3751, tw-40932430
tw-682713045357998080, Thursday, 17, 31, en, TRUE, 1810, 5, 0, 53, 2.0, RT @CodeMineStatus: This is true Amazon Web Services https://aws.amazon.com/ #php #html #html5 #css #webdesign #seo #java #javascript htt, 3989, tw-3179389829
tw-682713219375476736, Thursday, 17, 31, en, FALSE, 282, 0, 0, 47, 0.0, Devops Engineer Aws Ansible Cassandra Mysql Ubuntu Ruby On Rails Jobs in Austin TX #Austin #TX #jobs #jobsearch https://www.jobfindly.com/devops-engineer-aws-ansible-cassandra-mysql-ubuntu-ruby-on-rails-jobs-austin-tx.html, 3741, tw-4624808414

","CREATE TABLE `location` (
  LocationID INTEGER,
  Country TEXT,
  State TEXT,
  StateCode TEXT,
  City TEXT
);
Sample rows from `location`:
1, Albania, Elbasan, AL, Elbasan
2, Albania, Tirane, AL, Tirana
3, Algeria, Souk Ahras, DZ, Souk Ahras

CREATE TABLE `user` (
  UserID TEXT PRIMARY KEY,
  Gender TEXT
);
Sample rows from `user`:
tw-1267804344, Unknown
tw-27229880, Male
tw-199664730, Male

CREATE TABLE `twitter` (
  TweetID TEXT PRIMARY KEY,
  Weekday TEXT,
  Hour INTEGER,
  Day INTEGER,
  Lang TEXT,
  IsReshare TEXT,
  Reach INTEGER,
  RetweetCount INTEGER,
  Likes INTEGER,
  Klout INTEGER,
  Sentiment REAL,
  text TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  UserID TEXT REFERENCES user(UserID)
);
Sample rows from `twitter`:
tw-682712873332805633, Thursday, 17, 31, en, FALSE, 44, 0, 0, 35, 0.0, We are hiring: Senior Software Engineer - Proto http://www.reqcloud.com/jobs/719865/?k=0LaPxXuFwczs1e32ZURJKrgCIDMQtRO7BquFSQthUKY&utm_source=twitter&utm_campaign=reqCloud_JobPost #job @awscloud #job #protocol #networking #aws #mediastreaming, 3751, tw-40932430
tw-682713045357998080, Thursday, 17, 31, en, TRUE, 1810, 5, 0, 53, 2.0, RT @CodeMineStatus: This is true Amazon Web Services https://aws.amazon.com/ #php #html #html5 #css #webdesign #seo #java #javascript htt, 3989, tw-3179389829
tw-682713219375476736, Thursday, 17, 31, en, FALSE, 282, 0, 0, 47, 0.0, Devops Engineer Aws Ansible Cassandra Mysql Ubuntu Ruby On Rails Jobs in Austin TX #Austin #TX #jobs #jobsearch https://www.jobfindly.com/devops-engineer-aws-ansible-cassandra-mysql-ubuntu-ruby-on-rails-jobs-austin-tx.html, 3741, tw-4624808414

",twitter,"locationid, tweetid"
public_review_platform,How many 5 star businesses have uber review votes for funny?,SELECT COUNT(business_id) FROM reviews WHERE review_stars = 5 AND review_votes_funny = 'Uber',"CREATE TABLE `reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

",reviews,"business_id, review_stars, review_votes_funny"
university,Compute the average percentage of female students.,SELECT AVG(pct_female_students) FROM university_year,"CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

","CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

CREATE TABLE `ranking_system` (
  id INTEGER,
  system_name TEXT
);
Sample rows from `ranking_system`:
1, Times Higher Education World University Ranking
2, Shanghai Ranking
3, Center for World University Rankings

CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

",university_year,pct_female_students
sales_in_weather,Tell the temperature range of the home weather station of store no.7 on 2014/4/28.,SELECT t1.tmax - t1.tmin as temprange FROM weather as t1 inner JOIN relation as t2 ON t1.station_nbr = t2.station_nbr WHERE t2.store_nbr = 7 AND t1.`date` = '2014-04-28',"CREATE TABLE `weather` (
  station_nbr INTEGER PRIMARY KEY,
  date DATE PRIMARY KEY,
  tmax INTEGER,
  tmin INTEGER,
  tavg INTEGER,
  depart INTEGER,
  dewpoint INTEGER,
  wetbulb INTEGER,
  heat INTEGER,
  cool INTEGER,
  sunrise TEXT,
  sunset TEXT,
  codesum TEXT,
  snowfall REAL,
  preciptotal REAL,
  stnpressure REAL,
  sealevel REAL,
  resultspeed REAL,
  resultdir INTEGER,
  avgspeed REAL
);
Sample rows from `weather`:
1, 2012-01-01, 52, 31, 42, None, 36, 40, 23, 0, None, None, RA FZFG BR, None, 0.05, 29.78, 29.92, 3.6, 20, 4.6
1, 2012-01-02, 50, 31, 41, None, 26, 35, 24, 0, None, None,  , None, 0.01, 29.44, 29.62, 9.8, 24, 10.3
1, 2012-01-03, 32, 11, 22, None, 4, 18, 43, 0, None, None,  , None, 0.0, 29.67, 29.87, 10.8, 31, 11.6

CREATE TABLE `relation` (
  store_nbr INTEGER REFERENCES sales_in_weather(store_nbr),
  station_nbr INTEGER REFERENCES weather(station_nbr)
);
Sample rows from `relation`:
1, 1
2, 14
3, 7

","CREATE TABLE `sales_in_weather` (
  date DATE PRIMARY KEY,
  store_nbr INTEGER PRIMARY KEY,
  item_nbr INTEGER PRIMARY KEY,
  units INTEGER
);
Sample rows from `sales_in_weather`:
2012-01-01, 1, 1, 0
2012-01-01, 1, 2, 0
2012-01-01, 1, 3, 0

CREATE TABLE `weather` (
  station_nbr INTEGER PRIMARY KEY,
  date DATE PRIMARY KEY,
  tmax INTEGER,
  tmin INTEGER,
  tavg INTEGER,
  depart INTEGER,
  dewpoint INTEGER,
  wetbulb INTEGER,
  heat INTEGER,
  cool INTEGER,
  sunrise TEXT,
  sunset TEXT,
  codesum TEXT,
  snowfall REAL,
  preciptotal REAL,
  stnpressure REAL,
  sealevel REAL,
  resultspeed REAL,
  resultdir INTEGER,
  avgspeed REAL
);
Sample rows from `weather`:
1, 2012-01-01, 52, 31, 42, None, 36, 40, 23, 0, None, None, RA FZFG BR, None, 0.05, 29.78, 29.92, 3.6, 20, 4.6
1, 2012-01-02, 50, 31, 41, None, 26, 35, 24, 0, None, None,  , None, 0.01, 29.44, 29.62, 9.8, 24, 10.3
1, 2012-01-03, 32, 11, 22, None, 4, 18, 43, 0, None, None,  , None, 0.0, 29.67, 29.87, 10.8, 31, 11.6

CREATE TABLE `relation` (
  store_nbr INTEGER REFERENCES sales_in_weather(store_nbr),
  station_nbr INTEGER REFERENCES weather(station_nbr)
);
Sample rows from `relation`:
1, 1
2, 14
3, 7

","weather, relation","weather.tmax, weather.tmin, weather.station_nbr, relation.station_nbr, relation.store_nbr, weather.date"
cookbook,List all the ingredients for Strawberry Sorbet.,SELECT t3.name FROM recipe as t1 inner JOIN quantity as t2 ON t1.recipe_id = t2.recipe_id inner JOIN ingredient as t3 ON t3.ingredient_id = t2.ingredient_id WHERE t1.title = 'Strawberry Sorbet',"CREATE TABLE `recipe` (
  recipe_id INTEGER,
  title TEXT,
  subtitle TEXT,
  servings INTEGER,
  yield_unit TEXT,
  prep_min INTEGER,
  cook_min INTEGER,
  stnd_min INTEGER,
  source TEXT,
  intro TEXT,
  directions TEXT
);
Sample rows from `recipe`:
214, Raspberry Chiffon Pie, None, 10, 1 pie, 20, 8, 305, The California Tree Fruit Agreement, None, For crust, preheat oven to 375 degrees F.
In lightly greased 10-inch pie plate, combine graham cracker crumbs, melted butter and 1/4 cup sugar. Press evenly on bottom and up side of plate. Bake 5 minutes; cool.

For filling, in medium saucepan, combine juice or water and gelatin; let stand 5 minutes. Add 1/3 cup sugar and heat over medium heat, stirring to dissolve gelatin. In blender or food processor, puree 6 plums. Add puree and raspberries to gelatin mixture. Refrigerate until mixture begins to set about 1 hour. Stir yogurt into fruit mixture. In large bowl, beat egg whites until frothy. Gradually add cream of tartar and remaining 1/3 cup sugar and beat until stiff peaks form. Gently fold egg whites into fruit mixture so as not to reduce volume. Spoon into crust. Refrigerate 4 hours or overnight. Thinly slice remaining 2 plums and garnish top of pie.
215, Apricot Yogurt Parfaits, None, 4, None, 5, 2, 65, Produce for Better Health Foundation and 5 a Day, None, Drain canned apricots, pour 1/4 cup of the juice into saucepan or microwave-safe dish. Sprinkle gelatin over juice and let stand for 5 minutes to soften. Warm over low heat or microwave at medium (50% power) for 30 seconds or until gelatin has dissolved.
 
In food processor or blender, puree canned apricots; add lemon juice brandy, yogurt and gelatin mixture and process for 30 seconds or until combined.
 
Pour into parfait or stemmed glasses or champagne flutes. Cover and refrigerate until set, at least 1 hour or overnight.
 
Just before serving arrange fresh apricots on top. (If apricots are not available substitute kiwi slices or berries). Garnish each with a small spoonful of yogurt and sprinkling of brown sugar or mint.
216, Fresh Apricot Bavarian, None, 8, None, 5, 13, 0, The California Apricot Advisory Board, Serve in stemmed glasses and top with sliced apricots for elegant endings., Drop apricots into boiling water to cover. Return to boil and simmer for 5 minutes or until skins begin to split. Drain and rinse under cold water. Halve fruit and discard skins and pits. Puree apricots in electric blender. Combine water and gelatin in small saucepan; stir over low heat until dissolved. Mix sugar, apricot puree and yogurt with a wire whip until smooth; mix in dissolved gelatin. Sweeten to taste if desired. Chill mixture until thick. Spoon into stemmed glasses.

Note: One pound fresh apricots is 15 to 20. One and a half envelopes gelatin is 4 teaspoons.

CREATE TABLE `quantity` (
  quantity_id INTEGER,
  recipe_id INTEGER REFERENCES Nutrition(recipe_id) REFERENCES Recipe(recipe_id),
  ingredient_id INTEGER REFERENCES Ingredient(ingredient_id),
  max_qty REAL,
  min_qty REAL,
  unit TEXT,
  preparation TEXT,
  optional TEXT
);
Sample rows from `quantity`:
1, 214, 1613, 2.0, 2.0, cup(s), None, FALSE
2, 214, 3334, 0.25, 0.25, cup(s), None, FALSE
3, 214, 2222, 0.5, 0.5, cup(s), melted, FALSE

CREATE TABLE `ingredient` (
  ingredient_id INTEGER,
  category TEXT,
  name TEXT,
  plural TEXT
);
Sample rows from `ingredient`:
1, dairy, 1% lowfat cottage cheese, None
6, dairy, 1% lowfat milk, None
10, Mexican products, 10-inch flour tortilla, s

","CREATE TABLE `Ingredient` (
  ingredient_id INTEGER,
  category TEXT,
  name TEXT,
  plural TEXT
);
Sample rows from `Ingredient`:
1, dairy, 1% lowfat cottage cheese, None
6, dairy, 1% lowfat milk, None
10, Mexican products, 10-inch flour tortilla, s

CREATE TABLE `Recipe` (
  recipe_id INTEGER,
  title TEXT,
  subtitle TEXT,
  servings INTEGER,
  yield_unit TEXT,
  prep_min INTEGER,
  cook_min INTEGER,
  stnd_min INTEGER,
  source TEXT,
  intro TEXT,
  directions TEXT
);
Sample rows from `Recipe`:
214, Raspberry Chiffon Pie, None, 10, 1 pie, 20, 8, 305, The California Tree Fruit Agreement, None, For crust, preheat oven to 375 degrees F.
In lightly greased 10-inch pie plate, combine graham cracker crumbs, melted butter and 1/4 cup sugar. Press evenly on bottom and up side of plate. Bake 5 minutes; cool.

For filling, in medium saucepan, combine juice or water and gelatin; let stand 5 minutes. Add 1/3 cup sugar and heat over medium heat, stirring to dissolve gelatin. In blender or food processor, puree 6 plums. Add puree and raspberries to gelatin mixture. Refrigerate until mixture begins to set about 1 hour. Stir yogurt into fruit mixture. In large bowl, beat egg whites until frothy. Gradually add cream of tartar and remaining 1/3 cup sugar and beat until stiff peaks form. Gently fold egg whites into fruit mixture so as not to reduce volume. Spoon into crust. Refrigerate 4 hours or overnight. Thinly slice remaining 2 plums and garnish top of pie.
215, Apricot Yogurt Parfaits, None, 4, None, 5, 2, 65, Produce for Better Health Foundation and 5 a Day, None, Drain canned apricots, pour 1/4 cup of the juice into saucepan or microwave-safe dish. Sprinkle gelatin over juice and let stand for 5 minutes to soften. Warm over low heat or microwave at medium (50% power) for 30 seconds or until gelatin has dissolved.
 
In food processor or blender, puree canned apricots; add lemon juice brandy, yogurt and gelatin mixture and process for 30 seconds or until combined.
 
Pour into parfait or stemmed glasses or champagne flutes. Cover and refrigerate until set, at least 1 hour or overnight.
 
Just before serving arrange fresh apricots on top. (If apricots are not available substitute kiwi slices or berries). Garnish each with a small spoonful of yogurt and sprinkling of brown sugar or mint.
216, Fresh Apricot Bavarian, None, 8, None, 5, 13, 0, The California Apricot Advisory Board, Serve in stemmed glasses and top with sliced apricots for elegant endings., Drop apricots into boiling water to cover. Return to boil and simmer for 5 minutes or until skins begin to split. Drain and rinse under cold water. Halve fruit and discard skins and pits. Puree apricots in electric blender. Combine water and gelatin in small saucepan; stir over low heat until dissolved. Mix sugar, apricot puree and yogurt with a wire whip until smooth; mix in dissolved gelatin. Sweeten to taste if desired. Chill mixture until thick. Spoon into stemmed glasses.

Note: One pound fresh apricots is 15 to 20. One and a half envelopes gelatin is 4 teaspoons.

CREATE TABLE `Nutrition` (
  recipe_id INTEGER REFERENCES Recipe(recipe_id),
  protein REAL,
  carbo REAL,
  alcohol REAL,
  total_fat REAL,
  sat_fat REAL,
  cholestrl REAL,
  sodium REAL,
  iron REAL,
  vitamin_c REAL,
  vitamin_a REAL,
  fiber REAL,
  pcnt_cal_carb REAL,
  pcnt_cal_fat REAL,
  pcnt_cal_prot REAL,
  calories REAL
);
Sample rows from `Nutrition`:
214, 5.47, 41.29, 0.0, 11.53, 2.21, 1.39, 260.78, 0.81, 8.89, 586.2, 0.87, 56.8, 35.68, 7.53, 290.79
215, 5.7, 23.75, 1.93, 1.08, 0.58, 3.48, 46.17, 0.57, 13.02, 2738.24, 0.62, 67.38, 6.89, 16.17, 141.01
216, 4.9, 26.88, 0.0, 1.1, 0.58, 3.46, 41.79, 0.37, 6.13, 1521.1, 0.34, 78.45, 7.24, 14.3, 137.06

CREATE TABLE `Quantity` (
  quantity_id INTEGER,
  recipe_id INTEGER REFERENCES Nutrition(recipe_id) REFERENCES Recipe(recipe_id),
  ingredient_id INTEGER REFERENCES Ingredient(ingredient_id),
  max_qty REAL,
  min_qty REAL,
  unit TEXT,
  preparation TEXT,
  optional TEXT
);
Sample rows from `Quantity`:
1, 214, 1613, 2.0, 2.0, cup(s), None, FALSE
2, 214, 3334, 0.25, 0.25, cup(s), None, FALSE
3, 214, 2222, 0.5, 0.5, cup(s), melted, FALSE

","recipe, quantity, ingredient","ingredient.name, recipe.recipe_id, quantity.recipe_id, ingredient.ingredient_id, quantity.ingredient_id, recipe.title"
soccer_2016,What is the city of M Chinnaswamy Stadium?,SELECT t1.city_name FROM city as t1 inner JOIN venue as t2 ON t2.city_Id = t1.city_Id WHERE t2.venue_Name = 'M Chinnaswamy Stadium',"CREATE TABLE `city` (
  City_Id INTEGER,
  City_Name TEXT,
  Country_id INTEGER
);
Sample rows from `city`:
1, Bangalore, 1
2, Chandigarh, 1
3, Delhi, 1

CREATE TABLE `venue` (
  Venue_Id INTEGER,
  Venue_Name TEXT,
  City_Id INTEGER REFERENCES City(City_Id)
);
Sample rows from `venue`:
1, M Chinnaswamy Stadium, 1
2, Punjab Cricket Association Stadium, 2
3, Feroz Shah Kotla, 3

","CREATE TABLE `Batting_Style` (
  Batting_Id INTEGER,
  Batting_hand TEXT
);
Sample rows from `Batting_Style`:
1, Left-hand bat
2, Right-hand bat

CREATE TABLE `Bowling_Style` (
  Bowling_Id INTEGER,
  Bowling_skill TEXT
);
Sample rows from `Bowling_Style`:
1, Right-arm medium
2, Right-arm offbreak
3, Right-arm fast-medium

CREATE TABLE `City` (
  City_Id INTEGER,
  City_Name TEXT,
  Country_id INTEGER
);
Sample rows from `City`:
1, Bangalore, 1
2, Chandigarh, 1
3, Delhi, 1

CREATE TABLE `Country` (
  Country_Id INTEGER REFERENCES Country(Country_Id),
  Country_Name TEXT
);
Sample rows from `Country`:
1, India
2, South Africa
3, U.A.E

CREATE TABLE `Extra_Type` (
  Extra_Id INTEGER,
  Extra_Name TEXT
);
Sample rows from `Extra_Type`:
1, legbyes
2, wides
3, byes

CREATE TABLE `Extra_Runs` (
  Match_Id INTEGER PRIMARY KEY,
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Extra_Type_Id INTEGER REFERENCES Extra_Type(Extra_Id),
  Extra_Runs INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Extra_Runs`:
335987, 1, 1, 1, 1, 1
335987, 1, 2, 2, 1, 2
335987, 1, 3, 2, 1, 1

CREATE TABLE `Out_Type` (
  Out_Id INTEGER,
  Out_Name TEXT
);
Sample rows from `Out_Type`:
1, caught
2, bowled
3, run out

CREATE TABLE `Outcome` (
  Outcome_Id INTEGER,
  Outcome_Type TEXT
);
Sample rows from `Outcome`:
1, Result
2, No Result
3, Superover

CREATE TABLE `Player` (
  Player_Id INTEGER,
  Player_Name TEXT,
  DOB DATE,
  Batting_hand INTEGER REFERENCES Batting_Style(Batting_Id),
  Bowling_skill INTEGER REFERENCES Bowling_Style(Bowling_Id),
  Country_Name INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Player`:
1, SC Ganguly, 1972-07-08, 1, 1, 1
2, BB McCullum, 1981-09-27, 2, 1, 4
3, RT Ponting, 1974-12-19, 2, 1, 5

CREATE TABLE `Rolee` (
  Role_Id INTEGER,
  Role_Desc TEXT
);
Sample rows from `Rolee`:
1, Captain
2, Keeper
3, Player

CREATE TABLE `Season` (
  Season_Id INTEGER,
  Man_of_the_Series INTEGER,
  Orange_Cap INTEGER,
  Purple_Cap INTEGER,
  Season_Year INTEGER
);
Sample rows from `Season`:
1, 32, 100, 102, 2008
2, 53, 18, 61, 2009
3, 133, 133, 131, 2010

CREATE TABLE `Team` (
  Team_Id INTEGER,
  Team_Name TEXT
);
Sample rows from `Team`:
1, Kolkata Knight Riders
2, Royal Challengers Bangalore
3, Chennai Super Kings

CREATE TABLE `Toss_Decision` (
  Toss_Id INTEGER,
  Toss_Name TEXT
);
Sample rows from `Toss_Decision`:
1, field
2, bat

CREATE TABLE `Umpire` (
  Umpire_Id INTEGER,
  Umpire_Name TEXT,
  Umpire_Country INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Umpire`:
1, Asad Rauf, 6
2, MR Benson, 10
3, Aleem Dar, 6

CREATE TABLE `Venue` (
  Venue_Id INTEGER,
  Venue_Name TEXT,
  City_Id INTEGER REFERENCES City(City_Id)
);
Sample rows from `Venue`:
1, M Chinnaswamy Stadium, 1
2, Punjab Cricket Association Stadium, 2
3, Feroz Shah Kotla, 3

CREATE TABLE `Win_By` (
  Win_Id INTEGER,
  Win_Type TEXT
);
Sample rows from `Win_By`:
1, runs
2, wickets
3, NO Result

CREATE TABLE `Match` (
  Match_Id INTEGER,
  Team_1 INTEGER REFERENCES Team(Team_Id),
  Team_2 INTEGER REFERENCES Team(Team_Id),
  Match_Date DATE,
  Season_Id INTEGER REFERENCES Season(Season_Id),
  Venue_Id INTEGER REFERENCES Venue(Venue_Id),
  Toss_Winner INTEGER REFERENCES Team(Team_Id),
  Toss_Decide INTEGER REFERENCES Toss_Decision(Toss_Id),
  Win_Type INTEGER REFERENCES Win_By(Win_Id),
  Win_Margin INTEGER,
  Outcome_type INTEGER REFERENCES Out_Type(Out_Id),
  Match_Winner INTEGER REFERENCES Team(Team_Id),
  Man_of_the_Match INTEGER REFERENCES Player(Player_Id)
);
Sample rows from `Match`:
335987, 2, 1, 2008-04-18, 1, 1, 2, 1, 1, 140, 1, 1, 2
335988, 4, 3, 2008-04-19, 1, 2, 3, 2, 1, 33, 1, 3, 19
335989, 6, 5, 2008-04-19, 1, 3, 5, 2, 2, 9, 1, 6, 90

CREATE TABLE `Ball_by_Ball` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Innings_No INTEGER PRIMARY KEY,
  Team_Batting INTEGER,
  Team_Bowling INTEGER,
  Striker_Batting_Position INTEGER,
  Striker INTEGER,
  Non_Striker INTEGER,
  Bowler INTEGER
);
Sample rows from `Ball_by_Ball`:
335987, 1, 1, 1, 1, 2, 1, 1, 2, 14
335987, 1, 1, 2, 2, 1, 1, 6, 7, 106
335987, 1, 2, 1, 1, 2, 2, 2, 1, 14

CREATE TABLE `Batsman_Scored` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Runs_Scored INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Batsman_Scored`:
335987, 1, 1, 0, 1
335987, 1, 1, 1, 2
335987, 1, 2, 0, 1

CREATE TABLE `Player_Match` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Player_Id INTEGER PRIMARY KEY REFERENCES Player(Player_Id),
  Role_Id INTEGER PRIMARY KEY REFERENCES Rolee(Role_Id),
  Team_Id INTEGER REFERENCES Team(Team_Id)
);
Sample rows from `Player_Match`:
335987, 1, 1, 1
335987, 2, 3, 1
335987, 3, 3, 1

CREATE TABLE `Wicket_Taken` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Player_Out INTEGER REFERENCES Player(Player_Id),
  Kind_Out INTEGER REFERENCES Out_Type(Out_Id),
  Fielders INTEGER REFERENCES Player(Player_Id),
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Wicket_Taken`:
335987, 2, 1, 6, 2, None, 2
335987, 3, 2, 8, 2, None, 2
335987, 5, 5, 9, 1, 83, 2

","city, venue","city.city_name, venue.city_Id, city.city_Id, venue.venue_Name"
retail_world,Identify the name of the most popular dairy product in terms of reorder quantity.,SELECT t2.productname FROM categories as t1 inner JOIN products as t2 ON t1.categoryid = t2.categoryid WHERE t1.categoryname = 'Dairy products' AND t2.reorderlevel = ( SELECT MAX(reorderlevel) FROM products ),"CREATE TABLE `categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

","categories, products","products.productname, categories.categoryid, products.categoryid, categories.categoryname, products.reorderlevel, reorderlevel"
student_loan,What is the total number of students in the school?,SELECT COUNT(name) FROM person,"CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

",person,name
image_and_language,How many images have at least 25 attributes?,SELECT COUNT(*) FROM ( SELECT img_id FROM img_obj_att GROUP BY img_id HAVING COUNT(att_class_id) > 25 ) t1,"CREATE TABLE `img_obj_att` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `img_obj_att`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

","CREATE TABLE `ATT_CLASSES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `ATT_CLASSES`:
0, building s
1, indoors
2, cluttered

CREATE TABLE `OBJ_CLASSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLASSES`:
0, awning
1, goggles
2, dot

CREATE TABLE `IMG_OBJ` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `IMG_OBJ`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `IMG_OBJ_ATT` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_OBJ_ATT`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `PRED_CLASSES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `PRED_CLASSES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `IMG_REL` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_REL`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

",img_obj_att,"img_id, att_class_id"
music_platform_2,"What is the average rating of the podcast ""Please Excuse My Dead Aunt Sally""?",SELECT AVG(t2.rating) FROM podcasts as t1 inner JOIN reviews as t2 ON t2.podcast_id = t1.podcast_id WHERE t1.title = 'Please Excuse My Dead Aunt Sally',"CREATE TABLE `podcasts` (
  podcast_id TEXT PRIMARY KEY,
  itunes_id INTEGER,
  slug TEXT,
  itunes_url TEXT,
  title TEXT
);
Sample rows from `podcasts`:
a00018b54eb342567c94dacfb2a3e504, 1313466221, scaling-global, https://podcasts.apple.com/us/podcast/scaling-global/id1313466221, Scaling Global
a00043d34e734b09246d17dc5d56f63c, 158973461, cornerstone-baptist-church-of-orlando, https://podcasts.apple.com/us/podcast/cornerstone-baptist-church-of-orlando/id158973461, Cornerstone Baptist Church of Orlando
a0004b1ef445af9dc84dad1e7821b1e3, 139076942, mystery-dancing-in-the-dark, https://podcasts.apple.com/us/podcast/mystery-dancing-in-the-dark/id139076942, Mystery: Dancing in the Dark

CREATE TABLE `reviews` (
  podcast_id TEXT REFERENCES podcasts(None),
  title TEXT,
  content TEXT,
  rating INTEGER,
  author_id TEXT,
  created_at TEXT
);
Sample rows from `reviews`:
c61aa81c9b929a66f0c1db6cbe5d8548, really interesting!, Thanks for providing these insights.  Really enjoy the variety and depth -- please keep them coming!, 5, F7E5A318989779D, 2018-04-24T12:05:16-07:00
c61aa81c9b929a66f0c1db6cbe5d8548, Must listen for anyone interested in the arts!!!, Super excited to see this podcast grow. So many fun topics to talk about...Shari is really engaging. Definitely subscribing and would recommend to anyone interested in the arts!!, 5, F6BF5472689BD12, 2018-05-09T18:14:32-07:00
ad4f2bf69c72b8db75978423c25f379e, nauseatingly left, I'm a liberal myself, but its pretty obvious and annoying that they're trying to push their beliefs on the listeners. Get a more politically diverse production staff, we like to see issues from multiple point of views not just yours., 1, 1AB95B8E6E1309E, 2019-06-11T14:53:39-07:00

","CREATE TABLE `runs` (
  run_at TEXT,
  max_rowid INTEGER,
  reviews_added INTEGER
);
Sample rows from `runs`:
2021-05-10 02:53:00, 3266481, 1215223
2021-06-06 21:34:36, 3300773, 13139
2021-07-02 18:04:55, 3329699, 11561

CREATE TABLE `podcasts` (
  podcast_id TEXT PRIMARY KEY,
  itunes_id INTEGER,
  slug TEXT,
  itunes_url TEXT,
  title TEXT
);
Sample rows from `podcasts`:
a00018b54eb342567c94dacfb2a3e504, 1313466221, scaling-global, https://podcasts.apple.com/us/podcast/scaling-global/id1313466221, Scaling Global
a00043d34e734b09246d17dc5d56f63c, 158973461, cornerstone-baptist-church-of-orlando, https://podcasts.apple.com/us/podcast/cornerstone-baptist-church-of-orlando/id158973461, Cornerstone Baptist Church of Orlando
a0004b1ef445af9dc84dad1e7821b1e3, 139076942, mystery-dancing-in-the-dark, https://podcasts.apple.com/us/podcast/mystery-dancing-in-the-dark/id139076942, Mystery: Dancing in the Dark

CREATE TABLE `reviews` (
  podcast_id TEXT REFERENCES podcasts(None),
  title TEXT,
  content TEXT,
  rating INTEGER,
  author_id TEXT,
  created_at TEXT
);
Sample rows from `reviews`:
c61aa81c9b929a66f0c1db6cbe5d8548, really interesting!, Thanks for providing these insights.  Really enjoy the variety and depth -- please keep them coming!, 5, F7E5A318989779D, 2018-04-24T12:05:16-07:00
c61aa81c9b929a66f0c1db6cbe5d8548, Must listen for anyone interested in the arts!!!, Super excited to see this podcast grow. So many fun topics to talk about...Shari is really engaging. Definitely subscribing and would recommend to anyone interested in the arts!!, 5, F6BF5472689BD12, 2018-05-09T18:14:32-07:00
ad4f2bf69c72b8db75978423c25f379e, nauseatingly left, I'm a liberal myself, but its pretty obvious and annoying that they're trying to push their beliefs on the listeners. Get a more politically diverse production staff, we like to see issues from multiple point of views not just yours., 1, 1AB95B8E6E1309E, 2019-06-11T14:53:39-07:00

CREATE TABLE `categories` (
  podcast_id TEXT PRIMARY KEY REFERENCES podcasts(None),
  category TEXT PRIMARY KEY
);
Sample rows from `categories`:
c61aa81c9b929a66f0c1db6cbe5d8548, arts
c61aa81c9b929a66f0c1db6cbe5d8548, arts-performing-arts
c61aa81c9b929a66f0c1db6cbe5d8548, music

","podcasts, reviews","reviews.rating, reviews.podcast_id, podcasts.podcast_id, podcasts.title"
legislator,"List the full names, religions, and parties of legislators who have served in Maine.","SELECT t1.official_full_name, t2.relation, t2.party FROM current as t1 inner JOIN `current-terms` as t2 ON t1.bioguide_id = t2.bioguide WHERE t2.state = 'ME' GROUP BY t1.official_full_name, t2.relation, t2.party","CREATE TABLE `current` (
  ballotpedia_id TEXT,
  bioguide_id TEXT PRIMARY KEY,
  birthday_bio DATE,
  cspan_id REAL PRIMARY KEY,
  fec_id TEXT,
  first_name TEXT,
  gender_bio TEXT,
  google_entity_id_id TEXT,
  govtrack_id INTEGER,
  house_history_id REAL,
  icpsr_id REAL,
  last_name TEXT,
  lis_id TEXT,
  maplight_id REAL,
  middle_name TEXT,
  nickname_name TEXT,
  official_full_name TEXT,
  opensecrets_id TEXT,
  religion_bio TEXT,
  suffix_name TEXT,
  thomas_id INTEGER,
  votesmart_id REAL,
  wikidata_id TEXT,
  wikipedia_id TEXT
);
Sample rows from `current`:
Sherrod Brown, B000944, 1952-11-09, 5051.0, ['H2OH13033', 'S6OH00163'], Sherrod, M, kg:/m/034s80, 400050, 9996.0, 29389.0, Brown, S307, 168.0, None, None, Sherrod Brown, N00003535, Lutheran, None, 136, 27018.0, Q381880, Sherrod Brown
Maria Cantwell, C000127, 1958-10-13, 26137.0, ['S8WA00194', 'H2WA01054'], Maria, F, kg:/m/01x68t, 300018, 10608.0, 39310.0, Cantwell, S275, 544.0, None, None, Maria Cantwell, N00007836, Roman Catholic, None, 172, 27122.0, Q22250, Maria Cantwell
Ben Cardin, C000141, 1943-10-05, 4004.0, ['H6MD03177', 'S6MD03177'], Benjamin, M, kg:/m/025k3k, 400064, 10629.0, 15408.0, Cardin, S308, 182.0, L., None, Benjamin L. Cardin, N00001955, Jewish, None, 174, 26888.0, Q723295, Ben Cardin

CREATE TABLE `current-terms` (
  address TEXT,
  bioguide TEXT PRIMARY KEY REFERENCES current(bioguide_id),
  caucus TEXT,
  chamber TEXT,
  class REAL,
  contact_form TEXT,
  district REAL,
  end TEXT PRIMARY KEY,
  fax TEXT,
  last TEXT,
  name TEXT,
  office TEXT,
  party TEXT,
  party_affiliations TEXT,
  phone TEXT,
  relation TEXT,
  rss_url TEXT,
  start TEXT,
  state TEXT,
  state_rank TEXT,
  title TEXT,
  type TEXT,
  url TEXT
);
Sample rows from `current-terms`:
None, B000944, None, None, None, None, 13.0, 1995-01-03, None, None, None, None, Democrat, None, None, None, None, 1993-01-05, OH, None, None, rep, None
None, B000944, None, None, None, None, 13.0, 1997-01-03, None, None, None, None, Democrat, None, None, None, None, 1995-01-04, OH, None, None, rep, None
None, B000944, None, None, None, None, 13.0, 1999-01-03, None, None, None, None, Democrat, None, None, None, None, 1997-01-07, OH, None, None, rep, None

","CREATE TABLE `current` (
  ballotpedia_id TEXT,
  bioguide_id TEXT PRIMARY KEY,
  birthday_bio DATE,
  cspan_id REAL PRIMARY KEY,
  fec_id TEXT,
  first_name TEXT,
  gender_bio TEXT,
  google_entity_id_id TEXT,
  govtrack_id INTEGER,
  house_history_id REAL,
  icpsr_id REAL,
  last_name TEXT,
  lis_id TEXT,
  maplight_id REAL,
  middle_name TEXT,
  nickname_name TEXT,
  official_full_name TEXT,
  opensecrets_id TEXT,
  religion_bio TEXT,
  suffix_name TEXT,
  thomas_id INTEGER,
  votesmart_id REAL,
  wikidata_id TEXT,
  wikipedia_id TEXT
);
Sample rows from `current`:
Sherrod Brown, B000944, 1952-11-09, 5051.0, ['H2OH13033', 'S6OH00163'], Sherrod, M, kg:/m/034s80, 400050, 9996.0, 29389.0, Brown, S307, 168.0, None, None, Sherrod Brown, N00003535, Lutheran, None, 136, 27018.0, Q381880, Sherrod Brown
Maria Cantwell, C000127, 1958-10-13, 26137.0, ['S8WA00194', 'H2WA01054'], Maria, F, kg:/m/01x68t, 300018, 10608.0, 39310.0, Cantwell, S275, 544.0, None, None, Maria Cantwell, N00007836, Roman Catholic, None, 172, 27122.0, Q22250, Maria Cantwell
Ben Cardin, C000141, 1943-10-05, 4004.0, ['H6MD03177', 'S6MD03177'], Benjamin, M, kg:/m/025k3k, 400064, 10629.0, 15408.0, Cardin, S308, 182.0, L., None, Benjamin L. Cardin, N00001955, Jewish, None, 174, 26888.0, Q723295, Ben Cardin

CREATE TABLE `current-terms` (
  address TEXT,
  bioguide TEXT PRIMARY KEY REFERENCES current(bioguide_id),
  caucus TEXT,
  chamber TEXT,
  class REAL,
  contact_form TEXT,
  district REAL,
  end TEXT PRIMARY KEY,
  fax TEXT,
  last TEXT,
  name TEXT,
  office TEXT,
  party TEXT,
  party_affiliations TEXT,
  phone TEXT,
  relation TEXT,
  rss_url TEXT,
  start TEXT,
  state TEXT,
  state_rank TEXT,
  title TEXT,
  type TEXT,
  url TEXT
);
Sample rows from `current-terms`:
None, B000944, None, None, None, None, 13.0, 1995-01-03, None, None, None, None, Democrat, None, None, None, None, 1993-01-05, OH, None, None, rep, None
None, B000944, None, None, None, None, 13.0, 1997-01-03, None, None, None, None, Democrat, None, None, None, None, 1995-01-04, OH, None, None, rep, None
None, B000944, None, None, None, None, 13.0, 1999-01-03, None, None, None, None, Democrat, None, None, None, None, 1997-01-07, OH, None, None, rep, None

CREATE TABLE `historical` (
  ballotpedia_id TEXT,
  bioguide_id TEXT PRIMARY KEY,
  bioguide_previous_id TEXT,
  birthday_bio TEXT,
  cspan_id TEXT,
  fec_id TEXT,
  first_name TEXT,
  gender_bio TEXT,
  google_entity_id_id TEXT,
  govtrack_id INTEGER,
  house_history_alternate_id TEXT,
  house_history_id REAL,
  icpsr_id REAL,
  last_name TEXT,
  lis_id TEXT,
  maplight_id TEXT,
  middle_name TEXT,
  nickname_name TEXT,
  official_full_name TEXT,
  opensecrets_id TEXT,
  religion_bio TEXT,
  suffix_name TEXT,
  thomas_id TEXT,
  votesmart_id TEXT,
  wikidata_id TEXT,
  wikipedia_id TEXT
);
Sample rows from `historical`:
None, B000226, None, 1745-04-02, None, None, Richard, M, kg:/m/02pz46, 401222, None, None, 507.0, Bassett, None, None, None, None, None, None, None, None, None, None, Q518823, Richard Bassett (politician)
None, B000546, None, 1742-03-21, None, None, Theodorick, M, kg:/m/033mf4, 401521, None, 9479.0, 786.0, Bland, None, None, None, None, None, None, None, None, None, None, Q1749152, Theodorick Bland (congressman)
None, B001086, None, 1743-06-16, None, None, Aedanus, M, kg:/m/03yccv, 402032, None, 10177.0, 1260.0, Burke, None, None, None, None, None, None, None, None, None, None, Q380504, Aedanus Burke

CREATE TABLE `historical-terms` (
  address TEXT,
  bioguide TEXT PRIMARY KEY REFERENCES historical(bioguide_id),
  chamber TEXT,
  class REAL,
  contact_form TEXT,
  district REAL,
  end TEXT,
  fax TEXT,
  last TEXT,
  middle TEXT,
  name TEXT,
  office TEXT,
  party TEXT,
  party_affiliations TEXT,
  phone TEXT,
  relation TEXT,
  rss_url TEXT,
  start TEXT,
  state TEXT,
  state_rank TEXT,
  title TEXT,
  type TEXT,
  url TEXT
);
Sample rows from `historical-terms`:
None, B000226, None, 2.0, None, None, 1793-03-03, None, None, None, None, None, Anti-Administration, None, None, None, None, 1789-03-04, DE, None, None, sen, None
None, B000546, None, None, None, 9.0, 1791-03-03, None, None, None, None, None, None, None, None, None, None, 1789-03-04, VA, None, None, rep, None
None, B001086, None, None, None, 2.0, 1791-03-03, None, None, None, None, None, None, None, None, None, None, 1789-03-04, SC, None, None, rep, None

CREATE TABLE `social-media` (
  bioguide TEXT PRIMARY KEY REFERENCES current(bioguide_id),
  facebook TEXT,
  facebook_id REAL,
  govtrack REAL,
  instagram TEXT,
  instagram_id REAL,
  thomas INTEGER,
  twitter TEXT,
  twitter_id REAL,
  youtube TEXT,
  youtube_id TEXT
);
Sample rows from `social-media`:
R000600, congresswomanaumuaamata, 1537155909907320.0, 412664.0, None, None, 2222, RepAmata, 3026622545.0, None, UCGdrLQbt1PYDTPsampx4t1A
Y000064, RepToddYoung, 186203844738421.0, 412428.0, None, None, 2019, RepToddYoung, 234128524.0, RepToddYoung, UCuknj4PGn91gHDNAfboZEgQ
E000295, senjoniernst, 351671691660938.0, 412667.0, senjoniernst, 1582702853.0, 2283, SenJoniErnst, 2856787757.0, None, UCLwrmtF_84FIcK3TyMs4MIw

","current, current-terms","current.official_full_name, current-terms.relation, current-terms.party, current.bioguide_id, current-terms.bioguide, current-terms.state"
address,What is the state for area code of 787?,SELECT DISTINCT t2.state FROM area_code as t1 inner JOIN zip_data as t2 ON t1.zip_code = t2.zip_code WHERE t1.area_code = 787,"CREATE TABLE `area_code` (
  zip_code INTEGER PRIMARY KEY REFERENCES zip_data(zip_code),
  area_code INTEGER PRIMARY KEY
);
Sample rows from `area_code`:
501, 631
544, 631
601, 787

CREATE TABLE `zip_data` (
  zip_code INTEGER,
  city TEXT,
  state TEXT REFERENCES state(abbreviation),
  multi_county TEXT,
  type TEXT,
  organization TEXT,
  time_zone TEXT,
  daylight_savings TEXT,
  latitude REAL,
  longitude REAL,
  elevation INTEGER,
  state_fips INTEGER,
  county_fips INTEGER,
  region TEXT,
  division TEXT,
  population_2020 INTEGER,
  population_2010 INTEGER,
  households INTEGER,
  avg_house_value INTEGER,
  avg_income_per_household INTEGER,
  persons_per_household REAL,
  white_population INTEGER,
  black_population INTEGER,
  hispanic_population INTEGER,
  asian_population INTEGER,
  american_indian_population INTEGER,
  hawaiian_population INTEGER,
  other_population INTEGER,
  male_population INTEGER,
  female_population INTEGER,
  median_age REAL,
  male_median_age REAL,
  female_median_age REAL,
  residential_mailboxes INTEGER,
  business_mailboxes INTEGER,
  total_delivery_receptacles INTEGER,
  businesses INTEGER,
  1st_quarter_payroll INTEGER,
  annual_payroll INTEGER,
  employees INTEGER,
  water_area REAL,
  land_area REAL,
  single_family_delivery_units INTEGER,
  multi_family_delivery_units INTEGER,
  total_beneficiaries INTEGER,
  retired_workers INTEGER,
  disabled_workers INTEGER,
  parents_and_widowed INTEGER,
  spouses INTEGER,
  children INTEGER,
  over_65 INTEGER,
  monthly_benefits_all INTEGER,
  monthly_benefits_retired_workers INTEGER,
  monthly_benefits_widowed INTEGER,
  CBSA INTEGER REFERENCES CBSA(CBSA)
);
Sample rows from `zip_data`:
501, Holtsville, NY, No, Unique Post Office, I R S Service Center, Eastern, Yes, 40.817923, -73.045317, 25, 36, 103, Northeast, Middle Atlantic, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0, 1, 1, 2, 0, 0, 0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35620
544, Holtsville, NY, No, Unique Post Office, Irs Service Center, Eastern, Yes, 40.788827, -73.039405, 25, 36, 103, Northeast, Middle Atlantic, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35620
601, Adjuntas, PR, No, Post Office, None, Atlantic, No, 18.196747, -66.736735, 0, 72, 1, None, None, 11737, 18570, 6525, 86200, 13092, 2.84, 17479, 663, 18486, 7, 113, 10, 558, 9078, 9492, 35.9, 34.5, 37.1, 4133, 221, 5173, 0, 0, 0, 0, 0.309, 64.348, 2419, 1264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38660

","CREATE TABLE `CBSA` (
  CBSA INTEGER,
  CBSA_name TEXT,
  CBSA_type TEXT
);
Sample rows from `CBSA`:
10300, Adrian, MI, Micro
10380, Aguadilla-Isabela, PR, Metro
10420, Akron, OH, Metro

CREATE TABLE `state` (
  abbreviation TEXT PRIMARY KEY,
  name TEXT
);
Sample rows from `state`:
AA, Armed Forces Americas
AE, Armed Forces Europe
AK, Alaska

CREATE TABLE `congress` (
  cognress_rep_id TEXT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  CID TEXT,
  party TEXT,
  state TEXT,
  abbreviation TEXT REFERENCES state(abbreviation),
  House TEXT,
  District INTEGER,
  land_area REAL
);
Sample rows from `congress`:
AK, Young, Don, N00008091, Republican, Alaska, AK, House of Repsentatives, None, 571951.26
AK-S1, Begich, Mark, N00009585, Democrat, Alaska, AK, Senate, None, 570641.0
AK-S2, Murkowski, Lisa, N00033101, Republican, Alaska, AK, Senate, None, 570641.0

CREATE TABLE `zip_data` (
  zip_code INTEGER,
  city TEXT,
  state TEXT REFERENCES state(abbreviation),
  multi_county TEXT,
  type TEXT,
  organization TEXT,
  time_zone TEXT,
  daylight_savings TEXT,
  latitude REAL,
  longitude REAL,
  elevation INTEGER,
  state_fips INTEGER,
  county_fips INTEGER,
  region TEXT,
  division TEXT,
  population_2020 INTEGER,
  population_2010 INTEGER,
  households INTEGER,
  avg_house_value INTEGER,
  avg_income_per_household INTEGER,
  persons_per_household REAL,
  white_population INTEGER,
  black_population INTEGER,
  hispanic_population INTEGER,
  asian_population INTEGER,
  american_indian_population INTEGER,
  hawaiian_population INTEGER,
  other_population INTEGER,
  male_population INTEGER,
  female_population INTEGER,
  median_age REAL,
  male_median_age REAL,
  female_median_age REAL,
  residential_mailboxes INTEGER,
  business_mailboxes INTEGER,
  total_delivery_receptacles INTEGER,
  businesses INTEGER,
  1st_quarter_payroll INTEGER,
  annual_payroll INTEGER,
  employees INTEGER,
  water_area REAL,
  land_area REAL,
  single_family_delivery_units INTEGER,
  multi_family_delivery_units INTEGER,
  total_beneficiaries INTEGER,
  retired_workers INTEGER,
  disabled_workers INTEGER,
  parents_and_widowed INTEGER,
  spouses INTEGER,
  children INTEGER,
  over_65 INTEGER,
  monthly_benefits_all INTEGER,
  monthly_benefits_retired_workers INTEGER,
  monthly_benefits_widowed INTEGER,
  CBSA INTEGER REFERENCES CBSA(CBSA)
);
Sample rows from `zip_data`:
501, Holtsville, NY, No, Unique Post Office, I R S Service Center, Eastern, Yes, 40.817923, -73.045317, 25, 36, 103, Northeast, Middle Atlantic, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0, 1, 1, 2, 0, 0, 0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35620
544, Holtsville, NY, No, Unique Post Office, Irs Service Center, Eastern, Yes, 40.788827, -73.039405, 25, 36, 103, Northeast, Middle Atlantic, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35620
601, Adjuntas, PR, No, Post Office, None, Atlantic, No, 18.196747, -66.736735, 0, 72, 1, None, None, 11737, 18570, 6525, 86200, 13092, 2.84, 17479, 663, 18486, 7, 113, 10, 558, 9078, 9492, 35.9, 34.5, 37.1, 4133, 221, 5173, 0, 0, 0, 0, 0.309, 64.348, 2419, 1264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38660

CREATE TABLE `alias` (
  zip_code INTEGER REFERENCES zip_data(zip_code),
  alias TEXT
);
Sample rows from `alias`:
501, Holtsville
544, Holtsville
601, Adjuntas

CREATE TABLE `area_code` (
  zip_code INTEGER PRIMARY KEY REFERENCES zip_data(zip_code),
  area_code INTEGER PRIMARY KEY
);
Sample rows from `area_code`:
501, 631
544, 631
601, 787

CREATE TABLE `avoid` (
  zip_code INTEGER PRIMARY KEY REFERENCES zip_data(zip_code),
  bad_alias TEXT PRIMARY KEY
);
Sample rows from `avoid`:
501, Internal Revenue Service
544, Internal Revenue Service
601, Colinas Del Gigante

CREATE TABLE `country` (
  zip_code INTEGER PRIMARY KEY REFERENCES zip_data(zip_code),
  county TEXT PRIMARY KEY,
  state TEXT REFERENCES state(abbreviation)
);
Sample rows from `country`:
501, SUFFOLK, NY
544, SUFFOLK, NY
601, ADJUNTAS, PR

CREATE TABLE `zip_congress` (
  zip_code INTEGER PRIMARY KEY REFERENCES zip_data(zip_code),
  district TEXT PRIMARY KEY REFERENCES congress(cognress_rep_id)
);
Sample rows from `zip_congress`:
501, NY-1
601, PR
602, PR

","area_code, zip_data","zip_data.state, area_code.zip_code, zip_data.zip_code, area_code.area_code"
retail_world,"Among the supplied products from Australia, describe the discontinued products and the category.","SELECT t2.productname, t3.categoryname FROM suppliers as t1 inner JOIN products as t2 ON t1.supplierid = t2.supplierid inner JOIN categories as t3 ON t2.categoryid = t3.categoryid WHERE t1.country = 'Australia' AND t2.discontinued = 1","CREATE TABLE `suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

","suppliers, products, categories","products.productname, categories.categoryname, suppliers.supplierid, products.supplierid, products.categoryid, categories.categoryid, suppliers.country, products.discontinued"
retails,What is the supply cost of large plated tin?,SELECT t2.ps_supplycost FROM part as t1 inner JOIN partsupp as t2 ON t1.p_partkey = t2.ps_partkey WHERE t1.p_type = 'large plated tin',"CREATE TABLE `part` (
  p_partkey INTEGER,
  p_type TEXT,
  p_size INTEGER,
  p_brand TEXT,
  p_name TEXT,
  p_container TEXT,
  p_mfgr TEXT,
  p_retailprice REAL,
  p_comment TEXT
);
Sample rows from `part`:
1, LARGE PLATED TIN, 31, Brand#43, burlywood plum powder puff mint, LG BAG, Manufacturer#4, 901.0, blithely busy reque
2, LARGE POLISHED STEEL, 4, Brand#55, hot spring dodger dim light, LG CASE, Manufacturer#5, 902.0, even ironic requests s
3, STANDARD PLATED COPPER, 30, Brand#53, dark slate grey steel misty, WRAP CASE, Manufacturer#5, 903.0, slyly ironic fox

CREATE TABLE `partsupp` (
  ps_partkey INTEGER PRIMARY KEY REFERENCES part(p_partkey),
  ps_suppkey INTEGER PRIMARY KEY REFERENCES supplier(s_suppkey),
  ps_supplycost REAL,
  ps_availqty INTEGER,
  ps_comment TEXT
);
Sample rows from `partsupp`:
1, 2, 400.75, 1111, carefully ironic deposits use against the carefully unusual accounts. slyly silent platelets nag quickly even
1, 2502, 702.61, 3999, slyly regular accounts serve carefully. asymptotes after the slyly even instructions cajole quickly ironic requests. pending dugouts about the slyly 
1, 5002, 383.95, 7411, carefully special ideas are slyly. slyly ironic epitaphs use pending pending foxes. furiously express pinto beans lose quiet even requests: special final packages ar

","CREATE TABLE `customer` (
  c_custkey INTEGER,
  c_mktsegment TEXT,
  c_nationkey INTEGER REFERENCES nation(n_nationkey),
  c_name TEXT,
  c_address TEXT,
  c_phone TEXT,
  c_acctbal REAL,
  c_comment TEXT
);
Sample rows from `customer`:
1, BUILDING, 8, Customer#000000001, KwX3hMHjZ6, 937-241-3198, 3560.03, ironic excuses detect slyly silent requests. requests according to the exc
2, MACHINERY, 16, Customer#000000002, ioUn,eqTTXOdo, 906-965-7556, 7550.21, final express accounts mold slyly. ironic accounts cajole! quickly express a
3, FURNITURE, 11, Customer#000000003, YddJqmIdouNT9Yj, 328-750-7603, -926.96, carefully express foxes sleep carefully. pending platelets sleep thinly for t

CREATE TABLE `lineitem` (
  l_shipdate DATE,
  l_orderkey INTEGER PRIMARY KEY REFERENCES orders(o_orderkey),
  l_discount REAL,
  l_extendedprice REAL,
  l_suppkey INTEGER REFERENCES partsupp(ps_suppkey),
  l_quantity INTEGER,
  l_returnflag TEXT,
  l_partkey INTEGER REFERENCES partsupp(ps_partkey),
  l_linestatus TEXT,
  l_tax REAL,
  l_commitdate DATE,
  l_receiptdate DATE,
  l_shipmode TEXT,
  l_linenumber INTEGER PRIMARY KEY,
  l_shipinstruct TEXT,
  l_comment TEXT
);
Sample rows from `lineitem`:
1995-08-16, 1, 0.1, 58303.08, 6296, 33, N, 98768, O, 0.06, 1995-07-12, 1995-09-14, RAIL, 1, NONE, carefully bo
1995-08-13, 1, 0.09, 16947.7, 8776, 10, N, 23771, O, 0.08, 1995-07-09, 1995-08-27, TRUCK, 2, TAKE BACK RETURN, blithely regular pac
1995-06-17, 1, 0.1, 63642.9, 3859, 34, N, 113858, O, 0.08, 1995-05-22, 1995-06-30, SHIP, 3, COLLECT COD, ironic accounts sleep furiously silen

CREATE TABLE `nation` (
  n_nationkey INTEGER,
  n_name TEXT,
  n_regionkey INTEGER REFERENCES region(r_regionkey),
  n_comment TEXT
);
Sample rows from `nation`:
0, ALGERIA, 0, slyly express pinto beans cajole idly. deposits use blithely unusual packages? fluffily final accounts x-r
1, ARGENTINA, 1, instructions detect blithely stealthily pending packages
2, BRAZIL, 1, blithely unusual deposits are quickly--

CREATE TABLE `orders` (
  o_orderdate DATE,
  o_orderkey INTEGER,
  o_custkey INTEGER REFERENCES customer(c_custkey),
  o_orderpriority TEXT,
  o_shippriority INTEGER,
  o_clerk TEXT,
  o_orderstatus TEXT,
  o_totalprice REAL,
  o_comment TEXT
);
Sample rows from `orders`:
1995-04-19, 1, 73100, 4-NOT SPECIFIED, 0, Clerk#000000916, P, 203198.56, final packages sleep blithely packa
1996-11-04, 2, 92861, 1-URGENT, 0, Clerk#000000373, O, 317719.99, final excuses about the ironic even deposits detect express request
1992-02-15, 3, 44875, 1-URGENT, 0, Clerk#000000485, F, 146674.98, final final deposits cajole foxes. blithely pendin

CREATE TABLE `part` (
  p_partkey INTEGER,
  p_type TEXT,
  p_size INTEGER,
  p_brand TEXT,
  p_name TEXT,
  p_container TEXT,
  p_mfgr TEXT,
  p_retailprice REAL,
  p_comment TEXT
);
Sample rows from `part`:
1, LARGE PLATED TIN, 31, Brand#43, burlywood plum powder puff mint, LG BAG, Manufacturer#4, 901.0, blithely busy reque
2, LARGE POLISHED STEEL, 4, Brand#55, hot spring dodger dim light, LG CASE, Manufacturer#5, 902.0, even ironic requests s
3, STANDARD PLATED COPPER, 30, Brand#53, dark slate grey steel misty, WRAP CASE, Manufacturer#5, 903.0, slyly ironic fox

CREATE TABLE `partsupp` (
  ps_partkey INTEGER PRIMARY KEY REFERENCES part(p_partkey),
  ps_suppkey INTEGER PRIMARY KEY REFERENCES supplier(s_suppkey),
  ps_supplycost REAL,
  ps_availqty INTEGER,
  ps_comment TEXT
);
Sample rows from `partsupp`:
1, 2, 400.75, 1111, carefully ironic deposits use against the carefully unusual accounts. slyly silent platelets nag quickly even
1, 2502, 702.61, 3999, slyly regular accounts serve carefully. asymptotes after the slyly even instructions cajole quickly ironic requests. pending dugouts about the slyly 
1, 5002, 383.95, 7411, carefully special ideas are slyly. slyly ironic epitaphs use pending pending foxes. furiously express pinto beans lose quiet even requests: special final packages ar

CREATE TABLE `region` (
  r_regionkey INTEGER,
  r_name TEXT,
  r_comment TEXT
);
Sample rows from `region`:
0, AFRICA, asymptotes sublate after the r
1, AMERICA, requests affix quickly final tithes. blithely even packages above the a
2, ASIA, accounts cajole carefully according to the carefully exp

CREATE TABLE `supplier` (
  s_suppkey INTEGER,
  s_nationkey INTEGER REFERENCES nation(n_nationkey),
  s_comment TEXT,
  s_name TEXT,
  s_address TEXT,
  s_phone TEXT,
  s_acctbal REAL
);
Sample rows from `supplier`:
1, 13, blithely final pearls are. instructions thra, Supplier#000000001, ,wWs4pnykQOFl8mgVCU8EZMXqZs1w, 800-807-9579, 3082.86
2, 5, requests integrate fluffily. fluffily ironic deposits wake. bold, Supplier#000000002, WkXT6MSAJrp4qWq3W9N, 348-617-6055, 3009.73
3, 22, carefully express ideas shall have to unwin, Supplier#000000003, KjUqa42JEHaRDVQTHV6Yq2h, 471-986-9888, 9159.78

","part, partsupp","partsupp.ps_supplycost, part.p_partkey, partsupp.ps_partkey, part.p_type"
world_development_indicators,Which country have completed vital registration? List all the countries.,SELECT shortname FROM country WHERE vitalregistrationcomplete = 'Yes',"CREATE TABLE `country` (
  CountryCode TEXT PRIMARY KEY,
  ShortName TEXT,
  TableName TEXT,
  LongName TEXT,
  Alpha2Code TEXT,
  CurrencyUnit TEXT,
  SpecialNotes TEXT,
  Region TEXT,
  IncomeGroup TEXT,
  Wb2Code TEXT,
  NationalAccountsBaseYear TEXT,
  NationalAccountsReferenceYear TEXT,
  SnaPriceValuation TEXT,
  LendingCategory TEXT,
  OtherGroups TEXT,
  SystemOfNationalAccounts TEXT,
  AlternativeConversionFactor TEXT,
  PppSurveyYear TEXT,
  BalanceOfPaymentsManualInUse TEXT,
  ExternalDebtReportingStatus TEXT,
  SystemOfTrade TEXT,
  GovernmentAccountingConcept TEXT,
  ImfDataDisseminationStandard TEXT,
  LatestPopulationCensus TEXT,
  LatestHouseholdSurvey TEXT,
  SourceOfMostRecentIncomeAndExpenditureData TEXT,
  VitalRegistrationComplete TEXT,
  LatestAgriculturalCensus TEXT,
  LatestIndustrialData INTEGER,
  LatestTradeData INTEGER,
  LatestWaterWithdrawalData INTEGER
);
Sample rows from `country`:
AFG, Afghanistan, Afghanistan, Islamic State of Afghanistan, AF, Afghan afghani, Fiscal year end: March 20; reporting period for national accounts data: FY (from 2013 are CY). National accounts data are sourced from the IMF and differ from the Central Statistics Organization numbers due to exclusion of the opium economy., South Asia, Low income, AF, 2002/03, , Value added at basic prices (VAB), IDA, HIPC, Country uses the 1993 System of National Accounts methodology., , , , Actual, General trade system, Consolidated central government, General Data Dissemination System (GDDS), 1979, Multiple Indicator Cluster Survey (MICS), 2010/11, Integrated household survey (IHS), 2008, , 2013/14, None, 2013, 2000
ALB, Albania, Albania, Republic of Albania, AL, Albanian lek, , Europe & Central Asia, Upper middle income, AL, Original chained constant price data are rescaled., 1996, Value added at basic prices (VAB), IBRD, , Country uses the 1993 System of National Accounts methodology., , Rolling, IMF Balance of Payments Manual, 6th edition., Actual, General trade system, Budgetary central government, General Data Dissemination System (GDDS), 2011, Demographic and Health Survey (DHS), 2008/09, Living Standards Measurement Study Survey (LSMS), 2011/12, Yes, 2012, 2011, 2013, 2006
DZA, Algeria, Algeria, People's Democratic Republic of Algeria, DZ, Algerian dinar, , Middle East & North Africa, Upper middle income, DZ, 1980, , Value added at basic prices (VAB), IBRD, , Country uses the 1968 System of National Accounts methodology., , 2011, IMF Balance of Payments Manual, 6th edition., Actual, Special trade system, Budgetary central government, General Data Dissemination System (GDDS), 2008, Multiple Indicator Cluster Survey (MICS), 2012, Integrated household survey (IHS), 1995, , , 2010, 2013, 2001

","CREATE TABLE `Country` (
  CountryCode TEXT PRIMARY KEY,
  ShortName TEXT,
  TableName TEXT,
  LongName TEXT,
  Alpha2Code TEXT,
  CurrencyUnit TEXT,
  SpecialNotes TEXT,
  Region TEXT,
  IncomeGroup TEXT,
  Wb2Code TEXT,
  NationalAccountsBaseYear TEXT,
  NationalAccountsReferenceYear TEXT,
  SnaPriceValuation TEXT,
  LendingCategory TEXT,
  OtherGroups TEXT,
  SystemOfNationalAccounts TEXT,
  AlternativeConversionFactor TEXT,
  PppSurveyYear TEXT,
  BalanceOfPaymentsManualInUse TEXT,
  ExternalDebtReportingStatus TEXT,
  SystemOfTrade TEXT,
  GovernmentAccountingConcept TEXT,
  ImfDataDisseminationStandard TEXT,
  LatestPopulationCensus TEXT,
  LatestHouseholdSurvey TEXT,
  SourceOfMostRecentIncomeAndExpenditureData TEXT,
  VitalRegistrationComplete TEXT,
  LatestAgriculturalCensus TEXT,
  LatestIndustrialData INTEGER,
  LatestTradeData INTEGER,
  LatestWaterWithdrawalData INTEGER
);
Sample rows from `Country`:
AFG, Afghanistan, Afghanistan, Islamic State of Afghanistan, AF, Afghan afghani, Fiscal year end: March 20; reporting period for national accounts data: FY (from 2013 are CY). National accounts data are sourced from the IMF and differ from the Central Statistics Organization numbers due to exclusion of the opium economy., South Asia, Low income, AF, 2002/03, , Value added at basic prices (VAB), IDA, HIPC, Country uses the 1993 System of National Accounts methodology., , , , Actual, General trade system, Consolidated central government, General Data Dissemination System (GDDS), 1979, Multiple Indicator Cluster Survey (MICS), 2010/11, Integrated household survey (IHS), 2008, , 2013/14, None, 2013, 2000
ALB, Albania, Albania, Republic of Albania, AL, Albanian lek, , Europe & Central Asia, Upper middle income, AL, Original chained constant price data are rescaled., 1996, Value added at basic prices (VAB), IBRD, , Country uses the 1993 System of National Accounts methodology., , Rolling, IMF Balance of Payments Manual, 6th edition., Actual, General trade system, Budgetary central government, General Data Dissemination System (GDDS), 2011, Demographic and Health Survey (DHS), 2008/09, Living Standards Measurement Study Survey (LSMS), 2011/12, Yes, 2012, 2011, 2013, 2006
DZA, Algeria, Algeria, People's Democratic Republic of Algeria, DZ, Algerian dinar, , Middle East & North Africa, Upper middle income, DZ, 1980, , Value added at basic prices (VAB), IBRD, , Country uses the 1968 System of National Accounts methodology., , 2011, IMF Balance of Payments Manual, 6th edition., Actual, Special trade system, Budgetary central government, General Data Dissemination System (GDDS), 2008, Multiple Indicator Cluster Survey (MICS), 2012, Integrated household survey (IHS), 1995, , , 2010, 2013, 2001

CREATE TABLE `Series` (
  SeriesCode TEXT PRIMARY KEY,
  Topic TEXT,
  IndicatorName TEXT,
  ShortDefinition TEXT,
  LongDefinition TEXT,
  UnitOfMeasure TEXT,
  Periodicity TEXT,
  BasePeriod TEXT,
  OtherNotes INTEGER,
  AggregationMethod TEXT,
  LimitationsAndExceptions TEXT,
  NotesFromOriginalSource TEXT,
  GeneralComments TEXT,
  Source TEXT,
  StatisticalConceptAndMethodology TEXT,
  DevelopmentRelevance TEXT,
  RelatedSourceLinks TEXT,
  OtherWebLinks INTEGER,
  RelatedIndicators INTEGER,
  LicenseType TEXT
);
Sample rows from `Series`:
BN.KLT.DINV.CD, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net (BoP, current US$), , Foreign direct investment are the net inflows of investment to acquire a lasting management interest (10 percent or more of voting stock) in an enterprise operating in an economy other than that of the investor. It is the sum of equity capital, reinvestme, , Annual, , None, , , , Note: Data are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6) and are only available from 2005 onwards. In BPM6, the headings of the financial account have been changed from credits and debits to net acquisition of financial ass, International Monetary Fund, Balance of Payments Statistics Yearbook and data files., , , , None, None, Open
BX.KLT.DINV.WD.GD.ZS, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net inflows (% of GDP), , Foreign direct investment are the net inflows of investment to acquire a lasting management interest (10 percent or more of voting stock) in an enterprise operating in an economy other than that of the investor. It is the sum of equity capital, reinvestme, , Annual, , None, Weighted average, FDI data do not give a complete picture of international investment in an economy. Balance of payments data on FDI do not include capital raised locally, an important source of investment financing in some developing countries. In addition, FDI data omit , , Note: Data starting from 2005 are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6)., International Monetary Fund, International Financial Statistics and Balance of Payments databases, World Bank, International Debt Statistics, and World Bank and OECD GDP estimates., Data on equity flows are based on balance of payments data reported by the International Monetary Fund (IMF). Foreign direct investment (FDI) data are supplemented by the World Bank staff estimates using data from the United Nations Conference on Trade an, Private financial flows - equity and debt - account for the bulk of development finance. Equity flows comprise foreign direct investment (FDI) and portfolio equity. Debt flows are financing raised through bond issuance, bank lending, and supplier credits., , None, None, Open
BX.KLT.DINV.CD.WD, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net inflows (BoP, current US$), , Foreign direct investment refers to direct investment equity flows in the reporting economy. It is the sum of equity capital, reinvestment of earnings, and other capital. Direct investment is a category of cross-border investment associated with a residen, , Annual, , None, Sum, FDI data do not give a complete picture of international investment in an economy. Balance of payments data on FDI do not include capital raised locally, an important source of investment financing in some developing countries. In addition, FDI data omit , , Note: Data starting from 2005 are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6)., International Monetary Fund, Balance of Payments database, supplemented by data from the United Nations Conference on Trade and Development and official national sources., Data on equity flows are based on balance of payments data reported by the International Monetary Fund (IMF). Foreign direct investment (FDI) data are supplemented by the World Bank staff estimates using data from the United Nations Conference on Trade an, Private financial flows - equity and debt - account for the bulk of development finance. Equity flows comprise foreign direct investment (FDI) and portfolio equity. Debt flows are financing raised through bond issuance, bank lending, and supplier credits., , None, None, Open

CREATE TABLE `CountryNotes` (
  Countrycode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Description TEXT
);
Sample rows from `CountryNotes`:
ABW, EG.EGY.PRIM.PP.KD, Sources: Estimated based on UN Energy Statistics (2014); World Development Indicators, WDI (2014)
ABW, EG.ELC.RNEW.ZS, Sources: UN Energy Statistics (2014)
ABW, EG.FEC.RNEW.ZS, Sources: UN Energy Statistics (2014)

CREATE TABLE `Footnotes` (
  Countrycode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Year TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `Footnotes`:
ABW, AG.LND.FRST.K2, YR1990, Not specified
ABW, AG.LND.FRST.K2, YR2000, Not specified
ABW, AG.LND.FRST.K2, YR2005, Not specified

CREATE TABLE `Indicators` (
  CountryName TEXT,
  CountryCode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  IndicatorName TEXT,
  IndicatorCode TEXT PRIMARY KEY,
  Year INTEGER PRIMARY KEY,
  Value INTEGER
);
Sample rows from `Indicators`:
Arab World, ARB, Adolescent fertility rate (births per 1,000 women ages 15-19), SP.ADO.TFRT, 1960, 133
Arab World, ARB, Age dependency ratio (% of working-age population), SP.POP.DPND, 1960, 87
Arab World, ARB, Age dependency ratio, old (% of working-age population), SP.POP.DPND.OL, 1960, 6

CREATE TABLE `SeriesNotes` (
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Year TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `SeriesNotes`:
SP.ADO.TFRT, YR1960, Interpolated using data for 1957 and 1962.
SP.DYN.AMRT.FE, YR1960, Interpolated using data for 1957 and 1962, if the data source is United Nations World Population Prospects.
SP.DYN.AMRT.MA, YR1960, Interpolated using data for 1957 and 1962, if the data source is United Nations World Population Prospects.

",country,"shortname, vitalregistrationcomplete"
world_development_indicators,Which countries use Euro as their currency? List down the table name.,SELECT tablename FROM country WHERE currencyunit = 'Euro',"CREATE TABLE `country` (
  CountryCode TEXT PRIMARY KEY,
  ShortName TEXT,
  TableName TEXT,
  LongName TEXT,
  Alpha2Code TEXT,
  CurrencyUnit TEXT,
  SpecialNotes TEXT,
  Region TEXT,
  IncomeGroup TEXT,
  Wb2Code TEXT,
  NationalAccountsBaseYear TEXT,
  NationalAccountsReferenceYear TEXT,
  SnaPriceValuation TEXT,
  LendingCategory TEXT,
  OtherGroups TEXT,
  SystemOfNationalAccounts TEXT,
  AlternativeConversionFactor TEXT,
  PppSurveyYear TEXT,
  BalanceOfPaymentsManualInUse TEXT,
  ExternalDebtReportingStatus TEXT,
  SystemOfTrade TEXT,
  GovernmentAccountingConcept TEXT,
  ImfDataDisseminationStandard TEXT,
  LatestPopulationCensus TEXT,
  LatestHouseholdSurvey TEXT,
  SourceOfMostRecentIncomeAndExpenditureData TEXT,
  VitalRegistrationComplete TEXT,
  LatestAgriculturalCensus TEXT,
  LatestIndustrialData INTEGER,
  LatestTradeData INTEGER,
  LatestWaterWithdrawalData INTEGER
);
Sample rows from `country`:
AFG, Afghanistan, Afghanistan, Islamic State of Afghanistan, AF, Afghan afghani, Fiscal year end: March 20; reporting period for national accounts data: FY (from 2013 are CY). National accounts data are sourced from the IMF and differ from the Central Statistics Organization numbers due to exclusion of the opium economy., South Asia, Low income, AF, 2002/03, , Value added at basic prices (VAB), IDA, HIPC, Country uses the 1993 System of National Accounts methodology., , , , Actual, General trade system, Consolidated central government, General Data Dissemination System (GDDS), 1979, Multiple Indicator Cluster Survey (MICS), 2010/11, Integrated household survey (IHS), 2008, , 2013/14, None, 2013, 2000
ALB, Albania, Albania, Republic of Albania, AL, Albanian lek, , Europe & Central Asia, Upper middle income, AL, Original chained constant price data are rescaled., 1996, Value added at basic prices (VAB), IBRD, , Country uses the 1993 System of National Accounts methodology., , Rolling, IMF Balance of Payments Manual, 6th edition., Actual, General trade system, Budgetary central government, General Data Dissemination System (GDDS), 2011, Demographic and Health Survey (DHS), 2008/09, Living Standards Measurement Study Survey (LSMS), 2011/12, Yes, 2012, 2011, 2013, 2006
DZA, Algeria, Algeria, People's Democratic Republic of Algeria, DZ, Algerian dinar, , Middle East & North Africa, Upper middle income, DZ, 1980, , Value added at basic prices (VAB), IBRD, , Country uses the 1968 System of National Accounts methodology., , 2011, IMF Balance of Payments Manual, 6th edition., Actual, Special trade system, Budgetary central government, General Data Dissemination System (GDDS), 2008, Multiple Indicator Cluster Survey (MICS), 2012, Integrated household survey (IHS), 1995, , , 2010, 2013, 2001

","CREATE TABLE `Country` (
  CountryCode TEXT PRIMARY KEY,
  ShortName TEXT,
  TableName TEXT,
  LongName TEXT,
  Alpha2Code TEXT,
  CurrencyUnit TEXT,
  SpecialNotes TEXT,
  Region TEXT,
  IncomeGroup TEXT,
  Wb2Code TEXT,
  NationalAccountsBaseYear TEXT,
  NationalAccountsReferenceYear TEXT,
  SnaPriceValuation TEXT,
  LendingCategory TEXT,
  OtherGroups TEXT,
  SystemOfNationalAccounts TEXT,
  AlternativeConversionFactor TEXT,
  PppSurveyYear TEXT,
  BalanceOfPaymentsManualInUse TEXT,
  ExternalDebtReportingStatus TEXT,
  SystemOfTrade TEXT,
  GovernmentAccountingConcept TEXT,
  ImfDataDisseminationStandard TEXT,
  LatestPopulationCensus TEXT,
  LatestHouseholdSurvey TEXT,
  SourceOfMostRecentIncomeAndExpenditureData TEXT,
  VitalRegistrationComplete TEXT,
  LatestAgriculturalCensus TEXT,
  LatestIndustrialData INTEGER,
  LatestTradeData INTEGER,
  LatestWaterWithdrawalData INTEGER
);
Sample rows from `Country`:
AFG, Afghanistan, Afghanistan, Islamic State of Afghanistan, AF, Afghan afghani, Fiscal year end: March 20; reporting period for national accounts data: FY (from 2013 are CY). National accounts data are sourced from the IMF and differ from the Central Statistics Organization numbers due to exclusion of the opium economy., South Asia, Low income, AF, 2002/03, , Value added at basic prices (VAB), IDA, HIPC, Country uses the 1993 System of National Accounts methodology., , , , Actual, General trade system, Consolidated central government, General Data Dissemination System (GDDS), 1979, Multiple Indicator Cluster Survey (MICS), 2010/11, Integrated household survey (IHS), 2008, , 2013/14, None, 2013, 2000
ALB, Albania, Albania, Republic of Albania, AL, Albanian lek, , Europe & Central Asia, Upper middle income, AL, Original chained constant price data are rescaled., 1996, Value added at basic prices (VAB), IBRD, , Country uses the 1993 System of National Accounts methodology., , Rolling, IMF Balance of Payments Manual, 6th edition., Actual, General trade system, Budgetary central government, General Data Dissemination System (GDDS), 2011, Demographic and Health Survey (DHS), 2008/09, Living Standards Measurement Study Survey (LSMS), 2011/12, Yes, 2012, 2011, 2013, 2006
DZA, Algeria, Algeria, People's Democratic Republic of Algeria, DZ, Algerian dinar, , Middle East & North Africa, Upper middle income, DZ, 1980, , Value added at basic prices (VAB), IBRD, , Country uses the 1968 System of National Accounts methodology., , 2011, IMF Balance of Payments Manual, 6th edition., Actual, Special trade system, Budgetary central government, General Data Dissemination System (GDDS), 2008, Multiple Indicator Cluster Survey (MICS), 2012, Integrated household survey (IHS), 1995, , , 2010, 2013, 2001

CREATE TABLE `Series` (
  SeriesCode TEXT PRIMARY KEY,
  Topic TEXT,
  IndicatorName TEXT,
  ShortDefinition TEXT,
  LongDefinition TEXT,
  UnitOfMeasure TEXT,
  Periodicity TEXT,
  BasePeriod TEXT,
  OtherNotes INTEGER,
  AggregationMethod TEXT,
  LimitationsAndExceptions TEXT,
  NotesFromOriginalSource TEXT,
  GeneralComments TEXT,
  Source TEXT,
  StatisticalConceptAndMethodology TEXT,
  DevelopmentRelevance TEXT,
  RelatedSourceLinks TEXT,
  OtherWebLinks INTEGER,
  RelatedIndicators INTEGER,
  LicenseType TEXT
);
Sample rows from `Series`:
BN.KLT.DINV.CD, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net (BoP, current US$), , Foreign direct investment are the net inflows of investment to acquire a lasting management interest (10 percent or more of voting stock) in an enterprise operating in an economy other than that of the investor. It is the sum of equity capital, reinvestme, , Annual, , None, , , , Note: Data are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6) and are only available from 2005 onwards. In BPM6, the headings of the financial account have been changed from credits and debits to net acquisition of financial ass, International Monetary Fund, Balance of Payments Statistics Yearbook and data files., , , , None, None, Open
BX.KLT.DINV.WD.GD.ZS, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net inflows (% of GDP), , Foreign direct investment are the net inflows of investment to acquire a lasting management interest (10 percent or more of voting stock) in an enterprise operating in an economy other than that of the investor. It is the sum of equity capital, reinvestme, , Annual, , None, Weighted average, FDI data do not give a complete picture of international investment in an economy. Balance of payments data on FDI do not include capital raised locally, an important source of investment financing in some developing countries. In addition, FDI data omit , , Note: Data starting from 2005 are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6)., International Monetary Fund, International Financial Statistics and Balance of Payments databases, World Bank, International Debt Statistics, and World Bank and OECD GDP estimates., Data on equity flows are based on balance of payments data reported by the International Monetary Fund (IMF). Foreign direct investment (FDI) data are supplemented by the World Bank staff estimates using data from the United Nations Conference on Trade an, Private financial flows - equity and debt - account for the bulk of development finance. Equity flows comprise foreign direct investment (FDI) and portfolio equity. Debt flows are financing raised through bond issuance, bank lending, and supplier credits., , None, None, Open
BX.KLT.DINV.CD.WD, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net inflows (BoP, current US$), , Foreign direct investment refers to direct investment equity flows in the reporting economy. It is the sum of equity capital, reinvestment of earnings, and other capital. Direct investment is a category of cross-border investment associated with a residen, , Annual, , None, Sum, FDI data do not give a complete picture of international investment in an economy. Balance of payments data on FDI do not include capital raised locally, an important source of investment financing in some developing countries. In addition, FDI data omit , , Note: Data starting from 2005 are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6)., International Monetary Fund, Balance of Payments database, supplemented by data from the United Nations Conference on Trade and Development and official national sources., Data on equity flows are based on balance of payments data reported by the International Monetary Fund (IMF). Foreign direct investment (FDI) data are supplemented by the World Bank staff estimates using data from the United Nations Conference on Trade an, Private financial flows - equity and debt - account for the bulk of development finance. Equity flows comprise foreign direct investment (FDI) and portfolio equity. Debt flows are financing raised through bond issuance, bank lending, and supplier credits., , None, None, Open

CREATE TABLE `CountryNotes` (
  Countrycode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Description TEXT
);
Sample rows from `CountryNotes`:
ABW, EG.EGY.PRIM.PP.KD, Sources: Estimated based on UN Energy Statistics (2014); World Development Indicators, WDI (2014)
ABW, EG.ELC.RNEW.ZS, Sources: UN Energy Statistics (2014)
ABW, EG.FEC.RNEW.ZS, Sources: UN Energy Statistics (2014)

CREATE TABLE `Footnotes` (
  Countrycode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Year TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `Footnotes`:
ABW, AG.LND.FRST.K2, YR1990, Not specified
ABW, AG.LND.FRST.K2, YR2000, Not specified
ABW, AG.LND.FRST.K2, YR2005, Not specified

CREATE TABLE `Indicators` (
  CountryName TEXT,
  CountryCode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  IndicatorName TEXT,
  IndicatorCode TEXT PRIMARY KEY,
  Year INTEGER PRIMARY KEY,
  Value INTEGER
);
Sample rows from `Indicators`:
Arab World, ARB, Adolescent fertility rate (births per 1,000 women ages 15-19), SP.ADO.TFRT, 1960, 133
Arab World, ARB, Age dependency ratio (% of working-age population), SP.POP.DPND, 1960, 87
Arab World, ARB, Age dependency ratio, old (% of working-age population), SP.POP.DPND.OL, 1960, 6

CREATE TABLE `SeriesNotes` (
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Year TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `SeriesNotes`:
SP.ADO.TFRT, YR1960, Interpolated using data for 1957 and 1962.
SP.DYN.AMRT.FE, YR1960, Interpolated using data for 1957 and 1962, if the data source is United Nations World Population Prospects.
SP.DYN.AMRT.MA, YR1960, Interpolated using data for 1957 and 1962, if the data source is United Nations World Population Prospects.

",country,"tablename, currencyunit"
food_inspection,Give the name of the business which met all the required standards during the unscheduled routine inspection on 2016/9/28.,SELECT t2.name FROM inspections as t1 inner JOIN businesses as t2 ON t1.business_id = t2.business_id WHERE t1.score = 100 AND t1.`date` = '2016-09-28' AND t1.type = 'Routine - Unscheduled',"CREATE TABLE `inspections` (
  business_id INTEGER REFERENCES businesses(business_id),
  score INTEGER,
  date DATE,
  type TEXT
);
Sample rows from `inspections`:
10, 92, 2014-01-14, Routine - Unscheduled
10, None, 2014-01-24, Reinspection/Followup
10, 94, 2014-07-29, Routine - Unscheduled

CREATE TABLE `businesses` (
  business_id INTEGER,
  name TEXT,
  address TEXT,
  city TEXT,
  postal_code TEXT,
  latitude REAL,
  longitude REAL,
  phone_number INTEGER,
  tax_code TEXT,
  business_certificate INTEGER,
  application_date DATE,
  owner_name TEXT,
  owner_address TEXT,
  owner_city TEXT,
  owner_state TEXT,
  owner_zip TEXT
);
Sample rows from `businesses`:
10, Tiramisu Kitchen, 033 Belden Pl, San Francisco, 94104, 37.7911, -122.404, None, H24, 779059, None, Tiramisu LLC, 33 Belden St, San Francisco, CA, 94104
24, OMNI S.F. Hotel - 2nd Floor Pantry, 500 California St, 2nd  Floor, San Francisco, 94104, 37.7929, -122.403, None, H24, 352312, None, OMNI San Francisco Hotel Corp, 500 California St, 2nd Floor, San Francisco, CA, 94104
31, Norman's Ice Cream and Freezes, 2801 Leavenworth St, San Francisco, 94133, 37.8072, -122.419, None, H24, 346882, None, Norman Antiforda, 2801 Leavenworth St, San Francisco, CA, 94133

","CREATE TABLE `businesses` (
  business_id INTEGER,
  name TEXT,
  address TEXT,
  city TEXT,
  postal_code TEXT,
  latitude REAL,
  longitude REAL,
  phone_number INTEGER,
  tax_code TEXT,
  business_certificate INTEGER,
  application_date DATE,
  owner_name TEXT,
  owner_address TEXT,
  owner_city TEXT,
  owner_state TEXT,
  owner_zip TEXT
);
Sample rows from `businesses`:
10, Tiramisu Kitchen, 033 Belden Pl, San Francisco, 94104, 37.7911, -122.404, None, H24, 779059, None, Tiramisu LLC, 33 Belden St, San Francisco, CA, 94104
24, OMNI S.F. Hotel - 2nd Floor Pantry, 500 California St, 2nd  Floor, San Francisco, 94104, 37.7929, -122.403, None, H24, 352312, None, OMNI San Francisco Hotel Corp, 500 California St, 2nd Floor, San Francisco, CA, 94104
31, Norman's Ice Cream and Freezes, 2801 Leavenworth St, San Francisco, 94133, 37.8072, -122.419, None, H24, 346882, None, Norman Antiforda, 2801 Leavenworth St, San Francisco, CA, 94133

CREATE TABLE `inspections` (
  business_id INTEGER REFERENCES businesses(business_id),
  score INTEGER,
  date DATE,
  type TEXT
);
Sample rows from `inspections`:
10, 92, 2014-01-14, Routine - Unscheduled
10, None, 2014-01-24, Reinspection/Followup
10, 94, 2014-07-29, Routine - Unscheduled

CREATE TABLE `violations` (
  business_id INTEGER REFERENCES businesses(business_id),
  date DATE,
  violation_type_id TEXT,
  risk_category TEXT,
  description TEXT
);
Sample rows from `violations`:
10, 2014-07-29, 103129, Moderate Risk, Insufficient hot water or running water
10, 2014-07-29, 103144, Low Risk, Unapproved or unmaintained equipment or utensils
10, 2014-01-14, 103119, Moderate Risk, Inadequate and inaccessible handwashing facilities

","inspections, businesses","businesses.name, inspections.business_id, businesses.business_id, inspections.score, inspections.date, inspections.type"
music_platform_2,"Of the arts-books and arts-design categories, which one has more podcasts and what is the numerical difference between them?","SELECT ( SELECT category FROM categories WHERE category = 'arts-books' OR category = 'arts-design' GROUP BY category ORDER BY COUNT(podcast_id) DESC LIMIT 1 ) ""has more podcasts"" , ( SELECT SUM(case when category = 'arts-books' then 1 else 0 end) - SUM(case when category = 'arts-design' then 1 else 0 end) FROM categories ) ""differenct BETWEEN arts-books and arts-design""","CREATE TABLE `categories` (
  podcast_id TEXT PRIMARY KEY REFERENCES podcasts(None),
  category TEXT PRIMARY KEY
);
Sample rows from `categories`:
c61aa81c9b929a66f0c1db6cbe5d8548, arts
c61aa81c9b929a66f0c1db6cbe5d8548, arts-performing-arts
c61aa81c9b929a66f0c1db6cbe5d8548, music

","CREATE TABLE `runs` (
  run_at TEXT,
  max_rowid INTEGER,
  reviews_added INTEGER
);
Sample rows from `runs`:
2021-05-10 02:53:00, 3266481, 1215223
2021-06-06 21:34:36, 3300773, 13139
2021-07-02 18:04:55, 3329699, 11561

CREATE TABLE `podcasts` (
  podcast_id TEXT PRIMARY KEY,
  itunes_id INTEGER,
  slug TEXT,
  itunes_url TEXT,
  title TEXT
);
Sample rows from `podcasts`:
a00018b54eb342567c94dacfb2a3e504, 1313466221, scaling-global, https://podcasts.apple.com/us/podcast/scaling-global/id1313466221, Scaling Global
a00043d34e734b09246d17dc5d56f63c, 158973461, cornerstone-baptist-church-of-orlando, https://podcasts.apple.com/us/podcast/cornerstone-baptist-church-of-orlando/id158973461, Cornerstone Baptist Church of Orlando
a0004b1ef445af9dc84dad1e7821b1e3, 139076942, mystery-dancing-in-the-dark, https://podcasts.apple.com/us/podcast/mystery-dancing-in-the-dark/id139076942, Mystery: Dancing in the Dark

CREATE TABLE `reviews` (
  podcast_id TEXT REFERENCES podcasts(None),
  title TEXT,
  content TEXT,
  rating INTEGER,
  author_id TEXT,
  created_at TEXT
);
Sample rows from `reviews`:
c61aa81c9b929a66f0c1db6cbe5d8548, really interesting!, Thanks for providing these insights.  Really enjoy the variety and depth -- please keep them coming!, 5, F7E5A318989779D, 2018-04-24T12:05:16-07:00
c61aa81c9b929a66f0c1db6cbe5d8548, Must listen for anyone interested in the arts!!!, Super excited to see this podcast grow. So many fun topics to talk about...Shari is really engaging. Definitely subscribing and would recommend to anyone interested in the arts!!, 5, F6BF5472689BD12, 2018-05-09T18:14:32-07:00
ad4f2bf69c72b8db75978423c25f379e, nauseatingly left, I'm a liberal myself, but its pretty obvious and annoying that they're trying to push their beliefs on the listeners. Get a more politically diverse production staff, we like to see issues from multiple point of views not just yours., 1, 1AB95B8E6E1309E, 2019-06-11T14:53:39-07:00

CREATE TABLE `categories` (
  podcast_id TEXT PRIMARY KEY REFERENCES podcasts(None),
  category TEXT PRIMARY KEY
);
Sample rows from `categories`:
c61aa81c9b929a66f0c1db6cbe5d8548, arts
c61aa81c9b929a66f0c1db6cbe5d8548, arts-performing-arts
c61aa81c9b929a66f0c1db6cbe5d8548, music

",categories,"category, podcast_id"
codebase_comments,What is the url for repository that has the longest processed time solution?,SELECT t1.url FROM repo as t1 inner JOIN solution as t2 ON t1.id = t2.repoid WHERE t2.processedtime = ( SELECT MAX(processedtime) FROM solution ),"CREATE TABLE `repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

CREATE TABLE `solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Method, 10860640
MethodParameter, 17514858
Repo, 156550

CREATE TABLE `Method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `Method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

CREATE TABLE `MethodParameter` (
  Id INTEGER,
  MethodId TEXT,
  Type TEXT,
  Name TEXT
);
Sample rows from `MethodParameter`:
1, 1, System.String, data
2, 2, System.Int32, i
3, 2, System.Int32, declstartpos

CREATE TABLE `Repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `Repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

CREATE TABLE `Solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `Solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

","repo, solution","repo.url, repo.id, solution.repoid, solution.processedtime, processedtime"
sales,List the customer's ID and last name of the customer that purchased a product with a quantity greater than 90% of the average quantity of all listed products.,"SELECT t2.customerid, t2.lastname FROM sales as t1 inner JOIN customers as t2 ON t1.customerid = t2.customerid WHERE t1.quantity > ( SELECT AVG(quantity) FROM sales ) * 0.9","CREATE TABLE `sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

CREATE TABLE `customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Employees`:
1, Abraham, e, Bennet
2, Reginald, l, Blotchet-Halls
3, Cheryl, a, Carson

CREATE TABLE `Products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

CREATE TABLE `Sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `Sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

","sales, customers","customers.customerid, customers.lastname, sales.customerid, sales.quantity, quantity"
student_loan,Please check if student 124 is disabled male.,"SELECT iif(t2.name is null, 'female', 'male') FROM male as t1 left JOIN disabled as t2 ON t1.name = t2.name WHERE t1.name = 'student124'","CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

","male, disabled","disabled.name, male.name"
restaurant,"Among the listed winery, what is the street number of the winery named ""Tulocay Winery""?",SELECT t1.street_num FROM location as t1 inner JOIN generalinfo as t2 ON t1.id_restaurant = t2.id_restaurant WHERE t2.label = 'Tulocay winery' AND t2.food_type = 'winery',"CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

","CREATE TABLE `geographic` (
  city TEXT PRIMARY KEY,
  county TEXT,
  region TEXT
);
Sample rows from `geographic`:
alameda, alameda county, bay area
alamo, contra costa county, bay area
albany, alameda county, bay area

CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

","location, generalinfo","location.street_num, location.id_restaurant, generalinfo.id_restaurant, generalinfo.label, generalinfo.food_type"
movies_4,What is Walt Disney Pictures' most popular movie?,SELECT t3.title FROM production_company as t1 inner JOIN movie_company as t2 ON t1.company_id = t2.company_id inner JOIN movie as t3 ON t2.movie_id = t3.movie_id WHERE t1.company_name = 'Walt Disney Pictures' ORDER BY t3.popularity DESC LIMIT 1,"CREATE TABLE `production_company` (
  company_id INTEGER,
  company_name TEXT
);
Sample rows from `production_company`:
1, Lucasfilm
2, Walt Disney Pictures
3, Pixar Animation Studios

CREATE TABLE `movie_company` (
  movie_id INTEGER REFERENCES movie(None),
  company_id INTEGER REFERENCES production_company(None)
);
Sample rows from `movie_company`:
5, 14
5, 59
11, 1

CREATE TABLE `movie` (
  movie_id INTEGER,
  title TEXT,
  budget INTEGER,
  homepage TEXT,
  overview TEXT,
  popularity REAL,
  release_date DATE,
  revenue INTEGER,
  runtime INTEGER,
  movie_status TEXT,
  tagline TEXT,
  vote_average REAL,
  vote_count INTEGER
);
Sample rows from `movie`:
5, Four Rooms, 4000000, , It's Ted the Bellhop's first night on the job...and the hotel's very unusual guests are about to place him in some outrageous predicaments. It seems that this evening's room service is serving up one unbelievable happening after another., 22.87623, 1995-12-09, 4300000, 98, Released, Twelve outrageous guests. Four scandalous requests. And one lone bellhop, in his first day on the job, who's in for the wildest New year's Eve of his life., 6.5, 530
11, Star Wars, 11000000, http://www.starwars.com/films/star-wars-episode-iv-a-new-hope, Princess Leia is captured and held hostage by the evil Imperial forces in their effort to take over the galactic Empire. Venturesome Luke Skywalker and dashing captain Han Solo team together with the loveable robot duo R2-D2 and C-3PO to rescue the beauti, 126.393695, 1977-05-25, 775398007, 121, Released, A long time ago in a galaxy far, far away..., 8.1, 6624
12, Finding Nemo, 94000000, http://movies.disney.com/finding-nemo, Nemo, an adventurous young clownfish, is unexpectedly taken from his Great Barrier Reef home to a dentist's office aquarium. It's up to his worrisome father Marlin and a friendly but forgetful fish Dory to bring Nemo home -- meeting vegetarian sharks, sur, 85.688789, 2003-05-30, 940335536, 100, Released, There are 3.7 trillion fish in the ocean, they're looking for one., 7.6, 6122

","CREATE TABLE `country` (
  country_id INTEGER,
  country_iso_code TEXT,
  country_name TEXT
);
Sample rows from `country`:
128, AE, United Arab Emirates
129, AF, Afghanistan
130, AO, Angola

CREATE TABLE `department` (
  department_id INTEGER,
  department_name TEXT
);
Sample rows from `department`:
1, Camera
2, Directing
3, Production

CREATE TABLE `gender` (
  gender_id INTEGER,
  gender TEXT
);
Sample rows from `gender`:
0, Unspecified
1, Female
2, Male

CREATE TABLE `genre` (
  genre_id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
12, Adventure
14, Fantasy
16, Animation

CREATE TABLE `keyword` (
  keyword_id INTEGER,
  keyword_name TEXT
);
Sample rows from `keyword`:
30, individual
65, holiday
74, germany

CREATE TABLE `language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `language`:
24574, en, English
24575, sv, svenska
24576, de, Deutsch

CREATE TABLE `language_role` (
  role_id INTEGER,
  language_role TEXT
);
Sample rows from `language_role`:
1, Original
2, Spoken

CREATE TABLE `movie` (
  movie_id INTEGER,
  title TEXT,
  budget INTEGER,
  homepage TEXT,
  overview TEXT,
  popularity REAL,
  release_date DATE,
  revenue INTEGER,
  runtime INTEGER,
  movie_status TEXT,
  tagline TEXT,
  vote_average REAL,
  vote_count INTEGER
);
Sample rows from `movie`:
5, Four Rooms, 4000000, , It's Ted the Bellhop's first night on the job...and the hotel's very unusual guests are about to place him in some outrageous predicaments. It seems that this evening's room service is serving up one unbelievable happening after another., 22.87623, 1995-12-09, 4300000, 98, Released, Twelve outrageous guests. Four scandalous requests. And one lone bellhop, in his first day on the job, who's in for the wildest New year's Eve of his life., 6.5, 530
11, Star Wars, 11000000, http://www.starwars.com/films/star-wars-episode-iv-a-new-hope, Princess Leia is captured and held hostage by the evil Imperial forces in their effort to take over the galactic Empire. Venturesome Luke Skywalker and dashing captain Han Solo team together with the loveable robot duo R2-D2 and C-3PO to rescue the beauti, 126.393695, 1977-05-25, 775398007, 121, Released, A long time ago in a galaxy far, far away..., 8.1, 6624
12, Finding Nemo, 94000000, http://movies.disney.com/finding-nemo, Nemo, an adventurous young clownfish, is unexpectedly taken from his Great Barrier Reef home to a dentist's office aquarium. It's up to his worrisome father Marlin and a friendly but forgetful fish Dory to bring Nemo home -- meeting vegetarian sharks, sur, 85.688789, 2003-05-30, 940335536, 100, Released, There are 3.7 trillion fish in the ocean, they're looking for one., 7.6, 6122

CREATE TABLE `movie_genres` (
  movie_id INTEGER REFERENCES movie(movie_id),
  genre_id INTEGER REFERENCES genre(genre_id)
);
Sample rows from `movie_genres`:
5, 35
5, 80
11, 12

CREATE TABLE `movie_languages` (
  movie_id INTEGER REFERENCES movie(movie_id),
  language_id INTEGER REFERENCES language(language_id),
  language_role_id INTEGER REFERENCES language_role(role_id)
);
Sample rows from `movie_languages`:
5, 24574, 2
11, 24574, 2
12, 24574, 2

CREATE TABLE `person` (
  person_id INTEGER,
  person_name TEXT
);
Sample rows from `person`:
1, George Lucas
2, Mark Hamill
3, Harrison Ford

CREATE TABLE `movie_crew` (
  movie_id INTEGER REFERENCES movie(movie_id),
  person_id INTEGER REFERENCES person(person_id),
  department_id INTEGER REFERENCES department(department_id),
  job TEXT
);
Sample rows from `movie_crew`:
285, 120, 1, Director of Photography
285, 1704, 2, Director
285, 770, 3, Producer

CREATE TABLE `production_company` (
  company_id INTEGER,
  company_name TEXT
);
Sample rows from `production_company`:
1, Lucasfilm
2, Walt Disney Pictures
3, Pixar Animation Studios

CREATE TABLE `production_country` (
  movie_id INTEGER REFERENCES movie(movie_id),
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `production_country`:
5, 214
11, 214
12, 214

CREATE TABLE `movie_cast` (
  movie_id INTEGER REFERENCES movie(movie_id),
  person_id INTEGER REFERENCES person(person_id),
  character_name TEXT,
  gender_id INTEGER REFERENCES gender(gender_id),
  cast_order INTEGER
);
Sample rows from `movie_cast`:
285, 85, Captain Jack Sparrow, 2, 0
285, 114, Will Turner, 2, 1
285, 116, Elizabeth Swann, 1, 2

CREATE TABLE `movie_keywords` (
  movie_id INTEGER REFERENCES movie(None),
  keyword_id INTEGER REFERENCES keyword(None)
);
Sample rows from `movie_keywords`:
5, 612
5, 613
5, 616

CREATE TABLE `movie_company` (
  movie_id INTEGER REFERENCES movie(None),
  company_id INTEGER REFERENCES production_company(None)
);
Sample rows from `movie_company`:
5, 14
5, 59
11, 1

","production_company, movie_company, movie","movie.title, production_company.company_id, movie_company.company_id, movie_company.movie_id, movie.movie_id, production_company.company_name, movie.popularity"
retail_complains,What percentage of clients who sent their complaints by postal mail are age 50 and older?,SELECT cast(SUM(case when t1.age > 50 then 1 else 0 end) as real) * 100 / COUNT(t2.`submitted via`) FROM client as t1 inner JOIN events as t2 ON t1.client_id = t2.client_id WHERE t2.`submitted via` = 'Postal mail',"CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

","CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

","client, events","client.age, events.submitted via, client.client_id, events.client_id"
chicago_crime,"How many incidents have the general description of ""ASSAULT"" in the IUCR classification?",SELECT COUNT(*) FROM iucr WHERE primary_description = 'ASSAULT',"CREATE TABLE `iucr` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `iucr`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

","CREATE TABLE `Community_Area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `Community_Area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `District` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `District`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `FBI_Code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `FBI_Code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `IUCR` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `IUCR`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `Neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `Neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `Ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `Ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `Crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `Crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

",iucr,primary_description
disney,Who are the voice actors in the movie that came out on 11/24/2010?,"SELECT t2.`voice-actor` FROM movies_total_gross as t1 inner JOIN `voice-actors` as t2 ON t1.movie_title = t2.movie WHERE t1.release_date = 'Nov 24, 2010'","CREATE TABLE `movies_total_gross` (
  movie_title TEXT PRIMARY KEY REFERENCES characters(movie_title),
  release_date TEXT PRIMARY KEY,
  genre TEXT,
  MPAA_rating TEXT,
  total_gross TEXT,
  inflation_adjusted_gross TEXT
);
Sample rows from `movies_total_gross`:
Snow White and the Seven Dwarfs, Dec 21, 1937, Musical, G, $184,925,485, $5,228,953,251
Pinocchio, Feb 9, 1940, Adventure, G, $84,300,000, $2,188,229,052
Fantasia, Nov 13, 1940, Musical, G, $83,320,000, $2,187,090,808

CREATE TABLE `voice-actors` (
  character TEXT PRIMARY KEY,
  voice-actor TEXT,
  movie TEXT REFERENCES characters(movie_title)
);
Sample rows from `voice-actors`:
Abby Mallard, Joan Cusack, Chicken Little
Abigail Gabble, Monica Evans, The Aristocats
Abis Mal, Jason Alexander, The Return of Jafar

","CREATE TABLE `characters` (
  movie_title TEXT PRIMARY KEY,
  release_date TEXT,
  hero TEXT REFERENCES voice-actors(character),
  villian TEXT,
  song TEXT
);
Sample rows from `characters`:
Snow White and the Seven Dwarfs, 21-Dec-37, Snow White, Evil Queen, Some Day My Prince Will Come
Pinocchio, 7-Feb-40, Pinocchio, Stromboli, When You Wish upon a Star
Fantasia, 13-Nov-40, None, Chernabog, None

CREATE TABLE `director` (
  name TEXT PRIMARY KEY REFERENCES characters(movie_title),
  director TEXT
);
Sample rows from `director`:
Snow White and the Seven Dwarfs, David Hand
Pinocchio, Ben Sharpsteen
Fantasia, full credits

CREATE TABLE `movies_total_gross` (
  movie_title TEXT PRIMARY KEY REFERENCES characters(movie_title),
  release_date TEXT PRIMARY KEY,
  genre TEXT,
  MPAA_rating TEXT,
  total_gross TEXT,
  inflation_adjusted_gross TEXT
);
Sample rows from `movies_total_gross`:
Snow White and the Seven Dwarfs, Dec 21, 1937, Musical, G, $184,925,485, $5,228,953,251
Pinocchio, Feb 9, 1940, Adventure, G, $84,300,000, $2,188,229,052
Fantasia, Nov 13, 1940, Musical, G, $83,320,000, $2,187,090,808

CREATE TABLE `revenue` (
  Year INTEGER,
  Studio Entertainment[NI 1] REAL,
  Disney Consumer Products[NI 2] REAL,
  Disney Interactive[NI 3][Rev 1] INTEGER,
  Walt Disney Parks and Resorts REAL,
  Disney Media Networks TEXT,
  Total INTEGER
);
Sample rows from `revenue`:
1991, 2593.0, 724.0, None, 2794.0, None, 6111
1992, 3115.0, 1081.0, None, 3306.0, None, 7502
1993, 3673.4, 1415.1, None, 3440.7, None, 8529

CREATE TABLE `voice-actors` (
  character TEXT PRIMARY KEY,
  voice-actor TEXT,
  movie TEXT REFERENCES characters(movie_title)
);
Sample rows from `voice-actors`:
Abby Mallard, Joan Cusack, Chicken Little
Abigail Gabble, Monica Evans, The Aristocats
Abis Mal, Jason Alexander, The Return of Jafar

","movies_total_gross, voice-actors","voice-actors.voice-actor, movies_total_gross.movie_title, voice-actors.movie, movies_total_gross.release_date"
college_completion,"Which cohort had the higher percentage of students who graduated from Central Alabama Community College in 2011 within 150 percent of normal/expected time, female White students or male White students?","SELECT iif(SUM(case when t2.gender = 'F' then t2.grad_150 else 0 end) > SUM(case when t2.gender = 'M' then t2.grad_150 else 0 end), 'female white students', 'male white students') FROM institution_details as t1 inner JOIN institution_grads as t2 ON t2.unitid = t1.unitid wHERE t1.chronname = 'Central Alabama Community College' AND t2.year = 2011 AND t2.race = 'w'","CREATE TABLE `institution_details` (
  unitid INTEGER,
  chronname TEXT,
  city TEXT,
  state TEXT,
  level TEXT,
  control TEXT,
  basic TEXT,
  hbcu TEXT,
  flagship TEXT,
  long_x REAL,
  lat_y REAL,
  site TEXT,
  student_count INTEGER,
  awards_per_value REAL,
  awards_per_state_value REAL,
  awards_per_natl_value REAL,
  exp_award_value INTEGER,
  exp_award_state_value INTEGER,
  exp_award_natl_value INTEGER,
  exp_award_percentile INTEGER,
  ft_pct REAL,
  fte_value INTEGER,
  fte_percentile INTEGER,
  med_sat_value TEXT,
  med_sat_percentile TEXT,
  aid_value INTEGER,
  aid_percentile INTEGER,
  endow_value TEXT,
  endow_percentile TEXT,
  grad_100_value REAL,
  grad_100_percentile INTEGER,
  grad_150_value REAL,
  grad_150_percentile INTEGER,
  pell_value REAL,
  pell_percentile INTEGER,
  retain_value REAL,
  retain_percentile INTEGER,
  ft_fac_value REAL,
  ft_fac_percentile INTEGER,
  vsa_year TEXT,
  vsa_grad_after4_first TEXT,
  vsa_grad_elsewhere_after4_first TEXT,
  vsa_enroll_after4_first TEXT,
  vsa_enroll_elsewhere_after4_first TEXT,
  vsa_grad_after6_first TEXT,
  vsa_grad_elsewhere_after6_first TEXT,
  vsa_enroll_after6_first TEXT,
  vsa_enroll_elsewhere_after6_first TEXT,
  vsa_grad_after4_transfer TEXT,
  vsa_grad_elsewhere_after4_transfer TEXT,
  vsa_enroll_after4_transfer TEXT,
  vsa_enroll_elsewhere_after4_transfer TEXT,
  vsa_grad_after6_transfer TEXT,
  vsa_grad_elsewhere_after6_transfer TEXT,
  vsa_enroll_after6_transfer TEXT,
  vsa_enroll_elsewhere_after6_transfer TEXT,
  similar TEXT,
  state_sector_ct INTEGER,
  carnegie_ct INTEGER,
  counted_pct TEXT,
  nicknames TEXT,
  cohort_size INTEGER
);
Sample rows from `institution_details`:
100654, Alabama A&M University, Normal, Alabama, 4-year, Public, Masters Colleges and Universities--larger programs, X, NULL, -86.568502, 34.783368, www.aamu.edu/, 4051, 14.2, 18.8, 21.5, 105331, 75743, 66436, 90, 93.8, 3906, 33, 823, 0, 7142, 72, NULL, NULL, 10.0, 15, 29.1, 14, 71.2, 98, 63.1, 17, 82.8, 89, 2010, 14.7, 2, 36.5, 16.1, 33, 5.3, 12.5, 14.6, 15.7, 1.5, 40.9, 17.2, 36.4, 5.6, 17.2, 11.1, 232937|100724|405997|113607|139533|144005|228501|101480|131876|144759|419509|176479|243197|228529|372222|228431|206695|139366|159993|224147, 13, 386, 99.7|07, NULL, 882
100663, University of Alabama at Birmingham, Birmingham, Alabama, 4-year, Public, Research Universities--very high research activity, NULL, NULL, -86.80917, 33.50223, www.uab.edu, 11502, 20.9, 18.8, 21.5, 136546, 75743, 66436, 97, 72.7, 10032, 67, 1146, 84, 6088, 50, 24136, 93, 29.4, 67, 53.5, 66, 35.1, 39, 80.2, 70, 92.4, 98, 2011, 22.3, 2.9, 34.2, 19.2, 42.6, 10.5, 7.9, 13.1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 196060|180461|201885|145600|209542|236939|126818|230764|104151|104179|157085|171100|153603|141574|155317|110714|137351|126562|243780|196088, 13, 106, 56.0|07, UAB, 1376
100690, Amridge University, Montgomery, Alabama, 4-year, Private not-for-profit, Baccalaureate Colleges--Arts & Sciences, NULL, NULL, -86.17401, 32.362609, www.amridgeuniversity.edu, 322, 29.9, 17.8, 22.5, 58414, 92268, 101725, 30, 62.7, 294, 12, NULL, NULL, 2540, 1, 302, 1, 0.0, 0, 66.7, 72, 68.4, 91, 37.5, 2, 67.2, 71, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 217925|441511|205124|247825|197647|221856|135364|117575|164207|193070|199315|166054|367893|183804|439701|193052|197744|193247|137777|176789, 16, 252, 100.0|07, NULL, 3

CREATE TABLE `institution_grads` (
  unitid INTEGER REFERENCES institution_details(unitid),
  year INTEGER,
  gender TEXT,
  race TEXT,
  cohort TEXT,
  grad_cohort TEXT,
  grad_100 TEXT,
  grad_150 TEXT,
  grad_100_rate TEXT,
  grad_150_rate TEXT
);
Sample rows from `institution_grads`:
100760, 2011, B, X, 2y all, 446, 73, 105, 16.4, 23.5
100760, 2011, M, X, 2y all, 185, NULL, 40, NULL, 21.6
100760, 2011, F, X, 2y all, 261, NULL, 65, NULL, 24.9

","CREATE TABLE `institution_details` (
  unitid INTEGER,
  chronname TEXT,
  city TEXT,
  state TEXT,
  level TEXT,
  control TEXT,
  basic TEXT,
  hbcu TEXT,
  flagship TEXT,
  long_x REAL,
  lat_y REAL,
  site TEXT,
  student_count INTEGER,
  awards_per_value REAL,
  awards_per_state_value REAL,
  awards_per_natl_value REAL,
  exp_award_value INTEGER,
  exp_award_state_value INTEGER,
  exp_award_natl_value INTEGER,
  exp_award_percentile INTEGER,
  ft_pct REAL,
  fte_value INTEGER,
  fte_percentile INTEGER,
  med_sat_value TEXT,
  med_sat_percentile TEXT,
  aid_value INTEGER,
  aid_percentile INTEGER,
  endow_value TEXT,
  endow_percentile TEXT,
  grad_100_value REAL,
  grad_100_percentile INTEGER,
  grad_150_value REAL,
  grad_150_percentile INTEGER,
  pell_value REAL,
  pell_percentile INTEGER,
  retain_value REAL,
  retain_percentile INTEGER,
  ft_fac_value REAL,
  ft_fac_percentile INTEGER,
  vsa_year TEXT,
  vsa_grad_after4_first TEXT,
  vsa_grad_elsewhere_after4_first TEXT,
  vsa_enroll_after4_first TEXT,
  vsa_enroll_elsewhere_after4_first TEXT,
  vsa_grad_after6_first TEXT,
  vsa_grad_elsewhere_after6_first TEXT,
  vsa_enroll_after6_first TEXT,
  vsa_enroll_elsewhere_after6_first TEXT,
  vsa_grad_after4_transfer TEXT,
  vsa_grad_elsewhere_after4_transfer TEXT,
  vsa_enroll_after4_transfer TEXT,
  vsa_enroll_elsewhere_after4_transfer TEXT,
  vsa_grad_after6_transfer TEXT,
  vsa_grad_elsewhere_after6_transfer TEXT,
  vsa_enroll_after6_transfer TEXT,
  vsa_enroll_elsewhere_after6_transfer TEXT,
  similar TEXT,
  state_sector_ct INTEGER,
  carnegie_ct INTEGER,
  counted_pct TEXT,
  nicknames TEXT,
  cohort_size INTEGER
);
Sample rows from `institution_details`:
100654, Alabama A&M University, Normal, Alabama, 4-year, Public, Masters Colleges and Universities--larger programs, X, NULL, -86.568502, 34.783368, www.aamu.edu/, 4051, 14.2, 18.8, 21.5, 105331, 75743, 66436, 90, 93.8, 3906, 33, 823, 0, 7142, 72, NULL, NULL, 10.0, 15, 29.1, 14, 71.2, 98, 63.1, 17, 82.8, 89, 2010, 14.7, 2, 36.5, 16.1, 33, 5.3, 12.5, 14.6, 15.7, 1.5, 40.9, 17.2, 36.4, 5.6, 17.2, 11.1, 232937|100724|405997|113607|139533|144005|228501|101480|131876|144759|419509|176479|243197|228529|372222|228431|206695|139366|159993|224147, 13, 386, 99.7|07, NULL, 882
100663, University of Alabama at Birmingham, Birmingham, Alabama, 4-year, Public, Research Universities--very high research activity, NULL, NULL, -86.80917, 33.50223, www.uab.edu, 11502, 20.9, 18.8, 21.5, 136546, 75743, 66436, 97, 72.7, 10032, 67, 1146, 84, 6088, 50, 24136, 93, 29.4, 67, 53.5, 66, 35.1, 39, 80.2, 70, 92.4, 98, 2011, 22.3, 2.9, 34.2, 19.2, 42.6, 10.5, 7.9, 13.1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 196060|180461|201885|145600|209542|236939|126818|230764|104151|104179|157085|171100|153603|141574|155317|110714|137351|126562|243780|196088, 13, 106, 56.0|07, UAB, 1376
100690, Amridge University, Montgomery, Alabama, 4-year, Private not-for-profit, Baccalaureate Colleges--Arts & Sciences, NULL, NULL, -86.17401, 32.362609, www.amridgeuniversity.edu, 322, 29.9, 17.8, 22.5, 58414, 92268, 101725, 30, 62.7, 294, 12, NULL, NULL, 2540, 1, 302, 1, 0.0, 0, 66.7, 72, 68.4, 91, 37.5, 2, 67.2, 71, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 217925|441511|205124|247825|197647|221856|135364|117575|164207|193070|199315|166054|367893|183804|439701|193052|197744|193247|137777|176789, 16, 252, 100.0|07, NULL, 3

CREATE TABLE `institution_grads` (
  unitid INTEGER REFERENCES institution_details(unitid),
  year INTEGER,
  gender TEXT,
  race TEXT,
  cohort TEXT,
  grad_cohort TEXT,
  grad_100 TEXT,
  grad_150 TEXT,
  grad_100_rate TEXT,
  grad_150_rate TEXT
);
Sample rows from `institution_grads`:
100760, 2011, B, X, 2y all, 446, 73, 105, 16.4, 23.5
100760, 2011, M, X, 2y all, 185, NULL, 40, NULL, 21.6
100760, 2011, F, X, 2y all, 261, NULL, 65, NULL, 24.9

CREATE TABLE `state_sector_grads` (
  stateid INTEGER REFERENCES state_sector_details(stateid),
  state TEXT REFERENCES institution_details(state),
  state_abbr TEXT,
  control TEXT,
  level TEXT,
  year INTEGER,
  gender TEXT,
  race TEXT,
  cohort TEXT,
  grad_cohort TEXT,
  grad_100 TEXT,
  grad_150 TEXT,
  grad_100_rate TEXT,
  grad_150_rate TEXT,
  grad_cohort_ct INTEGER
);
Sample rows from `state_sector_grads`:
1, Alabama, AL, Private for-profit, 4-year, 2011, B, A, 4y bach, 0, 0, 0, NULL, NULL, 9
1, Alabama, AL, Private for-profit, 4-year, 2011, B, Ai, 4y bach, 1, 0, 0, 0, 0, 9
1, Alabama, AL, Private for-profit, 4-year, 2011, B, B, 4y bach, 51, 2, 3, 3.9, 5.9, 9

CREATE TABLE `state_sector_details` (
  stateid INTEGER PRIMARY KEY,
  state TEXT REFERENCES institution_details(state),
  state_post TEXT,
  level TEXT PRIMARY KEY,
  control TEXT PRIMARY KEY,
  schools_count INTEGER,
  counted_pct TEXT,
  awards_per_state_value TEXT,
  awards_per_natl_value REAL,
  exp_award_state_value TEXT,
  exp_award_natl_value INTEGER,
  state_appr_value TEXT,
  state_appr_rank TEXT,
  grad_rate_rank TEXT,
  awards_per_rank TEXT
);
Sample rows from `state_sector_details`:
0, United States, U.S., 4-year, Public, 632, NULL, NULL, 21.5, NULL, 66436, NULL, NULL, 23, NULL
0, United States, U.S., 4-year, Private not-for-profit, 1180, NULL, NULL, 22.5, NULL, 101725, NULL, NULL, 18, NULL
0, United States, U.S., 4-year, Private for-profit, 527, NULL, NULL, 24.6, NULL, 38763, NULL, NULL, 8, NULL

","institution_details, institution_grads","institution_grads.gender, institution_grads.grad_150, institution_grads.unitid, institution_details.unitid, institution_details.chronname, institution_grads.year, institution_grads.race"
cs_semester,What is the capability on research of the student named Alvera McQuillin?,SELECT t2.capability FROM student as t1 inner JOIN ra as t2 ON t1.student_id = t2.student_id WHERE t1.f_name = 'Alvera' AND t1.l_name = 'McQuillin',"CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

CREATE TABLE `ra` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `ra`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

","CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

CREATE TABLE `prof` (
  prof_id INTEGER,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  popularity INTEGER,
  teachingability INTEGER,
  graduate_from TEXT
);
Sample rows from `prof`:
1, Male, Nathaniel, Pigford, npigford0@hku.hk, 3, 5, University of Washington
2, Male, Zhihua, Zhou, zzhihua@hku.hk, 2, 1, Beijing Polytechnic University
3, Male, Ogdon, Zywicki, ozywicki2@hku.hk, 2, 2, University of Boston

CREATE TABLE `RA` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `RA`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

","student, ra","ra.capability, student.student_id, ra.student_id, student.f_name, student.l_name"
cs_semester,"Among the professors with a teachability of 3 and below, what is the percentage of their student advisees with a low salary?",SELECT cast(SUM(case when t1.salary = 'low' then 1 else 0 end) as real) * 100 / COUNT(t1.salary) FROM ra as t1 inner JOIN prof as t2 ON t1.prof_id = t2.prof_id WHERE t2.teachingability < 3,"CREATE TABLE `ra` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `ra`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

CREATE TABLE `prof` (
  prof_id INTEGER,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  popularity INTEGER,
  teachingability INTEGER,
  graduate_from TEXT
);
Sample rows from `prof`:
1, Male, Nathaniel, Pigford, npigford0@hku.hk, 3, 5, University of Washington
2, Male, Zhihua, Zhou, zzhihua@hku.hk, 2, 1, Beijing Polytechnic University
3, Male, Ogdon, Zywicki, ozywicki2@hku.hk, 2, 2, University of Boston

","CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

CREATE TABLE `prof` (
  prof_id INTEGER,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  popularity INTEGER,
  teachingability INTEGER,
  graduate_from TEXT
);
Sample rows from `prof`:
1, Male, Nathaniel, Pigford, npigford0@hku.hk, 3, 5, University of Washington
2, Male, Zhihua, Zhou, zzhihua@hku.hk, 2, 1, Beijing Polytechnic University
3, Male, Ogdon, Zywicki, ozywicki2@hku.hk, 2, 2, University of Boston

CREATE TABLE `RA` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `RA`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

","ra, prof","ra.salary, ra.prof_id, prof.prof_id, prof.teachingability"
retails,"What is the discounted price of the part ""burnished seashell gainsboro navajo chocolate"" in order no.1?",SELECT t1.l_extendedprice * (1 - t1.l_discount) FROM lineitem as t1 inner JOIN part as t2 ON t1.l_partkey = t2.p_partkey WHERE t2.p_name = 'burnished seashell gainsboro navajo chocolate' AND t1.l_orderkey = 1,"CREATE TABLE `lineitem` (
  l_shipdate DATE,
  l_orderkey INTEGER PRIMARY KEY REFERENCES orders(o_orderkey),
  l_discount REAL,
  l_extendedprice REAL,
  l_suppkey INTEGER REFERENCES partsupp(ps_suppkey),
  l_quantity INTEGER,
  l_returnflag TEXT,
  l_partkey INTEGER REFERENCES partsupp(ps_partkey),
  l_linestatus TEXT,
  l_tax REAL,
  l_commitdate DATE,
  l_receiptdate DATE,
  l_shipmode TEXT,
  l_linenumber INTEGER PRIMARY KEY,
  l_shipinstruct TEXT,
  l_comment TEXT
);
Sample rows from `lineitem`:
1995-08-16, 1, 0.1, 58303.08, 6296, 33, N, 98768, O, 0.06, 1995-07-12, 1995-09-14, RAIL, 1, NONE, carefully bo
1995-08-13, 1, 0.09, 16947.7, 8776, 10, N, 23771, O, 0.08, 1995-07-09, 1995-08-27, TRUCK, 2, TAKE BACK RETURN, blithely regular pac
1995-06-17, 1, 0.1, 63642.9, 3859, 34, N, 113858, O, 0.08, 1995-05-22, 1995-06-30, SHIP, 3, COLLECT COD, ironic accounts sleep furiously silen

CREATE TABLE `part` (
  p_partkey INTEGER,
  p_type TEXT,
  p_size INTEGER,
  p_brand TEXT,
  p_name TEXT,
  p_container TEXT,
  p_mfgr TEXT,
  p_retailprice REAL,
  p_comment TEXT
);
Sample rows from `part`:
1, LARGE PLATED TIN, 31, Brand#43, burlywood plum powder puff mint, LG BAG, Manufacturer#4, 901.0, blithely busy reque
2, LARGE POLISHED STEEL, 4, Brand#55, hot spring dodger dim light, LG CASE, Manufacturer#5, 902.0, even ironic requests s
3, STANDARD PLATED COPPER, 30, Brand#53, dark slate grey steel misty, WRAP CASE, Manufacturer#5, 903.0, slyly ironic fox

","CREATE TABLE `customer` (
  c_custkey INTEGER,
  c_mktsegment TEXT,
  c_nationkey INTEGER REFERENCES nation(n_nationkey),
  c_name TEXT,
  c_address TEXT,
  c_phone TEXT,
  c_acctbal REAL,
  c_comment TEXT
);
Sample rows from `customer`:
1, BUILDING, 8, Customer#000000001, KwX3hMHjZ6, 937-241-3198, 3560.03, ironic excuses detect slyly silent requests. requests according to the exc
2, MACHINERY, 16, Customer#000000002, ioUn,eqTTXOdo, 906-965-7556, 7550.21, final express accounts mold slyly. ironic accounts cajole! quickly express a
3, FURNITURE, 11, Customer#000000003, YddJqmIdouNT9Yj, 328-750-7603, -926.96, carefully express foxes sleep carefully. pending platelets sleep thinly for t

CREATE TABLE `lineitem` (
  l_shipdate DATE,
  l_orderkey INTEGER PRIMARY KEY REFERENCES orders(o_orderkey),
  l_discount REAL,
  l_extendedprice REAL,
  l_suppkey INTEGER REFERENCES partsupp(ps_suppkey),
  l_quantity INTEGER,
  l_returnflag TEXT,
  l_partkey INTEGER REFERENCES partsupp(ps_partkey),
  l_linestatus TEXT,
  l_tax REAL,
  l_commitdate DATE,
  l_receiptdate DATE,
  l_shipmode TEXT,
  l_linenumber INTEGER PRIMARY KEY,
  l_shipinstruct TEXT,
  l_comment TEXT
);
Sample rows from `lineitem`:
1995-08-16, 1, 0.1, 58303.08, 6296, 33, N, 98768, O, 0.06, 1995-07-12, 1995-09-14, RAIL, 1, NONE, carefully bo
1995-08-13, 1, 0.09, 16947.7, 8776, 10, N, 23771, O, 0.08, 1995-07-09, 1995-08-27, TRUCK, 2, TAKE BACK RETURN, blithely regular pac
1995-06-17, 1, 0.1, 63642.9, 3859, 34, N, 113858, O, 0.08, 1995-05-22, 1995-06-30, SHIP, 3, COLLECT COD, ironic accounts sleep furiously silen

CREATE TABLE `nation` (
  n_nationkey INTEGER,
  n_name TEXT,
  n_regionkey INTEGER REFERENCES region(r_regionkey),
  n_comment TEXT
);
Sample rows from `nation`:
0, ALGERIA, 0, slyly express pinto beans cajole idly. deposits use blithely unusual packages? fluffily final accounts x-r
1, ARGENTINA, 1, instructions detect blithely stealthily pending packages
2, BRAZIL, 1, blithely unusual deposits are quickly--

CREATE TABLE `orders` (
  o_orderdate DATE,
  o_orderkey INTEGER,
  o_custkey INTEGER REFERENCES customer(c_custkey),
  o_orderpriority TEXT,
  o_shippriority INTEGER,
  o_clerk TEXT,
  o_orderstatus TEXT,
  o_totalprice REAL,
  o_comment TEXT
);
Sample rows from `orders`:
1995-04-19, 1, 73100, 4-NOT SPECIFIED, 0, Clerk#000000916, P, 203198.56, final packages sleep blithely packa
1996-11-04, 2, 92861, 1-URGENT, 0, Clerk#000000373, O, 317719.99, final excuses about the ironic even deposits detect express request
1992-02-15, 3, 44875, 1-URGENT, 0, Clerk#000000485, F, 146674.98, final final deposits cajole foxes. blithely pendin

CREATE TABLE `part` (
  p_partkey INTEGER,
  p_type TEXT,
  p_size INTEGER,
  p_brand TEXT,
  p_name TEXT,
  p_container TEXT,
  p_mfgr TEXT,
  p_retailprice REAL,
  p_comment TEXT
);
Sample rows from `part`:
1, LARGE PLATED TIN, 31, Brand#43, burlywood plum powder puff mint, LG BAG, Manufacturer#4, 901.0, blithely busy reque
2, LARGE POLISHED STEEL, 4, Brand#55, hot spring dodger dim light, LG CASE, Manufacturer#5, 902.0, even ironic requests s
3, STANDARD PLATED COPPER, 30, Brand#53, dark slate grey steel misty, WRAP CASE, Manufacturer#5, 903.0, slyly ironic fox

CREATE TABLE `partsupp` (
  ps_partkey INTEGER PRIMARY KEY REFERENCES part(p_partkey),
  ps_suppkey INTEGER PRIMARY KEY REFERENCES supplier(s_suppkey),
  ps_supplycost REAL,
  ps_availqty INTEGER,
  ps_comment TEXT
);
Sample rows from `partsupp`:
1, 2, 400.75, 1111, carefully ironic deposits use against the carefully unusual accounts. slyly silent platelets nag quickly even
1, 2502, 702.61, 3999, slyly regular accounts serve carefully. asymptotes after the slyly even instructions cajole quickly ironic requests. pending dugouts about the slyly 
1, 5002, 383.95, 7411, carefully special ideas are slyly. slyly ironic epitaphs use pending pending foxes. furiously express pinto beans lose quiet even requests: special final packages ar

CREATE TABLE `region` (
  r_regionkey INTEGER,
  r_name TEXT,
  r_comment TEXT
);
Sample rows from `region`:
0, AFRICA, asymptotes sublate after the r
1, AMERICA, requests affix quickly final tithes. blithely even packages above the a
2, ASIA, accounts cajole carefully according to the carefully exp

CREATE TABLE `supplier` (
  s_suppkey INTEGER,
  s_nationkey INTEGER REFERENCES nation(n_nationkey),
  s_comment TEXT,
  s_name TEXT,
  s_address TEXT,
  s_phone TEXT,
  s_acctbal REAL
);
Sample rows from `supplier`:
1, 13, blithely final pearls are. instructions thra, Supplier#000000001, ,wWs4pnykQOFl8mgVCU8EZMXqZs1w, 800-807-9579, 3082.86
2, 5, requests integrate fluffily. fluffily ironic deposits wake. bold, Supplier#000000002, WkXT6MSAJrp4qWq3W9N, 348-617-6055, 3009.73
3, 22, carefully express ideas shall have to unwin, Supplier#000000003, KjUqa42JEHaRDVQTHV6Yq2h, 471-986-9888, 9159.78

","lineitem, part","lineitem.l_extendedprice, lineitem.l_discount, lineitem.l_partkey, part.p_partkey, part.p_name, lineitem.l_orderkey"
olympics,At which age did A Lamusi participate in 2012 Summer?,SELECT t2.age FROM games as t1 inner JOIN games_competitor as t2 ON t1.id = t2.games_id inner JOIN person as t3 ON t2.person_id = t3.id WHERE t1.games_name = '2012 Summer' AND t3.full_name = 'A Lamusi',"CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

","CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `medal` (
  id INTEGER,
  medal_name TEXT
);
Sample rows from `medal`:
1, Gold
2, Silver
3, Bronze

CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `sport` (
  id INTEGER,
  sport_name TEXT
);
Sample rows from `sport`:
1, Aeronautics
2, Alpine Skiing
3, Alpinism

CREATE TABLE `event` (
  id INTEGER,
  sport_id INTEGER REFERENCES sport(id),
  event_name TEXT
);
Sample rows from `event`:
1, 9, Basketball Men's Basketball
2, 33, Judo Men's Extra-Lightweight
3, 25, Football Men's Football

CREATE TABLE `competitor_event` (
  event_id INTEGER REFERENCES event(id),
  competitor_id INTEGER REFERENCES games_competitor(id),
  medal_id INTEGER REFERENCES medal(id)
);
Sample rows from `competitor_event`:
1, 1, 4
2, 2, 4
3, 3, 4

","games, games_competitor, person","games_competitor.age, games.id, games_competitor.games_id, games_competitor.person_id, person.id, games.games_name, person.full_name"
olympics,What was the medal that Coleen Dufresne got?,SELECT t4.medal_name FROM person as t1 inner JOIN games_competitor as t2 ON t1.id = t2.person_id inner JOIN competitor_event as t3 ON t2.id = t3.competitor_id inner JOIN medal as t4 ON t3.medal_id = t4.id WHERE t1.full_name = 'Coleen Dufresne (-Stewner)',"CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `competitor_event` (
  event_id INTEGER REFERENCES event(id),
  competitor_id INTEGER REFERENCES games_competitor(id),
  medal_id INTEGER REFERENCES medal(id)
);
Sample rows from `competitor_event`:
1, 1, 4
2, 2, 4
3, 3, 4

CREATE TABLE `medal` (
  id INTEGER,
  medal_name TEXT
);
Sample rows from `medal`:
1, Gold
2, Silver
3, Bronze

","CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `medal` (
  id INTEGER,
  medal_name TEXT
);
Sample rows from `medal`:
1, Gold
2, Silver
3, Bronze

CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `sport` (
  id INTEGER,
  sport_name TEXT
);
Sample rows from `sport`:
1, Aeronautics
2, Alpine Skiing
3, Alpinism

CREATE TABLE `event` (
  id INTEGER,
  sport_id INTEGER REFERENCES sport(id),
  event_name TEXT
);
Sample rows from `event`:
1, 9, Basketball Men's Basketball
2, 33, Judo Men's Extra-Lightweight
3, 25, Football Men's Football

CREATE TABLE `competitor_event` (
  event_id INTEGER REFERENCES event(id),
  competitor_id INTEGER REFERENCES games_competitor(id),
  medal_id INTEGER REFERENCES medal(id)
);
Sample rows from `competitor_event`:
1, 1, 4
2, 2, 4
3, 3, 4

","person, games_competitor, competitor_event, medal","medal.medal_name, person.id, games_competitor.person_id, games_competitor.id, competitor_event.competitor_id, competitor_event.medal_id, medal.id, person.full_name"
image_and_language,State the object class of sample no.10 of image no.2320341.,SELECT t1.obj_class FROM obj_classES as t1 inner JOIN img_obj as t2 ON t1.obj_class_ID = t2.obj_class_ID WHERE t2.img_id = 2320341 AND t2.obj_sample_id = 10,"CREATE TABLE `obj_classES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `obj_classES`:
0, awning
1, goggles
2, dot

CREATE TABLE `img_obj` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `img_obj`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

","CREATE TABLE `ATT_CLASSES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `ATT_CLASSES`:
0, building s
1, indoors
2, cluttered

CREATE TABLE `OBJ_CLASSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLASSES`:
0, awning
1, goggles
2, dot

CREATE TABLE `IMG_OBJ` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `IMG_OBJ`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `IMG_OBJ_ATT` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_OBJ_ATT`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `PRED_CLASSES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `PRED_CLASSES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `IMG_REL` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_REL`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

","obj_classES, img_obj","obj_classES.obj_class, obj_classES.obj_class_ID, img_obj.obj_class_ID, img_obj.img_id, img_obj.obj_sample_id"
beer_factory,What are the full names of the first top 10 customers?,"SELECT first, last FROM customers ORDER BY firstPurchaseDate LIMIT 10","CREATE TABLE `customers` (
  CustomerID INTEGER,
  First TEXT,
  Last TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER,
  Email TEXT,
  PhoneNumber TEXT,
  FirstPurchaseDate DATE,
  SubscribedToEmailList TEXT,
  Gender TEXT
);
Sample rows from `customers`:
101811, Kenneth, Walton, 6715 Commonwealth Dr, Sacramento, CA, 94256, walton.k76@fastmail.com, (916) 918-1561, 2013-05-30, FALSE, M
103508, Madeleine, Jones, 3603 Leola Way, Sacramento, CA, 94258, j_madeleine@gmail.com, (916) 186-9423, 2013-02-06, FALSE, F
104939, Damen, Wheeler, 6740 Branwood Way, Orangevale, CA, 95662, dwheeler@outlook.com, (916) 164-1156, 2013-04-11, FALSE, M

","CREATE TABLE `customers` (
  CustomerID INTEGER,
  First TEXT,
  Last TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER,
  Email TEXT,
  PhoneNumber TEXT,
  FirstPurchaseDate DATE,
  SubscribedToEmailList TEXT,
  Gender TEXT
);
Sample rows from `customers`:
101811, Kenneth, Walton, 6715 Commonwealth Dr, Sacramento, CA, 94256, walton.k76@fastmail.com, (916) 918-1561, 2013-05-30, FALSE, M
103508, Madeleine, Jones, 3603 Leola Way, Sacramento, CA, 94258, j_madeleine@gmail.com, (916) 186-9423, 2013-02-06, FALSE, F
104939, Damen, Wheeler, 6740 Branwood Way, Orangevale, CA, 95662, dwheeler@outlook.com, (916) 164-1156, 2013-04-11, FALSE, M

CREATE TABLE `geolocation` (
  LocationID INTEGER REFERENCES location(LocationID),
  Latitude REAL,
  Longitude REAL
);
Sample rows from `geolocation`:
0, 0.0, 0.0
1, 38.566129, -121.426432
2, 38.559615, -121.42243

CREATE TABLE `location` (
  LocationID INTEGER REFERENCES geolocation(LocationID),
  LocationName TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER
);
Sample rows from `location`:
0, LOST, None, None, None, None
1, Sac State American River Courtyard, 6000 J St, Sacramento, CA, 95819
2, Sac State Union, 6000 J St, Sacramento, CA, 95819

CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

CREATE TABLE `rootbeerreview` (
  CustomerID INTEGER PRIMARY KEY REFERENCES customers(CustomerID),
  BrandID INTEGER PRIMARY KEY REFERENCES rootbeerbrand(BrandID),
  StarRating INTEGER,
  ReviewDate DATE,
  Review TEXT
);
Sample rows from `rootbeerreview`:
101811, 10012, 5, 2013-07-15, None
101811, 10014, 1, 2013-07-08, None
101811, 10015, 3, 2013-07-25, None

CREATE TABLE `transaction` (
  TransactionID INTEGER,
  CreditCardNumber INTEGER,
  CustomerID INTEGER REFERENCES customers(CustomerID),
  TransactionDate DATE,
  CreditCardType TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  RootBeerID INTEGER REFERENCES rootbeer(RootBeerID),
  PurchasePrice REAL
);
Sample rows from `transaction`:
100000, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105661, 3.0
100001, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105798, 3.0
100002, 6011583832864739, 864896, 2014-07-07, Discover, 2, 102514, 3.0

",customers,"first, firstPurchaseDate"
movies_4,"How many Indian movies between 1/2/1990 and 12/30/2003 have revenue of more than 75,000,000 and popularity of no less than 20?",SELECT COUNT(t2.movie_id) FROM movie as t1 inner JOIN production_country as t2 ON t1.movie_id = t2.movie_id WHERE t1.revenue > 75000000 AND t1.popularity >= 20 AND t1.release_date BETWEEN '1990-01-01' AND '2003-12-31',"CREATE TABLE `movie` (
  movie_id INTEGER,
  title TEXT,
  budget INTEGER,
  homepage TEXT,
  overview TEXT,
  popularity REAL,
  release_date DATE,
  revenue INTEGER,
  runtime INTEGER,
  movie_status TEXT,
  tagline TEXT,
  vote_average REAL,
  vote_count INTEGER
);
Sample rows from `movie`:
5, Four Rooms, 4000000, , It's Ted the Bellhop's first night on the job...and the hotel's very unusual guests are about to place him in some outrageous predicaments. It seems that this evening's room service is serving up one unbelievable happening after another., 22.87623, 1995-12-09, 4300000, 98, Released, Twelve outrageous guests. Four scandalous requests. And one lone bellhop, in his first day on the job, who's in for the wildest New year's Eve of his life., 6.5, 530
11, Star Wars, 11000000, http://www.starwars.com/films/star-wars-episode-iv-a-new-hope, Princess Leia is captured and held hostage by the evil Imperial forces in their effort to take over the galactic Empire. Venturesome Luke Skywalker and dashing captain Han Solo team together with the loveable robot duo R2-D2 and C-3PO to rescue the beauti, 126.393695, 1977-05-25, 775398007, 121, Released, A long time ago in a galaxy far, far away..., 8.1, 6624
12, Finding Nemo, 94000000, http://movies.disney.com/finding-nemo, Nemo, an adventurous young clownfish, is unexpectedly taken from his Great Barrier Reef home to a dentist's office aquarium. It's up to his worrisome father Marlin and a friendly but forgetful fish Dory to bring Nemo home -- meeting vegetarian sharks, sur, 85.688789, 2003-05-30, 940335536, 100, Released, There are 3.7 trillion fish in the ocean, they're looking for one., 7.6, 6122

CREATE TABLE `production_country` (
  movie_id INTEGER REFERENCES movie(movie_id),
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `production_country`:
5, 214
11, 214
12, 214

","CREATE TABLE `country` (
  country_id INTEGER,
  country_iso_code TEXT,
  country_name TEXT
);
Sample rows from `country`:
128, AE, United Arab Emirates
129, AF, Afghanistan
130, AO, Angola

CREATE TABLE `department` (
  department_id INTEGER,
  department_name TEXT
);
Sample rows from `department`:
1, Camera
2, Directing
3, Production

CREATE TABLE `gender` (
  gender_id INTEGER,
  gender TEXT
);
Sample rows from `gender`:
0, Unspecified
1, Female
2, Male

CREATE TABLE `genre` (
  genre_id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
12, Adventure
14, Fantasy
16, Animation

CREATE TABLE `keyword` (
  keyword_id INTEGER,
  keyword_name TEXT
);
Sample rows from `keyword`:
30, individual
65, holiday
74, germany

CREATE TABLE `language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `language`:
24574, en, English
24575, sv, svenska
24576, de, Deutsch

CREATE TABLE `language_role` (
  role_id INTEGER,
  language_role TEXT
);
Sample rows from `language_role`:
1, Original
2, Spoken

CREATE TABLE `movie` (
  movie_id INTEGER,
  title TEXT,
  budget INTEGER,
  homepage TEXT,
  overview TEXT,
  popularity REAL,
  release_date DATE,
  revenue INTEGER,
  runtime INTEGER,
  movie_status TEXT,
  tagline TEXT,
  vote_average REAL,
  vote_count INTEGER
);
Sample rows from `movie`:
5, Four Rooms, 4000000, , It's Ted the Bellhop's first night on the job...and the hotel's very unusual guests are about to place him in some outrageous predicaments. It seems that this evening's room service is serving up one unbelievable happening after another., 22.87623, 1995-12-09, 4300000, 98, Released, Twelve outrageous guests. Four scandalous requests. And one lone bellhop, in his first day on the job, who's in for the wildest New year's Eve of his life., 6.5, 530
11, Star Wars, 11000000, http://www.starwars.com/films/star-wars-episode-iv-a-new-hope, Princess Leia is captured and held hostage by the evil Imperial forces in their effort to take over the galactic Empire. Venturesome Luke Skywalker and dashing captain Han Solo team together with the loveable robot duo R2-D2 and C-3PO to rescue the beauti, 126.393695, 1977-05-25, 775398007, 121, Released, A long time ago in a galaxy far, far away..., 8.1, 6624
12, Finding Nemo, 94000000, http://movies.disney.com/finding-nemo, Nemo, an adventurous young clownfish, is unexpectedly taken from his Great Barrier Reef home to a dentist's office aquarium. It's up to his worrisome father Marlin and a friendly but forgetful fish Dory to bring Nemo home -- meeting vegetarian sharks, sur, 85.688789, 2003-05-30, 940335536, 100, Released, There are 3.7 trillion fish in the ocean, they're looking for one., 7.6, 6122

CREATE TABLE `movie_genres` (
  movie_id INTEGER REFERENCES movie(movie_id),
  genre_id INTEGER REFERENCES genre(genre_id)
);
Sample rows from `movie_genres`:
5, 35
5, 80
11, 12

CREATE TABLE `movie_languages` (
  movie_id INTEGER REFERENCES movie(movie_id),
  language_id INTEGER REFERENCES language(language_id),
  language_role_id INTEGER REFERENCES language_role(role_id)
);
Sample rows from `movie_languages`:
5, 24574, 2
11, 24574, 2
12, 24574, 2

CREATE TABLE `person` (
  person_id INTEGER,
  person_name TEXT
);
Sample rows from `person`:
1, George Lucas
2, Mark Hamill
3, Harrison Ford

CREATE TABLE `movie_crew` (
  movie_id INTEGER REFERENCES movie(movie_id),
  person_id INTEGER REFERENCES person(person_id),
  department_id INTEGER REFERENCES department(department_id),
  job TEXT
);
Sample rows from `movie_crew`:
285, 120, 1, Director of Photography
285, 1704, 2, Director
285, 770, 3, Producer

CREATE TABLE `production_company` (
  company_id INTEGER,
  company_name TEXT
);
Sample rows from `production_company`:
1, Lucasfilm
2, Walt Disney Pictures
3, Pixar Animation Studios

CREATE TABLE `production_country` (
  movie_id INTEGER REFERENCES movie(movie_id),
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `production_country`:
5, 214
11, 214
12, 214

CREATE TABLE `movie_cast` (
  movie_id INTEGER REFERENCES movie(movie_id),
  person_id INTEGER REFERENCES person(person_id),
  character_name TEXT,
  gender_id INTEGER REFERENCES gender(gender_id),
  cast_order INTEGER
);
Sample rows from `movie_cast`:
285, 85, Captain Jack Sparrow, 2, 0
285, 114, Will Turner, 2, 1
285, 116, Elizabeth Swann, 1, 2

CREATE TABLE `movie_keywords` (
  movie_id INTEGER REFERENCES movie(None),
  keyword_id INTEGER REFERENCES keyword(None)
);
Sample rows from `movie_keywords`:
5, 612
5, 613
5, 616

CREATE TABLE `movie_company` (
  movie_id INTEGER REFERENCES movie(None),
  company_id INTEGER REFERENCES production_company(None)
);
Sample rows from `movie_company`:
5, 14
5, 59
11, 1

","movie, production_country","production_country.movie_id, movie.movie_id, movie.revenue, movie.popularity, movie.release_date"
shipping,What was the maximum weight of the shipment carried to Boston? Name the customer of that shipment.,"SELECT t1.weight, t2.cust_name FROM shipment as t1 inner JOIN customer as t2 ON t1.cust_id = t2.cust_id inner JOIN city as t3 ON t3.city_id = t1.city_id WHERE t3.city_name = 'Boston' ORDER BY t1.weight DESC LIMIT 1","CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

CREATE TABLE `customer` (
  cust_id INTEGER,
  cust_name TEXT,
  annual_revenue INTEGER,
  cust_type TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip REAL,
  phone TEXT
);
Sample rows from `customer`:
193, Advanced Fabricators, 39588651, manufacturer, 5141 Summit Boulevard, West Palm Beach, FL, 33415.0, (561) 683-3535
304, Pard's Trailer Sales, 17158109, wholesaler, 5910 South 300 West, Salt Lake City, UT, 84107.0, (801) 262-4864
314, Saar Enterprises, Inc., 47403613, retailer, 11687 192nd Street, Council Bluffs, IA, 51503.0, (712) 366-4929

CREATE TABLE `city` (
  city_id INTEGER,
  city_name TEXT,
  state TEXT,
  population INTEGER,
  area REAL
);
Sample rows from `city`:
100, Union City, New Jersey, 67088, 1.3
101, Huntington Park, California, 61348, 3.0
102, Passaic, New Jersey, 67861, 3.1

","CREATE TABLE `city` (
  city_id INTEGER,
  city_name TEXT,
  state TEXT,
  population INTEGER,
  area REAL
);
Sample rows from `city`:
100, Union City, New Jersey, 67088, 1.3
101, Huntington Park, California, 61348, 3.0
102, Passaic, New Jersey, 67861, 3.1

CREATE TABLE `customer` (
  cust_id INTEGER,
  cust_name TEXT,
  annual_revenue INTEGER,
  cust_type TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip REAL,
  phone TEXT
);
Sample rows from `customer`:
193, Advanced Fabricators, 39588651, manufacturer, 5141 Summit Boulevard, West Palm Beach, FL, 33415.0, (561) 683-3535
304, Pard's Trailer Sales, 17158109, wholesaler, 5910 South 300 West, Salt Lake City, UT, 84107.0, (801) 262-4864
314, Saar Enterprises, Inc., 47403613, retailer, 11687 192nd Street, Council Bluffs, IA, 51503.0, (712) 366-4929

CREATE TABLE `driver` (
  driver_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip_code INTEGER,
  phone TEXT
);
Sample rows from `driver`:
20, Sue, Newell, 268 Richmond Ave, Memphis, TN, 38106, (901) 774-6569
21, Andrea, Simons, 3574 Oak Limb Cv, Memphis, TN, 38135, (901) 384-0984
22, Roger, McHaney, 1839 S Orleans St, Memphis, TN, 38106, (901) 948-1043

CREATE TABLE `truck` (
  truck_id INTEGER,
  make TEXT,
  model_year INTEGER
);
Sample rows from `truck`:
1, Peterbilt, 2005
2, Mack, 2006
3, Peterbilt, 2007

CREATE TABLE `shipment` (
  ship_id INTEGER,
  cust_id INTEGER REFERENCES customer(cust_id),
  weight REAL,
  truck_id INTEGER REFERENCES truck(truck_id),
  driver_id INTEGER REFERENCES driver(driver_id),
  city_id INTEGER REFERENCES city(city_id),
  ship_date TEXT
);
Sample rows from `shipment`:
1000, 3660, 3528.0, 1, 23, 137, 2016-01-08
1001, 2001, 11394.0, 2, 23, 186, 2016-01-18
1002, 1669, 8712.0, 3, 27, 268, 2016-01-19

","shipment, customer, city","shipment.weight, customer.cust_name, shipment.cust_id, customer.cust_id, city.city_id, shipment.city_id, city.city_name"
sales_in_weather,Which weather station has the highest number of stores?,SELECT station_nbr FROM relation GROUP BY station_nbr ORDER BY COUNT(store_nbr) DESC LIMIT 1,"CREATE TABLE `relation` (
  store_nbr INTEGER REFERENCES sales_in_weather(store_nbr),
  station_nbr INTEGER REFERENCES weather(station_nbr)
);
Sample rows from `relation`:
1, 1
2, 14
3, 7

","CREATE TABLE `sales_in_weather` (
  date DATE PRIMARY KEY,
  store_nbr INTEGER PRIMARY KEY,
  item_nbr INTEGER PRIMARY KEY,
  units INTEGER
);
Sample rows from `sales_in_weather`:
2012-01-01, 1, 1, 0
2012-01-01, 1, 2, 0
2012-01-01, 1, 3, 0

CREATE TABLE `weather` (
  station_nbr INTEGER PRIMARY KEY,
  date DATE PRIMARY KEY,
  tmax INTEGER,
  tmin INTEGER,
  tavg INTEGER,
  depart INTEGER,
  dewpoint INTEGER,
  wetbulb INTEGER,
  heat INTEGER,
  cool INTEGER,
  sunrise TEXT,
  sunset TEXT,
  codesum TEXT,
  snowfall REAL,
  preciptotal REAL,
  stnpressure REAL,
  sealevel REAL,
  resultspeed REAL,
  resultdir INTEGER,
  avgspeed REAL
);
Sample rows from `weather`:
1, 2012-01-01, 52, 31, 42, None, 36, 40, 23, 0, None, None, RA FZFG BR, None, 0.05, 29.78, 29.92, 3.6, 20, 4.6
1, 2012-01-02, 50, 31, 41, None, 26, 35, 24, 0, None, None,  , None, 0.01, 29.44, 29.62, 9.8, 24, 10.3
1, 2012-01-03, 32, 11, 22, None, 4, 18, 43, 0, None, None,  , None, 0.0, 29.67, 29.87, 10.8, 31, 11.6

CREATE TABLE `relation` (
  store_nbr INTEGER REFERENCES sales_in_weather(store_nbr),
  station_nbr INTEGER REFERENCES weather(station_nbr)
);
Sample rows from `relation`:
1, 1
2, 14
3, 7

",relation,"station_nbr, store_nbr"
retails,"Customer No.129301 made an order on 1996/7/27, what was the delivery time for the first part of that order?",SELECT julianday(t2.l_receiptdate) - julianday(t2.l_commitdate) FROM orders as t1 inner JOIN lineitem as t2 ON t1.o_orderkey = t2.l_orderkey WHERE t1.o_custkey = '129301' AND t1.o_orderdate = '1996-07-27',"CREATE TABLE `orders` (
  o_orderdate DATE,
  o_orderkey INTEGER,
  o_custkey INTEGER REFERENCES customer(c_custkey),
  o_orderpriority TEXT,
  o_shippriority INTEGER,
  o_clerk TEXT,
  o_orderstatus TEXT,
  o_totalprice REAL,
  o_comment TEXT
);
Sample rows from `orders`:
1995-04-19, 1, 73100, 4-NOT SPECIFIED, 0, Clerk#000000916, P, 203198.56, final packages sleep blithely packa
1996-11-04, 2, 92861, 1-URGENT, 0, Clerk#000000373, O, 317719.99, final excuses about the ironic even deposits detect express request
1992-02-15, 3, 44875, 1-URGENT, 0, Clerk#000000485, F, 146674.98, final final deposits cajole foxes. blithely pendin

CREATE TABLE `lineitem` (
  l_shipdate DATE,
  l_orderkey INTEGER PRIMARY KEY REFERENCES orders(o_orderkey),
  l_discount REAL,
  l_extendedprice REAL,
  l_suppkey INTEGER REFERENCES partsupp(ps_suppkey),
  l_quantity INTEGER,
  l_returnflag TEXT,
  l_partkey INTEGER REFERENCES partsupp(ps_partkey),
  l_linestatus TEXT,
  l_tax REAL,
  l_commitdate DATE,
  l_receiptdate DATE,
  l_shipmode TEXT,
  l_linenumber INTEGER PRIMARY KEY,
  l_shipinstruct TEXT,
  l_comment TEXT
);
Sample rows from `lineitem`:
1995-08-16, 1, 0.1, 58303.08, 6296, 33, N, 98768, O, 0.06, 1995-07-12, 1995-09-14, RAIL, 1, NONE, carefully bo
1995-08-13, 1, 0.09, 16947.7, 8776, 10, N, 23771, O, 0.08, 1995-07-09, 1995-08-27, TRUCK, 2, TAKE BACK RETURN, blithely regular pac
1995-06-17, 1, 0.1, 63642.9, 3859, 34, N, 113858, O, 0.08, 1995-05-22, 1995-06-30, SHIP, 3, COLLECT COD, ironic accounts sleep furiously silen

","CREATE TABLE `customer` (
  c_custkey INTEGER,
  c_mktsegment TEXT,
  c_nationkey INTEGER REFERENCES nation(n_nationkey),
  c_name TEXT,
  c_address TEXT,
  c_phone TEXT,
  c_acctbal REAL,
  c_comment TEXT
);
Sample rows from `customer`:
1, BUILDING, 8, Customer#000000001, KwX3hMHjZ6, 937-241-3198, 3560.03, ironic excuses detect slyly silent requests. requests according to the exc
2, MACHINERY, 16, Customer#000000002, ioUn,eqTTXOdo, 906-965-7556, 7550.21, final express accounts mold slyly. ironic accounts cajole! quickly express a
3, FURNITURE, 11, Customer#000000003, YddJqmIdouNT9Yj, 328-750-7603, -926.96, carefully express foxes sleep carefully. pending platelets sleep thinly for t

CREATE TABLE `lineitem` (
  l_shipdate DATE,
  l_orderkey INTEGER PRIMARY KEY REFERENCES orders(o_orderkey),
  l_discount REAL,
  l_extendedprice REAL,
  l_suppkey INTEGER REFERENCES partsupp(ps_suppkey),
  l_quantity INTEGER,
  l_returnflag TEXT,
  l_partkey INTEGER REFERENCES partsupp(ps_partkey),
  l_linestatus TEXT,
  l_tax REAL,
  l_commitdate DATE,
  l_receiptdate DATE,
  l_shipmode TEXT,
  l_linenumber INTEGER PRIMARY KEY,
  l_shipinstruct TEXT,
  l_comment TEXT
);
Sample rows from `lineitem`:
1995-08-16, 1, 0.1, 58303.08, 6296, 33, N, 98768, O, 0.06, 1995-07-12, 1995-09-14, RAIL, 1, NONE, carefully bo
1995-08-13, 1, 0.09, 16947.7, 8776, 10, N, 23771, O, 0.08, 1995-07-09, 1995-08-27, TRUCK, 2, TAKE BACK RETURN, blithely regular pac
1995-06-17, 1, 0.1, 63642.9, 3859, 34, N, 113858, O, 0.08, 1995-05-22, 1995-06-30, SHIP, 3, COLLECT COD, ironic accounts sleep furiously silen

CREATE TABLE `nation` (
  n_nationkey INTEGER,
  n_name TEXT,
  n_regionkey INTEGER REFERENCES region(r_regionkey),
  n_comment TEXT
);
Sample rows from `nation`:
0, ALGERIA, 0, slyly express pinto beans cajole idly. deposits use blithely unusual packages? fluffily final accounts x-r
1, ARGENTINA, 1, instructions detect blithely stealthily pending packages
2, BRAZIL, 1, blithely unusual deposits are quickly--

CREATE TABLE `orders` (
  o_orderdate DATE,
  o_orderkey INTEGER,
  o_custkey INTEGER REFERENCES customer(c_custkey),
  o_orderpriority TEXT,
  o_shippriority INTEGER,
  o_clerk TEXT,
  o_orderstatus TEXT,
  o_totalprice REAL,
  o_comment TEXT
);
Sample rows from `orders`:
1995-04-19, 1, 73100, 4-NOT SPECIFIED, 0, Clerk#000000916, P, 203198.56, final packages sleep blithely packa
1996-11-04, 2, 92861, 1-URGENT, 0, Clerk#000000373, O, 317719.99, final excuses about the ironic even deposits detect express request
1992-02-15, 3, 44875, 1-URGENT, 0, Clerk#000000485, F, 146674.98, final final deposits cajole foxes. blithely pendin

CREATE TABLE `part` (
  p_partkey INTEGER,
  p_type TEXT,
  p_size INTEGER,
  p_brand TEXT,
  p_name TEXT,
  p_container TEXT,
  p_mfgr TEXT,
  p_retailprice REAL,
  p_comment TEXT
);
Sample rows from `part`:
1, LARGE PLATED TIN, 31, Brand#43, burlywood plum powder puff mint, LG BAG, Manufacturer#4, 901.0, blithely busy reque
2, LARGE POLISHED STEEL, 4, Brand#55, hot spring dodger dim light, LG CASE, Manufacturer#5, 902.0, even ironic requests s
3, STANDARD PLATED COPPER, 30, Brand#53, dark slate grey steel misty, WRAP CASE, Manufacturer#5, 903.0, slyly ironic fox

CREATE TABLE `partsupp` (
  ps_partkey INTEGER PRIMARY KEY REFERENCES part(p_partkey),
  ps_suppkey INTEGER PRIMARY KEY REFERENCES supplier(s_suppkey),
  ps_supplycost REAL,
  ps_availqty INTEGER,
  ps_comment TEXT
);
Sample rows from `partsupp`:
1, 2, 400.75, 1111, carefully ironic deposits use against the carefully unusual accounts. slyly silent platelets nag quickly even
1, 2502, 702.61, 3999, slyly regular accounts serve carefully. asymptotes after the slyly even instructions cajole quickly ironic requests. pending dugouts about the slyly 
1, 5002, 383.95, 7411, carefully special ideas are slyly. slyly ironic epitaphs use pending pending foxes. furiously express pinto beans lose quiet even requests: special final packages ar

CREATE TABLE `region` (
  r_regionkey INTEGER,
  r_name TEXT,
  r_comment TEXT
);
Sample rows from `region`:
0, AFRICA, asymptotes sublate after the r
1, AMERICA, requests affix quickly final tithes. blithely even packages above the a
2, ASIA, accounts cajole carefully according to the carefully exp

CREATE TABLE `supplier` (
  s_suppkey INTEGER,
  s_nationkey INTEGER REFERENCES nation(n_nationkey),
  s_comment TEXT,
  s_name TEXT,
  s_address TEXT,
  s_phone TEXT,
  s_acctbal REAL
);
Sample rows from `supplier`:
1, 13, blithely final pearls are. instructions thra, Supplier#000000001, ,wWs4pnykQOFl8mgVCU8EZMXqZs1w, 800-807-9579, 3082.86
2, 5, requests integrate fluffily. fluffily ironic deposits wake. bold, Supplier#000000002, WkXT6MSAJrp4qWq3W9N, 348-617-6055, 3009.73
3, 22, carefully express ideas shall have to unwin, Supplier#000000003, KjUqa42JEHaRDVQTHV6Yq2h, 471-986-9888, 9159.78

","orders, lineitem","lineitem.l_receiptdate, lineitem.l_commitdate, orders.o_orderkey, lineitem.l_orderkey, orders.o_custkey, orders.o_orderdate"
video_games,State the game publisher IDs of the games with a platform ID of 16.,SELECt t.game_publisher_id FROM game_platform as t WHERE t.platform_id = 16,"CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

","CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

",game_platform,"game_platform.game_publisher_id, game_platform.platform_id"
books,What is the price of the book with ISBN 9780763628321?,SELECT t2.price FROM book as t1 inner JOIN order_line as t2 ON t1.book_id = t2.book_id WHERE t1.isbn13 = 9780763628321,"CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","book, order_line","order_line.price, book.book_id, order_line.book_id, book.isbn13"
food_inspection_2,How many establishments that are doing business as Homemade Pizza have a risk level of 2?,SELECT COUNT(license_no) FROM establishment WHERE risk_level = 2 AND dba_name = 'HOMEMADE PIZZA',"CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

",establishment,"license_no, risk_level, dba_name"
movielens,"Among the action movies from the USA, how many of them are not in English?",SELECT COUNT(t1.movieid) fROM movies as t1 inner JOIN movies2directors as t2 ON t1.movieid = t2.movieid WHERE t1.country = 'USA' AND t1.isenglish = 'f' AND t2.genre = 'Action',"CREATE TABLE `movies` (
  movieid INTEGER,
  year INTEGER,
  isEnglish TEXT,
  country TEXT,
  runningtime INTEGER
);
Sample rows from `movies`:
1672052, 3, T, other, 2
1672111, 4, T, other, 2
1672580, 4, T, USA, 3

CREATE TABLE `movies2directors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  directorid INTEGER PRIMARY KEY REFERENCES directors(None),
  genre TEXT
);
Sample rows from `movies2directors`:
1672111, 54934, Action
1672946, 188940, Action
1679461, 179783, Action

","CREATE TABLE `users` (
  userid INTEGER,
  age TEXT,
  u_gender TEXT,
  occupation TEXT
);
Sample rows from `users`:
1, 1, F, 2
2, 56, M, 3
3, 25, M, 2

CREATE TABLE `directors` (
  directorid INTEGER,
  d_quality INTEGER PRIMARY KEY,
  avg_revenue INTEGER PRIMARY KEY
);
Sample rows from `directors`:
67, 4, 1
92, 2, 3
284, 4, 0

CREATE TABLE `actors` (
  actorid INTEGER,
  a_gender TEXT,
  a_quality INTEGER
);
Sample rows from `actors`:
4, M, 4
16, M, 0
28, M, 4

CREATE TABLE `movies` (
  movieid INTEGER,
  year INTEGER,
  isEnglish TEXT,
  country TEXT,
  runningtime INTEGER
);
Sample rows from `movies`:
1672052, 3, T, other, 2
1672111, 4, T, other, 2
1672580, 4, T, USA, 3

CREATE TABLE `movies2actors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  actorid INTEGER PRIMARY KEY REFERENCES actors(None),
  cast_num INTEGER
);
Sample rows from `movies2actors`:
1672580, 981535, 0
1672946, 1094968, 0
1673647, 149985, 0

CREATE TABLE `movies2directors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  directorid INTEGER PRIMARY KEY REFERENCES directors(None),
  genre TEXT
);
Sample rows from `movies2directors`:
1672111, 54934, Action
1672946, 188940, Action
1679461, 179783, Action

CREATE TABLE `u2base` (
  userid INTEGER PRIMARY KEY REFERENCES users(None),
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  rating TEXT
);
Sample rows from `u2base`:
2, 1964242, 1
2, 2219779, 1
3, 1856939, 1

","movies, movies2directors","movies.movieid, movies2directors.movieid, movies.country, movies.isenglish, movies2directors.genre"
movie,List the character's name of actress born in Sherman Oaks and starred in the movie Bruce Almighty with height greater than the 50% of average height of all actors listed.,SELECT t3.name FROM movie as t1 inner JOIN characters as t2 ON t1.movieid = t2.movieid inner JOIN actor as t3 ON t3.actorid = t2.actorid WHERE t3.gender = 'Female' AND t1.title = 'Godzilla' AND t3.`birth city` = 'Sherman Oaks' AND t3.`height (inches)` * 100 > ( SELECT AVG(`height (inches)`) FROM actor ) * 50,"CREATE TABLE `movie` (
  MovieID INTEGER,
  Title TEXT,
  MPAA Rating TEXT,
  Budget INTEGER,
  Gross INTEGER,
  Release Date TEXT,
  Genre TEXT,
  Runtime INTEGER,
  Rating REAL,
  Rating Count INTEGER,
  Summary TEXT
);
Sample rows from `movie`:
1, Look Who's Talking, PG-13, 7500000, 296000000, 1989-10-12, Romance, 93, 5.9, 73638, After a single, career-minded woman is left on her own to give birth to the child of a married man, she finds a new romantic chance in a cab driver. Meanwhile, the point-of-view of the newborn boy is narrated through voice-over.
2, Driving Miss Daisy, PG, 7500000, 145793296, 1989-12-13, Comedy, 99, 7.4, 91075, An old Jewish woman and her African-American chauffeur in the American South have a relationship that grows and improves over the years.
3, Turner & Hooch, PG, 13000000, 71079915, 1989-07-28, Crime, 100, 7.2, 91415, Det. Scott Turner (Tom Hanks) is an uptight, by-the-book police officer. When his friend Amos Reed (John McIntire), the proprietor of a junkyard, is killed, Turner reluctantly inherits the man's dog. Turner adjusts to life with the dog to help solve a murder case.

CREATE TABLE `characters` (
  MovieID INTEGER PRIMARY KEY REFERENCES movie(MovieID),
  ActorID INTEGER PRIMARY KEY REFERENCES actor(ActorID),
  Character Name TEXT,
  creditOrder INTEGER,
  pay TEXT,
  screentime TEXT
);
Sample rows from `characters`:
1, 1, James, 1, None, None
1, 2, Mollie, 2, None, None
1, 3, Rosie, 3, None, None

CREATE TABLE `actor` (
  ActorID INTEGER,
  Name TEXT,
  Date of Birth DATE,
  Birth City TEXT,
  Birth Country TEXT,
  Height (Inches) INTEGER,
  Biography TEXT,
  Gender TEXT,
  Ethnicity TEXT,
  NetWorth TEXT
);
Sample rows from `actor`:
1, John Travolta, 1954-02-18, Englewood, USA, 74, John Joseph Travolta was born in Englewood, New Jersey, one of six children of Helen Travolta (n�e Helen Cecilia Burke) and Salvatore/Samuel J. Travolta. His father was of Italian descent and his mother was of Irish ancestry. His father owned a tire repair shop called Travolta Tires in Hillsdale, NJ. Travolta started acting appearing in a local ..., Male, White, $250,000,000.00
2, Kirstie Alley, 1951-01-12, Wichita, USA, 67, None, Female, White, $40,000,000.00
3, Olympia Dukakis, 1931-06-20, Lowell, USA, 63, Long a vital, respected lady of the classic and contemporary stage this grand lady did not become a household name and sought-after film actress until age 56 when she turned in a glorious, Oscar-winning perf as Cher's sardonic mother in the romantic comedy Moonstruck (1987). Since then movie (and TV) fans have discovered what the East coast ..., Female, White, $6,000,000.00

","CREATE TABLE `actor` (
  ActorID INTEGER,
  Name TEXT,
  Date of Birth DATE,
  Birth City TEXT,
  Birth Country TEXT,
  Height (Inches) INTEGER,
  Biography TEXT,
  Gender TEXT,
  Ethnicity TEXT,
  NetWorth TEXT
);
Sample rows from `actor`:
1, John Travolta, 1954-02-18, Englewood, USA, 74, John Joseph Travolta was born in Englewood, New Jersey, one of six children of Helen Travolta (n�e Helen Cecilia Burke) and Salvatore/Samuel J. Travolta. His father was of Italian descent and his mother was of Irish ancestry. His father owned a tire repair shop called Travolta Tires in Hillsdale, NJ. Travolta started acting appearing in a local ..., Male, White, $250,000,000.00
2, Kirstie Alley, 1951-01-12, Wichita, USA, 67, None, Female, White, $40,000,000.00
3, Olympia Dukakis, 1931-06-20, Lowell, USA, 63, Long a vital, respected lady of the classic and contemporary stage this grand lady did not become a household name and sought-after film actress until age 56 when she turned in a glorious, Oscar-winning perf as Cher's sardonic mother in the romantic comedy Moonstruck (1987). Since then movie (and TV) fans have discovered what the East coast ..., Female, White, $6,000,000.00

CREATE TABLE `movie` (
  MovieID INTEGER,
  Title TEXT,
  MPAA Rating TEXT,
  Budget INTEGER,
  Gross INTEGER,
  Release Date TEXT,
  Genre TEXT,
  Runtime INTEGER,
  Rating REAL,
  Rating Count INTEGER,
  Summary TEXT
);
Sample rows from `movie`:
1, Look Who's Talking, PG-13, 7500000, 296000000, 1989-10-12, Romance, 93, 5.9, 73638, After a single, career-minded woman is left on her own to give birth to the child of a married man, she finds a new romantic chance in a cab driver. Meanwhile, the point-of-view of the newborn boy is narrated through voice-over.
2, Driving Miss Daisy, PG, 7500000, 145793296, 1989-12-13, Comedy, 99, 7.4, 91075, An old Jewish woman and her African-American chauffeur in the American South have a relationship that grows and improves over the years.
3, Turner & Hooch, PG, 13000000, 71079915, 1989-07-28, Crime, 100, 7.2, 91415, Det. Scott Turner (Tom Hanks) is an uptight, by-the-book police officer. When his friend Amos Reed (John McIntire), the proprietor of a junkyard, is killed, Turner reluctantly inherits the man's dog. Turner adjusts to life with the dog to help solve a murder case.

CREATE TABLE `characters` (
  MovieID INTEGER PRIMARY KEY REFERENCES movie(MovieID),
  ActorID INTEGER PRIMARY KEY REFERENCES actor(ActorID),
  Character Name TEXT,
  creditOrder INTEGER,
  pay TEXT,
  screentime TEXT
);
Sample rows from `characters`:
1, 1, James, 1, None, None
1, 2, Mollie, 2, None, None
1, 3, Rosie, 3, None, None

","movie, characters, actor","actor.name, movie.movieid, characters.movieid, actor.actorid, characters.actorid, actor.gender, movie.title, actor.birth city, actor.height (inches), height (inches)"
chicago_crime,"Give the FBI code for the crime described by ""The killing of one human being by another.""",SELECT fbi_code_no FROM fbi_code WHERE description = 'The killing of one human being by another.',"CREATE TABLE `fbi_code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `fbi_code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

","CREATE TABLE `Community_Area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `Community_Area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `District` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `District`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `FBI_Code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `FBI_Code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `IUCR` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `IUCR`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `Neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `Neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `Ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `Ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `Crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `Crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

",fbi_code,"fbi_code_no, description"
european_football_1,Which country had the game that Away team made the most goals?,SELECT t2.country FROM matchs as t1 inner JOIN divisions as t2 ON t1.div = t2.division GROUP BY t2.country ORDER BY SUM(t1.ftag) DESC LIMIT 1,"CREATE TABLE `matchs` (
  Div TEXT REFERENCES divisions(division),
  Date DATE,
  HomeTeam TEXT,
  AwayTeam TEXT,
  FTHG INTEGER,
  FTAG INTEGER,
  FTR TEXT,
  season INTEGER
);
Sample rows from `matchs`:
B1, 2020-08-08, Club Brugge, Charleroi, 0, 1, A, 2021
B1, 2020-08-08, Antwerp, Mouscron, 1, 1, D, 2021
B1, 2020-08-08, Standard, Cercle Brugge, 1, 0, H, 2021

CREATE TABLE `divisions` (
  division TEXT PRIMARY KEY,
  name TEXT,
  country TEXT
);
Sample rows from `divisions`:
B1, Division 1A, Belgium
D1, Bundesliga, Deutschland
D2, 2. Bundesliga, Deutschland

","CREATE TABLE `divisions` (
  division TEXT PRIMARY KEY,
  name TEXT,
  country TEXT
);
Sample rows from `divisions`:
B1, Division 1A, Belgium
D1, Bundesliga, Deutschland
D2, 2. Bundesliga, Deutschland

CREATE TABLE `matchs` (
  Div TEXT REFERENCES divisions(division),
  Date DATE,
  HomeTeam TEXT,
  AwayTeam TEXT,
  FTHG INTEGER,
  FTAG INTEGER,
  FTR TEXT,
  season INTEGER
);
Sample rows from `matchs`:
B1, 2020-08-08, Club Brugge, Charleroi, 0, 1, A, 2021
B1, 2020-08-08, Antwerp, Mouscron, 1, 1, D, 2021
B1, 2020-08-08, Standard, Cercle Brugge, 1, 0, H, 2021

","matchs, divisions","divisions.country, matchs.div, divisions.division, matchs.ftag"
talkingdata,How many app users belong to the category of Securities?,SELECT COUNT(t1.app_id) FROM app_labels as t1 inner JOIN label_categories as t2 ON t2.label_id = t1.label_id WHERE t2.category = 'Securities',"CREATE TABLE `app_labels` (
  app_id INTEGER REFERENCES app_all(app_id),
  label_id INTEGER REFERENCES label_categories(label_id)
);
Sample rows from `app_labels`:
7324884708820027918, 251
-4494216993218550286, 251
6058196446775239644, 406

CREATE TABLE `label_categories` (
  label_id INTEGER,
  category TEXT
);
Sample rows from `label_categories`:
1, None
2, game-game type
3, game-Game themes

","CREATE TABLE `app_all` (
  app_id INTEGER
);
Sample rows from `app_all`:
-9223281467940916832
-9222877069545393219
-9222785464897897681

CREATE TABLE `app_events` (
  event_id INTEGER PRIMARY KEY REFERENCES events(event_id),
  app_id INTEGER PRIMARY KEY,
  is_installed INTEGER,
  is_active INTEGER
);
Sample rows from `app_events`:
2, -8942695423876075857, 1, 0
2, -8022267440849930066, 1, 0
2, -5720078949152207372, 1, 0

CREATE TABLE `app_events_relevant` (
  event_id INTEGER PRIMARY KEY REFERENCES events_relevant(event_id),
  app_id INTEGER PRIMARY KEY REFERENCES app_all(app_id),
  is_installed INTEGER,
  is_active INTEGER
);
Sample rows from `app_events_relevant`:
2, -8942695423876075857, 1, 0
2, -8022267440849930066, 1, 0
2, -5720078949152207372, 1, 0

CREATE TABLE `app_labels` (
  app_id INTEGER REFERENCES app_all(app_id),
  label_id INTEGER REFERENCES label_categories(label_id)
);
Sample rows from `app_labels`:
7324884708820027918, 251
-4494216993218550286, 251
6058196446775239644, 406

CREATE TABLE `events` (
  event_id INTEGER,
  device_id INTEGER,
  timestamp DATETIME,
  longitude REAL,
  latitude REAL
);
Sample rows from `events`:
1, 29182687948017175, 2016-05-01 00:55:25.0, 121.0, 31.0
2, -6401643145415154744, 2016-05-01 00:54:12.0, 104.0, 31.0
3, -4833982096941402721, 2016-05-01 00:08:05.0, 107.0, 30.0

CREATE TABLE `events_relevant` (
  event_id INTEGER,
  device_id INTEGER REFERENCES gender_age(device_id),
  timestamp DATETIME,
  longitude REAL,
  latitude REAL
);
Sample rows from `events_relevant`:
2, None, -8942695423876075857, 1.0, 0.0
6, None, -8764672938472212518, 1.0, 1.0
7, None, -9050100410106163077, 1.0, 0.0

CREATE TABLE `gender_age` (
  device_id INTEGER REFERENCES phone_brand_device_model2(device_id),
  gender TEXT,
  age INTEGER,
  group TEXT
);
Sample rows from `gender_age`:
-9221086586254644858, M, 29, M29-31
-9221079146476055829, None, None, None
-9221066489596332354, M, 31, M29-31

CREATE TABLE `gender_age_test` (
  device_id INTEGER
);
Sample rows from `gender_age_test`:
-9223321966609553846
-9223042152723782980
-9222896629442493034

CREATE TABLE `gender_age_train` (
  device_id INTEGER,
  gender TEXT,
  age INTEGER,
  group TEXT
);
Sample rows from `gender_age_train`:
-9223067244542181226, M, 24, M23-26
-9222956879900151005, M, 36, M32-38
-9222754701995937853, M, 29, M29-31

CREATE TABLE `label_categories` (
  label_id INTEGER,
  category TEXT
);
Sample rows from `label_categories`:
1, None
2, game-game type
3, game-Game themes

CREATE TABLE `phone_brand_device_model2` (
  device_id INTEGER PRIMARY KEY,
  phone_brand TEXT PRIMARY KEY,
  device_model TEXT PRIMARY KEY
);
Sample rows from `phone_brand_device_model2`:
-9223321966609553846, 小米, 红米note
-9223067244542181226, vivo, Y19T
-9223042152723782980, 小米, MI 3

CREATE TABLE `sample_submission` (
  device_id INTEGER,
  F23- REAL,
  F24-26 REAL,
  F27-28 REAL,
  F29-32 REAL,
  F33-42 REAL,
  F43+ REAL,
  M22- REAL,
  M23-26 REAL,
  M27-28 REAL,
  M29-31 REAL,
  M32-38 REAL,
  M39+ REAL
);
Sample rows from `sample_submission`:
-9223321966609553846, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833
-9223042152723782980, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833
-9222896629442493034, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833

","app_labels, label_categories","app_labels.app_id, label_categories.label_id, app_labels.label_id, label_categories.category"
menu,How much is the price of menu with image ID 4000009194?,SELECT t3.price FROM menu as t1 inner JOIN menuPage as t2 ON t1.id = t2.menu_id inner JOIN menuItem as t3 ON t2.id = t3.menu_page_id WHERE t2.image_id = 4000009194,"CREATE TABLE `menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

CREATE TABLE `menuPage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `menuPage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

CREATE TABLE `menuItem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `menuItem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

","CREATE TABLE `Dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `Dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

CREATE TABLE `Menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `Menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

CREATE TABLE `MenuPage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `MenuPage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

CREATE TABLE `MenuItem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `MenuItem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

","menu, menuPage, menuItem","menuItem.price, menu.id, menuPage.menu_id, menuPage.id, menuItem.menu_page_id, menuPage.image_id"
chicago_crime,Which community area has the least population?,SELECT community_area_name FROM community_area ORDER BY population ASC LIMIT 1,"CREATE TABLE `community_area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `community_area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

","CREATE TABLE `Community_Area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `Community_Area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `District` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `District`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `FBI_Code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `FBI_Code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `IUCR` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `IUCR`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `Neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `Neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `Ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `Ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `Crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `Crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

",community_area,"community_area_name, population"
simpson_episodes,Name the title of the episode that received the highest star score and the highest number of votes.,"SELECT t1.title FROM episode as t1 inner JOIN vote as t2 ON t2.episode_id = t1.episode_id ORDER BY t2.stars DESC, t2.votes DESC LIMIT 1;","CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","episode, vote","episode.title, vote.episode_id, episode.episode_id, vote.stars, vote.votes"
video_games,How many games available on PSP were released in 2004?,SELECT COUNT(t3.game_id) FROM platform as t1 inner JOIN game_platform as t2 ON t1.id = t2.platform_id inner JOIN game_publisher as t3 ON t2.game_publisher_id = t3.id WHERE t1.platform_name = 'PSP' AND t2.release_year = 2004,"CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

","CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

","platform, game_platform, game_publisher","game_publisher.game_id, platform.id, game_platform.platform_id, game_platform.game_publisher_id, game_publisher.id, platform.platform_name, game_platform.release_year"
cs_semester,Find the most important and most difficult courses.,SELECT name FROM course WHERE credit = ( SELECT MAX(credit) FROM course ) AND diff = ( SELECT MAX(diff) FROM course ),"CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

","CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

CREATE TABLE `prof` (
  prof_id INTEGER,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  popularity INTEGER,
  teachingability INTEGER,
  graduate_from TEXT
);
Sample rows from `prof`:
1, Male, Nathaniel, Pigford, npigford0@hku.hk, 3, 5, University of Washington
2, Male, Zhihua, Zhou, zzhihua@hku.hk, 2, 1, Beijing Polytechnic University
3, Male, Ogdon, Zywicki, ozywicki2@hku.hk, 2, 2, University of Boston

CREATE TABLE `RA` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `RA`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

",course,"name, credit, diff"
world_development_indicators,Which European countries had the highest private expenditure on health in 2005? List the top ten countries in descending order and find the source of the data.,"SELECT DISTINCT t1.countrycode, t3.description FROM country as t1 inner JOIN indicators as t2 ON t1.countrycode = t2.countrycode inner JOIN countryNotes as t3 ON t1.countrycode = t3.countrycode WHERE t2.indicatorname = 'Out-of-pocket health expenditure (% of private expenditure on health)' AND t2.value > 0 AND t2.year = 2005 ORDER BY t2.value DESC LIMIT 10","CREATE TABLE `country` (
  CountryCode TEXT PRIMARY KEY,
  ShortName TEXT,
  TableName TEXT,
  LongName TEXT,
  Alpha2Code TEXT,
  CurrencyUnit TEXT,
  SpecialNotes TEXT,
  Region TEXT,
  IncomeGroup TEXT,
  Wb2Code TEXT,
  NationalAccountsBaseYear TEXT,
  NationalAccountsReferenceYear TEXT,
  SnaPriceValuation TEXT,
  LendingCategory TEXT,
  OtherGroups TEXT,
  SystemOfNationalAccounts TEXT,
  AlternativeConversionFactor TEXT,
  PppSurveyYear TEXT,
  BalanceOfPaymentsManualInUse TEXT,
  ExternalDebtReportingStatus TEXT,
  SystemOfTrade TEXT,
  GovernmentAccountingConcept TEXT,
  ImfDataDisseminationStandard TEXT,
  LatestPopulationCensus TEXT,
  LatestHouseholdSurvey TEXT,
  SourceOfMostRecentIncomeAndExpenditureData TEXT,
  VitalRegistrationComplete TEXT,
  LatestAgriculturalCensus TEXT,
  LatestIndustrialData INTEGER,
  LatestTradeData INTEGER,
  LatestWaterWithdrawalData INTEGER
);
Sample rows from `country`:
AFG, Afghanistan, Afghanistan, Islamic State of Afghanistan, AF, Afghan afghani, Fiscal year end: March 20; reporting period for national accounts data: FY (from 2013 are CY). National accounts data are sourced from the IMF and differ from the Central Statistics Organization numbers due to exclusion of the opium economy., South Asia, Low income, AF, 2002/03, , Value added at basic prices (VAB), IDA, HIPC, Country uses the 1993 System of National Accounts methodology., , , , Actual, General trade system, Consolidated central government, General Data Dissemination System (GDDS), 1979, Multiple Indicator Cluster Survey (MICS), 2010/11, Integrated household survey (IHS), 2008, , 2013/14, None, 2013, 2000
ALB, Albania, Albania, Republic of Albania, AL, Albanian lek, , Europe & Central Asia, Upper middle income, AL, Original chained constant price data are rescaled., 1996, Value added at basic prices (VAB), IBRD, , Country uses the 1993 System of National Accounts methodology., , Rolling, IMF Balance of Payments Manual, 6th edition., Actual, General trade system, Budgetary central government, General Data Dissemination System (GDDS), 2011, Demographic and Health Survey (DHS), 2008/09, Living Standards Measurement Study Survey (LSMS), 2011/12, Yes, 2012, 2011, 2013, 2006
DZA, Algeria, Algeria, People's Democratic Republic of Algeria, DZ, Algerian dinar, , Middle East & North Africa, Upper middle income, DZ, 1980, , Value added at basic prices (VAB), IBRD, , Country uses the 1968 System of National Accounts methodology., , 2011, IMF Balance of Payments Manual, 6th edition., Actual, Special trade system, Budgetary central government, General Data Dissemination System (GDDS), 2008, Multiple Indicator Cluster Survey (MICS), 2012, Integrated household survey (IHS), 1995, , , 2010, 2013, 2001

CREATE TABLE `indicators` (
  CountryName TEXT,
  CountryCode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  IndicatorName TEXT,
  IndicatorCode TEXT PRIMARY KEY,
  Year INTEGER PRIMARY KEY,
  Value INTEGER
);
Sample rows from `indicators`:
Arab World, ARB, Adolescent fertility rate (births per 1,000 women ages 15-19), SP.ADO.TFRT, 1960, 133
Arab World, ARB, Age dependency ratio (% of working-age population), SP.POP.DPND, 1960, 87
Arab World, ARB, Age dependency ratio, old (% of working-age population), SP.POP.DPND.OL, 1960, 6

CREATE TABLE `countryNotes` (
  Countrycode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Description TEXT
);
Sample rows from `countryNotes`:
ABW, EG.EGY.PRIM.PP.KD, Sources: Estimated based on UN Energy Statistics (2014); World Development Indicators, WDI (2014)
ABW, EG.ELC.RNEW.ZS, Sources: UN Energy Statistics (2014)
ABW, EG.FEC.RNEW.ZS, Sources: UN Energy Statistics (2014)

","CREATE TABLE `Country` (
  CountryCode TEXT PRIMARY KEY,
  ShortName TEXT,
  TableName TEXT,
  LongName TEXT,
  Alpha2Code TEXT,
  CurrencyUnit TEXT,
  SpecialNotes TEXT,
  Region TEXT,
  IncomeGroup TEXT,
  Wb2Code TEXT,
  NationalAccountsBaseYear TEXT,
  NationalAccountsReferenceYear TEXT,
  SnaPriceValuation TEXT,
  LendingCategory TEXT,
  OtherGroups TEXT,
  SystemOfNationalAccounts TEXT,
  AlternativeConversionFactor TEXT,
  PppSurveyYear TEXT,
  BalanceOfPaymentsManualInUse TEXT,
  ExternalDebtReportingStatus TEXT,
  SystemOfTrade TEXT,
  GovernmentAccountingConcept TEXT,
  ImfDataDisseminationStandard TEXT,
  LatestPopulationCensus TEXT,
  LatestHouseholdSurvey TEXT,
  SourceOfMostRecentIncomeAndExpenditureData TEXT,
  VitalRegistrationComplete TEXT,
  LatestAgriculturalCensus TEXT,
  LatestIndustrialData INTEGER,
  LatestTradeData INTEGER,
  LatestWaterWithdrawalData INTEGER
);
Sample rows from `Country`:
AFG, Afghanistan, Afghanistan, Islamic State of Afghanistan, AF, Afghan afghani, Fiscal year end: March 20; reporting period for national accounts data: FY (from 2013 are CY). National accounts data are sourced from the IMF and differ from the Central Statistics Organization numbers due to exclusion of the opium economy., South Asia, Low income, AF, 2002/03, , Value added at basic prices (VAB), IDA, HIPC, Country uses the 1993 System of National Accounts methodology., , , , Actual, General trade system, Consolidated central government, General Data Dissemination System (GDDS), 1979, Multiple Indicator Cluster Survey (MICS), 2010/11, Integrated household survey (IHS), 2008, , 2013/14, None, 2013, 2000
ALB, Albania, Albania, Republic of Albania, AL, Albanian lek, , Europe & Central Asia, Upper middle income, AL, Original chained constant price data are rescaled., 1996, Value added at basic prices (VAB), IBRD, , Country uses the 1993 System of National Accounts methodology., , Rolling, IMF Balance of Payments Manual, 6th edition., Actual, General trade system, Budgetary central government, General Data Dissemination System (GDDS), 2011, Demographic and Health Survey (DHS), 2008/09, Living Standards Measurement Study Survey (LSMS), 2011/12, Yes, 2012, 2011, 2013, 2006
DZA, Algeria, Algeria, People's Democratic Republic of Algeria, DZ, Algerian dinar, , Middle East & North Africa, Upper middle income, DZ, 1980, , Value added at basic prices (VAB), IBRD, , Country uses the 1968 System of National Accounts methodology., , 2011, IMF Balance of Payments Manual, 6th edition., Actual, Special trade system, Budgetary central government, General Data Dissemination System (GDDS), 2008, Multiple Indicator Cluster Survey (MICS), 2012, Integrated household survey (IHS), 1995, , , 2010, 2013, 2001

CREATE TABLE `Series` (
  SeriesCode TEXT PRIMARY KEY,
  Topic TEXT,
  IndicatorName TEXT,
  ShortDefinition TEXT,
  LongDefinition TEXT,
  UnitOfMeasure TEXT,
  Periodicity TEXT,
  BasePeriod TEXT,
  OtherNotes INTEGER,
  AggregationMethod TEXT,
  LimitationsAndExceptions TEXT,
  NotesFromOriginalSource TEXT,
  GeneralComments TEXT,
  Source TEXT,
  StatisticalConceptAndMethodology TEXT,
  DevelopmentRelevance TEXT,
  RelatedSourceLinks TEXT,
  OtherWebLinks INTEGER,
  RelatedIndicators INTEGER,
  LicenseType TEXT
);
Sample rows from `Series`:
BN.KLT.DINV.CD, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net (BoP, current US$), , Foreign direct investment are the net inflows of investment to acquire a lasting management interest (10 percent or more of voting stock) in an enterprise operating in an economy other than that of the investor. It is the sum of equity capital, reinvestme, , Annual, , None, , , , Note: Data are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6) and are only available from 2005 onwards. In BPM6, the headings of the financial account have been changed from credits and debits to net acquisition of financial ass, International Monetary Fund, Balance of Payments Statistics Yearbook and data files., , , , None, None, Open
BX.KLT.DINV.WD.GD.ZS, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net inflows (% of GDP), , Foreign direct investment are the net inflows of investment to acquire a lasting management interest (10 percent or more of voting stock) in an enterprise operating in an economy other than that of the investor. It is the sum of equity capital, reinvestme, , Annual, , None, Weighted average, FDI data do not give a complete picture of international investment in an economy. Balance of payments data on FDI do not include capital raised locally, an important source of investment financing in some developing countries. In addition, FDI data omit , , Note: Data starting from 2005 are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6)., International Monetary Fund, International Financial Statistics and Balance of Payments databases, World Bank, International Debt Statistics, and World Bank and OECD GDP estimates., Data on equity flows are based on balance of payments data reported by the International Monetary Fund (IMF). Foreign direct investment (FDI) data are supplemented by the World Bank staff estimates using data from the United Nations Conference on Trade an, Private financial flows - equity and debt - account for the bulk of development finance. Equity flows comprise foreign direct investment (FDI) and portfolio equity. Debt flows are financing raised through bond issuance, bank lending, and supplier credits., , None, None, Open
BX.KLT.DINV.CD.WD, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net inflows (BoP, current US$), , Foreign direct investment refers to direct investment equity flows in the reporting economy. It is the sum of equity capital, reinvestment of earnings, and other capital. Direct investment is a category of cross-border investment associated with a residen, , Annual, , None, Sum, FDI data do not give a complete picture of international investment in an economy. Balance of payments data on FDI do not include capital raised locally, an important source of investment financing in some developing countries. In addition, FDI data omit , , Note: Data starting from 2005 are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6)., International Monetary Fund, Balance of Payments database, supplemented by data from the United Nations Conference on Trade and Development and official national sources., Data on equity flows are based on balance of payments data reported by the International Monetary Fund (IMF). Foreign direct investment (FDI) data are supplemented by the World Bank staff estimates using data from the United Nations Conference on Trade an, Private financial flows - equity and debt - account for the bulk of development finance. Equity flows comprise foreign direct investment (FDI) and portfolio equity. Debt flows are financing raised through bond issuance, bank lending, and supplier credits., , None, None, Open

CREATE TABLE `CountryNotes` (
  Countrycode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Description TEXT
);
Sample rows from `CountryNotes`:
ABW, EG.EGY.PRIM.PP.KD, Sources: Estimated based on UN Energy Statistics (2014); World Development Indicators, WDI (2014)
ABW, EG.ELC.RNEW.ZS, Sources: UN Energy Statistics (2014)
ABW, EG.FEC.RNEW.ZS, Sources: UN Energy Statistics (2014)

CREATE TABLE `Footnotes` (
  Countrycode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Year TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `Footnotes`:
ABW, AG.LND.FRST.K2, YR1990, Not specified
ABW, AG.LND.FRST.K2, YR2000, Not specified
ABW, AG.LND.FRST.K2, YR2005, Not specified

CREATE TABLE `Indicators` (
  CountryName TEXT,
  CountryCode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  IndicatorName TEXT,
  IndicatorCode TEXT PRIMARY KEY,
  Year INTEGER PRIMARY KEY,
  Value INTEGER
);
Sample rows from `Indicators`:
Arab World, ARB, Adolescent fertility rate (births per 1,000 women ages 15-19), SP.ADO.TFRT, 1960, 133
Arab World, ARB, Age dependency ratio (% of working-age population), SP.POP.DPND, 1960, 87
Arab World, ARB, Age dependency ratio, old (% of working-age population), SP.POP.DPND.OL, 1960, 6

CREATE TABLE `SeriesNotes` (
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Year TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `SeriesNotes`:
SP.ADO.TFRT, YR1960, Interpolated using data for 1957 and 1962.
SP.DYN.AMRT.FE, YR1960, Interpolated using data for 1957 and 1962, if the data source is United Nations World Population Prospects.
SP.DYN.AMRT.MA, YR1960, Interpolated using data for 1957 and 1962, if the data source is United Nations World Population Prospects.

","country, indicators, countryNotes","country.countrycode, countryNotes.description, indicators.countrycode, countryNotes.countrycode, indicators.indicatorname, indicators.value, indicators.year"
cs_semester,What are the names of the courses that the students with the lowest intelligence are least satisfied with?,SELECT t3.name FROM student as t1 inner JOIN registration as t2 ON t1.student_id = t2.student_id inner JOIN course as t3 ON t2.course_id = t3.course_id WHERE t2.sat = 1 AND t1.intelligence = 1,"CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

","CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

CREATE TABLE `prof` (
  prof_id INTEGER,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  popularity INTEGER,
  teachingability INTEGER,
  graduate_from TEXT
);
Sample rows from `prof`:
1, Male, Nathaniel, Pigford, npigford0@hku.hk, 3, 5, University of Washington
2, Male, Zhihua, Zhou, zzhihua@hku.hk, 2, 1, Beijing Polytechnic University
3, Male, Ogdon, Zywicki, ozywicki2@hku.hk, 2, 2, University of Boston

CREATE TABLE `RA` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `RA`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

","student, registration, course","course.name, student.student_id, registration.student_id, registration.course_id, course.course_id, registration.sat, student.intelligence"
soccer_2016,List the id of the player who won the Orange Cap for 2 consecutive seasons.,SELECT orange_cap FROM season GROUP BY orange_cap HAVING COUNT(season_Year) > 1,"CREATE TABLE `season` (
  Season_Id INTEGER,
  Man_of_the_Series INTEGER,
  Orange_Cap INTEGER,
  Purple_Cap INTEGER,
  Season_Year INTEGER
);
Sample rows from `season`:
1, 32, 100, 102, 2008
2, 53, 18, 61, 2009
3, 133, 133, 131, 2010

","CREATE TABLE `Batting_Style` (
  Batting_Id INTEGER,
  Batting_hand TEXT
);
Sample rows from `Batting_Style`:
1, Left-hand bat
2, Right-hand bat

CREATE TABLE `Bowling_Style` (
  Bowling_Id INTEGER,
  Bowling_skill TEXT
);
Sample rows from `Bowling_Style`:
1, Right-arm medium
2, Right-arm offbreak
3, Right-arm fast-medium

CREATE TABLE `City` (
  City_Id INTEGER,
  City_Name TEXT,
  Country_id INTEGER
);
Sample rows from `City`:
1, Bangalore, 1
2, Chandigarh, 1
3, Delhi, 1

CREATE TABLE `Country` (
  Country_Id INTEGER REFERENCES Country(Country_Id),
  Country_Name TEXT
);
Sample rows from `Country`:
1, India
2, South Africa
3, U.A.E

CREATE TABLE `Extra_Type` (
  Extra_Id INTEGER,
  Extra_Name TEXT
);
Sample rows from `Extra_Type`:
1, legbyes
2, wides
3, byes

CREATE TABLE `Extra_Runs` (
  Match_Id INTEGER PRIMARY KEY,
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Extra_Type_Id INTEGER REFERENCES Extra_Type(Extra_Id),
  Extra_Runs INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Extra_Runs`:
335987, 1, 1, 1, 1, 1
335987, 1, 2, 2, 1, 2
335987, 1, 3, 2, 1, 1

CREATE TABLE `Out_Type` (
  Out_Id INTEGER,
  Out_Name TEXT
);
Sample rows from `Out_Type`:
1, caught
2, bowled
3, run out

CREATE TABLE `Outcome` (
  Outcome_Id INTEGER,
  Outcome_Type TEXT
);
Sample rows from `Outcome`:
1, Result
2, No Result
3, Superover

CREATE TABLE `Player` (
  Player_Id INTEGER,
  Player_Name TEXT,
  DOB DATE,
  Batting_hand INTEGER REFERENCES Batting_Style(Batting_Id),
  Bowling_skill INTEGER REFERENCES Bowling_Style(Bowling_Id),
  Country_Name INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Player`:
1, SC Ganguly, 1972-07-08, 1, 1, 1
2, BB McCullum, 1981-09-27, 2, 1, 4
3, RT Ponting, 1974-12-19, 2, 1, 5

CREATE TABLE `Rolee` (
  Role_Id INTEGER,
  Role_Desc TEXT
);
Sample rows from `Rolee`:
1, Captain
2, Keeper
3, Player

CREATE TABLE `Season` (
  Season_Id INTEGER,
  Man_of_the_Series INTEGER,
  Orange_Cap INTEGER,
  Purple_Cap INTEGER,
  Season_Year INTEGER
);
Sample rows from `Season`:
1, 32, 100, 102, 2008
2, 53, 18, 61, 2009
3, 133, 133, 131, 2010

CREATE TABLE `Team` (
  Team_Id INTEGER,
  Team_Name TEXT
);
Sample rows from `Team`:
1, Kolkata Knight Riders
2, Royal Challengers Bangalore
3, Chennai Super Kings

CREATE TABLE `Toss_Decision` (
  Toss_Id INTEGER,
  Toss_Name TEXT
);
Sample rows from `Toss_Decision`:
1, field
2, bat

CREATE TABLE `Umpire` (
  Umpire_Id INTEGER,
  Umpire_Name TEXT,
  Umpire_Country INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Umpire`:
1, Asad Rauf, 6
2, MR Benson, 10
3, Aleem Dar, 6

CREATE TABLE `Venue` (
  Venue_Id INTEGER,
  Venue_Name TEXT,
  City_Id INTEGER REFERENCES City(City_Id)
);
Sample rows from `Venue`:
1, M Chinnaswamy Stadium, 1
2, Punjab Cricket Association Stadium, 2
3, Feroz Shah Kotla, 3

CREATE TABLE `Win_By` (
  Win_Id INTEGER,
  Win_Type TEXT
);
Sample rows from `Win_By`:
1, runs
2, wickets
3, NO Result

CREATE TABLE `Match` (
  Match_Id INTEGER,
  Team_1 INTEGER REFERENCES Team(Team_Id),
  Team_2 INTEGER REFERENCES Team(Team_Id),
  Match_Date DATE,
  Season_Id INTEGER REFERENCES Season(Season_Id),
  Venue_Id INTEGER REFERENCES Venue(Venue_Id),
  Toss_Winner INTEGER REFERENCES Team(Team_Id),
  Toss_Decide INTEGER REFERENCES Toss_Decision(Toss_Id),
  Win_Type INTEGER REFERENCES Win_By(Win_Id),
  Win_Margin INTEGER,
  Outcome_type INTEGER REFERENCES Out_Type(Out_Id),
  Match_Winner INTEGER REFERENCES Team(Team_Id),
  Man_of_the_Match INTEGER REFERENCES Player(Player_Id)
);
Sample rows from `Match`:
335987, 2, 1, 2008-04-18, 1, 1, 2, 1, 1, 140, 1, 1, 2
335988, 4, 3, 2008-04-19, 1, 2, 3, 2, 1, 33, 1, 3, 19
335989, 6, 5, 2008-04-19, 1, 3, 5, 2, 2, 9, 1, 6, 90

CREATE TABLE `Ball_by_Ball` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Innings_No INTEGER PRIMARY KEY,
  Team_Batting INTEGER,
  Team_Bowling INTEGER,
  Striker_Batting_Position INTEGER,
  Striker INTEGER,
  Non_Striker INTEGER,
  Bowler INTEGER
);
Sample rows from `Ball_by_Ball`:
335987, 1, 1, 1, 1, 2, 1, 1, 2, 14
335987, 1, 1, 2, 2, 1, 1, 6, 7, 106
335987, 1, 2, 1, 1, 2, 2, 2, 1, 14

CREATE TABLE `Batsman_Scored` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Runs_Scored INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Batsman_Scored`:
335987, 1, 1, 0, 1
335987, 1, 1, 1, 2
335987, 1, 2, 0, 1

CREATE TABLE `Player_Match` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Player_Id INTEGER PRIMARY KEY REFERENCES Player(Player_Id),
  Role_Id INTEGER PRIMARY KEY REFERENCES Rolee(Role_Id),
  Team_Id INTEGER REFERENCES Team(Team_Id)
);
Sample rows from `Player_Match`:
335987, 1, 1, 1
335987, 2, 3, 1
335987, 3, 3, 1

CREATE TABLE `Wicket_Taken` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Player_Out INTEGER REFERENCES Player(Player_Id),
  Kind_Out INTEGER REFERENCES Out_Type(Out_Id),
  Fielders INTEGER REFERENCES Player(Player_Id),
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Wicket_Taken`:
335987, 2, 1, 6, 2, None, 2
335987, 3, 2, 8, 2, None, 2
335987, 5, 5, 9, 1, 83, 2

",season,"orange_cap, season_Year"
regional_sales,"In which region can you find the stores located in the state whose median income is no more than 30,000?",SELECt t FROM ( SELECt DistINCt case  when t2.`median income` < 30000 tHEN t1.region end as t FROM regions t1 inner JOIN `store locations` t2 ON t2.statecode = t1.statecode ) WHERE t is NOt null,"CREATE TABLE `regions` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `regions`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `store locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `store locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  Customer Names TEXT
);
Sample rows from `Customers`:
1, Avon Corp
2, WakeFern 
3, Elorac, Corp

CREATE TABLE `Products` (
  ProductID INTEGER,
  Product Name TEXT
);
Sample rows from `Products`:
1, Cookware
2, Photo Frames
3, Table Lamps

CREATE TABLE `Regions` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `Regions`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `Sales Team` (
  SalesTeamID INTEGER,
  Sales Team TEXT,
  Region TEXT
);
Sample rows from `Sales Team`:
1, Adam Hernandez, Northeast
2, Keith Griffin, Northeast
3, Jerry Green, West

CREATE TABLE `Store Locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `Store Locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

CREATE TABLE `Sales Orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `Sales Orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

","regions, store locations","store locations.median income, regions.region, store locations.statecode, regions.statecode"
public_review_platform,"Among businesses with ""Wi-Fi"" attribute, which businesses id are located at SC State?",SELECT t3.business_id FROM attributes as t1 inner JOIN business_attributes as t2 ON t1.attribute_id = t2.attribute_id inner JOIN business as t3 ON t2.business_id = t3.business_id WHERE t1.attribute_name = 'Wi-Fi' AND t2.attribute_value = 'true' AND t3.state = 'SC',"CREATE TABLE `attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `business_attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `business_attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","attributes, business_attributes, business","business.business_id, attributes.attribute_id, business_attributes.attribute_id, business_attributes.business_id, attributes.attribute_name, business_attributes.attribute_value, business.state"
regional_sales,"How many stores with less need for products, and purchased through a distributor, are located in Washtenaw County?",SELECT SUM(case when t1.`order quantity` = 1 AND t1.`sales channel` = 'Distributor' AND t2.county = 'Washtenaw county' then 1 else 0 end) FROM `sales orders` as t1 inner JOIN `store locations` as t2 ON t2.storeID = t1._storeID,"CREATE TABLE `sales orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `sales orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

CREATE TABLE `store locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `store locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  Customer Names TEXT
);
Sample rows from `Customers`:
1, Avon Corp
2, WakeFern 
3, Elorac, Corp

CREATE TABLE `Products` (
  ProductID INTEGER,
  Product Name TEXT
);
Sample rows from `Products`:
1, Cookware
2, Photo Frames
3, Table Lamps

CREATE TABLE `Regions` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `Regions`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `Sales Team` (
  SalesTeamID INTEGER,
  Sales Team TEXT,
  Region TEXT
);
Sample rows from `Sales Team`:
1, Adam Hernandez, Northeast
2, Keith Griffin, Northeast
3, Jerry Green, West

CREATE TABLE `Store Locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `Store Locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

CREATE TABLE `Sales Orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `Sales Orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

","sales orders, store locations","sales orders.order quantity, sales orders.sales channel, store locations.county, store locations.storeID, sales orders._storeID"
public_review_platform,How many long reviews does user No. 36139 give for the Yelp businesses?,SELECT COUNT(review_length) FROM reviews WHERE user_id = 36139 AND review_length LIKE 'long',"CREATE TABLE `reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

",reviews,"review_length, user_id"
retail_world,Provide the supplier company name in Sydney and its homepage address if available.,"SELECT companyname, homepage FROM suppliers WHERE city = 'Sydney'","CREATE TABLE `suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

",suppliers,"companyname, homepage, city"
cs_semester,"Among the students with high salary, what is total number of students with a GPA higher than 3?",SELECT COUNT(t1.student_id) FROM ra as t1 inner JOIN student as t2 ON t1.student_id = t2.student_id WHERE t1.salary = 'high' AND t2.gpa > 3,"CREATE TABLE `ra` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `ra`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

","CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

CREATE TABLE `prof` (
  prof_id INTEGER,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  popularity INTEGER,
  teachingability INTEGER,
  graduate_from TEXT
);
Sample rows from `prof`:
1, Male, Nathaniel, Pigford, npigford0@hku.hk, 3, 5, University of Washington
2, Male, Zhihua, Zhou, zzhihua@hku.hk, 2, 1, Beijing Polytechnic University
3, Male, Ogdon, Zywicki, ozywicki2@hku.hk, 2, 2, University of Boston

CREATE TABLE `RA` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `RA`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

","ra, student","ra.student_id, student.student_id, ra.salary, student.gpa"
food_inspection,"List the violation type ID of business with business ID from 30 to 50 and located at 747 IRVING St, San Francisco.",SELECT DISTINCT t1.violation_type_id FROM violations as t1 inner JOIN businesses as t2 ON t1.business_id = t2.business_id WHERE t2.business_id BETWEEN 30 AND 50 AND t2.address = '747 IRVING St' AND t2.city = 'San Francisco',"CREATE TABLE `violations` (
  business_id INTEGER REFERENCES businesses(business_id),
  date DATE,
  violation_type_id TEXT,
  risk_category TEXT,
  description TEXT
);
Sample rows from `violations`:
10, 2014-07-29, 103129, Moderate Risk, Insufficient hot water or running water
10, 2014-07-29, 103144, Low Risk, Unapproved or unmaintained equipment or utensils
10, 2014-01-14, 103119, Moderate Risk, Inadequate and inaccessible handwashing facilities

CREATE TABLE `businesses` (
  business_id INTEGER,
  name TEXT,
  address TEXT,
  city TEXT,
  postal_code TEXT,
  latitude REAL,
  longitude REAL,
  phone_number INTEGER,
  tax_code TEXT,
  business_certificate INTEGER,
  application_date DATE,
  owner_name TEXT,
  owner_address TEXT,
  owner_city TEXT,
  owner_state TEXT,
  owner_zip TEXT
);
Sample rows from `businesses`:
10, Tiramisu Kitchen, 033 Belden Pl, San Francisco, 94104, 37.7911, -122.404, None, H24, 779059, None, Tiramisu LLC, 33 Belden St, San Francisco, CA, 94104
24, OMNI S.F. Hotel - 2nd Floor Pantry, 500 California St, 2nd  Floor, San Francisco, 94104, 37.7929, -122.403, None, H24, 352312, None, OMNI San Francisco Hotel Corp, 500 California St, 2nd Floor, San Francisco, CA, 94104
31, Norman's Ice Cream and Freezes, 2801 Leavenworth St, San Francisco, 94133, 37.8072, -122.419, None, H24, 346882, None, Norman Antiforda, 2801 Leavenworth St, San Francisco, CA, 94133

","CREATE TABLE `businesses` (
  business_id INTEGER,
  name TEXT,
  address TEXT,
  city TEXT,
  postal_code TEXT,
  latitude REAL,
  longitude REAL,
  phone_number INTEGER,
  tax_code TEXT,
  business_certificate INTEGER,
  application_date DATE,
  owner_name TEXT,
  owner_address TEXT,
  owner_city TEXT,
  owner_state TEXT,
  owner_zip TEXT
);
Sample rows from `businesses`:
10, Tiramisu Kitchen, 033 Belden Pl, San Francisco, 94104, 37.7911, -122.404, None, H24, 779059, None, Tiramisu LLC, 33 Belden St, San Francisco, CA, 94104
24, OMNI S.F. Hotel - 2nd Floor Pantry, 500 California St, 2nd  Floor, San Francisco, 94104, 37.7929, -122.403, None, H24, 352312, None, OMNI San Francisco Hotel Corp, 500 California St, 2nd Floor, San Francisco, CA, 94104
31, Norman's Ice Cream and Freezes, 2801 Leavenworth St, San Francisco, 94133, 37.8072, -122.419, None, H24, 346882, None, Norman Antiforda, 2801 Leavenworth St, San Francisco, CA, 94133

CREATE TABLE `inspections` (
  business_id INTEGER REFERENCES businesses(business_id),
  score INTEGER,
  date DATE,
  type TEXT
);
Sample rows from `inspections`:
10, 92, 2014-01-14, Routine - Unscheduled
10, None, 2014-01-24, Reinspection/Followup
10, 94, 2014-07-29, Routine - Unscheduled

CREATE TABLE `violations` (
  business_id INTEGER REFERENCES businesses(business_id),
  date DATE,
  violation_type_id TEXT,
  risk_category TEXT,
  description TEXT
);
Sample rows from `violations`:
10, 2014-07-29, 103129, Moderate Risk, Insufficient hot water or running water
10, 2014-07-29, 103144, Low Risk, Unapproved or unmaintained equipment or utensils
10, 2014-01-14, 103119, Moderate Risk, Inadequate and inaccessible handwashing facilities

","violations, businesses","violations.violation_type_id, violations.business_id, businesses.business_id, businesses.address, businesses.city"
regional_sales,What is the detailed coordinates of the store where the product with the 4th highest profit were purchased from?,"SELECT t2.latitude, t2.longitude FROM `sales orders` as t1 inner JOIN `store locations` as t2 ON t2.storeID = t1._storeID ORDER BY replace(t1.`unit price`, ',', '') - replace(t1.`unit cost`, ',', '') DESC LIMIT 3, 1","CREATE TABLE `sales orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `sales orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

CREATE TABLE `store locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `store locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  Customer Names TEXT
);
Sample rows from `Customers`:
1, Avon Corp
2, WakeFern 
3, Elorac, Corp

CREATE TABLE `Products` (
  ProductID INTEGER,
  Product Name TEXT
);
Sample rows from `Products`:
1, Cookware
2, Photo Frames
3, Table Lamps

CREATE TABLE `Regions` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `Regions`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `Sales Team` (
  SalesTeamID INTEGER,
  Sales Team TEXT,
  Region TEXT
);
Sample rows from `Sales Team`:
1, Adam Hernandez, Northeast
2, Keith Griffin, Northeast
3, Jerry Green, West

CREATE TABLE `Store Locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `Store Locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

CREATE TABLE `Sales Orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `Sales Orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

","sales orders, store locations","store locations.latitude, store locations.longitude, store locations.storeID, sales orders._storeID, sales orders.unit price, sales orders.unit cost"
olympics,How many athletes took part in the Olympic games held in Barcelona?,SELECT COUNT(t1.person_id) FROM games_competitor as t1 inner JOIN games_city as t2 ON t1.games_id = t2.games_id inner JOIN city as t3 ON t2.city_id = t3.id WHERE t3.city_name = 'Barcelona',"CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

","CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `medal` (
  id INTEGER,
  medal_name TEXT
);
Sample rows from `medal`:
1, Gold
2, Silver
3, Bronze

CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `sport` (
  id INTEGER,
  sport_name TEXT
);
Sample rows from `sport`:
1, Aeronautics
2, Alpine Skiing
3, Alpinism

CREATE TABLE `event` (
  id INTEGER,
  sport_id INTEGER REFERENCES sport(id),
  event_name TEXT
);
Sample rows from `event`:
1, 9, Basketball Men's Basketball
2, 33, Judo Men's Extra-Lightweight
3, 25, Football Men's Football

CREATE TABLE `competitor_event` (
  event_id INTEGER REFERENCES event(id),
  competitor_id INTEGER REFERENCES games_competitor(id),
  medal_id INTEGER REFERENCES medal(id)
);
Sample rows from `competitor_event`:
1, 1, 4
2, 2, 4
3, 3, 4

","games_competitor, games_city, city","games_competitor.person_id, games_competitor.games_id, games_city.games_id, games_city.city_id, city.id, city.city_name"
ice_hockey_draft,What is the BMI of David Bornhammar?,SELECT cast(t2.weight_in_kg as real) / (cast(t3.height_in_cm as real) / 100 * (cast(t3.height_in_cm as real) / 100)) FROM playerinfo as t1 inner JOIN weight_info as t2 ON t1.weight = t2.weight_id inner JOIN height_info as t3 ON t1.height = t3.height_id WHERE t1.playername = 'David Bornhammar',"CREATE TABLE `playerinfo` (
  ELITEID INTEGER,
  PlayerName TEXT,
  birthdate TEXT,
  birthyear DATE,
  birthmonth INTEGER,
  birthday INTEGER,
  birthplace TEXT,
  nation TEXT,
  height INTEGER REFERENCES height_info(height_id),
  weight INTEGER REFERENCES weight_info(weight_id),
  position_info TEXT,
  shoots TEXT,
  draftyear INTEGER,
  draftround INTEGER,
  overall INTEGER,
  overallby TEXT,
  CSS_rank INTEGER,
  sum_7yr_GP INTEGER,
  sum_7yr_TOI INTEGER,
  GP_greater_than_0 TEXT
);
Sample rows from `playerinfo`:
9, David Bornhammar, 1981-06-15, 1981, 6, 15, Lidingo, SWE, Sweden, 73, 198, D, L, 1999, 7, 192, Washington Capitals, 192, 0, 0, no
18, David Printz, 1980-07-24, 1980, 7, 24, Stockholm, SWE, Sweden, 76, 220, D, L, 2001, 7, 225, Philadelphia Flyers, 176, 13, 84, yes
27, Yared Hagos, 1983-03-27, 1983, 3, 27, Stockholm, SWE, Sweden, 73, 218, C, L, 2001, 3, 70, Dallas Stars, 24, 0, 0, no

CREATE TABLE `weight_info` (
  weight_id INTEGER,
  weight_in_kg INTEGER,
  weight_in_lbs INTEGER
);
Sample rows from `weight_info`:
154, 70, 154
159, 72, 159
161, 73, 161

CREATE TABLE `height_info` (
  height_id INTEGER,
  height_in_cm INTEGER,
  height_in_inch TEXT
);
Sample rows from `height_info`:
65, 165, 5'5""
67, 170, 5'7""
68, 172, 5'8""

","CREATE TABLE `height_info` (
  height_id INTEGER,
  height_in_cm INTEGER,
  height_in_inch TEXT
);
Sample rows from `height_info`:
65, 165, 5'5""
67, 170, 5'7""
68, 172, 5'8""

CREATE TABLE `weight_info` (
  weight_id INTEGER,
  weight_in_kg INTEGER,
  weight_in_lbs INTEGER
);
Sample rows from `weight_info`:
154, 70, 154
159, 72, 159
161, 73, 161

CREATE TABLE `PlayerInfo` (
  ELITEID INTEGER,
  PlayerName TEXT,
  birthdate TEXT,
  birthyear DATE,
  birthmonth INTEGER,
  birthday INTEGER,
  birthplace TEXT,
  nation TEXT,
  height INTEGER REFERENCES height_info(height_id),
  weight INTEGER REFERENCES weight_info(weight_id),
  position_info TEXT,
  shoots TEXT,
  draftyear INTEGER,
  draftround INTEGER,
  overall INTEGER,
  overallby TEXT,
  CSS_rank INTEGER,
  sum_7yr_GP INTEGER,
  sum_7yr_TOI INTEGER,
  GP_greater_than_0 TEXT
);
Sample rows from `PlayerInfo`:
9, David Bornhammar, 1981-06-15, 1981, 6, 15, Lidingo, SWE, Sweden, 73, 198, D, L, 1999, 7, 192, Washington Capitals, 192, 0, 0, no
18, David Printz, 1980-07-24, 1980, 7, 24, Stockholm, SWE, Sweden, 76, 220, D, L, 2001, 7, 225, Philadelphia Flyers, 176, 13, 84, yes
27, Yared Hagos, 1983-03-27, 1983, 3, 27, Stockholm, SWE, Sweden, 73, 218, C, L, 2001, 3, 70, Dallas Stars, 24, 0, 0, no

CREATE TABLE `SeasonStatus` (
  ELITEID INTEGER REFERENCES PlayerInfo(ELITEID),
  SEASON TEXT,
  TEAM TEXT,
  LEAGUE TEXT,
  GAMETYPE TEXT,
  GP INTEGER,
  G INTEGER,
  A INTEGER,
  P INTEGER,
  PIM INTEGER,
  PLUSMINUS INTEGER
);
Sample rows from `SeasonStatus`:
3667, 1997-1998, Rimouski Oceanic, QMJHL, Regular Season, 58, 44, 71, 115, 117, 27
3667, 1997-1998, Rimouski Oceanic, QMJHL, Playoffs, 18, 15, 26, 41, 46, 4
3667, 1997-1998, Canada U20, WJC-20, Regular Season, 7, 1, 1, 2, 4, 0

","playerinfo, weight_info, height_info","weight_info.weight_in_kg, height_info.height_in_cm, playerinfo.weight, weight_info.weight_id, playerinfo.height, height_info.height_id, playerinfo.playername"
soccer_2016,What is the average winning margin of the matches held in Newlands?,SELECT AVG(t1.win_margin) FROM match as t1 inner JOIN venue as t2 ON t1.venue_id = t2.venue_id WHERE t2.venue_name = 'Newlands',"CREATE TABLE `match` (
  Match_Id INTEGER,
  Team_1 INTEGER REFERENCES Team(Team_Id),
  Team_2 INTEGER REFERENCES Team(Team_Id),
  Match_Date DATE,
  Season_Id INTEGER REFERENCES Season(Season_Id),
  Venue_Id INTEGER REFERENCES Venue(Venue_Id),
  Toss_Winner INTEGER REFERENCES Team(Team_Id),
  Toss_Decide INTEGER REFERENCES Toss_Decision(Toss_Id),
  Win_Type INTEGER REFERENCES Win_By(Win_Id),
  Win_Margin INTEGER,
  Outcome_type INTEGER REFERENCES Out_Type(Out_Id),
  Match_Winner INTEGER REFERENCES Team(Team_Id),
  Man_of_the_Match INTEGER REFERENCES Player(Player_Id)
);
Sample rows from `match`:
335987, 2, 1, 2008-04-18, 1, 1, 2, 1, 1, 140, 1, 1, 2
335988, 4, 3, 2008-04-19, 1, 2, 3, 2, 1, 33, 1, 3, 19
335989, 6, 5, 2008-04-19, 1, 3, 5, 2, 2, 9, 1, 6, 90

CREATE TABLE `venue` (
  Venue_Id INTEGER,
  Venue_Name TEXT,
  City_Id INTEGER REFERENCES City(City_Id)
);
Sample rows from `venue`:
1, M Chinnaswamy Stadium, 1
2, Punjab Cricket Association Stadium, 2
3, Feroz Shah Kotla, 3

","CREATE TABLE `Batting_Style` (
  Batting_Id INTEGER,
  Batting_hand TEXT
);
Sample rows from `Batting_Style`:
1, Left-hand bat
2, Right-hand bat

CREATE TABLE `Bowling_Style` (
  Bowling_Id INTEGER,
  Bowling_skill TEXT
);
Sample rows from `Bowling_Style`:
1, Right-arm medium
2, Right-arm offbreak
3, Right-arm fast-medium

CREATE TABLE `City` (
  City_Id INTEGER,
  City_Name TEXT,
  Country_id INTEGER
);
Sample rows from `City`:
1, Bangalore, 1
2, Chandigarh, 1
3, Delhi, 1

CREATE TABLE `Country` (
  Country_Id INTEGER REFERENCES Country(Country_Id),
  Country_Name TEXT
);
Sample rows from `Country`:
1, India
2, South Africa
3, U.A.E

CREATE TABLE `Extra_Type` (
  Extra_Id INTEGER,
  Extra_Name TEXT
);
Sample rows from `Extra_Type`:
1, legbyes
2, wides
3, byes

CREATE TABLE `Extra_Runs` (
  Match_Id INTEGER PRIMARY KEY,
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Extra_Type_Id INTEGER REFERENCES Extra_Type(Extra_Id),
  Extra_Runs INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Extra_Runs`:
335987, 1, 1, 1, 1, 1
335987, 1, 2, 2, 1, 2
335987, 1, 3, 2, 1, 1

CREATE TABLE `Out_Type` (
  Out_Id INTEGER,
  Out_Name TEXT
);
Sample rows from `Out_Type`:
1, caught
2, bowled
3, run out

CREATE TABLE `Outcome` (
  Outcome_Id INTEGER,
  Outcome_Type TEXT
);
Sample rows from `Outcome`:
1, Result
2, No Result
3, Superover

CREATE TABLE `Player` (
  Player_Id INTEGER,
  Player_Name TEXT,
  DOB DATE,
  Batting_hand INTEGER REFERENCES Batting_Style(Batting_Id),
  Bowling_skill INTEGER REFERENCES Bowling_Style(Bowling_Id),
  Country_Name INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Player`:
1, SC Ganguly, 1972-07-08, 1, 1, 1
2, BB McCullum, 1981-09-27, 2, 1, 4
3, RT Ponting, 1974-12-19, 2, 1, 5

CREATE TABLE `Rolee` (
  Role_Id INTEGER,
  Role_Desc TEXT
);
Sample rows from `Rolee`:
1, Captain
2, Keeper
3, Player

CREATE TABLE `Season` (
  Season_Id INTEGER,
  Man_of_the_Series INTEGER,
  Orange_Cap INTEGER,
  Purple_Cap INTEGER,
  Season_Year INTEGER
);
Sample rows from `Season`:
1, 32, 100, 102, 2008
2, 53, 18, 61, 2009
3, 133, 133, 131, 2010

CREATE TABLE `Team` (
  Team_Id INTEGER,
  Team_Name TEXT
);
Sample rows from `Team`:
1, Kolkata Knight Riders
2, Royal Challengers Bangalore
3, Chennai Super Kings

CREATE TABLE `Toss_Decision` (
  Toss_Id INTEGER,
  Toss_Name TEXT
);
Sample rows from `Toss_Decision`:
1, field
2, bat

CREATE TABLE `Umpire` (
  Umpire_Id INTEGER,
  Umpire_Name TEXT,
  Umpire_Country INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Umpire`:
1, Asad Rauf, 6
2, MR Benson, 10
3, Aleem Dar, 6

CREATE TABLE `Venue` (
  Venue_Id INTEGER,
  Venue_Name TEXT,
  City_Id INTEGER REFERENCES City(City_Id)
);
Sample rows from `Venue`:
1, M Chinnaswamy Stadium, 1
2, Punjab Cricket Association Stadium, 2
3, Feroz Shah Kotla, 3

CREATE TABLE `Win_By` (
  Win_Id INTEGER,
  Win_Type TEXT
);
Sample rows from `Win_By`:
1, runs
2, wickets
3, NO Result

CREATE TABLE `Match` (
  Match_Id INTEGER,
  Team_1 INTEGER REFERENCES Team(Team_Id),
  Team_2 INTEGER REFERENCES Team(Team_Id),
  Match_Date DATE,
  Season_Id INTEGER REFERENCES Season(Season_Id),
  Venue_Id INTEGER REFERENCES Venue(Venue_Id),
  Toss_Winner INTEGER REFERENCES Team(Team_Id),
  Toss_Decide INTEGER REFERENCES Toss_Decision(Toss_Id),
  Win_Type INTEGER REFERENCES Win_By(Win_Id),
  Win_Margin INTEGER,
  Outcome_type INTEGER REFERENCES Out_Type(Out_Id),
  Match_Winner INTEGER REFERENCES Team(Team_Id),
  Man_of_the_Match INTEGER REFERENCES Player(Player_Id)
);
Sample rows from `Match`:
335987, 2, 1, 2008-04-18, 1, 1, 2, 1, 1, 140, 1, 1, 2
335988, 4, 3, 2008-04-19, 1, 2, 3, 2, 1, 33, 1, 3, 19
335989, 6, 5, 2008-04-19, 1, 3, 5, 2, 2, 9, 1, 6, 90

CREATE TABLE `Ball_by_Ball` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Innings_No INTEGER PRIMARY KEY,
  Team_Batting INTEGER,
  Team_Bowling INTEGER,
  Striker_Batting_Position INTEGER,
  Striker INTEGER,
  Non_Striker INTEGER,
  Bowler INTEGER
);
Sample rows from `Ball_by_Ball`:
335987, 1, 1, 1, 1, 2, 1, 1, 2, 14
335987, 1, 1, 2, 2, 1, 1, 6, 7, 106
335987, 1, 2, 1, 1, 2, 2, 2, 1, 14

CREATE TABLE `Batsman_Scored` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Runs_Scored INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Batsman_Scored`:
335987, 1, 1, 0, 1
335987, 1, 1, 1, 2
335987, 1, 2, 0, 1

CREATE TABLE `Player_Match` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Player_Id INTEGER PRIMARY KEY REFERENCES Player(Player_Id),
  Role_Id INTEGER PRIMARY KEY REFERENCES Rolee(Role_Id),
  Team_Id INTEGER REFERENCES Team(Team_Id)
);
Sample rows from `Player_Match`:
335987, 1, 1, 1
335987, 2, 3, 1
335987, 3, 3, 1

CREATE TABLE `Wicket_Taken` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Player_Out INTEGER REFERENCES Player(Player_Id),
  Kind_Out INTEGER REFERENCES Out_Type(Out_Id),
  Fielders INTEGER REFERENCES Player(Player_Id),
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Wicket_Taken`:
335987, 2, 1, 6, 2, None, 2
335987, 3, 2, 8, 2, None, 2
335987, 5, 5, 9, 1, 83, 2

","match, venue","match.win_margin, match.venue_id, venue.venue_id, venue.venue_name"
legislator,What is the google entity ID of current legislator Sherrod Brown?,SELECT google_entity_id_id FROM current WHERE official_full_name = 'Sherrod Brown',"CREATE TABLE `current` (
  ballotpedia_id TEXT,
  bioguide_id TEXT PRIMARY KEY,
  birthday_bio DATE,
  cspan_id REAL PRIMARY KEY,
  fec_id TEXT,
  first_name TEXT,
  gender_bio TEXT,
  google_entity_id_id TEXT,
  govtrack_id INTEGER,
  house_history_id REAL,
  icpsr_id REAL,
  last_name TEXT,
  lis_id TEXT,
  maplight_id REAL,
  middle_name TEXT,
  nickname_name TEXT,
  official_full_name TEXT,
  opensecrets_id TEXT,
  religion_bio TEXT,
  suffix_name TEXT,
  thomas_id INTEGER,
  votesmart_id REAL,
  wikidata_id TEXT,
  wikipedia_id TEXT
);
Sample rows from `current`:
Sherrod Brown, B000944, 1952-11-09, 5051.0, ['H2OH13033', 'S6OH00163'], Sherrod, M, kg:/m/034s80, 400050, 9996.0, 29389.0, Brown, S307, 168.0, None, None, Sherrod Brown, N00003535, Lutheran, None, 136, 27018.0, Q381880, Sherrod Brown
Maria Cantwell, C000127, 1958-10-13, 26137.0, ['S8WA00194', 'H2WA01054'], Maria, F, kg:/m/01x68t, 300018, 10608.0, 39310.0, Cantwell, S275, 544.0, None, None, Maria Cantwell, N00007836, Roman Catholic, None, 172, 27122.0, Q22250, Maria Cantwell
Ben Cardin, C000141, 1943-10-05, 4004.0, ['H6MD03177', 'S6MD03177'], Benjamin, M, kg:/m/025k3k, 400064, 10629.0, 15408.0, Cardin, S308, 182.0, L., None, Benjamin L. Cardin, N00001955, Jewish, None, 174, 26888.0, Q723295, Ben Cardin

","CREATE TABLE `current` (
  ballotpedia_id TEXT,
  bioguide_id TEXT PRIMARY KEY,
  birthday_bio DATE,
  cspan_id REAL PRIMARY KEY,
  fec_id TEXT,
  first_name TEXT,
  gender_bio TEXT,
  google_entity_id_id TEXT,
  govtrack_id INTEGER,
  house_history_id REAL,
  icpsr_id REAL,
  last_name TEXT,
  lis_id TEXT,
  maplight_id REAL,
  middle_name TEXT,
  nickname_name TEXT,
  official_full_name TEXT,
  opensecrets_id TEXT,
  religion_bio TEXT,
  suffix_name TEXT,
  thomas_id INTEGER,
  votesmart_id REAL,
  wikidata_id TEXT,
  wikipedia_id TEXT
);
Sample rows from `current`:
Sherrod Brown, B000944, 1952-11-09, 5051.0, ['H2OH13033', 'S6OH00163'], Sherrod, M, kg:/m/034s80, 400050, 9996.0, 29389.0, Brown, S307, 168.0, None, None, Sherrod Brown, N00003535, Lutheran, None, 136, 27018.0, Q381880, Sherrod Brown
Maria Cantwell, C000127, 1958-10-13, 26137.0, ['S8WA00194', 'H2WA01054'], Maria, F, kg:/m/01x68t, 300018, 10608.0, 39310.0, Cantwell, S275, 544.0, None, None, Maria Cantwell, N00007836, Roman Catholic, None, 172, 27122.0, Q22250, Maria Cantwell
Ben Cardin, C000141, 1943-10-05, 4004.0, ['H6MD03177', 'S6MD03177'], Benjamin, M, kg:/m/025k3k, 400064, 10629.0, 15408.0, Cardin, S308, 182.0, L., None, Benjamin L. Cardin, N00001955, Jewish, None, 174, 26888.0, Q723295, Ben Cardin

CREATE TABLE `current-terms` (
  address TEXT,
  bioguide TEXT PRIMARY KEY REFERENCES current(bioguide_id),
  caucus TEXT,
  chamber TEXT,
  class REAL,
  contact_form TEXT,
  district REAL,
  end TEXT PRIMARY KEY,
  fax TEXT,
  last TEXT,
  name TEXT,
  office TEXT,
  party TEXT,
  party_affiliations TEXT,
  phone TEXT,
  relation TEXT,
  rss_url TEXT,
  start TEXT,
  state TEXT,
  state_rank TEXT,
  title TEXT,
  type TEXT,
  url TEXT
);
Sample rows from `current-terms`:
None, B000944, None, None, None, None, 13.0, 1995-01-03, None, None, None, None, Democrat, None, None, None, None, 1993-01-05, OH, None, None, rep, None
None, B000944, None, None, None, None, 13.0, 1997-01-03, None, None, None, None, Democrat, None, None, None, None, 1995-01-04, OH, None, None, rep, None
None, B000944, None, None, None, None, 13.0, 1999-01-03, None, None, None, None, Democrat, None, None, None, None, 1997-01-07, OH, None, None, rep, None

CREATE TABLE `historical` (
  ballotpedia_id TEXT,
  bioguide_id TEXT PRIMARY KEY,
  bioguide_previous_id TEXT,
  birthday_bio TEXT,
  cspan_id TEXT,
  fec_id TEXT,
  first_name TEXT,
  gender_bio TEXT,
  google_entity_id_id TEXT,
  govtrack_id INTEGER,
  house_history_alternate_id TEXT,
  house_history_id REAL,
  icpsr_id REAL,
  last_name TEXT,
  lis_id TEXT,
  maplight_id TEXT,
  middle_name TEXT,
  nickname_name TEXT,
  official_full_name TEXT,
  opensecrets_id TEXT,
  religion_bio TEXT,
  suffix_name TEXT,
  thomas_id TEXT,
  votesmart_id TEXT,
  wikidata_id TEXT,
  wikipedia_id TEXT
);
Sample rows from `historical`:
None, B000226, None, 1745-04-02, None, None, Richard, M, kg:/m/02pz46, 401222, None, None, 507.0, Bassett, None, None, None, None, None, None, None, None, None, None, Q518823, Richard Bassett (politician)
None, B000546, None, 1742-03-21, None, None, Theodorick, M, kg:/m/033mf4, 401521, None, 9479.0, 786.0, Bland, None, None, None, None, None, None, None, None, None, None, Q1749152, Theodorick Bland (congressman)
None, B001086, None, 1743-06-16, None, None, Aedanus, M, kg:/m/03yccv, 402032, None, 10177.0, 1260.0, Burke, None, None, None, None, None, None, None, None, None, None, Q380504, Aedanus Burke

CREATE TABLE `historical-terms` (
  address TEXT,
  bioguide TEXT PRIMARY KEY REFERENCES historical(bioguide_id),
  chamber TEXT,
  class REAL,
  contact_form TEXT,
  district REAL,
  end TEXT,
  fax TEXT,
  last TEXT,
  middle TEXT,
  name TEXT,
  office TEXT,
  party TEXT,
  party_affiliations TEXT,
  phone TEXT,
  relation TEXT,
  rss_url TEXT,
  start TEXT,
  state TEXT,
  state_rank TEXT,
  title TEXT,
  type TEXT,
  url TEXT
);
Sample rows from `historical-terms`:
None, B000226, None, 2.0, None, None, 1793-03-03, None, None, None, None, None, Anti-Administration, None, None, None, None, 1789-03-04, DE, None, None, sen, None
None, B000546, None, None, None, 9.0, 1791-03-03, None, None, None, None, None, None, None, None, None, None, 1789-03-04, VA, None, None, rep, None
None, B001086, None, None, None, 2.0, 1791-03-03, None, None, None, None, None, None, None, None, None, None, 1789-03-04, SC, None, None, rep, None

CREATE TABLE `social-media` (
  bioguide TEXT PRIMARY KEY REFERENCES current(bioguide_id),
  facebook TEXT,
  facebook_id REAL,
  govtrack REAL,
  instagram TEXT,
  instagram_id REAL,
  thomas INTEGER,
  twitter TEXT,
  twitter_id REAL,
  youtube TEXT,
  youtube_id TEXT
);
Sample rows from `social-media`:
R000600, congresswomanaumuaamata, 1537155909907320.0, 412664.0, None, None, 2222, RepAmata, 3026622545.0, None, UCGdrLQbt1PYDTPsampx4t1A
Y000064, RepToddYoung, 186203844738421.0, 412428.0, None, None, 2019, RepToddYoung, 234128524.0, RepToddYoung, UCuknj4PGn91gHDNAfboZEgQ
E000295, senjoniernst, 351671691660938.0, 412667.0, senjoniernst, 1582702853.0, 2283, SenJoniErnst, 2856787757.0, None, UCLwrmtF_84FIcK3TyMs4MIw

",current,"google_entity_id_id, official_full_name"
bike_share_1,Are all stations with zip code 94107 located in San Francisco city?,SELECT DISTINCT t2.city FROM trip as t1 inner JOIN station as t2 ON t2.name = t1.start_station_name WHERE t1.zip_code = 94107,"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);
Sample rows from `trip`:
4069, 174, 8/29/2013 9:08, 2nd at South Park, 64, 8/29/2013 9:11, 2nd at South Park, 64, 288, Subscriber, 94114
4073, 1067, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:42, San Francisco Caltrain 2 (330 Townsend), 69, 321, Subscriber, 94703
4074, 1131, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:43, San Francisco Caltrain 2 (330 Townsend), 69, 317, Subscriber, 94115

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat REAL,
  long REAL,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);
Sample rows from `station`:
2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013
3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013
4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013

","CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat REAL,
  long REAL,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);
Sample rows from `station`:
2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013
3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013
4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013

CREATE TABLE `status` (
  station_id INTEGER,
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);
Sample rows from `status`:
2, 2, 25, 2013/08/29 12:06:01
2, 2, 25, 2013/08/29 12:07:01
2, 2, 25, 2013/08/29 12:08:01

CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);
Sample rows from `trip`:
4069, 174, 8/29/2013 9:08, 2nd at South Park, 64, 8/29/2013 9:11, 2nd at South Park, 64, 288, Subscriber, 94114
4073, 1067, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:42, San Francisco Caltrain 2 (330 Townsend), 69, 321, Subscriber, 94703
4074, 1131, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:43, San Francisco Caltrain 2 (330 Townsend), 69, 317, Subscriber, 94115

CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches REAL,
  mean_sea_level_pressure_inches REAL,
  min_sea_level_pressure_inches REAL,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches TEXT,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code TEXT
);
Sample rows from `weather`:
8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107
8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30.0, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107
8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30.0, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107

","trip, station","station.city, station.name, trip.start_station_name, trip.zip_code"
professional_basketball,List the full name of players who are born outside USA.,"SELECT firstname, middlename, lastname FROM players WHERE birthcountry != 'USA'","CREATE TABLE `players` (
  playerID TEXT PRIMARY KEY,
  useFirst TEXT,
  firstName TEXT,
  middleName TEXT,
  lastName TEXT,
  nameGiven TEXT,
  fullGivenName TEXT,
  nameSuffix TEXT,
  nameNick TEXT,
  pos TEXT,
  firstseason INTEGER,
  lastseason INTEGER,
  height REAL,
  weight INTEGER,
  college TEXT,
  collegeOther TEXT,
  birthDate DATE,
  birthCity TEXT,
  birthState TEXT,
  birthCountry TEXT,
  highSchool TEXT,
  hsCity TEXT,
  hsState TEXT,
  hsCountry TEXT,
  deathDate DATE,
  race TEXT
);
Sample rows from `players`:
abdelal01, Alaa, Alaa, None, Abdelnaby, None, None, None, None, F-C, 0, 0, 82.0, 240, Duke, None, 1968-06-24, Cairo, None, EGY, Bloomfield Senior, Bloomfield, NJ, USA, 0000-00-00, B
abdulka01, Kareem, Kareem, None, Abdul-Jabbar, None, Ferdinand Lewis Alcindor, Jr., None, Lew, Cap, C, 0, 0, 85.0, 225, UCLA, None, 1947-04-16, New York, NY, USA, Power Memorial, New York, NY, USA, 0000-00-00, B
abdulma01, Mahdi, Mahdi, None, Abdul-Rahman, None, Walter Raphael Hazzard, Jr., None, Walt, G, 0, 0, 74.0, 185, UCLA, Santa Monica City, 1942-04-15, Wilmington, DE, USA, Overbrook / Moton, Philadelphia / Easton, PA / MD, USA, 2011-11-18, B

","CREATE TABLE `awards_players` (
  playerID TEXT PRIMARY KEY REFERENCES players(playerID),
  award TEXT PRIMARY KEY,
  year INTEGER PRIMARY KEY,
  lgID TEXT,
  note TEXT,
  pos TEXT
);
Sample rows from `awards_players`:
abdulka01, All-Defensive Second Team, 1969, NBA, None, None
abdulka01, All-NBA Second Team, 1969, NBA, None, C
abdulka01, Rookie of the Year, 1969, NBA, None, None

CREATE TABLE `coaches` (
  coachID TEXT PRIMARY KEY,
  year INTEGER PRIMARY KEY REFERENCES teams(year),
  tmID TEXT PRIMARY KEY REFERENCES teams(tmID),
  lgID TEXT,
  stint INTEGER PRIMARY KEY,
  won INTEGER,
  lost INTEGER,
  post_wins INTEGER,
  post_losses INTEGER
);
Sample rows from `coaches`:
adelmri01, 1988, POR, NBA, 2, 14, 21, 0, 3
adelmri01, 1989, POR, NBA, 1, 59, 23, 12, 9
adelmri01, 1990, POR, NBA, 1, 63, 19, 9, 7

CREATE TABLE `draft` (
  id INTEGER,
  draftYear INTEGER REFERENCES teams(year),
  draftRound INTEGER,
  draftSelection INTEGER,
  draftOverall INTEGER,
  tmID TEXT REFERENCES teams(tmID),
  firstName TEXT,
  lastName TEXT,
  suffixName TEXT,
  playerID TEXT,
  draftFrom TEXT,
  lgID TEXT
);
Sample rows from `draft`:
1, 1967, 0, 0, 0, ANA, Darrell, Hardy, None, hardyda01, Baylor, ABA
2, 1967, 0, 0, 0, ANA, Bob, Krulish, None, None, Pacific, ABA
3, 1967, 0, 0, 0, ANA, Bob, Lewis, None, lewisbo01, North Carolina, ABA

CREATE TABLE `player_allstar` (
  playerID TEXT PRIMARY KEY REFERENCES players(playerID),
  last_name TEXT,
  first_name TEXT,
  season_id INTEGER PRIMARY KEY,
  conference TEXT,
  league_id TEXT,
  games_played INTEGER,
  minutes INTEGER,
  points INTEGER,
  o_rebounds INTEGER,
  d_rebounds INTEGER,
  rebounds INTEGER,
  assists INTEGER,
  steals INTEGER,
  blocks INTEGER,
  turnovers INTEGER,
  personal_fouls INTEGER,
  fg_attempted INTEGER,
  fg_made INTEGER,
  ft_attempted INTEGER,
  ft_made INTEGER,
  three_attempted INTEGER,
  three_made INTEGER
);
Sample rows from `player_allstar`:
abdulka01, Abdul-Jabbar, Kareem, 1969, East, NBA, 1, 18, 10, None, None, 11, 4, None, None, None, None, 8, 4, 2, 2, None, None
abdulka01, Abdul-Jabbar, Kareem, 1970, West, NBA, 1, 30, 19, None, None, 14, 1, None, None, None, None, 16, 8, 4, 3, None, None
abdulka01, Abdul-Jabbar, Kareem, 1971, West, NBA, 1, 19, 12, None, None, 7, 2, None, None, None, None, 10, 5, 2, 2, None, None

CREATE TABLE `players` (
  playerID TEXT PRIMARY KEY,
  useFirst TEXT,
  firstName TEXT,
  middleName TEXT,
  lastName TEXT,
  nameGiven TEXT,
  fullGivenName TEXT,
  nameSuffix TEXT,
  nameNick TEXT,
  pos TEXT,
  firstseason INTEGER,
  lastseason INTEGER,
  height REAL,
  weight INTEGER,
  college TEXT,
  collegeOther TEXT,
  birthDate DATE,
  birthCity TEXT,
  birthState TEXT,
  birthCountry TEXT,
  highSchool TEXT,
  hsCity TEXT,
  hsState TEXT,
  hsCountry TEXT,
  deathDate DATE,
  race TEXT
);
Sample rows from `players`:
abdelal01, Alaa, Alaa, None, Abdelnaby, None, None, None, None, F-C, 0, 0, 82.0, 240, Duke, None, 1968-06-24, Cairo, None, EGY, Bloomfield Senior, Bloomfield, NJ, USA, 0000-00-00, B
abdulka01, Kareem, Kareem, None, Abdul-Jabbar, None, Ferdinand Lewis Alcindor, Jr., None, Lew, Cap, C, 0, 0, 85.0, 225, UCLA, None, 1947-04-16, New York, NY, USA, Power Memorial, New York, NY, USA, 0000-00-00, B
abdulma01, Mahdi, Mahdi, None, Abdul-Rahman, None, Walter Raphael Hazzard, Jr., None, Walt, G, 0, 0, 74.0, 185, UCLA, Santa Monica City, 1942-04-15, Wilmington, DE, USA, Overbrook / Moton, Philadelphia / Easton, PA / MD, USA, 2011-11-18, B

CREATE TABLE `teams` (
  year INTEGER PRIMARY KEY,
  lgID TEXT,
  tmID TEXT PRIMARY KEY,
  franchID TEXT,
  confID TEXT,
  divID TEXT,
  rank INTEGER,
  confRank INTEGER,
  playoff TEXT,
  name TEXT,
  o_fgm INTEGER,
  o_ftm INTEGER,
  o_pts INTEGER,
  d_pts INTEGER,
  homeWon INTEGER,
  homeLost INTEGER,
  awayWon INTEGER,
  awayLost INTEGER,
  won INTEGER,
  lost INTEGER,
  games INTEGER,
  arena TEXT
);
Sample rows from `teams`:
1937, NBL, AFS, AFS, None, EA, 1, 0, CF, Akron Firestone Non-Skids, 249, 183, 681, 578, 8, 1, 5, 3, 14, 4, 18, None
1937, NBL, AGW, AGW, None, EA, 2, 0, WC, Akron Goodyear Wingfoots, 243, 159, 645, 498, 8, 1, 5, 4, 13, 5, 18, None
1937, NBL, BFB, BFB, None, EA, 4, 0, None, Buffalo Bisons, 108, 46, 262, 275, 2, 2, 1, 4, 3, 6, 9, None

CREATE TABLE `awards_coaches` (
  id INTEGER,
  year INTEGER REFERENCES coaches(year),
  coachID TEXT REFERENCES coaches(coachID),
  award TEXT,
  lgID TEXT,
  note TEXT
);
Sample rows from `awards_coaches`:
1, 1962, gallaha01, NBA Coach of the Year, NBA, None
2, 1963, hannual01, NBA Coach of the Year, NBA, None
3, 1964, auerbre01, NBA Coach of the Year, NBA, None

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
awards_coaches, 61
players_teams, 23751
series_post, 775

CREATE TABLE `players_teams` (
  id INTEGER,
  playerID TEXT REFERENCES players(None),
  year INTEGER REFERENCES teams(year),
  stint INTEGER,
  tmID TEXT REFERENCES teams(tmID),
  lgID TEXT,
  GP INTEGER,
  GS INTEGER,
  minutes INTEGER,
  points INTEGER,
  oRebounds INTEGER,
  dRebounds INTEGER,
  rebounds INTEGER,
  assists INTEGER,
  steals INTEGER,
  blocks INTEGER,
  turnovers INTEGER,
  PF INTEGER,
  fgAttempted INTEGER,
  fgMade INTEGER,
  ftAttempted INTEGER,
  ftMade INTEGER,
  threeAttempted INTEGER,
  threeMade INTEGER,
  PostGP INTEGER,
  PostGS INTEGER,
  PostMinutes INTEGER,
  PostPoints INTEGER,
  PostoRebounds INTEGER,
  PostdRebounds INTEGER,
  PostRebounds INTEGER,
  PostAssists INTEGER,
  PostSteals INTEGER,
  PostBlocks INTEGER,
  PostTurnovers INTEGER,
  PostPF INTEGER,
  PostfgAttempted INTEGER,
  PostfgMade INTEGER,
  PostftAttempted INTEGER,
  PostftMade INTEGER,
  PostthreeAttempted INTEGER,
  PostthreeMade INTEGER,
  note TEXT
);
Sample rows from `players_teams`:
1, abdelal01, 1990, 1, POR, NBA, 43, 0, 290, 135, 27, 62, 89, 12, 4, 12, 22, 39, 116, 55, 44, 25, 0, 0, 5, 0, 13, 4, 1, 2, 3, 0, 0, 0, 0, 0, 6, 2, 0, 0, 0, 0, None
2, abdelal01, 1991, 1, POR, NBA, 71, 0, 934, 432, 81, 179, 260, 30, 25, 17, 66, 132, 361, 178, 101, 76, 0, 0, 8, 0, 25, 12, 0, 4, 4, 2, 0, 0, 2, 4, 10, 5, 4, 2, 0, 0, None
3, abdelal01, 1992, 1, MIL, NBA, 12, 0, 159, 64, 12, 25, 37, 10, 6, 4, 0, 24, 56, 26, 16, 12, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, None

CREATE TABLE `series_post` (
  id INTEGER,
  year INTEGER REFERENCES teams(year) REFERENCES teams(year),
  round TEXT,
  series TEXT,
  tmIDWinner TEXT REFERENCES teams(tmID),
  lgIDWinner TEXT,
  tmIDLoser TEXT REFERENCES teams(tmID),
  lgIDLoser TEXT,
  W INTEGER,
  L INTEGER
);
Sample rows from `series_post`:
1, 1946, F, O, PHW, NBA, CHS, NBA, 4, 1
2, 1946, QF, M, NYK, NBA, CLR, NBA, 2, 1
3, 1946, QF, M, PHW, NBA, STB, NBA, 2, 1

",players,"firstname, middlename, lastname, birthcountry"
simpson_episodes,"Who from The simpson 20s: Season 20 cast and crew was born in October 29, 1957 in Chicago, Illinois?",SELECT name FROM person WHERE birthdate = '1957-10-29' AND birth_place = 'Chicago' AND birth_region = 'Illinois';,"CREATE TABLE `person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

",person,"name, birthdate, birth_place, birth_region"
retails,How many orders were shipped in 1994?,"SELECT COUNT(l_orderkey) FROM lineitem WHERE strftime('%Y', l_shipdate) = '1994'","CREATE TABLE `lineitem` (
  l_shipdate DATE,
  l_orderkey INTEGER PRIMARY KEY REFERENCES orders(o_orderkey),
  l_discount REAL,
  l_extendedprice REAL,
  l_suppkey INTEGER REFERENCES partsupp(ps_suppkey),
  l_quantity INTEGER,
  l_returnflag TEXT,
  l_partkey INTEGER REFERENCES partsupp(ps_partkey),
  l_linestatus TEXT,
  l_tax REAL,
  l_commitdate DATE,
  l_receiptdate DATE,
  l_shipmode TEXT,
  l_linenumber INTEGER PRIMARY KEY,
  l_shipinstruct TEXT,
  l_comment TEXT
);
Sample rows from `lineitem`:
1995-08-16, 1, 0.1, 58303.08, 6296, 33, N, 98768, O, 0.06, 1995-07-12, 1995-09-14, RAIL, 1, NONE, carefully bo
1995-08-13, 1, 0.09, 16947.7, 8776, 10, N, 23771, O, 0.08, 1995-07-09, 1995-08-27, TRUCK, 2, TAKE BACK RETURN, blithely regular pac
1995-06-17, 1, 0.1, 63642.9, 3859, 34, N, 113858, O, 0.08, 1995-05-22, 1995-06-30, SHIP, 3, COLLECT COD, ironic accounts sleep furiously silen

","CREATE TABLE `customer` (
  c_custkey INTEGER,
  c_mktsegment TEXT,
  c_nationkey INTEGER REFERENCES nation(n_nationkey),
  c_name TEXT,
  c_address TEXT,
  c_phone TEXT,
  c_acctbal REAL,
  c_comment TEXT
);
Sample rows from `customer`:
1, BUILDING, 8, Customer#000000001, KwX3hMHjZ6, 937-241-3198, 3560.03, ironic excuses detect slyly silent requests. requests according to the exc
2, MACHINERY, 16, Customer#000000002, ioUn,eqTTXOdo, 906-965-7556, 7550.21, final express accounts mold slyly. ironic accounts cajole! quickly express a
3, FURNITURE, 11, Customer#000000003, YddJqmIdouNT9Yj, 328-750-7603, -926.96, carefully express foxes sleep carefully. pending platelets sleep thinly for t

CREATE TABLE `lineitem` (
  l_shipdate DATE,
  l_orderkey INTEGER PRIMARY KEY REFERENCES orders(o_orderkey),
  l_discount REAL,
  l_extendedprice REAL,
  l_suppkey INTEGER REFERENCES partsupp(ps_suppkey),
  l_quantity INTEGER,
  l_returnflag TEXT,
  l_partkey INTEGER REFERENCES partsupp(ps_partkey),
  l_linestatus TEXT,
  l_tax REAL,
  l_commitdate DATE,
  l_receiptdate DATE,
  l_shipmode TEXT,
  l_linenumber INTEGER PRIMARY KEY,
  l_shipinstruct TEXT,
  l_comment TEXT
);
Sample rows from `lineitem`:
1995-08-16, 1, 0.1, 58303.08, 6296, 33, N, 98768, O, 0.06, 1995-07-12, 1995-09-14, RAIL, 1, NONE, carefully bo
1995-08-13, 1, 0.09, 16947.7, 8776, 10, N, 23771, O, 0.08, 1995-07-09, 1995-08-27, TRUCK, 2, TAKE BACK RETURN, blithely regular pac
1995-06-17, 1, 0.1, 63642.9, 3859, 34, N, 113858, O, 0.08, 1995-05-22, 1995-06-30, SHIP, 3, COLLECT COD, ironic accounts sleep furiously silen

CREATE TABLE `nation` (
  n_nationkey INTEGER,
  n_name TEXT,
  n_regionkey INTEGER REFERENCES region(r_regionkey),
  n_comment TEXT
);
Sample rows from `nation`:
0, ALGERIA, 0, slyly express pinto beans cajole idly. deposits use blithely unusual packages? fluffily final accounts x-r
1, ARGENTINA, 1, instructions detect blithely stealthily pending packages
2, BRAZIL, 1, blithely unusual deposits are quickly--

CREATE TABLE `orders` (
  o_orderdate DATE,
  o_orderkey INTEGER,
  o_custkey INTEGER REFERENCES customer(c_custkey),
  o_orderpriority TEXT,
  o_shippriority INTEGER,
  o_clerk TEXT,
  o_orderstatus TEXT,
  o_totalprice REAL,
  o_comment TEXT
);
Sample rows from `orders`:
1995-04-19, 1, 73100, 4-NOT SPECIFIED, 0, Clerk#000000916, P, 203198.56, final packages sleep blithely packa
1996-11-04, 2, 92861, 1-URGENT, 0, Clerk#000000373, O, 317719.99, final excuses about the ironic even deposits detect express request
1992-02-15, 3, 44875, 1-URGENT, 0, Clerk#000000485, F, 146674.98, final final deposits cajole foxes. blithely pendin

CREATE TABLE `part` (
  p_partkey INTEGER,
  p_type TEXT,
  p_size INTEGER,
  p_brand TEXT,
  p_name TEXT,
  p_container TEXT,
  p_mfgr TEXT,
  p_retailprice REAL,
  p_comment TEXT
);
Sample rows from `part`:
1, LARGE PLATED TIN, 31, Brand#43, burlywood plum powder puff mint, LG BAG, Manufacturer#4, 901.0, blithely busy reque
2, LARGE POLISHED STEEL, 4, Brand#55, hot spring dodger dim light, LG CASE, Manufacturer#5, 902.0, even ironic requests s
3, STANDARD PLATED COPPER, 30, Brand#53, dark slate grey steel misty, WRAP CASE, Manufacturer#5, 903.0, slyly ironic fox

CREATE TABLE `partsupp` (
  ps_partkey INTEGER PRIMARY KEY REFERENCES part(p_partkey),
  ps_suppkey INTEGER PRIMARY KEY REFERENCES supplier(s_suppkey),
  ps_supplycost REAL,
  ps_availqty INTEGER,
  ps_comment TEXT
);
Sample rows from `partsupp`:
1, 2, 400.75, 1111, carefully ironic deposits use against the carefully unusual accounts. slyly silent platelets nag quickly even
1, 2502, 702.61, 3999, slyly regular accounts serve carefully. asymptotes after the slyly even instructions cajole quickly ironic requests. pending dugouts about the slyly 
1, 5002, 383.95, 7411, carefully special ideas are slyly. slyly ironic epitaphs use pending pending foxes. furiously express pinto beans lose quiet even requests: special final packages ar

CREATE TABLE `region` (
  r_regionkey INTEGER,
  r_name TEXT,
  r_comment TEXT
);
Sample rows from `region`:
0, AFRICA, asymptotes sublate after the r
1, AMERICA, requests affix quickly final tithes. blithely even packages above the a
2, ASIA, accounts cajole carefully according to the carefully exp

CREATE TABLE `supplier` (
  s_suppkey INTEGER,
  s_nationkey INTEGER REFERENCES nation(n_nationkey),
  s_comment TEXT,
  s_name TEXT,
  s_address TEXT,
  s_phone TEXT,
  s_acctbal REAL
);
Sample rows from `supplier`:
1, 13, blithely final pearls are. instructions thra, Supplier#000000001, ,wWs4pnykQOFl8mgVCU8EZMXqZs1w, 800-807-9579, 3082.86
2, 5, requests integrate fluffily. fluffily ironic deposits wake. bold, Supplier#000000002, WkXT6MSAJrp4qWq3W9N, 348-617-6055, 3009.73
3, 22, carefully express ideas shall have to unwin, Supplier#000000003, KjUqa42JEHaRDVQTHV6Yq2h, 471-986-9888, 9159.78

",lineitem,"l_orderkey, l_shipdate"
human_resources,"Who is the highest paid employee in ""Boston""? Give the full name.","SELECT t1.firstname, t1.lastname FROM employee as t1  inner JOIN location as t2  ON t1.locationid = t2.locationid WHERE t2.locationcity = 'Boston' ORDER BY t1.salary DESC LIMIT 1","CREATE TABLE `employee` (
  ssn TEXT PRIMARY KEY,
  lastname TEXT,
  firstname TEXT,
  hiredate TEXT,
  salary TEXT,
  gender TEXT,
  performance TEXT,
  positionID INTEGER REFERENCES position(positionID),
  locationID INTEGER REFERENCES location(locationID)
);
Sample rows from `employee`:
000-01-0000, Milgrom, Patricia, 10/1/04, US$57,500.00, F, Average, 2, 2
000-02-2222, Adams, Sandy, 1/15/01, US$19,500.00, F, Average, 3, 1
109-87-6543, Wood, Emily, 3/12/97, US$69,000.00, F, Average, 2, 5

CREATE TABLE `location` (
  locationID INTEGER,
  locationcity TEXT,
  address TEXT,
  state TEXT,
  zipcode INTEGER,
  officephone TEXT
);
Sample rows from `location`:
1, Atlanta, 450 Peachtree Rd, GA, 30316, (404)333-5555
2, Boston, 3 Commons Blvd, MA, 2190, (617)123-4444
3, Chicago, 500 Loop Highway, IL, 60620, (312)444-6666

","CREATE TABLE `location` (
  locationID INTEGER,
  locationcity TEXT,
  address TEXT,
  state TEXT,
  zipcode INTEGER,
  officephone TEXT
);
Sample rows from `location`:
1, Atlanta, 450 Peachtree Rd, GA, 30316, (404)333-5555
2, Boston, 3 Commons Blvd, MA, 2190, (617)123-4444
3, Chicago, 500 Loop Highway, IL, 60620, (312)444-6666

CREATE TABLE `position` (
  positionID INTEGER,
  positiontitle TEXT,
  educationrequired TEXT,
  minsalary TEXT,
  maxsalary TEXT
);
Sample rows from `position`:
1, Account Representative, 4 year degree, US$25,000.00, US$75,000.00
2, Manager, 4 year degree, US$50,000.00, US$150,000.00
3, Trainee, 2 year degree, US$18,000.00, US$25,000.00

CREATE TABLE `employee` (
  ssn TEXT PRIMARY KEY,
  lastname TEXT,
  firstname TEXT,
  hiredate TEXT,
  salary TEXT,
  gender TEXT,
  performance TEXT,
  positionID INTEGER REFERENCES position(positionID),
  locationID INTEGER REFERENCES location(locationID)
);
Sample rows from `employee`:
000-01-0000, Milgrom, Patricia, 10/1/04, US$57,500.00, F, Average, 2, 2
000-02-2222, Adams, Sandy, 1/15/01, US$19,500.00, F, Average, 3, 1
109-87-6543, Wood, Emily, 3/12/97, US$69,000.00, F, Average, 2, 5

","employee, location","employee.firstname, employee.lastname, employee.locationid, location.locationid, location.locationcity, employee.salary"
sales,What is the total sales amount for Reflector?,SELECT SUM(t1.price * t2.quantity) FROM products as t1 inner JOIN sales as t2 ON t1.productid = t2.productid WHERE t1.name = 'Reflector',"CREATE TABLE `products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

CREATE TABLE `sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Employees`:
1, Abraham, e, Bennet
2, Reginald, l, Blotchet-Halls
3, Cheryl, a, Carson

CREATE TABLE `Products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

CREATE TABLE `Sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `Sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

","products, sales","products.price, sales.quantity, products.productid, sales.productid, products.name"
retail_complains,On which day was the most verbose complaint received?,SELECT `date received` FROM callcenterlogs WHERE ser_time = ( SELECT MAX(ser_time) FROM callcenterlogs ),"CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

","CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

",callcenterlogs,"date received, ser_time"
movies_4,How many production companies made more than 150 movies?,SELECT COUNT(*) FROM ( SELECT t1.company_name as cname FROM production_company as t1 inner JOIN movie_company as t2 ON t1.company_id = t2.company_id GROUP BY t1.company_id HAVING COUNT(t1.company_name) > 150 ),"CREATE TABLE `production_company` (
  company_id INTEGER,
  company_name TEXT
);
Sample rows from `production_company`:
1, Lucasfilm
2, Walt Disney Pictures
3, Pixar Animation Studios

CREATE TABLE `movie_company` (
  movie_id INTEGER REFERENCES movie(None),
  company_id INTEGER REFERENCES production_company(None)
);
Sample rows from `movie_company`:
5, 14
5, 59
11, 1

","CREATE TABLE `country` (
  country_id INTEGER,
  country_iso_code TEXT,
  country_name TEXT
);
Sample rows from `country`:
128, AE, United Arab Emirates
129, AF, Afghanistan
130, AO, Angola

CREATE TABLE `department` (
  department_id INTEGER,
  department_name TEXT
);
Sample rows from `department`:
1, Camera
2, Directing
3, Production

CREATE TABLE `gender` (
  gender_id INTEGER,
  gender TEXT
);
Sample rows from `gender`:
0, Unspecified
1, Female
2, Male

CREATE TABLE `genre` (
  genre_id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
12, Adventure
14, Fantasy
16, Animation

CREATE TABLE `keyword` (
  keyword_id INTEGER,
  keyword_name TEXT
);
Sample rows from `keyword`:
30, individual
65, holiday
74, germany

CREATE TABLE `language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `language`:
24574, en, English
24575, sv, svenska
24576, de, Deutsch

CREATE TABLE `language_role` (
  role_id INTEGER,
  language_role TEXT
);
Sample rows from `language_role`:
1, Original
2, Spoken

CREATE TABLE `movie` (
  movie_id INTEGER,
  title TEXT,
  budget INTEGER,
  homepage TEXT,
  overview TEXT,
  popularity REAL,
  release_date DATE,
  revenue INTEGER,
  runtime INTEGER,
  movie_status TEXT,
  tagline TEXT,
  vote_average REAL,
  vote_count INTEGER
);
Sample rows from `movie`:
5, Four Rooms, 4000000, , It's Ted the Bellhop's first night on the job...and the hotel's very unusual guests are about to place him in some outrageous predicaments. It seems that this evening's room service is serving up one unbelievable happening after another., 22.87623, 1995-12-09, 4300000, 98, Released, Twelve outrageous guests. Four scandalous requests. And one lone bellhop, in his first day on the job, who's in for the wildest New year's Eve of his life., 6.5, 530
11, Star Wars, 11000000, http://www.starwars.com/films/star-wars-episode-iv-a-new-hope, Princess Leia is captured and held hostage by the evil Imperial forces in their effort to take over the galactic Empire. Venturesome Luke Skywalker and dashing captain Han Solo team together with the loveable robot duo R2-D2 and C-3PO to rescue the beauti, 126.393695, 1977-05-25, 775398007, 121, Released, A long time ago in a galaxy far, far away..., 8.1, 6624
12, Finding Nemo, 94000000, http://movies.disney.com/finding-nemo, Nemo, an adventurous young clownfish, is unexpectedly taken from his Great Barrier Reef home to a dentist's office aquarium. It's up to his worrisome father Marlin and a friendly but forgetful fish Dory to bring Nemo home -- meeting vegetarian sharks, sur, 85.688789, 2003-05-30, 940335536, 100, Released, There are 3.7 trillion fish in the ocean, they're looking for one., 7.6, 6122

CREATE TABLE `movie_genres` (
  movie_id INTEGER REFERENCES movie(movie_id),
  genre_id INTEGER REFERENCES genre(genre_id)
);
Sample rows from `movie_genres`:
5, 35
5, 80
11, 12

CREATE TABLE `movie_languages` (
  movie_id INTEGER REFERENCES movie(movie_id),
  language_id INTEGER REFERENCES language(language_id),
  language_role_id INTEGER REFERENCES language_role(role_id)
);
Sample rows from `movie_languages`:
5, 24574, 2
11, 24574, 2
12, 24574, 2

CREATE TABLE `person` (
  person_id INTEGER,
  person_name TEXT
);
Sample rows from `person`:
1, George Lucas
2, Mark Hamill
3, Harrison Ford

CREATE TABLE `movie_crew` (
  movie_id INTEGER REFERENCES movie(movie_id),
  person_id INTEGER REFERENCES person(person_id),
  department_id INTEGER REFERENCES department(department_id),
  job TEXT
);
Sample rows from `movie_crew`:
285, 120, 1, Director of Photography
285, 1704, 2, Director
285, 770, 3, Producer

CREATE TABLE `production_company` (
  company_id INTEGER,
  company_name TEXT
);
Sample rows from `production_company`:
1, Lucasfilm
2, Walt Disney Pictures
3, Pixar Animation Studios

CREATE TABLE `production_country` (
  movie_id INTEGER REFERENCES movie(movie_id),
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `production_country`:
5, 214
11, 214
12, 214

CREATE TABLE `movie_cast` (
  movie_id INTEGER REFERENCES movie(movie_id),
  person_id INTEGER REFERENCES person(person_id),
  character_name TEXT,
  gender_id INTEGER REFERENCES gender(gender_id),
  cast_order INTEGER
);
Sample rows from `movie_cast`:
285, 85, Captain Jack Sparrow, 2, 0
285, 114, Will Turner, 2, 1
285, 116, Elizabeth Swann, 1, 2

CREATE TABLE `movie_keywords` (
  movie_id INTEGER REFERENCES movie(None),
  keyword_id INTEGER REFERENCES keyword(None)
);
Sample rows from `movie_keywords`:
5, 612
5, 613
5, 616

CREATE TABLE `movie_company` (
  movie_id INTEGER REFERENCES movie(None),
  company_id INTEGER REFERENCES production_company(None)
);
Sample rows from `movie_company`:
5, 14
5, 59
11, 1

","production_company, movie_company","production_company.company_name, production_company.company_id, movie_company.company_id"
address,What is the percentage ratio between Democrats and Republicans in Indiana? List the zip codes belonging to Democrats.,SELECT cast(COUNT(case when t2.party = 'Democrat' then 1 else null end) as real) / COUNT(case when t2.party = 'Republican' then 1 else null end)FROM zip_congress as t1 inner JOIN congress as t2 ON t2.cognress_rep_id = t1.district,"CREATE TABLE `zip_congress` (
  zip_code INTEGER PRIMARY KEY REFERENCES zip_data(zip_code),
  district TEXT PRIMARY KEY REFERENCES congress(cognress_rep_id)
);
Sample rows from `zip_congress`:
501, NY-1
601, PR
602, PR

CREATE TABLE `congress` (
  cognress_rep_id TEXT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  CID TEXT,
  party TEXT,
  state TEXT,
  abbreviation TEXT REFERENCES state(abbreviation),
  House TEXT,
  District INTEGER,
  land_area REAL
);
Sample rows from `congress`:
AK, Young, Don, N00008091, Republican, Alaska, AK, House of Repsentatives, None, 571951.26
AK-S1, Begich, Mark, N00009585, Democrat, Alaska, AK, Senate, None, 570641.0
AK-S2, Murkowski, Lisa, N00033101, Republican, Alaska, AK, Senate, None, 570641.0

","CREATE TABLE `CBSA` (
  CBSA INTEGER,
  CBSA_name TEXT,
  CBSA_type TEXT
);
Sample rows from `CBSA`:
10300, Adrian, MI, Micro
10380, Aguadilla-Isabela, PR, Metro
10420, Akron, OH, Metro

CREATE TABLE `state` (
  abbreviation TEXT PRIMARY KEY,
  name TEXT
);
Sample rows from `state`:
AA, Armed Forces Americas
AE, Armed Forces Europe
AK, Alaska

CREATE TABLE `congress` (
  cognress_rep_id TEXT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  CID TEXT,
  party TEXT,
  state TEXT,
  abbreviation TEXT REFERENCES state(abbreviation),
  House TEXT,
  District INTEGER,
  land_area REAL
);
Sample rows from `congress`:
AK, Young, Don, N00008091, Republican, Alaska, AK, House of Repsentatives, None, 571951.26
AK-S1, Begich, Mark, N00009585, Democrat, Alaska, AK, Senate, None, 570641.0
AK-S2, Murkowski, Lisa, N00033101, Republican, Alaska, AK, Senate, None, 570641.0

CREATE TABLE `zip_data` (
  zip_code INTEGER,
  city TEXT,
  state TEXT REFERENCES state(abbreviation),
  multi_county TEXT,
  type TEXT,
  organization TEXT,
  time_zone TEXT,
  daylight_savings TEXT,
  latitude REAL,
  longitude REAL,
  elevation INTEGER,
  state_fips INTEGER,
  county_fips INTEGER,
  region TEXT,
  division TEXT,
  population_2020 INTEGER,
  population_2010 INTEGER,
  households INTEGER,
  avg_house_value INTEGER,
  avg_income_per_household INTEGER,
  persons_per_household REAL,
  white_population INTEGER,
  black_population INTEGER,
  hispanic_population INTEGER,
  asian_population INTEGER,
  american_indian_population INTEGER,
  hawaiian_population INTEGER,
  other_population INTEGER,
  male_population INTEGER,
  female_population INTEGER,
  median_age REAL,
  male_median_age REAL,
  female_median_age REAL,
  residential_mailboxes INTEGER,
  business_mailboxes INTEGER,
  total_delivery_receptacles INTEGER,
  businesses INTEGER,
  1st_quarter_payroll INTEGER,
  annual_payroll INTEGER,
  employees INTEGER,
  water_area REAL,
  land_area REAL,
  single_family_delivery_units INTEGER,
  multi_family_delivery_units INTEGER,
  total_beneficiaries INTEGER,
  retired_workers INTEGER,
  disabled_workers INTEGER,
  parents_and_widowed INTEGER,
  spouses INTEGER,
  children INTEGER,
  over_65 INTEGER,
  monthly_benefits_all INTEGER,
  monthly_benefits_retired_workers INTEGER,
  monthly_benefits_widowed INTEGER,
  CBSA INTEGER REFERENCES CBSA(CBSA)
);
Sample rows from `zip_data`:
501, Holtsville, NY, No, Unique Post Office, I R S Service Center, Eastern, Yes, 40.817923, -73.045317, 25, 36, 103, Northeast, Middle Atlantic, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0, 1, 1, 2, 0, 0, 0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35620
544, Holtsville, NY, No, Unique Post Office, Irs Service Center, Eastern, Yes, 40.788827, -73.039405, 25, 36, 103, Northeast, Middle Atlantic, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35620
601, Adjuntas, PR, No, Post Office, None, Atlantic, No, 18.196747, -66.736735, 0, 72, 1, None, None, 11737, 18570, 6525, 86200, 13092, 2.84, 17479, 663, 18486, 7, 113, 10, 558, 9078, 9492, 35.9, 34.5, 37.1, 4133, 221, 5173, 0, 0, 0, 0, 0.309, 64.348, 2419, 1264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38660

CREATE TABLE `alias` (
  zip_code INTEGER REFERENCES zip_data(zip_code),
  alias TEXT
);
Sample rows from `alias`:
501, Holtsville
544, Holtsville
601, Adjuntas

CREATE TABLE `area_code` (
  zip_code INTEGER PRIMARY KEY REFERENCES zip_data(zip_code),
  area_code INTEGER PRIMARY KEY
);
Sample rows from `area_code`:
501, 631
544, 631
601, 787

CREATE TABLE `avoid` (
  zip_code INTEGER PRIMARY KEY REFERENCES zip_data(zip_code),
  bad_alias TEXT PRIMARY KEY
);
Sample rows from `avoid`:
501, Internal Revenue Service
544, Internal Revenue Service
601, Colinas Del Gigante

CREATE TABLE `country` (
  zip_code INTEGER PRIMARY KEY REFERENCES zip_data(zip_code),
  county TEXT PRIMARY KEY,
  state TEXT REFERENCES state(abbreviation)
);
Sample rows from `country`:
501, SUFFOLK, NY
544, SUFFOLK, NY
601, ADJUNTAS, PR

CREATE TABLE `zip_congress` (
  zip_code INTEGER PRIMARY KEY REFERENCES zip_data(zip_code),
  district TEXT PRIMARY KEY REFERENCES congress(cognress_rep_id)
);
Sample rows from `zip_congress`:
501, NY-1
601, PR
602, PR

","zip_congress, congress","congress.party, congress.cognress_rep_id, zip_congress.district"
retails,What is the region with the most customers?,"SELECt t.r_name FROM ( SELECt t3.r_name, COUNT(t2.c_custkey) as num FROM nation as t1 inner JOIN customer as t2 ON t1.n_nationkey = t2.c_nationkey inner JOIN region as t3 ON t1.n_regionkey = t3.r_regionkey GROUP BY t3.r_name ) as t ORDER BY t.num DESC LIMIt 1","CREATE TABLE `nation` (
  n_nationkey INTEGER,
  n_name TEXT,
  n_regionkey INTEGER REFERENCES region(r_regionkey),
  n_comment TEXT
);
Sample rows from `nation`:
0, ALGERIA, 0, slyly express pinto beans cajole idly. deposits use blithely unusual packages? fluffily final accounts x-r
1, ARGENTINA, 1, instructions detect blithely stealthily pending packages
2, BRAZIL, 1, blithely unusual deposits are quickly--

CREATE TABLE `customer` (
  c_custkey INTEGER,
  c_mktsegment TEXT,
  c_nationkey INTEGER REFERENCES nation(n_nationkey),
  c_name TEXT,
  c_address TEXT,
  c_phone TEXT,
  c_acctbal REAL,
  c_comment TEXT
);
Sample rows from `customer`:
1, BUILDING, 8, Customer#000000001, KwX3hMHjZ6, 937-241-3198, 3560.03, ironic excuses detect slyly silent requests. requests according to the exc
2, MACHINERY, 16, Customer#000000002, ioUn,eqTTXOdo, 906-965-7556, 7550.21, final express accounts mold slyly. ironic accounts cajole! quickly express a
3, FURNITURE, 11, Customer#000000003, YddJqmIdouNT9Yj, 328-750-7603, -926.96, carefully express foxes sleep carefully. pending platelets sleep thinly for t

CREATE TABLE `region` (
  r_regionkey INTEGER,
  r_name TEXT,
  r_comment TEXT
);
Sample rows from `region`:
0, AFRICA, asymptotes sublate after the r
1, AMERICA, requests affix quickly final tithes. blithely even packages above the a
2, ASIA, accounts cajole carefully according to the carefully exp

","CREATE TABLE `customer` (
  c_custkey INTEGER,
  c_mktsegment TEXT,
  c_nationkey INTEGER REFERENCES nation(n_nationkey),
  c_name TEXT,
  c_address TEXT,
  c_phone TEXT,
  c_acctbal REAL,
  c_comment TEXT
);
Sample rows from `customer`:
1, BUILDING, 8, Customer#000000001, KwX3hMHjZ6, 937-241-3198, 3560.03, ironic excuses detect slyly silent requests. requests according to the exc
2, MACHINERY, 16, Customer#000000002, ioUn,eqTTXOdo, 906-965-7556, 7550.21, final express accounts mold slyly. ironic accounts cajole! quickly express a
3, FURNITURE, 11, Customer#000000003, YddJqmIdouNT9Yj, 328-750-7603, -926.96, carefully express foxes sleep carefully. pending platelets sleep thinly for t

CREATE TABLE `lineitem` (
  l_shipdate DATE,
  l_orderkey INTEGER PRIMARY KEY REFERENCES orders(o_orderkey),
  l_discount REAL,
  l_extendedprice REAL,
  l_suppkey INTEGER REFERENCES partsupp(ps_suppkey),
  l_quantity INTEGER,
  l_returnflag TEXT,
  l_partkey INTEGER REFERENCES partsupp(ps_partkey),
  l_linestatus TEXT,
  l_tax REAL,
  l_commitdate DATE,
  l_receiptdate DATE,
  l_shipmode TEXT,
  l_linenumber INTEGER PRIMARY KEY,
  l_shipinstruct TEXT,
  l_comment TEXT
);
Sample rows from `lineitem`:
1995-08-16, 1, 0.1, 58303.08, 6296, 33, N, 98768, O, 0.06, 1995-07-12, 1995-09-14, RAIL, 1, NONE, carefully bo
1995-08-13, 1, 0.09, 16947.7, 8776, 10, N, 23771, O, 0.08, 1995-07-09, 1995-08-27, TRUCK, 2, TAKE BACK RETURN, blithely regular pac
1995-06-17, 1, 0.1, 63642.9, 3859, 34, N, 113858, O, 0.08, 1995-05-22, 1995-06-30, SHIP, 3, COLLECT COD, ironic accounts sleep furiously silen

CREATE TABLE `nation` (
  n_nationkey INTEGER,
  n_name TEXT,
  n_regionkey INTEGER REFERENCES region(r_regionkey),
  n_comment TEXT
);
Sample rows from `nation`:
0, ALGERIA, 0, slyly express pinto beans cajole idly. deposits use blithely unusual packages? fluffily final accounts x-r
1, ARGENTINA, 1, instructions detect blithely stealthily pending packages
2, BRAZIL, 1, blithely unusual deposits are quickly--

CREATE TABLE `orders` (
  o_orderdate DATE,
  o_orderkey INTEGER,
  o_custkey INTEGER REFERENCES customer(c_custkey),
  o_orderpriority TEXT,
  o_shippriority INTEGER,
  o_clerk TEXT,
  o_orderstatus TEXT,
  o_totalprice REAL,
  o_comment TEXT
);
Sample rows from `orders`:
1995-04-19, 1, 73100, 4-NOT SPECIFIED, 0, Clerk#000000916, P, 203198.56, final packages sleep blithely packa
1996-11-04, 2, 92861, 1-URGENT, 0, Clerk#000000373, O, 317719.99, final excuses about the ironic even deposits detect express request
1992-02-15, 3, 44875, 1-URGENT, 0, Clerk#000000485, F, 146674.98, final final deposits cajole foxes. blithely pendin

CREATE TABLE `part` (
  p_partkey INTEGER,
  p_type TEXT,
  p_size INTEGER,
  p_brand TEXT,
  p_name TEXT,
  p_container TEXT,
  p_mfgr TEXT,
  p_retailprice REAL,
  p_comment TEXT
);
Sample rows from `part`:
1, LARGE PLATED TIN, 31, Brand#43, burlywood plum powder puff mint, LG BAG, Manufacturer#4, 901.0, blithely busy reque
2, LARGE POLISHED STEEL, 4, Brand#55, hot spring dodger dim light, LG CASE, Manufacturer#5, 902.0, even ironic requests s
3, STANDARD PLATED COPPER, 30, Brand#53, dark slate grey steel misty, WRAP CASE, Manufacturer#5, 903.0, slyly ironic fox

CREATE TABLE `partsupp` (
  ps_partkey INTEGER PRIMARY KEY REFERENCES part(p_partkey),
  ps_suppkey INTEGER PRIMARY KEY REFERENCES supplier(s_suppkey),
  ps_supplycost REAL,
  ps_availqty INTEGER,
  ps_comment TEXT
);
Sample rows from `partsupp`:
1, 2, 400.75, 1111, carefully ironic deposits use against the carefully unusual accounts. slyly silent platelets nag quickly even
1, 2502, 702.61, 3999, slyly regular accounts serve carefully. asymptotes after the slyly even instructions cajole quickly ironic requests. pending dugouts about the slyly 
1, 5002, 383.95, 7411, carefully special ideas are slyly. slyly ironic epitaphs use pending pending foxes. furiously express pinto beans lose quiet even requests: special final packages ar

CREATE TABLE `region` (
  r_regionkey INTEGER,
  r_name TEXT,
  r_comment TEXT
);
Sample rows from `region`:
0, AFRICA, asymptotes sublate after the r
1, AMERICA, requests affix quickly final tithes. blithely even packages above the a
2, ASIA, accounts cajole carefully according to the carefully exp

CREATE TABLE `supplier` (
  s_suppkey INTEGER,
  s_nationkey INTEGER REFERENCES nation(n_nationkey),
  s_comment TEXT,
  s_name TEXT,
  s_address TEXT,
  s_phone TEXT,
  s_acctbal REAL
);
Sample rows from `supplier`:
1, 13, blithely final pearls are. instructions thra, Supplier#000000001, ,wWs4pnykQOFl8mgVCU8EZMXqZs1w, 800-807-9579, 3082.86
2, 5, requests integrate fluffily. fluffily ironic deposits wake. bold, Supplier#000000002, WkXT6MSAJrp4qWq3W9N, 348-617-6055, 3009.73
3, 22, carefully express ideas shall have to unwin, Supplier#000000003, KjUqa42JEHaRDVQTHV6Yq2h, 471-986-9888, 9159.78

","nation, customer, region","region.r_name, customer.c_custkey, nation.n_nationkey, customer.c_nationkey, nation.n_regionkey, region.r_regionkey"
simpson_episodes,In which country was the winner of the Outstanding Voice-Over Performance award of 2009 born?,SELECT t1.birth_country FROM person as t1 inner JOIN award as t2 ON t1.name = t2.person WHERE t2.award = 'Outstanding Voice-Over Performance' AND t2.year = 2009 AND t2.result = 'Winner';,"CREATE TABLE `person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","person, award","person.birth_country, person.name, award.person, award.award, award.year, award.result"
books,"What is the full name of the customer who owns the ""aalleburtonkc@yellowbook.com"" e-mail address?","SELECT first_name, last_name FROM customer WHERE email = 'aalleburtonkc@yellowbook.com'","CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

",customer,"first_name, last_name, email"
music_tracker,Please list all tags of kurtis blow from 2000 to 2010.,SELECT t2.tag FROM torrents as t1 inner JOIN tags as t2 ON t1.id = t2.id WHERE t1.groupyear BETWEEN 2000 AND 2010 AND t1.artist LIKE 'kurtis blow',"CREATE TABLE `torrents` (
  groupName TEXT,
  totalSnatched INTEGER,
  artist TEXT,
  groupYear INTEGER,
  releaseType TEXT,
  groupId INTEGER,
  id INTEGER
);
Sample rows from `torrents`:
superappin&#39;, 239, grandmaster flash & the furious five, 1979, single, 720949, 0
spiderap / a corona jam, 156, ron hunt & ronnie g & the sm crew, 1979, single, 728752, 1
rapper&#39;s delight, 480, sugarhill gang, 1979, single, 18513, 2

CREATE TABLE `tags` (
  index INTEGER PRIMARY KEY,
  id INTEGER REFERENCES torrents(None),
  tag TEXT
);
Sample rows from `tags`:
0, 0, 1970s
1, 0, funk
2, 0, disco

","CREATE TABLE `torrents` (
  groupName TEXT,
  totalSnatched INTEGER,
  artist TEXT,
  groupYear INTEGER,
  releaseType TEXT,
  groupId INTEGER,
  id INTEGER
);
Sample rows from `torrents`:
superappin&#39;, 239, grandmaster flash & the furious five, 1979, single, 720949, 0
spiderap / a corona jam, 156, ron hunt & ronnie g & the sm crew, 1979, single, 728752, 1
rapper&#39;s delight, 480, sugarhill gang, 1979, single, 18513, 2

CREATE TABLE `tags` (
  index INTEGER PRIMARY KEY,
  id INTEGER REFERENCES torrents(None),
  tag TEXT
);
Sample rows from `tags`:
0, 0, 1970s
1, 0, funk
2, 0, disco

","torrents, tags","tags.tag, torrents.id, tags.id, torrents.groupyear, torrents.artist"
soccer_2016,List the name and country of the players who got more than average catches in ascending order of the number of catches.,"SELECT t1.player_name, t4.country_name FROM player as t1 inner JOIN wicket_taken as t2 ON t1.player_Id = t2.fielders inner JOIN out_type as t3 ON t2.kind_out = t3.out_id inner JOIN country as t4 ON t1.country_name = t4.country_Id GROUP BY t1.player_name ORDER BY COUNT(t3.out_name) asC","CREATE TABLE `player` (
  Player_Id INTEGER,
  Player_Name TEXT,
  DOB DATE,
  Batting_hand INTEGER REFERENCES Batting_Style(Batting_Id),
  Bowling_skill INTEGER REFERENCES Bowling_Style(Bowling_Id),
  Country_Name INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `player`:
1, SC Ganguly, 1972-07-08, 1, 1, 1
2, BB McCullum, 1981-09-27, 2, 1, 4
3, RT Ponting, 1974-12-19, 2, 1, 5

CREATE TABLE `wicket_taken` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Player_Out INTEGER REFERENCES Player(Player_Id),
  Kind_Out INTEGER REFERENCES Out_Type(Out_Id),
  Fielders INTEGER REFERENCES Player(Player_Id),
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `wicket_taken`:
335987, 2, 1, 6, 2, None, 2
335987, 3, 2, 8, 2, None, 2
335987, 5, 5, 9, 1, 83, 2

CREATE TABLE `out_type` (
  Out_Id INTEGER,
  Out_Name TEXT
);
Sample rows from `out_type`:
1, caught
2, bowled
3, run out

CREATE TABLE `country` (
  Country_Id INTEGER REFERENCES Country(Country_Id),
  Country_Name TEXT
);
Sample rows from `country`:
1, India
2, South Africa
3, U.A.E

","CREATE TABLE `Batting_Style` (
  Batting_Id INTEGER,
  Batting_hand TEXT
);
Sample rows from `Batting_Style`:
1, Left-hand bat
2, Right-hand bat

CREATE TABLE `Bowling_Style` (
  Bowling_Id INTEGER,
  Bowling_skill TEXT
);
Sample rows from `Bowling_Style`:
1, Right-arm medium
2, Right-arm offbreak
3, Right-arm fast-medium

CREATE TABLE `City` (
  City_Id INTEGER,
  City_Name TEXT,
  Country_id INTEGER
);
Sample rows from `City`:
1, Bangalore, 1
2, Chandigarh, 1
3, Delhi, 1

CREATE TABLE `Country` (
  Country_Id INTEGER REFERENCES Country(Country_Id),
  Country_Name TEXT
);
Sample rows from `Country`:
1, India
2, South Africa
3, U.A.E

CREATE TABLE `Extra_Type` (
  Extra_Id INTEGER,
  Extra_Name TEXT
);
Sample rows from `Extra_Type`:
1, legbyes
2, wides
3, byes

CREATE TABLE `Extra_Runs` (
  Match_Id INTEGER PRIMARY KEY,
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Extra_Type_Id INTEGER REFERENCES Extra_Type(Extra_Id),
  Extra_Runs INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Extra_Runs`:
335987, 1, 1, 1, 1, 1
335987, 1, 2, 2, 1, 2
335987, 1, 3, 2, 1, 1

CREATE TABLE `Out_Type` (
  Out_Id INTEGER,
  Out_Name TEXT
);
Sample rows from `Out_Type`:
1, caught
2, bowled
3, run out

CREATE TABLE `Outcome` (
  Outcome_Id INTEGER,
  Outcome_Type TEXT
);
Sample rows from `Outcome`:
1, Result
2, No Result
3, Superover

CREATE TABLE `Player` (
  Player_Id INTEGER,
  Player_Name TEXT,
  DOB DATE,
  Batting_hand INTEGER REFERENCES Batting_Style(Batting_Id),
  Bowling_skill INTEGER REFERENCES Bowling_Style(Bowling_Id),
  Country_Name INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Player`:
1, SC Ganguly, 1972-07-08, 1, 1, 1
2, BB McCullum, 1981-09-27, 2, 1, 4
3, RT Ponting, 1974-12-19, 2, 1, 5

CREATE TABLE `Rolee` (
  Role_Id INTEGER,
  Role_Desc TEXT
);
Sample rows from `Rolee`:
1, Captain
2, Keeper
3, Player

CREATE TABLE `Season` (
  Season_Id INTEGER,
  Man_of_the_Series INTEGER,
  Orange_Cap INTEGER,
  Purple_Cap INTEGER,
  Season_Year INTEGER
);
Sample rows from `Season`:
1, 32, 100, 102, 2008
2, 53, 18, 61, 2009
3, 133, 133, 131, 2010

CREATE TABLE `Team` (
  Team_Id INTEGER,
  Team_Name TEXT
);
Sample rows from `Team`:
1, Kolkata Knight Riders
2, Royal Challengers Bangalore
3, Chennai Super Kings

CREATE TABLE `Toss_Decision` (
  Toss_Id INTEGER,
  Toss_Name TEXT
);
Sample rows from `Toss_Decision`:
1, field
2, bat

CREATE TABLE `Umpire` (
  Umpire_Id INTEGER,
  Umpire_Name TEXT,
  Umpire_Country INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Umpire`:
1, Asad Rauf, 6
2, MR Benson, 10
3, Aleem Dar, 6

CREATE TABLE `Venue` (
  Venue_Id INTEGER,
  Venue_Name TEXT,
  City_Id INTEGER REFERENCES City(City_Id)
);
Sample rows from `Venue`:
1, M Chinnaswamy Stadium, 1
2, Punjab Cricket Association Stadium, 2
3, Feroz Shah Kotla, 3

CREATE TABLE `Win_By` (
  Win_Id INTEGER,
  Win_Type TEXT
);
Sample rows from `Win_By`:
1, runs
2, wickets
3, NO Result

CREATE TABLE `Match` (
  Match_Id INTEGER,
  Team_1 INTEGER REFERENCES Team(Team_Id),
  Team_2 INTEGER REFERENCES Team(Team_Id),
  Match_Date DATE,
  Season_Id INTEGER REFERENCES Season(Season_Id),
  Venue_Id INTEGER REFERENCES Venue(Venue_Id),
  Toss_Winner INTEGER REFERENCES Team(Team_Id),
  Toss_Decide INTEGER REFERENCES Toss_Decision(Toss_Id),
  Win_Type INTEGER REFERENCES Win_By(Win_Id),
  Win_Margin INTEGER,
  Outcome_type INTEGER REFERENCES Out_Type(Out_Id),
  Match_Winner INTEGER REFERENCES Team(Team_Id),
  Man_of_the_Match INTEGER REFERENCES Player(Player_Id)
);
Sample rows from `Match`:
335987, 2, 1, 2008-04-18, 1, 1, 2, 1, 1, 140, 1, 1, 2
335988, 4, 3, 2008-04-19, 1, 2, 3, 2, 1, 33, 1, 3, 19
335989, 6, 5, 2008-04-19, 1, 3, 5, 2, 2, 9, 1, 6, 90

CREATE TABLE `Ball_by_Ball` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Innings_No INTEGER PRIMARY KEY,
  Team_Batting INTEGER,
  Team_Bowling INTEGER,
  Striker_Batting_Position INTEGER,
  Striker INTEGER,
  Non_Striker INTEGER,
  Bowler INTEGER
);
Sample rows from `Ball_by_Ball`:
335987, 1, 1, 1, 1, 2, 1, 1, 2, 14
335987, 1, 1, 2, 2, 1, 1, 6, 7, 106
335987, 1, 2, 1, 1, 2, 2, 2, 1, 14

CREATE TABLE `Batsman_Scored` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Runs_Scored INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Batsman_Scored`:
335987, 1, 1, 0, 1
335987, 1, 1, 1, 2
335987, 1, 2, 0, 1

CREATE TABLE `Player_Match` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Player_Id INTEGER PRIMARY KEY REFERENCES Player(Player_Id),
  Role_Id INTEGER PRIMARY KEY REFERENCES Rolee(Role_Id),
  Team_Id INTEGER REFERENCES Team(Team_Id)
);
Sample rows from `Player_Match`:
335987, 1, 1, 1
335987, 2, 3, 1
335987, 3, 3, 1

CREATE TABLE `Wicket_Taken` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Player_Out INTEGER REFERENCES Player(Player_Id),
  Kind_Out INTEGER REFERENCES Out_Type(Out_Id),
  Fielders INTEGER REFERENCES Player(Player_Id),
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Wicket_Taken`:
335987, 2, 1, 6, 2, None, 2
335987, 3, 2, 8, 2, None, 2
335987, 5, 5, 9, 1, 83, 2

","player, wicket_taken, out_type, country","player.player_name, country.country_name, player.player_Id, wicket_taken.fielders, wicket_taken.kind_out, out_type.out_id, player.country_name, country.country_Id, out_type.out_name"
cs_semester,What is the average number of students who registered for the courses with a difficulty of 4?,SELECT cast(COUNT(t1.student_id) as real) / COUNT(DISTINCT t2.course_id) FROM registration as t1 inner JOIN course as t2 ON t1.course_id = t2.course_id WHERE t2.diff = 4,"CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

","CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

CREATE TABLE `prof` (
  prof_id INTEGER,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  popularity INTEGER,
  teachingability INTEGER,
  graduate_from TEXT
);
Sample rows from `prof`:
1, Male, Nathaniel, Pigford, npigford0@hku.hk, 3, 5, University of Washington
2, Male, Zhihua, Zhou, zzhihua@hku.hk, 2, 1, Beijing Polytechnic University
3, Male, Ogdon, Zywicki, ozywicki2@hku.hk, 2, 2, University of Boston

CREATE TABLE `RA` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `RA`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

","registration, course","registration.student_id, course.course_id, registration.course_id, course.diff"
talkingdata,What percentage of women do not have applications installed on their mobile with respect to men?,"SELECT SUM(iif(t1.gender = 'F', 1, 0)) / SUM(iif(t1.gender = 'M', 1, 0)) as per FROM gender_age as t1 inner JOIN events_relevant as t2 ON t1.device_id = t2.device_id inner JOIN app_events_relevant as t3 ON t2.event_id = t3.event_id WHERE t3.is_installed = 0","CREATE TABLE `gender_age` (
  device_id INTEGER REFERENCES phone_brand_device_model2(device_id),
  gender TEXT,
  age INTEGER,
  group TEXT
);
Sample rows from `gender_age`:
-9221086586254644858, M, 29, M29-31
-9221079146476055829, None, None, None
-9221066489596332354, M, 31, M29-31

CREATE TABLE `events_relevant` (
  event_id INTEGER,
  device_id INTEGER REFERENCES gender_age(device_id),
  timestamp DATETIME,
  longitude REAL,
  latitude REAL
);
Sample rows from `events_relevant`:
2, None, -8942695423876075857, 1.0, 0.0
6, None, -8764672938472212518, 1.0, 1.0
7, None, -9050100410106163077, 1.0, 0.0

CREATE TABLE `app_events_relevant` (
  event_id INTEGER PRIMARY KEY REFERENCES events_relevant(event_id),
  app_id INTEGER PRIMARY KEY REFERENCES app_all(app_id),
  is_installed INTEGER,
  is_active INTEGER
);
Sample rows from `app_events_relevant`:
2, -8942695423876075857, 1, 0
2, -8022267440849930066, 1, 0
2, -5720078949152207372, 1, 0

","CREATE TABLE `app_all` (
  app_id INTEGER
);
Sample rows from `app_all`:
-9223281467940916832
-9222877069545393219
-9222785464897897681

CREATE TABLE `app_events` (
  event_id INTEGER PRIMARY KEY REFERENCES events(event_id),
  app_id INTEGER PRIMARY KEY,
  is_installed INTEGER,
  is_active INTEGER
);
Sample rows from `app_events`:
2, -8942695423876075857, 1, 0
2, -8022267440849930066, 1, 0
2, -5720078949152207372, 1, 0

CREATE TABLE `app_events_relevant` (
  event_id INTEGER PRIMARY KEY REFERENCES events_relevant(event_id),
  app_id INTEGER PRIMARY KEY REFERENCES app_all(app_id),
  is_installed INTEGER,
  is_active INTEGER
);
Sample rows from `app_events_relevant`:
2, -8942695423876075857, 1, 0
2, -8022267440849930066, 1, 0
2, -5720078949152207372, 1, 0

CREATE TABLE `app_labels` (
  app_id INTEGER REFERENCES app_all(app_id),
  label_id INTEGER REFERENCES label_categories(label_id)
);
Sample rows from `app_labels`:
7324884708820027918, 251
-4494216993218550286, 251
6058196446775239644, 406

CREATE TABLE `events` (
  event_id INTEGER,
  device_id INTEGER,
  timestamp DATETIME,
  longitude REAL,
  latitude REAL
);
Sample rows from `events`:
1, 29182687948017175, 2016-05-01 00:55:25.0, 121.0, 31.0
2, -6401643145415154744, 2016-05-01 00:54:12.0, 104.0, 31.0
3, -4833982096941402721, 2016-05-01 00:08:05.0, 107.0, 30.0

CREATE TABLE `events_relevant` (
  event_id INTEGER,
  device_id INTEGER REFERENCES gender_age(device_id),
  timestamp DATETIME,
  longitude REAL,
  latitude REAL
);
Sample rows from `events_relevant`:
2, None, -8942695423876075857, 1.0, 0.0
6, None, -8764672938472212518, 1.0, 1.0
7, None, -9050100410106163077, 1.0, 0.0

CREATE TABLE `gender_age` (
  device_id INTEGER REFERENCES phone_brand_device_model2(device_id),
  gender TEXT,
  age INTEGER,
  group TEXT
);
Sample rows from `gender_age`:
-9221086586254644858, M, 29, M29-31
-9221079146476055829, None, None, None
-9221066489596332354, M, 31, M29-31

CREATE TABLE `gender_age_test` (
  device_id INTEGER
);
Sample rows from `gender_age_test`:
-9223321966609553846
-9223042152723782980
-9222896629442493034

CREATE TABLE `gender_age_train` (
  device_id INTEGER,
  gender TEXT,
  age INTEGER,
  group TEXT
);
Sample rows from `gender_age_train`:
-9223067244542181226, M, 24, M23-26
-9222956879900151005, M, 36, M32-38
-9222754701995937853, M, 29, M29-31

CREATE TABLE `label_categories` (
  label_id INTEGER,
  category TEXT
);
Sample rows from `label_categories`:
1, None
2, game-game type
3, game-Game themes

CREATE TABLE `phone_brand_device_model2` (
  device_id INTEGER PRIMARY KEY,
  phone_brand TEXT PRIMARY KEY,
  device_model TEXT PRIMARY KEY
);
Sample rows from `phone_brand_device_model2`:
-9223321966609553846, 小米, 红米note
-9223067244542181226, vivo, Y19T
-9223042152723782980, 小米, MI 3

CREATE TABLE `sample_submission` (
  device_id INTEGER,
  F23- REAL,
  F24-26 REAL,
  F27-28 REAL,
  F29-32 REAL,
  F33-42 REAL,
  F43+ REAL,
  M22- REAL,
  M23-26 REAL,
  M27-28 REAL,
  M29-31 REAL,
  M32-38 REAL,
  M39+ REAL
);
Sample rows from `sample_submission`:
-9223321966609553846, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833
-9223042152723782980, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833
-9222896629442493034, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833

","gender_age, events_relevant, app_events_relevant","gender_age.gender, gender_age.device_id, events_relevant.device_id, events_relevant.event_id, app_events_relevant.event_id, app_events_relevant.is_installed"
video_games,"Among the games published by Nintendo, what is the percentage of those in the genre of sports?",SELECT cast(COUNT(case when t4.genre_name = 'Sports' then t1.id else null end) as real) * 100/ COUNT(t1.id) FROM game as t1 inner JOIN game_publisher as t2 ON t1.id = t2.game_id inner JOIN publisher as t3 ON t2.publisher_id = t3.id inner JOIN genre as t4 ON t1.genre_id = t4.id WHERE t3.publisher_name = 'Nintendo',"CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

","CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

","game, game_publisher, publisher, genre","genre.genre_name, game.id, game_publisher.game_id, game_publisher.publisher_id, publisher.id, game.genre_id, genre.id, publisher.publisher_name"
movie_platform,"When did user 39115684 rate the movie ""A Way of Life""?",SELECT t1.rating_score FROM ratings as t1 inner JOIN movies as t2 ON t1.movie_id = t2.movie_id WHERE t2.movie_title = 'A Way of Life' AND t1.user_id = 39115684,"CREATE TABLE `ratings` (
  movie_id INTEGER REFERENCES movies(movie_id),
  rating_id INTEGER REFERENCES ratings(rating_id),
  rating_url TEXT,
  rating_score INTEGER,
  rating_timestamp_utc TEXT,
  critic TEXT,
  critic_likes INTEGER,
  critic_comments INTEGER,
  user_id INTEGER REFERENCES ratings_users(user_id) REFERENCES lists_users(user_id),
  user_trialist INTEGER,
  user_subscriber INTEGER,
  user_eligible_for_trial INTEGER,
  user_has_payment_method INTEGER
);
Sample rows from `ratings`:
1066, 15610495, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/15610495, 3, 2017-06-10 12:38:33, None, 0, 0, 41579158, 0, 0, 1, 0
1066, 10704606, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/10704606, 2, 2014-08-15 23:42:31, None, 0, 0, 85981819, 1, 1, 0, 1
1066, 10177114, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/10177114, 2, 2014-01-30 13:21:57, None, 0, 0, 4208563, 0, 0, 1, 1

CREATE TABLE `movies` (
  movie_id INTEGER,
  movie_title TEXT,
  movie_release_year INTEGER,
  movie_url TEXT,
  movie_title_language TEXT,
  movie_popularity INTEGER,
  movie_image_url TEXT,
  director_id TEXT,
  director_name TEXT,
  director_url TEXT
);
Sample rows from `movies`:
1, La Antena, 2007, http://mubi.com/films/la-antena, en, 105, https://images.mubicdn.net/images/film/1/cache-7927-1581389497/image-w1280.jpg, 131, Esteban Sapir, http://mubi.com/cast/esteban-sapir
2, Elementary Particles, 2006, http://mubi.com/films/elementary-particles, en, 23, https://images.mubicdn.net/images/film/2/cache-512179-1581389841/image-w1280.jpg, 73, Oskar Roehler, http://mubi.com/cast/oskar-roehler
3, It's Winter, 2006, http://mubi.com/films/its-winter, en, 21, https://images.mubicdn.net/images/film/3/cache-7929-1481539519/image-w1280.jpg, 82, Rafi Pitts, http://mubi.com/cast/rafi-pitts

","CREATE TABLE `lists` (
  user_id INTEGER REFERENCES lists_users(user_id),
  list_id INTEGER,
  list_title TEXT,
  list_movie_number INTEGER,
  list_update_timestamp_utc TEXT,
  list_creation_timestamp_utc TEXT,
  list_followers INTEGER,
  list_url TEXT,
  list_comments INTEGER,
  list_description TEXT,
  list_cover_image_url TEXT,
  list_first_image_url TEXT,
  list_second_image_url TEXT,
  list_third_image_url TEXT
);
Sample rows from `lists`:
88260493, 1, Films that made your kid sister cry, 5, 2019-01-24 19:16:18, 2009-11-11 00:02:21, 5, http://mubi.com/lists/films-that-made-your-kid-sister-cry, 3, <p>Don’t be such a baby!!</p>
<p><strong>bold</strong></p>, https://assets.mubicdn.net/images/film/3822/image-w1280.jpg?1445914994, https://assets.mubicdn.net/images/film/3822/image-w320.jpg?1445914994, https://assets.mubicdn.net/images/film/506/image-w320.jpg?1543838422, https://assets.mubicdn.net/images/film/485/image-w320.jpg?1575331204
45204418, 2, Headscratchers, 3, 2018-12-03 15:12:20, 2009-11-11 00:05:11, 1, http://mubi.com/lists/headscratchers, 2, <p>Films that need at least two viewings to really make sense.</p>
<p>Or at least… they did for <em>me</em>.</p>, https://assets.mubicdn.net/images/film/4343/image-w1280.jpg?1583331932, https://assets.mubicdn.net/images/film/4343/image-w320.jpg?1583331932, https://assets.mubicdn.net/images/film/159/image-w320.jpg?1548864573, https://assets.mubicdn.net/images/film/142/image-w320.jpg?1544094102
48905025, 3, Sexy Time Movies, 7, 2019-05-30 03:00:07, 2009-11-11 00:20:00, 6, http://mubi.com/lists/sexy-time-movies, 5, <p>Films that get you in the mood…for love. In development.</p>
<p>Remarks</p>
<p><strong>Enter the Void</strong><br>
If you’ve seen <a href=""http://www.theauteurs.com/films/2377"" rel=""nofollow"">Enter the Void</a> then you’ll know why that’s on this list., https://assets.mubicdn.net/images/film/3491/image-w1280.jpg?1564112978, https://assets.mubicdn.net/images/film/3491/image-w320.jpg?1564112978, https://assets.mubicdn.net/images/film/2377/image-w320.jpg?1564675204, https://assets.mubicdn.net/images/film/2874/image-w320.jpg?1546574412

CREATE TABLE `movies` (
  movie_id INTEGER,
  movie_title TEXT,
  movie_release_year INTEGER,
  movie_url TEXT,
  movie_title_language TEXT,
  movie_popularity INTEGER,
  movie_image_url TEXT,
  director_id TEXT,
  director_name TEXT,
  director_url TEXT
);
Sample rows from `movies`:
1, La Antena, 2007, http://mubi.com/films/la-antena, en, 105, https://images.mubicdn.net/images/film/1/cache-7927-1581389497/image-w1280.jpg, 131, Esteban Sapir, http://mubi.com/cast/esteban-sapir
2, Elementary Particles, 2006, http://mubi.com/films/elementary-particles, en, 23, https://images.mubicdn.net/images/film/2/cache-512179-1581389841/image-w1280.jpg, 73, Oskar Roehler, http://mubi.com/cast/oskar-roehler
3, It's Winter, 2006, http://mubi.com/films/its-winter, en, 21, https://images.mubicdn.net/images/film/3/cache-7929-1481539519/image-w1280.jpg, 82, Rafi Pitts, http://mubi.com/cast/rafi-pitts

CREATE TABLE `ratings_users` (
  user_id INTEGER REFERENCES lists_users(user_id),
  rating_date_utc TEXT,
  user_trialist INTEGER,
  user_subscriber INTEGER,
  user_avatar_image_url TEXT,
  user_cover_image_url TEXT,
  user_eligible_for_trial INTEGER,
  user_has_payment_method INTEGER
);
Sample rows from `ratings_users`:
41579158, 2017-06-10, 0, 0, https://assets.mubicdn.net/images/avatars/74283/images-w150.jpg?1523895155, None, 1, 0
68654088, 2012-10-02, 0, 0, https://assets.mubicdn.net/images/avatars/27714/images-w150.jpg?1523889463, None, 1, 1
84114365, 2010-12-25, 0, 0, https://assets.mubicdn.net/images/avatars/1808/images-w150.jpg?1523883471, None, 1, 0

CREATE TABLE `lists_users` (
  user_id INTEGER PRIMARY KEY REFERENCES lists(user_id),
  list_id INTEGER PRIMARY KEY REFERENCES lists(list_id),
  list_update_date_utc TEXT,
  list_creation_date_utc TEXT,
  user_trialist INTEGER,
  user_subscriber INTEGER,
  user_avatar_image_url TEXT,
  user_cover_image_url TEXT,
  user_eligible_for_trial TEXT,
  user_has_payment_method TEXT
);
Sample rows from `lists_users`:
85981819, 1969, 2019-11-26, 2009-12-18, 1, 1, https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214, None, 0, 1
85981819, 3946, 2020-05-01, 2010-01-30, 1, 1, https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214, None, 0, 1
85981819, 6683, 2020-04-12, 2010-03-31, 1, 1, https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214, None, 0, 1

CREATE TABLE `ratings` (
  movie_id INTEGER REFERENCES movies(movie_id),
  rating_id INTEGER REFERENCES ratings(rating_id),
  rating_url TEXT,
  rating_score INTEGER,
  rating_timestamp_utc TEXT,
  critic TEXT,
  critic_likes INTEGER,
  critic_comments INTEGER,
  user_id INTEGER REFERENCES ratings_users(user_id) REFERENCES lists_users(user_id),
  user_trialist INTEGER,
  user_subscriber INTEGER,
  user_eligible_for_trial INTEGER,
  user_has_payment_method INTEGER
);
Sample rows from `ratings`:
1066, 15610495, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/15610495, 3, 2017-06-10 12:38:33, None, 0, 0, 41579158, 0, 0, 1, 0
1066, 10704606, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/10704606, 2, 2014-08-15 23:42:31, None, 0, 0, 85981819, 1, 1, 0, 1
1066, 10177114, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/10177114, 2, 2014-01-30 13:21:57, None, 0, 0, 4208563, 0, 0, 1, 1

","ratings, movies","ratings.rating_score, ratings.movie_id, movies.movie_id, movies.movie_title, ratings.user_id"
language_corpus,"Which biwords pair has a higher occurrence, ""àbac-xinès"" or ""àbac-grec""?",SELECT case when ( SELECT occurrences FROM biwords WHERE w1st = ( SELECT wid FROM words WHERE word = 'àbac' ) AND w2nd = ( SELECT wid FROM words WHERE word = 'xinès' ) ) > ( SELECT occurrences FROM biwords WHERE w1st = ( SELECT wid FROM words WHERE word = 'àbac' ) AND w2nd = ( SELECT wid FROM words WHERE word = 'grec' ) ) then 'àbac-xinès' else 'àbac-grec' end as calus FROM words LIMIT 1,"CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

","CREATE TABLE `langs` (
  lid INTEGER,
  lang TEXT PRIMARY KEY,
  locale TEXT PRIMARY KEY,
  pages INTEGER,
  words INTEGER
);
Sample rows from `langs`:
1, ca, ca_ES, 1129144, 2764996

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
langs, 1
pages, 1129144
words, 2764996

CREATE TABLE `pages` (
  pid INTEGER,
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  page INTEGER PRIMARY KEY,
  revision INTEGER,
  title TEXT PRIMARY KEY,
  words INTEGER
);
Sample rows from `pages`:
1, 1, 1, 28236978, Àbac, 1081
2, 1, 2, 24086480, Abadia, 68
3, 1, 8, 26230310, Adagi, 304

CREATE TABLE `words` (
  wid INTEGER,
  word TEXT PRIMARY KEY,
  occurrences INTEGER
);
Sample rows from `words`:
1, àbac, 242
2, xinès, 16841
3, llatí, 48700

CREATE TABLE `langs_words` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `langs_words`:
1, 1, 242
1, 2, 16841
1, 3, 48700

CREATE TABLE `pages_words` (
  pid INTEGER PRIMARY KEY REFERENCES pages(pid),
  wid INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `pages_words`:
1, 1, 30
1, 2, 8
1, 3, 2

CREATE TABLE `biwords` (
  lid INTEGER PRIMARY KEY REFERENCES langs(lid),
  w1st INTEGER PRIMARY KEY REFERENCES words(wid),
  w2nd INTEGER PRIMARY KEY REFERENCES words(wid),
  occurrences INTEGER
);
Sample rows from `biwords`:
1, 1, 2, 4
1, 1, 4, 3
1, 1, 25, 13

","biwords, words","occurrences, w1st, wid, word, w2nd"
olympics,What is the name of the Olympic game with the most competitors held in Barcelona?,SELECT t1.games_name FROM games as t1 inner JOIN games_competitor as t2 ON t1.id = t2.games_id inner JOIN games_city as t3 ON t2.games_id = t3.games_id inner JOIN city as t4 ON t3.city_id = t4.id WHERE t4.city_name = 'Barcelona' GROUP BY t1.id ORDER BY COUNT(t2.person_id) DESC LIMIT 1,"CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

","CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `medal` (
  id INTEGER,
  medal_name TEXT
);
Sample rows from `medal`:
1, Gold
2, Silver
3, Bronze

CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `sport` (
  id INTEGER,
  sport_name TEXT
);
Sample rows from `sport`:
1, Aeronautics
2, Alpine Skiing
3, Alpinism

CREATE TABLE `event` (
  id INTEGER,
  sport_id INTEGER REFERENCES sport(id),
  event_name TEXT
);
Sample rows from `event`:
1, 9, Basketball Men's Basketball
2, 33, Judo Men's Extra-Lightweight
3, 25, Football Men's Football

CREATE TABLE `competitor_event` (
  event_id INTEGER REFERENCES event(id),
  competitor_id INTEGER REFERENCES games_competitor(id),
  medal_id INTEGER REFERENCES medal(id)
);
Sample rows from `competitor_event`:
1, 1, 4
2, 2, 4
3, 3, 4

","games, games_competitor, games_city, city","games.games_name, games.id, games_competitor.games_id, games_city.games_id, games_city.city_id, city.id, city.city_name, games_competitor.person_id"
world_development_indicators,What is the average adolescent fertility rate of the country whose Alpha2Code is 1A over the years this indicator was calculated.,SELECT AVG(t2.value) FROM country as t1 inner JOIN indicators as t2 ON t1.countryCode = t2.countrycode WHERE t1.alpha2code = '1A' AND t2.indicatorname LIKE 'adolescent fertility rate%',"CREATE TABLE `country` (
  CountryCode TEXT PRIMARY KEY,
  ShortName TEXT,
  TableName TEXT,
  LongName TEXT,
  Alpha2Code TEXT,
  CurrencyUnit TEXT,
  SpecialNotes TEXT,
  Region TEXT,
  IncomeGroup TEXT,
  Wb2Code TEXT,
  NationalAccountsBaseYear TEXT,
  NationalAccountsReferenceYear TEXT,
  SnaPriceValuation TEXT,
  LendingCategory TEXT,
  OtherGroups TEXT,
  SystemOfNationalAccounts TEXT,
  AlternativeConversionFactor TEXT,
  PppSurveyYear TEXT,
  BalanceOfPaymentsManualInUse TEXT,
  ExternalDebtReportingStatus TEXT,
  SystemOfTrade TEXT,
  GovernmentAccountingConcept TEXT,
  ImfDataDisseminationStandard TEXT,
  LatestPopulationCensus TEXT,
  LatestHouseholdSurvey TEXT,
  SourceOfMostRecentIncomeAndExpenditureData TEXT,
  VitalRegistrationComplete TEXT,
  LatestAgriculturalCensus TEXT,
  LatestIndustrialData INTEGER,
  LatestTradeData INTEGER,
  LatestWaterWithdrawalData INTEGER
);
Sample rows from `country`:
AFG, Afghanistan, Afghanistan, Islamic State of Afghanistan, AF, Afghan afghani, Fiscal year end: March 20; reporting period for national accounts data: FY (from 2013 are CY). National accounts data are sourced from the IMF and differ from the Central Statistics Organization numbers due to exclusion of the opium economy., South Asia, Low income, AF, 2002/03, , Value added at basic prices (VAB), IDA, HIPC, Country uses the 1993 System of National Accounts methodology., , , , Actual, General trade system, Consolidated central government, General Data Dissemination System (GDDS), 1979, Multiple Indicator Cluster Survey (MICS), 2010/11, Integrated household survey (IHS), 2008, , 2013/14, None, 2013, 2000
ALB, Albania, Albania, Republic of Albania, AL, Albanian lek, , Europe & Central Asia, Upper middle income, AL, Original chained constant price data are rescaled., 1996, Value added at basic prices (VAB), IBRD, , Country uses the 1993 System of National Accounts methodology., , Rolling, IMF Balance of Payments Manual, 6th edition., Actual, General trade system, Budgetary central government, General Data Dissemination System (GDDS), 2011, Demographic and Health Survey (DHS), 2008/09, Living Standards Measurement Study Survey (LSMS), 2011/12, Yes, 2012, 2011, 2013, 2006
DZA, Algeria, Algeria, People's Democratic Republic of Algeria, DZ, Algerian dinar, , Middle East & North Africa, Upper middle income, DZ, 1980, , Value added at basic prices (VAB), IBRD, , Country uses the 1968 System of National Accounts methodology., , 2011, IMF Balance of Payments Manual, 6th edition., Actual, Special trade system, Budgetary central government, General Data Dissemination System (GDDS), 2008, Multiple Indicator Cluster Survey (MICS), 2012, Integrated household survey (IHS), 1995, , , 2010, 2013, 2001

CREATE TABLE `indicators` (
  CountryName TEXT,
  CountryCode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  IndicatorName TEXT,
  IndicatorCode TEXT PRIMARY KEY,
  Year INTEGER PRIMARY KEY,
  Value INTEGER
);
Sample rows from `indicators`:
Arab World, ARB, Adolescent fertility rate (births per 1,000 women ages 15-19), SP.ADO.TFRT, 1960, 133
Arab World, ARB, Age dependency ratio (% of working-age population), SP.POP.DPND, 1960, 87
Arab World, ARB, Age dependency ratio, old (% of working-age population), SP.POP.DPND.OL, 1960, 6

","CREATE TABLE `Country` (
  CountryCode TEXT PRIMARY KEY,
  ShortName TEXT,
  TableName TEXT,
  LongName TEXT,
  Alpha2Code TEXT,
  CurrencyUnit TEXT,
  SpecialNotes TEXT,
  Region TEXT,
  IncomeGroup TEXT,
  Wb2Code TEXT,
  NationalAccountsBaseYear TEXT,
  NationalAccountsReferenceYear TEXT,
  SnaPriceValuation TEXT,
  LendingCategory TEXT,
  OtherGroups TEXT,
  SystemOfNationalAccounts TEXT,
  AlternativeConversionFactor TEXT,
  PppSurveyYear TEXT,
  BalanceOfPaymentsManualInUse TEXT,
  ExternalDebtReportingStatus TEXT,
  SystemOfTrade TEXT,
  GovernmentAccountingConcept TEXT,
  ImfDataDisseminationStandard TEXT,
  LatestPopulationCensus TEXT,
  LatestHouseholdSurvey TEXT,
  SourceOfMostRecentIncomeAndExpenditureData TEXT,
  VitalRegistrationComplete TEXT,
  LatestAgriculturalCensus TEXT,
  LatestIndustrialData INTEGER,
  LatestTradeData INTEGER,
  LatestWaterWithdrawalData INTEGER
);
Sample rows from `Country`:
AFG, Afghanistan, Afghanistan, Islamic State of Afghanistan, AF, Afghan afghani, Fiscal year end: March 20; reporting period for national accounts data: FY (from 2013 are CY). National accounts data are sourced from the IMF and differ from the Central Statistics Organization numbers due to exclusion of the opium economy., South Asia, Low income, AF, 2002/03, , Value added at basic prices (VAB), IDA, HIPC, Country uses the 1993 System of National Accounts methodology., , , , Actual, General trade system, Consolidated central government, General Data Dissemination System (GDDS), 1979, Multiple Indicator Cluster Survey (MICS), 2010/11, Integrated household survey (IHS), 2008, , 2013/14, None, 2013, 2000
ALB, Albania, Albania, Republic of Albania, AL, Albanian lek, , Europe & Central Asia, Upper middle income, AL, Original chained constant price data are rescaled., 1996, Value added at basic prices (VAB), IBRD, , Country uses the 1993 System of National Accounts methodology., , Rolling, IMF Balance of Payments Manual, 6th edition., Actual, General trade system, Budgetary central government, General Data Dissemination System (GDDS), 2011, Demographic and Health Survey (DHS), 2008/09, Living Standards Measurement Study Survey (LSMS), 2011/12, Yes, 2012, 2011, 2013, 2006
DZA, Algeria, Algeria, People's Democratic Republic of Algeria, DZ, Algerian dinar, , Middle East & North Africa, Upper middle income, DZ, 1980, , Value added at basic prices (VAB), IBRD, , Country uses the 1968 System of National Accounts methodology., , 2011, IMF Balance of Payments Manual, 6th edition., Actual, Special trade system, Budgetary central government, General Data Dissemination System (GDDS), 2008, Multiple Indicator Cluster Survey (MICS), 2012, Integrated household survey (IHS), 1995, , , 2010, 2013, 2001

CREATE TABLE `Series` (
  SeriesCode TEXT PRIMARY KEY,
  Topic TEXT,
  IndicatorName TEXT,
  ShortDefinition TEXT,
  LongDefinition TEXT,
  UnitOfMeasure TEXT,
  Periodicity TEXT,
  BasePeriod TEXT,
  OtherNotes INTEGER,
  AggregationMethod TEXT,
  LimitationsAndExceptions TEXT,
  NotesFromOriginalSource TEXT,
  GeneralComments TEXT,
  Source TEXT,
  StatisticalConceptAndMethodology TEXT,
  DevelopmentRelevance TEXT,
  RelatedSourceLinks TEXT,
  OtherWebLinks INTEGER,
  RelatedIndicators INTEGER,
  LicenseType TEXT
);
Sample rows from `Series`:
BN.KLT.DINV.CD, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net (BoP, current US$), , Foreign direct investment are the net inflows of investment to acquire a lasting management interest (10 percent or more of voting stock) in an enterprise operating in an economy other than that of the investor. It is the sum of equity capital, reinvestme, , Annual, , None, , , , Note: Data are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6) and are only available from 2005 onwards. In BPM6, the headings of the financial account have been changed from credits and debits to net acquisition of financial ass, International Monetary Fund, Balance of Payments Statistics Yearbook and data files., , , , None, None, Open
BX.KLT.DINV.WD.GD.ZS, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net inflows (% of GDP), , Foreign direct investment are the net inflows of investment to acquire a lasting management interest (10 percent or more of voting stock) in an enterprise operating in an economy other than that of the investor. It is the sum of equity capital, reinvestme, , Annual, , None, Weighted average, FDI data do not give a complete picture of international investment in an economy. Balance of payments data on FDI do not include capital raised locally, an important source of investment financing in some developing countries. In addition, FDI data omit , , Note: Data starting from 2005 are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6)., International Monetary Fund, International Financial Statistics and Balance of Payments databases, World Bank, International Debt Statistics, and World Bank and OECD GDP estimates., Data on equity flows are based on balance of payments data reported by the International Monetary Fund (IMF). Foreign direct investment (FDI) data are supplemented by the World Bank staff estimates using data from the United Nations Conference on Trade an, Private financial flows - equity and debt - account for the bulk of development finance. Equity flows comprise foreign direct investment (FDI) and portfolio equity. Debt flows are financing raised through bond issuance, bank lending, and supplier credits., , None, None, Open
BX.KLT.DINV.CD.WD, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net inflows (BoP, current US$), , Foreign direct investment refers to direct investment equity flows in the reporting economy. It is the sum of equity capital, reinvestment of earnings, and other capital. Direct investment is a category of cross-border investment associated with a residen, , Annual, , None, Sum, FDI data do not give a complete picture of international investment in an economy. Balance of payments data on FDI do not include capital raised locally, an important source of investment financing in some developing countries. In addition, FDI data omit , , Note: Data starting from 2005 are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6)., International Monetary Fund, Balance of Payments database, supplemented by data from the United Nations Conference on Trade and Development and official national sources., Data on equity flows are based on balance of payments data reported by the International Monetary Fund (IMF). Foreign direct investment (FDI) data are supplemented by the World Bank staff estimates using data from the United Nations Conference on Trade an, Private financial flows - equity and debt - account for the bulk of development finance. Equity flows comprise foreign direct investment (FDI) and portfolio equity. Debt flows are financing raised through bond issuance, bank lending, and supplier credits., , None, None, Open

CREATE TABLE `CountryNotes` (
  Countrycode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Description TEXT
);
Sample rows from `CountryNotes`:
ABW, EG.EGY.PRIM.PP.KD, Sources: Estimated based on UN Energy Statistics (2014); World Development Indicators, WDI (2014)
ABW, EG.ELC.RNEW.ZS, Sources: UN Energy Statistics (2014)
ABW, EG.FEC.RNEW.ZS, Sources: UN Energy Statistics (2014)

CREATE TABLE `Footnotes` (
  Countrycode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Year TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `Footnotes`:
ABW, AG.LND.FRST.K2, YR1990, Not specified
ABW, AG.LND.FRST.K2, YR2000, Not specified
ABW, AG.LND.FRST.K2, YR2005, Not specified

CREATE TABLE `Indicators` (
  CountryName TEXT,
  CountryCode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  IndicatorName TEXT,
  IndicatorCode TEXT PRIMARY KEY,
  Year INTEGER PRIMARY KEY,
  Value INTEGER
);
Sample rows from `Indicators`:
Arab World, ARB, Adolescent fertility rate (births per 1,000 women ages 15-19), SP.ADO.TFRT, 1960, 133
Arab World, ARB, Age dependency ratio (% of working-age population), SP.POP.DPND, 1960, 87
Arab World, ARB, Age dependency ratio, old (% of working-age population), SP.POP.DPND.OL, 1960, 6

CREATE TABLE `SeriesNotes` (
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Year TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `SeriesNotes`:
SP.ADO.TFRT, YR1960, Interpolated using data for 1957 and 1962.
SP.DYN.AMRT.FE, YR1960, Interpolated using data for 1957 and 1962, if the data source is United Nations World Population Prospects.
SP.DYN.AMRT.MA, YR1960, Interpolated using data for 1957 and 1962, if the data source is United Nations World Population Prospects.

","country, indicators","indicators.value, country.countryCode, indicators.countrycode, country.alpha2code, indicators.indicatorname"
movies_4,What is the genre of the movie title which was well-received by the audiences but made the lowest revenue?,"SELECT t3.genre_name FROM movie as t1 inner JOIN movie_genres as t2 ON t1.movie_id = t2.movie_id inner JOIN genre as t3 ON t2.genre_id = t3.genre_id ORDER BY t1.vote_average DESC, t1.revenue LIMIT 1","CREATE TABLE `movie` (
  movie_id INTEGER,
  title TEXT,
  budget INTEGER,
  homepage TEXT,
  overview TEXT,
  popularity REAL,
  release_date DATE,
  revenue INTEGER,
  runtime INTEGER,
  movie_status TEXT,
  tagline TEXT,
  vote_average REAL,
  vote_count INTEGER
);
Sample rows from `movie`:
5, Four Rooms, 4000000, , It's Ted the Bellhop's first night on the job...and the hotel's very unusual guests are about to place him in some outrageous predicaments. It seems that this evening's room service is serving up one unbelievable happening after another., 22.87623, 1995-12-09, 4300000, 98, Released, Twelve outrageous guests. Four scandalous requests. And one lone bellhop, in his first day on the job, who's in for the wildest New year's Eve of his life., 6.5, 530
11, Star Wars, 11000000, http://www.starwars.com/films/star-wars-episode-iv-a-new-hope, Princess Leia is captured and held hostage by the evil Imperial forces in their effort to take over the galactic Empire. Venturesome Luke Skywalker and dashing captain Han Solo team together with the loveable robot duo R2-D2 and C-3PO to rescue the beauti, 126.393695, 1977-05-25, 775398007, 121, Released, A long time ago in a galaxy far, far away..., 8.1, 6624
12, Finding Nemo, 94000000, http://movies.disney.com/finding-nemo, Nemo, an adventurous young clownfish, is unexpectedly taken from his Great Barrier Reef home to a dentist's office aquarium. It's up to his worrisome father Marlin and a friendly but forgetful fish Dory to bring Nemo home -- meeting vegetarian sharks, sur, 85.688789, 2003-05-30, 940335536, 100, Released, There are 3.7 trillion fish in the ocean, they're looking for one., 7.6, 6122

CREATE TABLE `movie_genres` (
  movie_id INTEGER REFERENCES movie(movie_id),
  genre_id INTEGER REFERENCES genre(genre_id)
);
Sample rows from `movie_genres`:
5, 35
5, 80
11, 12

CREATE TABLE `genre` (
  genre_id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
12, Adventure
14, Fantasy
16, Animation

","CREATE TABLE `country` (
  country_id INTEGER,
  country_iso_code TEXT,
  country_name TEXT
);
Sample rows from `country`:
128, AE, United Arab Emirates
129, AF, Afghanistan
130, AO, Angola

CREATE TABLE `department` (
  department_id INTEGER,
  department_name TEXT
);
Sample rows from `department`:
1, Camera
2, Directing
3, Production

CREATE TABLE `gender` (
  gender_id INTEGER,
  gender TEXT
);
Sample rows from `gender`:
0, Unspecified
1, Female
2, Male

CREATE TABLE `genre` (
  genre_id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
12, Adventure
14, Fantasy
16, Animation

CREATE TABLE `keyword` (
  keyword_id INTEGER,
  keyword_name TEXT
);
Sample rows from `keyword`:
30, individual
65, holiday
74, germany

CREATE TABLE `language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `language`:
24574, en, English
24575, sv, svenska
24576, de, Deutsch

CREATE TABLE `language_role` (
  role_id INTEGER,
  language_role TEXT
);
Sample rows from `language_role`:
1, Original
2, Spoken

CREATE TABLE `movie` (
  movie_id INTEGER,
  title TEXT,
  budget INTEGER,
  homepage TEXT,
  overview TEXT,
  popularity REAL,
  release_date DATE,
  revenue INTEGER,
  runtime INTEGER,
  movie_status TEXT,
  tagline TEXT,
  vote_average REAL,
  vote_count INTEGER
);
Sample rows from `movie`:
5, Four Rooms, 4000000, , It's Ted the Bellhop's first night on the job...and the hotel's very unusual guests are about to place him in some outrageous predicaments. It seems that this evening's room service is serving up one unbelievable happening after another., 22.87623, 1995-12-09, 4300000, 98, Released, Twelve outrageous guests. Four scandalous requests. And one lone bellhop, in his first day on the job, who's in for the wildest New year's Eve of his life., 6.5, 530
11, Star Wars, 11000000, http://www.starwars.com/films/star-wars-episode-iv-a-new-hope, Princess Leia is captured and held hostage by the evil Imperial forces in their effort to take over the galactic Empire. Venturesome Luke Skywalker and dashing captain Han Solo team together with the loveable robot duo R2-D2 and C-3PO to rescue the beauti, 126.393695, 1977-05-25, 775398007, 121, Released, A long time ago in a galaxy far, far away..., 8.1, 6624
12, Finding Nemo, 94000000, http://movies.disney.com/finding-nemo, Nemo, an adventurous young clownfish, is unexpectedly taken from his Great Barrier Reef home to a dentist's office aquarium. It's up to his worrisome father Marlin and a friendly but forgetful fish Dory to bring Nemo home -- meeting vegetarian sharks, sur, 85.688789, 2003-05-30, 940335536, 100, Released, There are 3.7 trillion fish in the ocean, they're looking for one., 7.6, 6122

CREATE TABLE `movie_genres` (
  movie_id INTEGER REFERENCES movie(movie_id),
  genre_id INTEGER REFERENCES genre(genre_id)
);
Sample rows from `movie_genres`:
5, 35
5, 80
11, 12

CREATE TABLE `movie_languages` (
  movie_id INTEGER REFERENCES movie(movie_id),
  language_id INTEGER REFERENCES language(language_id),
  language_role_id INTEGER REFERENCES language_role(role_id)
);
Sample rows from `movie_languages`:
5, 24574, 2
11, 24574, 2
12, 24574, 2

CREATE TABLE `person` (
  person_id INTEGER,
  person_name TEXT
);
Sample rows from `person`:
1, George Lucas
2, Mark Hamill
3, Harrison Ford

CREATE TABLE `movie_crew` (
  movie_id INTEGER REFERENCES movie(movie_id),
  person_id INTEGER REFERENCES person(person_id),
  department_id INTEGER REFERENCES department(department_id),
  job TEXT
);
Sample rows from `movie_crew`:
285, 120, 1, Director of Photography
285, 1704, 2, Director
285, 770, 3, Producer

CREATE TABLE `production_company` (
  company_id INTEGER,
  company_name TEXT
);
Sample rows from `production_company`:
1, Lucasfilm
2, Walt Disney Pictures
3, Pixar Animation Studios

CREATE TABLE `production_country` (
  movie_id INTEGER REFERENCES movie(movie_id),
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `production_country`:
5, 214
11, 214
12, 214

CREATE TABLE `movie_cast` (
  movie_id INTEGER REFERENCES movie(movie_id),
  person_id INTEGER REFERENCES person(person_id),
  character_name TEXT,
  gender_id INTEGER REFERENCES gender(gender_id),
  cast_order INTEGER
);
Sample rows from `movie_cast`:
285, 85, Captain Jack Sparrow, 2, 0
285, 114, Will Turner, 2, 1
285, 116, Elizabeth Swann, 1, 2

CREATE TABLE `movie_keywords` (
  movie_id INTEGER REFERENCES movie(None),
  keyword_id INTEGER REFERENCES keyword(None)
);
Sample rows from `movie_keywords`:
5, 612
5, 613
5, 616

CREATE TABLE `movie_company` (
  movie_id INTEGER REFERENCES movie(None),
  company_id INTEGER REFERENCES production_company(None)
);
Sample rows from `movie_company`:
5, 14
5, 59
11, 1

","movie, movie_genres, genre","genre.genre_name, movie.movie_id, movie_genres.movie_id, movie_genres.genre_id, genre.genre_id, movie.vote_average, movie.revenue"
address,"Name 10 cities with their states that are under the Lexington-Fayette, KY office of the Canada Border Services Agency.","SELECT DISTINCT t2.city, t2.state FROM cbsa as t1 inner JOIN zip_data as t2 ON t1.cbsa = t2.cbsa WHERE t1.cbsa_name = 'Lexington-Fayette, KY' LIMIT 10","CREATE TABLE `cbsa` (
  CBSA INTEGER,
  CBSA_name TEXT,
  CBSA_type TEXT
);
Sample rows from `cbsa`:
10300, Adrian, MI, Micro
10380, Aguadilla-Isabela, PR, Metro
10420, Akron, OH, Metro

CREATE TABLE `zip_data` (
  zip_code INTEGER,
  city TEXT,
  state TEXT REFERENCES state(abbreviation),
  multi_county TEXT,
  type TEXT,
  organization TEXT,
  time_zone TEXT,
  daylight_savings TEXT,
  latitude REAL,
  longitude REAL,
  elevation INTEGER,
  state_fips INTEGER,
  county_fips INTEGER,
  region TEXT,
  division TEXT,
  population_2020 INTEGER,
  population_2010 INTEGER,
  households INTEGER,
  avg_house_value INTEGER,
  avg_income_per_household INTEGER,
  persons_per_household REAL,
  white_population INTEGER,
  black_population INTEGER,
  hispanic_population INTEGER,
  asian_population INTEGER,
  american_indian_population INTEGER,
  hawaiian_population INTEGER,
  other_population INTEGER,
  male_population INTEGER,
  female_population INTEGER,
  median_age REAL,
  male_median_age REAL,
  female_median_age REAL,
  residential_mailboxes INTEGER,
  business_mailboxes INTEGER,
  total_delivery_receptacles INTEGER,
  businesses INTEGER,
  1st_quarter_payroll INTEGER,
  annual_payroll INTEGER,
  employees INTEGER,
  water_area REAL,
  land_area REAL,
  single_family_delivery_units INTEGER,
  multi_family_delivery_units INTEGER,
  total_beneficiaries INTEGER,
  retired_workers INTEGER,
  disabled_workers INTEGER,
  parents_and_widowed INTEGER,
  spouses INTEGER,
  children INTEGER,
  over_65 INTEGER,
  monthly_benefits_all INTEGER,
  monthly_benefits_retired_workers INTEGER,
  monthly_benefits_widowed INTEGER,
  CBSA INTEGER REFERENCES CBSA(CBSA)
);
Sample rows from `zip_data`:
501, Holtsville, NY, No, Unique Post Office, I R S Service Center, Eastern, Yes, 40.817923, -73.045317, 25, 36, 103, Northeast, Middle Atlantic, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0, 1, 1, 2, 0, 0, 0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35620
544, Holtsville, NY, No, Unique Post Office, Irs Service Center, Eastern, Yes, 40.788827, -73.039405, 25, 36, 103, Northeast, Middle Atlantic, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35620
601, Adjuntas, PR, No, Post Office, None, Atlantic, No, 18.196747, -66.736735, 0, 72, 1, None, None, 11737, 18570, 6525, 86200, 13092, 2.84, 17479, 663, 18486, 7, 113, 10, 558, 9078, 9492, 35.9, 34.5, 37.1, 4133, 221, 5173, 0, 0, 0, 0, 0.309, 64.348, 2419, 1264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38660

","CREATE TABLE `CBSA` (
  CBSA INTEGER,
  CBSA_name TEXT,
  CBSA_type TEXT
);
Sample rows from `CBSA`:
10300, Adrian, MI, Micro
10380, Aguadilla-Isabela, PR, Metro
10420, Akron, OH, Metro

CREATE TABLE `state` (
  abbreviation TEXT PRIMARY KEY,
  name TEXT
);
Sample rows from `state`:
AA, Armed Forces Americas
AE, Armed Forces Europe
AK, Alaska

CREATE TABLE `congress` (
  cognress_rep_id TEXT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  CID TEXT,
  party TEXT,
  state TEXT,
  abbreviation TEXT REFERENCES state(abbreviation),
  House TEXT,
  District INTEGER,
  land_area REAL
);
Sample rows from `congress`:
AK, Young, Don, N00008091, Republican, Alaska, AK, House of Repsentatives, None, 571951.26
AK-S1, Begich, Mark, N00009585, Democrat, Alaska, AK, Senate, None, 570641.0
AK-S2, Murkowski, Lisa, N00033101, Republican, Alaska, AK, Senate, None, 570641.0

CREATE TABLE `zip_data` (
  zip_code INTEGER,
  city TEXT,
  state TEXT REFERENCES state(abbreviation),
  multi_county TEXT,
  type TEXT,
  organization TEXT,
  time_zone TEXT,
  daylight_savings TEXT,
  latitude REAL,
  longitude REAL,
  elevation INTEGER,
  state_fips INTEGER,
  county_fips INTEGER,
  region TEXT,
  division TEXT,
  population_2020 INTEGER,
  population_2010 INTEGER,
  households INTEGER,
  avg_house_value INTEGER,
  avg_income_per_household INTEGER,
  persons_per_household REAL,
  white_population INTEGER,
  black_population INTEGER,
  hispanic_population INTEGER,
  asian_population INTEGER,
  american_indian_population INTEGER,
  hawaiian_population INTEGER,
  other_population INTEGER,
  male_population INTEGER,
  female_population INTEGER,
  median_age REAL,
  male_median_age REAL,
  female_median_age REAL,
  residential_mailboxes INTEGER,
  business_mailboxes INTEGER,
  total_delivery_receptacles INTEGER,
  businesses INTEGER,
  1st_quarter_payroll INTEGER,
  annual_payroll INTEGER,
  employees INTEGER,
  water_area REAL,
  land_area REAL,
  single_family_delivery_units INTEGER,
  multi_family_delivery_units INTEGER,
  total_beneficiaries INTEGER,
  retired_workers INTEGER,
  disabled_workers INTEGER,
  parents_and_widowed INTEGER,
  spouses INTEGER,
  children INTEGER,
  over_65 INTEGER,
  monthly_benefits_all INTEGER,
  monthly_benefits_retired_workers INTEGER,
  monthly_benefits_widowed INTEGER,
  CBSA INTEGER REFERENCES CBSA(CBSA)
);
Sample rows from `zip_data`:
501, Holtsville, NY, No, Unique Post Office, I R S Service Center, Eastern, Yes, 40.817923, -73.045317, 25, 36, 103, Northeast, Middle Atlantic, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0, 1, 1, 2, 0, 0, 0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35620
544, Holtsville, NY, No, Unique Post Office, Irs Service Center, Eastern, Yes, 40.788827, -73.039405, 25, 36, 103, Northeast, Middle Atlantic, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35620
601, Adjuntas, PR, No, Post Office, None, Atlantic, No, 18.196747, -66.736735, 0, 72, 1, None, None, 11737, 18570, 6525, 86200, 13092, 2.84, 17479, 663, 18486, 7, 113, 10, 558, 9078, 9492, 35.9, 34.5, 37.1, 4133, 221, 5173, 0, 0, 0, 0, 0.309, 64.348, 2419, 1264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38660

CREATE TABLE `alias` (
  zip_code INTEGER REFERENCES zip_data(zip_code),
  alias TEXT
);
Sample rows from `alias`:
501, Holtsville
544, Holtsville
601, Adjuntas

CREATE TABLE `area_code` (
  zip_code INTEGER PRIMARY KEY REFERENCES zip_data(zip_code),
  area_code INTEGER PRIMARY KEY
);
Sample rows from `area_code`:
501, 631
544, 631
601, 787

CREATE TABLE `avoid` (
  zip_code INTEGER PRIMARY KEY REFERENCES zip_data(zip_code),
  bad_alias TEXT PRIMARY KEY
);
Sample rows from `avoid`:
501, Internal Revenue Service
544, Internal Revenue Service
601, Colinas Del Gigante

CREATE TABLE `country` (
  zip_code INTEGER PRIMARY KEY REFERENCES zip_data(zip_code),
  county TEXT PRIMARY KEY,
  state TEXT REFERENCES state(abbreviation)
);
Sample rows from `country`:
501, SUFFOLK, NY
544, SUFFOLK, NY
601, ADJUNTAS, PR

CREATE TABLE `zip_congress` (
  zip_code INTEGER PRIMARY KEY REFERENCES zip_data(zip_code),
  district TEXT PRIMARY KEY REFERENCES congress(cognress_rep_id)
);
Sample rows from `zip_congress`:
501, NY-1
601, PR
602, PR

","cbsa, zip_data","zip_data.city, zip_data.state, cbsa.cbsa, zip_data.cbsa, cbsa.cbsa_name"
coinmarketcap,List all the inactive coins and state the last date of its transaction?,"SELECT t1.name, MAX(t2.date) FROM coins as t1 inner JOIN historical as t2 ON t1.id = t2.coin_id WHERE t1.status = 'inactive' ORDER BY t2.date DESC LIMIT 1","CREATE TABLE `coins` (
  id INTEGER,
  name TEXT,
  slug TEXT,
  symbol TEXT,
  status TEXT,
  category TEXT,
  description TEXT,
  subreddit TEXT,
  notice TEXT,
  tags TEXT,
  tag_names TEXT,
  website TEXT,
  platform_id INTEGER,
  date_added TEXT,
  date_launched TEXT
);
Sample rows from `coins`:
1, Bitcoin, bitcoin, BTC, active, coin, ## **What Is Bitcoin (BTC)?**\n\nBitcoin is a decentralized cryptocurrency originally described in a 2008 [whitepaper](https://coinmarketcap.com/alexandria/glossary/whitepaper) by a person, or group of people, using the alias [Satoshi Nakamoto](https://co, bitcoin, None, mineable, pow, sha-256, store-of-value, state-channels, coinbase-ventures-portfolio, three-arrows-capital-portfolio, polychain-capital-portfolio, binance-labs-portfolio, arrington-xrp-capital, blockchain-capital-portfolio, boostvc-portfolio, cms-holdings-, Mineable, PoW, SHA-256, Store of Value, State channels, Coinbase Ventures Portfolio, Three Arrows Capital Portfolio, Polychain Capital Portfolio, Binance Labs Portfolio, Arrington XRP capital, Blockchain Capital Portfolio, BoostVC Portfolio, CMS Holdings , https://bitcoin.org/, None, 2013-04-28T00:00:00.000Z, None
2, Litecoin, litecoin, LTC, active, coin, ## What Is Litecoin (LTC)?\n\nLitecoin (LTC) is a cryptocurrency that was designed to provide fast, secure and low-cost payments by leveraging the unique properties of [blockchain](https://coinmarketcap.com/alexandria/glossary/blockchain) technology. \n\n, litecoin, None, mineable, pow, scrypt, medium-of-exchange, binance-chain, Mineable, PoW, Scrypt, Medium of Exchange, Binance Chain, https://litecoin.org/, None, 2013-04-28T00:00:00.000Z, None
3, Namecoin, namecoin, NMC, active, coin, Namecoin (NMC) is a cryptocurrency . Users are able to generate NMC through the process of mining. Namecoin has a current supply of 14,736,400. The last known price of Namecoin is 2.14833562 USD and is up 0.40 over the last 24 hours. It is currently tradi, namecoin, None, mineable, pow, sha-256, platform, Mineable, PoW, SHA-256, Platform, https://www.namecoin.org/, None, 2013-04-28T00:00:00.000Z, None

CREATE TABLE `historical` (
  date DATE,
  coin_id INTEGER,
  cmc_rank INTEGER,
  market_cap REAL,
  price REAL,
  open REAL,
  high REAL,
  low REAL,
  close REAL,
  time_high TEXT,
  time_low TEXT,
  volume_24h REAL,
  percent_change_1h REAL,
  percent_change_24h REAL,
  percent_change_7d REAL,
  circulating_supply REAL,
  total_supply REAL,
  max_supply REAL,
  num_market_pairs INTEGER
);
Sample rows from `historical`:
2013-04-28, 1, 1, 1488566971.9558687, 134.210021972656, None, None, None, None, None, None, 0.0, 0.639231, None, None, 11091325.0, 11091325.0, 21000000.0, None
2013-04-28, 2, 2, 74637021.56790735, 4.34840488433838, None, None, None, None, None, None, 0.0, 0.799273, None, None, 17164230.0, 17164230.0, 84000000.0, None
2013-04-28, 5, 3, 7250186.647688276, 0.386524856090546, None, None, None, None, None, None, 0.0, -0.934763, None, None, 18757362.0, 18757362.0, None, None

","CREATE TABLE `coins` (
  id INTEGER,
  name TEXT,
  slug TEXT,
  symbol TEXT,
  status TEXT,
  category TEXT,
  description TEXT,
  subreddit TEXT,
  notice TEXT,
  tags TEXT,
  tag_names TEXT,
  website TEXT,
  platform_id INTEGER,
  date_added TEXT,
  date_launched TEXT
);
Sample rows from `coins`:
1, Bitcoin, bitcoin, BTC, active, coin, ## **What Is Bitcoin (BTC)?**\n\nBitcoin is a decentralized cryptocurrency originally described in a 2008 [whitepaper](https://coinmarketcap.com/alexandria/glossary/whitepaper) by a person, or group of people, using the alias [Satoshi Nakamoto](https://co, bitcoin, None, mineable, pow, sha-256, store-of-value, state-channels, coinbase-ventures-portfolio, three-arrows-capital-portfolio, polychain-capital-portfolio, binance-labs-portfolio, arrington-xrp-capital, blockchain-capital-portfolio, boostvc-portfolio, cms-holdings-, Mineable, PoW, SHA-256, Store of Value, State channels, Coinbase Ventures Portfolio, Three Arrows Capital Portfolio, Polychain Capital Portfolio, Binance Labs Portfolio, Arrington XRP capital, Blockchain Capital Portfolio, BoostVC Portfolio, CMS Holdings , https://bitcoin.org/, None, 2013-04-28T00:00:00.000Z, None
2, Litecoin, litecoin, LTC, active, coin, ## What Is Litecoin (LTC)?\n\nLitecoin (LTC) is a cryptocurrency that was designed to provide fast, secure and low-cost payments by leveraging the unique properties of [blockchain](https://coinmarketcap.com/alexandria/glossary/blockchain) technology. \n\n, litecoin, None, mineable, pow, scrypt, medium-of-exchange, binance-chain, Mineable, PoW, Scrypt, Medium of Exchange, Binance Chain, https://litecoin.org/, None, 2013-04-28T00:00:00.000Z, None
3, Namecoin, namecoin, NMC, active, coin, Namecoin (NMC) is a cryptocurrency . Users are able to generate NMC through the process of mining. Namecoin has a current supply of 14,736,400. The last known price of Namecoin is 2.14833562 USD and is up 0.40 over the last 24 hours. It is currently tradi, namecoin, None, mineable, pow, sha-256, platform, Mineable, PoW, SHA-256, Platform, https://www.namecoin.org/, None, 2013-04-28T00:00:00.000Z, None

CREATE TABLE `historical` (
  date DATE,
  coin_id INTEGER,
  cmc_rank INTEGER,
  market_cap REAL,
  price REAL,
  open REAL,
  high REAL,
  low REAL,
  close REAL,
  time_high TEXT,
  time_low TEXT,
  volume_24h REAL,
  percent_change_1h REAL,
  percent_change_24h REAL,
  percent_change_7d REAL,
  circulating_supply REAL,
  total_supply REAL,
  max_supply REAL,
  num_market_pairs INTEGER
);
Sample rows from `historical`:
2013-04-28, 1, 1, 1488566971.9558687, 134.210021972656, None, None, None, None, None, None, 0.0, 0.639231, None, None, 11091325.0, 11091325.0, 21000000.0, None
2013-04-28, 2, 2, 74637021.56790735, 4.34840488433838, None, None, None, None, None, None, 0.0, 0.799273, None, None, 17164230.0, 17164230.0, 84000000.0, None
2013-04-28, 5, 3, 7250186.647688276, 0.386524856090546, None, None, None, None, None, None, 0.0, -0.934763, None, None, 18757362.0, 18757362.0, None, None

","coins, historical","coins.name, historical.date, coins.id, historical.coin_id, coins.status"
world_development_indicators,What is the average number of passengers carried via air transport per year by Bulgaria between 1970 to 1980? Indicate the country's system of trade.,"SELECT AVG(t1.value), t2.systemoftrade FROM indicators as t1 inner JOIN country as t2 ON t1.countryCode = t2.countryCode WHERE t1.indicatorname = 'Air transport, passengers carried' AND t1.year >= 1970 AND t1.year < 1981 AND t1.countryName = 'Bulgaria'","CREATE TABLE `indicators` (
  CountryName TEXT,
  CountryCode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  IndicatorName TEXT,
  IndicatorCode TEXT PRIMARY KEY,
  Year INTEGER PRIMARY KEY,
  Value INTEGER
);
Sample rows from `indicators`:
Arab World, ARB, Adolescent fertility rate (births per 1,000 women ages 15-19), SP.ADO.TFRT, 1960, 133
Arab World, ARB, Age dependency ratio (% of working-age population), SP.POP.DPND, 1960, 87
Arab World, ARB, Age dependency ratio, old (% of working-age population), SP.POP.DPND.OL, 1960, 6

CREATE TABLE `country` (
  CountryCode TEXT PRIMARY KEY,
  ShortName TEXT,
  TableName TEXT,
  LongName TEXT,
  Alpha2Code TEXT,
  CurrencyUnit TEXT,
  SpecialNotes TEXT,
  Region TEXT,
  IncomeGroup TEXT,
  Wb2Code TEXT,
  NationalAccountsBaseYear TEXT,
  NationalAccountsReferenceYear TEXT,
  SnaPriceValuation TEXT,
  LendingCategory TEXT,
  OtherGroups TEXT,
  SystemOfNationalAccounts TEXT,
  AlternativeConversionFactor TEXT,
  PppSurveyYear TEXT,
  BalanceOfPaymentsManualInUse TEXT,
  ExternalDebtReportingStatus TEXT,
  SystemOfTrade TEXT,
  GovernmentAccountingConcept TEXT,
  ImfDataDisseminationStandard TEXT,
  LatestPopulationCensus TEXT,
  LatestHouseholdSurvey TEXT,
  SourceOfMostRecentIncomeAndExpenditureData TEXT,
  VitalRegistrationComplete TEXT,
  LatestAgriculturalCensus TEXT,
  LatestIndustrialData INTEGER,
  LatestTradeData INTEGER,
  LatestWaterWithdrawalData INTEGER
);
Sample rows from `country`:
AFG, Afghanistan, Afghanistan, Islamic State of Afghanistan, AF, Afghan afghani, Fiscal year end: March 20; reporting period for national accounts data: FY (from 2013 are CY). National accounts data are sourced from the IMF and differ from the Central Statistics Organization numbers due to exclusion of the opium economy., South Asia, Low income, AF, 2002/03, , Value added at basic prices (VAB), IDA, HIPC, Country uses the 1993 System of National Accounts methodology., , , , Actual, General trade system, Consolidated central government, General Data Dissemination System (GDDS), 1979, Multiple Indicator Cluster Survey (MICS), 2010/11, Integrated household survey (IHS), 2008, , 2013/14, None, 2013, 2000
ALB, Albania, Albania, Republic of Albania, AL, Albanian lek, , Europe & Central Asia, Upper middle income, AL, Original chained constant price data are rescaled., 1996, Value added at basic prices (VAB), IBRD, , Country uses the 1993 System of National Accounts methodology., , Rolling, IMF Balance of Payments Manual, 6th edition., Actual, General trade system, Budgetary central government, General Data Dissemination System (GDDS), 2011, Demographic and Health Survey (DHS), 2008/09, Living Standards Measurement Study Survey (LSMS), 2011/12, Yes, 2012, 2011, 2013, 2006
DZA, Algeria, Algeria, People's Democratic Republic of Algeria, DZ, Algerian dinar, , Middle East & North Africa, Upper middle income, DZ, 1980, , Value added at basic prices (VAB), IBRD, , Country uses the 1968 System of National Accounts methodology., , 2011, IMF Balance of Payments Manual, 6th edition., Actual, Special trade system, Budgetary central government, General Data Dissemination System (GDDS), 2008, Multiple Indicator Cluster Survey (MICS), 2012, Integrated household survey (IHS), 1995, , , 2010, 2013, 2001

","CREATE TABLE `Country` (
  CountryCode TEXT PRIMARY KEY,
  ShortName TEXT,
  TableName TEXT,
  LongName TEXT,
  Alpha2Code TEXT,
  CurrencyUnit TEXT,
  SpecialNotes TEXT,
  Region TEXT,
  IncomeGroup TEXT,
  Wb2Code TEXT,
  NationalAccountsBaseYear TEXT,
  NationalAccountsReferenceYear TEXT,
  SnaPriceValuation TEXT,
  LendingCategory TEXT,
  OtherGroups TEXT,
  SystemOfNationalAccounts TEXT,
  AlternativeConversionFactor TEXT,
  PppSurveyYear TEXT,
  BalanceOfPaymentsManualInUse TEXT,
  ExternalDebtReportingStatus TEXT,
  SystemOfTrade TEXT,
  GovernmentAccountingConcept TEXT,
  ImfDataDisseminationStandard TEXT,
  LatestPopulationCensus TEXT,
  LatestHouseholdSurvey TEXT,
  SourceOfMostRecentIncomeAndExpenditureData TEXT,
  VitalRegistrationComplete TEXT,
  LatestAgriculturalCensus TEXT,
  LatestIndustrialData INTEGER,
  LatestTradeData INTEGER,
  LatestWaterWithdrawalData INTEGER
);
Sample rows from `Country`:
AFG, Afghanistan, Afghanistan, Islamic State of Afghanistan, AF, Afghan afghani, Fiscal year end: March 20; reporting period for national accounts data: FY (from 2013 are CY). National accounts data are sourced from the IMF and differ from the Central Statistics Organization numbers due to exclusion of the opium economy., South Asia, Low income, AF, 2002/03, , Value added at basic prices (VAB), IDA, HIPC, Country uses the 1993 System of National Accounts methodology., , , , Actual, General trade system, Consolidated central government, General Data Dissemination System (GDDS), 1979, Multiple Indicator Cluster Survey (MICS), 2010/11, Integrated household survey (IHS), 2008, , 2013/14, None, 2013, 2000
ALB, Albania, Albania, Republic of Albania, AL, Albanian lek, , Europe & Central Asia, Upper middle income, AL, Original chained constant price data are rescaled., 1996, Value added at basic prices (VAB), IBRD, , Country uses the 1993 System of National Accounts methodology., , Rolling, IMF Balance of Payments Manual, 6th edition., Actual, General trade system, Budgetary central government, General Data Dissemination System (GDDS), 2011, Demographic and Health Survey (DHS), 2008/09, Living Standards Measurement Study Survey (LSMS), 2011/12, Yes, 2012, 2011, 2013, 2006
DZA, Algeria, Algeria, People's Democratic Republic of Algeria, DZ, Algerian dinar, , Middle East & North Africa, Upper middle income, DZ, 1980, , Value added at basic prices (VAB), IBRD, , Country uses the 1968 System of National Accounts methodology., , 2011, IMF Balance of Payments Manual, 6th edition., Actual, Special trade system, Budgetary central government, General Data Dissemination System (GDDS), 2008, Multiple Indicator Cluster Survey (MICS), 2012, Integrated household survey (IHS), 1995, , , 2010, 2013, 2001

CREATE TABLE `Series` (
  SeriesCode TEXT PRIMARY KEY,
  Topic TEXT,
  IndicatorName TEXT,
  ShortDefinition TEXT,
  LongDefinition TEXT,
  UnitOfMeasure TEXT,
  Periodicity TEXT,
  BasePeriod TEXT,
  OtherNotes INTEGER,
  AggregationMethod TEXT,
  LimitationsAndExceptions TEXT,
  NotesFromOriginalSource TEXT,
  GeneralComments TEXT,
  Source TEXT,
  StatisticalConceptAndMethodology TEXT,
  DevelopmentRelevance TEXT,
  RelatedSourceLinks TEXT,
  OtherWebLinks INTEGER,
  RelatedIndicators INTEGER,
  LicenseType TEXT
);
Sample rows from `Series`:
BN.KLT.DINV.CD, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net (BoP, current US$), , Foreign direct investment are the net inflows of investment to acquire a lasting management interest (10 percent or more of voting stock) in an enterprise operating in an economy other than that of the investor. It is the sum of equity capital, reinvestme, , Annual, , None, , , , Note: Data are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6) and are only available from 2005 onwards. In BPM6, the headings of the financial account have been changed from credits and debits to net acquisition of financial ass, International Monetary Fund, Balance of Payments Statistics Yearbook and data files., , , , None, None, Open
BX.KLT.DINV.WD.GD.ZS, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net inflows (% of GDP), , Foreign direct investment are the net inflows of investment to acquire a lasting management interest (10 percent or more of voting stock) in an enterprise operating in an economy other than that of the investor. It is the sum of equity capital, reinvestme, , Annual, , None, Weighted average, FDI data do not give a complete picture of international investment in an economy. Balance of payments data on FDI do not include capital raised locally, an important source of investment financing in some developing countries. In addition, FDI data omit , , Note: Data starting from 2005 are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6)., International Monetary Fund, International Financial Statistics and Balance of Payments databases, World Bank, International Debt Statistics, and World Bank and OECD GDP estimates., Data on equity flows are based on balance of payments data reported by the International Monetary Fund (IMF). Foreign direct investment (FDI) data are supplemented by the World Bank staff estimates using data from the United Nations Conference on Trade an, Private financial flows - equity and debt - account for the bulk of development finance. Equity flows comprise foreign direct investment (FDI) and portfolio equity. Debt flows are financing raised through bond issuance, bank lending, and supplier credits., , None, None, Open
BX.KLT.DINV.CD.WD, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net inflows (BoP, current US$), , Foreign direct investment refers to direct investment equity flows in the reporting economy. It is the sum of equity capital, reinvestment of earnings, and other capital. Direct investment is a category of cross-border investment associated with a residen, , Annual, , None, Sum, FDI data do not give a complete picture of international investment in an economy. Balance of payments data on FDI do not include capital raised locally, an important source of investment financing in some developing countries. In addition, FDI data omit , , Note: Data starting from 2005 are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6)., International Monetary Fund, Balance of Payments database, supplemented by data from the United Nations Conference on Trade and Development and official national sources., Data on equity flows are based on balance of payments data reported by the International Monetary Fund (IMF). Foreign direct investment (FDI) data are supplemented by the World Bank staff estimates using data from the United Nations Conference on Trade an, Private financial flows - equity and debt - account for the bulk of development finance. Equity flows comprise foreign direct investment (FDI) and portfolio equity. Debt flows are financing raised through bond issuance, bank lending, and supplier credits., , None, None, Open

CREATE TABLE `CountryNotes` (
  Countrycode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Description TEXT
);
Sample rows from `CountryNotes`:
ABW, EG.EGY.PRIM.PP.KD, Sources: Estimated based on UN Energy Statistics (2014); World Development Indicators, WDI (2014)
ABW, EG.ELC.RNEW.ZS, Sources: UN Energy Statistics (2014)
ABW, EG.FEC.RNEW.ZS, Sources: UN Energy Statistics (2014)

CREATE TABLE `Footnotes` (
  Countrycode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Year TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `Footnotes`:
ABW, AG.LND.FRST.K2, YR1990, Not specified
ABW, AG.LND.FRST.K2, YR2000, Not specified
ABW, AG.LND.FRST.K2, YR2005, Not specified

CREATE TABLE `Indicators` (
  CountryName TEXT,
  CountryCode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  IndicatorName TEXT,
  IndicatorCode TEXT PRIMARY KEY,
  Year INTEGER PRIMARY KEY,
  Value INTEGER
);
Sample rows from `Indicators`:
Arab World, ARB, Adolescent fertility rate (births per 1,000 women ages 15-19), SP.ADO.TFRT, 1960, 133
Arab World, ARB, Age dependency ratio (% of working-age population), SP.POP.DPND, 1960, 87
Arab World, ARB, Age dependency ratio, old (% of working-age population), SP.POP.DPND.OL, 1960, 6

CREATE TABLE `SeriesNotes` (
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Year TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `SeriesNotes`:
SP.ADO.TFRT, YR1960, Interpolated using data for 1957 and 1962.
SP.DYN.AMRT.FE, YR1960, Interpolated using data for 1957 and 1962, if the data source is United Nations World Population Prospects.
SP.DYN.AMRT.MA, YR1960, Interpolated using data for 1957 and 1962, if the data source is United Nations World Population Prospects.

","indicators, country","indicators.value, country.systemoftrade, indicators.countryCode, country.countryCode, indicators.indicatorname, indicators.year, indicators.countryName"
shakespeare,"Please list all the paragraphs in Act 1, Scene 1 in Twelfth Night.",SELECT t3.plaintext FROM works as t1 inner JOIN chapters as t2 ON t1.id = t2.work_id inner JOIN paragraphs as t3 ON t2.id = t3.chapter_id WHERE t2.act = 1 AND t2.scene = 1 AND t1.title = 'Twelfth Night',"CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

","CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
chapters, 19648
characters, 1266
paragraphs, 666327

CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

","works, chapters, paragraphs","paragraphs.plaintext, works.id, chapters.work_id, chapters.id, paragraphs.chapter_id, chapters.act, chapters.scene, works.title"
retail_complains,List the full name and phone number of clients who submitted the complaint via fax.,"SELECT t1.first, t1.middle, t1.last, t1.phone FROM client as t1 inner JOIN events as t2 ON t1.client_id = t2.client_id WHERE t2.`submitted via` = 'Fax'","CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

","CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

","client, events","client.first, client.middle, client.last, client.phone, client.client_id, events.client_id, events.submitted via"
shakespeare,Which Shakespeare story with character ID 324 has description of 'this friend of Caesar'?,SELECT t1.title FROM works as t1 inner JOIN chapters as t2 ON t1.id = t2.work_id inner JOIN paragraphs as t3 ON t2.id = t3.chapter_id inner JOIN characters as t4 ON t3.character_id = t4.id WHERE t2.id = '324' AND t2.description = 'friend to Caesar',"CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

","CREATE TABLE `chapters` (
  id INTEGER,
  Act INTEGER,
  Scene INTEGER,
  Description TEXT,
  work_id INTEGER REFERENCES works(None)
);
Sample rows from `chapters`:
18704, 1, 1, DUKE ORSINO’s palace., 1
18705, 1, 2, The sea-coast., 1
18706, 1, 3, OLIVIA’S house., 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
chapters, 19648
characters, 1266
paragraphs, 666327

CREATE TABLE `characters` (
  id INTEGER,
  CharName TEXT,
  Abbrev TEXT,
  Description TEXT
);
Sample rows from `characters`:
1, First Apparition, First Apparition, 
2, First Citizen, First Citizen, 
3, First Conspirator, First Conspirator, 

CREATE TABLE `paragraphs` (
  id INTEGER,
  ParagraphNum INTEGER,
  PlainText TEXT,
  character_id INTEGER REFERENCES characters(None),
  chapter_id INTEGER REFERENCES chapters(None)
);
Sample rows from `paragraphs`:
630863, 3, [Enter DUKE ORSINO, CURIO, and other Lords; Musicians attending], 1261, 18704
630864, 4, If music be the food of love, play on;
Give me excess of it, that, surfeiting,
The appetite may sicken, and so die.
That strain again! it had a dying fall:
O, it came o'er my ear like the sweet sound,
That breathes upon a bank of violets,
Stealing and giving odour! Enough; no more:
'Tis not so sweet now as it was before.
O spirit of love! how quick and fresh art thou,
That, notwithstanding thy capacity
Receiveth as the sea, nought enters there,
Of what validity and pitch soe'er,
But falls into abatement and low price,
Even in a minute: so full of shapes is fancy
That it alone is high fantastical., 840, 18704
630865, 19, Will you go hunt, my lord?, 297, 18704

CREATE TABLE `works` (
  id INTEGER,
  Title TEXT,
  LongTitle TEXT,
  Date INTEGER,
  GenreType TEXT
);
Sample rows from `works`:
1, Twelfth Night, Twelfth Night, Or What You Will, 1599, Comedy
2, All's Well That Ends Well, All's Well That Ends Well, 1602, Comedy
3, Antony and Cleopatra, Antony and Cleopatra, 1606, Tragedy

","works, chapters, paragraphs, characters","works.title, works.id, chapters.work_id, chapters.id, paragraphs.chapter_id, paragraphs.character_id, characters.id, chapters.description"
movie_platform,Name all the list titles created by user 4208563.,SELECT list_title FROM lists WHERE user_id LIKE 4208563,"CREATE TABLE `lists` (
  user_id INTEGER REFERENCES lists_users(user_id),
  list_id INTEGER,
  list_title TEXT,
  list_movie_number INTEGER,
  list_update_timestamp_utc TEXT,
  list_creation_timestamp_utc TEXT,
  list_followers INTEGER,
  list_url TEXT,
  list_comments INTEGER,
  list_description TEXT,
  list_cover_image_url TEXT,
  list_first_image_url TEXT,
  list_second_image_url TEXT,
  list_third_image_url TEXT
);
Sample rows from `lists`:
88260493, 1, Films that made your kid sister cry, 5, 2019-01-24 19:16:18, 2009-11-11 00:02:21, 5, http://mubi.com/lists/films-that-made-your-kid-sister-cry, 3, <p>Don’t be such a baby!!</p>
<p><strong>bold</strong></p>, https://assets.mubicdn.net/images/film/3822/image-w1280.jpg?1445914994, https://assets.mubicdn.net/images/film/3822/image-w320.jpg?1445914994, https://assets.mubicdn.net/images/film/506/image-w320.jpg?1543838422, https://assets.mubicdn.net/images/film/485/image-w320.jpg?1575331204
45204418, 2, Headscratchers, 3, 2018-12-03 15:12:20, 2009-11-11 00:05:11, 1, http://mubi.com/lists/headscratchers, 2, <p>Films that need at least two viewings to really make sense.</p>
<p>Or at least… they did for <em>me</em>.</p>, https://assets.mubicdn.net/images/film/4343/image-w1280.jpg?1583331932, https://assets.mubicdn.net/images/film/4343/image-w320.jpg?1583331932, https://assets.mubicdn.net/images/film/159/image-w320.jpg?1548864573, https://assets.mubicdn.net/images/film/142/image-w320.jpg?1544094102
48905025, 3, Sexy Time Movies, 7, 2019-05-30 03:00:07, 2009-11-11 00:20:00, 6, http://mubi.com/lists/sexy-time-movies, 5, <p>Films that get you in the mood…for love. In development.</p>
<p>Remarks</p>
<p><strong>Enter the Void</strong><br>
If you’ve seen <a href=""http://www.theauteurs.com/films/2377"" rel=""nofollow"">Enter the Void</a> then you’ll know why that’s on this list., https://assets.mubicdn.net/images/film/3491/image-w1280.jpg?1564112978, https://assets.mubicdn.net/images/film/3491/image-w320.jpg?1564112978, https://assets.mubicdn.net/images/film/2377/image-w320.jpg?1564675204, https://assets.mubicdn.net/images/film/2874/image-w320.jpg?1546574412

","CREATE TABLE `lists` (
  user_id INTEGER REFERENCES lists_users(user_id),
  list_id INTEGER,
  list_title TEXT,
  list_movie_number INTEGER,
  list_update_timestamp_utc TEXT,
  list_creation_timestamp_utc TEXT,
  list_followers INTEGER,
  list_url TEXT,
  list_comments INTEGER,
  list_description TEXT,
  list_cover_image_url TEXT,
  list_first_image_url TEXT,
  list_second_image_url TEXT,
  list_third_image_url TEXT
);
Sample rows from `lists`:
88260493, 1, Films that made your kid sister cry, 5, 2019-01-24 19:16:18, 2009-11-11 00:02:21, 5, http://mubi.com/lists/films-that-made-your-kid-sister-cry, 3, <p>Don’t be such a baby!!</p>
<p><strong>bold</strong></p>, https://assets.mubicdn.net/images/film/3822/image-w1280.jpg?1445914994, https://assets.mubicdn.net/images/film/3822/image-w320.jpg?1445914994, https://assets.mubicdn.net/images/film/506/image-w320.jpg?1543838422, https://assets.mubicdn.net/images/film/485/image-w320.jpg?1575331204
45204418, 2, Headscratchers, 3, 2018-12-03 15:12:20, 2009-11-11 00:05:11, 1, http://mubi.com/lists/headscratchers, 2, <p>Films that need at least two viewings to really make sense.</p>
<p>Or at least… they did for <em>me</em>.</p>, https://assets.mubicdn.net/images/film/4343/image-w1280.jpg?1583331932, https://assets.mubicdn.net/images/film/4343/image-w320.jpg?1583331932, https://assets.mubicdn.net/images/film/159/image-w320.jpg?1548864573, https://assets.mubicdn.net/images/film/142/image-w320.jpg?1544094102
48905025, 3, Sexy Time Movies, 7, 2019-05-30 03:00:07, 2009-11-11 00:20:00, 6, http://mubi.com/lists/sexy-time-movies, 5, <p>Films that get you in the mood…for love. In development.</p>
<p>Remarks</p>
<p><strong>Enter the Void</strong><br>
If you’ve seen <a href=""http://www.theauteurs.com/films/2377"" rel=""nofollow"">Enter the Void</a> then you’ll know why that’s on this list., https://assets.mubicdn.net/images/film/3491/image-w1280.jpg?1564112978, https://assets.mubicdn.net/images/film/3491/image-w320.jpg?1564112978, https://assets.mubicdn.net/images/film/2377/image-w320.jpg?1564675204, https://assets.mubicdn.net/images/film/2874/image-w320.jpg?1546574412

CREATE TABLE `movies` (
  movie_id INTEGER,
  movie_title TEXT,
  movie_release_year INTEGER,
  movie_url TEXT,
  movie_title_language TEXT,
  movie_popularity INTEGER,
  movie_image_url TEXT,
  director_id TEXT,
  director_name TEXT,
  director_url TEXT
);
Sample rows from `movies`:
1, La Antena, 2007, http://mubi.com/films/la-antena, en, 105, https://images.mubicdn.net/images/film/1/cache-7927-1581389497/image-w1280.jpg, 131, Esteban Sapir, http://mubi.com/cast/esteban-sapir
2, Elementary Particles, 2006, http://mubi.com/films/elementary-particles, en, 23, https://images.mubicdn.net/images/film/2/cache-512179-1581389841/image-w1280.jpg, 73, Oskar Roehler, http://mubi.com/cast/oskar-roehler
3, It's Winter, 2006, http://mubi.com/films/its-winter, en, 21, https://images.mubicdn.net/images/film/3/cache-7929-1481539519/image-w1280.jpg, 82, Rafi Pitts, http://mubi.com/cast/rafi-pitts

CREATE TABLE `ratings_users` (
  user_id INTEGER REFERENCES lists_users(user_id),
  rating_date_utc TEXT,
  user_trialist INTEGER,
  user_subscriber INTEGER,
  user_avatar_image_url TEXT,
  user_cover_image_url TEXT,
  user_eligible_for_trial INTEGER,
  user_has_payment_method INTEGER
);
Sample rows from `ratings_users`:
41579158, 2017-06-10, 0, 0, https://assets.mubicdn.net/images/avatars/74283/images-w150.jpg?1523895155, None, 1, 0
68654088, 2012-10-02, 0, 0, https://assets.mubicdn.net/images/avatars/27714/images-w150.jpg?1523889463, None, 1, 1
84114365, 2010-12-25, 0, 0, https://assets.mubicdn.net/images/avatars/1808/images-w150.jpg?1523883471, None, 1, 0

CREATE TABLE `lists_users` (
  user_id INTEGER PRIMARY KEY REFERENCES lists(user_id),
  list_id INTEGER PRIMARY KEY REFERENCES lists(list_id),
  list_update_date_utc TEXT,
  list_creation_date_utc TEXT,
  user_trialist INTEGER,
  user_subscriber INTEGER,
  user_avatar_image_url TEXT,
  user_cover_image_url TEXT,
  user_eligible_for_trial TEXT,
  user_has_payment_method TEXT
);
Sample rows from `lists_users`:
85981819, 1969, 2019-11-26, 2009-12-18, 1, 1, https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214, None, 0, 1
85981819, 3946, 2020-05-01, 2010-01-30, 1, 1, https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214, None, 0, 1
85981819, 6683, 2020-04-12, 2010-03-31, 1, 1, https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214, None, 0, 1

CREATE TABLE `ratings` (
  movie_id INTEGER REFERENCES movies(movie_id),
  rating_id INTEGER REFERENCES ratings(rating_id),
  rating_url TEXT,
  rating_score INTEGER,
  rating_timestamp_utc TEXT,
  critic TEXT,
  critic_likes INTEGER,
  critic_comments INTEGER,
  user_id INTEGER REFERENCES ratings_users(user_id) REFERENCES lists_users(user_id),
  user_trialist INTEGER,
  user_subscriber INTEGER,
  user_eligible_for_trial INTEGER,
  user_has_payment_method INTEGER
);
Sample rows from `ratings`:
1066, 15610495, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/15610495, 3, 2017-06-10 12:38:33, None, 0, 0, 41579158, 0, 0, 1, 0
1066, 10704606, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/10704606, 2, 2014-08-15 23:42:31, None, 0, 0, 85981819, 1, 1, 0, 1
1066, 10177114, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/10177114, 2, 2014-01-30 13:21:57, None, 0, 0, 4208563, 0, 0, 1, 1

",lists,"list_title, user_id"
college_completion,"Among the public institutes in the state of Alabama, how many of them have over 30 students who graduated within 100 percent of normal/expected time in 2011?",SELECT COUNT(t1.chronname) FROM institution_details as t1 inner JOIN institution_grads as t2 ON t2.unitid = t1.unitid WHERE t1.state = 'Alabama' AND t1.control = 'Public' AND t2.year = 2011 AND t2.grad_100 > 30,"CREATE TABLE `institution_details` (
  unitid INTEGER,
  chronname TEXT,
  city TEXT,
  state TEXT,
  level TEXT,
  control TEXT,
  basic TEXT,
  hbcu TEXT,
  flagship TEXT,
  long_x REAL,
  lat_y REAL,
  site TEXT,
  student_count INTEGER,
  awards_per_value REAL,
  awards_per_state_value REAL,
  awards_per_natl_value REAL,
  exp_award_value INTEGER,
  exp_award_state_value INTEGER,
  exp_award_natl_value INTEGER,
  exp_award_percentile INTEGER,
  ft_pct REAL,
  fte_value INTEGER,
  fte_percentile INTEGER,
  med_sat_value TEXT,
  med_sat_percentile TEXT,
  aid_value INTEGER,
  aid_percentile INTEGER,
  endow_value TEXT,
  endow_percentile TEXT,
  grad_100_value REAL,
  grad_100_percentile INTEGER,
  grad_150_value REAL,
  grad_150_percentile INTEGER,
  pell_value REAL,
  pell_percentile INTEGER,
  retain_value REAL,
  retain_percentile INTEGER,
  ft_fac_value REAL,
  ft_fac_percentile INTEGER,
  vsa_year TEXT,
  vsa_grad_after4_first TEXT,
  vsa_grad_elsewhere_after4_first TEXT,
  vsa_enroll_after4_first TEXT,
  vsa_enroll_elsewhere_after4_first TEXT,
  vsa_grad_after6_first TEXT,
  vsa_grad_elsewhere_after6_first TEXT,
  vsa_enroll_after6_first TEXT,
  vsa_enroll_elsewhere_after6_first TEXT,
  vsa_grad_after4_transfer TEXT,
  vsa_grad_elsewhere_after4_transfer TEXT,
  vsa_enroll_after4_transfer TEXT,
  vsa_enroll_elsewhere_after4_transfer TEXT,
  vsa_grad_after6_transfer TEXT,
  vsa_grad_elsewhere_after6_transfer TEXT,
  vsa_enroll_after6_transfer TEXT,
  vsa_enroll_elsewhere_after6_transfer TEXT,
  similar TEXT,
  state_sector_ct INTEGER,
  carnegie_ct INTEGER,
  counted_pct TEXT,
  nicknames TEXT,
  cohort_size INTEGER
);
Sample rows from `institution_details`:
100654, Alabama A&M University, Normal, Alabama, 4-year, Public, Masters Colleges and Universities--larger programs, X, NULL, -86.568502, 34.783368, www.aamu.edu/, 4051, 14.2, 18.8, 21.5, 105331, 75743, 66436, 90, 93.8, 3906, 33, 823, 0, 7142, 72, NULL, NULL, 10.0, 15, 29.1, 14, 71.2, 98, 63.1, 17, 82.8, 89, 2010, 14.7, 2, 36.5, 16.1, 33, 5.3, 12.5, 14.6, 15.7, 1.5, 40.9, 17.2, 36.4, 5.6, 17.2, 11.1, 232937|100724|405997|113607|139533|144005|228501|101480|131876|144759|419509|176479|243197|228529|372222|228431|206695|139366|159993|224147, 13, 386, 99.7|07, NULL, 882
100663, University of Alabama at Birmingham, Birmingham, Alabama, 4-year, Public, Research Universities--very high research activity, NULL, NULL, -86.80917, 33.50223, www.uab.edu, 11502, 20.9, 18.8, 21.5, 136546, 75743, 66436, 97, 72.7, 10032, 67, 1146, 84, 6088, 50, 24136, 93, 29.4, 67, 53.5, 66, 35.1, 39, 80.2, 70, 92.4, 98, 2011, 22.3, 2.9, 34.2, 19.2, 42.6, 10.5, 7.9, 13.1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 196060|180461|201885|145600|209542|236939|126818|230764|104151|104179|157085|171100|153603|141574|155317|110714|137351|126562|243780|196088, 13, 106, 56.0|07, UAB, 1376
100690, Amridge University, Montgomery, Alabama, 4-year, Private not-for-profit, Baccalaureate Colleges--Arts & Sciences, NULL, NULL, -86.17401, 32.362609, www.amridgeuniversity.edu, 322, 29.9, 17.8, 22.5, 58414, 92268, 101725, 30, 62.7, 294, 12, NULL, NULL, 2540, 1, 302, 1, 0.0, 0, 66.7, 72, 68.4, 91, 37.5, 2, 67.2, 71, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 217925|441511|205124|247825|197647|221856|135364|117575|164207|193070|199315|166054|367893|183804|439701|193052|197744|193247|137777|176789, 16, 252, 100.0|07, NULL, 3

CREATE TABLE `institution_grads` (
  unitid INTEGER REFERENCES institution_details(unitid),
  year INTEGER,
  gender TEXT,
  race TEXT,
  cohort TEXT,
  grad_cohort TEXT,
  grad_100 TEXT,
  grad_150 TEXT,
  grad_100_rate TEXT,
  grad_150_rate TEXT
);
Sample rows from `institution_grads`:
100760, 2011, B, X, 2y all, 446, 73, 105, 16.4, 23.5
100760, 2011, M, X, 2y all, 185, NULL, 40, NULL, 21.6
100760, 2011, F, X, 2y all, 261, NULL, 65, NULL, 24.9

","CREATE TABLE `institution_details` (
  unitid INTEGER,
  chronname TEXT,
  city TEXT,
  state TEXT,
  level TEXT,
  control TEXT,
  basic TEXT,
  hbcu TEXT,
  flagship TEXT,
  long_x REAL,
  lat_y REAL,
  site TEXT,
  student_count INTEGER,
  awards_per_value REAL,
  awards_per_state_value REAL,
  awards_per_natl_value REAL,
  exp_award_value INTEGER,
  exp_award_state_value INTEGER,
  exp_award_natl_value INTEGER,
  exp_award_percentile INTEGER,
  ft_pct REAL,
  fte_value INTEGER,
  fte_percentile INTEGER,
  med_sat_value TEXT,
  med_sat_percentile TEXT,
  aid_value INTEGER,
  aid_percentile INTEGER,
  endow_value TEXT,
  endow_percentile TEXT,
  grad_100_value REAL,
  grad_100_percentile INTEGER,
  grad_150_value REAL,
  grad_150_percentile INTEGER,
  pell_value REAL,
  pell_percentile INTEGER,
  retain_value REAL,
  retain_percentile INTEGER,
  ft_fac_value REAL,
  ft_fac_percentile INTEGER,
  vsa_year TEXT,
  vsa_grad_after4_first TEXT,
  vsa_grad_elsewhere_after4_first TEXT,
  vsa_enroll_after4_first TEXT,
  vsa_enroll_elsewhere_after4_first TEXT,
  vsa_grad_after6_first TEXT,
  vsa_grad_elsewhere_after6_first TEXT,
  vsa_enroll_after6_first TEXT,
  vsa_enroll_elsewhere_after6_first TEXT,
  vsa_grad_after4_transfer TEXT,
  vsa_grad_elsewhere_after4_transfer TEXT,
  vsa_enroll_after4_transfer TEXT,
  vsa_enroll_elsewhere_after4_transfer TEXT,
  vsa_grad_after6_transfer TEXT,
  vsa_grad_elsewhere_after6_transfer TEXT,
  vsa_enroll_after6_transfer TEXT,
  vsa_enroll_elsewhere_after6_transfer TEXT,
  similar TEXT,
  state_sector_ct INTEGER,
  carnegie_ct INTEGER,
  counted_pct TEXT,
  nicknames TEXT,
  cohort_size INTEGER
);
Sample rows from `institution_details`:
100654, Alabama A&M University, Normal, Alabama, 4-year, Public, Masters Colleges and Universities--larger programs, X, NULL, -86.568502, 34.783368, www.aamu.edu/, 4051, 14.2, 18.8, 21.5, 105331, 75743, 66436, 90, 93.8, 3906, 33, 823, 0, 7142, 72, NULL, NULL, 10.0, 15, 29.1, 14, 71.2, 98, 63.1, 17, 82.8, 89, 2010, 14.7, 2, 36.5, 16.1, 33, 5.3, 12.5, 14.6, 15.7, 1.5, 40.9, 17.2, 36.4, 5.6, 17.2, 11.1, 232937|100724|405997|113607|139533|144005|228501|101480|131876|144759|419509|176479|243197|228529|372222|228431|206695|139366|159993|224147, 13, 386, 99.7|07, NULL, 882
100663, University of Alabama at Birmingham, Birmingham, Alabama, 4-year, Public, Research Universities--very high research activity, NULL, NULL, -86.80917, 33.50223, www.uab.edu, 11502, 20.9, 18.8, 21.5, 136546, 75743, 66436, 97, 72.7, 10032, 67, 1146, 84, 6088, 50, 24136, 93, 29.4, 67, 53.5, 66, 35.1, 39, 80.2, 70, 92.4, 98, 2011, 22.3, 2.9, 34.2, 19.2, 42.6, 10.5, 7.9, 13.1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 196060|180461|201885|145600|209542|236939|126818|230764|104151|104179|157085|171100|153603|141574|155317|110714|137351|126562|243780|196088, 13, 106, 56.0|07, UAB, 1376
100690, Amridge University, Montgomery, Alabama, 4-year, Private not-for-profit, Baccalaureate Colleges--Arts & Sciences, NULL, NULL, -86.17401, 32.362609, www.amridgeuniversity.edu, 322, 29.9, 17.8, 22.5, 58414, 92268, 101725, 30, 62.7, 294, 12, NULL, NULL, 2540, 1, 302, 1, 0.0, 0, 66.7, 72, 68.4, 91, 37.5, 2, 67.2, 71, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 217925|441511|205124|247825|197647|221856|135364|117575|164207|193070|199315|166054|367893|183804|439701|193052|197744|193247|137777|176789, 16, 252, 100.0|07, NULL, 3

CREATE TABLE `institution_grads` (
  unitid INTEGER REFERENCES institution_details(unitid),
  year INTEGER,
  gender TEXT,
  race TEXT,
  cohort TEXT,
  grad_cohort TEXT,
  grad_100 TEXT,
  grad_150 TEXT,
  grad_100_rate TEXT,
  grad_150_rate TEXT
);
Sample rows from `institution_grads`:
100760, 2011, B, X, 2y all, 446, 73, 105, 16.4, 23.5
100760, 2011, M, X, 2y all, 185, NULL, 40, NULL, 21.6
100760, 2011, F, X, 2y all, 261, NULL, 65, NULL, 24.9

CREATE TABLE `state_sector_grads` (
  stateid INTEGER REFERENCES state_sector_details(stateid),
  state TEXT REFERENCES institution_details(state),
  state_abbr TEXT,
  control TEXT,
  level TEXT,
  year INTEGER,
  gender TEXT,
  race TEXT,
  cohort TEXT,
  grad_cohort TEXT,
  grad_100 TEXT,
  grad_150 TEXT,
  grad_100_rate TEXT,
  grad_150_rate TEXT,
  grad_cohort_ct INTEGER
);
Sample rows from `state_sector_grads`:
1, Alabama, AL, Private for-profit, 4-year, 2011, B, A, 4y bach, 0, 0, 0, NULL, NULL, 9
1, Alabama, AL, Private for-profit, 4-year, 2011, B, Ai, 4y bach, 1, 0, 0, 0, 0, 9
1, Alabama, AL, Private for-profit, 4-year, 2011, B, B, 4y bach, 51, 2, 3, 3.9, 5.9, 9

CREATE TABLE `state_sector_details` (
  stateid INTEGER PRIMARY KEY,
  state TEXT REFERENCES institution_details(state),
  state_post TEXT,
  level TEXT PRIMARY KEY,
  control TEXT PRIMARY KEY,
  schools_count INTEGER,
  counted_pct TEXT,
  awards_per_state_value TEXT,
  awards_per_natl_value REAL,
  exp_award_state_value TEXT,
  exp_award_natl_value INTEGER,
  state_appr_value TEXT,
  state_appr_rank TEXT,
  grad_rate_rank TEXT,
  awards_per_rank TEXT
);
Sample rows from `state_sector_details`:
0, United States, U.S., 4-year, Public, 632, NULL, NULL, 21.5, NULL, 66436, NULL, NULL, 23, NULL
0, United States, U.S., 4-year, Private not-for-profit, 1180, NULL, NULL, 22.5, NULL, 101725, NULL, NULL, 18, NULL
0, United States, U.S., 4-year, Private for-profit, 527, NULL, NULL, 24.6, NULL, 38763, NULL, NULL, 8, NULL

","institution_details, institution_grads","institution_details.chronname, institution_grads.unitid, institution_details.unitid, institution_details.state, institution_details.control, institution_grads.year, institution_grads.grad_100"
retails,How many customers are in the furniture segment?,SELECT COUNT(c_custkey) FROM customer WHERE c_mktsegment = 'FURNITURE',"CREATE TABLE `customer` (
  c_custkey INTEGER,
  c_mktsegment TEXT,
  c_nationkey INTEGER REFERENCES nation(n_nationkey),
  c_name TEXT,
  c_address TEXT,
  c_phone TEXT,
  c_acctbal REAL,
  c_comment TEXT
);
Sample rows from `customer`:
1, BUILDING, 8, Customer#000000001, KwX3hMHjZ6, 937-241-3198, 3560.03, ironic excuses detect slyly silent requests. requests according to the exc
2, MACHINERY, 16, Customer#000000002, ioUn,eqTTXOdo, 906-965-7556, 7550.21, final express accounts mold slyly. ironic accounts cajole! quickly express a
3, FURNITURE, 11, Customer#000000003, YddJqmIdouNT9Yj, 328-750-7603, -926.96, carefully express foxes sleep carefully. pending platelets sleep thinly for t

","CREATE TABLE `customer` (
  c_custkey INTEGER,
  c_mktsegment TEXT,
  c_nationkey INTEGER REFERENCES nation(n_nationkey),
  c_name TEXT,
  c_address TEXT,
  c_phone TEXT,
  c_acctbal REAL,
  c_comment TEXT
);
Sample rows from `customer`:
1, BUILDING, 8, Customer#000000001, KwX3hMHjZ6, 937-241-3198, 3560.03, ironic excuses detect slyly silent requests. requests according to the exc
2, MACHINERY, 16, Customer#000000002, ioUn,eqTTXOdo, 906-965-7556, 7550.21, final express accounts mold slyly. ironic accounts cajole! quickly express a
3, FURNITURE, 11, Customer#000000003, YddJqmIdouNT9Yj, 328-750-7603, -926.96, carefully express foxes sleep carefully. pending platelets sleep thinly for t

CREATE TABLE `lineitem` (
  l_shipdate DATE,
  l_orderkey INTEGER PRIMARY KEY REFERENCES orders(o_orderkey),
  l_discount REAL,
  l_extendedprice REAL,
  l_suppkey INTEGER REFERENCES partsupp(ps_suppkey),
  l_quantity INTEGER,
  l_returnflag TEXT,
  l_partkey INTEGER REFERENCES partsupp(ps_partkey),
  l_linestatus TEXT,
  l_tax REAL,
  l_commitdate DATE,
  l_receiptdate DATE,
  l_shipmode TEXT,
  l_linenumber INTEGER PRIMARY KEY,
  l_shipinstruct TEXT,
  l_comment TEXT
);
Sample rows from `lineitem`:
1995-08-16, 1, 0.1, 58303.08, 6296, 33, N, 98768, O, 0.06, 1995-07-12, 1995-09-14, RAIL, 1, NONE, carefully bo
1995-08-13, 1, 0.09, 16947.7, 8776, 10, N, 23771, O, 0.08, 1995-07-09, 1995-08-27, TRUCK, 2, TAKE BACK RETURN, blithely regular pac
1995-06-17, 1, 0.1, 63642.9, 3859, 34, N, 113858, O, 0.08, 1995-05-22, 1995-06-30, SHIP, 3, COLLECT COD, ironic accounts sleep furiously silen

CREATE TABLE `nation` (
  n_nationkey INTEGER,
  n_name TEXT,
  n_regionkey INTEGER REFERENCES region(r_regionkey),
  n_comment TEXT
);
Sample rows from `nation`:
0, ALGERIA, 0, slyly express pinto beans cajole idly. deposits use blithely unusual packages? fluffily final accounts x-r
1, ARGENTINA, 1, instructions detect blithely stealthily pending packages
2, BRAZIL, 1, blithely unusual deposits are quickly--

CREATE TABLE `orders` (
  o_orderdate DATE,
  o_orderkey INTEGER,
  o_custkey INTEGER REFERENCES customer(c_custkey),
  o_orderpriority TEXT,
  o_shippriority INTEGER,
  o_clerk TEXT,
  o_orderstatus TEXT,
  o_totalprice REAL,
  o_comment TEXT
);
Sample rows from `orders`:
1995-04-19, 1, 73100, 4-NOT SPECIFIED, 0, Clerk#000000916, P, 203198.56, final packages sleep blithely packa
1996-11-04, 2, 92861, 1-URGENT, 0, Clerk#000000373, O, 317719.99, final excuses about the ironic even deposits detect express request
1992-02-15, 3, 44875, 1-URGENT, 0, Clerk#000000485, F, 146674.98, final final deposits cajole foxes. blithely pendin

CREATE TABLE `part` (
  p_partkey INTEGER,
  p_type TEXT,
  p_size INTEGER,
  p_brand TEXT,
  p_name TEXT,
  p_container TEXT,
  p_mfgr TEXT,
  p_retailprice REAL,
  p_comment TEXT
);
Sample rows from `part`:
1, LARGE PLATED TIN, 31, Brand#43, burlywood plum powder puff mint, LG BAG, Manufacturer#4, 901.0, blithely busy reque
2, LARGE POLISHED STEEL, 4, Brand#55, hot spring dodger dim light, LG CASE, Manufacturer#5, 902.0, even ironic requests s
3, STANDARD PLATED COPPER, 30, Brand#53, dark slate grey steel misty, WRAP CASE, Manufacturer#5, 903.0, slyly ironic fox

CREATE TABLE `partsupp` (
  ps_partkey INTEGER PRIMARY KEY REFERENCES part(p_partkey),
  ps_suppkey INTEGER PRIMARY KEY REFERENCES supplier(s_suppkey),
  ps_supplycost REAL,
  ps_availqty INTEGER,
  ps_comment TEXT
);
Sample rows from `partsupp`:
1, 2, 400.75, 1111, carefully ironic deposits use against the carefully unusual accounts. slyly silent platelets nag quickly even
1, 2502, 702.61, 3999, slyly regular accounts serve carefully. asymptotes after the slyly even instructions cajole quickly ironic requests. pending dugouts about the slyly 
1, 5002, 383.95, 7411, carefully special ideas are slyly. slyly ironic epitaphs use pending pending foxes. furiously express pinto beans lose quiet even requests: special final packages ar

CREATE TABLE `region` (
  r_regionkey INTEGER,
  r_name TEXT,
  r_comment TEXT
);
Sample rows from `region`:
0, AFRICA, asymptotes sublate after the r
1, AMERICA, requests affix quickly final tithes. blithely even packages above the a
2, ASIA, accounts cajole carefully according to the carefully exp

CREATE TABLE `supplier` (
  s_suppkey INTEGER,
  s_nationkey INTEGER REFERENCES nation(n_nationkey),
  s_comment TEXT,
  s_name TEXT,
  s_address TEXT,
  s_phone TEXT,
  s_acctbal REAL
);
Sample rows from `supplier`:
1, 13, blithely final pearls are. instructions thra, Supplier#000000001, ,wWs4pnykQOFl8mgVCU8EZMXqZs1w, 800-807-9579, 3082.86
2, 5, requests integrate fluffily. fluffily ironic deposits wake. bold, Supplier#000000002, WkXT6MSAJrp4qWq3W9N, 348-617-6055, 3009.73
3, 22, carefully express ideas shall have to unwin, Supplier#000000003, KjUqa42JEHaRDVQTHV6Yq2h, 471-986-9888, 9159.78

",customer,"c_custkey, c_mktsegment"
authors,Mention the titile of paper writen by Joe Lograsso.,SELECT t1.title FROM paper as t1 inner JOIN paperAuthor as t2 ON t1.id = t2.paperid WHERE t2.name = 'Joe Lograsso',"CREATE TABLE `paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `paperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `paperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

","CREATE TABLE `Author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `Author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

CREATE TABLE `Conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

CREATE TABLE `Journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `Paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `Paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `PaperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `PaperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

","paper, paperAuthor","paper.title, paper.id, paperAuthor.paperid, paperAuthor.name"
car_retails,"List the product code of the top five motorcycles, by descending order, the number of quantity in stock.","SELECT productcode, quantityinstock FROM products WHERE productline = 'Motorcycles' ORDER BY quantityinstock DESC LIMIT 5","CREATE TABLE `products` (
  productCode TEXT PRIMARY KEY,
  productName TEXT,
  productLine TEXT REFERENCES productlines(productLine),
  productScale TEXT,
  productVendor TEXT,
  productDescription TEXT,
  quantityInStock INTEGER,
  buyPrice REAL,
  MSRP REAL
);
Sample rows from `products`:
S10_1678, 1969 Harley Davidson Ultimate Chopper, Motorcycles, 1:10, Min Lin Diecast, This replica features working kickstand, front suspension, gear-shift lever, footbrake lever, drive chain, wheels and steering. All parts are particularly delicate due to their precise scale and require special care and attention., 7933, 48.81, 95.7
S10_1949, 1952 Alpine Renault 1300, Classic Cars, 1:10, Classic Metal Creations, Turnable front wheels; steering function; detailed interior; detailed engine; opening hood; opening trunk; opening doors; and detailed chassis., 7305, 98.58, 214.3
S10_2016, 1996 Moto Guzzi 1100i, Motorcycles, 1:10, Highway 66 Mini Classics, Official Moto Guzzi logos and insignias, saddle bags located on side of motorcycle, detailed engine, working steering, working suspension, two leather seats, luggage rack, dual exhaust pipes, small saddle bag located on handle bars, two-tone paint with chrome accents, superior die-cast detail , rotating wheels , working kick stand, diecast metal with plastic parts and baked enamel finish., 6625, 68.99, 118.94

","CREATE TABLE `offices` (
  officeCode TEXT PRIMARY KEY,
  city TEXT,
  phone TEXT,
  addressLine1 TEXT,
  addressLine2 TEXT,
  state TEXT,
  country TEXT,
  postalCode TEXT,
  territory TEXT
);
Sample rows from `offices`:
1, San Francisco, +1 650 219 4782, 100 Market Street, Suite 300, CA, USA, 94080, NA
2, Boston, +1 215 837 0825, 1550 Court Place, Suite 102, MA, USA, 02107, NA
3, NYC, +1 212 555 3000, 523 East 53rd Street, apt. 5A, NY, USA, 10022, NA

CREATE TABLE `employees` (
  employeeNumber INTEGER,
  lastName TEXT,
  firstName TEXT,
  extension TEXT,
  email TEXT,
  officeCode TEXT REFERENCES offices(officeCode),
  reportsTo INTEGER REFERENCES employees(employeeNumber),
  jobTitle TEXT
);
Sample rows from `employees`:
1002, Murphy, Diane, x5800, dmurphy@classicmodelcars.com, 1, None, President
1056, Patterson, Mary, x4611, mpatterso@classicmodelcars.com, 1, 1002, VP Sales
1076, Firrelli, Jeff, x9273, jfirrelli@classicmodelcars.com, 1, 1002, VP Marketing

CREATE TABLE `customers` (
  customerNumber INTEGER,
  customerName TEXT,
  contactLastName TEXT,
  contactFirstName TEXT,
  phone TEXT,
  addressLine1 TEXT,
  addressLine2 TEXT,
  city TEXT,
  state TEXT,
  postalCode TEXT,
  country TEXT,
  salesRepEmployeeNumber INTEGER REFERENCES employees(employeeNumber),
  creditLimit REAL
);
Sample rows from `customers`:
103, Atelier graphique, Schmitt, Carine , 40.32.2555, 54, rue Royale, None, Nantes, None, 44000, France, 1370, 21000.0
112, Signal Gift Stores, King, Jean, 7025551838, 8489 Strong St., None, Las Vegas, NV, 83030, USA, 1166, 71800.0
114, Australian Collectors, Co., Ferguson, Peter, 03 9520 4555, 636 St Kilda Road, Level 3, Melbourne, Victoria, 3004, Australia, 1611, 117300.0

CREATE TABLE `orders` (
  orderNumber INTEGER,
  orderDate DATE,
  requiredDate DATE,
  shippedDate DATE,
  status TEXT,
  comments TEXT,
  customerNumber INTEGER REFERENCES customers(customerNumber)
);
Sample rows from `orders`:
10100, 2003-01-06, 2003-01-13, 2003-01-10, Shipped, None, 363
10101, 2003-01-09, 2003-01-18, 2003-01-11, Shipped, Check on availability., 128
10102, 2003-01-10, 2003-01-18, 2003-01-14, Shipped, None, 181

CREATE TABLE `payments` (
  customerNumber INTEGER PRIMARY KEY REFERENCES customers(customerNumber),
  checkNumber TEXT PRIMARY KEY,
  paymentDate DATE,
  amount REAL
);
Sample rows from `payments`:
103, HQ336336, 2004-10-19, 6066.78
103, JM555205, 2003-06-05, 14571.44
103, OM314933, 2004-12-18, 1676.14

CREATE TABLE `productlines` (
  productLine TEXT PRIMARY KEY,
  textDescription TEXT,
  htmlDescription TEXT,
  image BLOB
);
Sample rows from `productlines`:
Classic Cars, Attention car enthusiasts: Make your wildest car ownership dreams come true. Whether you are looking for classic muscle cars, dream sports cars or movie-inspired miniatures, you will find great choices in this category. These replicas feature superb atten, None, None
Motorcycles, Our motorcycles are state of the art replicas of classic as well as contemporary motorcycle legends such as Harley Davidson, Ducati and Vespa. Models contain stunning details such as official logos, rotating wheels, working kickstand, front suspension, ge, None, None
Planes, Unique, diecast airplane and helicopter replicas suitable for collections, as well as home, office or classroom decorations. Models contain stunning details such as official logos and insignias, rotating jet engines and propellers, retractable wheels, and, None, None

CREATE TABLE `products` (
  productCode TEXT PRIMARY KEY,
  productName TEXT,
  productLine TEXT REFERENCES productlines(productLine),
  productScale TEXT,
  productVendor TEXT,
  productDescription TEXT,
  quantityInStock INTEGER,
  buyPrice REAL,
  MSRP REAL
);
Sample rows from `products`:
S10_1678, 1969 Harley Davidson Ultimate Chopper, Motorcycles, 1:10, Min Lin Diecast, This replica features working kickstand, front suspension, gear-shift lever, footbrake lever, drive chain, wheels and steering. All parts are particularly delicate due to their precise scale and require special care and attention., 7933, 48.81, 95.7
S10_1949, 1952 Alpine Renault 1300, Classic Cars, 1:10, Classic Metal Creations, Turnable front wheels; steering function; detailed interior; detailed engine; opening hood; opening trunk; opening doors; and detailed chassis., 7305, 98.58, 214.3
S10_2016, 1996 Moto Guzzi 1100i, Motorcycles, 1:10, Highway 66 Mini Classics, Official Moto Guzzi logos and insignias, saddle bags located on side of motorcycle, detailed engine, working steering, working suspension, two leather seats, luggage rack, dual exhaust pipes, small saddle bag located on handle bars, two-tone paint with chrome accents, superior die-cast detail , rotating wheels , working kick stand, diecast metal with plastic parts and baked enamel finish., 6625, 68.99, 118.94

CREATE TABLE `orderdetails` (
  orderNumber INTEGER PRIMARY KEY REFERENCES orders(None),
  productCode TEXT PRIMARY KEY REFERENCES products(None),
  quantityOrdered INTEGER,
  priceEach REAL,
  orderLineNumber INTEGER
);
Sample rows from `orderdetails`:
10100, S18_1749, 30, 136.0, 3
10100, S18_2248, 50, 55.09, 2
10100, S18_4409, 22, 75.46, 4

",products,"productcode, quantityinstock, productline"
authors,What are the conference name and journal name of paper written by Shueh-Lin Yau? List down the name of co-authors and provide the title of that paper.,"SELECT t1.conferenceid, t1.journalid, t2.name, t1.title FROM paper as t1 inner JOIN paperAuthor as t2 ON t1.id = t2.paperid inner JOIN conference as t3 ON t1.conferenceid = t3.id inner JOIN journal as t4 ON t1.journalid = t4.id WHERE t2.name = 'Shueh-Lin Yau'","CREATE TABLE `paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `paperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `paperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

CREATE TABLE `conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

CREATE TABLE `journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

","CREATE TABLE `Author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `Author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

CREATE TABLE `Conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

CREATE TABLE `Journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `Paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `Paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `PaperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `PaperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

","paper, paperAuthor, conference, journal","paper.conferenceid, paper.journalid, paperAuthor.name, paper.title, paper.id, paperAuthor.paperid, conference.id, journal.id"
cs_semester,How many students took the hardest course?,SELECT COUNT(t1.student_id) FROM registration as t1 inner JOIN course as t2 ON t1.course_id = t2.course_id WHERE t2.diff = 5,"CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

","CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

CREATE TABLE `prof` (
  prof_id INTEGER,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  popularity INTEGER,
  teachingability INTEGER,
  graduate_from TEXT
);
Sample rows from `prof`:
1, Male, Nathaniel, Pigford, npigford0@hku.hk, 3, 5, University of Washington
2, Male, Zhihua, Zhou, zzhihua@hku.hk, 2, 1, Beijing Polytechnic University
3, Male, Ogdon, Zywicki, ozywicki2@hku.hk, 2, 2, University of Boston

CREATE TABLE `RA` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `RA`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

","registration, course","registration.student_id, registration.course_id, course.course_id, course.diff"
computer_student,Is the teacher who teaches course no.9 a faculty member?,SELECT t2.hasposition FROM taughtby as t1 inner JOIN person as t2 ON t1.p_id = t2.p_id WHERE t1.course_id = 9,"CREATE TABLE `taughtby` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `taughtby`:
0, 40
1, 40
2, 180

CREATE TABLE `person` (
  p_id INTEGER,
  professor INTEGER,
  student INTEGER,
  hasPosition TEXT,
  inPhase TEXT,
  yearsInProgram TEXT
);
Sample rows from `person`:
3, 0, 1, 0, 0, 0
4, 0, 1, 0, 0, 0
5, 1, 0, Faculty, 0, 0

","CREATE TABLE `course` (
  course_id INTEGER,
  courseLevel TEXT
);
Sample rows from `course`:
0, Level_500
1, Level_500
2, Level_500

CREATE TABLE `person` (
  p_id INTEGER,
  professor INTEGER,
  student INTEGER,
  hasPosition TEXT,
  inPhase TEXT,
  yearsInProgram TEXT
);
Sample rows from `person`:
3, 0, 1, 0, 0, 0
4, 0, 1, 0, 0, 0
5, 1, 0, Faculty, 0, 0

CREATE TABLE `advisedBy` (
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id),
  p_id_dummy INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `advisedBy`:
96, 5
118, 5
183, 5

CREATE TABLE `taughtBy` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `taughtBy`:
0, 40
1, 40
2, 180

","taughtby, person","person.hasposition, taughtby.p_id, person.p_id, taughtby.course_id"
movies_4,List down the movies produced by Lucasfilm.,SELECT t3.title FROM production_company as t1 inner JOIN movie_company as t2 ON t1.company_id = t2.company_id inner JOIN movie as t3 ON t2.movie_id = t3.movie_id WHERE t1.company_name = 'Lucasfilm',"CREATE TABLE `production_company` (
  company_id INTEGER,
  company_name TEXT
);
Sample rows from `production_company`:
1, Lucasfilm
2, Walt Disney Pictures
3, Pixar Animation Studios

CREATE TABLE `movie_company` (
  movie_id INTEGER REFERENCES movie(None),
  company_id INTEGER REFERENCES production_company(None)
);
Sample rows from `movie_company`:
5, 14
5, 59
11, 1

CREATE TABLE `movie` (
  movie_id INTEGER,
  title TEXT,
  budget INTEGER,
  homepage TEXT,
  overview TEXT,
  popularity REAL,
  release_date DATE,
  revenue INTEGER,
  runtime INTEGER,
  movie_status TEXT,
  tagline TEXT,
  vote_average REAL,
  vote_count INTEGER
);
Sample rows from `movie`:
5, Four Rooms, 4000000, , It's Ted the Bellhop's first night on the job...and the hotel's very unusual guests are about to place him in some outrageous predicaments. It seems that this evening's room service is serving up one unbelievable happening after another., 22.87623, 1995-12-09, 4300000, 98, Released, Twelve outrageous guests. Four scandalous requests. And one lone bellhop, in his first day on the job, who's in for the wildest New year's Eve of his life., 6.5, 530
11, Star Wars, 11000000, http://www.starwars.com/films/star-wars-episode-iv-a-new-hope, Princess Leia is captured and held hostage by the evil Imperial forces in their effort to take over the galactic Empire. Venturesome Luke Skywalker and dashing captain Han Solo team together with the loveable robot duo R2-D2 and C-3PO to rescue the beauti, 126.393695, 1977-05-25, 775398007, 121, Released, A long time ago in a galaxy far, far away..., 8.1, 6624
12, Finding Nemo, 94000000, http://movies.disney.com/finding-nemo, Nemo, an adventurous young clownfish, is unexpectedly taken from his Great Barrier Reef home to a dentist's office aquarium. It's up to his worrisome father Marlin and a friendly but forgetful fish Dory to bring Nemo home -- meeting vegetarian sharks, sur, 85.688789, 2003-05-30, 940335536, 100, Released, There are 3.7 trillion fish in the ocean, they're looking for one., 7.6, 6122

","CREATE TABLE `country` (
  country_id INTEGER,
  country_iso_code TEXT,
  country_name TEXT
);
Sample rows from `country`:
128, AE, United Arab Emirates
129, AF, Afghanistan
130, AO, Angola

CREATE TABLE `department` (
  department_id INTEGER,
  department_name TEXT
);
Sample rows from `department`:
1, Camera
2, Directing
3, Production

CREATE TABLE `gender` (
  gender_id INTEGER,
  gender TEXT
);
Sample rows from `gender`:
0, Unspecified
1, Female
2, Male

CREATE TABLE `genre` (
  genre_id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
12, Adventure
14, Fantasy
16, Animation

CREATE TABLE `keyword` (
  keyword_id INTEGER,
  keyword_name TEXT
);
Sample rows from `keyword`:
30, individual
65, holiday
74, germany

CREATE TABLE `language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `language`:
24574, en, English
24575, sv, svenska
24576, de, Deutsch

CREATE TABLE `language_role` (
  role_id INTEGER,
  language_role TEXT
);
Sample rows from `language_role`:
1, Original
2, Spoken

CREATE TABLE `movie` (
  movie_id INTEGER,
  title TEXT,
  budget INTEGER,
  homepage TEXT,
  overview TEXT,
  popularity REAL,
  release_date DATE,
  revenue INTEGER,
  runtime INTEGER,
  movie_status TEXT,
  tagline TEXT,
  vote_average REAL,
  vote_count INTEGER
);
Sample rows from `movie`:
5, Four Rooms, 4000000, , It's Ted the Bellhop's first night on the job...and the hotel's very unusual guests are about to place him in some outrageous predicaments. It seems that this evening's room service is serving up one unbelievable happening after another., 22.87623, 1995-12-09, 4300000, 98, Released, Twelve outrageous guests. Four scandalous requests. And one lone bellhop, in his first day on the job, who's in for the wildest New year's Eve of his life., 6.5, 530
11, Star Wars, 11000000, http://www.starwars.com/films/star-wars-episode-iv-a-new-hope, Princess Leia is captured and held hostage by the evil Imperial forces in their effort to take over the galactic Empire. Venturesome Luke Skywalker and dashing captain Han Solo team together with the loveable robot duo R2-D2 and C-3PO to rescue the beauti, 126.393695, 1977-05-25, 775398007, 121, Released, A long time ago in a galaxy far, far away..., 8.1, 6624
12, Finding Nemo, 94000000, http://movies.disney.com/finding-nemo, Nemo, an adventurous young clownfish, is unexpectedly taken from his Great Barrier Reef home to a dentist's office aquarium. It's up to his worrisome father Marlin and a friendly but forgetful fish Dory to bring Nemo home -- meeting vegetarian sharks, sur, 85.688789, 2003-05-30, 940335536, 100, Released, There are 3.7 trillion fish in the ocean, they're looking for one., 7.6, 6122

CREATE TABLE `movie_genres` (
  movie_id INTEGER REFERENCES movie(movie_id),
  genre_id INTEGER REFERENCES genre(genre_id)
);
Sample rows from `movie_genres`:
5, 35
5, 80
11, 12

CREATE TABLE `movie_languages` (
  movie_id INTEGER REFERENCES movie(movie_id),
  language_id INTEGER REFERENCES language(language_id),
  language_role_id INTEGER REFERENCES language_role(role_id)
);
Sample rows from `movie_languages`:
5, 24574, 2
11, 24574, 2
12, 24574, 2

CREATE TABLE `person` (
  person_id INTEGER,
  person_name TEXT
);
Sample rows from `person`:
1, George Lucas
2, Mark Hamill
3, Harrison Ford

CREATE TABLE `movie_crew` (
  movie_id INTEGER REFERENCES movie(movie_id),
  person_id INTEGER REFERENCES person(person_id),
  department_id INTEGER REFERENCES department(department_id),
  job TEXT
);
Sample rows from `movie_crew`:
285, 120, 1, Director of Photography
285, 1704, 2, Director
285, 770, 3, Producer

CREATE TABLE `production_company` (
  company_id INTEGER,
  company_name TEXT
);
Sample rows from `production_company`:
1, Lucasfilm
2, Walt Disney Pictures
3, Pixar Animation Studios

CREATE TABLE `production_country` (
  movie_id INTEGER REFERENCES movie(movie_id),
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `production_country`:
5, 214
11, 214
12, 214

CREATE TABLE `movie_cast` (
  movie_id INTEGER REFERENCES movie(movie_id),
  person_id INTEGER REFERENCES person(person_id),
  character_name TEXT,
  gender_id INTEGER REFERENCES gender(gender_id),
  cast_order INTEGER
);
Sample rows from `movie_cast`:
285, 85, Captain Jack Sparrow, 2, 0
285, 114, Will Turner, 2, 1
285, 116, Elizabeth Swann, 1, 2

CREATE TABLE `movie_keywords` (
  movie_id INTEGER REFERENCES movie(None),
  keyword_id INTEGER REFERENCES keyword(None)
);
Sample rows from `movie_keywords`:
5, 612
5, 613
5, 616

CREATE TABLE `movie_company` (
  movie_id INTEGER REFERENCES movie(None),
  company_id INTEGER REFERENCES production_company(None)
);
Sample rows from `movie_company`:
5, 14
5, 59
11, 1

","production_company, movie_company, movie","movie.title, production_company.company_id, movie_company.company_id, movie_company.movie_id, movie.movie_id, production_company.company_name"
legislator,What type of political party Sherrod Brown has in 2005?,SELECT t1.party FROM `current-terms` as t1 inner JOIN current as t2 ON t2.bioguide_id = t1.bioguide WHERE t2.first_name = 'Sherrod' AND t2.last_name = 'Brown' AND t1.start LIKE '%2005%',"CREATE TABLE `current-terms` (
  address TEXT,
  bioguide TEXT PRIMARY KEY REFERENCES current(bioguide_id),
  caucus TEXT,
  chamber TEXT,
  class REAL,
  contact_form TEXT,
  district REAL,
  end TEXT PRIMARY KEY,
  fax TEXT,
  last TEXT,
  name TEXT,
  office TEXT,
  party TEXT,
  party_affiliations TEXT,
  phone TEXT,
  relation TEXT,
  rss_url TEXT,
  start TEXT,
  state TEXT,
  state_rank TEXT,
  title TEXT,
  type TEXT,
  url TEXT
);
Sample rows from `current-terms`:
None, B000944, None, None, None, None, 13.0, 1995-01-03, None, None, None, None, Democrat, None, None, None, None, 1993-01-05, OH, None, None, rep, None
None, B000944, None, None, None, None, 13.0, 1997-01-03, None, None, None, None, Democrat, None, None, None, None, 1995-01-04, OH, None, None, rep, None
None, B000944, None, None, None, None, 13.0, 1999-01-03, None, None, None, None, Democrat, None, None, None, None, 1997-01-07, OH, None, None, rep, None

CREATE TABLE `current` (
  ballotpedia_id TEXT,
  bioguide_id TEXT PRIMARY KEY,
  birthday_bio DATE,
  cspan_id REAL PRIMARY KEY,
  fec_id TEXT,
  first_name TEXT,
  gender_bio TEXT,
  google_entity_id_id TEXT,
  govtrack_id INTEGER,
  house_history_id REAL,
  icpsr_id REAL,
  last_name TEXT,
  lis_id TEXT,
  maplight_id REAL,
  middle_name TEXT,
  nickname_name TEXT,
  official_full_name TEXT,
  opensecrets_id TEXT,
  religion_bio TEXT,
  suffix_name TEXT,
  thomas_id INTEGER,
  votesmart_id REAL,
  wikidata_id TEXT,
  wikipedia_id TEXT
);
Sample rows from `current`:
Sherrod Brown, B000944, 1952-11-09, 5051.0, ['H2OH13033', 'S6OH00163'], Sherrod, M, kg:/m/034s80, 400050, 9996.0, 29389.0, Brown, S307, 168.0, None, None, Sherrod Brown, N00003535, Lutheran, None, 136, 27018.0, Q381880, Sherrod Brown
Maria Cantwell, C000127, 1958-10-13, 26137.0, ['S8WA00194', 'H2WA01054'], Maria, F, kg:/m/01x68t, 300018, 10608.0, 39310.0, Cantwell, S275, 544.0, None, None, Maria Cantwell, N00007836, Roman Catholic, None, 172, 27122.0, Q22250, Maria Cantwell
Ben Cardin, C000141, 1943-10-05, 4004.0, ['H6MD03177', 'S6MD03177'], Benjamin, M, kg:/m/025k3k, 400064, 10629.0, 15408.0, Cardin, S308, 182.0, L., None, Benjamin L. Cardin, N00001955, Jewish, None, 174, 26888.0, Q723295, Ben Cardin

","CREATE TABLE `current` (
  ballotpedia_id TEXT,
  bioguide_id TEXT PRIMARY KEY,
  birthday_bio DATE,
  cspan_id REAL PRIMARY KEY,
  fec_id TEXT,
  first_name TEXT,
  gender_bio TEXT,
  google_entity_id_id TEXT,
  govtrack_id INTEGER,
  house_history_id REAL,
  icpsr_id REAL,
  last_name TEXT,
  lis_id TEXT,
  maplight_id REAL,
  middle_name TEXT,
  nickname_name TEXT,
  official_full_name TEXT,
  opensecrets_id TEXT,
  religion_bio TEXT,
  suffix_name TEXT,
  thomas_id INTEGER,
  votesmart_id REAL,
  wikidata_id TEXT,
  wikipedia_id TEXT
);
Sample rows from `current`:
Sherrod Brown, B000944, 1952-11-09, 5051.0, ['H2OH13033', 'S6OH00163'], Sherrod, M, kg:/m/034s80, 400050, 9996.0, 29389.0, Brown, S307, 168.0, None, None, Sherrod Brown, N00003535, Lutheran, None, 136, 27018.0, Q381880, Sherrod Brown
Maria Cantwell, C000127, 1958-10-13, 26137.0, ['S8WA00194', 'H2WA01054'], Maria, F, kg:/m/01x68t, 300018, 10608.0, 39310.0, Cantwell, S275, 544.0, None, None, Maria Cantwell, N00007836, Roman Catholic, None, 172, 27122.0, Q22250, Maria Cantwell
Ben Cardin, C000141, 1943-10-05, 4004.0, ['H6MD03177', 'S6MD03177'], Benjamin, M, kg:/m/025k3k, 400064, 10629.0, 15408.0, Cardin, S308, 182.0, L., None, Benjamin L. Cardin, N00001955, Jewish, None, 174, 26888.0, Q723295, Ben Cardin

CREATE TABLE `current-terms` (
  address TEXT,
  bioguide TEXT PRIMARY KEY REFERENCES current(bioguide_id),
  caucus TEXT,
  chamber TEXT,
  class REAL,
  contact_form TEXT,
  district REAL,
  end TEXT PRIMARY KEY,
  fax TEXT,
  last TEXT,
  name TEXT,
  office TEXT,
  party TEXT,
  party_affiliations TEXT,
  phone TEXT,
  relation TEXT,
  rss_url TEXT,
  start TEXT,
  state TEXT,
  state_rank TEXT,
  title TEXT,
  type TEXT,
  url TEXT
);
Sample rows from `current-terms`:
None, B000944, None, None, None, None, 13.0, 1995-01-03, None, None, None, None, Democrat, None, None, None, None, 1993-01-05, OH, None, None, rep, None
None, B000944, None, None, None, None, 13.0, 1997-01-03, None, None, None, None, Democrat, None, None, None, None, 1995-01-04, OH, None, None, rep, None
None, B000944, None, None, None, None, 13.0, 1999-01-03, None, None, None, None, Democrat, None, None, None, None, 1997-01-07, OH, None, None, rep, None

CREATE TABLE `historical` (
  ballotpedia_id TEXT,
  bioguide_id TEXT PRIMARY KEY,
  bioguide_previous_id TEXT,
  birthday_bio TEXT,
  cspan_id TEXT,
  fec_id TEXT,
  first_name TEXT,
  gender_bio TEXT,
  google_entity_id_id TEXT,
  govtrack_id INTEGER,
  house_history_alternate_id TEXT,
  house_history_id REAL,
  icpsr_id REAL,
  last_name TEXT,
  lis_id TEXT,
  maplight_id TEXT,
  middle_name TEXT,
  nickname_name TEXT,
  official_full_name TEXT,
  opensecrets_id TEXT,
  religion_bio TEXT,
  suffix_name TEXT,
  thomas_id TEXT,
  votesmart_id TEXT,
  wikidata_id TEXT,
  wikipedia_id TEXT
);
Sample rows from `historical`:
None, B000226, None, 1745-04-02, None, None, Richard, M, kg:/m/02pz46, 401222, None, None, 507.0, Bassett, None, None, None, None, None, None, None, None, None, None, Q518823, Richard Bassett (politician)
None, B000546, None, 1742-03-21, None, None, Theodorick, M, kg:/m/033mf4, 401521, None, 9479.0, 786.0, Bland, None, None, None, None, None, None, None, None, None, None, Q1749152, Theodorick Bland (congressman)
None, B001086, None, 1743-06-16, None, None, Aedanus, M, kg:/m/03yccv, 402032, None, 10177.0, 1260.0, Burke, None, None, None, None, None, None, None, None, None, None, Q380504, Aedanus Burke

CREATE TABLE `historical-terms` (
  address TEXT,
  bioguide TEXT PRIMARY KEY REFERENCES historical(bioguide_id),
  chamber TEXT,
  class REAL,
  contact_form TEXT,
  district REAL,
  end TEXT,
  fax TEXT,
  last TEXT,
  middle TEXT,
  name TEXT,
  office TEXT,
  party TEXT,
  party_affiliations TEXT,
  phone TEXT,
  relation TEXT,
  rss_url TEXT,
  start TEXT,
  state TEXT,
  state_rank TEXT,
  title TEXT,
  type TEXT,
  url TEXT
);
Sample rows from `historical-terms`:
None, B000226, None, 2.0, None, None, 1793-03-03, None, None, None, None, None, Anti-Administration, None, None, None, None, 1789-03-04, DE, None, None, sen, None
None, B000546, None, None, None, 9.0, 1791-03-03, None, None, None, None, None, None, None, None, None, None, 1789-03-04, VA, None, None, rep, None
None, B001086, None, None, None, 2.0, 1791-03-03, None, None, None, None, None, None, None, None, None, None, 1789-03-04, SC, None, None, rep, None

CREATE TABLE `social-media` (
  bioguide TEXT PRIMARY KEY REFERENCES current(bioguide_id),
  facebook TEXT,
  facebook_id REAL,
  govtrack REAL,
  instagram TEXT,
  instagram_id REAL,
  thomas INTEGER,
  twitter TEXT,
  twitter_id REAL,
  youtube TEXT,
  youtube_id TEXT
);
Sample rows from `social-media`:
R000600, congresswomanaumuaamata, 1537155909907320.0, 412664.0, None, None, 2222, RepAmata, 3026622545.0, None, UCGdrLQbt1PYDTPsampx4t1A
Y000064, RepToddYoung, 186203844738421.0, 412428.0, None, None, 2019, RepToddYoung, 234128524.0, RepToddYoung, UCuknj4PGn91gHDNAfboZEgQ
E000295, senjoniernst, 351671691660938.0, 412667.0, senjoniernst, 1582702853.0, 2283, SenJoniErnst, 2856787757.0, None, UCLwrmtF_84FIcK3TyMs4MIw

","current-terms, current","current-terms.party, current.bioguide_id, current-terms.bioguide, current.first_name, current.last_name, current-terms.start"
retail_complains,"In reviews for the Eagle National Bank product, how many of the 5 star reviews where from Nashville, Tennessee?",SELECT COUNT(t2.stars) FROM district as t1 inner JOIN reviews as t2 ON t1.district_id = t2.district_id WHERE t1.city = 'Nashville' AND t1.state_abbrev = 'TN' AND t2.product = 'Eagle National Mortgage' AND t2.stars = 5,"CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

","CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

","district, reviews","reviews.stars, district.district_id, reviews.district_id, district.city, district.state_abbrev, reviews.product"
soccer_2016,What is the venue for the match ID 829768?,SELECT t1.venue_name FROM venue as t1 inner JOIN match as t2 ON t1.venue_id = t2.venue_id WHERE t2.match_id = 829768,"CREATE TABLE `venue` (
  Venue_Id INTEGER,
  Venue_Name TEXT,
  City_Id INTEGER REFERENCES City(City_Id)
);
Sample rows from `venue`:
1, M Chinnaswamy Stadium, 1
2, Punjab Cricket Association Stadium, 2
3, Feroz Shah Kotla, 3

CREATE TABLE `match` (
  Match_Id INTEGER,
  Team_1 INTEGER REFERENCES Team(Team_Id),
  Team_2 INTEGER REFERENCES Team(Team_Id),
  Match_Date DATE,
  Season_Id INTEGER REFERENCES Season(Season_Id),
  Venue_Id INTEGER REFERENCES Venue(Venue_Id),
  Toss_Winner INTEGER REFERENCES Team(Team_Id),
  Toss_Decide INTEGER REFERENCES Toss_Decision(Toss_Id),
  Win_Type INTEGER REFERENCES Win_By(Win_Id),
  Win_Margin INTEGER,
  Outcome_type INTEGER REFERENCES Out_Type(Out_Id),
  Match_Winner INTEGER REFERENCES Team(Team_Id),
  Man_of_the_Match INTEGER REFERENCES Player(Player_Id)
);
Sample rows from `match`:
335987, 2, 1, 2008-04-18, 1, 1, 2, 1, 1, 140, 1, 1, 2
335988, 4, 3, 2008-04-19, 1, 2, 3, 2, 1, 33, 1, 3, 19
335989, 6, 5, 2008-04-19, 1, 3, 5, 2, 2, 9, 1, 6, 90

","CREATE TABLE `Batting_Style` (
  Batting_Id INTEGER,
  Batting_hand TEXT
);
Sample rows from `Batting_Style`:
1, Left-hand bat
2, Right-hand bat

CREATE TABLE `Bowling_Style` (
  Bowling_Id INTEGER,
  Bowling_skill TEXT
);
Sample rows from `Bowling_Style`:
1, Right-arm medium
2, Right-arm offbreak
3, Right-arm fast-medium

CREATE TABLE `City` (
  City_Id INTEGER,
  City_Name TEXT,
  Country_id INTEGER
);
Sample rows from `City`:
1, Bangalore, 1
2, Chandigarh, 1
3, Delhi, 1

CREATE TABLE `Country` (
  Country_Id INTEGER REFERENCES Country(Country_Id),
  Country_Name TEXT
);
Sample rows from `Country`:
1, India
2, South Africa
3, U.A.E

CREATE TABLE `Extra_Type` (
  Extra_Id INTEGER,
  Extra_Name TEXT
);
Sample rows from `Extra_Type`:
1, legbyes
2, wides
3, byes

CREATE TABLE `Extra_Runs` (
  Match_Id INTEGER PRIMARY KEY,
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Extra_Type_Id INTEGER REFERENCES Extra_Type(Extra_Id),
  Extra_Runs INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Extra_Runs`:
335987, 1, 1, 1, 1, 1
335987, 1, 2, 2, 1, 2
335987, 1, 3, 2, 1, 1

CREATE TABLE `Out_Type` (
  Out_Id INTEGER,
  Out_Name TEXT
);
Sample rows from `Out_Type`:
1, caught
2, bowled
3, run out

CREATE TABLE `Outcome` (
  Outcome_Id INTEGER,
  Outcome_Type TEXT
);
Sample rows from `Outcome`:
1, Result
2, No Result
3, Superover

CREATE TABLE `Player` (
  Player_Id INTEGER,
  Player_Name TEXT,
  DOB DATE,
  Batting_hand INTEGER REFERENCES Batting_Style(Batting_Id),
  Bowling_skill INTEGER REFERENCES Bowling_Style(Bowling_Id),
  Country_Name INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Player`:
1, SC Ganguly, 1972-07-08, 1, 1, 1
2, BB McCullum, 1981-09-27, 2, 1, 4
3, RT Ponting, 1974-12-19, 2, 1, 5

CREATE TABLE `Rolee` (
  Role_Id INTEGER,
  Role_Desc TEXT
);
Sample rows from `Rolee`:
1, Captain
2, Keeper
3, Player

CREATE TABLE `Season` (
  Season_Id INTEGER,
  Man_of_the_Series INTEGER,
  Orange_Cap INTEGER,
  Purple_Cap INTEGER,
  Season_Year INTEGER
);
Sample rows from `Season`:
1, 32, 100, 102, 2008
2, 53, 18, 61, 2009
3, 133, 133, 131, 2010

CREATE TABLE `Team` (
  Team_Id INTEGER,
  Team_Name TEXT
);
Sample rows from `Team`:
1, Kolkata Knight Riders
2, Royal Challengers Bangalore
3, Chennai Super Kings

CREATE TABLE `Toss_Decision` (
  Toss_Id INTEGER,
  Toss_Name TEXT
);
Sample rows from `Toss_Decision`:
1, field
2, bat

CREATE TABLE `Umpire` (
  Umpire_Id INTEGER,
  Umpire_Name TEXT,
  Umpire_Country INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Umpire`:
1, Asad Rauf, 6
2, MR Benson, 10
3, Aleem Dar, 6

CREATE TABLE `Venue` (
  Venue_Id INTEGER,
  Venue_Name TEXT,
  City_Id INTEGER REFERENCES City(City_Id)
);
Sample rows from `Venue`:
1, M Chinnaswamy Stadium, 1
2, Punjab Cricket Association Stadium, 2
3, Feroz Shah Kotla, 3

CREATE TABLE `Win_By` (
  Win_Id INTEGER,
  Win_Type TEXT
);
Sample rows from `Win_By`:
1, runs
2, wickets
3, NO Result

CREATE TABLE `Match` (
  Match_Id INTEGER,
  Team_1 INTEGER REFERENCES Team(Team_Id),
  Team_2 INTEGER REFERENCES Team(Team_Id),
  Match_Date DATE,
  Season_Id INTEGER REFERENCES Season(Season_Id),
  Venue_Id INTEGER REFERENCES Venue(Venue_Id),
  Toss_Winner INTEGER REFERENCES Team(Team_Id),
  Toss_Decide INTEGER REFERENCES Toss_Decision(Toss_Id),
  Win_Type INTEGER REFERENCES Win_By(Win_Id),
  Win_Margin INTEGER,
  Outcome_type INTEGER REFERENCES Out_Type(Out_Id),
  Match_Winner INTEGER REFERENCES Team(Team_Id),
  Man_of_the_Match INTEGER REFERENCES Player(Player_Id)
);
Sample rows from `Match`:
335987, 2, 1, 2008-04-18, 1, 1, 2, 1, 1, 140, 1, 1, 2
335988, 4, 3, 2008-04-19, 1, 2, 3, 2, 1, 33, 1, 3, 19
335989, 6, 5, 2008-04-19, 1, 3, 5, 2, 2, 9, 1, 6, 90

CREATE TABLE `Ball_by_Ball` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Innings_No INTEGER PRIMARY KEY,
  Team_Batting INTEGER,
  Team_Bowling INTEGER,
  Striker_Batting_Position INTEGER,
  Striker INTEGER,
  Non_Striker INTEGER,
  Bowler INTEGER
);
Sample rows from `Ball_by_Ball`:
335987, 1, 1, 1, 1, 2, 1, 1, 2, 14
335987, 1, 1, 2, 2, 1, 1, 6, 7, 106
335987, 1, 2, 1, 1, 2, 2, 2, 1, 14

CREATE TABLE `Batsman_Scored` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Runs_Scored INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Batsman_Scored`:
335987, 1, 1, 0, 1
335987, 1, 1, 1, 2
335987, 1, 2, 0, 1

CREATE TABLE `Player_Match` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Player_Id INTEGER PRIMARY KEY REFERENCES Player(Player_Id),
  Role_Id INTEGER PRIMARY KEY REFERENCES Rolee(Role_Id),
  Team_Id INTEGER REFERENCES Team(Team_Id)
);
Sample rows from `Player_Match`:
335987, 1, 1, 1
335987, 2, 3, 1
335987, 3, 3, 1

CREATE TABLE `Wicket_Taken` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Player_Out INTEGER REFERENCES Player(Player_Id),
  Kind_Out INTEGER REFERENCES Out_Type(Out_Id),
  Fielders INTEGER REFERENCES Player(Player_Id),
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Wicket_Taken`:
335987, 2, 1, 6, 2, None, 2
335987, 3, 2, 8, 2, None, 2
335987, 5, 5, 9, 1, 83, 2

","venue, match","venue.venue_name, venue.venue_id, match.venue_id, match.match_id"
movies_4,Calculate the 2016 gap between the average revenue for Indian and American films.,"SELECT AVG(case when t3.country_name = 'United States of America' then t1.revenue end) - AVG(case when t3.country_name = 'India' then t1.revenue end) as calculate FROM movie as t1 inner JOIN production_country as t2 ON t1.movie_id = t2.movie_id inner JOIN country as t3 ON t2.country_id = t3.country_id WHERE CasT(strftime('%Y', t1.release_date) as int) = 2016","CREATE TABLE `movie` (
  movie_id INTEGER,
  title TEXT,
  budget INTEGER,
  homepage TEXT,
  overview TEXT,
  popularity REAL,
  release_date DATE,
  revenue INTEGER,
  runtime INTEGER,
  movie_status TEXT,
  tagline TEXT,
  vote_average REAL,
  vote_count INTEGER
);
Sample rows from `movie`:
5, Four Rooms, 4000000, , It's Ted the Bellhop's first night on the job...and the hotel's very unusual guests are about to place him in some outrageous predicaments. It seems that this evening's room service is serving up one unbelievable happening after another., 22.87623, 1995-12-09, 4300000, 98, Released, Twelve outrageous guests. Four scandalous requests. And one lone bellhop, in his first day on the job, who's in for the wildest New year's Eve of his life., 6.5, 530
11, Star Wars, 11000000, http://www.starwars.com/films/star-wars-episode-iv-a-new-hope, Princess Leia is captured and held hostage by the evil Imperial forces in their effort to take over the galactic Empire. Venturesome Luke Skywalker and dashing captain Han Solo team together with the loveable robot duo R2-D2 and C-3PO to rescue the beauti, 126.393695, 1977-05-25, 775398007, 121, Released, A long time ago in a galaxy far, far away..., 8.1, 6624
12, Finding Nemo, 94000000, http://movies.disney.com/finding-nemo, Nemo, an adventurous young clownfish, is unexpectedly taken from his Great Barrier Reef home to a dentist's office aquarium. It's up to his worrisome father Marlin and a friendly but forgetful fish Dory to bring Nemo home -- meeting vegetarian sharks, sur, 85.688789, 2003-05-30, 940335536, 100, Released, There are 3.7 trillion fish in the ocean, they're looking for one., 7.6, 6122

CREATE TABLE `production_country` (
  movie_id INTEGER REFERENCES movie(movie_id),
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `production_country`:
5, 214
11, 214
12, 214

CREATE TABLE `country` (
  country_id INTEGER,
  country_iso_code TEXT,
  country_name TEXT
);
Sample rows from `country`:
128, AE, United Arab Emirates
129, AF, Afghanistan
130, AO, Angola

","CREATE TABLE `country` (
  country_id INTEGER,
  country_iso_code TEXT,
  country_name TEXT
);
Sample rows from `country`:
128, AE, United Arab Emirates
129, AF, Afghanistan
130, AO, Angola

CREATE TABLE `department` (
  department_id INTEGER,
  department_name TEXT
);
Sample rows from `department`:
1, Camera
2, Directing
3, Production

CREATE TABLE `gender` (
  gender_id INTEGER,
  gender TEXT
);
Sample rows from `gender`:
0, Unspecified
1, Female
2, Male

CREATE TABLE `genre` (
  genre_id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
12, Adventure
14, Fantasy
16, Animation

CREATE TABLE `keyword` (
  keyword_id INTEGER,
  keyword_name TEXT
);
Sample rows from `keyword`:
30, individual
65, holiday
74, germany

CREATE TABLE `language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `language`:
24574, en, English
24575, sv, svenska
24576, de, Deutsch

CREATE TABLE `language_role` (
  role_id INTEGER,
  language_role TEXT
);
Sample rows from `language_role`:
1, Original
2, Spoken

CREATE TABLE `movie` (
  movie_id INTEGER,
  title TEXT,
  budget INTEGER,
  homepage TEXT,
  overview TEXT,
  popularity REAL,
  release_date DATE,
  revenue INTEGER,
  runtime INTEGER,
  movie_status TEXT,
  tagline TEXT,
  vote_average REAL,
  vote_count INTEGER
);
Sample rows from `movie`:
5, Four Rooms, 4000000, , It's Ted the Bellhop's first night on the job...and the hotel's very unusual guests are about to place him in some outrageous predicaments. It seems that this evening's room service is serving up one unbelievable happening after another., 22.87623, 1995-12-09, 4300000, 98, Released, Twelve outrageous guests. Four scandalous requests. And one lone bellhop, in his first day on the job, who's in for the wildest New year's Eve of his life., 6.5, 530
11, Star Wars, 11000000, http://www.starwars.com/films/star-wars-episode-iv-a-new-hope, Princess Leia is captured and held hostage by the evil Imperial forces in their effort to take over the galactic Empire. Venturesome Luke Skywalker and dashing captain Han Solo team together with the loveable robot duo R2-D2 and C-3PO to rescue the beauti, 126.393695, 1977-05-25, 775398007, 121, Released, A long time ago in a galaxy far, far away..., 8.1, 6624
12, Finding Nemo, 94000000, http://movies.disney.com/finding-nemo, Nemo, an adventurous young clownfish, is unexpectedly taken from his Great Barrier Reef home to a dentist's office aquarium. It's up to his worrisome father Marlin and a friendly but forgetful fish Dory to bring Nemo home -- meeting vegetarian sharks, sur, 85.688789, 2003-05-30, 940335536, 100, Released, There are 3.7 trillion fish in the ocean, they're looking for one., 7.6, 6122

CREATE TABLE `movie_genres` (
  movie_id INTEGER REFERENCES movie(movie_id),
  genre_id INTEGER REFERENCES genre(genre_id)
);
Sample rows from `movie_genres`:
5, 35
5, 80
11, 12

CREATE TABLE `movie_languages` (
  movie_id INTEGER REFERENCES movie(movie_id),
  language_id INTEGER REFERENCES language(language_id),
  language_role_id INTEGER REFERENCES language_role(role_id)
);
Sample rows from `movie_languages`:
5, 24574, 2
11, 24574, 2
12, 24574, 2

CREATE TABLE `person` (
  person_id INTEGER,
  person_name TEXT
);
Sample rows from `person`:
1, George Lucas
2, Mark Hamill
3, Harrison Ford

CREATE TABLE `movie_crew` (
  movie_id INTEGER REFERENCES movie(movie_id),
  person_id INTEGER REFERENCES person(person_id),
  department_id INTEGER REFERENCES department(department_id),
  job TEXT
);
Sample rows from `movie_crew`:
285, 120, 1, Director of Photography
285, 1704, 2, Director
285, 770, 3, Producer

CREATE TABLE `production_company` (
  company_id INTEGER,
  company_name TEXT
);
Sample rows from `production_company`:
1, Lucasfilm
2, Walt Disney Pictures
3, Pixar Animation Studios

CREATE TABLE `production_country` (
  movie_id INTEGER REFERENCES movie(movie_id),
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `production_country`:
5, 214
11, 214
12, 214

CREATE TABLE `movie_cast` (
  movie_id INTEGER REFERENCES movie(movie_id),
  person_id INTEGER REFERENCES person(person_id),
  character_name TEXT,
  gender_id INTEGER REFERENCES gender(gender_id),
  cast_order INTEGER
);
Sample rows from `movie_cast`:
285, 85, Captain Jack Sparrow, 2, 0
285, 114, Will Turner, 2, 1
285, 116, Elizabeth Swann, 1, 2

CREATE TABLE `movie_keywords` (
  movie_id INTEGER REFERENCES movie(None),
  keyword_id INTEGER REFERENCES keyword(None)
);
Sample rows from `movie_keywords`:
5, 612
5, 613
5, 616

CREATE TABLE `movie_company` (
  movie_id INTEGER REFERENCES movie(None),
  company_id INTEGER REFERENCES production_company(None)
);
Sample rows from `movie_company`:
5, 14
5, 59
11, 1

","movie, production_country, country","country.country_name, movie.revenue, movie.movie_id, production_country.movie_id, production_country.country_id, country.country_id, movie.release_date"
retail_world,"How many products were supplied by Pavlova, Ltd.?","SELECT COUNT(t1.productname) FROM products as t1 inner JOIN suppliers as t2 ON t1.supplierid = t2.supplierid WHERE t2.companyname = 'Pavlova, Ltd.'","CREATE TABLE `products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

","products, suppliers","products.productname, products.supplierid, suppliers.supplierid, suppliers.companyname"
talkingdata,"Give the number of female users of ""E派"" brand devices.",SELECT COUNT(t2.device_id) fROM gender_age as t1 inner JOIN phone_brand_device_model2 as t2 ON t1.device_id = t2.device_id WHERE t1.gender = 'f' AND t2.phone_brand = 'E派',"CREATE TABLE `gender_age` (
  device_id INTEGER REFERENCES phone_brand_device_model2(device_id),
  gender TEXT,
  age INTEGER,
  group TEXT
);
Sample rows from `gender_age`:
-9221086586254644858, M, 29, M29-31
-9221079146476055829, None, None, None
-9221066489596332354, M, 31, M29-31

CREATE TABLE `phone_brand_device_model2` (
  device_id INTEGER PRIMARY KEY,
  phone_brand TEXT PRIMARY KEY,
  device_model TEXT PRIMARY KEY
);
Sample rows from `phone_brand_device_model2`:
-9223321966609553846, 小米, 红米note
-9223067244542181226, vivo, Y19T
-9223042152723782980, 小米, MI 3

","CREATE TABLE `app_all` (
  app_id INTEGER
);
Sample rows from `app_all`:
-9223281467940916832
-9222877069545393219
-9222785464897897681

CREATE TABLE `app_events` (
  event_id INTEGER PRIMARY KEY REFERENCES events(event_id),
  app_id INTEGER PRIMARY KEY,
  is_installed INTEGER,
  is_active INTEGER
);
Sample rows from `app_events`:
2, -8942695423876075857, 1, 0
2, -8022267440849930066, 1, 0
2, -5720078949152207372, 1, 0

CREATE TABLE `app_events_relevant` (
  event_id INTEGER PRIMARY KEY REFERENCES events_relevant(event_id),
  app_id INTEGER PRIMARY KEY REFERENCES app_all(app_id),
  is_installed INTEGER,
  is_active INTEGER
);
Sample rows from `app_events_relevant`:
2, -8942695423876075857, 1, 0
2, -8022267440849930066, 1, 0
2, -5720078949152207372, 1, 0

CREATE TABLE `app_labels` (
  app_id INTEGER REFERENCES app_all(app_id),
  label_id INTEGER REFERENCES label_categories(label_id)
);
Sample rows from `app_labels`:
7324884708820027918, 251
-4494216993218550286, 251
6058196446775239644, 406

CREATE TABLE `events` (
  event_id INTEGER,
  device_id INTEGER,
  timestamp DATETIME,
  longitude REAL,
  latitude REAL
);
Sample rows from `events`:
1, 29182687948017175, 2016-05-01 00:55:25.0, 121.0, 31.0
2, -6401643145415154744, 2016-05-01 00:54:12.0, 104.0, 31.0
3, -4833982096941402721, 2016-05-01 00:08:05.0, 107.0, 30.0

CREATE TABLE `events_relevant` (
  event_id INTEGER,
  device_id INTEGER REFERENCES gender_age(device_id),
  timestamp DATETIME,
  longitude REAL,
  latitude REAL
);
Sample rows from `events_relevant`:
2, None, -8942695423876075857, 1.0, 0.0
6, None, -8764672938472212518, 1.0, 1.0
7, None, -9050100410106163077, 1.0, 0.0

CREATE TABLE `gender_age` (
  device_id INTEGER REFERENCES phone_brand_device_model2(device_id),
  gender TEXT,
  age INTEGER,
  group TEXT
);
Sample rows from `gender_age`:
-9221086586254644858, M, 29, M29-31
-9221079146476055829, None, None, None
-9221066489596332354, M, 31, M29-31

CREATE TABLE `gender_age_test` (
  device_id INTEGER
);
Sample rows from `gender_age_test`:
-9223321966609553846
-9223042152723782980
-9222896629442493034

CREATE TABLE `gender_age_train` (
  device_id INTEGER,
  gender TEXT,
  age INTEGER,
  group TEXT
);
Sample rows from `gender_age_train`:
-9223067244542181226, M, 24, M23-26
-9222956879900151005, M, 36, M32-38
-9222754701995937853, M, 29, M29-31

CREATE TABLE `label_categories` (
  label_id INTEGER,
  category TEXT
);
Sample rows from `label_categories`:
1, None
2, game-game type
3, game-Game themes

CREATE TABLE `phone_brand_device_model2` (
  device_id INTEGER PRIMARY KEY,
  phone_brand TEXT PRIMARY KEY,
  device_model TEXT PRIMARY KEY
);
Sample rows from `phone_brand_device_model2`:
-9223321966609553846, 小米, 红米note
-9223067244542181226, vivo, Y19T
-9223042152723782980, 小米, MI 3

CREATE TABLE `sample_submission` (
  device_id INTEGER,
  F23- REAL,
  F24-26 REAL,
  F27-28 REAL,
  F29-32 REAL,
  F33-42 REAL,
  F43+ REAL,
  M22- REAL,
  M23-26 REAL,
  M27-28 REAL,
  M29-31 REAL,
  M32-38 REAL,
  M39+ REAL
);
Sample rows from `sample_submission`:
-9223321966609553846, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833
-9223042152723782980, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833
-9222896629442493034, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833

","gender_age, phone_brand_device_model2","phone_brand_device_model2.device_id, gender_age.device_id, gender_age.gender, phone_brand_device_model2.phone_brand"
public_review_platform,"What is the longest business time on Mondays for a Yelp_Business under the category ""Shopping""?","SELECT t1.closing_time + 12 - t1.opening_time as ""hour"" FROM business_hours as t1 inner JOIN days as t2 ON t1.day_id = t2.day_id inner JOIN business as t3 ON t1.business_id = t3.business_id inner JOIN business_categories as t4 ON t3.business_id = t4.business_id inner JOIN categories as t5 ON t4.category_id = t5.category_id WHERE t2.day_of_week LIKE 'Monday' AND t5.category_name LIKE 'Shopping' ORDER BY t1.closing_time + 12 - t1.opening_time DESC LIMIT 1","CREATE TABLE `business_hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `business_hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `business_categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `business_categories`:
1, 8
1, 143
2, 18

CREATE TABLE `categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","business_hours, days, business, business_categories, categories","business_hours.closing_time, business_hours.opening_time, business_hours.day_id, days.day_id, business_hours.business_id, business.business_id, business_categories.business_id, business_categories.category_id, categories.category_id, days.day_of_week, categories.category_name"
sales,Write down the name of products whose sale quantity is more than 950.,SELECT DISTINCT t1.name FROM products as t1 inner JOIN sales as t2 ON t1.productid = t2.productid WHERE t2.quantity > 950,"CREATE TABLE `products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

CREATE TABLE `sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Employees`:
1, Abraham, e, Bennet
2, Reginald, l, Blotchet-Halls
3, Cheryl, a, Carson

CREATE TABLE `Products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

CREATE TABLE `Sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `Sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

","products, sales","products.name, products.productid, sales.productid, sales.quantity"
european_football_1,How many matches were played in the Scottish Premiership division from 2006 to 2008?,SELECT COUNT(t1.div) FROM matchs as t1 inner JOIN divisions as t2 ON t1.div = t2.division WHERE t2.name = 'Scottish Premiership' AND (t1.season BETWEEN 2006 AND 2008),"CREATE TABLE `matchs` (
  Div TEXT REFERENCES divisions(division),
  Date DATE,
  HomeTeam TEXT,
  AwayTeam TEXT,
  FTHG INTEGER,
  FTAG INTEGER,
  FTR TEXT,
  season INTEGER
);
Sample rows from `matchs`:
B1, 2020-08-08, Club Brugge, Charleroi, 0, 1, A, 2021
B1, 2020-08-08, Antwerp, Mouscron, 1, 1, D, 2021
B1, 2020-08-08, Standard, Cercle Brugge, 1, 0, H, 2021

CREATE TABLE `divisions` (
  division TEXT PRIMARY KEY,
  name TEXT,
  country TEXT
);
Sample rows from `divisions`:
B1, Division 1A, Belgium
D1, Bundesliga, Deutschland
D2, 2. Bundesliga, Deutschland

","CREATE TABLE `divisions` (
  division TEXT PRIMARY KEY,
  name TEXT,
  country TEXT
);
Sample rows from `divisions`:
B1, Division 1A, Belgium
D1, Bundesliga, Deutschland
D2, 2. Bundesliga, Deutschland

CREATE TABLE `matchs` (
  Div TEXT REFERENCES divisions(division),
  Date DATE,
  HomeTeam TEXT,
  AwayTeam TEXT,
  FTHG INTEGER,
  FTAG INTEGER,
  FTR TEXT,
  season INTEGER
);
Sample rows from `matchs`:
B1, 2020-08-08, Club Brugge, Charleroi, 0, 1, A, 2021
B1, 2020-08-08, Antwerp, Mouscron, 1, 1, D, 2021
B1, 2020-08-08, Standard, Cercle Brugge, 1, 0, H, 2021

","matchs, divisions","matchs.div, divisions.division, divisions.name, matchs.season"
cars,What is the miles per square hour of the cheapest car produced by the USA?,SELECT t4.acceleration FROM price as t1 inner JOIN production as t2 ON t1.id = t2.id inner JOIN country as t3 ON t3.origin = t2.country inner JOIN data as t4 ON t4.id = t1.id WHERE t3.country = 'USA' ORDER BY t1.price asC LIMIT 1,"CREATE TABLE `price` (
  ID INTEGER,
  price REAL
);
Sample rows from `price`:
1, 25561.59078
2, 24221.42273
3, 27240.84373

CREATE TABLE `production` (
  ID INTEGER PRIMARY KEY REFERENCES price(ID) REFERENCES data(ID),
  model_year INTEGER PRIMARY KEY,
  country INTEGER REFERENCES country(origin)
);
Sample rows from `production`:
1, 1970, 1
1, 1971, 1
2, 1970, 1

CREATE TABLE `country` (
  origin INTEGER,
  country TEXT
);
Sample rows from `country`:
1, USA
2, Europe
3, Japan

CREATE TABLE `data` (
  ID INTEGER REFERENCES price(ID),
  mpg REAL,
  cylinders INTEGER,
  displacement REAL,
  horsepower INTEGER,
  weight INTEGER,
  acceleration REAL,
  model INTEGER,
  car_name TEXT
);
Sample rows from `data`:
1, 18.0, 8, 307.0, 130, 3504, 12.0, 70, chevrolet chevelle malibu
2, 15.0, 8, 350.0, 165, 3693, 11.5, 70, buick skylark 320
3, 18.0, 8, 318.0, 150, 3436, 11.0, 70, plymouth satellite

","CREATE TABLE `country` (
  origin INTEGER,
  country TEXT
);
Sample rows from `country`:
1, USA
2, Europe
3, Japan

CREATE TABLE `price` (
  ID INTEGER,
  price REAL
);
Sample rows from `price`:
1, 25561.59078
2, 24221.42273
3, 27240.84373

CREATE TABLE `data` (
  ID INTEGER REFERENCES price(ID),
  mpg REAL,
  cylinders INTEGER,
  displacement REAL,
  horsepower INTEGER,
  weight INTEGER,
  acceleration REAL,
  model INTEGER,
  car_name TEXT
);
Sample rows from `data`:
1, 18.0, 8, 307.0, 130, 3504, 12.0, 70, chevrolet chevelle malibu
2, 15.0, 8, 350.0, 165, 3693, 11.5, 70, buick skylark 320
3, 18.0, 8, 318.0, 150, 3436, 11.0, 70, plymouth satellite

CREATE TABLE `production` (
  ID INTEGER PRIMARY KEY REFERENCES price(ID) REFERENCES data(ID),
  model_year INTEGER PRIMARY KEY,
  country INTEGER REFERENCES country(origin)
);
Sample rows from `production`:
1, 1970, 1
1, 1971, 1
2, 1970, 1

","price, production, country, data","data.acceleration, price.id, production.id, country.origin, production.country, data.id, country.country, price.price"
chicago_crime,"Please list the case numbers of all the incidents with the generic description of ""BATTERY"" in the IUCR classification.",SELECT t2.case_number FROM iucr as t1 inner JOIN crime as t2 ON t1.iucr_no = t2.iucr_no WHERE t1.primary_description = 'BATTERY',"CREATE TABLE `iucr` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `iucr`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","CREATE TABLE `Community_Area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `Community_Area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `District` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `District`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `FBI_Code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `FBI_Code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `IUCR` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `IUCR`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `Neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `Neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `Ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `Ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `Crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `Crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","iucr, crime","crime.case_number, iucr.iucr_no, crime.iucr_no, iucr.primary_description"
computer_student,Please list the IDs of the advisors of the students who are in the 5th year of their program.,SELECT t1.p_id_dummy FROM advisedby as t1 inner JOIN person as t2 ON t1.p_id = t2.p_id WHERE t2.yearsinprogram = 'Year_5',"CREATE TABLE `advisedby` (
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id),
  p_id_dummy INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `advisedby`:
96, 5
118, 5
183, 5

CREATE TABLE `person` (
  p_id INTEGER,
  professor INTEGER,
  student INTEGER,
  hasPosition TEXT,
  inPhase TEXT,
  yearsInProgram TEXT
);
Sample rows from `person`:
3, 0, 1, 0, 0, 0
4, 0, 1, 0, 0, 0
5, 1, 0, Faculty, 0, 0

","CREATE TABLE `course` (
  course_id INTEGER,
  courseLevel TEXT
);
Sample rows from `course`:
0, Level_500
1, Level_500
2, Level_500

CREATE TABLE `person` (
  p_id INTEGER,
  professor INTEGER,
  student INTEGER,
  hasPosition TEXT,
  inPhase TEXT,
  yearsInProgram TEXT
);
Sample rows from `person`:
3, 0, 1, 0, 0, 0
4, 0, 1, 0, 0, 0
5, 1, 0, Faculty, 0, 0

CREATE TABLE `advisedBy` (
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id),
  p_id_dummy INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `advisedBy`:
96, 5
118, 5
183, 5

CREATE TABLE `taughtBy` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `taughtBy`:
0, 40
1, 40
2, 180

","advisedby, person","advisedby.p_id_dummy, advisedby.p_id, person.p_id, person.yearsinprogram"
professional_basketball,What division did the team coached by the winner of the 1977 NBA Coach of the Year award play in in 1976?,SELECT DISTINCT t3.divid FROM awards_coaches as t1 inner JOIN coaches as t2 ON t1.coachid = t2.coachid inner JOIN teams as t3 ON t2.tmid = t3.tmid WHERE t1.year = 1977 AND t1.award = 'NBA Coach of the Year' AND t3.year = 1976,"CREATE TABLE `awards_coaches` (
  id INTEGER,
  year INTEGER REFERENCES coaches(year),
  coachID TEXT REFERENCES coaches(coachID),
  award TEXT,
  lgID TEXT,
  note TEXT
);
Sample rows from `awards_coaches`:
1, 1962, gallaha01, NBA Coach of the Year, NBA, None
2, 1963, hannual01, NBA Coach of the Year, NBA, None
3, 1964, auerbre01, NBA Coach of the Year, NBA, None

CREATE TABLE `coaches` (
  coachID TEXT PRIMARY KEY,
  year INTEGER PRIMARY KEY REFERENCES teams(year),
  tmID TEXT PRIMARY KEY REFERENCES teams(tmID),
  lgID TEXT,
  stint INTEGER PRIMARY KEY,
  won INTEGER,
  lost INTEGER,
  post_wins INTEGER,
  post_losses INTEGER
);
Sample rows from `coaches`:
adelmri01, 1988, POR, NBA, 2, 14, 21, 0, 3
adelmri01, 1989, POR, NBA, 1, 59, 23, 12, 9
adelmri01, 1990, POR, NBA, 1, 63, 19, 9, 7

CREATE TABLE `teams` (
  year INTEGER PRIMARY KEY,
  lgID TEXT,
  tmID TEXT PRIMARY KEY,
  franchID TEXT,
  confID TEXT,
  divID TEXT,
  rank INTEGER,
  confRank INTEGER,
  playoff TEXT,
  name TEXT,
  o_fgm INTEGER,
  o_ftm INTEGER,
  o_pts INTEGER,
  d_pts INTEGER,
  homeWon INTEGER,
  homeLost INTEGER,
  awayWon INTEGER,
  awayLost INTEGER,
  won INTEGER,
  lost INTEGER,
  games INTEGER,
  arena TEXT
);
Sample rows from `teams`:
1937, NBL, AFS, AFS, None, EA, 1, 0, CF, Akron Firestone Non-Skids, 249, 183, 681, 578, 8, 1, 5, 3, 14, 4, 18, None
1937, NBL, AGW, AGW, None, EA, 2, 0, WC, Akron Goodyear Wingfoots, 243, 159, 645, 498, 8, 1, 5, 4, 13, 5, 18, None
1937, NBL, BFB, BFB, None, EA, 4, 0, None, Buffalo Bisons, 108, 46, 262, 275, 2, 2, 1, 4, 3, 6, 9, None

","CREATE TABLE `awards_players` (
  playerID TEXT PRIMARY KEY REFERENCES players(playerID),
  award TEXT PRIMARY KEY,
  year INTEGER PRIMARY KEY,
  lgID TEXT,
  note TEXT,
  pos TEXT
);
Sample rows from `awards_players`:
abdulka01, All-Defensive Second Team, 1969, NBA, None, None
abdulka01, All-NBA Second Team, 1969, NBA, None, C
abdulka01, Rookie of the Year, 1969, NBA, None, None

CREATE TABLE `coaches` (
  coachID TEXT PRIMARY KEY,
  year INTEGER PRIMARY KEY REFERENCES teams(year),
  tmID TEXT PRIMARY KEY REFERENCES teams(tmID),
  lgID TEXT,
  stint INTEGER PRIMARY KEY,
  won INTEGER,
  lost INTEGER,
  post_wins INTEGER,
  post_losses INTEGER
);
Sample rows from `coaches`:
adelmri01, 1988, POR, NBA, 2, 14, 21, 0, 3
adelmri01, 1989, POR, NBA, 1, 59, 23, 12, 9
adelmri01, 1990, POR, NBA, 1, 63, 19, 9, 7

CREATE TABLE `draft` (
  id INTEGER,
  draftYear INTEGER REFERENCES teams(year),
  draftRound INTEGER,
  draftSelection INTEGER,
  draftOverall INTEGER,
  tmID TEXT REFERENCES teams(tmID),
  firstName TEXT,
  lastName TEXT,
  suffixName TEXT,
  playerID TEXT,
  draftFrom TEXT,
  lgID TEXT
);
Sample rows from `draft`:
1, 1967, 0, 0, 0, ANA, Darrell, Hardy, None, hardyda01, Baylor, ABA
2, 1967, 0, 0, 0, ANA, Bob, Krulish, None, None, Pacific, ABA
3, 1967, 0, 0, 0, ANA, Bob, Lewis, None, lewisbo01, North Carolina, ABA

CREATE TABLE `player_allstar` (
  playerID TEXT PRIMARY KEY REFERENCES players(playerID),
  last_name TEXT,
  first_name TEXT,
  season_id INTEGER PRIMARY KEY,
  conference TEXT,
  league_id TEXT,
  games_played INTEGER,
  minutes INTEGER,
  points INTEGER,
  o_rebounds INTEGER,
  d_rebounds INTEGER,
  rebounds INTEGER,
  assists INTEGER,
  steals INTEGER,
  blocks INTEGER,
  turnovers INTEGER,
  personal_fouls INTEGER,
  fg_attempted INTEGER,
  fg_made INTEGER,
  ft_attempted INTEGER,
  ft_made INTEGER,
  three_attempted INTEGER,
  three_made INTEGER
);
Sample rows from `player_allstar`:
abdulka01, Abdul-Jabbar, Kareem, 1969, East, NBA, 1, 18, 10, None, None, 11, 4, None, None, None, None, 8, 4, 2, 2, None, None
abdulka01, Abdul-Jabbar, Kareem, 1970, West, NBA, 1, 30, 19, None, None, 14, 1, None, None, None, None, 16, 8, 4, 3, None, None
abdulka01, Abdul-Jabbar, Kareem, 1971, West, NBA, 1, 19, 12, None, None, 7, 2, None, None, None, None, 10, 5, 2, 2, None, None

CREATE TABLE `players` (
  playerID TEXT PRIMARY KEY,
  useFirst TEXT,
  firstName TEXT,
  middleName TEXT,
  lastName TEXT,
  nameGiven TEXT,
  fullGivenName TEXT,
  nameSuffix TEXT,
  nameNick TEXT,
  pos TEXT,
  firstseason INTEGER,
  lastseason INTEGER,
  height REAL,
  weight INTEGER,
  college TEXT,
  collegeOther TEXT,
  birthDate DATE,
  birthCity TEXT,
  birthState TEXT,
  birthCountry TEXT,
  highSchool TEXT,
  hsCity TEXT,
  hsState TEXT,
  hsCountry TEXT,
  deathDate DATE,
  race TEXT
);
Sample rows from `players`:
abdelal01, Alaa, Alaa, None, Abdelnaby, None, None, None, None, F-C, 0, 0, 82.0, 240, Duke, None, 1968-06-24, Cairo, None, EGY, Bloomfield Senior, Bloomfield, NJ, USA, 0000-00-00, B
abdulka01, Kareem, Kareem, None, Abdul-Jabbar, None, Ferdinand Lewis Alcindor, Jr., None, Lew, Cap, C, 0, 0, 85.0, 225, UCLA, None, 1947-04-16, New York, NY, USA, Power Memorial, New York, NY, USA, 0000-00-00, B
abdulma01, Mahdi, Mahdi, None, Abdul-Rahman, None, Walter Raphael Hazzard, Jr., None, Walt, G, 0, 0, 74.0, 185, UCLA, Santa Monica City, 1942-04-15, Wilmington, DE, USA, Overbrook / Moton, Philadelphia / Easton, PA / MD, USA, 2011-11-18, B

CREATE TABLE `teams` (
  year INTEGER PRIMARY KEY,
  lgID TEXT,
  tmID TEXT PRIMARY KEY,
  franchID TEXT,
  confID TEXT,
  divID TEXT,
  rank INTEGER,
  confRank INTEGER,
  playoff TEXT,
  name TEXT,
  o_fgm INTEGER,
  o_ftm INTEGER,
  o_pts INTEGER,
  d_pts INTEGER,
  homeWon INTEGER,
  homeLost INTEGER,
  awayWon INTEGER,
  awayLost INTEGER,
  won INTEGER,
  lost INTEGER,
  games INTEGER,
  arena TEXT
);
Sample rows from `teams`:
1937, NBL, AFS, AFS, None, EA, 1, 0, CF, Akron Firestone Non-Skids, 249, 183, 681, 578, 8, 1, 5, 3, 14, 4, 18, None
1937, NBL, AGW, AGW, None, EA, 2, 0, WC, Akron Goodyear Wingfoots, 243, 159, 645, 498, 8, 1, 5, 4, 13, 5, 18, None
1937, NBL, BFB, BFB, None, EA, 4, 0, None, Buffalo Bisons, 108, 46, 262, 275, 2, 2, 1, 4, 3, 6, 9, None

CREATE TABLE `awards_coaches` (
  id INTEGER,
  year INTEGER REFERENCES coaches(year),
  coachID TEXT REFERENCES coaches(coachID),
  award TEXT,
  lgID TEXT,
  note TEXT
);
Sample rows from `awards_coaches`:
1, 1962, gallaha01, NBA Coach of the Year, NBA, None
2, 1963, hannual01, NBA Coach of the Year, NBA, None
3, 1964, auerbre01, NBA Coach of the Year, NBA, None

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
awards_coaches, 61
players_teams, 23751
series_post, 775

CREATE TABLE `players_teams` (
  id INTEGER,
  playerID TEXT REFERENCES players(None),
  year INTEGER REFERENCES teams(year),
  stint INTEGER,
  tmID TEXT REFERENCES teams(tmID),
  lgID TEXT,
  GP INTEGER,
  GS INTEGER,
  minutes INTEGER,
  points INTEGER,
  oRebounds INTEGER,
  dRebounds INTEGER,
  rebounds INTEGER,
  assists INTEGER,
  steals INTEGER,
  blocks INTEGER,
  turnovers INTEGER,
  PF INTEGER,
  fgAttempted INTEGER,
  fgMade INTEGER,
  ftAttempted INTEGER,
  ftMade INTEGER,
  threeAttempted INTEGER,
  threeMade INTEGER,
  PostGP INTEGER,
  PostGS INTEGER,
  PostMinutes INTEGER,
  PostPoints INTEGER,
  PostoRebounds INTEGER,
  PostdRebounds INTEGER,
  PostRebounds INTEGER,
  PostAssists INTEGER,
  PostSteals INTEGER,
  PostBlocks INTEGER,
  PostTurnovers INTEGER,
  PostPF INTEGER,
  PostfgAttempted INTEGER,
  PostfgMade INTEGER,
  PostftAttempted INTEGER,
  PostftMade INTEGER,
  PostthreeAttempted INTEGER,
  PostthreeMade INTEGER,
  note TEXT
);
Sample rows from `players_teams`:
1, abdelal01, 1990, 1, POR, NBA, 43, 0, 290, 135, 27, 62, 89, 12, 4, 12, 22, 39, 116, 55, 44, 25, 0, 0, 5, 0, 13, 4, 1, 2, 3, 0, 0, 0, 0, 0, 6, 2, 0, 0, 0, 0, None
2, abdelal01, 1991, 1, POR, NBA, 71, 0, 934, 432, 81, 179, 260, 30, 25, 17, 66, 132, 361, 178, 101, 76, 0, 0, 8, 0, 25, 12, 0, 4, 4, 2, 0, 0, 2, 4, 10, 5, 4, 2, 0, 0, None
3, abdelal01, 1992, 1, MIL, NBA, 12, 0, 159, 64, 12, 25, 37, 10, 6, 4, 0, 24, 56, 26, 16, 12, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, None

CREATE TABLE `series_post` (
  id INTEGER,
  year INTEGER REFERENCES teams(year) REFERENCES teams(year),
  round TEXT,
  series TEXT,
  tmIDWinner TEXT REFERENCES teams(tmID),
  lgIDWinner TEXT,
  tmIDLoser TEXT REFERENCES teams(tmID),
  lgIDLoser TEXT,
  W INTEGER,
  L INTEGER
);
Sample rows from `series_post`:
1, 1946, F, O, PHW, NBA, CHS, NBA, 4, 1
2, 1946, QF, M, NYK, NBA, CLR, NBA, 2, 1
3, 1946, QF, M, PHW, NBA, STB, NBA, 2, 1

","awards_coaches, coaches, teams","teams.divid, awards_coaches.coachid, coaches.coachid, coaches.tmid, teams.tmid, awards_coaches.year, awards_coaches.award, teams.year"
restaurant,How many American food restaurants are unpopular in Carmel?,SELECT COUNT(id_restaurant) FROM generalinfo WHERE food_type = 'american' AND city = 'carmel' AND review = ( SELECT MIN(review) FROM generalinfo WHERE food_type = 'american' AND city = 'carmel' ),"CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

","CREATE TABLE `geographic` (
  city TEXT PRIMARY KEY,
  county TEXT,
  region TEXT
);
Sample rows from `geographic`:
alameda, alameda county, bay area
alamo, contra costa county, bay area
albany, alameda county, bay area

CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

",generalinfo,"id_restaurant, food_type, city, review"
university,What is the ID of the university with the most students in 2011?,SELECT university_id FROM university_year WHERE year = 2011 ORDER BY num_students DESC LIMIT 1,"CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

","CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

CREATE TABLE `ranking_system` (
  id INTEGER,
  system_name TEXT
);
Sample rows from `ranking_system`:
1, Times Higher Education World University Ranking
2, Shanghai Ranking
3, Center for World University Rankings

CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

",university_year,"university_id, num_students"
beer_factory,How many brands of bottle root beer were purchased between 4/3/2015 and 10/26/2015?,SELECT COUNT(brandid) FROM rootbeer WHERE containertype = 'Bottle' AND purchasedate BETWEEN '2015-04-03' AND '2015-10-26',"CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

","CREATE TABLE `customers` (
  CustomerID INTEGER,
  First TEXT,
  Last TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER,
  Email TEXT,
  PhoneNumber TEXT,
  FirstPurchaseDate DATE,
  SubscribedToEmailList TEXT,
  Gender TEXT
);
Sample rows from `customers`:
101811, Kenneth, Walton, 6715 Commonwealth Dr, Sacramento, CA, 94256, walton.k76@fastmail.com, (916) 918-1561, 2013-05-30, FALSE, M
103508, Madeleine, Jones, 3603 Leola Way, Sacramento, CA, 94258, j_madeleine@gmail.com, (916) 186-9423, 2013-02-06, FALSE, F
104939, Damen, Wheeler, 6740 Branwood Way, Orangevale, CA, 95662, dwheeler@outlook.com, (916) 164-1156, 2013-04-11, FALSE, M

CREATE TABLE `geolocation` (
  LocationID INTEGER REFERENCES location(LocationID),
  Latitude REAL,
  Longitude REAL
);
Sample rows from `geolocation`:
0, 0.0, 0.0
1, 38.566129, -121.426432
2, 38.559615, -121.42243

CREATE TABLE `location` (
  LocationID INTEGER REFERENCES geolocation(LocationID),
  LocationName TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER
);
Sample rows from `location`:
0, LOST, None, None, None, None
1, Sac State American River Courtyard, 6000 J St, Sacramento, CA, 95819
2, Sac State Union, 6000 J St, Sacramento, CA, 95819

CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

CREATE TABLE `rootbeerreview` (
  CustomerID INTEGER PRIMARY KEY REFERENCES customers(CustomerID),
  BrandID INTEGER PRIMARY KEY REFERENCES rootbeerbrand(BrandID),
  StarRating INTEGER,
  ReviewDate DATE,
  Review TEXT
);
Sample rows from `rootbeerreview`:
101811, 10012, 5, 2013-07-15, None
101811, 10014, 1, 2013-07-08, None
101811, 10015, 3, 2013-07-25, None

CREATE TABLE `transaction` (
  TransactionID INTEGER,
  CreditCardNumber INTEGER,
  CustomerID INTEGER REFERENCES customers(CustomerID),
  TransactionDate DATE,
  CreditCardType TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  RootBeerID INTEGER REFERENCES rootbeer(RootBeerID),
  PurchasePrice REAL
);
Sample rows from `transaction`:
100000, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105661, 3.0
100001, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105798, 3.0
100002, 6011583832864739, 864896, 2014-07-07, Discover, 2, 102514, 3.0

",rootbeer,"brandid, containertype, purchasedate"
coinmarketcap,What was the number of Bitcoins verifiably burned until 2013/4/28?,SELECT t2.max_supply - t2.total_supply FROM coins as t1 inner JOIN historical as t2 ON t1.id = t2.coin_id WHERE t2.date = '2013-04-28' AND t1.name = 'Bitcoin',"CREATE TABLE `coins` (
  id INTEGER,
  name TEXT,
  slug TEXT,
  symbol TEXT,
  status TEXT,
  category TEXT,
  description TEXT,
  subreddit TEXT,
  notice TEXT,
  tags TEXT,
  tag_names TEXT,
  website TEXT,
  platform_id INTEGER,
  date_added TEXT,
  date_launched TEXT
);
Sample rows from `coins`:
1, Bitcoin, bitcoin, BTC, active, coin, ## **What Is Bitcoin (BTC)?**\n\nBitcoin is a decentralized cryptocurrency originally described in a 2008 [whitepaper](https://coinmarketcap.com/alexandria/glossary/whitepaper) by a person, or group of people, using the alias [Satoshi Nakamoto](https://co, bitcoin, None, mineable, pow, sha-256, store-of-value, state-channels, coinbase-ventures-portfolio, three-arrows-capital-portfolio, polychain-capital-portfolio, binance-labs-portfolio, arrington-xrp-capital, blockchain-capital-portfolio, boostvc-portfolio, cms-holdings-, Mineable, PoW, SHA-256, Store of Value, State channels, Coinbase Ventures Portfolio, Three Arrows Capital Portfolio, Polychain Capital Portfolio, Binance Labs Portfolio, Arrington XRP capital, Blockchain Capital Portfolio, BoostVC Portfolio, CMS Holdings , https://bitcoin.org/, None, 2013-04-28T00:00:00.000Z, None
2, Litecoin, litecoin, LTC, active, coin, ## What Is Litecoin (LTC)?\n\nLitecoin (LTC) is a cryptocurrency that was designed to provide fast, secure and low-cost payments by leveraging the unique properties of [blockchain](https://coinmarketcap.com/alexandria/glossary/blockchain) technology. \n\n, litecoin, None, mineable, pow, scrypt, medium-of-exchange, binance-chain, Mineable, PoW, Scrypt, Medium of Exchange, Binance Chain, https://litecoin.org/, None, 2013-04-28T00:00:00.000Z, None
3, Namecoin, namecoin, NMC, active, coin, Namecoin (NMC) is a cryptocurrency . Users are able to generate NMC through the process of mining. Namecoin has a current supply of 14,736,400. The last known price of Namecoin is 2.14833562 USD and is up 0.40 over the last 24 hours. It is currently tradi, namecoin, None, mineable, pow, sha-256, platform, Mineable, PoW, SHA-256, Platform, https://www.namecoin.org/, None, 2013-04-28T00:00:00.000Z, None

CREATE TABLE `historical` (
  date DATE,
  coin_id INTEGER,
  cmc_rank INTEGER,
  market_cap REAL,
  price REAL,
  open REAL,
  high REAL,
  low REAL,
  close REAL,
  time_high TEXT,
  time_low TEXT,
  volume_24h REAL,
  percent_change_1h REAL,
  percent_change_24h REAL,
  percent_change_7d REAL,
  circulating_supply REAL,
  total_supply REAL,
  max_supply REAL,
  num_market_pairs INTEGER
);
Sample rows from `historical`:
2013-04-28, 1, 1, 1488566971.9558687, 134.210021972656, None, None, None, None, None, None, 0.0, 0.639231, None, None, 11091325.0, 11091325.0, 21000000.0, None
2013-04-28, 2, 2, 74637021.56790735, 4.34840488433838, None, None, None, None, None, None, 0.0, 0.799273, None, None, 17164230.0, 17164230.0, 84000000.0, None
2013-04-28, 5, 3, 7250186.647688276, 0.386524856090546, None, None, None, None, None, None, 0.0, -0.934763, None, None, 18757362.0, 18757362.0, None, None

","CREATE TABLE `coins` (
  id INTEGER,
  name TEXT,
  slug TEXT,
  symbol TEXT,
  status TEXT,
  category TEXT,
  description TEXT,
  subreddit TEXT,
  notice TEXT,
  tags TEXT,
  tag_names TEXT,
  website TEXT,
  platform_id INTEGER,
  date_added TEXT,
  date_launched TEXT
);
Sample rows from `coins`:
1, Bitcoin, bitcoin, BTC, active, coin, ## **What Is Bitcoin (BTC)?**\n\nBitcoin is a decentralized cryptocurrency originally described in a 2008 [whitepaper](https://coinmarketcap.com/alexandria/glossary/whitepaper) by a person, or group of people, using the alias [Satoshi Nakamoto](https://co, bitcoin, None, mineable, pow, sha-256, store-of-value, state-channels, coinbase-ventures-portfolio, three-arrows-capital-portfolio, polychain-capital-portfolio, binance-labs-portfolio, arrington-xrp-capital, blockchain-capital-portfolio, boostvc-portfolio, cms-holdings-, Mineable, PoW, SHA-256, Store of Value, State channels, Coinbase Ventures Portfolio, Three Arrows Capital Portfolio, Polychain Capital Portfolio, Binance Labs Portfolio, Arrington XRP capital, Blockchain Capital Portfolio, BoostVC Portfolio, CMS Holdings , https://bitcoin.org/, None, 2013-04-28T00:00:00.000Z, None
2, Litecoin, litecoin, LTC, active, coin, ## What Is Litecoin (LTC)?\n\nLitecoin (LTC) is a cryptocurrency that was designed to provide fast, secure and low-cost payments by leveraging the unique properties of [blockchain](https://coinmarketcap.com/alexandria/glossary/blockchain) technology. \n\n, litecoin, None, mineable, pow, scrypt, medium-of-exchange, binance-chain, Mineable, PoW, Scrypt, Medium of Exchange, Binance Chain, https://litecoin.org/, None, 2013-04-28T00:00:00.000Z, None
3, Namecoin, namecoin, NMC, active, coin, Namecoin (NMC) is a cryptocurrency . Users are able to generate NMC through the process of mining. Namecoin has a current supply of 14,736,400. The last known price of Namecoin is 2.14833562 USD and is up 0.40 over the last 24 hours. It is currently tradi, namecoin, None, mineable, pow, sha-256, platform, Mineable, PoW, SHA-256, Platform, https://www.namecoin.org/, None, 2013-04-28T00:00:00.000Z, None

CREATE TABLE `historical` (
  date DATE,
  coin_id INTEGER,
  cmc_rank INTEGER,
  market_cap REAL,
  price REAL,
  open REAL,
  high REAL,
  low REAL,
  close REAL,
  time_high TEXT,
  time_low TEXT,
  volume_24h REAL,
  percent_change_1h REAL,
  percent_change_24h REAL,
  percent_change_7d REAL,
  circulating_supply REAL,
  total_supply REAL,
  max_supply REAL,
  num_market_pairs INTEGER
);
Sample rows from `historical`:
2013-04-28, 1, 1, 1488566971.9558687, 134.210021972656, None, None, None, None, None, None, 0.0, 0.639231, None, None, 11091325.0, 11091325.0, 21000000.0, None
2013-04-28, 2, 2, 74637021.56790735, 4.34840488433838, None, None, None, None, None, None, 0.0, 0.799273, None, None, 17164230.0, 17164230.0, 84000000.0, None
2013-04-28, 5, 3, 7250186.647688276, 0.386524856090546, None, None, None, None, None, None, 0.0, -0.934763, None, None, 18757362.0, 18757362.0, None, None

","coins, historical","historical.max_supply, coins.id, historical.coin_id, historical.date, coins.name"
music_tracker,"Please list the titles of all the releases with the tag ""1980s"".",SELECT t1.groupname FROM torrents as t1 inner JOIN tags as t2 ON t1.id = t2.id WHERE t2.tag = '1980s',"CREATE TABLE `torrents` (
  groupName TEXT,
  totalSnatched INTEGER,
  artist TEXT,
  groupYear INTEGER,
  releaseType TEXT,
  groupId INTEGER,
  id INTEGER
);
Sample rows from `torrents`:
superappin&#39;, 239, grandmaster flash & the furious five, 1979, single, 720949, 0
spiderap / a corona jam, 156, ron hunt & ronnie g & the sm crew, 1979, single, 728752, 1
rapper&#39;s delight, 480, sugarhill gang, 1979, single, 18513, 2

CREATE TABLE `tags` (
  index INTEGER PRIMARY KEY,
  id INTEGER REFERENCES torrents(None),
  tag TEXT
);
Sample rows from `tags`:
0, 0, 1970s
1, 0, funk
2, 0, disco

","CREATE TABLE `torrents` (
  groupName TEXT,
  totalSnatched INTEGER,
  artist TEXT,
  groupYear INTEGER,
  releaseType TEXT,
  groupId INTEGER,
  id INTEGER
);
Sample rows from `torrents`:
superappin&#39;, 239, grandmaster flash & the furious five, 1979, single, 720949, 0
spiderap / a corona jam, 156, ron hunt & ronnie g & the sm crew, 1979, single, 728752, 1
rapper&#39;s delight, 480, sugarhill gang, 1979, single, 18513, 2

CREATE TABLE `tags` (
  index INTEGER PRIMARY KEY,
  id INTEGER REFERENCES torrents(None),
  tag TEXT
);
Sample rows from `tags`:
0, 0, 1970s
1, 0, funk
2, 0, disco

","torrents, tags","torrents.groupname, torrents.id, tags.id, tags.tag"
social_media,Please list the texts of the top 3 tweets with the most number of unique users seeing the tweet.,SELECT text FROM twitter ORDER BY reach DESC LIMIT 3,"CREATE TABLE `twitter` (
  TweetID TEXT PRIMARY KEY,
  Weekday TEXT,
  Hour INTEGER,
  Day INTEGER,
  Lang TEXT,
  IsReshare TEXT,
  Reach INTEGER,
  RetweetCount INTEGER,
  Likes INTEGER,
  Klout INTEGER,
  Sentiment REAL,
  text TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  UserID TEXT REFERENCES user(UserID)
);
Sample rows from `twitter`:
tw-682712873332805633, Thursday, 17, 31, en, FALSE, 44, 0, 0, 35, 0.0, We are hiring: Senior Software Engineer - Proto http://www.reqcloud.com/jobs/719865/?k=0LaPxXuFwczs1e32ZURJKrgCIDMQtRO7BquFSQthUKY&utm_source=twitter&utm_campaign=reqCloud_JobPost #job @awscloud #job #protocol #networking #aws #mediastreaming, 3751, tw-40932430
tw-682713045357998080, Thursday, 17, 31, en, TRUE, 1810, 5, 0, 53, 2.0, RT @CodeMineStatus: This is true Amazon Web Services https://aws.amazon.com/ #php #html #html5 #css #webdesign #seo #java #javascript htt, 3989, tw-3179389829
tw-682713219375476736, Thursday, 17, 31, en, FALSE, 282, 0, 0, 47, 0.0, Devops Engineer Aws Ansible Cassandra Mysql Ubuntu Ruby On Rails Jobs in Austin TX #Austin #TX #jobs #jobsearch https://www.jobfindly.com/devops-engineer-aws-ansible-cassandra-mysql-ubuntu-ruby-on-rails-jobs-austin-tx.html, 3741, tw-4624808414

","CREATE TABLE `location` (
  LocationID INTEGER,
  Country TEXT,
  State TEXT,
  StateCode TEXT,
  City TEXT
);
Sample rows from `location`:
1, Albania, Elbasan, AL, Elbasan
2, Albania, Tirane, AL, Tirana
3, Algeria, Souk Ahras, DZ, Souk Ahras

CREATE TABLE `user` (
  UserID TEXT PRIMARY KEY,
  Gender TEXT
);
Sample rows from `user`:
tw-1267804344, Unknown
tw-27229880, Male
tw-199664730, Male

CREATE TABLE `twitter` (
  TweetID TEXT PRIMARY KEY,
  Weekday TEXT,
  Hour INTEGER,
  Day INTEGER,
  Lang TEXT,
  IsReshare TEXT,
  Reach INTEGER,
  RetweetCount INTEGER,
  Likes INTEGER,
  Klout INTEGER,
  Sentiment REAL,
  text TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  UserID TEXT REFERENCES user(UserID)
);
Sample rows from `twitter`:
tw-682712873332805633, Thursday, 17, 31, en, FALSE, 44, 0, 0, 35, 0.0, We are hiring: Senior Software Engineer - Proto http://www.reqcloud.com/jobs/719865/?k=0LaPxXuFwczs1e32ZURJKrgCIDMQtRO7BquFSQthUKY&utm_source=twitter&utm_campaign=reqCloud_JobPost #job @awscloud #job #protocol #networking #aws #mediastreaming, 3751, tw-40932430
tw-682713045357998080, Thursday, 17, 31, en, TRUE, 1810, 5, 0, 53, 2.0, RT @CodeMineStatus: This is true Amazon Web Services https://aws.amazon.com/ #php #html #html5 #css #webdesign #seo #java #javascript htt, 3989, tw-3179389829
tw-682713219375476736, Thursday, 17, 31, en, FALSE, 282, 0, 0, 47, 0.0, Devops Engineer Aws Ansible Cassandra Mysql Ubuntu Ruby On Rails Jobs in Austin TX #Austin #TX #jobs #jobsearch https://www.jobfindly.com/devops-engineer-aws-ansible-cassandra-mysql-ubuntu-ruby-on-rails-jobs-austin-tx.html, 3741, tw-4624808414

",twitter,reach
movie_platform,How many films did Åke Sandgren direct?,SELECT COUNT(movie_title) FROM movies WHERE director_name = 'Åke Sandgren',"CREATE TABLE `movies` (
  movie_id INTEGER,
  movie_title TEXT,
  movie_release_year INTEGER,
  movie_url TEXT,
  movie_title_language TEXT,
  movie_popularity INTEGER,
  movie_image_url TEXT,
  director_id TEXT,
  director_name TEXT,
  director_url TEXT
);
Sample rows from `movies`:
1, La Antena, 2007, http://mubi.com/films/la-antena, en, 105, https://images.mubicdn.net/images/film/1/cache-7927-1581389497/image-w1280.jpg, 131, Esteban Sapir, http://mubi.com/cast/esteban-sapir
2, Elementary Particles, 2006, http://mubi.com/films/elementary-particles, en, 23, https://images.mubicdn.net/images/film/2/cache-512179-1581389841/image-w1280.jpg, 73, Oskar Roehler, http://mubi.com/cast/oskar-roehler
3, It's Winter, 2006, http://mubi.com/films/its-winter, en, 21, https://images.mubicdn.net/images/film/3/cache-7929-1481539519/image-w1280.jpg, 82, Rafi Pitts, http://mubi.com/cast/rafi-pitts

","CREATE TABLE `lists` (
  user_id INTEGER REFERENCES lists_users(user_id),
  list_id INTEGER,
  list_title TEXT,
  list_movie_number INTEGER,
  list_update_timestamp_utc TEXT,
  list_creation_timestamp_utc TEXT,
  list_followers INTEGER,
  list_url TEXT,
  list_comments INTEGER,
  list_description TEXT,
  list_cover_image_url TEXT,
  list_first_image_url TEXT,
  list_second_image_url TEXT,
  list_third_image_url TEXT
);
Sample rows from `lists`:
88260493, 1, Films that made your kid sister cry, 5, 2019-01-24 19:16:18, 2009-11-11 00:02:21, 5, http://mubi.com/lists/films-that-made-your-kid-sister-cry, 3, <p>Don’t be such a baby!!</p>
<p><strong>bold</strong></p>, https://assets.mubicdn.net/images/film/3822/image-w1280.jpg?1445914994, https://assets.mubicdn.net/images/film/3822/image-w320.jpg?1445914994, https://assets.mubicdn.net/images/film/506/image-w320.jpg?1543838422, https://assets.mubicdn.net/images/film/485/image-w320.jpg?1575331204
45204418, 2, Headscratchers, 3, 2018-12-03 15:12:20, 2009-11-11 00:05:11, 1, http://mubi.com/lists/headscratchers, 2, <p>Films that need at least two viewings to really make sense.</p>
<p>Or at least… they did for <em>me</em>.</p>, https://assets.mubicdn.net/images/film/4343/image-w1280.jpg?1583331932, https://assets.mubicdn.net/images/film/4343/image-w320.jpg?1583331932, https://assets.mubicdn.net/images/film/159/image-w320.jpg?1548864573, https://assets.mubicdn.net/images/film/142/image-w320.jpg?1544094102
48905025, 3, Sexy Time Movies, 7, 2019-05-30 03:00:07, 2009-11-11 00:20:00, 6, http://mubi.com/lists/sexy-time-movies, 5, <p>Films that get you in the mood…for love. In development.</p>
<p>Remarks</p>
<p><strong>Enter the Void</strong><br>
If you’ve seen <a href=""http://www.theauteurs.com/films/2377"" rel=""nofollow"">Enter the Void</a> then you’ll know why that’s on this list., https://assets.mubicdn.net/images/film/3491/image-w1280.jpg?1564112978, https://assets.mubicdn.net/images/film/3491/image-w320.jpg?1564112978, https://assets.mubicdn.net/images/film/2377/image-w320.jpg?1564675204, https://assets.mubicdn.net/images/film/2874/image-w320.jpg?1546574412

CREATE TABLE `movies` (
  movie_id INTEGER,
  movie_title TEXT,
  movie_release_year INTEGER,
  movie_url TEXT,
  movie_title_language TEXT,
  movie_popularity INTEGER,
  movie_image_url TEXT,
  director_id TEXT,
  director_name TEXT,
  director_url TEXT
);
Sample rows from `movies`:
1, La Antena, 2007, http://mubi.com/films/la-antena, en, 105, https://images.mubicdn.net/images/film/1/cache-7927-1581389497/image-w1280.jpg, 131, Esteban Sapir, http://mubi.com/cast/esteban-sapir
2, Elementary Particles, 2006, http://mubi.com/films/elementary-particles, en, 23, https://images.mubicdn.net/images/film/2/cache-512179-1581389841/image-w1280.jpg, 73, Oskar Roehler, http://mubi.com/cast/oskar-roehler
3, It's Winter, 2006, http://mubi.com/films/its-winter, en, 21, https://images.mubicdn.net/images/film/3/cache-7929-1481539519/image-w1280.jpg, 82, Rafi Pitts, http://mubi.com/cast/rafi-pitts

CREATE TABLE `ratings_users` (
  user_id INTEGER REFERENCES lists_users(user_id),
  rating_date_utc TEXT,
  user_trialist INTEGER,
  user_subscriber INTEGER,
  user_avatar_image_url TEXT,
  user_cover_image_url TEXT,
  user_eligible_for_trial INTEGER,
  user_has_payment_method INTEGER
);
Sample rows from `ratings_users`:
41579158, 2017-06-10, 0, 0, https://assets.mubicdn.net/images/avatars/74283/images-w150.jpg?1523895155, None, 1, 0
68654088, 2012-10-02, 0, 0, https://assets.mubicdn.net/images/avatars/27714/images-w150.jpg?1523889463, None, 1, 1
84114365, 2010-12-25, 0, 0, https://assets.mubicdn.net/images/avatars/1808/images-w150.jpg?1523883471, None, 1, 0

CREATE TABLE `lists_users` (
  user_id INTEGER PRIMARY KEY REFERENCES lists(user_id),
  list_id INTEGER PRIMARY KEY REFERENCES lists(list_id),
  list_update_date_utc TEXT,
  list_creation_date_utc TEXT,
  user_trialist INTEGER,
  user_subscriber INTEGER,
  user_avatar_image_url TEXT,
  user_cover_image_url TEXT,
  user_eligible_for_trial TEXT,
  user_has_payment_method TEXT
);
Sample rows from `lists_users`:
85981819, 1969, 2019-11-26, 2009-12-18, 1, 1, https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214, None, 0, 1
85981819, 3946, 2020-05-01, 2010-01-30, 1, 1, https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214, None, 0, 1
85981819, 6683, 2020-04-12, 2010-03-31, 1, 1, https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214, None, 0, 1

CREATE TABLE `ratings` (
  movie_id INTEGER REFERENCES movies(movie_id),
  rating_id INTEGER REFERENCES ratings(rating_id),
  rating_url TEXT,
  rating_score INTEGER,
  rating_timestamp_utc TEXT,
  critic TEXT,
  critic_likes INTEGER,
  critic_comments INTEGER,
  user_id INTEGER REFERENCES ratings_users(user_id) REFERENCES lists_users(user_id),
  user_trialist INTEGER,
  user_subscriber INTEGER,
  user_eligible_for_trial INTEGER,
  user_has_payment_method INTEGER
);
Sample rows from `ratings`:
1066, 15610495, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/15610495, 3, 2017-06-10 12:38:33, None, 0, 0, 41579158, 0, 0, 1, 0
1066, 10704606, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/10704606, 2, 2014-08-15 23:42:31, None, 0, 0, 85981819, 1, 1, 0, 1
1066, 10177114, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/10177114, 2, 2014-01-30 13:21:57, None, 0, 0, 4208563, 0, 0, 1, 1

",movies,"movie_title, director_name"
legislator,What is the ratio between famous current legislators and famous historical legislators?,SELECT cast(COUNT(case when wikipedia_id is NOT null then bioguide_id else 0 end) as real) * 100 / ( SELECT COUNT(case when wikipedia_id is NOT null then bioguide_id else 0 end) FROM historical ) FROM current,"CREATE TABLE `historical` (
  ballotpedia_id TEXT,
  bioguide_id TEXT PRIMARY KEY,
  bioguide_previous_id TEXT,
  birthday_bio TEXT,
  cspan_id TEXT,
  fec_id TEXT,
  first_name TEXT,
  gender_bio TEXT,
  google_entity_id_id TEXT,
  govtrack_id INTEGER,
  house_history_alternate_id TEXT,
  house_history_id REAL,
  icpsr_id REAL,
  last_name TEXT,
  lis_id TEXT,
  maplight_id TEXT,
  middle_name TEXT,
  nickname_name TEXT,
  official_full_name TEXT,
  opensecrets_id TEXT,
  religion_bio TEXT,
  suffix_name TEXT,
  thomas_id TEXT,
  votesmart_id TEXT,
  wikidata_id TEXT,
  wikipedia_id TEXT
);
Sample rows from `historical`:
None, B000226, None, 1745-04-02, None, None, Richard, M, kg:/m/02pz46, 401222, None, None, 507.0, Bassett, None, None, None, None, None, None, None, None, None, None, Q518823, Richard Bassett (politician)
None, B000546, None, 1742-03-21, None, None, Theodorick, M, kg:/m/033mf4, 401521, None, 9479.0, 786.0, Bland, None, None, None, None, None, None, None, None, None, None, Q1749152, Theodorick Bland (congressman)
None, B001086, None, 1743-06-16, None, None, Aedanus, M, kg:/m/03yccv, 402032, None, 10177.0, 1260.0, Burke, None, None, None, None, None, None, None, None, None, None, Q380504, Aedanus Burke

CREATE TABLE `current` (
  ballotpedia_id TEXT,
  bioguide_id TEXT PRIMARY KEY,
  birthday_bio DATE,
  cspan_id REAL PRIMARY KEY,
  fec_id TEXT,
  first_name TEXT,
  gender_bio TEXT,
  google_entity_id_id TEXT,
  govtrack_id INTEGER,
  house_history_id REAL,
  icpsr_id REAL,
  last_name TEXT,
  lis_id TEXT,
  maplight_id REAL,
  middle_name TEXT,
  nickname_name TEXT,
  official_full_name TEXT,
  opensecrets_id TEXT,
  religion_bio TEXT,
  suffix_name TEXT,
  thomas_id INTEGER,
  votesmart_id REAL,
  wikidata_id TEXT,
  wikipedia_id TEXT
);
Sample rows from `current`:
Sherrod Brown, B000944, 1952-11-09, 5051.0, ['H2OH13033', 'S6OH00163'], Sherrod, M, kg:/m/034s80, 400050, 9996.0, 29389.0, Brown, S307, 168.0, None, None, Sherrod Brown, N00003535, Lutheran, None, 136, 27018.0, Q381880, Sherrod Brown
Maria Cantwell, C000127, 1958-10-13, 26137.0, ['S8WA00194', 'H2WA01054'], Maria, F, kg:/m/01x68t, 300018, 10608.0, 39310.0, Cantwell, S275, 544.0, None, None, Maria Cantwell, N00007836, Roman Catholic, None, 172, 27122.0, Q22250, Maria Cantwell
Ben Cardin, C000141, 1943-10-05, 4004.0, ['H6MD03177', 'S6MD03177'], Benjamin, M, kg:/m/025k3k, 400064, 10629.0, 15408.0, Cardin, S308, 182.0, L., None, Benjamin L. Cardin, N00001955, Jewish, None, 174, 26888.0, Q723295, Ben Cardin

","CREATE TABLE `current` (
  ballotpedia_id TEXT,
  bioguide_id TEXT PRIMARY KEY,
  birthday_bio DATE,
  cspan_id REAL PRIMARY KEY,
  fec_id TEXT,
  first_name TEXT,
  gender_bio TEXT,
  google_entity_id_id TEXT,
  govtrack_id INTEGER,
  house_history_id REAL,
  icpsr_id REAL,
  last_name TEXT,
  lis_id TEXT,
  maplight_id REAL,
  middle_name TEXT,
  nickname_name TEXT,
  official_full_name TEXT,
  opensecrets_id TEXT,
  religion_bio TEXT,
  suffix_name TEXT,
  thomas_id INTEGER,
  votesmart_id REAL,
  wikidata_id TEXT,
  wikipedia_id TEXT
);
Sample rows from `current`:
Sherrod Brown, B000944, 1952-11-09, 5051.0, ['H2OH13033', 'S6OH00163'], Sherrod, M, kg:/m/034s80, 400050, 9996.0, 29389.0, Brown, S307, 168.0, None, None, Sherrod Brown, N00003535, Lutheran, None, 136, 27018.0, Q381880, Sherrod Brown
Maria Cantwell, C000127, 1958-10-13, 26137.0, ['S8WA00194', 'H2WA01054'], Maria, F, kg:/m/01x68t, 300018, 10608.0, 39310.0, Cantwell, S275, 544.0, None, None, Maria Cantwell, N00007836, Roman Catholic, None, 172, 27122.0, Q22250, Maria Cantwell
Ben Cardin, C000141, 1943-10-05, 4004.0, ['H6MD03177', 'S6MD03177'], Benjamin, M, kg:/m/025k3k, 400064, 10629.0, 15408.0, Cardin, S308, 182.0, L., None, Benjamin L. Cardin, N00001955, Jewish, None, 174, 26888.0, Q723295, Ben Cardin

CREATE TABLE `current-terms` (
  address TEXT,
  bioguide TEXT PRIMARY KEY REFERENCES current(bioguide_id),
  caucus TEXT,
  chamber TEXT,
  class REAL,
  contact_form TEXT,
  district REAL,
  end TEXT PRIMARY KEY,
  fax TEXT,
  last TEXT,
  name TEXT,
  office TEXT,
  party TEXT,
  party_affiliations TEXT,
  phone TEXT,
  relation TEXT,
  rss_url TEXT,
  start TEXT,
  state TEXT,
  state_rank TEXT,
  title TEXT,
  type TEXT,
  url TEXT
);
Sample rows from `current-terms`:
None, B000944, None, None, None, None, 13.0, 1995-01-03, None, None, None, None, Democrat, None, None, None, None, 1993-01-05, OH, None, None, rep, None
None, B000944, None, None, None, None, 13.0, 1997-01-03, None, None, None, None, Democrat, None, None, None, None, 1995-01-04, OH, None, None, rep, None
None, B000944, None, None, None, None, 13.0, 1999-01-03, None, None, None, None, Democrat, None, None, None, None, 1997-01-07, OH, None, None, rep, None

CREATE TABLE `historical` (
  ballotpedia_id TEXT,
  bioguide_id TEXT PRIMARY KEY,
  bioguide_previous_id TEXT,
  birthday_bio TEXT,
  cspan_id TEXT,
  fec_id TEXT,
  first_name TEXT,
  gender_bio TEXT,
  google_entity_id_id TEXT,
  govtrack_id INTEGER,
  house_history_alternate_id TEXT,
  house_history_id REAL,
  icpsr_id REAL,
  last_name TEXT,
  lis_id TEXT,
  maplight_id TEXT,
  middle_name TEXT,
  nickname_name TEXT,
  official_full_name TEXT,
  opensecrets_id TEXT,
  religion_bio TEXT,
  suffix_name TEXT,
  thomas_id TEXT,
  votesmart_id TEXT,
  wikidata_id TEXT,
  wikipedia_id TEXT
);
Sample rows from `historical`:
None, B000226, None, 1745-04-02, None, None, Richard, M, kg:/m/02pz46, 401222, None, None, 507.0, Bassett, None, None, None, None, None, None, None, None, None, None, Q518823, Richard Bassett (politician)
None, B000546, None, 1742-03-21, None, None, Theodorick, M, kg:/m/033mf4, 401521, None, 9479.0, 786.0, Bland, None, None, None, None, None, None, None, None, None, None, Q1749152, Theodorick Bland (congressman)
None, B001086, None, 1743-06-16, None, None, Aedanus, M, kg:/m/03yccv, 402032, None, 10177.0, 1260.0, Burke, None, None, None, None, None, None, None, None, None, None, Q380504, Aedanus Burke

CREATE TABLE `historical-terms` (
  address TEXT,
  bioguide TEXT PRIMARY KEY REFERENCES historical(bioguide_id),
  chamber TEXT,
  class REAL,
  contact_form TEXT,
  district REAL,
  end TEXT,
  fax TEXT,
  last TEXT,
  middle TEXT,
  name TEXT,
  office TEXT,
  party TEXT,
  party_affiliations TEXT,
  phone TEXT,
  relation TEXT,
  rss_url TEXT,
  start TEXT,
  state TEXT,
  state_rank TEXT,
  title TEXT,
  type TEXT,
  url TEXT
);
Sample rows from `historical-terms`:
None, B000226, None, 2.0, None, None, 1793-03-03, None, None, None, None, None, Anti-Administration, None, None, None, None, 1789-03-04, DE, None, None, sen, None
None, B000546, None, None, None, 9.0, 1791-03-03, None, None, None, None, None, None, None, None, None, None, 1789-03-04, VA, None, None, rep, None
None, B001086, None, None, None, 2.0, 1791-03-03, None, None, None, None, None, None, None, None, None, None, 1789-03-04, SC, None, None, rep, None

CREATE TABLE `social-media` (
  bioguide TEXT PRIMARY KEY REFERENCES current(bioguide_id),
  facebook TEXT,
  facebook_id REAL,
  govtrack REAL,
  instagram TEXT,
  instagram_id REAL,
  thomas INTEGER,
  twitter TEXT,
  twitter_id REAL,
  youtube TEXT,
  youtube_id TEXT
);
Sample rows from `social-media`:
R000600, congresswomanaumuaamata, 1537155909907320.0, 412664.0, None, None, 2222, RepAmata, 3026622545.0, None, UCGdrLQbt1PYDTPsampx4t1A
Y000064, RepToddYoung, 186203844738421.0, 412428.0, None, None, 2019, RepToddYoung, 234128524.0, RepToddYoung, UCuknj4PGn91gHDNAfboZEgQ
E000295, senjoniernst, 351671691660938.0, 412667.0, senjoniernst, 1582702853.0, 2283, SenJoniErnst, 2856787757.0, None, UCLwrmtF_84FIcK3TyMs4MIw

","historical, current","wikipedia_id, bioguide_id"
music_tracker,"An American rapper '2Pac' released his first solo album in 1991, how many years have passed until his next album was released?","SELECT ( SELECT groupyear FROM torrents WHERE artist LIKE '2Pac' AND releasetype LIKE 'album' ORDER BY groupyear LIMIT 1, 1 ) - groupyear FROM torrents WHERE artist LIKE '2Pac' AND releasetype LIKE 'album' AND groupyear = 1991","CREATE TABLE `torrents` (
  groupName TEXT,
  totalSnatched INTEGER,
  artist TEXT,
  groupYear INTEGER,
  releaseType TEXT,
  groupId INTEGER,
  id INTEGER
);
Sample rows from `torrents`:
superappin&#39;, 239, grandmaster flash & the furious five, 1979, single, 720949, 0
spiderap / a corona jam, 156, ron hunt & ronnie g & the sm crew, 1979, single, 728752, 1
rapper&#39;s delight, 480, sugarhill gang, 1979, single, 18513, 2

","CREATE TABLE `torrents` (
  groupName TEXT,
  totalSnatched INTEGER,
  artist TEXT,
  groupYear INTEGER,
  releaseType TEXT,
  groupId INTEGER,
  id INTEGER
);
Sample rows from `torrents`:
superappin&#39;, 239, grandmaster flash & the furious five, 1979, single, 720949, 0
spiderap / a corona jam, 156, ron hunt & ronnie g & the sm crew, 1979, single, 728752, 1
rapper&#39;s delight, 480, sugarhill gang, 1979, single, 18513, 2

CREATE TABLE `tags` (
  index INTEGER PRIMARY KEY,
  id INTEGER REFERENCES torrents(None),
  tag TEXT
);
Sample rows from `tags`:
0, 0, 1970s
1, 0, funk
2, 0, disco

",torrents,"groupyear, artist, releasetype"
sales,Give the full name of the customer who bought the most amount of products.,"SELECT t3.firstname, t3.middleinitial, t3.lastname FROM products as t1 inner JOIN sales as t2 ON t1.productid = t2.productid inner JOIN customers as t3 ON t2.customerid = t3.customerid ORDER BY t2.quantity * t1.price DESC LIMIT 1","CREATE TABLE `products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

CREATE TABLE `sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

CREATE TABLE `customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Employees`:
1, Abraham, e, Bennet
2, Reginald, l, Blotchet-Halls
3, Cheryl, a, Carson

CREATE TABLE `Products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

CREATE TABLE `Sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `Sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

","products, sales, customers","customers.firstname, customers.middleinitial, customers.lastname, products.productid, sales.productid, sales.customerid, customers.customerid, sales.quantity, products.price"
movielens,"How many female actresses appeared in the movie 2312852, what country was it in, and what was it's running time?","SELECT SUM(iif(t1.a_gender = 'F', 1, 0)) , t3.country, t3.runningtime FROM actors as t1 inner JOIN movies2actors as t2 ON t1.actorid = t2.actorid inner JOIN movies as t3 ON t2.movieid = t3.movieid WHERE t2.movieid = 2312852 GROUP BY t3.country, t3.runningtime","CREATE TABLE `actors` (
  actorid INTEGER,
  a_gender TEXT,
  a_quality INTEGER
);
Sample rows from `actors`:
4, M, 4
16, M, 0
28, M, 4

CREATE TABLE `movies2actors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  actorid INTEGER PRIMARY KEY REFERENCES actors(None),
  cast_num INTEGER
);
Sample rows from `movies2actors`:
1672580, 981535, 0
1672946, 1094968, 0
1673647, 149985, 0

CREATE TABLE `movies` (
  movieid INTEGER,
  year INTEGER,
  isEnglish TEXT,
  country TEXT,
  runningtime INTEGER
);
Sample rows from `movies`:
1672052, 3, T, other, 2
1672111, 4, T, other, 2
1672580, 4, T, USA, 3

","CREATE TABLE `users` (
  userid INTEGER,
  age TEXT,
  u_gender TEXT,
  occupation TEXT
);
Sample rows from `users`:
1, 1, F, 2
2, 56, M, 3
3, 25, M, 2

CREATE TABLE `directors` (
  directorid INTEGER,
  d_quality INTEGER PRIMARY KEY,
  avg_revenue INTEGER PRIMARY KEY
);
Sample rows from `directors`:
67, 4, 1
92, 2, 3
284, 4, 0

CREATE TABLE `actors` (
  actorid INTEGER,
  a_gender TEXT,
  a_quality INTEGER
);
Sample rows from `actors`:
4, M, 4
16, M, 0
28, M, 4

CREATE TABLE `movies` (
  movieid INTEGER,
  year INTEGER,
  isEnglish TEXT,
  country TEXT,
  runningtime INTEGER
);
Sample rows from `movies`:
1672052, 3, T, other, 2
1672111, 4, T, other, 2
1672580, 4, T, USA, 3

CREATE TABLE `movies2actors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  actorid INTEGER PRIMARY KEY REFERENCES actors(None),
  cast_num INTEGER
);
Sample rows from `movies2actors`:
1672580, 981535, 0
1672946, 1094968, 0
1673647, 149985, 0

CREATE TABLE `movies2directors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  directorid INTEGER PRIMARY KEY REFERENCES directors(None),
  genre TEXT
);
Sample rows from `movies2directors`:
1672111, 54934, Action
1672946, 188940, Action
1679461, 179783, Action

CREATE TABLE `u2base` (
  userid INTEGER PRIMARY KEY REFERENCES users(None),
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  rating TEXT
);
Sample rows from `u2base`:
2, 1964242, 1
2, 2219779, 1
3, 1856939, 1

","actors, movies2actors, movies","actors.a_gender, movies.country, movies.runningtime, actors.actorid, movies2actors.actorid, movies2actors.movieid, movies.movieid"
restaurant,Which county in northern California has the highest number of cities?,SELECT county FROM geographic WHERE region = 'northern california' GROUP BY county ORDER BY COUNT(city) DESC LIMIT 1,"CREATE TABLE `geographic` (
  city TEXT PRIMARY KEY,
  county TEXT,
  region TEXT
);
Sample rows from `geographic`:
alameda, alameda county, bay area
alamo, contra costa county, bay area
albany, alameda county, bay area

","CREATE TABLE `geographic` (
  city TEXT PRIMARY KEY,
  county TEXT,
  region TEXT
);
Sample rows from `geographic`:
alameda, alameda county, bay area
alamo, contra costa county, bay area
albany, alameda county, bay area

CREATE TABLE `generalinfo` (
  id_restaurant INTEGER,
  label TEXT,
  food_type TEXT,
  city TEXT REFERENCES geographic(city),
  review REAL
);
Sample rows from `generalinfo`:
1, sparky's diner, 24 hour diner, san francisco, 2.3
2, kabul afghan cuisine, afghani, san carlos, 3.8
3, helmand restaurant, afghani, san francisco, 4.0

CREATE TABLE `location` (
  id_restaurant INTEGER REFERENCES generalinfo(id_restaurant),
  street_num INTEGER,
  street_name TEXT,
  city TEXT REFERENCES geographic(city)
);
Sample rows from `location`:
1, 242, church st, san francisco
2, 135, el camino real, san carlos
3, 430, broadway, san francisco

",geographic,"county, region, city"
menu,How many dishes are included in the menu page ID 144?,SELECT COUNT(*) FROM menuitem WHERE menu_page_id = 144,"CREATE TABLE `menuitem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `menuitem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

","CREATE TABLE `Dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `Dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

CREATE TABLE `Menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `Menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

CREATE TABLE `MenuPage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `MenuPage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

CREATE TABLE `MenuItem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `MenuItem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

",menuitem,menu_page_id
beer_factory,Which brand of root beer did Jayne Collins give the lowest rating?,SELECT t3.brandname FROM customers as t1 inner JOIN rootbeerreview as t2 ON t1.customerid = t2.customerid inner JOIN rootbeerbrand as t3 ON t2.brandid = t3.brandid WHERE t1.first = 'Jayne' AND t1.last = 'Collins' AND t2.starrating = 1,"CREATE TABLE `customers` (
  CustomerID INTEGER,
  First TEXT,
  Last TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER,
  Email TEXT,
  PhoneNumber TEXT,
  FirstPurchaseDate DATE,
  SubscribedToEmailList TEXT,
  Gender TEXT
);
Sample rows from `customers`:
101811, Kenneth, Walton, 6715 Commonwealth Dr, Sacramento, CA, 94256, walton.k76@fastmail.com, (916) 918-1561, 2013-05-30, FALSE, M
103508, Madeleine, Jones, 3603 Leola Way, Sacramento, CA, 94258, j_madeleine@gmail.com, (916) 186-9423, 2013-02-06, FALSE, F
104939, Damen, Wheeler, 6740 Branwood Way, Orangevale, CA, 95662, dwheeler@outlook.com, (916) 164-1156, 2013-04-11, FALSE, M

CREATE TABLE `rootbeerreview` (
  CustomerID INTEGER PRIMARY KEY REFERENCES customers(CustomerID),
  BrandID INTEGER PRIMARY KEY REFERENCES rootbeerbrand(BrandID),
  StarRating INTEGER,
  ReviewDate DATE,
  Review TEXT
);
Sample rows from `rootbeerreview`:
101811, 10012, 5, 2013-07-15, None
101811, 10014, 1, 2013-07-08, None
101811, 10015, 3, 2013-07-25, None

CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

","CREATE TABLE `customers` (
  CustomerID INTEGER,
  First TEXT,
  Last TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER,
  Email TEXT,
  PhoneNumber TEXT,
  FirstPurchaseDate DATE,
  SubscribedToEmailList TEXT,
  Gender TEXT
);
Sample rows from `customers`:
101811, Kenneth, Walton, 6715 Commonwealth Dr, Sacramento, CA, 94256, walton.k76@fastmail.com, (916) 918-1561, 2013-05-30, FALSE, M
103508, Madeleine, Jones, 3603 Leola Way, Sacramento, CA, 94258, j_madeleine@gmail.com, (916) 186-9423, 2013-02-06, FALSE, F
104939, Damen, Wheeler, 6740 Branwood Way, Orangevale, CA, 95662, dwheeler@outlook.com, (916) 164-1156, 2013-04-11, FALSE, M

CREATE TABLE `geolocation` (
  LocationID INTEGER REFERENCES location(LocationID),
  Latitude REAL,
  Longitude REAL
);
Sample rows from `geolocation`:
0, 0.0, 0.0
1, 38.566129, -121.426432
2, 38.559615, -121.42243

CREATE TABLE `location` (
  LocationID INTEGER REFERENCES geolocation(LocationID),
  LocationName TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER
);
Sample rows from `location`:
0, LOST, None, None, None, None
1, Sac State American River Courtyard, 6000 J St, Sacramento, CA, 95819
2, Sac State Union, 6000 J St, Sacramento, CA, 95819

CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

CREATE TABLE `rootbeerreview` (
  CustomerID INTEGER PRIMARY KEY REFERENCES customers(CustomerID),
  BrandID INTEGER PRIMARY KEY REFERENCES rootbeerbrand(BrandID),
  StarRating INTEGER,
  ReviewDate DATE,
  Review TEXT
);
Sample rows from `rootbeerreview`:
101811, 10012, 5, 2013-07-15, None
101811, 10014, 1, 2013-07-08, None
101811, 10015, 3, 2013-07-25, None

CREATE TABLE `transaction` (
  TransactionID INTEGER,
  CreditCardNumber INTEGER,
  CustomerID INTEGER REFERENCES customers(CustomerID),
  TransactionDate DATE,
  CreditCardType TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  RootBeerID INTEGER REFERENCES rootbeer(RootBeerID),
  PurchasePrice REAL
);
Sample rows from `transaction`:
100000, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105661, 3.0
100001, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105798, 3.0
100002, 6011583832864739, 864896, 2014-07-07, Discover, 2, 102514, 3.0

","customers, rootbeerreview, rootbeerbrand","rootbeerbrand.brandname, customers.customerid, rootbeerreview.customerid, rootbeerreview.brandid, rootbeerbrand.brandid, customers.first, customers.last, rootbeerreview.starrating"
music_platform_2,List all the names of podcasts under the 'true crime' category.,SELECT t2.title FROM categories as t1 inner JOIN podcasts as t2 ON t2.podcast_id = t1.podcast_id WHERE t1.category = 'true-crime',"CREATE TABLE `categories` (
  podcast_id TEXT PRIMARY KEY REFERENCES podcasts(None),
  category TEXT PRIMARY KEY
);
Sample rows from `categories`:
c61aa81c9b929a66f0c1db6cbe5d8548, arts
c61aa81c9b929a66f0c1db6cbe5d8548, arts-performing-arts
c61aa81c9b929a66f0c1db6cbe5d8548, music

CREATE TABLE `podcasts` (
  podcast_id TEXT PRIMARY KEY,
  itunes_id INTEGER,
  slug TEXT,
  itunes_url TEXT,
  title TEXT
);
Sample rows from `podcasts`:
a00018b54eb342567c94dacfb2a3e504, 1313466221, scaling-global, https://podcasts.apple.com/us/podcast/scaling-global/id1313466221, Scaling Global
a00043d34e734b09246d17dc5d56f63c, 158973461, cornerstone-baptist-church-of-orlando, https://podcasts.apple.com/us/podcast/cornerstone-baptist-church-of-orlando/id158973461, Cornerstone Baptist Church of Orlando
a0004b1ef445af9dc84dad1e7821b1e3, 139076942, mystery-dancing-in-the-dark, https://podcasts.apple.com/us/podcast/mystery-dancing-in-the-dark/id139076942, Mystery: Dancing in the Dark

","CREATE TABLE `runs` (
  run_at TEXT,
  max_rowid INTEGER,
  reviews_added INTEGER
);
Sample rows from `runs`:
2021-05-10 02:53:00, 3266481, 1215223
2021-06-06 21:34:36, 3300773, 13139
2021-07-02 18:04:55, 3329699, 11561

CREATE TABLE `podcasts` (
  podcast_id TEXT PRIMARY KEY,
  itunes_id INTEGER,
  slug TEXT,
  itunes_url TEXT,
  title TEXT
);
Sample rows from `podcasts`:
a00018b54eb342567c94dacfb2a3e504, 1313466221, scaling-global, https://podcasts.apple.com/us/podcast/scaling-global/id1313466221, Scaling Global
a00043d34e734b09246d17dc5d56f63c, 158973461, cornerstone-baptist-church-of-orlando, https://podcasts.apple.com/us/podcast/cornerstone-baptist-church-of-orlando/id158973461, Cornerstone Baptist Church of Orlando
a0004b1ef445af9dc84dad1e7821b1e3, 139076942, mystery-dancing-in-the-dark, https://podcasts.apple.com/us/podcast/mystery-dancing-in-the-dark/id139076942, Mystery: Dancing in the Dark

CREATE TABLE `reviews` (
  podcast_id TEXT REFERENCES podcasts(None),
  title TEXT,
  content TEXT,
  rating INTEGER,
  author_id TEXT,
  created_at TEXT
);
Sample rows from `reviews`:
c61aa81c9b929a66f0c1db6cbe5d8548, really interesting!, Thanks for providing these insights.  Really enjoy the variety and depth -- please keep them coming!, 5, F7E5A318989779D, 2018-04-24T12:05:16-07:00
c61aa81c9b929a66f0c1db6cbe5d8548, Must listen for anyone interested in the arts!!!, Super excited to see this podcast grow. So many fun topics to talk about...Shari is really engaging. Definitely subscribing and would recommend to anyone interested in the arts!!, 5, F6BF5472689BD12, 2018-05-09T18:14:32-07:00
ad4f2bf69c72b8db75978423c25f379e, nauseatingly left, I'm a liberal myself, but its pretty obvious and annoying that they're trying to push their beliefs on the listeners. Get a more politically diverse production staff, we like to see issues from multiple point of views not just yours., 1, 1AB95B8E6E1309E, 2019-06-11T14:53:39-07:00

CREATE TABLE `categories` (
  podcast_id TEXT PRIMARY KEY REFERENCES podcasts(None),
  category TEXT PRIMARY KEY
);
Sample rows from `categories`:
c61aa81c9b929a66f0c1db6cbe5d8548, arts
c61aa81c9b929a66f0c1db6cbe5d8548, arts-performing-arts
c61aa81c9b929a66f0c1db6cbe5d8548, music

","categories, podcasts","podcasts.title, podcasts.podcast_id, categories.podcast_id, categories.category"
movielens,"Among the best actors, how many of them got a rating of 5 to the movies they starred?",SELECT COUNT(t1.actorid) FROM actors as t1 inner JOIN movies2actors as t2 ON t1.actorid = t2.actorid inner JOIN u2base as t3 ON t2.movieid = t3.movieid WHERE t1.a_quality = 5 AND t3.rating = 5,"CREATE TABLE `actors` (
  actorid INTEGER,
  a_gender TEXT,
  a_quality INTEGER
);
Sample rows from `actors`:
4, M, 4
16, M, 0
28, M, 4

CREATE TABLE `movies2actors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  actorid INTEGER PRIMARY KEY REFERENCES actors(None),
  cast_num INTEGER
);
Sample rows from `movies2actors`:
1672580, 981535, 0
1672946, 1094968, 0
1673647, 149985, 0

CREATE TABLE `u2base` (
  userid INTEGER PRIMARY KEY REFERENCES users(None),
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  rating TEXT
);
Sample rows from `u2base`:
2, 1964242, 1
2, 2219779, 1
3, 1856939, 1

","CREATE TABLE `users` (
  userid INTEGER,
  age TEXT,
  u_gender TEXT,
  occupation TEXT
);
Sample rows from `users`:
1, 1, F, 2
2, 56, M, 3
3, 25, M, 2

CREATE TABLE `directors` (
  directorid INTEGER,
  d_quality INTEGER PRIMARY KEY,
  avg_revenue INTEGER PRIMARY KEY
);
Sample rows from `directors`:
67, 4, 1
92, 2, 3
284, 4, 0

CREATE TABLE `actors` (
  actorid INTEGER,
  a_gender TEXT,
  a_quality INTEGER
);
Sample rows from `actors`:
4, M, 4
16, M, 0
28, M, 4

CREATE TABLE `movies` (
  movieid INTEGER,
  year INTEGER,
  isEnglish TEXT,
  country TEXT,
  runningtime INTEGER
);
Sample rows from `movies`:
1672052, 3, T, other, 2
1672111, 4, T, other, 2
1672580, 4, T, USA, 3

CREATE TABLE `movies2actors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  actorid INTEGER PRIMARY KEY REFERENCES actors(None),
  cast_num INTEGER
);
Sample rows from `movies2actors`:
1672580, 981535, 0
1672946, 1094968, 0
1673647, 149985, 0

CREATE TABLE `movies2directors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  directorid INTEGER PRIMARY KEY REFERENCES directors(None),
  genre TEXT
);
Sample rows from `movies2directors`:
1672111, 54934, Action
1672946, 188940, Action
1679461, 179783, Action

CREATE TABLE `u2base` (
  userid INTEGER PRIMARY KEY REFERENCES users(None),
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  rating TEXT
);
Sample rows from `u2base`:
2, 1964242, 1
2, 2219779, 1
3, 1856939, 1

","actors, movies2actors, u2base","actors.actorid, movies2actors.actorid, movies2actors.movieid, u2base.movieid, actors.a_quality, u2base.rating"
social_media,How many tweets are in English?,SELECT COUNT(tweetid) as tweet_number FROM twitter WHERE lang = 'en',"CREATE TABLE `twitter` (
  TweetID TEXT PRIMARY KEY,
  Weekday TEXT,
  Hour INTEGER,
  Day INTEGER,
  Lang TEXT,
  IsReshare TEXT,
  Reach INTEGER,
  RetweetCount INTEGER,
  Likes INTEGER,
  Klout INTEGER,
  Sentiment REAL,
  text TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  UserID TEXT REFERENCES user(UserID)
);
Sample rows from `twitter`:
tw-682712873332805633, Thursday, 17, 31, en, FALSE, 44, 0, 0, 35, 0.0, We are hiring: Senior Software Engineer - Proto http://www.reqcloud.com/jobs/719865/?k=0LaPxXuFwczs1e32ZURJKrgCIDMQtRO7BquFSQthUKY&utm_source=twitter&utm_campaign=reqCloud_JobPost #job @awscloud #job #protocol #networking #aws #mediastreaming, 3751, tw-40932430
tw-682713045357998080, Thursday, 17, 31, en, TRUE, 1810, 5, 0, 53, 2.0, RT @CodeMineStatus: This is true Amazon Web Services https://aws.amazon.com/ #php #html #html5 #css #webdesign #seo #java #javascript htt, 3989, tw-3179389829
tw-682713219375476736, Thursday, 17, 31, en, FALSE, 282, 0, 0, 47, 0.0, Devops Engineer Aws Ansible Cassandra Mysql Ubuntu Ruby On Rails Jobs in Austin TX #Austin #TX #jobs #jobsearch https://www.jobfindly.com/devops-engineer-aws-ansible-cassandra-mysql-ubuntu-ruby-on-rails-jobs-austin-tx.html, 3741, tw-4624808414

","CREATE TABLE `location` (
  LocationID INTEGER,
  Country TEXT,
  State TEXT,
  StateCode TEXT,
  City TEXT
);
Sample rows from `location`:
1, Albania, Elbasan, AL, Elbasan
2, Albania, Tirane, AL, Tirana
3, Algeria, Souk Ahras, DZ, Souk Ahras

CREATE TABLE `user` (
  UserID TEXT PRIMARY KEY,
  Gender TEXT
);
Sample rows from `user`:
tw-1267804344, Unknown
tw-27229880, Male
tw-199664730, Male

CREATE TABLE `twitter` (
  TweetID TEXT PRIMARY KEY,
  Weekday TEXT,
  Hour INTEGER,
  Day INTEGER,
  Lang TEXT,
  IsReshare TEXT,
  Reach INTEGER,
  RetweetCount INTEGER,
  Likes INTEGER,
  Klout INTEGER,
  Sentiment REAL,
  text TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  UserID TEXT REFERENCES user(UserID)
);
Sample rows from `twitter`:
tw-682712873332805633, Thursday, 17, 31, en, FALSE, 44, 0, 0, 35, 0.0, We are hiring: Senior Software Engineer - Proto http://www.reqcloud.com/jobs/719865/?k=0LaPxXuFwczs1e32ZURJKrgCIDMQtRO7BquFSQthUKY&utm_source=twitter&utm_campaign=reqCloud_JobPost #job @awscloud #job #protocol #networking #aws #mediastreaming, 3751, tw-40932430
tw-682713045357998080, Thursday, 17, 31, en, TRUE, 1810, 5, 0, 53, 2.0, RT @CodeMineStatus: This is true Amazon Web Services https://aws.amazon.com/ #php #html #html5 #css #webdesign #seo #java #javascript htt, 3989, tw-3179389829
tw-682713219375476736, Thursday, 17, 31, en, FALSE, 282, 0, 0, 47, 0.0, Devops Engineer Aws Ansible Cassandra Mysql Ubuntu Ruby On Rails Jobs in Austin TX #Austin #TX #jobs #jobsearch https://www.jobfindly.com/devops-engineer-aws-ansible-cassandra-mysql-ubuntu-ruby-on-rails-jobs-austin-tx.html, 3741, tw-4624808414

",twitter,"tweetid, lang"
chicago_crime,List the case number of crimes against society that happened in June 2018.,SELECT t2.case_number FROM fbi_code as t1 inner JOIN crime as t2 ON t2.fbi_code_no = t1.fbi_code_no WHERE t2.date LIKE '6/%/2018%' AND t1.crime_against = 'Society',"CREATE TABLE `fbi_code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `fbi_code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","CREATE TABLE `Community_Area` (
  community_area_no INTEGER,
  community_area_name TEXT,
  side TEXT,
  population TEXT
);
Sample rows from `Community_Area`:
1, Rogers Park, Far North , 54,991
2, West Ridge, Far North , 71,942
3, Uptown, Far North , 56,362

CREATE TABLE `District` (
  district_no INTEGER,
  district_name TEXT,
  address TEXT,
  zip_code INTEGER,
  commander TEXT,
  email TEXT,
  phone TEXT,
  fax TEXT,
  tty TEXT,
  twitter TEXT
);
Sample rows from `District`:
1, Central, 1718 South State Street, 60616, Jake M. Alderden,  CAPS001District@chicagopolice.org, 312-745-4290, 312-745-3694, 312-745-3693,  ChicagoCAPS01
2, Wentworth, 5101 South Wentworh Avenue, 60609, Joshua Wallace,  CAPS002District@chicagopolice.org, 312-747-8366, 312-747-5396, 312-747-6656,  ChicagoCAPS02
3, Grand Crossing, 7040 South Cottage Grove Ave, 60637, Eve T. Quarterman,  CAPS003District@chicagopolice.org, 312-747-8201, 312-747-5479, 312-747-9168,  ChicagoCAPS03

CREATE TABLE `FBI_Code` (
  fbi_code_no TEXT PRIMARY KEY,
  title TEXT,
  description TEXT,
  crime_against TEXT
);
Sample rows from `FBI_Code`:
01A, Homicide 1st & 2nd Degree, The killing of one human being by another., Persons
01B, Involuntary Manslaughter, The killing of another person through negligence., Persons
2, Criminal Sexual Assault, Any sexual act directed against another person, forcibly and/or against that person's will or not forcibly or against the person's will in instances where the victim is incapable of giving consent., Persons

CREATE TABLE `IUCR` (
  iucr_no TEXT PRIMARY KEY,
  primary_description TEXT,
  secondary_description TEXT,
  index_code TEXT
);
Sample rows from `IUCR`:
110, HOMICIDE, FIRST DEGREE MURDER, I
130, HOMICIDE, SECOND DEGREE MURDER, I
141, HOMICIDE, INVOLUNTARY MANSLAUGHTER, N

CREATE TABLE `Neighborhood` (
  neighborhood_name TEXT PRIMARY KEY,
  community_area_no INTEGER REFERENCES Community_Area(community_area_no)
);
Sample rows from `Neighborhood`:
Albany Park, 14
Altgeld Gardens, 54
Andersonville, 77

CREATE TABLE `Ward` (
  ward_no INTEGER,
  alderman_first_name TEXT,
  alderman_last_name TEXT,
  alderman_name_suffix TEXT,
  ward_office_address TEXT,
  ward_office_zip TEXT,
  ward_email TEXT,
  ward_office_phone TEXT,
  ward_office_fax TEXT,
  city_hall_office_room INTEGER,
  city_hall_office_phone TEXT,
  city_hall_office_fax TEXT,
  Population INTEGER
);
Sample rows from `Ward`:
1, Daniel, La Spata, None, 1958 N. Milwaukee Ave., 60647, info@the1stward.com, 872.206.2685, 312.448.8829, 200, None, None, 56149
2, Brian, Hopkins, None, 1400 N. Ashland, 60622, ward02@cityofchicago.org, 312.643.2299, None, 200, 312.744.6836, None, 55805
3, Pat, Dowell, None, 5046 S. State St., 60609, ward03@cityofchicago.org, 773.373.9273, None, 200, 312.744.8734, 312.744.6712, 53039

CREATE TABLE `Crime` (
  report_no INTEGER,
  case_number TEXT,
  date TEXT,
  block TEXT,
  iucr_no TEXT REFERENCES IUCR(iucr_no),
  location_description TEXT,
  arrest TEXT,
  domestic TEXT,
  beat INTEGER,
  district_no INTEGER REFERENCES District(district_no),
  ward_no INTEGER REFERENCES Ward(ward_no),
  community_area_no INTEGER REFERENCES Community_Area(community_area_no),
  fbi_code_no TEXT REFERENCES FBI_Code(fbi_code_no),
  latitude TEXT,
  longitude TEXT
);
Sample rows from `Crime`:
23757, JB100159, 1/1/2018 2:46, 039XX W CORNELIA AVE, 110, AUTO, FALSE, FALSE, 1732, 17, 30, 21, 01A, 41.94456125, -87.72668181
23758, JB100522, 1/1/2018 11:33, 026XX N HAMPDEN CT, 110, APARTMENT, FALSE, FALSE, 1935, 19, 43, 7, 01A, 41.92972657, -87.64092074
23759, JB100839, 1/1/2018 18:27, 047XX S PRINCETON AVE, 110, AUTO, FALSE, FALSE, 935, 9, 3, 37, 01A, 41.808168, -87.63333646

","fbi_code, crime","crime.case_number, crime.fbi_code_no, fbi_code.fbi_code_no, crime.date, fbi_code.crime_against"
soccer_2016,How many matches were held in 2011?,SELECT COUNT(match_id) FROM `match` WHERE match_Date LIKE '2011%',"CREATE TABLE `match` (
  Match_Id INTEGER,
  Team_1 INTEGER REFERENCES Team(Team_Id),
  Team_2 INTEGER REFERENCES Team(Team_Id),
  Match_Date DATE,
  Season_Id INTEGER REFERENCES Season(Season_Id),
  Venue_Id INTEGER REFERENCES Venue(Venue_Id),
  Toss_Winner INTEGER REFERENCES Team(Team_Id),
  Toss_Decide INTEGER REFERENCES Toss_Decision(Toss_Id),
  Win_Type INTEGER REFERENCES Win_By(Win_Id),
  Win_Margin INTEGER,
  Outcome_type INTEGER REFERENCES Out_Type(Out_Id),
  Match_Winner INTEGER REFERENCES Team(Team_Id),
  Man_of_the_Match INTEGER REFERENCES Player(Player_Id)
);
Sample rows from `match`:
335987, 2, 1, 2008-04-18, 1, 1, 2, 1, 1, 140, 1, 1, 2
335988, 4, 3, 2008-04-19, 1, 2, 3, 2, 1, 33, 1, 3, 19
335989, 6, 5, 2008-04-19, 1, 3, 5, 2, 2, 9, 1, 6, 90

","CREATE TABLE `Batting_Style` (
  Batting_Id INTEGER,
  Batting_hand TEXT
);
Sample rows from `Batting_Style`:
1, Left-hand bat
2, Right-hand bat

CREATE TABLE `Bowling_Style` (
  Bowling_Id INTEGER,
  Bowling_skill TEXT
);
Sample rows from `Bowling_Style`:
1, Right-arm medium
2, Right-arm offbreak
3, Right-arm fast-medium

CREATE TABLE `City` (
  City_Id INTEGER,
  City_Name TEXT,
  Country_id INTEGER
);
Sample rows from `City`:
1, Bangalore, 1
2, Chandigarh, 1
3, Delhi, 1

CREATE TABLE `Country` (
  Country_Id INTEGER REFERENCES Country(Country_Id),
  Country_Name TEXT
);
Sample rows from `Country`:
1, India
2, South Africa
3, U.A.E

CREATE TABLE `Extra_Type` (
  Extra_Id INTEGER,
  Extra_Name TEXT
);
Sample rows from `Extra_Type`:
1, legbyes
2, wides
3, byes

CREATE TABLE `Extra_Runs` (
  Match_Id INTEGER PRIMARY KEY,
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Extra_Type_Id INTEGER REFERENCES Extra_Type(Extra_Id),
  Extra_Runs INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Extra_Runs`:
335987, 1, 1, 1, 1, 1
335987, 1, 2, 2, 1, 2
335987, 1, 3, 2, 1, 1

CREATE TABLE `Out_Type` (
  Out_Id INTEGER,
  Out_Name TEXT
);
Sample rows from `Out_Type`:
1, caught
2, bowled
3, run out

CREATE TABLE `Outcome` (
  Outcome_Id INTEGER,
  Outcome_Type TEXT
);
Sample rows from `Outcome`:
1, Result
2, No Result
3, Superover

CREATE TABLE `Player` (
  Player_Id INTEGER,
  Player_Name TEXT,
  DOB DATE,
  Batting_hand INTEGER REFERENCES Batting_Style(Batting_Id),
  Bowling_skill INTEGER REFERENCES Bowling_Style(Bowling_Id),
  Country_Name INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Player`:
1, SC Ganguly, 1972-07-08, 1, 1, 1
2, BB McCullum, 1981-09-27, 2, 1, 4
3, RT Ponting, 1974-12-19, 2, 1, 5

CREATE TABLE `Rolee` (
  Role_Id INTEGER,
  Role_Desc TEXT
);
Sample rows from `Rolee`:
1, Captain
2, Keeper
3, Player

CREATE TABLE `Season` (
  Season_Id INTEGER,
  Man_of_the_Series INTEGER,
  Orange_Cap INTEGER,
  Purple_Cap INTEGER,
  Season_Year INTEGER
);
Sample rows from `Season`:
1, 32, 100, 102, 2008
2, 53, 18, 61, 2009
3, 133, 133, 131, 2010

CREATE TABLE `Team` (
  Team_Id INTEGER,
  Team_Name TEXT
);
Sample rows from `Team`:
1, Kolkata Knight Riders
2, Royal Challengers Bangalore
3, Chennai Super Kings

CREATE TABLE `Toss_Decision` (
  Toss_Id INTEGER,
  Toss_Name TEXT
);
Sample rows from `Toss_Decision`:
1, field
2, bat

CREATE TABLE `Umpire` (
  Umpire_Id INTEGER,
  Umpire_Name TEXT,
  Umpire_Country INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Umpire`:
1, Asad Rauf, 6
2, MR Benson, 10
3, Aleem Dar, 6

CREATE TABLE `Venue` (
  Venue_Id INTEGER,
  Venue_Name TEXT,
  City_Id INTEGER REFERENCES City(City_Id)
);
Sample rows from `Venue`:
1, M Chinnaswamy Stadium, 1
2, Punjab Cricket Association Stadium, 2
3, Feroz Shah Kotla, 3

CREATE TABLE `Win_By` (
  Win_Id INTEGER,
  Win_Type TEXT
);
Sample rows from `Win_By`:
1, runs
2, wickets
3, NO Result

CREATE TABLE `Match` (
  Match_Id INTEGER,
  Team_1 INTEGER REFERENCES Team(Team_Id),
  Team_2 INTEGER REFERENCES Team(Team_Id),
  Match_Date DATE,
  Season_Id INTEGER REFERENCES Season(Season_Id),
  Venue_Id INTEGER REFERENCES Venue(Venue_Id),
  Toss_Winner INTEGER REFERENCES Team(Team_Id),
  Toss_Decide INTEGER REFERENCES Toss_Decision(Toss_Id),
  Win_Type INTEGER REFERENCES Win_By(Win_Id),
  Win_Margin INTEGER,
  Outcome_type INTEGER REFERENCES Out_Type(Out_Id),
  Match_Winner INTEGER REFERENCES Team(Team_Id),
  Man_of_the_Match INTEGER REFERENCES Player(Player_Id)
);
Sample rows from `Match`:
335987, 2, 1, 2008-04-18, 1, 1, 2, 1, 1, 140, 1, 1, 2
335988, 4, 3, 2008-04-19, 1, 2, 3, 2, 1, 33, 1, 3, 19
335989, 6, 5, 2008-04-19, 1, 3, 5, 2, 2, 9, 1, 6, 90

CREATE TABLE `Ball_by_Ball` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Innings_No INTEGER PRIMARY KEY,
  Team_Batting INTEGER,
  Team_Bowling INTEGER,
  Striker_Batting_Position INTEGER,
  Striker INTEGER,
  Non_Striker INTEGER,
  Bowler INTEGER
);
Sample rows from `Ball_by_Ball`:
335987, 1, 1, 1, 1, 2, 1, 1, 2, 14
335987, 1, 1, 2, 2, 1, 1, 6, 7, 106
335987, 1, 2, 1, 1, 2, 2, 2, 1, 14

CREATE TABLE `Batsman_Scored` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Runs_Scored INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Batsman_Scored`:
335987, 1, 1, 0, 1
335987, 1, 1, 1, 2
335987, 1, 2, 0, 1

CREATE TABLE `Player_Match` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Player_Id INTEGER PRIMARY KEY REFERENCES Player(Player_Id),
  Role_Id INTEGER PRIMARY KEY REFERENCES Rolee(Role_Id),
  Team_Id INTEGER REFERENCES Team(Team_Id)
);
Sample rows from `Player_Match`:
335987, 1, 1, 1
335987, 2, 3, 1
335987, 3, 3, 1

CREATE TABLE `Wicket_Taken` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Player_Out INTEGER REFERENCES Player(Player_Id),
  Kind_Out INTEGER REFERENCES Out_Type(Out_Id),
  Fielders INTEGER REFERENCES Player(Player_Id),
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Wicket_Taken`:
335987, 2, 1, 6, 2, None, 2
335987, 3, 2, 8, 2, None, 2
335987, 5, 5, 9, 1, 83, 2

",match,"match_id, match_Date"
retails,"Among the items shipped in 1994 via truck, how many items were returned?","SELECT COUNT(l_orderkey) FrOM lineitem WHErE strftime('%Y', l_shipdate) = '1994' AND l_returnflag = 'r' AND l_shipmode = 'TrUCK'","CREATE TABLE `lineitem` (
  l_shipdate DATE,
  l_orderkey INTEGER PRIMARY KEY REFERENCES orders(o_orderkey),
  l_discount REAL,
  l_extendedprice REAL,
  l_suppkey INTEGER REFERENCES partsupp(ps_suppkey),
  l_quantity INTEGER,
  l_returnflag TEXT,
  l_partkey INTEGER REFERENCES partsupp(ps_partkey),
  l_linestatus TEXT,
  l_tax REAL,
  l_commitdate DATE,
  l_receiptdate DATE,
  l_shipmode TEXT,
  l_linenumber INTEGER PRIMARY KEY,
  l_shipinstruct TEXT,
  l_comment TEXT
);
Sample rows from `lineitem`:
1995-08-16, 1, 0.1, 58303.08, 6296, 33, N, 98768, O, 0.06, 1995-07-12, 1995-09-14, RAIL, 1, NONE, carefully bo
1995-08-13, 1, 0.09, 16947.7, 8776, 10, N, 23771, O, 0.08, 1995-07-09, 1995-08-27, TRUCK, 2, TAKE BACK RETURN, blithely regular pac
1995-06-17, 1, 0.1, 63642.9, 3859, 34, N, 113858, O, 0.08, 1995-05-22, 1995-06-30, SHIP, 3, COLLECT COD, ironic accounts sleep furiously silen

","CREATE TABLE `customer` (
  c_custkey INTEGER,
  c_mktsegment TEXT,
  c_nationkey INTEGER REFERENCES nation(n_nationkey),
  c_name TEXT,
  c_address TEXT,
  c_phone TEXT,
  c_acctbal REAL,
  c_comment TEXT
);
Sample rows from `customer`:
1, BUILDING, 8, Customer#000000001, KwX3hMHjZ6, 937-241-3198, 3560.03, ironic excuses detect slyly silent requests. requests according to the exc
2, MACHINERY, 16, Customer#000000002, ioUn,eqTTXOdo, 906-965-7556, 7550.21, final express accounts mold slyly. ironic accounts cajole! quickly express a
3, FURNITURE, 11, Customer#000000003, YddJqmIdouNT9Yj, 328-750-7603, -926.96, carefully express foxes sleep carefully. pending platelets sleep thinly for t

CREATE TABLE `lineitem` (
  l_shipdate DATE,
  l_orderkey INTEGER PRIMARY KEY REFERENCES orders(o_orderkey),
  l_discount REAL,
  l_extendedprice REAL,
  l_suppkey INTEGER REFERENCES partsupp(ps_suppkey),
  l_quantity INTEGER,
  l_returnflag TEXT,
  l_partkey INTEGER REFERENCES partsupp(ps_partkey),
  l_linestatus TEXT,
  l_tax REAL,
  l_commitdate DATE,
  l_receiptdate DATE,
  l_shipmode TEXT,
  l_linenumber INTEGER PRIMARY KEY,
  l_shipinstruct TEXT,
  l_comment TEXT
);
Sample rows from `lineitem`:
1995-08-16, 1, 0.1, 58303.08, 6296, 33, N, 98768, O, 0.06, 1995-07-12, 1995-09-14, RAIL, 1, NONE, carefully bo
1995-08-13, 1, 0.09, 16947.7, 8776, 10, N, 23771, O, 0.08, 1995-07-09, 1995-08-27, TRUCK, 2, TAKE BACK RETURN, blithely regular pac
1995-06-17, 1, 0.1, 63642.9, 3859, 34, N, 113858, O, 0.08, 1995-05-22, 1995-06-30, SHIP, 3, COLLECT COD, ironic accounts sleep furiously silen

CREATE TABLE `nation` (
  n_nationkey INTEGER,
  n_name TEXT,
  n_regionkey INTEGER REFERENCES region(r_regionkey),
  n_comment TEXT
);
Sample rows from `nation`:
0, ALGERIA, 0, slyly express pinto beans cajole idly. deposits use blithely unusual packages? fluffily final accounts x-r
1, ARGENTINA, 1, instructions detect blithely stealthily pending packages
2, BRAZIL, 1, blithely unusual deposits are quickly--

CREATE TABLE `orders` (
  o_orderdate DATE,
  o_orderkey INTEGER,
  o_custkey INTEGER REFERENCES customer(c_custkey),
  o_orderpriority TEXT,
  o_shippriority INTEGER,
  o_clerk TEXT,
  o_orderstatus TEXT,
  o_totalprice REAL,
  o_comment TEXT
);
Sample rows from `orders`:
1995-04-19, 1, 73100, 4-NOT SPECIFIED, 0, Clerk#000000916, P, 203198.56, final packages sleep blithely packa
1996-11-04, 2, 92861, 1-URGENT, 0, Clerk#000000373, O, 317719.99, final excuses about the ironic even deposits detect express request
1992-02-15, 3, 44875, 1-URGENT, 0, Clerk#000000485, F, 146674.98, final final deposits cajole foxes. blithely pendin

CREATE TABLE `part` (
  p_partkey INTEGER,
  p_type TEXT,
  p_size INTEGER,
  p_brand TEXT,
  p_name TEXT,
  p_container TEXT,
  p_mfgr TEXT,
  p_retailprice REAL,
  p_comment TEXT
);
Sample rows from `part`:
1, LARGE PLATED TIN, 31, Brand#43, burlywood plum powder puff mint, LG BAG, Manufacturer#4, 901.0, blithely busy reque
2, LARGE POLISHED STEEL, 4, Brand#55, hot spring dodger dim light, LG CASE, Manufacturer#5, 902.0, even ironic requests s
3, STANDARD PLATED COPPER, 30, Brand#53, dark slate grey steel misty, WRAP CASE, Manufacturer#5, 903.0, slyly ironic fox

CREATE TABLE `partsupp` (
  ps_partkey INTEGER PRIMARY KEY REFERENCES part(p_partkey),
  ps_suppkey INTEGER PRIMARY KEY REFERENCES supplier(s_suppkey),
  ps_supplycost REAL,
  ps_availqty INTEGER,
  ps_comment TEXT
);
Sample rows from `partsupp`:
1, 2, 400.75, 1111, carefully ironic deposits use against the carefully unusual accounts. slyly silent platelets nag quickly even
1, 2502, 702.61, 3999, slyly regular accounts serve carefully. asymptotes after the slyly even instructions cajole quickly ironic requests. pending dugouts about the slyly 
1, 5002, 383.95, 7411, carefully special ideas are slyly. slyly ironic epitaphs use pending pending foxes. furiously express pinto beans lose quiet even requests: special final packages ar

CREATE TABLE `region` (
  r_regionkey INTEGER,
  r_name TEXT,
  r_comment TEXT
);
Sample rows from `region`:
0, AFRICA, asymptotes sublate after the r
1, AMERICA, requests affix quickly final tithes. blithely even packages above the a
2, ASIA, accounts cajole carefully according to the carefully exp

CREATE TABLE `supplier` (
  s_suppkey INTEGER,
  s_nationkey INTEGER REFERENCES nation(n_nationkey),
  s_comment TEXT,
  s_name TEXT,
  s_address TEXT,
  s_phone TEXT,
  s_acctbal REAL
);
Sample rows from `supplier`:
1, 13, blithely final pearls are. instructions thra, Supplier#000000001, ,wWs4pnykQOFl8mgVCU8EZMXqZs1w, 800-807-9579, 3082.86
2, 5, requests integrate fluffily. fluffily ironic deposits wake. bold, Supplier#000000002, WkXT6MSAJrp4qWq3W9N, 348-617-6055, 3009.73
3, 22, carefully express ideas shall have to unwin, Supplier#000000003, KjUqa42JEHaRDVQTHV6Yq2h, 471-986-9888, 9159.78

",lineitem,"l_orderkey, l_shipdate, l_returnflag, l_shipmode"
software_company,How many teenagers are working as Machine-op-inspct?,SELECT COUNT(id) teenager_number FROM customers WHERE occupation = 'Machine-op-inspct' AND age >= 13 AND age <= 19,"CREATE TABLE `customers` (
  ID INTEGER,
  SEX TEXT,
  MARITAL_STATUS TEXT,
  GEOID INTEGER REFERENCES Demog(None),
  EDUCATIONNUM INTEGER,
  OCCUPATION TEXT,
  age INTEGER
);
Sample rows from `customers`:
0, Male, Never-married, 61, 7, Machine-op-inspct, 62
1, Male, Married-civ-spouse, 70, 3, Handlers-cleaners, 78
2, Male, Never-married, 53, 7, Machine-op-inspct, 69

","CREATE TABLE `Demog` (
  GEOID INTEGER,
  INHABITANTS_K REAL,
  INCOME_K REAL,
  A_VAR1 REAL,
  A_VAR2 REAL,
  A_VAR3 REAL,
  A_VAR4 REAL,
  A_VAR5 REAL,
  A_VAR6 REAL,
  A_VAR7 REAL,
  A_VAR8 REAL,
  A_VAR9 REAL,
  A_VAR10 REAL,
  A_VAR11 REAL,
  A_VAR12 REAL,
  A_VAR13 REAL,
  A_VAR14 REAL,
  A_VAR15 REAL,
  A_VAR16 REAL,
  A_VAR17 REAL,
  A_VAR18 REAL
);
Sample rows from `Demog`:
0, 30.046, 2631.47, 6.084, 5.79, 8.595, 3.935, 6.362, 8.626, 4.624, 8.324, 5.233, 6.232, 5.205, 8.231, 6.746, 8.679, 5.292, 3.5, 5.512, 5.783
1, 36.25, 3012.75, 4.604, 8.309, 6.007, 5.938, 8.773, 3.579, 6.349, 4.694, 6.884, 7.062, 7.319, 3.72, 6.405, 7.202, 4.932, 7.969, 8.15, 5.633
2, 47.645, 2192.41, 4.911, 8.557, 5.934, 6.494, 9.172, 3.202, 6.157, 4.822, 7.942, 7.901, 7.928, 2.33, 6.029, 6.455, 4.72, 8.564, 8.342, 4.938

CREATE TABLE `mailings3` (
  REFID INTEGER,
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `mailings3`:
60000, 2007-07-01 12:00:00.0, false
60001, 2007-07-01 12:00:00.0, false
60002, 2007-07-01 12:00:00.0, false

CREATE TABLE `Customers` (
  ID INTEGER,
  SEX TEXT,
  MARITAL_STATUS TEXT,
  GEOID INTEGER REFERENCES Demog(None),
  EDUCATIONNUM INTEGER,
  OCCUPATION TEXT,
  age INTEGER
);
Sample rows from `Customers`:
0, Male, Never-married, 61, 7, Machine-op-inspct, 62
1, Male, Married-civ-spouse, 70, 3, Handlers-cleaners, 78
2, Male, Never-married, 53, 7, Machine-op-inspct, 69

CREATE TABLE `Mailings1_2` (
  REFID INTEGER REFERENCES Customers(None),
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `Mailings1_2`:
0, 2007-02-01 12:00:00.0, false
1, 2007-02-01 12:00:00.0, false
2, 2007-02-01 12:00:00.0, false

CREATE TABLE `Sales` (
  EVENTID INTEGER,
  REFID INTEGER REFERENCES Customers(None),
  EVENT_DATE DATETIME,
  AMOUNT REAL
);
Sample rows from `Sales`:
0, 0, 2006-12-21 12:00:00.0, 17.907
1, 0, 2006-12-25 12:00:00.0, 17.401
2, 0, 2007-01-26 12:00:00.0, 13.277

",customers,"id, occupation, age"
coinmarketcap,Had Bitcoin's price increased or decreased on 2013/5/5 compared with the price 7 days before?,SELECT (case when t2.percent_change_7d > 0 then 'INCREasED' else 'DECREasED' end) FROM coins as t1 inner JOIN historical as t2 ON t1.id = t2.coin_id WHERE t2.date = '2013-05-05' AND t1.name = 'Bitcoin',"CREATE TABLE `coins` (
  id INTEGER,
  name TEXT,
  slug TEXT,
  symbol TEXT,
  status TEXT,
  category TEXT,
  description TEXT,
  subreddit TEXT,
  notice TEXT,
  tags TEXT,
  tag_names TEXT,
  website TEXT,
  platform_id INTEGER,
  date_added TEXT,
  date_launched TEXT
);
Sample rows from `coins`:
1, Bitcoin, bitcoin, BTC, active, coin, ## **What Is Bitcoin (BTC)?**\n\nBitcoin is a decentralized cryptocurrency originally described in a 2008 [whitepaper](https://coinmarketcap.com/alexandria/glossary/whitepaper) by a person, or group of people, using the alias [Satoshi Nakamoto](https://co, bitcoin, None, mineable, pow, sha-256, store-of-value, state-channels, coinbase-ventures-portfolio, three-arrows-capital-portfolio, polychain-capital-portfolio, binance-labs-portfolio, arrington-xrp-capital, blockchain-capital-portfolio, boostvc-portfolio, cms-holdings-, Mineable, PoW, SHA-256, Store of Value, State channels, Coinbase Ventures Portfolio, Three Arrows Capital Portfolio, Polychain Capital Portfolio, Binance Labs Portfolio, Arrington XRP capital, Blockchain Capital Portfolio, BoostVC Portfolio, CMS Holdings , https://bitcoin.org/, None, 2013-04-28T00:00:00.000Z, None
2, Litecoin, litecoin, LTC, active, coin, ## What Is Litecoin (LTC)?\n\nLitecoin (LTC) is a cryptocurrency that was designed to provide fast, secure and low-cost payments by leveraging the unique properties of [blockchain](https://coinmarketcap.com/alexandria/glossary/blockchain) technology. \n\n, litecoin, None, mineable, pow, scrypt, medium-of-exchange, binance-chain, Mineable, PoW, Scrypt, Medium of Exchange, Binance Chain, https://litecoin.org/, None, 2013-04-28T00:00:00.000Z, None
3, Namecoin, namecoin, NMC, active, coin, Namecoin (NMC) is a cryptocurrency . Users are able to generate NMC through the process of mining. Namecoin has a current supply of 14,736,400. The last known price of Namecoin is 2.14833562 USD and is up 0.40 over the last 24 hours. It is currently tradi, namecoin, None, mineable, pow, sha-256, platform, Mineable, PoW, SHA-256, Platform, https://www.namecoin.org/, None, 2013-04-28T00:00:00.000Z, None

CREATE TABLE `historical` (
  date DATE,
  coin_id INTEGER,
  cmc_rank INTEGER,
  market_cap REAL,
  price REAL,
  open REAL,
  high REAL,
  low REAL,
  close REAL,
  time_high TEXT,
  time_low TEXT,
  volume_24h REAL,
  percent_change_1h REAL,
  percent_change_24h REAL,
  percent_change_7d REAL,
  circulating_supply REAL,
  total_supply REAL,
  max_supply REAL,
  num_market_pairs INTEGER
);
Sample rows from `historical`:
2013-04-28, 1, 1, 1488566971.9558687, 134.210021972656, None, None, None, None, None, None, 0.0, 0.639231, None, None, 11091325.0, 11091325.0, 21000000.0, None
2013-04-28, 2, 2, 74637021.56790735, 4.34840488433838, None, None, None, None, None, None, 0.0, 0.799273, None, None, 17164230.0, 17164230.0, 84000000.0, None
2013-04-28, 5, 3, 7250186.647688276, 0.386524856090546, None, None, None, None, None, None, 0.0, -0.934763, None, None, 18757362.0, 18757362.0, None, None

","CREATE TABLE `coins` (
  id INTEGER,
  name TEXT,
  slug TEXT,
  symbol TEXT,
  status TEXT,
  category TEXT,
  description TEXT,
  subreddit TEXT,
  notice TEXT,
  tags TEXT,
  tag_names TEXT,
  website TEXT,
  platform_id INTEGER,
  date_added TEXT,
  date_launched TEXT
);
Sample rows from `coins`:
1, Bitcoin, bitcoin, BTC, active, coin, ## **What Is Bitcoin (BTC)?**\n\nBitcoin is a decentralized cryptocurrency originally described in a 2008 [whitepaper](https://coinmarketcap.com/alexandria/glossary/whitepaper) by a person, or group of people, using the alias [Satoshi Nakamoto](https://co, bitcoin, None, mineable, pow, sha-256, store-of-value, state-channels, coinbase-ventures-portfolio, three-arrows-capital-portfolio, polychain-capital-portfolio, binance-labs-portfolio, arrington-xrp-capital, blockchain-capital-portfolio, boostvc-portfolio, cms-holdings-, Mineable, PoW, SHA-256, Store of Value, State channels, Coinbase Ventures Portfolio, Three Arrows Capital Portfolio, Polychain Capital Portfolio, Binance Labs Portfolio, Arrington XRP capital, Blockchain Capital Portfolio, BoostVC Portfolio, CMS Holdings , https://bitcoin.org/, None, 2013-04-28T00:00:00.000Z, None
2, Litecoin, litecoin, LTC, active, coin, ## What Is Litecoin (LTC)?\n\nLitecoin (LTC) is a cryptocurrency that was designed to provide fast, secure and low-cost payments by leveraging the unique properties of [blockchain](https://coinmarketcap.com/alexandria/glossary/blockchain) technology. \n\n, litecoin, None, mineable, pow, scrypt, medium-of-exchange, binance-chain, Mineable, PoW, Scrypt, Medium of Exchange, Binance Chain, https://litecoin.org/, None, 2013-04-28T00:00:00.000Z, None
3, Namecoin, namecoin, NMC, active, coin, Namecoin (NMC) is a cryptocurrency . Users are able to generate NMC through the process of mining. Namecoin has a current supply of 14,736,400. The last known price of Namecoin is 2.14833562 USD and is up 0.40 over the last 24 hours. It is currently tradi, namecoin, None, mineable, pow, sha-256, platform, Mineable, PoW, SHA-256, Platform, https://www.namecoin.org/, None, 2013-04-28T00:00:00.000Z, None

CREATE TABLE `historical` (
  date DATE,
  coin_id INTEGER,
  cmc_rank INTEGER,
  market_cap REAL,
  price REAL,
  open REAL,
  high REAL,
  low REAL,
  close REAL,
  time_high TEXT,
  time_low TEXT,
  volume_24h REAL,
  percent_change_1h REAL,
  percent_change_24h REAL,
  percent_change_7d REAL,
  circulating_supply REAL,
  total_supply REAL,
  max_supply REAL,
  num_market_pairs INTEGER
);
Sample rows from `historical`:
2013-04-28, 1, 1, 1488566971.9558687, 134.210021972656, None, None, None, None, None, None, 0.0, 0.639231, None, None, 11091325.0, 11091325.0, 21000000.0, None
2013-04-28, 2, 2, 74637021.56790735, 4.34840488433838, None, None, None, None, None, None, 0.0, 0.799273, None, None, 17164230.0, 17164230.0, 84000000.0, None
2013-04-28, 5, 3, 7250186.647688276, 0.386524856090546, None, None, None, None, None, None, 0.0, -0.934763, None, None, 18757362.0, 18757362.0, None, None

","coins, historical","historical.percent_change_7d, coins.id, historical.coin_id, historical.date, coins.name"
world_development_indicators,Please calculate the percentage of Sub-Saharan African countries which are in the Special trade system.,SELECT  cast(SUM(case when region = 'Sub-Saharan Africa' then 1 else 0 end) as real) * 100 / COUNT(countrycode) FROM country WHERE systemoftrade = 'Special trade system',"CREATE TABLE `country` (
  CountryCode TEXT PRIMARY KEY,
  ShortName TEXT,
  TableName TEXT,
  LongName TEXT,
  Alpha2Code TEXT,
  CurrencyUnit TEXT,
  SpecialNotes TEXT,
  Region TEXT,
  IncomeGroup TEXT,
  Wb2Code TEXT,
  NationalAccountsBaseYear TEXT,
  NationalAccountsReferenceYear TEXT,
  SnaPriceValuation TEXT,
  LendingCategory TEXT,
  OtherGroups TEXT,
  SystemOfNationalAccounts TEXT,
  AlternativeConversionFactor TEXT,
  PppSurveyYear TEXT,
  BalanceOfPaymentsManualInUse TEXT,
  ExternalDebtReportingStatus TEXT,
  SystemOfTrade TEXT,
  GovernmentAccountingConcept TEXT,
  ImfDataDisseminationStandard TEXT,
  LatestPopulationCensus TEXT,
  LatestHouseholdSurvey TEXT,
  SourceOfMostRecentIncomeAndExpenditureData TEXT,
  VitalRegistrationComplete TEXT,
  LatestAgriculturalCensus TEXT,
  LatestIndustrialData INTEGER,
  LatestTradeData INTEGER,
  LatestWaterWithdrawalData INTEGER
);
Sample rows from `country`:
AFG, Afghanistan, Afghanistan, Islamic State of Afghanistan, AF, Afghan afghani, Fiscal year end: March 20; reporting period for national accounts data: FY (from 2013 are CY). National accounts data are sourced from the IMF and differ from the Central Statistics Organization numbers due to exclusion of the opium economy., South Asia, Low income, AF, 2002/03, , Value added at basic prices (VAB), IDA, HIPC, Country uses the 1993 System of National Accounts methodology., , , , Actual, General trade system, Consolidated central government, General Data Dissemination System (GDDS), 1979, Multiple Indicator Cluster Survey (MICS), 2010/11, Integrated household survey (IHS), 2008, , 2013/14, None, 2013, 2000
ALB, Albania, Albania, Republic of Albania, AL, Albanian lek, , Europe & Central Asia, Upper middle income, AL, Original chained constant price data are rescaled., 1996, Value added at basic prices (VAB), IBRD, , Country uses the 1993 System of National Accounts methodology., , Rolling, IMF Balance of Payments Manual, 6th edition., Actual, General trade system, Budgetary central government, General Data Dissemination System (GDDS), 2011, Demographic and Health Survey (DHS), 2008/09, Living Standards Measurement Study Survey (LSMS), 2011/12, Yes, 2012, 2011, 2013, 2006
DZA, Algeria, Algeria, People's Democratic Republic of Algeria, DZ, Algerian dinar, , Middle East & North Africa, Upper middle income, DZ, 1980, , Value added at basic prices (VAB), IBRD, , Country uses the 1968 System of National Accounts methodology., , 2011, IMF Balance of Payments Manual, 6th edition., Actual, Special trade system, Budgetary central government, General Data Dissemination System (GDDS), 2008, Multiple Indicator Cluster Survey (MICS), 2012, Integrated household survey (IHS), 1995, , , 2010, 2013, 2001

","CREATE TABLE `Country` (
  CountryCode TEXT PRIMARY KEY,
  ShortName TEXT,
  TableName TEXT,
  LongName TEXT,
  Alpha2Code TEXT,
  CurrencyUnit TEXT,
  SpecialNotes TEXT,
  Region TEXT,
  IncomeGroup TEXT,
  Wb2Code TEXT,
  NationalAccountsBaseYear TEXT,
  NationalAccountsReferenceYear TEXT,
  SnaPriceValuation TEXT,
  LendingCategory TEXT,
  OtherGroups TEXT,
  SystemOfNationalAccounts TEXT,
  AlternativeConversionFactor TEXT,
  PppSurveyYear TEXT,
  BalanceOfPaymentsManualInUse TEXT,
  ExternalDebtReportingStatus TEXT,
  SystemOfTrade TEXT,
  GovernmentAccountingConcept TEXT,
  ImfDataDisseminationStandard TEXT,
  LatestPopulationCensus TEXT,
  LatestHouseholdSurvey TEXT,
  SourceOfMostRecentIncomeAndExpenditureData TEXT,
  VitalRegistrationComplete TEXT,
  LatestAgriculturalCensus TEXT,
  LatestIndustrialData INTEGER,
  LatestTradeData INTEGER,
  LatestWaterWithdrawalData INTEGER
);
Sample rows from `Country`:
AFG, Afghanistan, Afghanistan, Islamic State of Afghanistan, AF, Afghan afghani, Fiscal year end: March 20; reporting period for national accounts data: FY (from 2013 are CY). National accounts data are sourced from the IMF and differ from the Central Statistics Organization numbers due to exclusion of the opium economy., South Asia, Low income, AF, 2002/03, , Value added at basic prices (VAB), IDA, HIPC, Country uses the 1993 System of National Accounts methodology., , , , Actual, General trade system, Consolidated central government, General Data Dissemination System (GDDS), 1979, Multiple Indicator Cluster Survey (MICS), 2010/11, Integrated household survey (IHS), 2008, , 2013/14, None, 2013, 2000
ALB, Albania, Albania, Republic of Albania, AL, Albanian lek, , Europe & Central Asia, Upper middle income, AL, Original chained constant price data are rescaled., 1996, Value added at basic prices (VAB), IBRD, , Country uses the 1993 System of National Accounts methodology., , Rolling, IMF Balance of Payments Manual, 6th edition., Actual, General trade system, Budgetary central government, General Data Dissemination System (GDDS), 2011, Demographic and Health Survey (DHS), 2008/09, Living Standards Measurement Study Survey (LSMS), 2011/12, Yes, 2012, 2011, 2013, 2006
DZA, Algeria, Algeria, People's Democratic Republic of Algeria, DZ, Algerian dinar, , Middle East & North Africa, Upper middle income, DZ, 1980, , Value added at basic prices (VAB), IBRD, , Country uses the 1968 System of National Accounts methodology., , 2011, IMF Balance of Payments Manual, 6th edition., Actual, Special trade system, Budgetary central government, General Data Dissemination System (GDDS), 2008, Multiple Indicator Cluster Survey (MICS), 2012, Integrated household survey (IHS), 1995, , , 2010, 2013, 2001

CREATE TABLE `Series` (
  SeriesCode TEXT PRIMARY KEY,
  Topic TEXT,
  IndicatorName TEXT,
  ShortDefinition TEXT,
  LongDefinition TEXT,
  UnitOfMeasure TEXT,
  Periodicity TEXT,
  BasePeriod TEXT,
  OtherNotes INTEGER,
  AggregationMethod TEXT,
  LimitationsAndExceptions TEXT,
  NotesFromOriginalSource TEXT,
  GeneralComments TEXT,
  Source TEXT,
  StatisticalConceptAndMethodology TEXT,
  DevelopmentRelevance TEXT,
  RelatedSourceLinks TEXT,
  OtherWebLinks INTEGER,
  RelatedIndicators INTEGER,
  LicenseType TEXT
);
Sample rows from `Series`:
BN.KLT.DINV.CD, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net (BoP, current US$), , Foreign direct investment are the net inflows of investment to acquire a lasting management interest (10 percent or more of voting stock) in an enterprise operating in an economy other than that of the investor. It is the sum of equity capital, reinvestme, , Annual, , None, , , , Note: Data are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6) and are only available from 2005 onwards. In BPM6, the headings of the financial account have been changed from credits and debits to net acquisition of financial ass, International Monetary Fund, Balance of Payments Statistics Yearbook and data files., , , , None, None, Open
BX.KLT.DINV.WD.GD.ZS, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net inflows (% of GDP), , Foreign direct investment are the net inflows of investment to acquire a lasting management interest (10 percent or more of voting stock) in an enterprise operating in an economy other than that of the investor. It is the sum of equity capital, reinvestme, , Annual, , None, Weighted average, FDI data do not give a complete picture of international investment in an economy. Balance of payments data on FDI do not include capital raised locally, an important source of investment financing in some developing countries. In addition, FDI data omit , , Note: Data starting from 2005 are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6)., International Monetary Fund, International Financial Statistics and Balance of Payments databases, World Bank, International Debt Statistics, and World Bank and OECD GDP estimates., Data on equity flows are based on balance of payments data reported by the International Monetary Fund (IMF). Foreign direct investment (FDI) data are supplemented by the World Bank staff estimates using data from the United Nations Conference on Trade an, Private financial flows - equity and debt - account for the bulk of development finance. Equity flows comprise foreign direct investment (FDI) and portfolio equity. Debt flows are financing raised through bond issuance, bank lending, and supplier credits., , None, None, Open
BX.KLT.DINV.CD.WD, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net inflows (BoP, current US$), , Foreign direct investment refers to direct investment equity flows in the reporting economy. It is the sum of equity capital, reinvestment of earnings, and other capital. Direct investment is a category of cross-border investment associated with a residen, , Annual, , None, Sum, FDI data do not give a complete picture of international investment in an economy. Balance of payments data on FDI do not include capital raised locally, an important source of investment financing in some developing countries. In addition, FDI data omit , , Note: Data starting from 2005 are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6)., International Monetary Fund, Balance of Payments database, supplemented by data from the United Nations Conference on Trade and Development and official national sources., Data on equity flows are based on balance of payments data reported by the International Monetary Fund (IMF). Foreign direct investment (FDI) data are supplemented by the World Bank staff estimates using data from the United Nations Conference on Trade an, Private financial flows - equity and debt - account for the bulk of development finance. Equity flows comprise foreign direct investment (FDI) and portfolio equity. Debt flows are financing raised through bond issuance, bank lending, and supplier credits., , None, None, Open

CREATE TABLE `CountryNotes` (
  Countrycode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Description TEXT
);
Sample rows from `CountryNotes`:
ABW, EG.EGY.PRIM.PP.KD, Sources: Estimated based on UN Energy Statistics (2014); World Development Indicators, WDI (2014)
ABW, EG.ELC.RNEW.ZS, Sources: UN Energy Statistics (2014)
ABW, EG.FEC.RNEW.ZS, Sources: UN Energy Statistics (2014)

CREATE TABLE `Footnotes` (
  Countrycode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Year TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `Footnotes`:
ABW, AG.LND.FRST.K2, YR1990, Not specified
ABW, AG.LND.FRST.K2, YR2000, Not specified
ABW, AG.LND.FRST.K2, YR2005, Not specified

CREATE TABLE `Indicators` (
  CountryName TEXT,
  CountryCode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  IndicatorName TEXT,
  IndicatorCode TEXT PRIMARY KEY,
  Year INTEGER PRIMARY KEY,
  Value INTEGER
);
Sample rows from `Indicators`:
Arab World, ARB, Adolescent fertility rate (births per 1,000 women ages 15-19), SP.ADO.TFRT, 1960, 133
Arab World, ARB, Age dependency ratio (% of working-age population), SP.POP.DPND, 1960, 87
Arab World, ARB, Age dependency ratio, old (% of working-age population), SP.POP.DPND.OL, 1960, 6

CREATE TABLE `SeriesNotes` (
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Year TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `SeriesNotes`:
SP.ADO.TFRT, YR1960, Interpolated using data for 1957 and 1962.
SP.DYN.AMRT.FE, YR1960, Interpolated using data for 1957 and 1962, if the data source is United Nations World Population Prospects.
SP.DYN.AMRT.MA, YR1960, Interpolated using data for 1957 and 1962, if the data source is United Nations World Population Prospects.

",country,"region, countrycode, systemoftrade"
movie_platform,Which movie has the highest average score in Mubi?,SELECT t2.movie_title FROM ratings as t1 inner JOIN movies as t2 ON t1.movie_id = t2.movie_id GROUP BY t2.movie_title ORDER BY SUM(t1.rating_score) / COUNT(t1.rating_id) DESC LIMIT 1,"CREATE TABLE `ratings` (
  movie_id INTEGER REFERENCES movies(movie_id),
  rating_id INTEGER REFERENCES ratings(rating_id),
  rating_url TEXT,
  rating_score INTEGER,
  rating_timestamp_utc TEXT,
  critic TEXT,
  critic_likes INTEGER,
  critic_comments INTEGER,
  user_id INTEGER REFERENCES ratings_users(user_id) REFERENCES lists_users(user_id),
  user_trialist INTEGER,
  user_subscriber INTEGER,
  user_eligible_for_trial INTEGER,
  user_has_payment_method INTEGER
);
Sample rows from `ratings`:
1066, 15610495, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/15610495, 3, 2017-06-10 12:38:33, None, 0, 0, 41579158, 0, 0, 1, 0
1066, 10704606, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/10704606, 2, 2014-08-15 23:42:31, None, 0, 0, 85981819, 1, 1, 0, 1
1066, 10177114, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/10177114, 2, 2014-01-30 13:21:57, None, 0, 0, 4208563, 0, 0, 1, 1

CREATE TABLE `movies` (
  movie_id INTEGER,
  movie_title TEXT,
  movie_release_year INTEGER,
  movie_url TEXT,
  movie_title_language TEXT,
  movie_popularity INTEGER,
  movie_image_url TEXT,
  director_id TEXT,
  director_name TEXT,
  director_url TEXT
);
Sample rows from `movies`:
1, La Antena, 2007, http://mubi.com/films/la-antena, en, 105, https://images.mubicdn.net/images/film/1/cache-7927-1581389497/image-w1280.jpg, 131, Esteban Sapir, http://mubi.com/cast/esteban-sapir
2, Elementary Particles, 2006, http://mubi.com/films/elementary-particles, en, 23, https://images.mubicdn.net/images/film/2/cache-512179-1581389841/image-w1280.jpg, 73, Oskar Roehler, http://mubi.com/cast/oskar-roehler
3, It's Winter, 2006, http://mubi.com/films/its-winter, en, 21, https://images.mubicdn.net/images/film/3/cache-7929-1481539519/image-w1280.jpg, 82, Rafi Pitts, http://mubi.com/cast/rafi-pitts

","CREATE TABLE `lists` (
  user_id INTEGER REFERENCES lists_users(user_id),
  list_id INTEGER,
  list_title TEXT,
  list_movie_number INTEGER,
  list_update_timestamp_utc TEXT,
  list_creation_timestamp_utc TEXT,
  list_followers INTEGER,
  list_url TEXT,
  list_comments INTEGER,
  list_description TEXT,
  list_cover_image_url TEXT,
  list_first_image_url TEXT,
  list_second_image_url TEXT,
  list_third_image_url TEXT
);
Sample rows from `lists`:
88260493, 1, Films that made your kid sister cry, 5, 2019-01-24 19:16:18, 2009-11-11 00:02:21, 5, http://mubi.com/lists/films-that-made-your-kid-sister-cry, 3, <p>Don’t be such a baby!!</p>
<p><strong>bold</strong></p>, https://assets.mubicdn.net/images/film/3822/image-w1280.jpg?1445914994, https://assets.mubicdn.net/images/film/3822/image-w320.jpg?1445914994, https://assets.mubicdn.net/images/film/506/image-w320.jpg?1543838422, https://assets.mubicdn.net/images/film/485/image-w320.jpg?1575331204
45204418, 2, Headscratchers, 3, 2018-12-03 15:12:20, 2009-11-11 00:05:11, 1, http://mubi.com/lists/headscratchers, 2, <p>Films that need at least two viewings to really make sense.</p>
<p>Or at least… they did for <em>me</em>.</p>, https://assets.mubicdn.net/images/film/4343/image-w1280.jpg?1583331932, https://assets.mubicdn.net/images/film/4343/image-w320.jpg?1583331932, https://assets.mubicdn.net/images/film/159/image-w320.jpg?1548864573, https://assets.mubicdn.net/images/film/142/image-w320.jpg?1544094102
48905025, 3, Sexy Time Movies, 7, 2019-05-30 03:00:07, 2009-11-11 00:20:00, 6, http://mubi.com/lists/sexy-time-movies, 5, <p>Films that get you in the mood…for love. In development.</p>
<p>Remarks</p>
<p><strong>Enter the Void</strong><br>
If you’ve seen <a href=""http://www.theauteurs.com/films/2377"" rel=""nofollow"">Enter the Void</a> then you’ll know why that’s on this list., https://assets.mubicdn.net/images/film/3491/image-w1280.jpg?1564112978, https://assets.mubicdn.net/images/film/3491/image-w320.jpg?1564112978, https://assets.mubicdn.net/images/film/2377/image-w320.jpg?1564675204, https://assets.mubicdn.net/images/film/2874/image-w320.jpg?1546574412

CREATE TABLE `movies` (
  movie_id INTEGER,
  movie_title TEXT,
  movie_release_year INTEGER,
  movie_url TEXT,
  movie_title_language TEXT,
  movie_popularity INTEGER,
  movie_image_url TEXT,
  director_id TEXT,
  director_name TEXT,
  director_url TEXT
);
Sample rows from `movies`:
1, La Antena, 2007, http://mubi.com/films/la-antena, en, 105, https://images.mubicdn.net/images/film/1/cache-7927-1581389497/image-w1280.jpg, 131, Esteban Sapir, http://mubi.com/cast/esteban-sapir
2, Elementary Particles, 2006, http://mubi.com/films/elementary-particles, en, 23, https://images.mubicdn.net/images/film/2/cache-512179-1581389841/image-w1280.jpg, 73, Oskar Roehler, http://mubi.com/cast/oskar-roehler
3, It's Winter, 2006, http://mubi.com/films/its-winter, en, 21, https://images.mubicdn.net/images/film/3/cache-7929-1481539519/image-w1280.jpg, 82, Rafi Pitts, http://mubi.com/cast/rafi-pitts

CREATE TABLE `ratings_users` (
  user_id INTEGER REFERENCES lists_users(user_id),
  rating_date_utc TEXT,
  user_trialist INTEGER,
  user_subscriber INTEGER,
  user_avatar_image_url TEXT,
  user_cover_image_url TEXT,
  user_eligible_for_trial INTEGER,
  user_has_payment_method INTEGER
);
Sample rows from `ratings_users`:
41579158, 2017-06-10, 0, 0, https://assets.mubicdn.net/images/avatars/74283/images-w150.jpg?1523895155, None, 1, 0
68654088, 2012-10-02, 0, 0, https://assets.mubicdn.net/images/avatars/27714/images-w150.jpg?1523889463, None, 1, 1
84114365, 2010-12-25, 0, 0, https://assets.mubicdn.net/images/avatars/1808/images-w150.jpg?1523883471, None, 1, 0

CREATE TABLE `lists_users` (
  user_id INTEGER PRIMARY KEY REFERENCES lists(user_id),
  list_id INTEGER PRIMARY KEY REFERENCES lists(list_id),
  list_update_date_utc TEXT,
  list_creation_date_utc TEXT,
  user_trialist INTEGER,
  user_subscriber INTEGER,
  user_avatar_image_url TEXT,
  user_cover_image_url TEXT,
  user_eligible_for_trial TEXT,
  user_has_payment_method TEXT
);
Sample rows from `lists_users`:
85981819, 1969, 2019-11-26, 2009-12-18, 1, 1, https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214, None, 0, 1
85981819, 3946, 2020-05-01, 2010-01-30, 1, 1, https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214, None, 0, 1
85981819, 6683, 2020-04-12, 2010-03-31, 1, 1, https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214, None, 0, 1

CREATE TABLE `ratings` (
  movie_id INTEGER REFERENCES movies(movie_id),
  rating_id INTEGER REFERENCES ratings(rating_id),
  rating_url TEXT,
  rating_score INTEGER,
  rating_timestamp_utc TEXT,
  critic TEXT,
  critic_likes INTEGER,
  critic_comments INTEGER,
  user_id INTEGER REFERENCES ratings_users(user_id) REFERENCES lists_users(user_id),
  user_trialist INTEGER,
  user_subscriber INTEGER,
  user_eligible_for_trial INTEGER,
  user_has_payment_method INTEGER
);
Sample rows from `ratings`:
1066, 15610495, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/15610495, 3, 2017-06-10 12:38:33, None, 0, 0, 41579158, 0, 0, 1, 0
1066, 10704606, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/10704606, 2, 2014-08-15 23:42:31, None, 0, 0, 85981819, 1, 1, 0, 1
1066, 10177114, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/10177114, 2, 2014-01-30 13:21:57, None, 0, 0, 4208563, 0, 0, 1, 1

","ratings, movies","movies.movie_title, ratings.movie_id, movies.movie_id, ratings.rating_score, ratings.rating_id"
soccer_2016,Who was the man of the series in 2013? Give the full name.,SELECT t2.player_name FROM season as t1 inner JOIN player as t2 ON t1.man_of_the_series = t2.player_Id WHERE t1.season_Year = 2013,"CREATE TABLE `season` (
  Season_Id INTEGER,
  Man_of_the_Series INTEGER,
  Orange_Cap INTEGER,
  Purple_Cap INTEGER,
  Season_Year INTEGER
);
Sample rows from `season`:
1, 32, 100, 102, 2008
2, 53, 18, 61, 2009
3, 133, 133, 131, 2010

CREATE TABLE `player` (
  Player_Id INTEGER,
  Player_Name TEXT,
  DOB DATE,
  Batting_hand INTEGER REFERENCES Batting_Style(Batting_Id),
  Bowling_skill INTEGER REFERENCES Bowling_Style(Bowling_Id),
  Country_Name INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `player`:
1, SC Ganguly, 1972-07-08, 1, 1, 1
2, BB McCullum, 1981-09-27, 2, 1, 4
3, RT Ponting, 1974-12-19, 2, 1, 5

","CREATE TABLE `Batting_Style` (
  Batting_Id INTEGER,
  Batting_hand TEXT
);
Sample rows from `Batting_Style`:
1, Left-hand bat
2, Right-hand bat

CREATE TABLE `Bowling_Style` (
  Bowling_Id INTEGER,
  Bowling_skill TEXT
);
Sample rows from `Bowling_Style`:
1, Right-arm medium
2, Right-arm offbreak
3, Right-arm fast-medium

CREATE TABLE `City` (
  City_Id INTEGER,
  City_Name TEXT,
  Country_id INTEGER
);
Sample rows from `City`:
1, Bangalore, 1
2, Chandigarh, 1
3, Delhi, 1

CREATE TABLE `Country` (
  Country_Id INTEGER REFERENCES Country(Country_Id),
  Country_Name TEXT
);
Sample rows from `Country`:
1, India
2, South Africa
3, U.A.E

CREATE TABLE `Extra_Type` (
  Extra_Id INTEGER,
  Extra_Name TEXT
);
Sample rows from `Extra_Type`:
1, legbyes
2, wides
3, byes

CREATE TABLE `Extra_Runs` (
  Match_Id INTEGER PRIMARY KEY,
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Extra_Type_Id INTEGER REFERENCES Extra_Type(Extra_Id),
  Extra_Runs INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Extra_Runs`:
335987, 1, 1, 1, 1, 1
335987, 1, 2, 2, 1, 2
335987, 1, 3, 2, 1, 1

CREATE TABLE `Out_Type` (
  Out_Id INTEGER,
  Out_Name TEXT
);
Sample rows from `Out_Type`:
1, caught
2, bowled
3, run out

CREATE TABLE `Outcome` (
  Outcome_Id INTEGER,
  Outcome_Type TEXT
);
Sample rows from `Outcome`:
1, Result
2, No Result
3, Superover

CREATE TABLE `Player` (
  Player_Id INTEGER,
  Player_Name TEXT,
  DOB DATE,
  Batting_hand INTEGER REFERENCES Batting_Style(Batting_Id),
  Bowling_skill INTEGER REFERENCES Bowling_Style(Bowling_Id),
  Country_Name INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Player`:
1, SC Ganguly, 1972-07-08, 1, 1, 1
2, BB McCullum, 1981-09-27, 2, 1, 4
3, RT Ponting, 1974-12-19, 2, 1, 5

CREATE TABLE `Rolee` (
  Role_Id INTEGER,
  Role_Desc TEXT
);
Sample rows from `Rolee`:
1, Captain
2, Keeper
3, Player

CREATE TABLE `Season` (
  Season_Id INTEGER,
  Man_of_the_Series INTEGER,
  Orange_Cap INTEGER,
  Purple_Cap INTEGER,
  Season_Year INTEGER
);
Sample rows from `Season`:
1, 32, 100, 102, 2008
2, 53, 18, 61, 2009
3, 133, 133, 131, 2010

CREATE TABLE `Team` (
  Team_Id INTEGER,
  Team_Name TEXT
);
Sample rows from `Team`:
1, Kolkata Knight Riders
2, Royal Challengers Bangalore
3, Chennai Super Kings

CREATE TABLE `Toss_Decision` (
  Toss_Id INTEGER,
  Toss_Name TEXT
);
Sample rows from `Toss_Decision`:
1, field
2, bat

CREATE TABLE `Umpire` (
  Umpire_Id INTEGER,
  Umpire_Name TEXT,
  Umpire_Country INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Umpire`:
1, Asad Rauf, 6
2, MR Benson, 10
3, Aleem Dar, 6

CREATE TABLE `Venue` (
  Venue_Id INTEGER,
  Venue_Name TEXT,
  City_Id INTEGER REFERENCES City(City_Id)
);
Sample rows from `Venue`:
1, M Chinnaswamy Stadium, 1
2, Punjab Cricket Association Stadium, 2
3, Feroz Shah Kotla, 3

CREATE TABLE `Win_By` (
  Win_Id INTEGER,
  Win_Type TEXT
);
Sample rows from `Win_By`:
1, runs
2, wickets
3, NO Result

CREATE TABLE `Match` (
  Match_Id INTEGER,
  Team_1 INTEGER REFERENCES Team(Team_Id),
  Team_2 INTEGER REFERENCES Team(Team_Id),
  Match_Date DATE,
  Season_Id INTEGER REFERENCES Season(Season_Id),
  Venue_Id INTEGER REFERENCES Venue(Venue_Id),
  Toss_Winner INTEGER REFERENCES Team(Team_Id),
  Toss_Decide INTEGER REFERENCES Toss_Decision(Toss_Id),
  Win_Type INTEGER REFERENCES Win_By(Win_Id),
  Win_Margin INTEGER,
  Outcome_type INTEGER REFERENCES Out_Type(Out_Id),
  Match_Winner INTEGER REFERENCES Team(Team_Id),
  Man_of_the_Match INTEGER REFERENCES Player(Player_Id)
);
Sample rows from `Match`:
335987, 2, 1, 2008-04-18, 1, 1, 2, 1, 1, 140, 1, 1, 2
335988, 4, 3, 2008-04-19, 1, 2, 3, 2, 1, 33, 1, 3, 19
335989, 6, 5, 2008-04-19, 1, 3, 5, 2, 2, 9, 1, 6, 90

CREATE TABLE `Ball_by_Ball` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Innings_No INTEGER PRIMARY KEY,
  Team_Batting INTEGER,
  Team_Bowling INTEGER,
  Striker_Batting_Position INTEGER,
  Striker INTEGER,
  Non_Striker INTEGER,
  Bowler INTEGER
);
Sample rows from `Ball_by_Ball`:
335987, 1, 1, 1, 1, 2, 1, 1, 2, 14
335987, 1, 1, 2, 2, 1, 1, 6, 7, 106
335987, 1, 2, 1, 1, 2, 2, 2, 1, 14

CREATE TABLE `Batsman_Scored` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Runs_Scored INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Batsman_Scored`:
335987, 1, 1, 0, 1
335987, 1, 1, 1, 2
335987, 1, 2, 0, 1

CREATE TABLE `Player_Match` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Player_Id INTEGER PRIMARY KEY REFERENCES Player(Player_Id),
  Role_Id INTEGER PRIMARY KEY REFERENCES Rolee(Role_Id),
  Team_Id INTEGER REFERENCES Team(Team_Id)
);
Sample rows from `Player_Match`:
335987, 1, 1, 1
335987, 2, 3, 1
335987, 3, 3, 1

CREATE TABLE `Wicket_Taken` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Player_Out INTEGER REFERENCES Player(Player_Id),
  Kind_Out INTEGER REFERENCES Out_Type(Out_Id),
  Fielders INTEGER REFERENCES Player(Player_Id),
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Wicket_Taken`:
335987, 2, 1, 6, 2, None, 2
335987, 3, 2, 8, 2, None, 2
335987, 5, 5, 9, 1, 83, 2

","season, player","player.player_name, season.man_of_the_series, player.player_Id, season.season_Year"
mental_health_survey,"How many different answers did the question ""Describe the conversation you had with your previous employer about your mental health, including their reactions and actions taken to address your mental health issue/questions."" get?","SELECT COUNT(DISTINCT t1.answertext) FROM answer as t1 inner JOIN question as t2 ON t1.questionID = t2.questionid WHERE t2.questiontext LIKE 'Describe the conversation you had with your previous employer about your mental health, including their reactions and actions taken to address your mental health issue/questions.'","CREATE TABLE `answer` (
  AnswerText TEXT,
  SurveyID INTEGER REFERENCES Survey(None),
  UserID INTEGER PRIMARY KEY,
  QuestionID INTEGER PRIMARY KEY REFERENCES Question(None)
);
Sample rows from `answer`:
37, 2014, 1, 1
44, 2014, 2, 1
32, 2014, 3, 1

CREATE TABLE `question` (
  questiontext TEXT,
  questionid INTEGER
);
Sample rows from `question`:
What is your age?, 1
What is your gender?, 2
What country do you live in?, 3

","CREATE TABLE `Question` (
  questiontext TEXT,
  questionid INTEGER
);
Sample rows from `Question`:
What is your age?, 1
What is your gender?, 2
What country do you live in?, 3

CREATE TABLE `Survey` (
  SurveyID INTEGER,
  Description TEXT
);
Sample rows from `Survey`:
2014, mental health survey for 2014
2016, mental health survey for 2016
2017, mental health survey for 2017

CREATE TABLE `Answer` (
  AnswerText TEXT,
  SurveyID INTEGER REFERENCES Survey(None),
  UserID INTEGER PRIMARY KEY,
  QuestionID INTEGER PRIMARY KEY REFERENCES Question(None)
);
Sample rows from `Answer`:
37, 2014, 1, 1
44, 2014, 2, 1
32, 2014, 3, 1

","answer, question","answer.answertext, answer.questionID, question.questionid, question.questiontext"
talkingdata,What is the average age of all the vivo device users?,SELECT AVG(age) FROM gender_age as t1 inner JOIN phone_brand_device_model2 as t2 ON t1.device_id = t2.device_id WHERE t2.phone_brand = 'vivo',"CREATE TABLE `gender_age` (
  device_id INTEGER REFERENCES phone_brand_device_model2(device_id),
  gender TEXT,
  age INTEGER,
  group TEXT
);
Sample rows from `gender_age`:
-9221086586254644858, M, 29, M29-31
-9221079146476055829, None, None, None
-9221066489596332354, M, 31, M29-31

CREATE TABLE `phone_brand_device_model2` (
  device_id INTEGER PRIMARY KEY,
  phone_brand TEXT PRIMARY KEY,
  device_model TEXT PRIMARY KEY
);
Sample rows from `phone_brand_device_model2`:
-9223321966609553846, 小米, 红米note
-9223067244542181226, vivo, Y19T
-9223042152723782980, 小米, MI 3

","CREATE TABLE `app_all` (
  app_id INTEGER
);
Sample rows from `app_all`:
-9223281467940916832
-9222877069545393219
-9222785464897897681

CREATE TABLE `app_events` (
  event_id INTEGER PRIMARY KEY REFERENCES events(event_id),
  app_id INTEGER PRIMARY KEY,
  is_installed INTEGER,
  is_active INTEGER
);
Sample rows from `app_events`:
2, -8942695423876075857, 1, 0
2, -8022267440849930066, 1, 0
2, -5720078949152207372, 1, 0

CREATE TABLE `app_events_relevant` (
  event_id INTEGER PRIMARY KEY REFERENCES events_relevant(event_id),
  app_id INTEGER PRIMARY KEY REFERENCES app_all(app_id),
  is_installed INTEGER,
  is_active INTEGER
);
Sample rows from `app_events_relevant`:
2, -8942695423876075857, 1, 0
2, -8022267440849930066, 1, 0
2, -5720078949152207372, 1, 0

CREATE TABLE `app_labels` (
  app_id INTEGER REFERENCES app_all(app_id),
  label_id INTEGER REFERENCES label_categories(label_id)
);
Sample rows from `app_labels`:
7324884708820027918, 251
-4494216993218550286, 251
6058196446775239644, 406

CREATE TABLE `events` (
  event_id INTEGER,
  device_id INTEGER,
  timestamp DATETIME,
  longitude REAL,
  latitude REAL
);
Sample rows from `events`:
1, 29182687948017175, 2016-05-01 00:55:25.0, 121.0, 31.0
2, -6401643145415154744, 2016-05-01 00:54:12.0, 104.0, 31.0
3, -4833982096941402721, 2016-05-01 00:08:05.0, 107.0, 30.0

CREATE TABLE `events_relevant` (
  event_id INTEGER,
  device_id INTEGER REFERENCES gender_age(device_id),
  timestamp DATETIME,
  longitude REAL,
  latitude REAL
);
Sample rows from `events_relevant`:
2, None, -8942695423876075857, 1.0, 0.0
6, None, -8764672938472212518, 1.0, 1.0
7, None, -9050100410106163077, 1.0, 0.0

CREATE TABLE `gender_age` (
  device_id INTEGER REFERENCES phone_brand_device_model2(device_id),
  gender TEXT,
  age INTEGER,
  group TEXT
);
Sample rows from `gender_age`:
-9221086586254644858, M, 29, M29-31
-9221079146476055829, None, None, None
-9221066489596332354, M, 31, M29-31

CREATE TABLE `gender_age_test` (
  device_id INTEGER
);
Sample rows from `gender_age_test`:
-9223321966609553846
-9223042152723782980
-9222896629442493034

CREATE TABLE `gender_age_train` (
  device_id INTEGER,
  gender TEXT,
  age INTEGER,
  group TEXT
);
Sample rows from `gender_age_train`:
-9223067244542181226, M, 24, M23-26
-9222956879900151005, M, 36, M32-38
-9222754701995937853, M, 29, M29-31

CREATE TABLE `label_categories` (
  label_id INTEGER,
  category TEXT
);
Sample rows from `label_categories`:
1, None
2, game-game type
3, game-Game themes

CREATE TABLE `phone_brand_device_model2` (
  device_id INTEGER PRIMARY KEY,
  phone_brand TEXT PRIMARY KEY,
  device_model TEXT PRIMARY KEY
);
Sample rows from `phone_brand_device_model2`:
-9223321966609553846, 小米, 红米note
-9223067244542181226, vivo, Y19T
-9223042152723782980, 小米, MI 3

CREATE TABLE `sample_submission` (
  device_id INTEGER,
  F23- REAL,
  F24-26 REAL,
  F27-28 REAL,
  F29-32 REAL,
  F33-42 REAL,
  F43+ REAL,
  M22- REAL,
  M23-26 REAL,
  M27-28 REAL,
  M29-31 REAL,
  M32-38 REAL,
  M39+ REAL
);
Sample rows from `sample_submission`:
-9223321966609553846, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833
-9223042152723782980, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833
-9222896629442493034, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833

","gender_age, phone_brand_device_model2","age, gender_age.device_id, phone_brand_device_model2.device_id, phone_brand_device_model2.phone_brand"
soccer_2016,"Who among the players won both ""Man of the Series"" and ""Orange Cap"" in the same season?",SELECT t1.player_name FROM player as t1 inner JOIN season as t2 ON t1.player_Id = t2.man_of_the_series = t2.orange_cap,"CREATE TABLE `player` (
  Player_Id INTEGER,
  Player_Name TEXT,
  DOB DATE,
  Batting_hand INTEGER REFERENCES Batting_Style(Batting_Id),
  Bowling_skill INTEGER REFERENCES Bowling_Style(Bowling_Id),
  Country_Name INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `player`:
1, SC Ganguly, 1972-07-08, 1, 1, 1
2, BB McCullum, 1981-09-27, 2, 1, 4
3, RT Ponting, 1974-12-19, 2, 1, 5

CREATE TABLE `season` (
  Season_Id INTEGER,
  Man_of_the_Series INTEGER,
  Orange_Cap INTEGER,
  Purple_Cap INTEGER,
  Season_Year INTEGER
);
Sample rows from `season`:
1, 32, 100, 102, 2008
2, 53, 18, 61, 2009
3, 133, 133, 131, 2010

","CREATE TABLE `Batting_Style` (
  Batting_Id INTEGER,
  Batting_hand TEXT
);
Sample rows from `Batting_Style`:
1, Left-hand bat
2, Right-hand bat

CREATE TABLE `Bowling_Style` (
  Bowling_Id INTEGER,
  Bowling_skill TEXT
);
Sample rows from `Bowling_Style`:
1, Right-arm medium
2, Right-arm offbreak
3, Right-arm fast-medium

CREATE TABLE `City` (
  City_Id INTEGER,
  City_Name TEXT,
  Country_id INTEGER
);
Sample rows from `City`:
1, Bangalore, 1
2, Chandigarh, 1
3, Delhi, 1

CREATE TABLE `Country` (
  Country_Id INTEGER REFERENCES Country(Country_Id),
  Country_Name TEXT
);
Sample rows from `Country`:
1, India
2, South Africa
3, U.A.E

CREATE TABLE `Extra_Type` (
  Extra_Id INTEGER,
  Extra_Name TEXT
);
Sample rows from `Extra_Type`:
1, legbyes
2, wides
3, byes

CREATE TABLE `Extra_Runs` (
  Match_Id INTEGER PRIMARY KEY,
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Extra_Type_Id INTEGER REFERENCES Extra_Type(Extra_Id),
  Extra_Runs INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Extra_Runs`:
335987, 1, 1, 1, 1, 1
335987, 1, 2, 2, 1, 2
335987, 1, 3, 2, 1, 1

CREATE TABLE `Out_Type` (
  Out_Id INTEGER,
  Out_Name TEXT
);
Sample rows from `Out_Type`:
1, caught
2, bowled
3, run out

CREATE TABLE `Outcome` (
  Outcome_Id INTEGER,
  Outcome_Type TEXT
);
Sample rows from `Outcome`:
1, Result
2, No Result
3, Superover

CREATE TABLE `Player` (
  Player_Id INTEGER,
  Player_Name TEXT,
  DOB DATE,
  Batting_hand INTEGER REFERENCES Batting_Style(Batting_Id),
  Bowling_skill INTEGER REFERENCES Bowling_Style(Bowling_Id),
  Country_Name INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Player`:
1, SC Ganguly, 1972-07-08, 1, 1, 1
2, BB McCullum, 1981-09-27, 2, 1, 4
3, RT Ponting, 1974-12-19, 2, 1, 5

CREATE TABLE `Rolee` (
  Role_Id INTEGER,
  Role_Desc TEXT
);
Sample rows from `Rolee`:
1, Captain
2, Keeper
3, Player

CREATE TABLE `Season` (
  Season_Id INTEGER,
  Man_of_the_Series INTEGER,
  Orange_Cap INTEGER,
  Purple_Cap INTEGER,
  Season_Year INTEGER
);
Sample rows from `Season`:
1, 32, 100, 102, 2008
2, 53, 18, 61, 2009
3, 133, 133, 131, 2010

CREATE TABLE `Team` (
  Team_Id INTEGER,
  Team_Name TEXT
);
Sample rows from `Team`:
1, Kolkata Knight Riders
2, Royal Challengers Bangalore
3, Chennai Super Kings

CREATE TABLE `Toss_Decision` (
  Toss_Id INTEGER,
  Toss_Name TEXT
);
Sample rows from `Toss_Decision`:
1, field
2, bat

CREATE TABLE `Umpire` (
  Umpire_Id INTEGER,
  Umpire_Name TEXT,
  Umpire_Country INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Umpire`:
1, Asad Rauf, 6
2, MR Benson, 10
3, Aleem Dar, 6

CREATE TABLE `Venue` (
  Venue_Id INTEGER,
  Venue_Name TEXT,
  City_Id INTEGER REFERENCES City(City_Id)
);
Sample rows from `Venue`:
1, M Chinnaswamy Stadium, 1
2, Punjab Cricket Association Stadium, 2
3, Feroz Shah Kotla, 3

CREATE TABLE `Win_By` (
  Win_Id INTEGER,
  Win_Type TEXT
);
Sample rows from `Win_By`:
1, runs
2, wickets
3, NO Result

CREATE TABLE `Match` (
  Match_Id INTEGER,
  Team_1 INTEGER REFERENCES Team(Team_Id),
  Team_2 INTEGER REFERENCES Team(Team_Id),
  Match_Date DATE,
  Season_Id INTEGER REFERENCES Season(Season_Id),
  Venue_Id INTEGER REFERENCES Venue(Venue_Id),
  Toss_Winner INTEGER REFERENCES Team(Team_Id),
  Toss_Decide INTEGER REFERENCES Toss_Decision(Toss_Id),
  Win_Type INTEGER REFERENCES Win_By(Win_Id),
  Win_Margin INTEGER,
  Outcome_type INTEGER REFERENCES Out_Type(Out_Id),
  Match_Winner INTEGER REFERENCES Team(Team_Id),
  Man_of_the_Match INTEGER REFERENCES Player(Player_Id)
);
Sample rows from `Match`:
335987, 2, 1, 2008-04-18, 1, 1, 2, 1, 1, 140, 1, 1, 2
335988, 4, 3, 2008-04-19, 1, 2, 3, 2, 1, 33, 1, 3, 19
335989, 6, 5, 2008-04-19, 1, 3, 5, 2, 2, 9, 1, 6, 90

CREATE TABLE `Ball_by_Ball` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Innings_No INTEGER PRIMARY KEY,
  Team_Batting INTEGER,
  Team_Bowling INTEGER,
  Striker_Batting_Position INTEGER,
  Striker INTEGER,
  Non_Striker INTEGER,
  Bowler INTEGER
);
Sample rows from `Ball_by_Ball`:
335987, 1, 1, 1, 1, 2, 1, 1, 2, 14
335987, 1, 1, 2, 2, 1, 1, 6, 7, 106
335987, 1, 2, 1, 1, 2, 2, 2, 1, 14

CREATE TABLE `Batsman_Scored` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Runs_Scored INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Batsman_Scored`:
335987, 1, 1, 0, 1
335987, 1, 1, 1, 2
335987, 1, 2, 0, 1

CREATE TABLE `Player_Match` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Player_Id INTEGER PRIMARY KEY REFERENCES Player(Player_Id),
  Role_Id INTEGER PRIMARY KEY REFERENCES Rolee(Role_Id),
  Team_Id INTEGER REFERENCES Team(Team_Id)
);
Sample rows from `Player_Match`:
335987, 1, 1, 1
335987, 2, 3, 1
335987, 3, 3, 1

CREATE TABLE `Wicket_Taken` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Player_Out INTEGER REFERENCES Player(Player_Id),
  Kind_Out INTEGER REFERENCES Out_Type(Out_Id),
  Fielders INTEGER REFERENCES Player(Player_Id),
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Wicket_Taken`:
335987, 2, 1, 6, 2, None, 2
335987, 3, 2, 8, 2, None, 2
335987, 5, 5, 9, 1, 83, 2

","player, season","player.player_name, player.player_Id, season.man_of_the_series, season.orange_cap"
movielens,Which Crime film got the lowest average rating?,SELECT t2.movieid FROM u2base as t2 inner JOIN movies2directors as t3 ON t2.movieid = t3.movieid WHERE t3.genre = 'Crime' GROUP BY t2.movieid ORDER BY AVG(t2.rating) LIMIT 1,"CREATE TABLE `u2base` (
  userid INTEGER PRIMARY KEY REFERENCES users(None),
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  rating TEXT
);
Sample rows from `u2base`:
2, 1964242, 1
2, 2219779, 1
3, 1856939, 1

CREATE TABLE `movies2directors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  directorid INTEGER PRIMARY KEY REFERENCES directors(None),
  genre TEXT
);
Sample rows from `movies2directors`:
1672111, 54934, Action
1672946, 188940, Action
1679461, 179783, Action

","CREATE TABLE `users` (
  userid INTEGER,
  age TEXT,
  u_gender TEXT,
  occupation TEXT
);
Sample rows from `users`:
1, 1, F, 2
2, 56, M, 3
3, 25, M, 2

CREATE TABLE `directors` (
  directorid INTEGER,
  d_quality INTEGER PRIMARY KEY,
  avg_revenue INTEGER PRIMARY KEY
);
Sample rows from `directors`:
67, 4, 1
92, 2, 3
284, 4, 0

CREATE TABLE `actors` (
  actorid INTEGER,
  a_gender TEXT,
  a_quality INTEGER
);
Sample rows from `actors`:
4, M, 4
16, M, 0
28, M, 4

CREATE TABLE `movies` (
  movieid INTEGER,
  year INTEGER,
  isEnglish TEXT,
  country TEXT,
  runningtime INTEGER
);
Sample rows from `movies`:
1672052, 3, T, other, 2
1672111, 4, T, other, 2
1672580, 4, T, USA, 3

CREATE TABLE `movies2actors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  actorid INTEGER PRIMARY KEY REFERENCES actors(None),
  cast_num INTEGER
);
Sample rows from `movies2actors`:
1672580, 981535, 0
1672946, 1094968, 0
1673647, 149985, 0

CREATE TABLE `movies2directors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  directorid INTEGER PRIMARY KEY REFERENCES directors(None),
  genre TEXT
);
Sample rows from `movies2directors`:
1672111, 54934, Action
1672946, 188940, Action
1679461, 179783, Action

CREATE TABLE `u2base` (
  userid INTEGER PRIMARY KEY REFERENCES users(None),
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  rating TEXT
);
Sample rows from `u2base`:
2, 1964242, 1
2, 2219779, 1
3, 1856939, 1

","u2base, movies2directors","u2base.movieid, movies2directors.movieid, movies2directors.genre, u2base.rating"
student_loan,Which department has the most disabled students?,"SELECT t2.organ, COUNT(t1.name) FROM disabled as t1 inner JOIN enlist as t2 ON t1.`name` = t2.`name` GROUP BY t2.organ ORDER BY COUNT(t1.name) DESC LIMIT 1","CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

","disabled, enlist","enlist.organ, disabled.name, enlist.name"
books,What is the shipping method ordered by Nicolette Sadler at 6/29/2020 7:40:07 PM?,SELECT t3.method_name FROM cust_order as t1 inner JOIN customer as t2 ON t1.customer_id = t2.customer_id inner JOIN shipping_method as t3 ON t3.method_id = t1.shipping_method_id WHERE t2.first_name = 'Nicolette' AND t2.last_name = 'Sadler' AND t1.order_date = '2020-06-29 19:40:07',"CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","cust_order, customer, shipping_method","shipping_method.method_name, cust_order.customer_id, customer.customer_id, shipping_method.method_id, cust_order.shipping_method_id, customer.first_name, customer.last_name, cust_order.order_date"
retails,What is the phone number of Customer#000000001?,SELECT c_phone FROM customer WHERE c_name = 'Customer#000000001',"CREATE TABLE `customer` (
  c_custkey INTEGER,
  c_mktsegment TEXT,
  c_nationkey INTEGER REFERENCES nation(n_nationkey),
  c_name TEXT,
  c_address TEXT,
  c_phone TEXT,
  c_acctbal REAL,
  c_comment TEXT
);
Sample rows from `customer`:
1, BUILDING, 8, Customer#000000001, KwX3hMHjZ6, 937-241-3198, 3560.03, ironic excuses detect slyly silent requests. requests according to the exc
2, MACHINERY, 16, Customer#000000002, ioUn,eqTTXOdo, 906-965-7556, 7550.21, final express accounts mold slyly. ironic accounts cajole! quickly express a
3, FURNITURE, 11, Customer#000000003, YddJqmIdouNT9Yj, 328-750-7603, -926.96, carefully express foxes sleep carefully. pending platelets sleep thinly for t

","CREATE TABLE `customer` (
  c_custkey INTEGER,
  c_mktsegment TEXT,
  c_nationkey INTEGER REFERENCES nation(n_nationkey),
  c_name TEXT,
  c_address TEXT,
  c_phone TEXT,
  c_acctbal REAL,
  c_comment TEXT
);
Sample rows from `customer`:
1, BUILDING, 8, Customer#000000001, KwX3hMHjZ6, 937-241-3198, 3560.03, ironic excuses detect slyly silent requests. requests according to the exc
2, MACHINERY, 16, Customer#000000002, ioUn,eqTTXOdo, 906-965-7556, 7550.21, final express accounts mold slyly. ironic accounts cajole! quickly express a
3, FURNITURE, 11, Customer#000000003, YddJqmIdouNT9Yj, 328-750-7603, -926.96, carefully express foxes sleep carefully. pending platelets sleep thinly for t

CREATE TABLE `lineitem` (
  l_shipdate DATE,
  l_orderkey INTEGER PRIMARY KEY REFERENCES orders(o_orderkey),
  l_discount REAL,
  l_extendedprice REAL,
  l_suppkey INTEGER REFERENCES partsupp(ps_suppkey),
  l_quantity INTEGER,
  l_returnflag TEXT,
  l_partkey INTEGER REFERENCES partsupp(ps_partkey),
  l_linestatus TEXT,
  l_tax REAL,
  l_commitdate DATE,
  l_receiptdate DATE,
  l_shipmode TEXT,
  l_linenumber INTEGER PRIMARY KEY,
  l_shipinstruct TEXT,
  l_comment TEXT
);
Sample rows from `lineitem`:
1995-08-16, 1, 0.1, 58303.08, 6296, 33, N, 98768, O, 0.06, 1995-07-12, 1995-09-14, RAIL, 1, NONE, carefully bo
1995-08-13, 1, 0.09, 16947.7, 8776, 10, N, 23771, O, 0.08, 1995-07-09, 1995-08-27, TRUCK, 2, TAKE BACK RETURN, blithely regular pac
1995-06-17, 1, 0.1, 63642.9, 3859, 34, N, 113858, O, 0.08, 1995-05-22, 1995-06-30, SHIP, 3, COLLECT COD, ironic accounts sleep furiously silen

CREATE TABLE `nation` (
  n_nationkey INTEGER,
  n_name TEXT,
  n_regionkey INTEGER REFERENCES region(r_regionkey),
  n_comment TEXT
);
Sample rows from `nation`:
0, ALGERIA, 0, slyly express pinto beans cajole idly. deposits use blithely unusual packages? fluffily final accounts x-r
1, ARGENTINA, 1, instructions detect blithely stealthily pending packages
2, BRAZIL, 1, blithely unusual deposits are quickly--

CREATE TABLE `orders` (
  o_orderdate DATE,
  o_orderkey INTEGER,
  o_custkey INTEGER REFERENCES customer(c_custkey),
  o_orderpriority TEXT,
  o_shippriority INTEGER,
  o_clerk TEXT,
  o_orderstatus TEXT,
  o_totalprice REAL,
  o_comment TEXT
);
Sample rows from `orders`:
1995-04-19, 1, 73100, 4-NOT SPECIFIED, 0, Clerk#000000916, P, 203198.56, final packages sleep blithely packa
1996-11-04, 2, 92861, 1-URGENT, 0, Clerk#000000373, O, 317719.99, final excuses about the ironic even deposits detect express request
1992-02-15, 3, 44875, 1-URGENT, 0, Clerk#000000485, F, 146674.98, final final deposits cajole foxes. blithely pendin

CREATE TABLE `part` (
  p_partkey INTEGER,
  p_type TEXT,
  p_size INTEGER,
  p_brand TEXT,
  p_name TEXT,
  p_container TEXT,
  p_mfgr TEXT,
  p_retailprice REAL,
  p_comment TEXT
);
Sample rows from `part`:
1, LARGE PLATED TIN, 31, Brand#43, burlywood plum powder puff mint, LG BAG, Manufacturer#4, 901.0, blithely busy reque
2, LARGE POLISHED STEEL, 4, Brand#55, hot spring dodger dim light, LG CASE, Manufacturer#5, 902.0, even ironic requests s
3, STANDARD PLATED COPPER, 30, Brand#53, dark slate grey steel misty, WRAP CASE, Manufacturer#5, 903.0, slyly ironic fox

CREATE TABLE `partsupp` (
  ps_partkey INTEGER PRIMARY KEY REFERENCES part(p_partkey),
  ps_suppkey INTEGER PRIMARY KEY REFERENCES supplier(s_suppkey),
  ps_supplycost REAL,
  ps_availqty INTEGER,
  ps_comment TEXT
);
Sample rows from `partsupp`:
1, 2, 400.75, 1111, carefully ironic deposits use against the carefully unusual accounts. slyly silent platelets nag quickly even
1, 2502, 702.61, 3999, slyly regular accounts serve carefully. asymptotes after the slyly even instructions cajole quickly ironic requests. pending dugouts about the slyly 
1, 5002, 383.95, 7411, carefully special ideas are slyly. slyly ironic epitaphs use pending pending foxes. furiously express pinto beans lose quiet even requests: special final packages ar

CREATE TABLE `region` (
  r_regionkey INTEGER,
  r_name TEXT,
  r_comment TEXT
);
Sample rows from `region`:
0, AFRICA, asymptotes sublate after the r
1, AMERICA, requests affix quickly final tithes. blithely even packages above the a
2, ASIA, accounts cajole carefully according to the carefully exp

CREATE TABLE `supplier` (
  s_suppkey INTEGER,
  s_nationkey INTEGER REFERENCES nation(n_nationkey),
  s_comment TEXT,
  s_name TEXT,
  s_address TEXT,
  s_phone TEXT,
  s_acctbal REAL
);
Sample rows from `supplier`:
1, 13, blithely final pearls are. instructions thra, Supplier#000000001, ,wWs4pnykQOFl8mgVCU8EZMXqZs1w, 800-807-9579, 3082.86
2, 5, requests integrate fluffily. fluffily ironic deposits wake. bold, Supplier#000000002, WkXT6MSAJrp4qWq3W9N, 348-617-6055, 3009.73
3, 22, carefully express ideas shall have to unwin, Supplier#000000003, KjUqa42JEHaRDVQTHV6Yq2h, 471-986-9888, 9159.78

",customer,"c_phone, c_name"
donor,List the title of all projects located in Chicago along with the ID of the donor.,"SELECT t1.title, t3.donor_acctid FROM essays as t1 inner JOIN projects as t2 ON t1.projectid = t2.projectid inner JOIN donations as t3 ON t2.projectid = t3.projectid WHERE t2.school_city LIKE 'Chicago'","CREATE TABLE `essays` (
  projectid TEXT,
  teacher_acctid TEXT,
  title TEXT,
  short_description TEXT,
  need_statement TEXT,
  essay TEXT
);
Sample rows from `essays`:
ffffc4f85b60efc5b52347df489d0238, c24011b20fc161ed02248e85beb59a90, iMath, It is imperative that teachers bring technology into the classroom, if students are going to be able to survive in the 21st Century. The classroom needs to be ever changing along with the outside world. The iMath project will help students by obtaining cl, My students need four iPods., I am a fourth year fifth grade math teacher. The school I teach in is a fifth and sixth grade public school and is a Title One school which means that 95% of our students get free lunch. Presently, I am in the process of completing a Masters degree in Tec
ffffac55ee02a49d1abc87ba6fc61135, 947066d0af47e0566f334566553dd6a6, Recording Rockin' Readers, Can you imagine having to translate everything you read into sign language and relate it to what you already know? Help us do just that by giving us the camera that will record our stories and..., My students need a camcorder. , Can you imagine having to translate everything you read into sign language and relate it to what you already know? Help us do just that by giving us the camera that will record our stories and interpretations! 
\n
\nMy students are all deaf or hard of hea
ffff97ed93720407d70a2787475932b0, 462270f5d5c212162fcab11afa2623cb, Kindergarten In Need of Important Materials!, It takes a special person to donate to a group of children they don't know, especially in these hard economic times, but my students are worth it.  They deserve to have the proper supplies to ensure that their long education gets off to the right start, s, My students need 17 assorted classroom materials to ensure that they can learn as much as possible this year., Hi. I teach a wonderful group of 4-5 year old Kindergarten students.  They come in wanting and willing to learn new and exciting things each and every day. I work hard to ensure that my students get the most out of the entire school year. 
\n
\nFor the mo

CREATE TABLE `projects` (
  projectid TEXT PRIMARY KEY,
  teacher_acctid TEXT,
  schoolid TEXT,
  school_ncesid TEXT,
  school_latitude REAL,
  school_longitude REAL,
  school_city TEXT,
  school_state TEXT,
  school_zip INTEGER,
  school_metro TEXT,
  school_district TEXT,
  school_county TEXT,
  school_charter TEXT,
  school_magnet TEXT,
  school_year_round TEXT,
  school_nlns TEXT,
  school_kipp TEXT,
  school_charter_ready_promise TEXT,
  teacher_prefix TEXT,
  teacher_teach_for_america TEXT,
  teacher_ny_teaching_fellow TEXT,
  primary_focus_subject TEXT,
  primary_focus_area TEXT,
  secondary_focus_subject TEXT,
  secondary_focus_area TEXT,
  resource_type TEXT,
  poverty_level TEXT,
  grade_level TEXT,
  fulfillment_labor_materials REAL,
  total_price_excluding_optional_support REAL,
  total_price_including_optional_support REAL,
  students_reached INTEGER,
  eligible_double_your_impact_match TEXT,
  eligible_almost_home_match TEXT,
  date_posted DATE
);
Sample rows from `projects`:
316ed8fb3b81402ff6ac8f721bb31192, 42d43fa6f37314365d08692e08680973, c0e6ce89b244764085691a1b8e28cb81, 063627006187, 36.57634, -119.608713, Selma, CA, 93662, None, Selma Unified Sch District, Fresno, f, f, f, f, f, f, Mrs., f, f, Literature & Writing, Literacy & Language, College & Career Prep, Applied Learning, Books, highest poverty, Grades 6-8, 30.0, 555.81, 653.89, 32, f, f, 2014-05-12
90de744e368a7e4883223ca49318ae30, 864eb466462bf704bf7a16a585ef296a, d711e47810900c96f26a5d0be30c446d, 483702008193, 32.911179, -96.72364, Dallas, TX, 75243, urban, Richardson Ind School District, Dallas, f, f, f, f, f, f, Mrs., f, f, Literacy, Literacy & Language, ESL, Literacy & Language, Books, highest poverty, Grades PreK-2, 30.0, 296.47, 348.79, 22, f, f, 2014-05-12
32943bb1063267de6ed19fc0ceb4b9a7, 37f85135259ece793213aca9d8765542, 665c3613013ba0a66e3a2a26b89f1b68, 410327000109, 45.166039, -122.414576, Colton, OR, 97017, rural, Colton School District 53, Clackamas, f, f, f, f, f, f, Mr., f, f, Literacy, Literacy & Language, Mathematics, Math & Science, Technology, high poverty, Grades PreK-2, 30.0, 430.89, 506.93, 17, f, f, 2014-05-11

CREATE TABLE `donations` (
  donationid TEXT PRIMARY KEY,
  projectid TEXT REFERENCES projects(projectid),
  donor_acctid TEXT,
  donor_city TEXT,
  donor_state TEXT,
  donor_zip TEXT,
  is_teacher_acct TEXT,
  donation_timestamp DATETIME,
  donation_to_project REAL,
  donation_optional_support REAL,
  donation_total REAL,
  dollar_amount TEXT,
  donation_included_optional_support TEXT,
  payment_method TEXT,
  payment_included_acct_credit TEXT,
  payment_included_campaign_gift_card TEXT,
  payment_included_web_purchased_gift_card TEXT,
  payment_was_promo_matched TEXT,
  via_giving_page TEXT,
  for_honoree TEXT,
  donation_message TEXT
);
Sample rows from `donations`:
431d720bc3dfd75ae445a5eaa0b0638d, ffffac55ee02a49d1abc87ba6fc61135, 22cbc920c9b5fa08dfb331422f5926b5, Peachtree City, GA, 30269, f, 2011-08-25 14:27:34.807, 42.5, 7.5, 50.0, 10_to_100, t, no_cash_received, f, t, f, f, f, f, I gave to this project because I support the efforts of this teacher with each of her students, and her school, Suder Elementary School.
fcfedba1c8a0ba77d280cace80a909f6, ffffac55ee02a49d1abc87ba6fc61135, 521f1830a77c9dbbf8119d99c6206a16, None, GA, None, f, 2011-11-04 07:54:21.552, 26.83, 4.73, 31.56, 10_to_100, t, creditcard, f, t, f, f, f, f, I donated because I want to support kids in Georgia.
3fa95d29986aa6f401c6719ced3a3ce7, ffffac55ee02a49d1abc87ba6fc61135, 1e0a63fc8141c7ba26b8b44ca0871b90, Rockville, MD, 20853, f, 2011-11-02 22:53:53.019, 55.35, 0.0, 55.35, 10_to_100, f, no_cash_received, t, f, f, f, t, f, The Spark's 'pet' projects include those which support deaf students.  With just a few days left, the Spark's donors fund half of what remains, and challenge others to pull this project through to fruition.

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `essays` (
  projectid TEXT,
  teacher_acctid TEXT,
  title TEXT,
  short_description TEXT,
  need_statement TEXT,
  essay TEXT
);
Sample rows from `essays`:
ffffc4f85b60efc5b52347df489d0238, c24011b20fc161ed02248e85beb59a90, iMath, It is imperative that teachers bring technology into the classroom, if students are going to be able to survive in the 21st Century. The classroom needs to be ever changing along with the outside world. The iMath project will help students by obtaining cl, My students need four iPods., I am a fourth year fifth grade math teacher. The school I teach in is a fifth and sixth grade public school and is a Title One school which means that 95% of our students get free lunch. Presently, I am in the process of completing a Masters degree in Tec
ffffac55ee02a49d1abc87ba6fc61135, 947066d0af47e0566f334566553dd6a6, Recording Rockin' Readers, Can you imagine having to translate everything you read into sign language and relate it to what you already know? Help us do just that by giving us the camera that will record our stories and..., My students need a camcorder. , Can you imagine having to translate everything you read into sign language and relate it to what you already know? Help us do just that by giving us the camera that will record our stories and interpretations! 
\n
\nMy students are all deaf or hard of hea
ffff97ed93720407d70a2787475932b0, 462270f5d5c212162fcab11afa2623cb, Kindergarten In Need of Important Materials!, It takes a special person to donate to a group of children they don't know, especially in these hard economic times, but my students are worth it.  They deserve to have the proper supplies to ensure that their long education gets off to the right start, s, My students need 17 assorted classroom materials to ensure that they can learn as much as possible this year., Hi. I teach a wonderful group of 4-5 year old Kindergarten students.  They come in wanting and willing to learn new and exciting things each and every day. I work hard to ensure that my students get the most out of the entire school year. 
\n
\nFor the mo

CREATE TABLE `projects` (
  projectid TEXT PRIMARY KEY,
  teacher_acctid TEXT,
  schoolid TEXT,
  school_ncesid TEXT,
  school_latitude REAL,
  school_longitude REAL,
  school_city TEXT,
  school_state TEXT,
  school_zip INTEGER,
  school_metro TEXT,
  school_district TEXT,
  school_county TEXT,
  school_charter TEXT,
  school_magnet TEXT,
  school_year_round TEXT,
  school_nlns TEXT,
  school_kipp TEXT,
  school_charter_ready_promise TEXT,
  teacher_prefix TEXT,
  teacher_teach_for_america TEXT,
  teacher_ny_teaching_fellow TEXT,
  primary_focus_subject TEXT,
  primary_focus_area TEXT,
  secondary_focus_subject TEXT,
  secondary_focus_area TEXT,
  resource_type TEXT,
  poverty_level TEXT,
  grade_level TEXT,
  fulfillment_labor_materials REAL,
  total_price_excluding_optional_support REAL,
  total_price_including_optional_support REAL,
  students_reached INTEGER,
  eligible_double_your_impact_match TEXT,
  eligible_almost_home_match TEXT,
  date_posted DATE
);
Sample rows from `projects`:
316ed8fb3b81402ff6ac8f721bb31192, 42d43fa6f37314365d08692e08680973, c0e6ce89b244764085691a1b8e28cb81, 063627006187, 36.57634, -119.608713, Selma, CA, 93662, None, Selma Unified Sch District, Fresno, f, f, f, f, f, f, Mrs., f, f, Literature & Writing, Literacy & Language, College & Career Prep, Applied Learning, Books, highest poverty, Grades 6-8, 30.0, 555.81, 653.89, 32, f, f, 2014-05-12
90de744e368a7e4883223ca49318ae30, 864eb466462bf704bf7a16a585ef296a, d711e47810900c96f26a5d0be30c446d, 483702008193, 32.911179, -96.72364, Dallas, TX, 75243, urban, Richardson Ind School District, Dallas, f, f, f, f, f, f, Mrs., f, f, Literacy, Literacy & Language, ESL, Literacy & Language, Books, highest poverty, Grades PreK-2, 30.0, 296.47, 348.79, 22, f, f, 2014-05-12
32943bb1063267de6ed19fc0ceb4b9a7, 37f85135259ece793213aca9d8765542, 665c3613013ba0a66e3a2a26b89f1b68, 410327000109, 45.166039, -122.414576, Colton, OR, 97017, rural, Colton School District 53, Clackamas, f, f, f, f, f, f, Mr., f, f, Literacy, Literacy & Language, Mathematics, Math & Science, Technology, high poverty, Grades PreK-2, 30.0, 430.89, 506.93, 17, f, f, 2014-05-11

CREATE TABLE `donations` (
  donationid TEXT PRIMARY KEY,
  projectid TEXT REFERENCES projects(projectid),
  donor_acctid TEXT,
  donor_city TEXT,
  donor_state TEXT,
  donor_zip TEXT,
  is_teacher_acct TEXT,
  donation_timestamp DATETIME,
  donation_to_project REAL,
  donation_optional_support REAL,
  donation_total REAL,
  dollar_amount TEXT,
  donation_included_optional_support TEXT,
  payment_method TEXT,
  payment_included_acct_credit TEXT,
  payment_included_campaign_gift_card TEXT,
  payment_included_web_purchased_gift_card TEXT,
  payment_was_promo_matched TEXT,
  via_giving_page TEXT,
  for_honoree TEXT,
  donation_message TEXT
);
Sample rows from `donations`:
431d720bc3dfd75ae445a5eaa0b0638d, ffffac55ee02a49d1abc87ba6fc61135, 22cbc920c9b5fa08dfb331422f5926b5, Peachtree City, GA, 30269, f, 2011-08-25 14:27:34.807, 42.5, 7.5, 50.0, 10_to_100, t, no_cash_received, f, t, f, f, f, f, I gave to this project because I support the efforts of this teacher with each of her students, and her school, Suder Elementary School.
fcfedba1c8a0ba77d280cace80a909f6, ffffac55ee02a49d1abc87ba6fc61135, 521f1830a77c9dbbf8119d99c6206a16, None, GA, None, f, 2011-11-04 07:54:21.552, 26.83, 4.73, 31.56, 10_to_100, t, creditcard, f, t, f, f, f, f, I donated because I want to support kids in Georgia.
3fa95d29986aa6f401c6719ced3a3ce7, ffffac55ee02a49d1abc87ba6fc61135, 1e0a63fc8141c7ba26b8b44ca0871b90, Rockville, MD, 20853, f, 2011-11-02 22:53:53.019, 55.35, 0.0, 55.35, 10_to_100, f, no_cash_received, t, f, f, f, t, f, The Spark's 'pet' projects include those which support deaf students.  With just a few days left, the Spark's donors fund half of what remains, and challenge others to pull this project through to fruition.

CREATE TABLE `resources` (
  resourceid TEXT PRIMARY KEY,
  projectid TEXT REFERENCES projects(projectid),
  vendorid INTEGER,
  vendor_name TEXT,
  project_resource_type TEXT,
  item_name TEXT,
  item_number TEXT,
  item_unit_price REAL,
  item_quantity INTEGER
);
Sample rows from `resources`:
8a1c1c45bc30d065061912fd9114fcf3, ffffc4f85b60efc5b52347df489d0238, 430, Woodwind and Brasswind, Technology, iPod nano 4th Gen 8GB (Black), 249995.001, 149.0, 4
015d2c4935c50427964a12dc3f584091, ffffac55ee02a49d1abc87ba6fc61135, 82, Best Buy for Business, Technology, Sony bloggie MHS-FS1 - camcorder - internal flash memory, BB11216668, 148.0, 1
26a02944b2f0c25f9abdeacca3ede3ee, ffff97ed93720407d70a2787475932b0, 767, Lakeshore Learning Materials, Supplies, VX748 - Best-Buy Jumbo Crayons - 12-Color Box, VX748, 69.95, 1

","essays, projects, donations","essays.title, donations.donor_acctid, essays.projectid, projects.projectid, donations.projectid, projects.school_city"
soccer_2016,How many players were born in 1970?,SELECT COUNT(player_name) FROM player WHERE dob LIKE '1970%',"CREATE TABLE `player` (
  Player_Id INTEGER,
  Player_Name TEXT,
  DOB DATE,
  Batting_hand INTEGER REFERENCES Batting_Style(Batting_Id),
  Bowling_skill INTEGER REFERENCES Bowling_Style(Bowling_Id),
  Country_Name INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `player`:
1, SC Ganguly, 1972-07-08, 1, 1, 1
2, BB McCullum, 1981-09-27, 2, 1, 4
3, RT Ponting, 1974-12-19, 2, 1, 5

","CREATE TABLE `Batting_Style` (
  Batting_Id INTEGER,
  Batting_hand TEXT
);
Sample rows from `Batting_Style`:
1, Left-hand bat
2, Right-hand bat

CREATE TABLE `Bowling_Style` (
  Bowling_Id INTEGER,
  Bowling_skill TEXT
);
Sample rows from `Bowling_Style`:
1, Right-arm medium
2, Right-arm offbreak
3, Right-arm fast-medium

CREATE TABLE `City` (
  City_Id INTEGER,
  City_Name TEXT,
  Country_id INTEGER
);
Sample rows from `City`:
1, Bangalore, 1
2, Chandigarh, 1
3, Delhi, 1

CREATE TABLE `Country` (
  Country_Id INTEGER REFERENCES Country(Country_Id),
  Country_Name TEXT
);
Sample rows from `Country`:
1, India
2, South Africa
3, U.A.E

CREATE TABLE `Extra_Type` (
  Extra_Id INTEGER,
  Extra_Name TEXT
);
Sample rows from `Extra_Type`:
1, legbyes
2, wides
3, byes

CREATE TABLE `Extra_Runs` (
  Match_Id INTEGER PRIMARY KEY,
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Extra_Type_Id INTEGER REFERENCES Extra_Type(Extra_Id),
  Extra_Runs INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Extra_Runs`:
335987, 1, 1, 1, 1, 1
335987, 1, 2, 2, 1, 2
335987, 1, 3, 2, 1, 1

CREATE TABLE `Out_Type` (
  Out_Id INTEGER,
  Out_Name TEXT
);
Sample rows from `Out_Type`:
1, caught
2, bowled
3, run out

CREATE TABLE `Outcome` (
  Outcome_Id INTEGER,
  Outcome_Type TEXT
);
Sample rows from `Outcome`:
1, Result
2, No Result
3, Superover

CREATE TABLE `Player` (
  Player_Id INTEGER,
  Player_Name TEXT,
  DOB DATE,
  Batting_hand INTEGER REFERENCES Batting_Style(Batting_Id),
  Bowling_skill INTEGER REFERENCES Bowling_Style(Bowling_Id),
  Country_Name INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Player`:
1, SC Ganguly, 1972-07-08, 1, 1, 1
2, BB McCullum, 1981-09-27, 2, 1, 4
3, RT Ponting, 1974-12-19, 2, 1, 5

CREATE TABLE `Rolee` (
  Role_Id INTEGER,
  Role_Desc TEXT
);
Sample rows from `Rolee`:
1, Captain
2, Keeper
3, Player

CREATE TABLE `Season` (
  Season_Id INTEGER,
  Man_of_the_Series INTEGER,
  Orange_Cap INTEGER,
  Purple_Cap INTEGER,
  Season_Year INTEGER
);
Sample rows from `Season`:
1, 32, 100, 102, 2008
2, 53, 18, 61, 2009
3, 133, 133, 131, 2010

CREATE TABLE `Team` (
  Team_Id INTEGER,
  Team_Name TEXT
);
Sample rows from `Team`:
1, Kolkata Knight Riders
2, Royal Challengers Bangalore
3, Chennai Super Kings

CREATE TABLE `Toss_Decision` (
  Toss_Id INTEGER,
  Toss_Name TEXT
);
Sample rows from `Toss_Decision`:
1, field
2, bat

CREATE TABLE `Umpire` (
  Umpire_Id INTEGER,
  Umpire_Name TEXT,
  Umpire_Country INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Umpire`:
1, Asad Rauf, 6
2, MR Benson, 10
3, Aleem Dar, 6

CREATE TABLE `Venue` (
  Venue_Id INTEGER,
  Venue_Name TEXT,
  City_Id INTEGER REFERENCES City(City_Id)
);
Sample rows from `Venue`:
1, M Chinnaswamy Stadium, 1
2, Punjab Cricket Association Stadium, 2
3, Feroz Shah Kotla, 3

CREATE TABLE `Win_By` (
  Win_Id INTEGER,
  Win_Type TEXT
);
Sample rows from `Win_By`:
1, runs
2, wickets
3, NO Result

CREATE TABLE `Match` (
  Match_Id INTEGER,
  Team_1 INTEGER REFERENCES Team(Team_Id),
  Team_2 INTEGER REFERENCES Team(Team_Id),
  Match_Date DATE,
  Season_Id INTEGER REFERENCES Season(Season_Id),
  Venue_Id INTEGER REFERENCES Venue(Venue_Id),
  Toss_Winner INTEGER REFERENCES Team(Team_Id),
  Toss_Decide INTEGER REFERENCES Toss_Decision(Toss_Id),
  Win_Type INTEGER REFERENCES Win_By(Win_Id),
  Win_Margin INTEGER,
  Outcome_type INTEGER REFERENCES Out_Type(Out_Id),
  Match_Winner INTEGER REFERENCES Team(Team_Id),
  Man_of_the_Match INTEGER REFERENCES Player(Player_Id)
);
Sample rows from `Match`:
335987, 2, 1, 2008-04-18, 1, 1, 2, 1, 1, 140, 1, 1, 2
335988, 4, 3, 2008-04-19, 1, 2, 3, 2, 1, 33, 1, 3, 19
335989, 6, 5, 2008-04-19, 1, 3, 5, 2, 2, 9, 1, 6, 90

CREATE TABLE `Ball_by_Ball` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Innings_No INTEGER PRIMARY KEY,
  Team_Batting INTEGER,
  Team_Bowling INTEGER,
  Striker_Batting_Position INTEGER,
  Striker INTEGER,
  Non_Striker INTEGER,
  Bowler INTEGER
);
Sample rows from `Ball_by_Ball`:
335987, 1, 1, 1, 1, 2, 1, 1, 2, 14
335987, 1, 1, 2, 2, 1, 1, 6, 7, 106
335987, 1, 2, 1, 1, 2, 2, 2, 1, 14

CREATE TABLE `Batsman_Scored` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Runs_Scored INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Batsman_Scored`:
335987, 1, 1, 0, 1
335987, 1, 1, 1, 2
335987, 1, 2, 0, 1

CREATE TABLE `Player_Match` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Player_Id INTEGER PRIMARY KEY REFERENCES Player(Player_Id),
  Role_Id INTEGER PRIMARY KEY REFERENCES Rolee(Role_Id),
  Team_Id INTEGER REFERENCES Team(Team_Id)
);
Sample rows from `Player_Match`:
335987, 1, 1, 1
335987, 2, 3, 1
335987, 3, 3, 1

CREATE TABLE `Wicket_Taken` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Player_Out INTEGER REFERENCES Player(Player_Id),
  Kind_Out INTEGER REFERENCES Out_Type(Out_Id),
  Fielders INTEGER REFERENCES Player(Player_Id),
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Wicket_Taken`:
335987, 2, 1, 6, 2, None, 2
335987, 3, 2, 8, 2, None, 2
335987, 5, 5, 9, 1, 83, 2

",player,"player_name, dob"
software_company,List the income and number of inhabitants of customers with an age greater than the 80% of average age of all customers?,"SELECT t2.income_k, t2.inhabitants_k FROM customers as t1 inner JOIN demog as t2 ON t1.geoid = t2.geoid GROUP BY t2.income_k, t2.inhabitants_k HAVING t1.age > 0.8 * AVG(t1.age)","CREATE TABLE `customers` (
  ID INTEGER,
  SEX TEXT,
  MARITAL_STATUS TEXT,
  GEOID INTEGER REFERENCES Demog(None),
  EDUCATIONNUM INTEGER,
  OCCUPATION TEXT,
  age INTEGER
);
Sample rows from `customers`:
0, Male, Never-married, 61, 7, Machine-op-inspct, 62
1, Male, Married-civ-spouse, 70, 3, Handlers-cleaners, 78
2, Male, Never-married, 53, 7, Machine-op-inspct, 69

CREATE TABLE `demog` (
  GEOID INTEGER,
  INHABITANTS_K REAL,
  INCOME_K REAL,
  A_VAR1 REAL,
  A_VAR2 REAL,
  A_VAR3 REAL,
  A_VAR4 REAL,
  A_VAR5 REAL,
  A_VAR6 REAL,
  A_VAR7 REAL,
  A_VAR8 REAL,
  A_VAR9 REAL,
  A_VAR10 REAL,
  A_VAR11 REAL,
  A_VAR12 REAL,
  A_VAR13 REAL,
  A_VAR14 REAL,
  A_VAR15 REAL,
  A_VAR16 REAL,
  A_VAR17 REAL,
  A_VAR18 REAL
);
Sample rows from `demog`:
0, 30.046, 2631.47, 6.084, 5.79, 8.595, 3.935, 6.362, 8.626, 4.624, 8.324, 5.233, 6.232, 5.205, 8.231, 6.746, 8.679, 5.292, 3.5, 5.512, 5.783
1, 36.25, 3012.75, 4.604, 8.309, 6.007, 5.938, 8.773, 3.579, 6.349, 4.694, 6.884, 7.062, 7.319, 3.72, 6.405, 7.202, 4.932, 7.969, 8.15, 5.633
2, 47.645, 2192.41, 4.911, 8.557, 5.934, 6.494, 9.172, 3.202, 6.157, 4.822, 7.942, 7.901, 7.928, 2.33, 6.029, 6.455, 4.72, 8.564, 8.342, 4.938

","CREATE TABLE `Demog` (
  GEOID INTEGER,
  INHABITANTS_K REAL,
  INCOME_K REAL,
  A_VAR1 REAL,
  A_VAR2 REAL,
  A_VAR3 REAL,
  A_VAR4 REAL,
  A_VAR5 REAL,
  A_VAR6 REAL,
  A_VAR7 REAL,
  A_VAR8 REAL,
  A_VAR9 REAL,
  A_VAR10 REAL,
  A_VAR11 REAL,
  A_VAR12 REAL,
  A_VAR13 REAL,
  A_VAR14 REAL,
  A_VAR15 REAL,
  A_VAR16 REAL,
  A_VAR17 REAL,
  A_VAR18 REAL
);
Sample rows from `Demog`:
0, 30.046, 2631.47, 6.084, 5.79, 8.595, 3.935, 6.362, 8.626, 4.624, 8.324, 5.233, 6.232, 5.205, 8.231, 6.746, 8.679, 5.292, 3.5, 5.512, 5.783
1, 36.25, 3012.75, 4.604, 8.309, 6.007, 5.938, 8.773, 3.579, 6.349, 4.694, 6.884, 7.062, 7.319, 3.72, 6.405, 7.202, 4.932, 7.969, 8.15, 5.633
2, 47.645, 2192.41, 4.911, 8.557, 5.934, 6.494, 9.172, 3.202, 6.157, 4.822, 7.942, 7.901, 7.928, 2.33, 6.029, 6.455, 4.72, 8.564, 8.342, 4.938

CREATE TABLE `mailings3` (
  REFID INTEGER,
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `mailings3`:
60000, 2007-07-01 12:00:00.0, false
60001, 2007-07-01 12:00:00.0, false
60002, 2007-07-01 12:00:00.0, false

CREATE TABLE `Customers` (
  ID INTEGER,
  SEX TEXT,
  MARITAL_STATUS TEXT,
  GEOID INTEGER REFERENCES Demog(None),
  EDUCATIONNUM INTEGER,
  OCCUPATION TEXT,
  age INTEGER
);
Sample rows from `Customers`:
0, Male, Never-married, 61, 7, Machine-op-inspct, 62
1, Male, Married-civ-spouse, 70, 3, Handlers-cleaners, 78
2, Male, Never-married, 53, 7, Machine-op-inspct, 69

CREATE TABLE `Mailings1_2` (
  REFID INTEGER REFERENCES Customers(None),
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `Mailings1_2`:
0, 2007-02-01 12:00:00.0, false
1, 2007-02-01 12:00:00.0, false
2, 2007-02-01 12:00:00.0, false

CREATE TABLE `Sales` (
  EVENTID INTEGER,
  REFID INTEGER REFERENCES Customers(None),
  EVENT_DATE DATETIME,
  AMOUNT REAL
);
Sample rows from `Sales`:
0, 0, 2006-12-21 12:00:00.0, 17.907
1, 0, 2006-12-25 12:00:00.0, 17.401
2, 0, 2007-01-26 12:00:00.0, 13.277

","customers, demog","demog.income_k, demog.inhabitants_k, customers.geoid, demog.geoid, customers.age"
student_loan,Please list the names of the male students that belong to the navy department.,SELECT t1.name FROM enlist as t1 inner JOIN male as t2 ON t1.`name` = t2.`name` WHERE t1.organ = 'navy',"CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

","enlist, male","enlist.name, male.name, enlist.organ"
soccer_2016,What is the difference in the average number of players out by lbw and runout in the matches?,SELECT AVG(t1.player_out) FROM wicket_taken as t1 inner JOIN out_type as t2 ON t1.kind_out = t2.out_id WHERE t2.out_name = 'lbw',"CREATE TABLE `wicket_taken` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Player_Out INTEGER REFERENCES Player(Player_Id),
  Kind_Out INTEGER REFERENCES Out_Type(Out_Id),
  Fielders INTEGER REFERENCES Player(Player_Id),
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `wicket_taken`:
335987, 2, 1, 6, 2, None, 2
335987, 3, 2, 8, 2, None, 2
335987, 5, 5, 9, 1, 83, 2

CREATE TABLE `out_type` (
  Out_Id INTEGER,
  Out_Name TEXT
);
Sample rows from `out_type`:
1, caught
2, bowled
3, run out

","CREATE TABLE `Batting_Style` (
  Batting_Id INTEGER,
  Batting_hand TEXT
);
Sample rows from `Batting_Style`:
1, Left-hand bat
2, Right-hand bat

CREATE TABLE `Bowling_Style` (
  Bowling_Id INTEGER,
  Bowling_skill TEXT
);
Sample rows from `Bowling_Style`:
1, Right-arm medium
2, Right-arm offbreak
3, Right-arm fast-medium

CREATE TABLE `City` (
  City_Id INTEGER,
  City_Name TEXT,
  Country_id INTEGER
);
Sample rows from `City`:
1, Bangalore, 1
2, Chandigarh, 1
3, Delhi, 1

CREATE TABLE `Country` (
  Country_Id INTEGER REFERENCES Country(Country_Id),
  Country_Name TEXT
);
Sample rows from `Country`:
1, India
2, South Africa
3, U.A.E

CREATE TABLE `Extra_Type` (
  Extra_Id INTEGER,
  Extra_Name TEXT
);
Sample rows from `Extra_Type`:
1, legbyes
2, wides
3, byes

CREATE TABLE `Extra_Runs` (
  Match_Id INTEGER PRIMARY KEY,
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Extra_Type_Id INTEGER REFERENCES Extra_Type(Extra_Id),
  Extra_Runs INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Extra_Runs`:
335987, 1, 1, 1, 1, 1
335987, 1, 2, 2, 1, 2
335987, 1, 3, 2, 1, 1

CREATE TABLE `Out_Type` (
  Out_Id INTEGER,
  Out_Name TEXT
);
Sample rows from `Out_Type`:
1, caught
2, bowled
3, run out

CREATE TABLE `Outcome` (
  Outcome_Id INTEGER,
  Outcome_Type TEXT
);
Sample rows from `Outcome`:
1, Result
2, No Result
3, Superover

CREATE TABLE `Player` (
  Player_Id INTEGER,
  Player_Name TEXT,
  DOB DATE,
  Batting_hand INTEGER REFERENCES Batting_Style(Batting_Id),
  Bowling_skill INTEGER REFERENCES Bowling_Style(Bowling_Id),
  Country_Name INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Player`:
1, SC Ganguly, 1972-07-08, 1, 1, 1
2, BB McCullum, 1981-09-27, 2, 1, 4
3, RT Ponting, 1974-12-19, 2, 1, 5

CREATE TABLE `Rolee` (
  Role_Id INTEGER,
  Role_Desc TEXT
);
Sample rows from `Rolee`:
1, Captain
2, Keeper
3, Player

CREATE TABLE `Season` (
  Season_Id INTEGER,
  Man_of_the_Series INTEGER,
  Orange_Cap INTEGER,
  Purple_Cap INTEGER,
  Season_Year INTEGER
);
Sample rows from `Season`:
1, 32, 100, 102, 2008
2, 53, 18, 61, 2009
3, 133, 133, 131, 2010

CREATE TABLE `Team` (
  Team_Id INTEGER,
  Team_Name TEXT
);
Sample rows from `Team`:
1, Kolkata Knight Riders
2, Royal Challengers Bangalore
3, Chennai Super Kings

CREATE TABLE `Toss_Decision` (
  Toss_Id INTEGER,
  Toss_Name TEXT
);
Sample rows from `Toss_Decision`:
1, field
2, bat

CREATE TABLE `Umpire` (
  Umpire_Id INTEGER,
  Umpire_Name TEXT,
  Umpire_Country INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Umpire`:
1, Asad Rauf, 6
2, MR Benson, 10
3, Aleem Dar, 6

CREATE TABLE `Venue` (
  Venue_Id INTEGER,
  Venue_Name TEXT,
  City_Id INTEGER REFERENCES City(City_Id)
);
Sample rows from `Venue`:
1, M Chinnaswamy Stadium, 1
2, Punjab Cricket Association Stadium, 2
3, Feroz Shah Kotla, 3

CREATE TABLE `Win_By` (
  Win_Id INTEGER,
  Win_Type TEXT
);
Sample rows from `Win_By`:
1, runs
2, wickets
3, NO Result

CREATE TABLE `Match` (
  Match_Id INTEGER,
  Team_1 INTEGER REFERENCES Team(Team_Id),
  Team_2 INTEGER REFERENCES Team(Team_Id),
  Match_Date DATE,
  Season_Id INTEGER REFERENCES Season(Season_Id),
  Venue_Id INTEGER REFERENCES Venue(Venue_Id),
  Toss_Winner INTEGER REFERENCES Team(Team_Id),
  Toss_Decide INTEGER REFERENCES Toss_Decision(Toss_Id),
  Win_Type INTEGER REFERENCES Win_By(Win_Id),
  Win_Margin INTEGER,
  Outcome_type INTEGER REFERENCES Out_Type(Out_Id),
  Match_Winner INTEGER REFERENCES Team(Team_Id),
  Man_of_the_Match INTEGER REFERENCES Player(Player_Id)
);
Sample rows from `Match`:
335987, 2, 1, 2008-04-18, 1, 1, 2, 1, 1, 140, 1, 1, 2
335988, 4, 3, 2008-04-19, 1, 2, 3, 2, 1, 33, 1, 3, 19
335989, 6, 5, 2008-04-19, 1, 3, 5, 2, 2, 9, 1, 6, 90

CREATE TABLE `Ball_by_Ball` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Innings_No INTEGER PRIMARY KEY,
  Team_Batting INTEGER,
  Team_Bowling INTEGER,
  Striker_Batting_Position INTEGER,
  Striker INTEGER,
  Non_Striker INTEGER,
  Bowler INTEGER
);
Sample rows from `Ball_by_Ball`:
335987, 1, 1, 1, 1, 2, 1, 1, 2, 14
335987, 1, 1, 2, 2, 1, 1, 6, 7, 106
335987, 1, 2, 1, 1, 2, 2, 2, 1, 14

CREATE TABLE `Batsman_Scored` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Runs_Scored INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Batsman_Scored`:
335987, 1, 1, 0, 1
335987, 1, 1, 1, 2
335987, 1, 2, 0, 1

CREATE TABLE `Player_Match` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Player_Id INTEGER PRIMARY KEY REFERENCES Player(Player_Id),
  Role_Id INTEGER PRIMARY KEY REFERENCES Rolee(Role_Id),
  Team_Id INTEGER REFERENCES Team(Team_Id)
);
Sample rows from `Player_Match`:
335987, 1, 1, 1
335987, 2, 3, 1
335987, 3, 3, 1

CREATE TABLE `Wicket_Taken` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Player_Out INTEGER REFERENCES Player(Player_Id),
  Kind_Out INTEGER REFERENCES Out_Type(Out_Id),
  Fielders INTEGER REFERENCES Player(Player_Id),
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Wicket_Taken`:
335987, 2, 1, 6, 2, None, 2
335987, 3, 2, 8, 2, None, 2
335987, 5, 5, 9, 1, 83, 2

","wicket_taken, out_type","wicket_taken.player_out, wicket_taken.kind_out, out_type.out_id, out_type.out_name"
computer_student,List the advisor IDs for students with eighth year of program and position status in faculty of those professors.,"SELECT t1.p_id_dummy, t2.hasposition FROM advisedby as t1 inner JOIN person as t2 ON t1.p_id = t2.p_id WHERE t2.yearsinprogram = 'Year_8'","CREATE TABLE `advisedby` (
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id),
  p_id_dummy INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `advisedby`:
96, 5
118, 5
183, 5

CREATE TABLE `person` (
  p_id INTEGER,
  professor INTEGER,
  student INTEGER,
  hasPosition TEXT,
  inPhase TEXT,
  yearsInProgram TEXT
);
Sample rows from `person`:
3, 0, 1, 0, 0, 0
4, 0, 1, 0, 0, 0
5, 1, 0, Faculty, 0, 0

","CREATE TABLE `course` (
  course_id INTEGER,
  courseLevel TEXT
);
Sample rows from `course`:
0, Level_500
1, Level_500
2, Level_500

CREATE TABLE `person` (
  p_id INTEGER,
  professor INTEGER,
  student INTEGER,
  hasPosition TEXT,
  inPhase TEXT,
  yearsInProgram TEXT
);
Sample rows from `person`:
3, 0, 1, 0, 0, 0
4, 0, 1, 0, 0, 0
5, 1, 0, Faculty, 0, 0

CREATE TABLE `advisedBy` (
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id),
  p_id_dummy INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `advisedBy`:
96, 5
118, 5
183, 5

CREATE TABLE `taughtBy` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  p_id INTEGER PRIMARY KEY REFERENCES person(p_id)
);
Sample rows from `taughtBy`:
0, 40
1, 40
2, 180

","advisedby, person","advisedby.p_id_dummy, person.hasposition, advisedby.p_id, person.p_id, person.yearsinprogram"
social_media,What is the gender of the user whose tweet got 535 retweets?,SELECT t2.gender FROM twitter as t1 inner JOIN user as t2 ON t1.userid = t2.userid WHERE t1.retweetcount = 535,"CREATE TABLE `twitter` (
  TweetID TEXT PRIMARY KEY,
  Weekday TEXT,
  Hour INTEGER,
  Day INTEGER,
  Lang TEXT,
  IsReshare TEXT,
  Reach INTEGER,
  RetweetCount INTEGER,
  Likes INTEGER,
  Klout INTEGER,
  Sentiment REAL,
  text TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  UserID TEXT REFERENCES user(UserID)
);
Sample rows from `twitter`:
tw-682712873332805633, Thursday, 17, 31, en, FALSE, 44, 0, 0, 35, 0.0, We are hiring: Senior Software Engineer - Proto http://www.reqcloud.com/jobs/719865/?k=0LaPxXuFwczs1e32ZURJKrgCIDMQtRO7BquFSQthUKY&utm_source=twitter&utm_campaign=reqCloud_JobPost #job @awscloud #job #protocol #networking #aws #mediastreaming, 3751, tw-40932430
tw-682713045357998080, Thursday, 17, 31, en, TRUE, 1810, 5, 0, 53, 2.0, RT @CodeMineStatus: This is true Amazon Web Services https://aws.amazon.com/ #php #html #html5 #css #webdesign #seo #java #javascript htt, 3989, tw-3179389829
tw-682713219375476736, Thursday, 17, 31, en, FALSE, 282, 0, 0, 47, 0.0, Devops Engineer Aws Ansible Cassandra Mysql Ubuntu Ruby On Rails Jobs in Austin TX #Austin #TX #jobs #jobsearch https://www.jobfindly.com/devops-engineer-aws-ansible-cassandra-mysql-ubuntu-ruby-on-rails-jobs-austin-tx.html, 3741, tw-4624808414

CREATE TABLE `user` (
  UserID TEXT PRIMARY KEY,
  Gender TEXT
);
Sample rows from `user`:
tw-1267804344, Unknown
tw-27229880, Male
tw-199664730, Male

","CREATE TABLE `location` (
  LocationID INTEGER,
  Country TEXT,
  State TEXT,
  StateCode TEXT,
  City TEXT
);
Sample rows from `location`:
1, Albania, Elbasan, AL, Elbasan
2, Albania, Tirane, AL, Tirana
3, Algeria, Souk Ahras, DZ, Souk Ahras

CREATE TABLE `user` (
  UserID TEXT PRIMARY KEY,
  Gender TEXT
);
Sample rows from `user`:
tw-1267804344, Unknown
tw-27229880, Male
tw-199664730, Male

CREATE TABLE `twitter` (
  TweetID TEXT PRIMARY KEY,
  Weekday TEXT,
  Hour INTEGER,
  Day INTEGER,
  Lang TEXT,
  IsReshare TEXT,
  Reach INTEGER,
  RetweetCount INTEGER,
  Likes INTEGER,
  Klout INTEGER,
  Sentiment REAL,
  text TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  UserID TEXT REFERENCES user(UserID)
);
Sample rows from `twitter`:
tw-682712873332805633, Thursday, 17, 31, en, FALSE, 44, 0, 0, 35, 0.0, We are hiring: Senior Software Engineer - Proto http://www.reqcloud.com/jobs/719865/?k=0LaPxXuFwczs1e32ZURJKrgCIDMQtRO7BquFSQthUKY&utm_source=twitter&utm_campaign=reqCloud_JobPost #job @awscloud #job #protocol #networking #aws #mediastreaming, 3751, tw-40932430
tw-682713045357998080, Thursday, 17, 31, en, TRUE, 1810, 5, 0, 53, 2.0, RT @CodeMineStatus: This is true Amazon Web Services https://aws.amazon.com/ #php #html #html5 #css #webdesign #seo #java #javascript htt, 3989, tw-3179389829
tw-682713219375476736, Thursday, 17, 31, en, FALSE, 282, 0, 0, 47, 0.0, Devops Engineer Aws Ansible Cassandra Mysql Ubuntu Ruby On Rails Jobs in Austin TX #Austin #TX #jobs #jobsearch https://www.jobfindly.com/devops-engineer-aws-ansible-cassandra-mysql-ubuntu-ruby-on-rails-jobs-austin-tx.html, 3741, tw-4624808414

","twitter, user","user.gender, twitter.userid, user.userid, twitter.retweetcount"
law_episode,How many votes did the episode titled Juvenile get?,SELECT SUM(t2.votes) FROM episode as t1 inner JOIN vote as t2 ON t1.episode_id = t2.episode_id WHERE t1.title = 'Juvenile',"CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `vote`:
tt0629204, 10, 36, 17.7
tt0629204, 9, 39, 19.2
tt0629204, 8, 64, 31.5

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
tt0629239, nun
tt0629239, priest
tt0629420, police officer

CREATE TABLE `Person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  series TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  person_id TEXT REFERENCES Person(person_id),
  role TEXT,
  result TEXT
);
Sample rows from `Award`:
258, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0937725, None, Winner
259, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0792309, None, Winner
260, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0049569, None, Winner

CREATE TABLE `Credit` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  person_id TEXT PRIMARY KEY REFERENCES Person(person_id),
  category TEXT,
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
tt0629204, nm0226352, Additional Crew, technical advisor, true
tt0629204, nm0506974, Additional Crew, production accountant, true
tt0629204, nm4103116, Additional Crew, production accountant, true

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
tt0629204, 10, 36, 17.7
tt0629204, 9, 39, 19.2
tt0629204, 8, 64, 31.5

","episode, vote","vote.votes, episode.episode_id, vote.episode_id, episode.title"
cars,What is the price of the car ID 15?,SELECT t2.price FROM data as t1 inner JOIN price as t2 ON t1.id = t2.id WHERE t1.id = 15,"CREATE TABLE `data` (
  ID INTEGER REFERENCES price(ID),
  mpg REAL,
  cylinders INTEGER,
  displacement REAL,
  horsepower INTEGER,
  weight INTEGER,
  acceleration REAL,
  model INTEGER,
  car_name TEXT
);
Sample rows from `data`:
1, 18.0, 8, 307.0, 130, 3504, 12.0, 70, chevrolet chevelle malibu
2, 15.0, 8, 350.0, 165, 3693, 11.5, 70, buick skylark 320
3, 18.0, 8, 318.0, 150, 3436, 11.0, 70, plymouth satellite

CREATE TABLE `price` (
  ID INTEGER,
  price REAL
);
Sample rows from `price`:
1, 25561.59078
2, 24221.42273
3, 27240.84373

","CREATE TABLE `country` (
  origin INTEGER,
  country TEXT
);
Sample rows from `country`:
1, USA
2, Europe
3, Japan

CREATE TABLE `price` (
  ID INTEGER,
  price REAL
);
Sample rows from `price`:
1, 25561.59078
2, 24221.42273
3, 27240.84373

CREATE TABLE `data` (
  ID INTEGER REFERENCES price(ID),
  mpg REAL,
  cylinders INTEGER,
  displacement REAL,
  horsepower INTEGER,
  weight INTEGER,
  acceleration REAL,
  model INTEGER,
  car_name TEXT
);
Sample rows from `data`:
1, 18.0, 8, 307.0, 130, 3504, 12.0, 70, chevrolet chevelle malibu
2, 15.0, 8, 350.0, 165, 3693, 11.5, 70, buick skylark 320
3, 18.0, 8, 318.0, 150, 3436, 11.0, 70, plymouth satellite

CREATE TABLE `production` (
  ID INTEGER PRIMARY KEY REFERENCES price(ID) REFERENCES data(ID),
  model_year INTEGER PRIMARY KEY,
  country INTEGER REFERENCES country(origin)
);
Sample rows from `production`:
1, 1970, 1
1, 1971, 1
2, 1970, 1

","data, price","price.price, data.id, price.id"
food_inspection_2,State the salary of the employee who did the most inspections.,"SELECt t1.salary FROM employee as t1 inner JOIN ( SELECt t.employee_id, COUNT(t.inspection_id) FROM inspection as t GROUP BY t.employee_id ORDER BY COUNT(t.inspection_id) DESC LIMIt 1 ) as t2 ON t1.employee_id = t2.employee_id","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

","employee, inspection","employee.salary, inspection.employee_id, inspection.inspection_id, employee.employee_id"
movie_platform,"Give the name of the movie that got the most ""5"" ratings.",SELECT t2.movie_title FROM ratings as t1 inner JOIN movies as t2 ON t1.movie_id = t2.movie_id WHERE t1.rating_score = 5,"CREATE TABLE `ratings` (
  movie_id INTEGER REFERENCES movies(movie_id),
  rating_id INTEGER REFERENCES ratings(rating_id),
  rating_url TEXT,
  rating_score INTEGER,
  rating_timestamp_utc TEXT,
  critic TEXT,
  critic_likes INTEGER,
  critic_comments INTEGER,
  user_id INTEGER REFERENCES ratings_users(user_id) REFERENCES lists_users(user_id),
  user_trialist INTEGER,
  user_subscriber INTEGER,
  user_eligible_for_trial INTEGER,
  user_has_payment_method INTEGER
);
Sample rows from `ratings`:
1066, 15610495, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/15610495, 3, 2017-06-10 12:38:33, None, 0, 0, 41579158, 0, 0, 1, 0
1066, 10704606, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/10704606, 2, 2014-08-15 23:42:31, None, 0, 0, 85981819, 1, 1, 0, 1
1066, 10177114, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/10177114, 2, 2014-01-30 13:21:57, None, 0, 0, 4208563, 0, 0, 1, 1

CREATE TABLE `movies` (
  movie_id INTEGER,
  movie_title TEXT,
  movie_release_year INTEGER,
  movie_url TEXT,
  movie_title_language TEXT,
  movie_popularity INTEGER,
  movie_image_url TEXT,
  director_id TEXT,
  director_name TEXT,
  director_url TEXT
);
Sample rows from `movies`:
1, La Antena, 2007, http://mubi.com/films/la-antena, en, 105, https://images.mubicdn.net/images/film/1/cache-7927-1581389497/image-w1280.jpg, 131, Esteban Sapir, http://mubi.com/cast/esteban-sapir
2, Elementary Particles, 2006, http://mubi.com/films/elementary-particles, en, 23, https://images.mubicdn.net/images/film/2/cache-512179-1581389841/image-w1280.jpg, 73, Oskar Roehler, http://mubi.com/cast/oskar-roehler
3, It's Winter, 2006, http://mubi.com/films/its-winter, en, 21, https://images.mubicdn.net/images/film/3/cache-7929-1481539519/image-w1280.jpg, 82, Rafi Pitts, http://mubi.com/cast/rafi-pitts

","CREATE TABLE `lists` (
  user_id INTEGER REFERENCES lists_users(user_id),
  list_id INTEGER,
  list_title TEXT,
  list_movie_number INTEGER,
  list_update_timestamp_utc TEXT,
  list_creation_timestamp_utc TEXT,
  list_followers INTEGER,
  list_url TEXT,
  list_comments INTEGER,
  list_description TEXT,
  list_cover_image_url TEXT,
  list_first_image_url TEXT,
  list_second_image_url TEXT,
  list_third_image_url TEXT
);
Sample rows from `lists`:
88260493, 1, Films that made your kid sister cry, 5, 2019-01-24 19:16:18, 2009-11-11 00:02:21, 5, http://mubi.com/lists/films-that-made-your-kid-sister-cry, 3, <p>Don’t be such a baby!!</p>
<p><strong>bold</strong></p>, https://assets.mubicdn.net/images/film/3822/image-w1280.jpg?1445914994, https://assets.mubicdn.net/images/film/3822/image-w320.jpg?1445914994, https://assets.mubicdn.net/images/film/506/image-w320.jpg?1543838422, https://assets.mubicdn.net/images/film/485/image-w320.jpg?1575331204
45204418, 2, Headscratchers, 3, 2018-12-03 15:12:20, 2009-11-11 00:05:11, 1, http://mubi.com/lists/headscratchers, 2, <p>Films that need at least two viewings to really make sense.</p>
<p>Or at least… they did for <em>me</em>.</p>, https://assets.mubicdn.net/images/film/4343/image-w1280.jpg?1583331932, https://assets.mubicdn.net/images/film/4343/image-w320.jpg?1583331932, https://assets.mubicdn.net/images/film/159/image-w320.jpg?1548864573, https://assets.mubicdn.net/images/film/142/image-w320.jpg?1544094102
48905025, 3, Sexy Time Movies, 7, 2019-05-30 03:00:07, 2009-11-11 00:20:00, 6, http://mubi.com/lists/sexy-time-movies, 5, <p>Films that get you in the mood…for love. In development.</p>
<p>Remarks</p>
<p><strong>Enter the Void</strong><br>
If you’ve seen <a href=""http://www.theauteurs.com/films/2377"" rel=""nofollow"">Enter the Void</a> then you’ll know why that’s on this list., https://assets.mubicdn.net/images/film/3491/image-w1280.jpg?1564112978, https://assets.mubicdn.net/images/film/3491/image-w320.jpg?1564112978, https://assets.mubicdn.net/images/film/2377/image-w320.jpg?1564675204, https://assets.mubicdn.net/images/film/2874/image-w320.jpg?1546574412

CREATE TABLE `movies` (
  movie_id INTEGER,
  movie_title TEXT,
  movie_release_year INTEGER,
  movie_url TEXT,
  movie_title_language TEXT,
  movie_popularity INTEGER,
  movie_image_url TEXT,
  director_id TEXT,
  director_name TEXT,
  director_url TEXT
);
Sample rows from `movies`:
1, La Antena, 2007, http://mubi.com/films/la-antena, en, 105, https://images.mubicdn.net/images/film/1/cache-7927-1581389497/image-w1280.jpg, 131, Esteban Sapir, http://mubi.com/cast/esteban-sapir
2, Elementary Particles, 2006, http://mubi.com/films/elementary-particles, en, 23, https://images.mubicdn.net/images/film/2/cache-512179-1581389841/image-w1280.jpg, 73, Oskar Roehler, http://mubi.com/cast/oskar-roehler
3, It's Winter, 2006, http://mubi.com/films/its-winter, en, 21, https://images.mubicdn.net/images/film/3/cache-7929-1481539519/image-w1280.jpg, 82, Rafi Pitts, http://mubi.com/cast/rafi-pitts

CREATE TABLE `ratings_users` (
  user_id INTEGER REFERENCES lists_users(user_id),
  rating_date_utc TEXT,
  user_trialist INTEGER,
  user_subscriber INTEGER,
  user_avatar_image_url TEXT,
  user_cover_image_url TEXT,
  user_eligible_for_trial INTEGER,
  user_has_payment_method INTEGER
);
Sample rows from `ratings_users`:
41579158, 2017-06-10, 0, 0, https://assets.mubicdn.net/images/avatars/74283/images-w150.jpg?1523895155, None, 1, 0
68654088, 2012-10-02, 0, 0, https://assets.mubicdn.net/images/avatars/27714/images-w150.jpg?1523889463, None, 1, 1
84114365, 2010-12-25, 0, 0, https://assets.mubicdn.net/images/avatars/1808/images-w150.jpg?1523883471, None, 1, 0

CREATE TABLE `lists_users` (
  user_id INTEGER PRIMARY KEY REFERENCES lists(user_id),
  list_id INTEGER PRIMARY KEY REFERENCES lists(list_id),
  list_update_date_utc TEXT,
  list_creation_date_utc TEXT,
  user_trialist INTEGER,
  user_subscriber INTEGER,
  user_avatar_image_url TEXT,
  user_cover_image_url TEXT,
  user_eligible_for_trial TEXT,
  user_has_payment_method TEXT
);
Sample rows from `lists_users`:
85981819, 1969, 2019-11-26, 2009-12-18, 1, 1, https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214, None, 0, 1
85981819, 3946, 2020-05-01, 2010-01-30, 1, 1, https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214, None, 0, 1
85981819, 6683, 2020-04-12, 2010-03-31, 1, 1, https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214, None, 0, 1

CREATE TABLE `ratings` (
  movie_id INTEGER REFERENCES movies(movie_id),
  rating_id INTEGER REFERENCES ratings(rating_id),
  rating_url TEXT,
  rating_score INTEGER,
  rating_timestamp_utc TEXT,
  critic TEXT,
  critic_likes INTEGER,
  critic_comments INTEGER,
  user_id INTEGER REFERENCES ratings_users(user_id) REFERENCES lists_users(user_id),
  user_trialist INTEGER,
  user_subscriber INTEGER,
  user_eligible_for_trial INTEGER,
  user_has_payment_method INTEGER
);
Sample rows from `ratings`:
1066, 15610495, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/15610495, 3, 2017-06-10 12:38:33, None, 0, 0, 41579158, 0, 0, 1, 0
1066, 10704606, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/10704606, 2, 2014-08-15 23:42:31, None, 0, 0, 85981819, 1, 1, 0, 1
1066, 10177114, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/10177114, 2, 2014-01-30 13:21:57, None, 0, 0, 4208563, 0, 0, 1, 1

","ratings, movies","movies.movie_title, ratings.movie_id, movies.movie_id, ratings.rating_score"
retails,"Name the countries that belong in the region with comment description ""furiously express accounts wake sly"".",SELECT t1.n_name FROM nation as t1 inner JOIN region as t2 ON t1.n_regionkey = t2.r_regionkey WHERE t2.r_comment = 'furiously express accounts wake sly',"CREATE TABLE `nation` (
  n_nationkey INTEGER,
  n_name TEXT,
  n_regionkey INTEGER REFERENCES region(r_regionkey),
  n_comment TEXT
);
Sample rows from `nation`:
0, ALGERIA, 0, slyly express pinto beans cajole idly. deposits use blithely unusual packages? fluffily final accounts x-r
1, ARGENTINA, 1, instructions detect blithely stealthily pending packages
2, BRAZIL, 1, blithely unusual deposits are quickly--

CREATE TABLE `region` (
  r_regionkey INTEGER,
  r_name TEXT,
  r_comment TEXT
);
Sample rows from `region`:
0, AFRICA, asymptotes sublate after the r
1, AMERICA, requests affix quickly final tithes. blithely even packages above the a
2, ASIA, accounts cajole carefully according to the carefully exp

","CREATE TABLE `customer` (
  c_custkey INTEGER,
  c_mktsegment TEXT,
  c_nationkey INTEGER REFERENCES nation(n_nationkey),
  c_name TEXT,
  c_address TEXT,
  c_phone TEXT,
  c_acctbal REAL,
  c_comment TEXT
);
Sample rows from `customer`:
1, BUILDING, 8, Customer#000000001, KwX3hMHjZ6, 937-241-3198, 3560.03, ironic excuses detect slyly silent requests. requests according to the exc
2, MACHINERY, 16, Customer#000000002, ioUn,eqTTXOdo, 906-965-7556, 7550.21, final express accounts mold slyly. ironic accounts cajole! quickly express a
3, FURNITURE, 11, Customer#000000003, YddJqmIdouNT9Yj, 328-750-7603, -926.96, carefully express foxes sleep carefully. pending platelets sleep thinly for t

CREATE TABLE `lineitem` (
  l_shipdate DATE,
  l_orderkey INTEGER PRIMARY KEY REFERENCES orders(o_orderkey),
  l_discount REAL,
  l_extendedprice REAL,
  l_suppkey INTEGER REFERENCES partsupp(ps_suppkey),
  l_quantity INTEGER,
  l_returnflag TEXT,
  l_partkey INTEGER REFERENCES partsupp(ps_partkey),
  l_linestatus TEXT,
  l_tax REAL,
  l_commitdate DATE,
  l_receiptdate DATE,
  l_shipmode TEXT,
  l_linenumber INTEGER PRIMARY KEY,
  l_shipinstruct TEXT,
  l_comment TEXT
);
Sample rows from `lineitem`:
1995-08-16, 1, 0.1, 58303.08, 6296, 33, N, 98768, O, 0.06, 1995-07-12, 1995-09-14, RAIL, 1, NONE, carefully bo
1995-08-13, 1, 0.09, 16947.7, 8776, 10, N, 23771, O, 0.08, 1995-07-09, 1995-08-27, TRUCK, 2, TAKE BACK RETURN, blithely regular pac
1995-06-17, 1, 0.1, 63642.9, 3859, 34, N, 113858, O, 0.08, 1995-05-22, 1995-06-30, SHIP, 3, COLLECT COD, ironic accounts sleep furiously silen

CREATE TABLE `nation` (
  n_nationkey INTEGER,
  n_name TEXT,
  n_regionkey INTEGER REFERENCES region(r_regionkey),
  n_comment TEXT
);
Sample rows from `nation`:
0, ALGERIA, 0, slyly express pinto beans cajole idly. deposits use blithely unusual packages? fluffily final accounts x-r
1, ARGENTINA, 1, instructions detect blithely stealthily pending packages
2, BRAZIL, 1, blithely unusual deposits are quickly--

CREATE TABLE `orders` (
  o_orderdate DATE,
  o_orderkey INTEGER,
  o_custkey INTEGER REFERENCES customer(c_custkey),
  o_orderpriority TEXT,
  o_shippriority INTEGER,
  o_clerk TEXT,
  o_orderstatus TEXT,
  o_totalprice REAL,
  o_comment TEXT
);
Sample rows from `orders`:
1995-04-19, 1, 73100, 4-NOT SPECIFIED, 0, Clerk#000000916, P, 203198.56, final packages sleep blithely packa
1996-11-04, 2, 92861, 1-URGENT, 0, Clerk#000000373, O, 317719.99, final excuses about the ironic even deposits detect express request
1992-02-15, 3, 44875, 1-URGENT, 0, Clerk#000000485, F, 146674.98, final final deposits cajole foxes. blithely pendin

CREATE TABLE `part` (
  p_partkey INTEGER,
  p_type TEXT,
  p_size INTEGER,
  p_brand TEXT,
  p_name TEXT,
  p_container TEXT,
  p_mfgr TEXT,
  p_retailprice REAL,
  p_comment TEXT
);
Sample rows from `part`:
1, LARGE PLATED TIN, 31, Brand#43, burlywood plum powder puff mint, LG BAG, Manufacturer#4, 901.0, blithely busy reque
2, LARGE POLISHED STEEL, 4, Brand#55, hot spring dodger dim light, LG CASE, Manufacturer#5, 902.0, even ironic requests s
3, STANDARD PLATED COPPER, 30, Brand#53, dark slate grey steel misty, WRAP CASE, Manufacturer#5, 903.0, slyly ironic fox

CREATE TABLE `partsupp` (
  ps_partkey INTEGER PRIMARY KEY REFERENCES part(p_partkey),
  ps_suppkey INTEGER PRIMARY KEY REFERENCES supplier(s_suppkey),
  ps_supplycost REAL,
  ps_availqty INTEGER,
  ps_comment TEXT
);
Sample rows from `partsupp`:
1, 2, 400.75, 1111, carefully ironic deposits use against the carefully unusual accounts. slyly silent platelets nag quickly even
1, 2502, 702.61, 3999, slyly regular accounts serve carefully. asymptotes after the slyly even instructions cajole quickly ironic requests. pending dugouts about the slyly 
1, 5002, 383.95, 7411, carefully special ideas are slyly. slyly ironic epitaphs use pending pending foxes. furiously express pinto beans lose quiet even requests: special final packages ar

CREATE TABLE `region` (
  r_regionkey INTEGER,
  r_name TEXT,
  r_comment TEXT
);
Sample rows from `region`:
0, AFRICA, asymptotes sublate after the r
1, AMERICA, requests affix quickly final tithes. blithely even packages above the a
2, ASIA, accounts cajole carefully according to the carefully exp

CREATE TABLE `supplier` (
  s_suppkey INTEGER,
  s_nationkey INTEGER REFERENCES nation(n_nationkey),
  s_comment TEXT,
  s_name TEXT,
  s_address TEXT,
  s_phone TEXT,
  s_acctbal REAL
);
Sample rows from `supplier`:
1, 13, blithely final pearls are. instructions thra, Supplier#000000001, ,wWs4pnykQOFl8mgVCU8EZMXqZs1w, 800-807-9579, 3082.86
2, 5, requests integrate fluffily. fluffily ironic deposits wake. bold, Supplier#000000002, WkXT6MSAJrp4qWq3W9N, 348-617-6055, 3009.73
3, 22, carefully express ideas shall have to unwin, Supplier#000000003, KjUqa42JEHaRDVQTHV6Yq2h, 471-986-9888, 9159.78

","nation, region","nation.n_name, nation.n_regionkey, region.r_regionkey, region.r_comment"
legislator,List all of the ids of the representatives belonging to the Democrat party in district 13 that ended their term on 1/3/2019?,SELECT bioguide FROM `current-terms` WHERE type = 'rep' AND party = 'Democrat' AND end = '2019-01-03' AND district = 13,"CREATE TABLE `current-terms` (
  address TEXT,
  bioguide TEXT PRIMARY KEY REFERENCES current(bioguide_id),
  caucus TEXT,
  chamber TEXT,
  class REAL,
  contact_form TEXT,
  district REAL,
  end TEXT PRIMARY KEY,
  fax TEXT,
  last TEXT,
  name TEXT,
  office TEXT,
  party TEXT,
  party_affiliations TEXT,
  phone TEXT,
  relation TEXT,
  rss_url TEXT,
  start TEXT,
  state TEXT,
  state_rank TEXT,
  title TEXT,
  type TEXT,
  url TEXT
);
Sample rows from `current-terms`:
None, B000944, None, None, None, None, 13.0, 1995-01-03, None, None, None, None, Democrat, None, None, None, None, 1993-01-05, OH, None, None, rep, None
None, B000944, None, None, None, None, 13.0, 1997-01-03, None, None, None, None, Democrat, None, None, None, None, 1995-01-04, OH, None, None, rep, None
None, B000944, None, None, None, None, 13.0, 1999-01-03, None, None, None, None, Democrat, None, None, None, None, 1997-01-07, OH, None, None, rep, None

","CREATE TABLE `current` (
  ballotpedia_id TEXT,
  bioguide_id TEXT PRIMARY KEY,
  birthday_bio DATE,
  cspan_id REAL PRIMARY KEY,
  fec_id TEXT,
  first_name TEXT,
  gender_bio TEXT,
  google_entity_id_id TEXT,
  govtrack_id INTEGER,
  house_history_id REAL,
  icpsr_id REAL,
  last_name TEXT,
  lis_id TEXT,
  maplight_id REAL,
  middle_name TEXT,
  nickname_name TEXT,
  official_full_name TEXT,
  opensecrets_id TEXT,
  religion_bio TEXT,
  suffix_name TEXT,
  thomas_id INTEGER,
  votesmart_id REAL,
  wikidata_id TEXT,
  wikipedia_id TEXT
);
Sample rows from `current`:
Sherrod Brown, B000944, 1952-11-09, 5051.0, ['H2OH13033', 'S6OH00163'], Sherrod, M, kg:/m/034s80, 400050, 9996.0, 29389.0, Brown, S307, 168.0, None, None, Sherrod Brown, N00003535, Lutheran, None, 136, 27018.0, Q381880, Sherrod Brown
Maria Cantwell, C000127, 1958-10-13, 26137.0, ['S8WA00194', 'H2WA01054'], Maria, F, kg:/m/01x68t, 300018, 10608.0, 39310.0, Cantwell, S275, 544.0, None, None, Maria Cantwell, N00007836, Roman Catholic, None, 172, 27122.0, Q22250, Maria Cantwell
Ben Cardin, C000141, 1943-10-05, 4004.0, ['H6MD03177', 'S6MD03177'], Benjamin, M, kg:/m/025k3k, 400064, 10629.0, 15408.0, Cardin, S308, 182.0, L., None, Benjamin L. Cardin, N00001955, Jewish, None, 174, 26888.0, Q723295, Ben Cardin

CREATE TABLE `current-terms` (
  address TEXT,
  bioguide TEXT PRIMARY KEY REFERENCES current(bioguide_id),
  caucus TEXT,
  chamber TEXT,
  class REAL,
  contact_form TEXT,
  district REAL,
  end TEXT PRIMARY KEY,
  fax TEXT,
  last TEXT,
  name TEXT,
  office TEXT,
  party TEXT,
  party_affiliations TEXT,
  phone TEXT,
  relation TEXT,
  rss_url TEXT,
  start TEXT,
  state TEXT,
  state_rank TEXT,
  title TEXT,
  type TEXT,
  url TEXT
);
Sample rows from `current-terms`:
None, B000944, None, None, None, None, 13.0, 1995-01-03, None, None, None, None, Democrat, None, None, None, None, 1993-01-05, OH, None, None, rep, None
None, B000944, None, None, None, None, 13.0, 1997-01-03, None, None, None, None, Democrat, None, None, None, None, 1995-01-04, OH, None, None, rep, None
None, B000944, None, None, None, None, 13.0, 1999-01-03, None, None, None, None, Democrat, None, None, None, None, 1997-01-07, OH, None, None, rep, None

CREATE TABLE `historical` (
  ballotpedia_id TEXT,
  bioguide_id TEXT PRIMARY KEY,
  bioguide_previous_id TEXT,
  birthday_bio TEXT,
  cspan_id TEXT,
  fec_id TEXT,
  first_name TEXT,
  gender_bio TEXT,
  google_entity_id_id TEXT,
  govtrack_id INTEGER,
  house_history_alternate_id TEXT,
  house_history_id REAL,
  icpsr_id REAL,
  last_name TEXT,
  lis_id TEXT,
  maplight_id TEXT,
  middle_name TEXT,
  nickname_name TEXT,
  official_full_name TEXT,
  opensecrets_id TEXT,
  religion_bio TEXT,
  suffix_name TEXT,
  thomas_id TEXT,
  votesmart_id TEXT,
  wikidata_id TEXT,
  wikipedia_id TEXT
);
Sample rows from `historical`:
None, B000226, None, 1745-04-02, None, None, Richard, M, kg:/m/02pz46, 401222, None, None, 507.0, Bassett, None, None, None, None, None, None, None, None, None, None, Q518823, Richard Bassett (politician)
None, B000546, None, 1742-03-21, None, None, Theodorick, M, kg:/m/033mf4, 401521, None, 9479.0, 786.0, Bland, None, None, None, None, None, None, None, None, None, None, Q1749152, Theodorick Bland (congressman)
None, B001086, None, 1743-06-16, None, None, Aedanus, M, kg:/m/03yccv, 402032, None, 10177.0, 1260.0, Burke, None, None, None, None, None, None, None, None, None, None, Q380504, Aedanus Burke

CREATE TABLE `historical-terms` (
  address TEXT,
  bioguide TEXT PRIMARY KEY REFERENCES historical(bioguide_id),
  chamber TEXT,
  class REAL,
  contact_form TEXT,
  district REAL,
  end TEXT,
  fax TEXT,
  last TEXT,
  middle TEXT,
  name TEXT,
  office TEXT,
  party TEXT,
  party_affiliations TEXT,
  phone TEXT,
  relation TEXT,
  rss_url TEXT,
  start TEXT,
  state TEXT,
  state_rank TEXT,
  title TEXT,
  type TEXT,
  url TEXT
);
Sample rows from `historical-terms`:
None, B000226, None, 2.0, None, None, 1793-03-03, None, None, None, None, None, Anti-Administration, None, None, None, None, 1789-03-04, DE, None, None, sen, None
None, B000546, None, None, None, 9.0, 1791-03-03, None, None, None, None, None, None, None, None, None, None, 1789-03-04, VA, None, None, rep, None
None, B001086, None, None, None, 2.0, 1791-03-03, None, None, None, None, None, None, None, None, None, None, 1789-03-04, SC, None, None, rep, None

CREATE TABLE `social-media` (
  bioguide TEXT PRIMARY KEY REFERENCES current(bioguide_id),
  facebook TEXT,
  facebook_id REAL,
  govtrack REAL,
  instagram TEXT,
  instagram_id REAL,
  thomas INTEGER,
  twitter TEXT,
  twitter_id REAL,
  youtube TEXT,
  youtube_id TEXT
);
Sample rows from `social-media`:
R000600, congresswomanaumuaamata, 1537155909907320.0, 412664.0, None, None, 2222, RepAmata, 3026622545.0, None, UCGdrLQbt1PYDTPsampx4t1A
Y000064, RepToddYoung, 186203844738421.0, 412428.0, None, None, 2019, RepToddYoung, 234128524.0, RepToddYoung, UCuknj4PGn91gHDNAfboZEgQ
E000295, senjoniernst, 351671691660938.0, 412667.0, senjoniernst, 1582702853.0, 2283, SenJoniErnst, 2856787757.0, None, UCLwrmtF_84FIcK3TyMs4MIw

",current-terms,"bioguide, party, district"
retails,Please list the names of the top 3 suppliers with the most amount of money in their accounts.,SELECT s_name FROM supplier ORDER BY s_acctbal DESC LIMIT 3,"CREATE TABLE `supplier` (
  s_suppkey INTEGER,
  s_nationkey INTEGER REFERENCES nation(n_nationkey),
  s_comment TEXT,
  s_name TEXT,
  s_address TEXT,
  s_phone TEXT,
  s_acctbal REAL
);
Sample rows from `supplier`:
1, 13, blithely final pearls are. instructions thra, Supplier#000000001, ,wWs4pnykQOFl8mgVCU8EZMXqZs1w, 800-807-9579, 3082.86
2, 5, requests integrate fluffily. fluffily ironic deposits wake. bold, Supplier#000000002, WkXT6MSAJrp4qWq3W9N, 348-617-6055, 3009.73
3, 22, carefully express ideas shall have to unwin, Supplier#000000003, KjUqa42JEHaRDVQTHV6Yq2h, 471-986-9888, 9159.78

","CREATE TABLE `customer` (
  c_custkey INTEGER,
  c_mktsegment TEXT,
  c_nationkey INTEGER REFERENCES nation(n_nationkey),
  c_name TEXT,
  c_address TEXT,
  c_phone TEXT,
  c_acctbal REAL,
  c_comment TEXT
);
Sample rows from `customer`:
1, BUILDING, 8, Customer#000000001, KwX3hMHjZ6, 937-241-3198, 3560.03, ironic excuses detect slyly silent requests. requests according to the exc
2, MACHINERY, 16, Customer#000000002, ioUn,eqTTXOdo, 906-965-7556, 7550.21, final express accounts mold slyly. ironic accounts cajole! quickly express a
3, FURNITURE, 11, Customer#000000003, YddJqmIdouNT9Yj, 328-750-7603, -926.96, carefully express foxes sleep carefully. pending platelets sleep thinly for t

CREATE TABLE `lineitem` (
  l_shipdate DATE,
  l_orderkey INTEGER PRIMARY KEY REFERENCES orders(o_orderkey),
  l_discount REAL,
  l_extendedprice REAL,
  l_suppkey INTEGER REFERENCES partsupp(ps_suppkey),
  l_quantity INTEGER,
  l_returnflag TEXT,
  l_partkey INTEGER REFERENCES partsupp(ps_partkey),
  l_linestatus TEXT,
  l_tax REAL,
  l_commitdate DATE,
  l_receiptdate DATE,
  l_shipmode TEXT,
  l_linenumber INTEGER PRIMARY KEY,
  l_shipinstruct TEXT,
  l_comment TEXT
);
Sample rows from `lineitem`:
1995-08-16, 1, 0.1, 58303.08, 6296, 33, N, 98768, O, 0.06, 1995-07-12, 1995-09-14, RAIL, 1, NONE, carefully bo
1995-08-13, 1, 0.09, 16947.7, 8776, 10, N, 23771, O, 0.08, 1995-07-09, 1995-08-27, TRUCK, 2, TAKE BACK RETURN, blithely regular pac
1995-06-17, 1, 0.1, 63642.9, 3859, 34, N, 113858, O, 0.08, 1995-05-22, 1995-06-30, SHIP, 3, COLLECT COD, ironic accounts sleep furiously silen

CREATE TABLE `nation` (
  n_nationkey INTEGER,
  n_name TEXT,
  n_regionkey INTEGER REFERENCES region(r_regionkey),
  n_comment TEXT
);
Sample rows from `nation`:
0, ALGERIA, 0, slyly express pinto beans cajole idly. deposits use blithely unusual packages? fluffily final accounts x-r
1, ARGENTINA, 1, instructions detect blithely stealthily pending packages
2, BRAZIL, 1, blithely unusual deposits are quickly--

CREATE TABLE `orders` (
  o_orderdate DATE,
  o_orderkey INTEGER,
  o_custkey INTEGER REFERENCES customer(c_custkey),
  o_orderpriority TEXT,
  o_shippriority INTEGER,
  o_clerk TEXT,
  o_orderstatus TEXT,
  o_totalprice REAL,
  o_comment TEXT
);
Sample rows from `orders`:
1995-04-19, 1, 73100, 4-NOT SPECIFIED, 0, Clerk#000000916, P, 203198.56, final packages sleep blithely packa
1996-11-04, 2, 92861, 1-URGENT, 0, Clerk#000000373, O, 317719.99, final excuses about the ironic even deposits detect express request
1992-02-15, 3, 44875, 1-URGENT, 0, Clerk#000000485, F, 146674.98, final final deposits cajole foxes. blithely pendin

CREATE TABLE `part` (
  p_partkey INTEGER,
  p_type TEXT,
  p_size INTEGER,
  p_brand TEXT,
  p_name TEXT,
  p_container TEXT,
  p_mfgr TEXT,
  p_retailprice REAL,
  p_comment TEXT
);
Sample rows from `part`:
1, LARGE PLATED TIN, 31, Brand#43, burlywood plum powder puff mint, LG BAG, Manufacturer#4, 901.0, blithely busy reque
2, LARGE POLISHED STEEL, 4, Brand#55, hot spring dodger dim light, LG CASE, Manufacturer#5, 902.0, even ironic requests s
3, STANDARD PLATED COPPER, 30, Brand#53, dark slate grey steel misty, WRAP CASE, Manufacturer#5, 903.0, slyly ironic fox

CREATE TABLE `partsupp` (
  ps_partkey INTEGER PRIMARY KEY REFERENCES part(p_partkey),
  ps_suppkey INTEGER PRIMARY KEY REFERENCES supplier(s_suppkey),
  ps_supplycost REAL,
  ps_availqty INTEGER,
  ps_comment TEXT
);
Sample rows from `partsupp`:
1, 2, 400.75, 1111, carefully ironic deposits use against the carefully unusual accounts. slyly silent platelets nag quickly even
1, 2502, 702.61, 3999, slyly regular accounts serve carefully. asymptotes after the slyly even instructions cajole quickly ironic requests. pending dugouts about the slyly 
1, 5002, 383.95, 7411, carefully special ideas are slyly. slyly ironic epitaphs use pending pending foxes. furiously express pinto beans lose quiet even requests: special final packages ar

CREATE TABLE `region` (
  r_regionkey INTEGER,
  r_name TEXT,
  r_comment TEXT
);
Sample rows from `region`:
0, AFRICA, asymptotes sublate after the r
1, AMERICA, requests affix quickly final tithes. blithely even packages above the a
2, ASIA, accounts cajole carefully according to the carefully exp

CREATE TABLE `supplier` (
  s_suppkey INTEGER,
  s_nationkey INTEGER REFERENCES nation(n_nationkey),
  s_comment TEXT,
  s_name TEXT,
  s_address TEXT,
  s_phone TEXT,
  s_acctbal REAL
);
Sample rows from `supplier`:
1, 13, blithely final pearls are. instructions thra, Supplier#000000001, ,wWs4pnykQOFl8mgVCU8EZMXqZs1w, 800-807-9579, 3082.86
2, 5, requests integrate fluffily. fluffily ironic deposits wake. bold, Supplier#000000002, WkXT6MSAJrp4qWq3W9N, 348-617-6055, 3009.73
3, 22, carefully express ideas shall have to unwin, Supplier#000000003, KjUqa42JEHaRDVQTHV6Yq2h, 471-986-9888, 9159.78

",supplier,"s_name, s_acctbal"
retails,Name the part which is most profitable.,"SELECt t.p_name FROM ( SELECt t3.p_name , t2.l_extendedprice * (1 - t2.l_discount) - t1.ps_supplycost * t2.l_quantity as num FROM partsupp as t1 inner JOIN lineitem as t2 ON t1.ps_suppkey = t2.l_suppkey inner JOIN part as t3 ON t1.ps_partkey = t3.p_partkey ) as t ORDER BY t.num DESC LIMIt 1","CREATE TABLE `partsupp` (
  ps_partkey INTEGER PRIMARY KEY REFERENCES part(p_partkey),
  ps_suppkey INTEGER PRIMARY KEY REFERENCES supplier(s_suppkey),
  ps_supplycost REAL,
  ps_availqty INTEGER,
  ps_comment TEXT
);
Sample rows from `partsupp`:
1, 2, 400.75, 1111, carefully ironic deposits use against the carefully unusual accounts. slyly silent platelets nag quickly even
1, 2502, 702.61, 3999, slyly regular accounts serve carefully. asymptotes after the slyly even instructions cajole quickly ironic requests. pending dugouts about the slyly 
1, 5002, 383.95, 7411, carefully special ideas are slyly. slyly ironic epitaphs use pending pending foxes. furiously express pinto beans lose quiet even requests: special final packages ar

CREATE TABLE `lineitem` (
  l_shipdate DATE,
  l_orderkey INTEGER PRIMARY KEY REFERENCES orders(o_orderkey),
  l_discount REAL,
  l_extendedprice REAL,
  l_suppkey INTEGER REFERENCES partsupp(ps_suppkey),
  l_quantity INTEGER,
  l_returnflag TEXT,
  l_partkey INTEGER REFERENCES partsupp(ps_partkey),
  l_linestatus TEXT,
  l_tax REAL,
  l_commitdate DATE,
  l_receiptdate DATE,
  l_shipmode TEXT,
  l_linenumber INTEGER PRIMARY KEY,
  l_shipinstruct TEXT,
  l_comment TEXT
);
Sample rows from `lineitem`:
1995-08-16, 1, 0.1, 58303.08, 6296, 33, N, 98768, O, 0.06, 1995-07-12, 1995-09-14, RAIL, 1, NONE, carefully bo
1995-08-13, 1, 0.09, 16947.7, 8776, 10, N, 23771, O, 0.08, 1995-07-09, 1995-08-27, TRUCK, 2, TAKE BACK RETURN, blithely regular pac
1995-06-17, 1, 0.1, 63642.9, 3859, 34, N, 113858, O, 0.08, 1995-05-22, 1995-06-30, SHIP, 3, COLLECT COD, ironic accounts sleep furiously silen

CREATE TABLE `part` (
  p_partkey INTEGER,
  p_type TEXT,
  p_size INTEGER,
  p_brand TEXT,
  p_name TEXT,
  p_container TEXT,
  p_mfgr TEXT,
  p_retailprice REAL,
  p_comment TEXT
);
Sample rows from `part`:
1, LARGE PLATED TIN, 31, Brand#43, burlywood plum powder puff mint, LG BAG, Manufacturer#4, 901.0, blithely busy reque
2, LARGE POLISHED STEEL, 4, Brand#55, hot spring dodger dim light, LG CASE, Manufacturer#5, 902.0, even ironic requests s
3, STANDARD PLATED COPPER, 30, Brand#53, dark slate grey steel misty, WRAP CASE, Manufacturer#5, 903.0, slyly ironic fox

","CREATE TABLE `customer` (
  c_custkey INTEGER,
  c_mktsegment TEXT,
  c_nationkey INTEGER REFERENCES nation(n_nationkey),
  c_name TEXT,
  c_address TEXT,
  c_phone TEXT,
  c_acctbal REAL,
  c_comment TEXT
);
Sample rows from `customer`:
1, BUILDING, 8, Customer#000000001, KwX3hMHjZ6, 937-241-3198, 3560.03, ironic excuses detect slyly silent requests. requests according to the exc
2, MACHINERY, 16, Customer#000000002, ioUn,eqTTXOdo, 906-965-7556, 7550.21, final express accounts mold slyly. ironic accounts cajole! quickly express a
3, FURNITURE, 11, Customer#000000003, YddJqmIdouNT9Yj, 328-750-7603, -926.96, carefully express foxes sleep carefully. pending platelets sleep thinly for t

CREATE TABLE `lineitem` (
  l_shipdate DATE,
  l_orderkey INTEGER PRIMARY KEY REFERENCES orders(o_orderkey),
  l_discount REAL,
  l_extendedprice REAL,
  l_suppkey INTEGER REFERENCES partsupp(ps_suppkey),
  l_quantity INTEGER,
  l_returnflag TEXT,
  l_partkey INTEGER REFERENCES partsupp(ps_partkey),
  l_linestatus TEXT,
  l_tax REAL,
  l_commitdate DATE,
  l_receiptdate DATE,
  l_shipmode TEXT,
  l_linenumber INTEGER PRIMARY KEY,
  l_shipinstruct TEXT,
  l_comment TEXT
);
Sample rows from `lineitem`:
1995-08-16, 1, 0.1, 58303.08, 6296, 33, N, 98768, O, 0.06, 1995-07-12, 1995-09-14, RAIL, 1, NONE, carefully bo
1995-08-13, 1, 0.09, 16947.7, 8776, 10, N, 23771, O, 0.08, 1995-07-09, 1995-08-27, TRUCK, 2, TAKE BACK RETURN, blithely regular pac
1995-06-17, 1, 0.1, 63642.9, 3859, 34, N, 113858, O, 0.08, 1995-05-22, 1995-06-30, SHIP, 3, COLLECT COD, ironic accounts sleep furiously silen

CREATE TABLE `nation` (
  n_nationkey INTEGER,
  n_name TEXT,
  n_regionkey INTEGER REFERENCES region(r_regionkey),
  n_comment TEXT
);
Sample rows from `nation`:
0, ALGERIA, 0, slyly express pinto beans cajole idly. deposits use blithely unusual packages? fluffily final accounts x-r
1, ARGENTINA, 1, instructions detect blithely stealthily pending packages
2, BRAZIL, 1, blithely unusual deposits are quickly--

CREATE TABLE `orders` (
  o_orderdate DATE,
  o_orderkey INTEGER,
  o_custkey INTEGER REFERENCES customer(c_custkey),
  o_orderpriority TEXT,
  o_shippriority INTEGER,
  o_clerk TEXT,
  o_orderstatus TEXT,
  o_totalprice REAL,
  o_comment TEXT
);
Sample rows from `orders`:
1995-04-19, 1, 73100, 4-NOT SPECIFIED, 0, Clerk#000000916, P, 203198.56, final packages sleep blithely packa
1996-11-04, 2, 92861, 1-URGENT, 0, Clerk#000000373, O, 317719.99, final excuses about the ironic even deposits detect express request
1992-02-15, 3, 44875, 1-URGENT, 0, Clerk#000000485, F, 146674.98, final final deposits cajole foxes. blithely pendin

CREATE TABLE `part` (
  p_partkey INTEGER,
  p_type TEXT,
  p_size INTEGER,
  p_brand TEXT,
  p_name TEXT,
  p_container TEXT,
  p_mfgr TEXT,
  p_retailprice REAL,
  p_comment TEXT
);
Sample rows from `part`:
1, LARGE PLATED TIN, 31, Brand#43, burlywood plum powder puff mint, LG BAG, Manufacturer#4, 901.0, blithely busy reque
2, LARGE POLISHED STEEL, 4, Brand#55, hot spring dodger dim light, LG CASE, Manufacturer#5, 902.0, even ironic requests s
3, STANDARD PLATED COPPER, 30, Brand#53, dark slate grey steel misty, WRAP CASE, Manufacturer#5, 903.0, slyly ironic fox

CREATE TABLE `partsupp` (
  ps_partkey INTEGER PRIMARY KEY REFERENCES part(p_partkey),
  ps_suppkey INTEGER PRIMARY KEY REFERENCES supplier(s_suppkey),
  ps_supplycost REAL,
  ps_availqty INTEGER,
  ps_comment TEXT
);
Sample rows from `partsupp`:
1, 2, 400.75, 1111, carefully ironic deposits use against the carefully unusual accounts. slyly silent platelets nag quickly even
1, 2502, 702.61, 3999, slyly regular accounts serve carefully. asymptotes after the slyly even instructions cajole quickly ironic requests. pending dugouts about the slyly 
1, 5002, 383.95, 7411, carefully special ideas are slyly. slyly ironic epitaphs use pending pending foxes. furiously express pinto beans lose quiet even requests: special final packages ar

CREATE TABLE `region` (
  r_regionkey INTEGER,
  r_name TEXT,
  r_comment TEXT
);
Sample rows from `region`:
0, AFRICA, asymptotes sublate after the r
1, AMERICA, requests affix quickly final tithes. blithely even packages above the a
2, ASIA, accounts cajole carefully according to the carefully exp

CREATE TABLE `supplier` (
  s_suppkey INTEGER,
  s_nationkey INTEGER REFERENCES nation(n_nationkey),
  s_comment TEXT,
  s_name TEXT,
  s_address TEXT,
  s_phone TEXT,
  s_acctbal REAL
);
Sample rows from `supplier`:
1, 13, blithely final pearls are. instructions thra, Supplier#000000001, ,wWs4pnykQOFl8mgVCU8EZMXqZs1w, 800-807-9579, 3082.86
2, 5, requests integrate fluffily. fluffily ironic deposits wake. bold, Supplier#000000002, WkXT6MSAJrp4qWq3W9N, 348-617-6055, 3009.73
3, 22, carefully express ideas shall have to unwin, Supplier#000000003, KjUqa42JEHaRDVQTHV6Yq2h, 471-986-9888, 9159.78

","partsupp, lineitem, part","part.p_name, lineitem.l_extendedprice, lineitem.l_discount, partsupp.ps_supplycost, lineitem.l_quantity, partsupp.ps_suppkey, lineitem.l_suppkey, partsupp.ps_partkey, part.p_partkey"
student_loan,What is the ratio of disable female to male students?,"SELECT cast(SUM(iif(t2.name is null, 1, 0)) as real) * 100 / COUNT(t2.name) FROM disabled as t1 left JOIN male as t2 ON t1.`name` = t2.`name`","CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

","disabled, male","male.name, disabled.name"
codebase_comments,"How many liked by people does the solution path ""ninject_Ninject\Ninject.sln
"" have?",SELECT DISTINCT t1.stars FROM repo as t1 inner JOIN solution as t2 ON t1.id = t2.repoid WHERE t2.path = 'ninject_NinjectNinject.sln',"CREATE TABLE `repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

CREATE TABLE `solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Method, 10860640
MethodParameter, 17514858
Repo, 156550

CREATE TABLE `Method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `Method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

CREATE TABLE `MethodParameter` (
  Id INTEGER,
  MethodId TEXT,
  Type TEXT,
  Name TEXT
);
Sample rows from `MethodParameter`:
1, 1, System.String, data
2, 2, System.Int32, i
3, 2, System.Int32, declstartpos

CREATE TABLE `Repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `Repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

CREATE TABLE `Solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `Solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

","repo, solution","repo.stars, repo.id, solution.repoid, solution.path"
college_completion,"Tell the abbreviation for ""Delaware"" state.",SELECt t FROM ( SELECt DistINCt case when state = 'Delaware' tHEN state_abbr else null end as t FROM state_sector_grads ) WHERE t is NOt null,"CREATE TABLE `state_sector_grads` (
  stateid INTEGER REFERENCES state_sector_details(stateid),
  state TEXT REFERENCES institution_details(state),
  state_abbr TEXT,
  control TEXT,
  level TEXT,
  year INTEGER,
  gender TEXT,
  race TEXT,
  cohort TEXT,
  grad_cohort TEXT,
  grad_100 TEXT,
  grad_150 TEXT,
  grad_100_rate TEXT,
  grad_150_rate TEXT,
  grad_cohort_ct INTEGER
);
Sample rows from `state_sector_grads`:
1, Alabama, AL, Private for-profit, 4-year, 2011, B, A, 4y bach, 0, 0, 0, NULL, NULL, 9
1, Alabama, AL, Private for-profit, 4-year, 2011, B, Ai, 4y bach, 1, 0, 0, 0, 0, 9
1, Alabama, AL, Private for-profit, 4-year, 2011, B, B, 4y bach, 51, 2, 3, 3.9, 5.9, 9

","CREATE TABLE `institution_details` (
  unitid INTEGER,
  chronname TEXT,
  city TEXT,
  state TEXT,
  level TEXT,
  control TEXT,
  basic TEXT,
  hbcu TEXT,
  flagship TEXT,
  long_x REAL,
  lat_y REAL,
  site TEXT,
  student_count INTEGER,
  awards_per_value REAL,
  awards_per_state_value REAL,
  awards_per_natl_value REAL,
  exp_award_value INTEGER,
  exp_award_state_value INTEGER,
  exp_award_natl_value INTEGER,
  exp_award_percentile INTEGER,
  ft_pct REAL,
  fte_value INTEGER,
  fte_percentile INTEGER,
  med_sat_value TEXT,
  med_sat_percentile TEXT,
  aid_value INTEGER,
  aid_percentile INTEGER,
  endow_value TEXT,
  endow_percentile TEXT,
  grad_100_value REAL,
  grad_100_percentile INTEGER,
  grad_150_value REAL,
  grad_150_percentile INTEGER,
  pell_value REAL,
  pell_percentile INTEGER,
  retain_value REAL,
  retain_percentile INTEGER,
  ft_fac_value REAL,
  ft_fac_percentile INTEGER,
  vsa_year TEXT,
  vsa_grad_after4_first TEXT,
  vsa_grad_elsewhere_after4_first TEXT,
  vsa_enroll_after4_first TEXT,
  vsa_enroll_elsewhere_after4_first TEXT,
  vsa_grad_after6_first TEXT,
  vsa_grad_elsewhere_after6_first TEXT,
  vsa_enroll_after6_first TEXT,
  vsa_enroll_elsewhere_after6_first TEXT,
  vsa_grad_after4_transfer TEXT,
  vsa_grad_elsewhere_after4_transfer TEXT,
  vsa_enroll_after4_transfer TEXT,
  vsa_enroll_elsewhere_after4_transfer TEXT,
  vsa_grad_after6_transfer TEXT,
  vsa_grad_elsewhere_after6_transfer TEXT,
  vsa_enroll_after6_transfer TEXT,
  vsa_enroll_elsewhere_after6_transfer TEXT,
  similar TEXT,
  state_sector_ct INTEGER,
  carnegie_ct INTEGER,
  counted_pct TEXT,
  nicknames TEXT,
  cohort_size INTEGER
);
Sample rows from `institution_details`:
100654, Alabama A&M University, Normal, Alabama, 4-year, Public, Masters Colleges and Universities--larger programs, X, NULL, -86.568502, 34.783368, www.aamu.edu/, 4051, 14.2, 18.8, 21.5, 105331, 75743, 66436, 90, 93.8, 3906, 33, 823, 0, 7142, 72, NULL, NULL, 10.0, 15, 29.1, 14, 71.2, 98, 63.1, 17, 82.8, 89, 2010, 14.7, 2, 36.5, 16.1, 33, 5.3, 12.5, 14.6, 15.7, 1.5, 40.9, 17.2, 36.4, 5.6, 17.2, 11.1, 232937|100724|405997|113607|139533|144005|228501|101480|131876|144759|419509|176479|243197|228529|372222|228431|206695|139366|159993|224147, 13, 386, 99.7|07, NULL, 882
100663, University of Alabama at Birmingham, Birmingham, Alabama, 4-year, Public, Research Universities--very high research activity, NULL, NULL, -86.80917, 33.50223, www.uab.edu, 11502, 20.9, 18.8, 21.5, 136546, 75743, 66436, 97, 72.7, 10032, 67, 1146, 84, 6088, 50, 24136, 93, 29.4, 67, 53.5, 66, 35.1, 39, 80.2, 70, 92.4, 98, 2011, 22.3, 2.9, 34.2, 19.2, 42.6, 10.5, 7.9, 13.1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 196060|180461|201885|145600|209542|236939|126818|230764|104151|104179|157085|171100|153603|141574|155317|110714|137351|126562|243780|196088, 13, 106, 56.0|07, UAB, 1376
100690, Amridge University, Montgomery, Alabama, 4-year, Private not-for-profit, Baccalaureate Colleges--Arts & Sciences, NULL, NULL, -86.17401, 32.362609, www.amridgeuniversity.edu, 322, 29.9, 17.8, 22.5, 58414, 92268, 101725, 30, 62.7, 294, 12, NULL, NULL, 2540, 1, 302, 1, 0.0, 0, 66.7, 72, 68.4, 91, 37.5, 2, 67.2, 71, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 217925|441511|205124|247825|197647|221856|135364|117575|164207|193070|199315|166054|367893|183804|439701|193052|197744|193247|137777|176789, 16, 252, 100.0|07, NULL, 3

CREATE TABLE `institution_grads` (
  unitid INTEGER REFERENCES institution_details(unitid),
  year INTEGER,
  gender TEXT,
  race TEXT,
  cohort TEXT,
  grad_cohort TEXT,
  grad_100 TEXT,
  grad_150 TEXT,
  grad_100_rate TEXT,
  grad_150_rate TEXT
);
Sample rows from `institution_grads`:
100760, 2011, B, X, 2y all, 446, 73, 105, 16.4, 23.5
100760, 2011, M, X, 2y all, 185, NULL, 40, NULL, 21.6
100760, 2011, F, X, 2y all, 261, NULL, 65, NULL, 24.9

CREATE TABLE `state_sector_grads` (
  stateid INTEGER REFERENCES state_sector_details(stateid),
  state TEXT REFERENCES institution_details(state),
  state_abbr TEXT,
  control TEXT,
  level TEXT,
  year INTEGER,
  gender TEXT,
  race TEXT,
  cohort TEXT,
  grad_cohort TEXT,
  grad_100 TEXT,
  grad_150 TEXT,
  grad_100_rate TEXT,
  grad_150_rate TEXT,
  grad_cohort_ct INTEGER
);
Sample rows from `state_sector_grads`:
1, Alabama, AL, Private for-profit, 4-year, 2011, B, A, 4y bach, 0, 0, 0, NULL, NULL, 9
1, Alabama, AL, Private for-profit, 4-year, 2011, B, Ai, 4y bach, 1, 0, 0, 0, 0, 9
1, Alabama, AL, Private for-profit, 4-year, 2011, B, B, 4y bach, 51, 2, 3, 3.9, 5.9, 9

CREATE TABLE `state_sector_details` (
  stateid INTEGER PRIMARY KEY,
  state TEXT REFERENCES institution_details(state),
  state_post TEXT,
  level TEXT PRIMARY KEY,
  control TEXT PRIMARY KEY,
  schools_count INTEGER,
  counted_pct TEXT,
  awards_per_state_value TEXT,
  awards_per_natl_value REAL,
  exp_award_state_value TEXT,
  exp_award_natl_value INTEGER,
  state_appr_value TEXT,
  state_appr_rank TEXT,
  grad_rate_rank TEXT,
  awards_per_rank TEXT
);
Sample rows from `state_sector_details`:
0, United States, U.S., 4-year, Public, 632, NULL, NULL, 21.5, NULL, 66436, NULL, NULL, 23, NULL
0, United States, U.S., 4-year, Private not-for-profit, 1180, NULL, NULL, 22.5, NULL, 101725, NULL, NULL, 18, NULL
0, United States, U.S., 4-year, Private for-profit, 527, NULL, NULL, 24.6, NULL, 38763, NULL, NULL, 8, NULL

",state_sector_grads,"state, state_abbr"
beer_factory,Please name all of the cities in California.,SELECT DISTINCT city FROM customers WHERE state = 'CA',"CREATE TABLE `customers` (
  CustomerID INTEGER,
  First TEXT,
  Last TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER,
  Email TEXT,
  PhoneNumber TEXT,
  FirstPurchaseDate DATE,
  SubscribedToEmailList TEXT,
  Gender TEXT
);
Sample rows from `customers`:
101811, Kenneth, Walton, 6715 Commonwealth Dr, Sacramento, CA, 94256, walton.k76@fastmail.com, (916) 918-1561, 2013-05-30, FALSE, M
103508, Madeleine, Jones, 3603 Leola Way, Sacramento, CA, 94258, j_madeleine@gmail.com, (916) 186-9423, 2013-02-06, FALSE, F
104939, Damen, Wheeler, 6740 Branwood Way, Orangevale, CA, 95662, dwheeler@outlook.com, (916) 164-1156, 2013-04-11, FALSE, M

","CREATE TABLE `customers` (
  CustomerID INTEGER,
  First TEXT,
  Last TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER,
  Email TEXT,
  PhoneNumber TEXT,
  FirstPurchaseDate DATE,
  SubscribedToEmailList TEXT,
  Gender TEXT
);
Sample rows from `customers`:
101811, Kenneth, Walton, 6715 Commonwealth Dr, Sacramento, CA, 94256, walton.k76@fastmail.com, (916) 918-1561, 2013-05-30, FALSE, M
103508, Madeleine, Jones, 3603 Leola Way, Sacramento, CA, 94258, j_madeleine@gmail.com, (916) 186-9423, 2013-02-06, FALSE, F
104939, Damen, Wheeler, 6740 Branwood Way, Orangevale, CA, 95662, dwheeler@outlook.com, (916) 164-1156, 2013-04-11, FALSE, M

CREATE TABLE `geolocation` (
  LocationID INTEGER REFERENCES location(LocationID),
  Latitude REAL,
  Longitude REAL
);
Sample rows from `geolocation`:
0, 0.0, 0.0
1, 38.566129, -121.426432
2, 38.559615, -121.42243

CREATE TABLE `location` (
  LocationID INTEGER REFERENCES geolocation(LocationID),
  LocationName TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER
);
Sample rows from `location`:
0, LOST, None, None, None, None
1, Sac State American River Courtyard, 6000 J St, Sacramento, CA, 95819
2, Sac State Union, 6000 J St, Sacramento, CA, 95819

CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

CREATE TABLE `rootbeerreview` (
  CustomerID INTEGER PRIMARY KEY REFERENCES customers(CustomerID),
  BrandID INTEGER PRIMARY KEY REFERENCES rootbeerbrand(BrandID),
  StarRating INTEGER,
  ReviewDate DATE,
  Review TEXT
);
Sample rows from `rootbeerreview`:
101811, 10012, 5, 2013-07-15, None
101811, 10014, 1, 2013-07-08, None
101811, 10015, 3, 2013-07-25, None

CREATE TABLE `transaction` (
  TransactionID INTEGER,
  CreditCardNumber INTEGER,
  CustomerID INTEGER REFERENCES customers(CustomerID),
  TransactionDate DATE,
  CreditCardType TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  RootBeerID INTEGER REFERENCES rootbeer(RootBeerID),
  PurchasePrice REAL
);
Sample rows from `transaction`:
100000, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105661, 3.0
100001, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105798, 3.0
100002, 6011583832864739, 864896, 2014-07-07, Discover, 2, 102514, 3.0

",customers,"city, state"
cars,"Among the cars with an acceleration of over 10 miles per squared hour, how many of them cost more than $20000 and less than $30000?",SELECT COUNT(*) FROM data as t1 inner JOIN price as t2 ON t1.id = t2.id WHERE t1.acceleration > 10 AND t2.price BETWEEN 20000 AND 30000,"CREATE TABLE `data` (
  ID INTEGER REFERENCES price(ID),
  mpg REAL,
  cylinders INTEGER,
  displacement REAL,
  horsepower INTEGER,
  weight INTEGER,
  acceleration REAL,
  model INTEGER,
  car_name TEXT
);
Sample rows from `data`:
1, 18.0, 8, 307.0, 130, 3504, 12.0, 70, chevrolet chevelle malibu
2, 15.0, 8, 350.0, 165, 3693, 11.5, 70, buick skylark 320
3, 18.0, 8, 318.0, 150, 3436, 11.0, 70, plymouth satellite

CREATE TABLE `price` (
  ID INTEGER,
  price REAL
);
Sample rows from `price`:
1, 25561.59078
2, 24221.42273
3, 27240.84373

","CREATE TABLE `country` (
  origin INTEGER,
  country TEXT
);
Sample rows from `country`:
1, USA
2, Europe
3, Japan

CREATE TABLE `price` (
  ID INTEGER,
  price REAL
);
Sample rows from `price`:
1, 25561.59078
2, 24221.42273
3, 27240.84373

CREATE TABLE `data` (
  ID INTEGER REFERENCES price(ID),
  mpg REAL,
  cylinders INTEGER,
  displacement REAL,
  horsepower INTEGER,
  weight INTEGER,
  acceleration REAL,
  model INTEGER,
  car_name TEXT
);
Sample rows from `data`:
1, 18.0, 8, 307.0, 130, 3504, 12.0, 70, chevrolet chevelle malibu
2, 15.0, 8, 350.0, 165, 3693, 11.5, 70, buick skylark 320
3, 18.0, 8, 318.0, 150, 3436, 11.0, 70, plymouth satellite

CREATE TABLE `production` (
  ID INTEGER PRIMARY KEY REFERENCES price(ID) REFERENCES data(ID),
  model_year INTEGER PRIMARY KEY,
  country INTEGER REFERENCES country(origin)
);
Sample rows from `production`:
1, 1970, 1
1, 1971, 1
2, 1970, 1

","data, price","data.id, price.id, data.acceleration, price.price"
law_episode,Which episodes are nominated for an awards but not win?,SELECT t1.episode FROM episode as t1 inner JOIN award as t2 ON t1.episode_id = t2.episode_id WHERE t2.result = 'Nominee',"CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  series TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  person_id TEXT REFERENCES Person(person_id),
  role TEXT,
  result TEXT
);
Sample rows from `award`:
258, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0937725, None, Winner
259, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0792309, None, Winner
260, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0049569, None, Winner

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
tt0629239, nun
tt0629239, priest
tt0629420, police officer

CREATE TABLE `Person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  series TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  person_id TEXT REFERENCES Person(person_id),
  role TEXT,
  result TEXT
);
Sample rows from `Award`:
258, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0937725, None, Winner
259, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0792309, None, Winner
260, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0049569, None, Winner

CREATE TABLE `Credit` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  person_id TEXT PRIMARY KEY REFERENCES Person(person_id),
  category TEXT,
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
tt0629204, nm0226352, Additional Crew, technical advisor, true
tt0629204, nm0506974, Additional Crew, production accountant, true
tt0629204, nm4103116, Additional Crew, production accountant, true

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
tt0629204, 10, 36, 17.7
tt0629204, 9, 39, 19.2
tt0629204, 8, 64, 31.5

","episode, award","episode.episode, episode.episode_id, award.episode_id, award.result"
movie_platform,How many followers does the list created by the user whose user_avatar_image_url is https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214 have?,SELECT SUM(t2.list_followers) FROM lists_users as t1 inner JOIN lists as t2 ON t1.list_id = t2.list_id WHERE t1.user_avatar_image_url = 'https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214',"CREATE TABLE `lists_users` (
  user_id INTEGER PRIMARY KEY REFERENCES lists(user_id),
  list_id INTEGER PRIMARY KEY REFERENCES lists(list_id),
  list_update_date_utc TEXT,
  list_creation_date_utc TEXT,
  user_trialist INTEGER,
  user_subscriber INTEGER,
  user_avatar_image_url TEXT,
  user_cover_image_url TEXT,
  user_eligible_for_trial TEXT,
  user_has_payment_method TEXT
);
Sample rows from `lists_users`:
85981819, 1969, 2019-11-26, 2009-12-18, 1, 1, https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214, None, 0, 1
85981819, 3946, 2020-05-01, 2010-01-30, 1, 1, https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214, None, 0, 1
85981819, 6683, 2020-04-12, 2010-03-31, 1, 1, https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214, None, 0, 1

CREATE TABLE `lists` (
  user_id INTEGER REFERENCES lists_users(user_id),
  list_id INTEGER,
  list_title TEXT,
  list_movie_number INTEGER,
  list_update_timestamp_utc TEXT,
  list_creation_timestamp_utc TEXT,
  list_followers INTEGER,
  list_url TEXT,
  list_comments INTEGER,
  list_description TEXT,
  list_cover_image_url TEXT,
  list_first_image_url TEXT,
  list_second_image_url TEXT,
  list_third_image_url TEXT
);
Sample rows from `lists`:
88260493, 1, Films that made your kid sister cry, 5, 2019-01-24 19:16:18, 2009-11-11 00:02:21, 5, http://mubi.com/lists/films-that-made-your-kid-sister-cry, 3, <p>Don’t be such a baby!!</p>
<p><strong>bold</strong></p>, https://assets.mubicdn.net/images/film/3822/image-w1280.jpg?1445914994, https://assets.mubicdn.net/images/film/3822/image-w320.jpg?1445914994, https://assets.mubicdn.net/images/film/506/image-w320.jpg?1543838422, https://assets.mubicdn.net/images/film/485/image-w320.jpg?1575331204
45204418, 2, Headscratchers, 3, 2018-12-03 15:12:20, 2009-11-11 00:05:11, 1, http://mubi.com/lists/headscratchers, 2, <p>Films that need at least two viewings to really make sense.</p>
<p>Or at least… they did for <em>me</em>.</p>, https://assets.mubicdn.net/images/film/4343/image-w1280.jpg?1583331932, https://assets.mubicdn.net/images/film/4343/image-w320.jpg?1583331932, https://assets.mubicdn.net/images/film/159/image-w320.jpg?1548864573, https://assets.mubicdn.net/images/film/142/image-w320.jpg?1544094102
48905025, 3, Sexy Time Movies, 7, 2019-05-30 03:00:07, 2009-11-11 00:20:00, 6, http://mubi.com/lists/sexy-time-movies, 5, <p>Films that get you in the mood…for love. In development.</p>
<p>Remarks</p>
<p><strong>Enter the Void</strong><br>
If you’ve seen <a href=""http://www.theauteurs.com/films/2377"" rel=""nofollow"">Enter the Void</a> then you’ll know why that’s on this list., https://assets.mubicdn.net/images/film/3491/image-w1280.jpg?1564112978, https://assets.mubicdn.net/images/film/3491/image-w320.jpg?1564112978, https://assets.mubicdn.net/images/film/2377/image-w320.jpg?1564675204, https://assets.mubicdn.net/images/film/2874/image-w320.jpg?1546574412

","CREATE TABLE `lists` (
  user_id INTEGER REFERENCES lists_users(user_id),
  list_id INTEGER,
  list_title TEXT,
  list_movie_number INTEGER,
  list_update_timestamp_utc TEXT,
  list_creation_timestamp_utc TEXT,
  list_followers INTEGER,
  list_url TEXT,
  list_comments INTEGER,
  list_description TEXT,
  list_cover_image_url TEXT,
  list_first_image_url TEXT,
  list_second_image_url TEXT,
  list_third_image_url TEXT
);
Sample rows from `lists`:
88260493, 1, Films that made your kid sister cry, 5, 2019-01-24 19:16:18, 2009-11-11 00:02:21, 5, http://mubi.com/lists/films-that-made-your-kid-sister-cry, 3, <p>Don’t be such a baby!!</p>
<p><strong>bold</strong></p>, https://assets.mubicdn.net/images/film/3822/image-w1280.jpg?1445914994, https://assets.mubicdn.net/images/film/3822/image-w320.jpg?1445914994, https://assets.mubicdn.net/images/film/506/image-w320.jpg?1543838422, https://assets.mubicdn.net/images/film/485/image-w320.jpg?1575331204
45204418, 2, Headscratchers, 3, 2018-12-03 15:12:20, 2009-11-11 00:05:11, 1, http://mubi.com/lists/headscratchers, 2, <p>Films that need at least two viewings to really make sense.</p>
<p>Or at least… they did for <em>me</em>.</p>, https://assets.mubicdn.net/images/film/4343/image-w1280.jpg?1583331932, https://assets.mubicdn.net/images/film/4343/image-w320.jpg?1583331932, https://assets.mubicdn.net/images/film/159/image-w320.jpg?1548864573, https://assets.mubicdn.net/images/film/142/image-w320.jpg?1544094102
48905025, 3, Sexy Time Movies, 7, 2019-05-30 03:00:07, 2009-11-11 00:20:00, 6, http://mubi.com/lists/sexy-time-movies, 5, <p>Films that get you in the mood…for love. In development.</p>
<p>Remarks</p>
<p><strong>Enter the Void</strong><br>
If you’ve seen <a href=""http://www.theauteurs.com/films/2377"" rel=""nofollow"">Enter the Void</a> then you’ll know why that’s on this list., https://assets.mubicdn.net/images/film/3491/image-w1280.jpg?1564112978, https://assets.mubicdn.net/images/film/3491/image-w320.jpg?1564112978, https://assets.mubicdn.net/images/film/2377/image-w320.jpg?1564675204, https://assets.mubicdn.net/images/film/2874/image-w320.jpg?1546574412

CREATE TABLE `movies` (
  movie_id INTEGER,
  movie_title TEXT,
  movie_release_year INTEGER,
  movie_url TEXT,
  movie_title_language TEXT,
  movie_popularity INTEGER,
  movie_image_url TEXT,
  director_id TEXT,
  director_name TEXT,
  director_url TEXT
);
Sample rows from `movies`:
1, La Antena, 2007, http://mubi.com/films/la-antena, en, 105, https://images.mubicdn.net/images/film/1/cache-7927-1581389497/image-w1280.jpg, 131, Esteban Sapir, http://mubi.com/cast/esteban-sapir
2, Elementary Particles, 2006, http://mubi.com/films/elementary-particles, en, 23, https://images.mubicdn.net/images/film/2/cache-512179-1581389841/image-w1280.jpg, 73, Oskar Roehler, http://mubi.com/cast/oskar-roehler
3, It's Winter, 2006, http://mubi.com/films/its-winter, en, 21, https://images.mubicdn.net/images/film/3/cache-7929-1481539519/image-w1280.jpg, 82, Rafi Pitts, http://mubi.com/cast/rafi-pitts

CREATE TABLE `ratings_users` (
  user_id INTEGER REFERENCES lists_users(user_id),
  rating_date_utc TEXT,
  user_trialist INTEGER,
  user_subscriber INTEGER,
  user_avatar_image_url TEXT,
  user_cover_image_url TEXT,
  user_eligible_for_trial INTEGER,
  user_has_payment_method INTEGER
);
Sample rows from `ratings_users`:
41579158, 2017-06-10, 0, 0, https://assets.mubicdn.net/images/avatars/74283/images-w150.jpg?1523895155, None, 1, 0
68654088, 2012-10-02, 0, 0, https://assets.mubicdn.net/images/avatars/27714/images-w150.jpg?1523889463, None, 1, 1
84114365, 2010-12-25, 0, 0, https://assets.mubicdn.net/images/avatars/1808/images-w150.jpg?1523883471, None, 1, 0

CREATE TABLE `lists_users` (
  user_id INTEGER PRIMARY KEY REFERENCES lists(user_id),
  list_id INTEGER PRIMARY KEY REFERENCES lists(list_id),
  list_update_date_utc TEXT,
  list_creation_date_utc TEXT,
  user_trialist INTEGER,
  user_subscriber INTEGER,
  user_avatar_image_url TEXT,
  user_cover_image_url TEXT,
  user_eligible_for_trial TEXT,
  user_has_payment_method TEXT
);
Sample rows from `lists_users`:
85981819, 1969, 2019-11-26, 2009-12-18, 1, 1, https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214, None, 0, 1
85981819, 3946, 2020-05-01, 2010-01-30, 1, 1, https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214, None, 0, 1
85981819, 6683, 2020-04-12, 2010-03-31, 1, 1, https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214, None, 0, 1

CREATE TABLE `ratings` (
  movie_id INTEGER REFERENCES movies(movie_id),
  rating_id INTEGER REFERENCES ratings(rating_id),
  rating_url TEXT,
  rating_score INTEGER,
  rating_timestamp_utc TEXT,
  critic TEXT,
  critic_likes INTEGER,
  critic_comments INTEGER,
  user_id INTEGER REFERENCES ratings_users(user_id) REFERENCES lists_users(user_id),
  user_trialist INTEGER,
  user_subscriber INTEGER,
  user_eligible_for_trial INTEGER,
  user_has_payment_method INTEGER
);
Sample rows from `ratings`:
1066, 15610495, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/15610495, 3, 2017-06-10 12:38:33, None, 0, 0, 41579158, 0, 0, 1, 0
1066, 10704606, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/10704606, 2, 2014-08-15 23:42:31, None, 0, 0, 85981819, 1, 1, 0, 1
1066, 10177114, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/10177114, 2, 2014-01-30 13:21:57, None, 0, 0, 4208563, 0, 0, 1, 1

","lists_users, lists","lists.list_followers, lists_users.list_id, lists.list_id, lists_users.user_avatar_image_url"
retail_world,Please list the phone numbers of the suppliers of the products that have a higher units on order than units in stock.,SELECT DISTINCT t2.phone FROM products as t1 inner JOIN suppliers as t2 ON t1.supplierid = t2.supplierid WHERE t1.unitsinstock < t1.unitsonorder,"CREATE TABLE `products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Categories, 8
Customers, 91
Employees, 10

CREATE TABLE `Categories` (
  CategoryID INTEGER,
  CategoryName TEXT,
  Description TEXT
);
Sample rows from `Categories`:
1, Beverages, Soft drinks, coffees, teas, beers, and ales
2, Condiments, Sweet and savory sauces, relishes, spreads, and seasonings
3, Confections, Desserts, candies, and sweet breads

CREATE TABLE `Customers` (
  CustomerID INTEGER,
  CustomerName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT
);
Sample rows from `Customers`:
1, Alfreds Futterkiste, Maria Anders, Obere Str. 57, Berlin, 12209, Germany
2, Ana Trujillo Emparedados y helados, Ana Trujillo, Avda. de la Constitución 2222, México D.F., 5021, Mexico
3, Antonio Moreno Taquería, Antonio Moreno, Mataderos 2312, México D.F., 5023, Mexico

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  LastName TEXT,
  FirstName TEXT,
  BirthDate DATE,
  Photo TEXT,
  Notes TEXT
);
Sample rows from `Employees`:
1, Davolio, Nancy, 1968-12-08, EmpID1.pic, Education includes a BA in psychology from Colorado State University. She also completed (The Art of the Cold Call). Nancy is a member of 'Toastmasters International'.
2, Fuller, Andrew, 1952-02-19, EmpID2.pic, Andrew received his BTS commercial and a Ph.D. in international marketing from the University of Dallas. He is fluent in French and Italian and reads German. He joined the company as a sales representative, was promoted to sales manager and was then named vice president of sales. Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.
3, Leverling, Janet, 1963-08-30, EmpID3.pic, Janet has a BS degree in chemistry from Boston College). She has also completed a certificate program in food retailing management. Janet was hired as a sales associate and was promoted to sales representative.

CREATE TABLE `Shippers` (
  ShipperID INTEGER,
  ShipperName TEXT,
  Phone TEXT
);
Sample rows from `Shippers`:
1, Speedy Express, (503) 555-9831
2, United Package, (503) 555-3199
3, Federal Shipping, (503) 555-9931

CREATE TABLE `Suppliers` (
  SupplierID INTEGER,
  SupplierName TEXT,
  ContactName TEXT,
  Address TEXT,
  City TEXT,
  PostalCode TEXT,
  Country TEXT,
  Phone TEXT
);
Sample rows from `Suppliers`:
1, Exotic Liquid, Charlotte Cooper, 49 Gilbert St., Londona, EC1 4SD, UK, (171) 555-2222
2, New Orleans Cajun Delights, Shelley Burke, P.O. Box 78934, New Orleans, 70117, USA, (100) 555-4822
3, Grandma Kelly's Homestead, Regina Murphy, 707 Oxford Rd., Ann Arbor, 48104, USA, (313) 555-5735

CREATE TABLE `Products` (
  ProductID INTEGER,
  ProductName TEXT,
  SupplierID INTEGER REFERENCES Suppliers(SupplierID),
  CategoryID INTEGER REFERENCES Categories(CategoryID),
  Unit TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Chais, 1, 1, 10 boxes x 20 bags, 18.0
2, Chang, 1, 1, 24 - 12 oz bottles, 19.0
3, Aniseed Syrup, 1, 2, 12 - 550 ml bottles, 10.0

CREATE TABLE `Orders` (
  OrderID INTEGER,
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  EmployeeID INTEGER REFERENCES Employees(EmployeeID),
  OrderDate DATETIME,
  ShipperID INTEGER REFERENCES Shippers(ShipperID)
);
Sample rows from `Orders`:
10248, 90, 5, 1996-07-04, 3
10249, 81, 6, 1996-07-05, 1
10250, 34, 4, 1996-07-08, 2

CREATE TABLE `OrderDetails` (
  OrderDetailID INTEGER,
  OrderID INTEGER REFERENCES Orders(OrderID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `OrderDetails`:
1, 10248, 11, 12
2, 10248, 42, 10
3, 10248, 72, 5

","products, suppliers","suppliers.phone, products.supplierid, suppliers.supplierid, products.unitsinstock, products.unitsonorder"
food_inspection,"Which business was the first one to get a low risk violation because of ""Permit license or inspection report not posted""? Give the name of the business.",SELECT t2.name FROM violations as t1 inner JOIN businesses as t2 ON t1.business_id = t2.business_id WHERE t1.`date` = ( SELECT MIN(`date`) FROM violations WHERE risk_category = 'Low Risk' AND description = 'Permit license or inspection report not posted' ) AND t1.risk_category = 'Low Risk' AND t1.description = 'Permit license or inspection report not posted',"CREATE TABLE `violations` (
  business_id INTEGER REFERENCES businesses(business_id),
  date DATE,
  violation_type_id TEXT,
  risk_category TEXT,
  description TEXT
);
Sample rows from `violations`:
10, 2014-07-29, 103129, Moderate Risk, Insufficient hot water or running water
10, 2014-07-29, 103144, Low Risk, Unapproved or unmaintained equipment or utensils
10, 2014-01-14, 103119, Moderate Risk, Inadequate and inaccessible handwashing facilities

CREATE TABLE `businesses` (
  business_id INTEGER,
  name TEXT,
  address TEXT,
  city TEXT,
  postal_code TEXT,
  latitude REAL,
  longitude REAL,
  phone_number INTEGER,
  tax_code TEXT,
  business_certificate INTEGER,
  application_date DATE,
  owner_name TEXT,
  owner_address TEXT,
  owner_city TEXT,
  owner_state TEXT,
  owner_zip TEXT
);
Sample rows from `businesses`:
10, Tiramisu Kitchen, 033 Belden Pl, San Francisco, 94104, 37.7911, -122.404, None, H24, 779059, None, Tiramisu LLC, 33 Belden St, San Francisco, CA, 94104
24, OMNI S.F. Hotel - 2nd Floor Pantry, 500 California St, 2nd  Floor, San Francisco, 94104, 37.7929, -122.403, None, H24, 352312, None, OMNI San Francisco Hotel Corp, 500 California St, 2nd Floor, San Francisco, CA, 94104
31, Norman's Ice Cream and Freezes, 2801 Leavenworth St, San Francisco, 94133, 37.8072, -122.419, None, H24, 346882, None, Norman Antiforda, 2801 Leavenworth St, San Francisco, CA, 94133

","CREATE TABLE `businesses` (
  business_id INTEGER,
  name TEXT,
  address TEXT,
  city TEXT,
  postal_code TEXT,
  latitude REAL,
  longitude REAL,
  phone_number INTEGER,
  tax_code TEXT,
  business_certificate INTEGER,
  application_date DATE,
  owner_name TEXT,
  owner_address TEXT,
  owner_city TEXT,
  owner_state TEXT,
  owner_zip TEXT
);
Sample rows from `businesses`:
10, Tiramisu Kitchen, 033 Belden Pl, San Francisco, 94104, 37.7911, -122.404, None, H24, 779059, None, Tiramisu LLC, 33 Belden St, San Francisco, CA, 94104
24, OMNI S.F. Hotel - 2nd Floor Pantry, 500 California St, 2nd  Floor, San Francisco, 94104, 37.7929, -122.403, None, H24, 352312, None, OMNI San Francisco Hotel Corp, 500 California St, 2nd Floor, San Francisco, CA, 94104
31, Norman's Ice Cream and Freezes, 2801 Leavenworth St, San Francisco, 94133, 37.8072, -122.419, None, H24, 346882, None, Norman Antiforda, 2801 Leavenworth St, San Francisco, CA, 94133

CREATE TABLE `inspections` (
  business_id INTEGER REFERENCES businesses(business_id),
  score INTEGER,
  date DATE,
  type TEXT
);
Sample rows from `inspections`:
10, 92, 2014-01-14, Routine - Unscheduled
10, None, 2014-01-24, Reinspection/Followup
10, 94, 2014-07-29, Routine - Unscheduled

CREATE TABLE `violations` (
  business_id INTEGER REFERENCES businesses(business_id),
  date DATE,
  violation_type_id TEXT,
  risk_category TEXT,
  description TEXT
);
Sample rows from `violations`:
10, 2014-07-29, 103129, Moderate Risk, Insufficient hot water or running water
10, 2014-07-29, 103144, Low Risk, Unapproved or unmaintained equipment or utensils
10, 2014-01-14, 103119, Moderate Risk, Inadequate and inaccessible handwashing facilities

","violations, businesses","businesses.name, violations.business_id, businesses.business_id, violations.date, date, risk_category, description, violations.risk_category, violations.description"
codebase_comments,What is the most liked repository? Indicate its github address and the amount of stars it has received.,"SELECT url, stars FROM repo WHERE stars = ( SELECT MAX(stars) FROM repo )","CREATE TABLE `repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Method, 10860640
MethodParameter, 17514858
Repo, 156550

CREATE TABLE `Method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `Method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

CREATE TABLE `MethodParameter` (
  Id INTEGER,
  MethodId TEXT,
  Type TEXT,
  Name TEXT
);
Sample rows from `MethodParameter`:
1, 1, System.String, data
2, 2, System.Int32, i
3, 2, System.Int32, declstartpos

CREATE TABLE `Repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `Repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

CREATE TABLE `Solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `Solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

",repo,"url, stars"
image_and_language,Calculate the average of object samples for the image.,SELECT cast(COUNT(obj_sample_id) as real) / COUNT(DISTINCT img_id) FROM img_obj,"CREATE TABLE `img_obj` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `img_obj`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

","CREATE TABLE `ATT_CLASSES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `ATT_CLASSES`:
0, building s
1, indoors
2, cluttered

CREATE TABLE `OBJ_CLASSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLASSES`:
0, awning
1, goggles
2, dot

CREATE TABLE `IMG_OBJ` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `IMG_OBJ`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `IMG_OBJ_ATT` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_OBJ_ATT`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `PRED_CLASSES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `PRED_CLASSES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `IMG_REL` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_REL`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

",img_obj,"obj_sample_id, img_id"
world_development_indicators,List out the country name of lower earning countries,SELECT DISTINCT t2.countryname FROM country as t1 inner JOIN indicators as t2 ON t1.countryCode = t2.countryCode WHERE t1.incomegroup = 'Low income',"CREATE TABLE `country` (
  CountryCode TEXT PRIMARY KEY,
  ShortName TEXT,
  TableName TEXT,
  LongName TEXT,
  Alpha2Code TEXT,
  CurrencyUnit TEXT,
  SpecialNotes TEXT,
  Region TEXT,
  IncomeGroup TEXT,
  Wb2Code TEXT,
  NationalAccountsBaseYear TEXT,
  NationalAccountsReferenceYear TEXT,
  SnaPriceValuation TEXT,
  LendingCategory TEXT,
  OtherGroups TEXT,
  SystemOfNationalAccounts TEXT,
  AlternativeConversionFactor TEXT,
  PppSurveyYear TEXT,
  BalanceOfPaymentsManualInUse TEXT,
  ExternalDebtReportingStatus TEXT,
  SystemOfTrade TEXT,
  GovernmentAccountingConcept TEXT,
  ImfDataDisseminationStandard TEXT,
  LatestPopulationCensus TEXT,
  LatestHouseholdSurvey TEXT,
  SourceOfMostRecentIncomeAndExpenditureData TEXT,
  VitalRegistrationComplete TEXT,
  LatestAgriculturalCensus TEXT,
  LatestIndustrialData INTEGER,
  LatestTradeData INTEGER,
  LatestWaterWithdrawalData INTEGER
);
Sample rows from `country`:
AFG, Afghanistan, Afghanistan, Islamic State of Afghanistan, AF, Afghan afghani, Fiscal year end: March 20; reporting period for national accounts data: FY (from 2013 are CY). National accounts data are sourced from the IMF and differ from the Central Statistics Organization numbers due to exclusion of the opium economy., South Asia, Low income, AF, 2002/03, , Value added at basic prices (VAB), IDA, HIPC, Country uses the 1993 System of National Accounts methodology., , , , Actual, General trade system, Consolidated central government, General Data Dissemination System (GDDS), 1979, Multiple Indicator Cluster Survey (MICS), 2010/11, Integrated household survey (IHS), 2008, , 2013/14, None, 2013, 2000
ALB, Albania, Albania, Republic of Albania, AL, Albanian lek, , Europe & Central Asia, Upper middle income, AL, Original chained constant price data are rescaled., 1996, Value added at basic prices (VAB), IBRD, , Country uses the 1993 System of National Accounts methodology., , Rolling, IMF Balance of Payments Manual, 6th edition., Actual, General trade system, Budgetary central government, General Data Dissemination System (GDDS), 2011, Demographic and Health Survey (DHS), 2008/09, Living Standards Measurement Study Survey (LSMS), 2011/12, Yes, 2012, 2011, 2013, 2006
DZA, Algeria, Algeria, People's Democratic Republic of Algeria, DZ, Algerian dinar, , Middle East & North Africa, Upper middle income, DZ, 1980, , Value added at basic prices (VAB), IBRD, , Country uses the 1968 System of National Accounts methodology., , 2011, IMF Balance of Payments Manual, 6th edition., Actual, Special trade system, Budgetary central government, General Data Dissemination System (GDDS), 2008, Multiple Indicator Cluster Survey (MICS), 2012, Integrated household survey (IHS), 1995, , , 2010, 2013, 2001

CREATE TABLE `indicators` (
  CountryName TEXT,
  CountryCode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  IndicatorName TEXT,
  IndicatorCode TEXT PRIMARY KEY,
  Year INTEGER PRIMARY KEY,
  Value INTEGER
);
Sample rows from `indicators`:
Arab World, ARB, Adolescent fertility rate (births per 1,000 women ages 15-19), SP.ADO.TFRT, 1960, 133
Arab World, ARB, Age dependency ratio (% of working-age population), SP.POP.DPND, 1960, 87
Arab World, ARB, Age dependency ratio, old (% of working-age population), SP.POP.DPND.OL, 1960, 6

","CREATE TABLE `Country` (
  CountryCode TEXT PRIMARY KEY,
  ShortName TEXT,
  TableName TEXT,
  LongName TEXT,
  Alpha2Code TEXT,
  CurrencyUnit TEXT,
  SpecialNotes TEXT,
  Region TEXT,
  IncomeGroup TEXT,
  Wb2Code TEXT,
  NationalAccountsBaseYear TEXT,
  NationalAccountsReferenceYear TEXT,
  SnaPriceValuation TEXT,
  LendingCategory TEXT,
  OtherGroups TEXT,
  SystemOfNationalAccounts TEXT,
  AlternativeConversionFactor TEXT,
  PppSurveyYear TEXT,
  BalanceOfPaymentsManualInUse TEXT,
  ExternalDebtReportingStatus TEXT,
  SystemOfTrade TEXT,
  GovernmentAccountingConcept TEXT,
  ImfDataDisseminationStandard TEXT,
  LatestPopulationCensus TEXT,
  LatestHouseholdSurvey TEXT,
  SourceOfMostRecentIncomeAndExpenditureData TEXT,
  VitalRegistrationComplete TEXT,
  LatestAgriculturalCensus TEXT,
  LatestIndustrialData INTEGER,
  LatestTradeData INTEGER,
  LatestWaterWithdrawalData INTEGER
);
Sample rows from `Country`:
AFG, Afghanistan, Afghanistan, Islamic State of Afghanistan, AF, Afghan afghani, Fiscal year end: March 20; reporting period for national accounts data: FY (from 2013 are CY). National accounts data are sourced from the IMF and differ from the Central Statistics Organization numbers due to exclusion of the opium economy., South Asia, Low income, AF, 2002/03, , Value added at basic prices (VAB), IDA, HIPC, Country uses the 1993 System of National Accounts methodology., , , , Actual, General trade system, Consolidated central government, General Data Dissemination System (GDDS), 1979, Multiple Indicator Cluster Survey (MICS), 2010/11, Integrated household survey (IHS), 2008, , 2013/14, None, 2013, 2000
ALB, Albania, Albania, Republic of Albania, AL, Albanian lek, , Europe & Central Asia, Upper middle income, AL, Original chained constant price data are rescaled., 1996, Value added at basic prices (VAB), IBRD, , Country uses the 1993 System of National Accounts methodology., , Rolling, IMF Balance of Payments Manual, 6th edition., Actual, General trade system, Budgetary central government, General Data Dissemination System (GDDS), 2011, Demographic and Health Survey (DHS), 2008/09, Living Standards Measurement Study Survey (LSMS), 2011/12, Yes, 2012, 2011, 2013, 2006
DZA, Algeria, Algeria, People's Democratic Republic of Algeria, DZ, Algerian dinar, , Middle East & North Africa, Upper middle income, DZ, 1980, , Value added at basic prices (VAB), IBRD, , Country uses the 1968 System of National Accounts methodology., , 2011, IMF Balance of Payments Manual, 6th edition., Actual, Special trade system, Budgetary central government, General Data Dissemination System (GDDS), 2008, Multiple Indicator Cluster Survey (MICS), 2012, Integrated household survey (IHS), 1995, , , 2010, 2013, 2001

CREATE TABLE `Series` (
  SeriesCode TEXT PRIMARY KEY,
  Topic TEXT,
  IndicatorName TEXT,
  ShortDefinition TEXT,
  LongDefinition TEXT,
  UnitOfMeasure TEXT,
  Periodicity TEXT,
  BasePeriod TEXT,
  OtherNotes INTEGER,
  AggregationMethod TEXT,
  LimitationsAndExceptions TEXT,
  NotesFromOriginalSource TEXT,
  GeneralComments TEXT,
  Source TEXT,
  StatisticalConceptAndMethodology TEXT,
  DevelopmentRelevance TEXT,
  RelatedSourceLinks TEXT,
  OtherWebLinks INTEGER,
  RelatedIndicators INTEGER,
  LicenseType TEXT
);
Sample rows from `Series`:
BN.KLT.DINV.CD, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net (BoP, current US$), , Foreign direct investment are the net inflows of investment to acquire a lasting management interest (10 percent or more of voting stock) in an enterprise operating in an economy other than that of the investor. It is the sum of equity capital, reinvestme, , Annual, , None, , , , Note: Data are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6) and are only available from 2005 onwards. In BPM6, the headings of the financial account have been changed from credits and debits to net acquisition of financial ass, International Monetary Fund, Balance of Payments Statistics Yearbook and data files., , , , None, None, Open
BX.KLT.DINV.WD.GD.ZS, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net inflows (% of GDP), , Foreign direct investment are the net inflows of investment to acquire a lasting management interest (10 percent or more of voting stock) in an enterprise operating in an economy other than that of the investor. It is the sum of equity capital, reinvestme, , Annual, , None, Weighted average, FDI data do not give a complete picture of international investment in an economy. Balance of payments data on FDI do not include capital raised locally, an important source of investment financing in some developing countries. In addition, FDI data omit , , Note: Data starting from 2005 are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6)., International Monetary Fund, International Financial Statistics and Balance of Payments databases, World Bank, International Debt Statistics, and World Bank and OECD GDP estimates., Data on equity flows are based on balance of payments data reported by the International Monetary Fund (IMF). Foreign direct investment (FDI) data are supplemented by the World Bank staff estimates using data from the United Nations Conference on Trade an, Private financial flows - equity and debt - account for the bulk of development finance. Equity flows comprise foreign direct investment (FDI) and portfolio equity. Debt flows are financing raised through bond issuance, bank lending, and supplier credits., , None, None, Open
BX.KLT.DINV.CD.WD, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net inflows (BoP, current US$), , Foreign direct investment refers to direct investment equity flows in the reporting economy. It is the sum of equity capital, reinvestment of earnings, and other capital. Direct investment is a category of cross-border investment associated with a residen, , Annual, , None, Sum, FDI data do not give a complete picture of international investment in an economy. Balance of payments data on FDI do not include capital raised locally, an important source of investment financing in some developing countries. In addition, FDI data omit , , Note: Data starting from 2005 are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6)., International Monetary Fund, Balance of Payments database, supplemented by data from the United Nations Conference on Trade and Development and official national sources., Data on equity flows are based on balance of payments data reported by the International Monetary Fund (IMF). Foreign direct investment (FDI) data are supplemented by the World Bank staff estimates using data from the United Nations Conference on Trade an, Private financial flows - equity and debt - account for the bulk of development finance. Equity flows comprise foreign direct investment (FDI) and portfolio equity. Debt flows are financing raised through bond issuance, bank lending, and supplier credits., , None, None, Open

CREATE TABLE `CountryNotes` (
  Countrycode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Description TEXT
);
Sample rows from `CountryNotes`:
ABW, EG.EGY.PRIM.PP.KD, Sources: Estimated based on UN Energy Statistics (2014); World Development Indicators, WDI (2014)
ABW, EG.ELC.RNEW.ZS, Sources: UN Energy Statistics (2014)
ABW, EG.FEC.RNEW.ZS, Sources: UN Energy Statistics (2014)

CREATE TABLE `Footnotes` (
  Countrycode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Year TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `Footnotes`:
ABW, AG.LND.FRST.K2, YR1990, Not specified
ABW, AG.LND.FRST.K2, YR2000, Not specified
ABW, AG.LND.FRST.K2, YR2005, Not specified

CREATE TABLE `Indicators` (
  CountryName TEXT,
  CountryCode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  IndicatorName TEXT,
  IndicatorCode TEXT PRIMARY KEY,
  Year INTEGER PRIMARY KEY,
  Value INTEGER
);
Sample rows from `Indicators`:
Arab World, ARB, Adolescent fertility rate (births per 1,000 women ages 15-19), SP.ADO.TFRT, 1960, 133
Arab World, ARB, Age dependency ratio (% of working-age population), SP.POP.DPND, 1960, 87
Arab World, ARB, Age dependency ratio, old (% of working-age population), SP.POP.DPND.OL, 1960, 6

CREATE TABLE `SeriesNotes` (
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Year TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `SeriesNotes`:
SP.ADO.TFRT, YR1960, Interpolated using data for 1957 and 1962.
SP.DYN.AMRT.FE, YR1960, Interpolated using data for 1957 and 1962, if the data source is United Nations World Population Prospects.
SP.DYN.AMRT.MA, YR1960, Interpolated using data for 1957 and 1962, if the data source is United Nations World Population Prospects.

","country, indicators","indicators.countryname, country.countryCode, indicators.countryCode, country.incomegroup"
university,What is the name of the university with the most international students in 2011?,SELECT t2.university_name FROM university_year as t1 inner JOIN university as t2 ON t1.university_id = t2.id WHERE t1.year = 2011 ORDER BY t1.pct_international_students DESC LIMIT 1,"CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

","CREATE TABLE `country` (
  id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Argentina
2, Australia
3, Austria

CREATE TABLE `ranking_system` (
  id INTEGER,
  system_name TEXT
);
Sample rows from `ranking_system`:
1, Times Higher Education World University Ranking
2, Shanghai Ranking
3, Center for World University Rankings

CREATE TABLE `ranking_criteria` (
  id INTEGER,
  ranking_system_id INTEGER REFERENCES ranking_system(id),
  criteria_name TEXT
);
Sample rows from `ranking_criteria`:
1, 1, Teaching
2, 1, International
3, 1, Research

CREATE TABLE `university` (
  id INTEGER,
  country_id INTEGER REFERENCES country(id),
  university_name TEXT
);
Sample rows from `university`:
1, 73, Harvard University
2, 73, Massachusetts Institute of Technology
3, 73, Stanford University

CREATE TABLE `university_ranking_year` (
  university_id INTEGER REFERENCES university(id),
  ranking_criteria_id INTEGER REFERENCES ranking_criteria(id),
  year INTEGER,
  score INTEGER
);
Sample rows from `university_ranking_year`:
1, 1, 2011, 100
5, 1, 2011, 98
2, 1, 2011, 98

CREATE TABLE `university_year` (
  university_id INTEGER REFERENCES university(id),
  year INTEGER,
  num_students INTEGER,
  student_staff_ratio REAL,
  pct_international_students INTEGER,
  pct_female_students INTEGER
);
Sample rows from `university_year`:
1, 2011, 20152, 8.9, 25, None
5, 2011, 2243, 6.9, 27, 33
2, 2011, 11074, 9.0, 33, 37

","university_year, university","university.university_name, university_year.university_id, university.id, university_year.year, university_year.pct_international_students"
sales,What is the full name of the customer who purchased the highest amount of total price in a single purchase?,"SELECT t2.firstname, t2.middleinitial, t2.lastname FROM sales as t1 inner JOIN customers as t2 ON t1.customerid = t2.customerid inner JOIN products as t3 ON t1.productid = t3.productid GROUP BY t1.salesID, t1.quantity, t3.price, firstname, middleinitial, lastname ORDER BY t1.quantity * t3.price DESC LIMIT 1","CREATE TABLE `sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

CREATE TABLE `customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

CREATE TABLE `products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Employees`:
1, Abraham, e, Bennet
2, Reginald, l, Blotchet-Halls
3, Cheryl, a, Carson

CREATE TABLE `Products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

CREATE TABLE `Sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `Sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

","sales, customers, products","customers.firstname, customers.middleinitial, customers.lastname, sales.customerid, customers.customerid, sales.productid, products.productid, sales.salesID, sales.quantity, products.price, firstname, middleinitial, lastname"
bike_share_1,How many trips which subscription types were Subscriber and ended in San Jose city?,SELECT COUNT(t1.subscription_type) FROM trip as t1 inner JOIN station as t2 ON t2.name = t1.end_station_name WHERE t1.subscription_type = 'Subscriber' AND t2.city = 'San Jose',"CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);
Sample rows from `trip`:
4069, 174, 8/29/2013 9:08, 2nd at South Park, 64, 8/29/2013 9:11, 2nd at South Park, 64, 288, Subscriber, 94114
4073, 1067, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:42, San Francisco Caltrain 2 (330 Townsend), 69, 321, Subscriber, 94703
4074, 1131, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:43, San Francisco Caltrain 2 (330 Townsend), 69, 317, Subscriber, 94115

CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat REAL,
  long REAL,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);
Sample rows from `station`:
2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013
3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013
4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013

","CREATE TABLE `station` (
  id INTEGER,
  name TEXT,
  lat REAL,
  long REAL,
  dock_count INTEGER,
  city TEXT,
  installation_date TEXT
);
Sample rows from `station`:
2, San Jose Diridon Caltrain Station, 37.329732, -121.90178200000001, 27, San Jose, 8/6/2013
3, San Jose Civic Center, 37.330698, -121.888979, 15, San Jose, 8/5/2013
4, Santa Clara at Almaden, 37.333988, -121.894902, 11, San Jose, 8/6/2013

CREATE TABLE `status` (
  station_id INTEGER,
  bikes_available INTEGER,
  docks_available INTEGER,
  time TEXT
);
Sample rows from `status`:
2, 2, 25, 2013/08/29 12:06:01
2, 2, 25, 2013/08/29 12:07:01
2, 2, 25, 2013/08/29 12:08:01

CREATE TABLE `trip` (
  id INTEGER,
  duration INTEGER,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id INTEGER,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id INTEGER,
  bike_id INTEGER,
  subscription_type TEXT,
  zip_code INTEGER
);
Sample rows from `trip`:
4069, 174, 8/29/2013 9:08, 2nd at South Park, 64, 8/29/2013 9:11, 2nd at South Park, 64, 288, Subscriber, 94114
4073, 1067, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:42, San Francisco Caltrain 2 (330 Townsend), 69, 321, Subscriber, 94703
4074, 1131, 8/29/2013 9:24, South Van Ness at Market, 66, 8/29/2013 9:43, San Francisco Caltrain 2 (330 Townsend), 69, 317, Subscriber, 94115

CREATE TABLE `weather` (
  date TEXT,
  max_temperature_f INTEGER,
  mean_temperature_f INTEGER,
  min_temperature_f INTEGER,
  max_dew_point_f INTEGER,
  mean_dew_point_f INTEGER,
  min_dew_point_f INTEGER,
  max_humidity INTEGER,
  mean_humidity INTEGER,
  min_humidity INTEGER,
  max_sea_level_pressure_inches REAL,
  mean_sea_level_pressure_inches REAL,
  min_sea_level_pressure_inches REAL,
  max_visibility_miles INTEGER,
  mean_visibility_miles INTEGER,
  min_visibility_miles INTEGER,
  max_wind_Speed_mph INTEGER,
  mean_wind_speed_mph INTEGER,
  max_gust_speed_mph INTEGER,
  precipitation_inches TEXT,
  cloud_cover INTEGER,
  events TEXT,
  wind_dir_degrees INTEGER,
  zip_code TEXT
);
Sample rows from `weather`:
8/29/2013, 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, , 286, 94107
8/30/2013, 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30.0, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, , 291, 94107
8/31/2013, 71, 64, 57, 57, 56, 54, 93, 75, 57, 30.0, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, , 284, 94107

","trip, station","trip.subscription_type, station.name, trip.end_station_name, station.city"
public_review_platform,"List down the business ID with a star range from 3 to 5, located at Chandler.",SELECT business_id FROM business WHERE stars >= 3 AND stars < 6 AND city = 'Chandler',"CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

",business,"business_id, stars, city"
simpson_episodes,"List out the star scores of episode which has title of ""How the Test Was Won"".",SELECT t2.stars FROM episode as t1 inner JOIN vote as t2 ON t2.episode_id = t1.episode_id WHERE t1.title = 'How the Test Was Won';,"CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","episode, vote","vote.stars, vote.episode_id, episode.episode_id, episode.title"
public_review_platform,"Among the elite users of 10 consecutive year from 2005 to 2014, list down the user ID and their number of compliment on photos.","SELECT t2.user_id, t2.number_of_compliments FROM compliments as t1 inner JOIN Users_compliments as t2 ON t1.compliment_id = t2.compliment_id inner JOIN elite as t3 ON t2.user_id = t3.user_id WHERE t3.year_id BETWEEN 2005 AND 2014 AND t1.compliment_type = 'photos'","CREATE TABLE `compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Users_compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `elite`:
3, 2010
3, 2011
3, 2012

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","compliments, Users_compliments, elite","Users_compliments.user_id, Users_compliments.number_of_compliments, compliments.compliment_id, Users_compliments.compliment_id, elite.user_id, elite.year_id, compliments.compliment_type"
public_review_platform,What is the attribute of the business with highest star rating?,SELECT t3.attribute_name FROM business as t1 inner JOIN business_attributes as t2 ON t1.business_id = t2.business_id inner JOIN attributes as t3 ON t2.attribute_id = t3.attribute_id ORDER BY t1.stars DESC LIMIT 1,"CREATE TABLE `business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `business_attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `business_attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","business, business_attributes, attributes","attributes.attribute_name, business.business_id, business_attributes.business_id, business_attributes.attribute_id, attributes.attribute_id, business.stars"
student_loan,How many disabled students have payment due?,SELECT COUNT(t1.name) FROM disabled as t1 inner JOIN no_payment_due as t2 ON t2.name = t1.name WHERE t2.bool = 'pos',"CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

","disabled, no_payment_due","disabled.name, no_payment_due.name, no_payment_due.bool"
car_retails,How many sales representatives who have office code is 1?,SELECT COUNT(officecode) FROM employees WHERE jobtitle = 'Sales Rep' AND officecode = 1,"CREATE TABLE `employees` (
  employeeNumber INTEGER,
  lastName TEXT,
  firstName TEXT,
  extension TEXT,
  email TEXT,
  officeCode TEXT REFERENCES offices(officeCode),
  reportsTo INTEGER REFERENCES employees(employeeNumber),
  jobTitle TEXT
);
Sample rows from `employees`:
1002, Murphy, Diane, x5800, dmurphy@classicmodelcars.com, 1, None, President
1056, Patterson, Mary, x4611, mpatterso@classicmodelcars.com, 1, 1002, VP Sales
1076, Firrelli, Jeff, x9273, jfirrelli@classicmodelcars.com, 1, 1002, VP Marketing

","CREATE TABLE `offices` (
  officeCode TEXT PRIMARY KEY,
  city TEXT,
  phone TEXT,
  addressLine1 TEXT,
  addressLine2 TEXT,
  state TEXT,
  country TEXT,
  postalCode TEXT,
  territory TEXT
);
Sample rows from `offices`:
1, San Francisco, +1 650 219 4782, 100 Market Street, Suite 300, CA, USA, 94080, NA
2, Boston, +1 215 837 0825, 1550 Court Place, Suite 102, MA, USA, 02107, NA
3, NYC, +1 212 555 3000, 523 East 53rd Street, apt. 5A, NY, USA, 10022, NA

CREATE TABLE `employees` (
  employeeNumber INTEGER,
  lastName TEXT,
  firstName TEXT,
  extension TEXT,
  email TEXT,
  officeCode TEXT REFERENCES offices(officeCode),
  reportsTo INTEGER REFERENCES employees(employeeNumber),
  jobTitle TEXT
);
Sample rows from `employees`:
1002, Murphy, Diane, x5800, dmurphy@classicmodelcars.com, 1, None, President
1056, Patterson, Mary, x4611, mpatterso@classicmodelcars.com, 1, 1002, VP Sales
1076, Firrelli, Jeff, x9273, jfirrelli@classicmodelcars.com, 1, 1002, VP Marketing

CREATE TABLE `customers` (
  customerNumber INTEGER,
  customerName TEXT,
  contactLastName TEXT,
  contactFirstName TEXT,
  phone TEXT,
  addressLine1 TEXT,
  addressLine2 TEXT,
  city TEXT,
  state TEXT,
  postalCode TEXT,
  country TEXT,
  salesRepEmployeeNumber INTEGER REFERENCES employees(employeeNumber),
  creditLimit REAL
);
Sample rows from `customers`:
103, Atelier graphique, Schmitt, Carine , 40.32.2555, 54, rue Royale, None, Nantes, None, 44000, France, 1370, 21000.0
112, Signal Gift Stores, King, Jean, 7025551838, 8489 Strong St., None, Las Vegas, NV, 83030, USA, 1166, 71800.0
114, Australian Collectors, Co., Ferguson, Peter, 03 9520 4555, 636 St Kilda Road, Level 3, Melbourne, Victoria, 3004, Australia, 1611, 117300.0

CREATE TABLE `orders` (
  orderNumber INTEGER,
  orderDate DATE,
  requiredDate DATE,
  shippedDate DATE,
  status TEXT,
  comments TEXT,
  customerNumber INTEGER REFERENCES customers(customerNumber)
);
Sample rows from `orders`:
10100, 2003-01-06, 2003-01-13, 2003-01-10, Shipped, None, 363
10101, 2003-01-09, 2003-01-18, 2003-01-11, Shipped, Check on availability., 128
10102, 2003-01-10, 2003-01-18, 2003-01-14, Shipped, None, 181

CREATE TABLE `payments` (
  customerNumber INTEGER PRIMARY KEY REFERENCES customers(customerNumber),
  checkNumber TEXT PRIMARY KEY,
  paymentDate DATE,
  amount REAL
);
Sample rows from `payments`:
103, HQ336336, 2004-10-19, 6066.78
103, JM555205, 2003-06-05, 14571.44
103, OM314933, 2004-12-18, 1676.14

CREATE TABLE `productlines` (
  productLine TEXT PRIMARY KEY,
  textDescription TEXT,
  htmlDescription TEXT,
  image BLOB
);
Sample rows from `productlines`:
Classic Cars, Attention car enthusiasts: Make your wildest car ownership dreams come true. Whether you are looking for classic muscle cars, dream sports cars or movie-inspired miniatures, you will find great choices in this category. These replicas feature superb atten, None, None
Motorcycles, Our motorcycles are state of the art replicas of classic as well as contemporary motorcycle legends such as Harley Davidson, Ducati and Vespa. Models contain stunning details such as official logos, rotating wheels, working kickstand, front suspension, ge, None, None
Planes, Unique, diecast airplane and helicopter replicas suitable for collections, as well as home, office or classroom decorations. Models contain stunning details such as official logos and insignias, rotating jet engines and propellers, retractable wheels, and, None, None

CREATE TABLE `products` (
  productCode TEXT PRIMARY KEY,
  productName TEXT,
  productLine TEXT REFERENCES productlines(productLine),
  productScale TEXT,
  productVendor TEXT,
  productDescription TEXT,
  quantityInStock INTEGER,
  buyPrice REAL,
  MSRP REAL
);
Sample rows from `products`:
S10_1678, 1969 Harley Davidson Ultimate Chopper, Motorcycles, 1:10, Min Lin Diecast, This replica features working kickstand, front suspension, gear-shift lever, footbrake lever, drive chain, wheels and steering. All parts are particularly delicate due to their precise scale and require special care and attention., 7933, 48.81, 95.7
S10_1949, 1952 Alpine Renault 1300, Classic Cars, 1:10, Classic Metal Creations, Turnable front wheels; steering function; detailed interior; detailed engine; opening hood; opening trunk; opening doors; and detailed chassis., 7305, 98.58, 214.3
S10_2016, 1996 Moto Guzzi 1100i, Motorcycles, 1:10, Highway 66 Mini Classics, Official Moto Guzzi logos and insignias, saddle bags located on side of motorcycle, detailed engine, working steering, working suspension, two leather seats, luggage rack, dual exhaust pipes, small saddle bag located on handle bars, two-tone paint with chrome accents, superior die-cast detail , rotating wheels , working kick stand, diecast metal with plastic parts and baked enamel finish., 6625, 68.99, 118.94

CREATE TABLE `orderdetails` (
  orderNumber INTEGER PRIMARY KEY REFERENCES orders(None),
  productCode TEXT PRIMARY KEY REFERENCES products(None),
  quantityOrdered INTEGER,
  priceEach REAL,
  orderLineNumber INTEGER
);
Sample rows from `orderdetails`:
10100, S18_1749, 30, 136.0, 3
10100, S18_2248, 50, 55.09, 2
10100, S18_4409, 22, 75.46, 4

",employees,"officecode, jobtitle"
retail_complains,"Among the female clients that age between 20 to 40, list the date when their complaints were received.",SELECT DISTINCT t3.`date received` FROM client as t1 inner JOIN events as t2 ON t1.client_id = t2.client_id inner JOIN callcenterlogs as t3 ON t2.`complaint id` = t3.`complaint id` WHERE t1.age BETWEEN 20 AND 40 AND t1.sex = 'Female',"CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

","CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

","client, events, callcenterlogs","callcenterlogs.date received, client.client_id, events.client_id, events.complaint id, callcenterlogs.complaint id, client.age, client.sex"
software_company,Point out the greater one between the number of actual responding and not responding to mailing.,SELECT response FROM mailings1_2 GROUP BY response ORDER BY COUNT(response) DESC LIMIT 1,"CREATE TABLE `mailings1_2` (
  REFID INTEGER REFERENCES Customers(None),
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `mailings1_2`:
0, 2007-02-01 12:00:00.0, false
1, 2007-02-01 12:00:00.0, false
2, 2007-02-01 12:00:00.0, false

","CREATE TABLE `Demog` (
  GEOID INTEGER,
  INHABITANTS_K REAL,
  INCOME_K REAL,
  A_VAR1 REAL,
  A_VAR2 REAL,
  A_VAR3 REAL,
  A_VAR4 REAL,
  A_VAR5 REAL,
  A_VAR6 REAL,
  A_VAR7 REAL,
  A_VAR8 REAL,
  A_VAR9 REAL,
  A_VAR10 REAL,
  A_VAR11 REAL,
  A_VAR12 REAL,
  A_VAR13 REAL,
  A_VAR14 REAL,
  A_VAR15 REAL,
  A_VAR16 REAL,
  A_VAR17 REAL,
  A_VAR18 REAL
);
Sample rows from `Demog`:
0, 30.046, 2631.47, 6.084, 5.79, 8.595, 3.935, 6.362, 8.626, 4.624, 8.324, 5.233, 6.232, 5.205, 8.231, 6.746, 8.679, 5.292, 3.5, 5.512, 5.783
1, 36.25, 3012.75, 4.604, 8.309, 6.007, 5.938, 8.773, 3.579, 6.349, 4.694, 6.884, 7.062, 7.319, 3.72, 6.405, 7.202, 4.932, 7.969, 8.15, 5.633
2, 47.645, 2192.41, 4.911, 8.557, 5.934, 6.494, 9.172, 3.202, 6.157, 4.822, 7.942, 7.901, 7.928, 2.33, 6.029, 6.455, 4.72, 8.564, 8.342, 4.938

CREATE TABLE `mailings3` (
  REFID INTEGER,
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `mailings3`:
60000, 2007-07-01 12:00:00.0, false
60001, 2007-07-01 12:00:00.0, false
60002, 2007-07-01 12:00:00.0, false

CREATE TABLE `Customers` (
  ID INTEGER,
  SEX TEXT,
  MARITAL_STATUS TEXT,
  GEOID INTEGER REFERENCES Demog(None),
  EDUCATIONNUM INTEGER,
  OCCUPATION TEXT,
  age INTEGER
);
Sample rows from `Customers`:
0, Male, Never-married, 61, 7, Machine-op-inspct, 62
1, Male, Married-civ-spouse, 70, 3, Handlers-cleaners, 78
2, Male, Never-married, 53, 7, Machine-op-inspct, 69

CREATE TABLE `Mailings1_2` (
  REFID INTEGER REFERENCES Customers(None),
  REF_DATE DATETIME,
  RESPONSE TEXT
);
Sample rows from `Mailings1_2`:
0, 2007-02-01 12:00:00.0, false
1, 2007-02-01 12:00:00.0, false
2, 2007-02-01 12:00:00.0, false

CREATE TABLE `Sales` (
  EVENTID INTEGER,
  REFID INTEGER REFERENCES Customers(None),
  EVENT_DATE DATETIME,
  AMOUNT REAL
);
Sample rows from `Sales`:
0, 0, 2006-12-21 12:00:00.0, 17.907
1, 0, 2006-12-25 12:00:00.0, 17.401
2, 0, 2007-01-26 12:00:00.0, 13.277

",mailings1_2,response
food_inspection_2,How many inspections failed in 2014?,"SELECT COUNT(inspection_id) FROM inspection WHERE strftime('%Y', inspection_date) = '2014' AND results = 'Fail'","CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

",inspection,"inspection_id, inspection_date, results"
beer_factory,In the reviews of September 2014. Which brand of beers obtained the highest star ratings?,SELECT DISTINCT t1.brandname FROM rootbeerbrand as t1 inner JOIN rootbeerreview as t2 ON t1.brandid = t2.brandid WHERE t2.starrating = 5 AND t2.reviewdate BETWEEN '2014-09-01' AND '2014-09-30',"CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

CREATE TABLE `rootbeerreview` (
  CustomerID INTEGER PRIMARY KEY REFERENCES customers(CustomerID),
  BrandID INTEGER PRIMARY KEY REFERENCES rootbeerbrand(BrandID),
  StarRating INTEGER,
  ReviewDate DATE,
  Review TEXT
);
Sample rows from `rootbeerreview`:
101811, 10012, 5, 2013-07-15, None
101811, 10014, 1, 2013-07-08, None
101811, 10015, 3, 2013-07-25, None

","CREATE TABLE `customers` (
  CustomerID INTEGER,
  First TEXT,
  Last TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER,
  Email TEXT,
  PhoneNumber TEXT,
  FirstPurchaseDate DATE,
  SubscribedToEmailList TEXT,
  Gender TEXT
);
Sample rows from `customers`:
101811, Kenneth, Walton, 6715 Commonwealth Dr, Sacramento, CA, 94256, walton.k76@fastmail.com, (916) 918-1561, 2013-05-30, FALSE, M
103508, Madeleine, Jones, 3603 Leola Way, Sacramento, CA, 94258, j_madeleine@gmail.com, (916) 186-9423, 2013-02-06, FALSE, F
104939, Damen, Wheeler, 6740 Branwood Way, Orangevale, CA, 95662, dwheeler@outlook.com, (916) 164-1156, 2013-04-11, FALSE, M

CREATE TABLE `geolocation` (
  LocationID INTEGER REFERENCES location(LocationID),
  Latitude REAL,
  Longitude REAL
);
Sample rows from `geolocation`:
0, 0.0, 0.0
1, 38.566129, -121.426432
2, 38.559615, -121.42243

CREATE TABLE `location` (
  LocationID INTEGER REFERENCES geolocation(LocationID),
  LocationName TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER
);
Sample rows from `location`:
0, LOST, None, None, None, None
1, Sac State American River Courtyard, 6000 J St, Sacramento, CA, 95819
2, Sac State Union, 6000 J St, Sacramento, CA, 95819

CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

CREATE TABLE `rootbeerreview` (
  CustomerID INTEGER PRIMARY KEY REFERENCES customers(CustomerID),
  BrandID INTEGER PRIMARY KEY REFERENCES rootbeerbrand(BrandID),
  StarRating INTEGER,
  ReviewDate DATE,
  Review TEXT
);
Sample rows from `rootbeerreview`:
101811, 10012, 5, 2013-07-15, None
101811, 10014, 1, 2013-07-08, None
101811, 10015, 3, 2013-07-25, None

CREATE TABLE `transaction` (
  TransactionID INTEGER,
  CreditCardNumber INTEGER,
  CustomerID INTEGER REFERENCES customers(CustomerID),
  TransactionDate DATE,
  CreditCardType TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  RootBeerID INTEGER REFERENCES rootbeer(RootBeerID),
  PurchasePrice REAL
);
Sample rows from `transaction`:
100000, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105661, 3.0
100001, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105798, 3.0
100002, 6011583832864739, 864896, 2014-07-07, Discover, 2, 102514, 3.0

","rootbeerbrand, rootbeerreview","rootbeerbrand.brandname, rootbeerbrand.brandid, rootbeerreview.brandid, rootbeerreview.starrating, rootbeerreview.reviewdate"
image_and_language,How many samples of food object are there in image no.6?,SELECT COUNT(t2.obj_sample_id) FROM obj_classes as t1 inner JOIN img_obj as t2 ON t1.OBJ_CLasS_ID = t2.OBJ_CLasS_ID WHERE t2.img_id = 6 AND t1.OBJ_CLasS = 'food',"CREATE TABLE `obj_classes` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `obj_classes`:
0, awning
1, goggles
2, dot

CREATE TABLE `img_obj` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `img_obj`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

","CREATE TABLE `ATT_CLASSES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `ATT_CLASSES`:
0, building s
1, indoors
2, cluttered

CREATE TABLE `OBJ_CLASSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLASSES`:
0, awning
1, goggles
2, dot

CREATE TABLE `IMG_OBJ` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `IMG_OBJ`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `IMG_OBJ_ATT` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_OBJ_ATT`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `PRED_CLASSES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `PRED_CLASSES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `IMG_REL` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_REL`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

","obj_classes, img_obj","img_obj.obj_sample_id, obj_classes.OBJ_CLasS_ID, img_obj.OBJ_CLasS_ID, img_obj.img_id, obj_classes.OBJ_CLasS"
cs_semester,How many students does Ogdon Zywicki advise?,SELECT COUNT(t1.student_id) FROM ra as t1 inner JOIN prof as t2 ON t1.prof_id = t2.prof_id WHERE t2.first_name = 'Ogdon' AND t2.last_name = 'Zywicki',"CREATE TABLE `ra` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `ra`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

CREATE TABLE `prof` (
  prof_id INTEGER,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  popularity INTEGER,
  teachingability INTEGER,
  graduate_from TEXT
);
Sample rows from `prof`:
1, Male, Nathaniel, Pigford, npigford0@hku.hk, 3, 5, University of Washington
2, Male, Zhihua, Zhou, zzhihua@hku.hk, 2, 1, Beijing Polytechnic University
3, Male, Ogdon, Zywicki, ozywicki2@hku.hk, 2, 2, University of Boston

","CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

CREATE TABLE `prof` (
  prof_id INTEGER,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  popularity INTEGER,
  teachingability INTEGER,
  graduate_from TEXT
);
Sample rows from `prof`:
1, Male, Nathaniel, Pigford, npigford0@hku.hk, 3, 5, University of Washington
2, Male, Zhihua, Zhou, zzhihua@hku.hk, 2, 1, Beijing Polytechnic University
3, Male, Ogdon, Zywicki, ozywicki2@hku.hk, 2, 2, University of Boston

CREATE TABLE `RA` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `RA`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

","ra, prof","ra.student_id, ra.prof_id, prof.prof_id, prof.first_name, prof.last_name"
beer_factory,What is the average cost of root beers purchased for more than 2 dollars and sold in bottles?,SELECT AVG(t2.purchaseprice) FROM rootbeer as t1 inner JOIN `transaction` as t2 ON t1.rootbeerid = t2.rootbeerid inner JOIN rootbeerbrand as t3 ON t1.brandid = t3.brandid WHERE t1.containertype = 'Bottle' AND t2.purchaseprice > 2,"CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

CREATE TABLE `transaction` (
  TransactionID INTEGER,
  CreditCardNumber INTEGER,
  CustomerID INTEGER REFERENCES customers(CustomerID),
  TransactionDate DATE,
  CreditCardType TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  RootBeerID INTEGER REFERENCES rootbeer(RootBeerID),
  PurchasePrice REAL
);
Sample rows from `transaction`:
100000, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105661, 3.0
100001, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105798, 3.0
100002, 6011583832864739, 864896, 2014-07-07, Discover, 2, 102514, 3.0

CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

","CREATE TABLE `customers` (
  CustomerID INTEGER,
  First TEXT,
  Last TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER,
  Email TEXT,
  PhoneNumber TEXT,
  FirstPurchaseDate DATE,
  SubscribedToEmailList TEXT,
  Gender TEXT
);
Sample rows from `customers`:
101811, Kenneth, Walton, 6715 Commonwealth Dr, Sacramento, CA, 94256, walton.k76@fastmail.com, (916) 918-1561, 2013-05-30, FALSE, M
103508, Madeleine, Jones, 3603 Leola Way, Sacramento, CA, 94258, j_madeleine@gmail.com, (916) 186-9423, 2013-02-06, FALSE, F
104939, Damen, Wheeler, 6740 Branwood Way, Orangevale, CA, 95662, dwheeler@outlook.com, (916) 164-1156, 2013-04-11, FALSE, M

CREATE TABLE `geolocation` (
  LocationID INTEGER REFERENCES location(LocationID),
  Latitude REAL,
  Longitude REAL
);
Sample rows from `geolocation`:
0, 0.0, 0.0
1, 38.566129, -121.426432
2, 38.559615, -121.42243

CREATE TABLE `location` (
  LocationID INTEGER REFERENCES geolocation(LocationID),
  LocationName TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER
);
Sample rows from `location`:
0, LOST, None, None, None, None
1, Sac State American River Courtyard, 6000 J St, Sacramento, CA, 95819
2, Sac State Union, 6000 J St, Sacramento, CA, 95819

CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

CREATE TABLE `rootbeerreview` (
  CustomerID INTEGER PRIMARY KEY REFERENCES customers(CustomerID),
  BrandID INTEGER PRIMARY KEY REFERENCES rootbeerbrand(BrandID),
  StarRating INTEGER,
  ReviewDate DATE,
  Review TEXT
);
Sample rows from `rootbeerreview`:
101811, 10012, 5, 2013-07-15, None
101811, 10014, 1, 2013-07-08, None
101811, 10015, 3, 2013-07-25, None

CREATE TABLE `transaction` (
  TransactionID INTEGER,
  CreditCardNumber INTEGER,
  CustomerID INTEGER REFERENCES customers(CustomerID),
  TransactionDate DATE,
  CreditCardType TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  RootBeerID INTEGER REFERENCES rootbeer(RootBeerID),
  PurchasePrice REAL
);
Sample rows from `transaction`:
100000, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105661, 3.0
100001, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105798, 3.0
100002, 6011583832864739, 864896, 2014-07-07, Discover, 2, 102514, 3.0

","rootbeer, transaction, rootbeerbrand","transaction.purchaseprice, rootbeer.rootbeerid, transaction.rootbeerid, rootbeer.brandid, rootbeerbrand.brandid, rootbeer.containertype"
world_development_indicators,How many footnotes have been made in year 1980 and what are the table names of these countries that made the footnotes?,SELECT COUNT(t2.description) FROM country as t1 inner JOIN footnotes as t2 ON t1.countryCode = t2.countrycode WHERE t2.year = 'YR1980' UNION all SELECT DISTINCT t1.tablename FROM country as t1 inner JOIN footnotes as t2 ON t1.countryCode = t2.countrycode WHERE t2.year = 'YR1980',"CREATE TABLE `country` (
  CountryCode TEXT PRIMARY KEY,
  ShortName TEXT,
  TableName TEXT,
  LongName TEXT,
  Alpha2Code TEXT,
  CurrencyUnit TEXT,
  SpecialNotes TEXT,
  Region TEXT,
  IncomeGroup TEXT,
  Wb2Code TEXT,
  NationalAccountsBaseYear TEXT,
  NationalAccountsReferenceYear TEXT,
  SnaPriceValuation TEXT,
  LendingCategory TEXT,
  OtherGroups TEXT,
  SystemOfNationalAccounts TEXT,
  AlternativeConversionFactor TEXT,
  PppSurveyYear TEXT,
  BalanceOfPaymentsManualInUse TEXT,
  ExternalDebtReportingStatus TEXT,
  SystemOfTrade TEXT,
  GovernmentAccountingConcept TEXT,
  ImfDataDisseminationStandard TEXT,
  LatestPopulationCensus TEXT,
  LatestHouseholdSurvey TEXT,
  SourceOfMostRecentIncomeAndExpenditureData TEXT,
  VitalRegistrationComplete TEXT,
  LatestAgriculturalCensus TEXT,
  LatestIndustrialData INTEGER,
  LatestTradeData INTEGER,
  LatestWaterWithdrawalData INTEGER
);
Sample rows from `country`:
AFG, Afghanistan, Afghanistan, Islamic State of Afghanistan, AF, Afghan afghani, Fiscal year end: March 20; reporting period for national accounts data: FY (from 2013 are CY). National accounts data are sourced from the IMF and differ from the Central Statistics Organization numbers due to exclusion of the opium economy., South Asia, Low income, AF, 2002/03, , Value added at basic prices (VAB), IDA, HIPC, Country uses the 1993 System of National Accounts methodology., , , , Actual, General trade system, Consolidated central government, General Data Dissemination System (GDDS), 1979, Multiple Indicator Cluster Survey (MICS), 2010/11, Integrated household survey (IHS), 2008, , 2013/14, None, 2013, 2000
ALB, Albania, Albania, Republic of Albania, AL, Albanian lek, , Europe & Central Asia, Upper middle income, AL, Original chained constant price data are rescaled., 1996, Value added at basic prices (VAB), IBRD, , Country uses the 1993 System of National Accounts methodology., , Rolling, IMF Balance of Payments Manual, 6th edition., Actual, General trade system, Budgetary central government, General Data Dissemination System (GDDS), 2011, Demographic and Health Survey (DHS), 2008/09, Living Standards Measurement Study Survey (LSMS), 2011/12, Yes, 2012, 2011, 2013, 2006
DZA, Algeria, Algeria, People's Democratic Republic of Algeria, DZ, Algerian dinar, , Middle East & North Africa, Upper middle income, DZ, 1980, , Value added at basic prices (VAB), IBRD, , Country uses the 1968 System of National Accounts methodology., , 2011, IMF Balance of Payments Manual, 6th edition., Actual, Special trade system, Budgetary central government, General Data Dissemination System (GDDS), 2008, Multiple Indicator Cluster Survey (MICS), 2012, Integrated household survey (IHS), 1995, , , 2010, 2013, 2001

CREATE TABLE `footnotes` (
  Countrycode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Year TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `footnotes`:
ABW, AG.LND.FRST.K2, YR1990, Not specified
ABW, AG.LND.FRST.K2, YR2000, Not specified
ABW, AG.LND.FRST.K2, YR2005, Not specified

","CREATE TABLE `Country` (
  CountryCode TEXT PRIMARY KEY,
  ShortName TEXT,
  TableName TEXT,
  LongName TEXT,
  Alpha2Code TEXT,
  CurrencyUnit TEXT,
  SpecialNotes TEXT,
  Region TEXT,
  IncomeGroup TEXT,
  Wb2Code TEXT,
  NationalAccountsBaseYear TEXT,
  NationalAccountsReferenceYear TEXT,
  SnaPriceValuation TEXT,
  LendingCategory TEXT,
  OtherGroups TEXT,
  SystemOfNationalAccounts TEXT,
  AlternativeConversionFactor TEXT,
  PppSurveyYear TEXT,
  BalanceOfPaymentsManualInUse TEXT,
  ExternalDebtReportingStatus TEXT,
  SystemOfTrade TEXT,
  GovernmentAccountingConcept TEXT,
  ImfDataDisseminationStandard TEXT,
  LatestPopulationCensus TEXT,
  LatestHouseholdSurvey TEXT,
  SourceOfMostRecentIncomeAndExpenditureData TEXT,
  VitalRegistrationComplete TEXT,
  LatestAgriculturalCensus TEXT,
  LatestIndustrialData INTEGER,
  LatestTradeData INTEGER,
  LatestWaterWithdrawalData INTEGER
);
Sample rows from `Country`:
AFG, Afghanistan, Afghanistan, Islamic State of Afghanistan, AF, Afghan afghani, Fiscal year end: March 20; reporting period for national accounts data: FY (from 2013 are CY). National accounts data are sourced from the IMF and differ from the Central Statistics Organization numbers due to exclusion of the opium economy., South Asia, Low income, AF, 2002/03, , Value added at basic prices (VAB), IDA, HIPC, Country uses the 1993 System of National Accounts methodology., , , , Actual, General trade system, Consolidated central government, General Data Dissemination System (GDDS), 1979, Multiple Indicator Cluster Survey (MICS), 2010/11, Integrated household survey (IHS), 2008, , 2013/14, None, 2013, 2000
ALB, Albania, Albania, Republic of Albania, AL, Albanian lek, , Europe & Central Asia, Upper middle income, AL, Original chained constant price data are rescaled., 1996, Value added at basic prices (VAB), IBRD, , Country uses the 1993 System of National Accounts methodology., , Rolling, IMF Balance of Payments Manual, 6th edition., Actual, General trade system, Budgetary central government, General Data Dissemination System (GDDS), 2011, Demographic and Health Survey (DHS), 2008/09, Living Standards Measurement Study Survey (LSMS), 2011/12, Yes, 2012, 2011, 2013, 2006
DZA, Algeria, Algeria, People's Democratic Republic of Algeria, DZ, Algerian dinar, , Middle East & North Africa, Upper middle income, DZ, 1980, , Value added at basic prices (VAB), IBRD, , Country uses the 1968 System of National Accounts methodology., , 2011, IMF Balance of Payments Manual, 6th edition., Actual, Special trade system, Budgetary central government, General Data Dissemination System (GDDS), 2008, Multiple Indicator Cluster Survey (MICS), 2012, Integrated household survey (IHS), 1995, , , 2010, 2013, 2001

CREATE TABLE `Series` (
  SeriesCode TEXT PRIMARY KEY,
  Topic TEXT,
  IndicatorName TEXT,
  ShortDefinition TEXT,
  LongDefinition TEXT,
  UnitOfMeasure TEXT,
  Periodicity TEXT,
  BasePeriod TEXT,
  OtherNotes INTEGER,
  AggregationMethod TEXT,
  LimitationsAndExceptions TEXT,
  NotesFromOriginalSource TEXT,
  GeneralComments TEXT,
  Source TEXT,
  StatisticalConceptAndMethodology TEXT,
  DevelopmentRelevance TEXT,
  RelatedSourceLinks TEXT,
  OtherWebLinks INTEGER,
  RelatedIndicators INTEGER,
  LicenseType TEXT
);
Sample rows from `Series`:
BN.KLT.DINV.CD, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net (BoP, current US$), , Foreign direct investment are the net inflows of investment to acquire a lasting management interest (10 percent or more of voting stock) in an enterprise operating in an economy other than that of the investor. It is the sum of equity capital, reinvestme, , Annual, , None, , , , Note: Data are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6) and are only available from 2005 onwards. In BPM6, the headings of the financial account have been changed from credits and debits to net acquisition of financial ass, International Monetary Fund, Balance of Payments Statistics Yearbook and data files., , , , None, None, Open
BX.KLT.DINV.WD.GD.ZS, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net inflows (% of GDP), , Foreign direct investment are the net inflows of investment to acquire a lasting management interest (10 percent or more of voting stock) in an enterprise operating in an economy other than that of the investor. It is the sum of equity capital, reinvestme, , Annual, , None, Weighted average, FDI data do not give a complete picture of international investment in an economy. Balance of payments data on FDI do not include capital raised locally, an important source of investment financing in some developing countries. In addition, FDI data omit , , Note: Data starting from 2005 are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6)., International Monetary Fund, International Financial Statistics and Balance of Payments databases, World Bank, International Debt Statistics, and World Bank and OECD GDP estimates., Data on equity flows are based on balance of payments data reported by the International Monetary Fund (IMF). Foreign direct investment (FDI) data are supplemented by the World Bank staff estimates using data from the United Nations Conference on Trade an, Private financial flows - equity and debt - account for the bulk of development finance. Equity flows comprise foreign direct investment (FDI) and portfolio equity. Debt flows are financing raised through bond issuance, bank lending, and supplier credits., , None, None, Open
BX.KLT.DINV.CD.WD, Economic Policy & Debt: Balance of payments: Capital & financial account, Foreign direct investment, net inflows (BoP, current US$), , Foreign direct investment refers to direct investment equity flows in the reporting economy. It is the sum of equity capital, reinvestment of earnings, and other capital. Direct investment is a category of cross-border investment associated with a residen, , Annual, , None, Sum, FDI data do not give a complete picture of international investment in an economy. Balance of payments data on FDI do not include capital raised locally, an important source of investment financing in some developing countries. In addition, FDI data omit , , Note: Data starting from 2005 are based on the sixth edition of the IMF's Balance of Payments Manual (BPM6)., International Monetary Fund, Balance of Payments database, supplemented by data from the United Nations Conference on Trade and Development and official national sources., Data on equity flows are based on balance of payments data reported by the International Monetary Fund (IMF). Foreign direct investment (FDI) data are supplemented by the World Bank staff estimates using data from the United Nations Conference on Trade an, Private financial flows - equity and debt - account for the bulk of development finance. Equity flows comprise foreign direct investment (FDI) and portfolio equity. Debt flows are financing raised through bond issuance, bank lending, and supplier credits., , None, None, Open

CREATE TABLE `CountryNotes` (
  Countrycode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Description TEXT
);
Sample rows from `CountryNotes`:
ABW, EG.EGY.PRIM.PP.KD, Sources: Estimated based on UN Energy Statistics (2014); World Development Indicators, WDI (2014)
ABW, EG.ELC.RNEW.ZS, Sources: UN Energy Statistics (2014)
ABW, EG.FEC.RNEW.ZS, Sources: UN Energy Statistics (2014)

CREATE TABLE `Footnotes` (
  Countrycode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Year TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `Footnotes`:
ABW, AG.LND.FRST.K2, YR1990, Not specified
ABW, AG.LND.FRST.K2, YR2000, Not specified
ABW, AG.LND.FRST.K2, YR2005, Not specified

CREATE TABLE `Indicators` (
  CountryName TEXT,
  CountryCode TEXT PRIMARY KEY REFERENCES Country(CountryCode),
  IndicatorName TEXT,
  IndicatorCode TEXT PRIMARY KEY,
  Year INTEGER PRIMARY KEY,
  Value INTEGER
);
Sample rows from `Indicators`:
Arab World, ARB, Adolescent fertility rate (births per 1,000 women ages 15-19), SP.ADO.TFRT, 1960, 133
Arab World, ARB, Age dependency ratio (% of working-age population), SP.POP.DPND, 1960, 87
Arab World, ARB, Age dependency ratio, old (% of working-age population), SP.POP.DPND.OL, 1960, 6

CREATE TABLE `SeriesNotes` (
  Seriescode TEXT PRIMARY KEY REFERENCES Series(SeriesCode),
  Year TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `SeriesNotes`:
SP.ADO.TFRT, YR1960, Interpolated using data for 1957 and 1962.
SP.DYN.AMRT.FE, YR1960, Interpolated using data for 1957 and 1962, if the data source is United Nations World Population Prospects.
SP.DYN.AMRT.MA, YR1960, Interpolated using data for 1957 and 1962, if the data source is United Nations World Population Prospects.

","country, footnotes","footnotes.description, country.countryCode, footnotes.countrycode, footnotes.year, country.tablename"
ice_hockey_draft,How much taller is David Bornhammar than Pauli Levokari in centimeters?,SELECT ( SELECT t2.height_in_cm FROM playerinfo as t1 inner JOIN height_info as t2 ON t1.height = t2.height_id WHERE t1.playername = 'David Bornhammar' ) - ( SELECT t2.height_in_cm FROM playerinfo as t1 inner JOIN height_info as t2 ON t1.height = t2.height_id WHERE t1.playername = 'Pauli Levokari' ),"CREATE TABLE `playerinfo` (
  ELITEID INTEGER,
  PlayerName TEXT,
  birthdate TEXT,
  birthyear DATE,
  birthmonth INTEGER,
  birthday INTEGER,
  birthplace TEXT,
  nation TEXT,
  height INTEGER REFERENCES height_info(height_id),
  weight INTEGER REFERENCES weight_info(weight_id),
  position_info TEXT,
  shoots TEXT,
  draftyear INTEGER,
  draftround INTEGER,
  overall INTEGER,
  overallby TEXT,
  CSS_rank INTEGER,
  sum_7yr_GP INTEGER,
  sum_7yr_TOI INTEGER,
  GP_greater_than_0 TEXT
);
Sample rows from `playerinfo`:
9, David Bornhammar, 1981-06-15, 1981, 6, 15, Lidingo, SWE, Sweden, 73, 198, D, L, 1999, 7, 192, Washington Capitals, 192, 0, 0, no
18, David Printz, 1980-07-24, 1980, 7, 24, Stockholm, SWE, Sweden, 76, 220, D, L, 2001, 7, 225, Philadelphia Flyers, 176, 13, 84, yes
27, Yared Hagos, 1983-03-27, 1983, 3, 27, Stockholm, SWE, Sweden, 73, 218, C, L, 2001, 3, 70, Dallas Stars, 24, 0, 0, no

CREATE TABLE `height_info` (
  height_id INTEGER,
  height_in_cm INTEGER,
  height_in_inch TEXT
);
Sample rows from `height_info`:
65, 165, 5'5""
67, 170, 5'7""
68, 172, 5'8""

","CREATE TABLE `height_info` (
  height_id INTEGER,
  height_in_cm INTEGER,
  height_in_inch TEXT
);
Sample rows from `height_info`:
65, 165, 5'5""
67, 170, 5'7""
68, 172, 5'8""

CREATE TABLE `weight_info` (
  weight_id INTEGER,
  weight_in_kg INTEGER,
  weight_in_lbs INTEGER
);
Sample rows from `weight_info`:
154, 70, 154
159, 72, 159
161, 73, 161

CREATE TABLE `PlayerInfo` (
  ELITEID INTEGER,
  PlayerName TEXT,
  birthdate TEXT,
  birthyear DATE,
  birthmonth INTEGER,
  birthday INTEGER,
  birthplace TEXT,
  nation TEXT,
  height INTEGER REFERENCES height_info(height_id),
  weight INTEGER REFERENCES weight_info(weight_id),
  position_info TEXT,
  shoots TEXT,
  draftyear INTEGER,
  draftround INTEGER,
  overall INTEGER,
  overallby TEXT,
  CSS_rank INTEGER,
  sum_7yr_GP INTEGER,
  sum_7yr_TOI INTEGER,
  GP_greater_than_0 TEXT
);
Sample rows from `PlayerInfo`:
9, David Bornhammar, 1981-06-15, 1981, 6, 15, Lidingo, SWE, Sweden, 73, 198, D, L, 1999, 7, 192, Washington Capitals, 192, 0, 0, no
18, David Printz, 1980-07-24, 1980, 7, 24, Stockholm, SWE, Sweden, 76, 220, D, L, 2001, 7, 225, Philadelphia Flyers, 176, 13, 84, yes
27, Yared Hagos, 1983-03-27, 1983, 3, 27, Stockholm, SWE, Sweden, 73, 218, C, L, 2001, 3, 70, Dallas Stars, 24, 0, 0, no

CREATE TABLE `SeasonStatus` (
  ELITEID INTEGER REFERENCES PlayerInfo(ELITEID),
  SEASON TEXT,
  TEAM TEXT,
  LEAGUE TEXT,
  GAMETYPE TEXT,
  GP INTEGER,
  G INTEGER,
  A INTEGER,
  P INTEGER,
  PIM INTEGER,
  PLUSMINUS INTEGER
);
Sample rows from `SeasonStatus`:
3667, 1997-1998, Rimouski Oceanic, QMJHL, Regular Season, 58, 44, 71, 115, 117, 27
3667, 1997-1998, Rimouski Oceanic, QMJHL, Playoffs, 18, 15, 26, 41, 46, 4
3667, 1997-1998, Canada U20, WJC-20, Regular Season, 7, 1, 1, 2, 4, 0

","playerinfo, height_info","height_info.height_in_cm, playerinfo.height, height_info.height_id, playerinfo.playername"
professional_basketball,Please list out the first name and last name of player who attended California college and have been selected as all stars?,"SELECT DISTINCT t1.firstname, t1.lastname FROM players as t1 inner JOIN player_allstar as t2 ON t1.playerid = t2.playerid WHERE t1.college = 'California'","CREATE TABLE `players` (
  playerID TEXT PRIMARY KEY,
  useFirst TEXT,
  firstName TEXT,
  middleName TEXT,
  lastName TEXT,
  nameGiven TEXT,
  fullGivenName TEXT,
  nameSuffix TEXT,
  nameNick TEXT,
  pos TEXT,
  firstseason INTEGER,
  lastseason INTEGER,
  height REAL,
  weight INTEGER,
  college TEXT,
  collegeOther TEXT,
  birthDate DATE,
  birthCity TEXT,
  birthState TEXT,
  birthCountry TEXT,
  highSchool TEXT,
  hsCity TEXT,
  hsState TEXT,
  hsCountry TEXT,
  deathDate DATE,
  race TEXT
);
Sample rows from `players`:
abdelal01, Alaa, Alaa, None, Abdelnaby, None, None, None, None, F-C, 0, 0, 82.0, 240, Duke, None, 1968-06-24, Cairo, None, EGY, Bloomfield Senior, Bloomfield, NJ, USA, 0000-00-00, B
abdulka01, Kareem, Kareem, None, Abdul-Jabbar, None, Ferdinand Lewis Alcindor, Jr., None, Lew, Cap, C, 0, 0, 85.0, 225, UCLA, None, 1947-04-16, New York, NY, USA, Power Memorial, New York, NY, USA, 0000-00-00, B
abdulma01, Mahdi, Mahdi, None, Abdul-Rahman, None, Walter Raphael Hazzard, Jr., None, Walt, G, 0, 0, 74.0, 185, UCLA, Santa Monica City, 1942-04-15, Wilmington, DE, USA, Overbrook / Moton, Philadelphia / Easton, PA / MD, USA, 2011-11-18, B

CREATE TABLE `player_allstar` (
  playerID TEXT PRIMARY KEY REFERENCES players(playerID),
  last_name TEXT,
  first_name TEXT,
  season_id INTEGER PRIMARY KEY,
  conference TEXT,
  league_id TEXT,
  games_played INTEGER,
  minutes INTEGER,
  points INTEGER,
  o_rebounds INTEGER,
  d_rebounds INTEGER,
  rebounds INTEGER,
  assists INTEGER,
  steals INTEGER,
  blocks INTEGER,
  turnovers INTEGER,
  personal_fouls INTEGER,
  fg_attempted INTEGER,
  fg_made INTEGER,
  ft_attempted INTEGER,
  ft_made INTEGER,
  three_attempted INTEGER,
  three_made INTEGER
);
Sample rows from `player_allstar`:
abdulka01, Abdul-Jabbar, Kareem, 1969, East, NBA, 1, 18, 10, None, None, 11, 4, None, None, None, None, 8, 4, 2, 2, None, None
abdulka01, Abdul-Jabbar, Kareem, 1970, West, NBA, 1, 30, 19, None, None, 14, 1, None, None, None, None, 16, 8, 4, 3, None, None
abdulka01, Abdul-Jabbar, Kareem, 1971, West, NBA, 1, 19, 12, None, None, 7, 2, None, None, None, None, 10, 5, 2, 2, None, None

","CREATE TABLE `awards_players` (
  playerID TEXT PRIMARY KEY REFERENCES players(playerID),
  award TEXT PRIMARY KEY,
  year INTEGER PRIMARY KEY,
  lgID TEXT,
  note TEXT,
  pos TEXT
);
Sample rows from `awards_players`:
abdulka01, All-Defensive Second Team, 1969, NBA, None, None
abdulka01, All-NBA Second Team, 1969, NBA, None, C
abdulka01, Rookie of the Year, 1969, NBA, None, None

CREATE TABLE `coaches` (
  coachID TEXT PRIMARY KEY,
  year INTEGER PRIMARY KEY REFERENCES teams(year),
  tmID TEXT PRIMARY KEY REFERENCES teams(tmID),
  lgID TEXT,
  stint INTEGER PRIMARY KEY,
  won INTEGER,
  lost INTEGER,
  post_wins INTEGER,
  post_losses INTEGER
);
Sample rows from `coaches`:
adelmri01, 1988, POR, NBA, 2, 14, 21, 0, 3
adelmri01, 1989, POR, NBA, 1, 59, 23, 12, 9
adelmri01, 1990, POR, NBA, 1, 63, 19, 9, 7

CREATE TABLE `draft` (
  id INTEGER,
  draftYear INTEGER REFERENCES teams(year),
  draftRound INTEGER,
  draftSelection INTEGER,
  draftOverall INTEGER,
  tmID TEXT REFERENCES teams(tmID),
  firstName TEXT,
  lastName TEXT,
  suffixName TEXT,
  playerID TEXT,
  draftFrom TEXT,
  lgID TEXT
);
Sample rows from `draft`:
1, 1967, 0, 0, 0, ANA, Darrell, Hardy, None, hardyda01, Baylor, ABA
2, 1967, 0, 0, 0, ANA, Bob, Krulish, None, None, Pacific, ABA
3, 1967, 0, 0, 0, ANA, Bob, Lewis, None, lewisbo01, North Carolina, ABA

CREATE TABLE `player_allstar` (
  playerID TEXT PRIMARY KEY REFERENCES players(playerID),
  last_name TEXT,
  first_name TEXT,
  season_id INTEGER PRIMARY KEY,
  conference TEXT,
  league_id TEXT,
  games_played INTEGER,
  minutes INTEGER,
  points INTEGER,
  o_rebounds INTEGER,
  d_rebounds INTEGER,
  rebounds INTEGER,
  assists INTEGER,
  steals INTEGER,
  blocks INTEGER,
  turnovers INTEGER,
  personal_fouls INTEGER,
  fg_attempted INTEGER,
  fg_made INTEGER,
  ft_attempted INTEGER,
  ft_made INTEGER,
  three_attempted INTEGER,
  three_made INTEGER
);
Sample rows from `player_allstar`:
abdulka01, Abdul-Jabbar, Kareem, 1969, East, NBA, 1, 18, 10, None, None, 11, 4, None, None, None, None, 8, 4, 2, 2, None, None
abdulka01, Abdul-Jabbar, Kareem, 1970, West, NBA, 1, 30, 19, None, None, 14, 1, None, None, None, None, 16, 8, 4, 3, None, None
abdulka01, Abdul-Jabbar, Kareem, 1971, West, NBA, 1, 19, 12, None, None, 7, 2, None, None, None, None, 10, 5, 2, 2, None, None

CREATE TABLE `players` (
  playerID TEXT PRIMARY KEY,
  useFirst TEXT,
  firstName TEXT,
  middleName TEXT,
  lastName TEXT,
  nameGiven TEXT,
  fullGivenName TEXT,
  nameSuffix TEXT,
  nameNick TEXT,
  pos TEXT,
  firstseason INTEGER,
  lastseason INTEGER,
  height REAL,
  weight INTEGER,
  college TEXT,
  collegeOther TEXT,
  birthDate DATE,
  birthCity TEXT,
  birthState TEXT,
  birthCountry TEXT,
  highSchool TEXT,
  hsCity TEXT,
  hsState TEXT,
  hsCountry TEXT,
  deathDate DATE,
  race TEXT
);
Sample rows from `players`:
abdelal01, Alaa, Alaa, None, Abdelnaby, None, None, None, None, F-C, 0, 0, 82.0, 240, Duke, None, 1968-06-24, Cairo, None, EGY, Bloomfield Senior, Bloomfield, NJ, USA, 0000-00-00, B
abdulka01, Kareem, Kareem, None, Abdul-Jabbar, None, Ferdinand Lewis Alcindor, Jr., None, Lew, Cap, C, 0, 0, 85.0, 225, UCLA, None, 1947-04-16, New York, NY, USA, Power Memorial, New York, NY, USA, 0000-00-00, B
abdulma01, Mahdi, Mahdi, None, Abdul-Rahman, None, Walter Raphael Hazzard, Jr., None, Walt, G, 0, 0, 74.0, 185, UCLA, Santa Monica City, 1942-04-15, Wilmington, DE, USA, Overbrook / Moton, Philadelphia / Easton, PA / MD, USA, 2011-11-18, B

CREATE TABLE `teams` (
  year INTEGER PRIMARY KEY,
  lgID TEXT,
  tmID TEXT PRIMARY KEY,
  franchID TEXT,
  confID TEXT,
  divID TEXT,
  rank INTEGER,
  confRank INTEGER,
  playoff TEXT,
  name TEXT,
  o_fgm INTEGER,
  o_ftm INTEGER,
  o_pts INTEGER,
  d_pts INTEGER,
  homeWon INTEGER,
  homeLost INTEGER,
  awayWon INTEGER,
  awayLost INTEGER,
  won INTEGER,
  lost INTEGER,
  games INTEGER,
  arena TEXT
);
Sample rows from `teams`:
1937, NBL, AFS, AFS, None, EA, 1, 0, CF, Akron Firestone Non-Skids, 249, 183, 681, 578, 8, 1, 5, 3, 14, 4, 18, None
1937, NBL, AGW, AGW, None, EA, 2, 0, WC, Akron Goodyear Wingfoots, 243, 159, 645, 498, 8, 1, 5, 4, 13, 5, 18, None
1937, NBL, BFB, BFB, None, EA, 4, 0, None, Buffalo Bisons, 108, 46, 262, 275, 2, 2, 1, 4, 3, 6, 9, None

CREATE TABLE `awards_coaches` (
  id INTEGER,
  year INTEGER REFERENCES coaches(year),
  coachID TEXT REFERENCES coaches(coachID),
  award TEXT,
  lgID TEXT,
  note TEXT
);
Sample rows from `awards_coaches`:
1, 1962, gallaha01, NBA Coach of the Year, NBA, None
2, 1963, hannual01, NBA Coach of the Year, NBA, None
3, 1964, auerbre01, NBA Coach of the Year, NBA, None

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
awards_coaches, 61
players_teams, 23751
series_post, 775

CREATE TABLE `players_teams` (
  id INTEGER,
  playerID TEXT REFERENCES players(None),
  year INTEGER REFERENCES teams(year),
  stint INTEGER,
  tmID TEXT REFERENCES teams(tmID),
  lgID TEXT,
  GP INTEGER,
  GS INTEGER,
  minutes INTEGER,
  points INTEGER,
  oRebounds INTEGER,
  dRebounds INTEGER,
  rebounds INTEGER,
  assists INTEGER,
  steals INTEGER,
  blocks INTEGER,
  turnovers INTEGER,
  PF INTEGER,
  fgAttempted INTEGER,
  fgMade INTEGER,
  ftAttempted INTEGER,
  ftMade INTEGER,
  threeAttempted INTEGER,
  threeMade INTEGER,
  PostGP INTEGER,
  PostGS INTEGER,
  PostMinutes INTEGER,
  PostPoints INTEGER,
  PostoRebounds INTEGER,
  PostdRebounds INTEGER,
  PostRebounds INTEGER,
  PostAssists INTEGER,
  PostSteals INTEGER,
  PostBlocks INTEGER,
  PostTurnovers INTEGER,
  PostPF INTEGER,
  PostfgAttempted INTEGER,
  PostfgMade INTEGER,
  PostftAttempted INTEGER,
  PostftMade INTEGER,
  PostthreeAttempted INTEGER,
  PostthreeMade INTEGER,
  note TEXT
);
Sample rows from `players_teams`:
1, abdelal01, 1990, 1, POR, NBA, 43, 0, 290, 135, 27, 62, 89, 12, 4, 12, 22, 39, 116, 55, 44, 25, 0, 0, 5, 0, 13, 4, 1, 2, 3, 0, 0, 0, 0, 0, 6, 2, 0, 0, 0, 0, None
2, abdelal01, 1991, 1, POR, NBA, 71, 0, 934, 432, 81, 179, 260, 30, 25, 17, 66, 132, 361, 178, 101, 76, 0, 0, 8, 0, 25, 12, 0, 4, 4, 2, 0, 0, 2, 4, 10, 5, 4, 2, 0, 0, None
3, abdelal01, 1992, 1, MIL, NBA, 12, 0, 159, 64, 12, 25, 37, 10, 6, 4, 0, 24, 56, 26, 16, 12, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, None

CREATE TABLE `series_post` (
  id INTEGER,
  year INTEGER REFERENCES teams(year) REFERENCES teams(year),
  round TEXT,
  series TEXT,
  tmIDWinner TEXT REFERENCES teams(tmID),
  lgIDWinner TEXT,
  tmIDLoser TEXT REFERENCES teams(tmID),
  lgIDLoser TEXT,
  W INTEGER,
  L INTEGER
);
Sample rows from `series_post`:
1, 1946, F, O, PHW, NBA, CHS, NBA, 4, 1
2, 1946, QF, M, NYK, NBA, CLR, NBA, 2, 1
3, 1946, QF, M, PHW, NBA, STB, NBA, 2, 1

","players, player_allstar","players.firstname, players.lastname, players.playerid, player_allstar.playerid, players.college"
sales,Write down all of the product ids that were placed by Meander.,SELECT DISTINCT t2.productid FROM employees as t1 inner JOIN sales as t2 ON t1.employeeid = t2.salesPersonID WHERE t1.firstname = 'Meander',"CREATE TABLE `employees` (
  EmployeeID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `employees`:
1, Abraham, e, Bennet
2, Reginald, l, Blotchet-Halls
3, Cheryl, a, Carson

CREATE TABLE `sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Employees`:
1, Abraham, e, Bennet
2, Reginald, l, Blotchet-Halls
3, Cheryl, a, Carson

CREATE TABLE `Products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

CREATE TABLE `Sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `Sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

","employees, sales","sales.productid, employees.employeeid, sales.salesPersonID, employees.firstname"
soccer_2016,Count the matches with a total of two innings.,SELECT COUNT(match_id) FROM wicket_taken WHERE innings_no = 2,"CREATE TABLE `wicket_taken` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Player_Out INTEGER REFERENCES Player(Player_Id),
  Kind_Out INTEGER REFERENCES Out_Type(Out_Id),
  Fielders INTEGER REFERENCES Player(Player_Id),
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `wicket_taken`:
335987, 2, 1, 6, 2, None, 2
335987, 3, 2, 8, 2, None, 2
335987, 5, 5, 9, 1, 83, 2

","CREATE TABLE `Batting_Style` (
  Batting_Id INTEGER,
  Batting_hand TEXT
);
Sample rows from `Batting_Style`:
1, Left-hand bat
2, Right-hand bat

CREATE TABLE `Bowling_Style` (
  Bowling_Id INTEGER,
  Bowling_skill TEXT
);
Sample rows from `Bowling_Style`:
1, Right-arm medium
2, Right-arm offbreak
3, Right-arm fast-medium

CREATE TABLE `City` (
  City_Id INTEGER,
  City_Name TEXT,
  Country_id INTEGER
);
Sample rows from `City`:
1, Bangalore, 1
2, Chandigarh, 1
3, Delhi, 1

CREATE TABLE `Country` (
  Country_Id INTEGER REFERENCES Country(Country_Id),
  Country_Name TEXT
);
Sample rows from `Country`:
1, India
2, South Africa
3, U.A.E

CREATE TABLE `Extra_Type` (
  Extra_Id INTEGER,
  Extra_Name TEXT
);
Sample rows from `Extra_Type`:
1, legbyes
2, wides
3, byes

CREATE TABLE `Extra_Runs` (
  Match_Id INTEGER PRIMARY KEY,
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Extra_Type_Id INTEGER REFERENCES Extra_Type(Extra_Id),
  Extra_Runs INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Extra_Runs`:
335987, 1, 1, 1, 1, 1
335987, 1, 2, 2, 1, 2
335987, 1, 3, 2, 1, 1

CREATE TABLE `Out_Type` (
  Out_Id INTEGER,
  Out_Name TEXT
);
Sample rows from `Out_Type`:
1, caught
2, bowled
3, run out

CREATE TABLE `Outcome` (
  Outcome_Id INTEGER,
  Outcome_Type TEXT
);
Sample rows from `Outcome`:
1, Result
2, No Result
3, Superover

CREATE TABLE `Player` (
  Player_Id INTEGER,
  Player_Name TEXT,
  DOB DATE,
  Batting_hand INTEGER REFERENCES Batting_Style(Batting_Id),
  Bowling_skill INTEGER REFERENCES Bowling_Style(Bowling_Id),
  Country_Name INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Player`:
1, SC Ganguly, 1972-07-08, 1, 1, 1
2, BB McCullum, 1981-09-27, 2, 1, 4
3, RT Ponting, 1974-12-19, 2, 1, 5

CREATE TABLE `Rolee` (
  Role_Id INTEGER,
  Role_Desc TEXT
);
Sample rows from `Rolee`:
1, Captain
2, Keeper
3, Player

CREATE TABLE `Season` (
  Season_Id INTEGER,
  Man_of_the_Series INTEGER,
  Orange_Cap INTEGER,
  Purple_Cap INTEGER,
  Season_Year INTEGER
);
Sample rows from `Season`:
1, 32, 100, 102, 2008
2, 53, 18, 61, 2009
3, 133, 133, 131, 2010

CREATE TABLE `Team` (
  Team_Id INTEGER,
  Team_Name TEXT
);
Sample rows from `Team`:
1, Kolkata Knight Riders
2, Royal Challengers Bangalore
3, Chennai Super Kings

CREATE TABLE `Toss_Decision` (
  Toss_Id INTEGER,
  Toss_Name TEXT
);
Sample rows from `Toss_Decision`:
1, field
2, bat

CREATE TABLE `Umpire` (
  Umpire_Id INTEGER,
  Umpire_Name TEXT,
  Umpire_Country INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Umpire`:
1, Asad Rauf, 6
2, MR Benson, 10
3, Aleem Dar, 6

CREATE TABLE `Venue` (
  Venue_Id INTEGER,
  Venue_Name TEXT,
  City_Id INTEGER REFERENCES City(City_Id)
);
Sample rows from `Venue`:
1, M Chinnaswamy Stadium, 1
2, Punjab Cricket Association Stadium, 2
3, Feroz Shah Kotla, 3

CREATE TABLE `Win_By` (
  Win_Id INTEGER,
  Win_Type TEXT
);
Sample rows from `Win_By`:
1, runs
2, wickets
3, NO Result

CREATE TABLE `Match` (
  Match_Id INTEGER,
  Team_1 INTEGER REFERENCES Team(Team_Id),
  Team_2 INTEGER REFERENCES Team(Team_Id),
  Match_Date DATE,
  Season_Id INTEGER REFERENCES Season(Season_Id),
  Venue_Id INTEGER REFERENCES Venue(Venue_Id),
  Toss_Winner INTEGER REFERENCES Team(Team_Id),
  Toss_Decide INTEGER REFERENCES Toss_Decision(Toss_Id),
  Win_Type INTEGER REFERENCES Win_By(Win_Id),
  Win_Margin INTEGER,
  Outcome_type INTEGER REFERENCES Out_Type(Out_Id),
  Match_Winner INTEGER REFERENCES Team(Team_Id),
  Man_of_the_Match INTEGER REFERENCES Player(Player_Id)
);
Sample rows from `Match`:
335987, 2, 1, 2008-04-18, 1, 1, 2, 1, 1, 140, 1, 1, 2
335988, 4, 3, 2008-04-19, 1, 2, 3, 2, 1, 33, 1, 3, 19
335989, 6, 5, 2008-04-19, 1, 3, 5, 2, 2, 9, 1, 6, 90

CREATE TABLE `Ball_by_Ball` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Innings_No INTEGER PRIMARY KEY,
  Team_Batting INTEGER,
  Team_Bowling INTEGER,
  Striker_Batting_Position INTEGER,
  Striker INTEGER,
  Non_Striker INTEGER,
  Bowler INTEGER
);
Sample rows from `Ball_by_Ball`:
335987, 1, 1, 1, 1, 2, 1, 1, 2, 14
335987, 1, 1, 2, 2, 1, 1, 6, 7, 106
335987, 1, 2, 1, 1, 2, 2, 2, 1, 14

CREATE TABLE `Batsman_Scored` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Runs_Scored INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Batsman_Scored`:
335987, 1, 1, 0, 1
335987, 1, 1, 1, 2
335987, 1, 2, 0, 1

CREATE TABLE `Player_Match` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Player_Id INTEGER PRIMARY KEY REFERENCES Player(Player_Id),
  Role_Id INTEGER PRIMARY KEY REFERENCES Rolee(Role_Id),
  Team_Id INTEGER REFERENCES Team(Team_Id)
);
Sample rows from `Player_Match`:
335987, 1, 1, 1
335987, 2, 3, 1
335987, 3, 3, 1

CREATE TABLE `Wicket_Taken` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Player_Out INTEGER REFERENCES Player(Player_Id),
  Kind_Out INTEGER REFERENCES Out_Type(Out_Id),
  Fielders INTEGER REFERENCES Player(Player_Id),
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Wicket_Taken`:
335987, 2, 1, 6, 2, None, 2
335987, 3, 2, 8, 2, None, 2
335987, 5, 5, 9, 1, 83, 2

",wicket_taken,"match_id, innings_no"
cs_semester,"Among students that gave satisfaction of value 4 for the course named ""Statistical Learning"", how many of them have a gpa of 3.8?",SELECT COUNT(t1.student_id) FROM student as t1 inner JOIN registration as t2 ON t1.student_id = t2.student_id inner JOIN course as t3 ON t2.course_id = t3.course_id WHERE t3.name = 'Statistical learning' AND t2.sat = 4 AND t1.gpa = 3.8,"CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

","CREATE TABLE `course` (
  course_id INTEGER,
  name TEXT,
  credit INTEGER,
  diff INTEGER
);
Sample rows from `course`:
1, Machine Learning Theory, 3, 3
2, Intro to Database 1, 2, 4
3, Intro to Database 2, 2, 1

CREATE TABLE `prof` (
  prof_id INTEGER,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  popularity INTEGER,
  teachingability INTEGER,
  graduate_from TEXT
);
Sample rows from `prof`:
1, Male, Nathaniel, Pigford, npigford0@hku.hk, 3, 5, University of Washington
2, Male, Zhihua, Zhou, zzhihua@hku.hk, 2, 1, Beijing Polytechnic University
3, Male, Ogdon, Zywicki, ozywicki2@hku.hk, 2, 2, University of Boston

CREATE TABLE `RA` (
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  capability INTEGER,
  prof_id INTEGER PRIMARY KEY REFERENCES prof(prof_id),
  salary TEXT
);
Sample rows from `RA`:
16, 2, 11, med
23, 5, 6, high
23, 4, 11, high

CREATE TABLE `registration` (
  course_id INTEGER PRIMARY KEY REFERENCES course(course_id),
  student_id INTEGER PRIMARY KEY REFERENCES student(student_id),
  grade TEXT,
  sat INTEGER
);
Sample rows from `registration`:
1, 7, A, 5
1, 3, B, 4
1, 2, B, 4

CREATE TABLE `student` (
  student_id INTEGER,
  f_name TEXT,
  l_name TEXT,
  phone_number TEXT,
  email TEXT,
  intelligence INTEGER,
  gpa REAL,
  type TEXT
);
Sample rows from `student`:
1, Kerry, Pryor, (243) 6836472, kpryor0@hku.hk, 5, 2.4, RPG
2, Chrysa, Dine-Hart, (672) 9245255, cdinehart1@hku.hk, 2, 2.7, TPG
3, Elsy, Shiril, (521) 7680522, eshiril2@hku.hk, 1, 3.5, TPG

","student, registration, course","student.student_id, registration.student_id, registration.course_id, course.course_id, course.name, registration.sat, student.gpa"
sales_in_weather,What is the minimum dew point?,SELECT MIN(dewpoint) FROM weather,"CREATE TABLE `weather` (
  station_nbr INTEGER PRIMARY KEY,
  date DATE PRIMARY KEY,
  tmax INTEGER,
  tmin INTEGER,
  tavg INTEGER,
  depart INTEGER,
  dewpoint INTEGER,
  wetbulb INTEGER,
  heat INTEGER,
  cool INTEGER,
  sunrise TEXT,
  sunset TEXT,
  codesum TEXT,
  snowfall REAL,
  preciptotal REAL,
  stnpressure REAL,
  sealevel REAL,
  resultspeed REAL,
  resultdir INTEGER,
  avgspeed REAL
);
Sample rows from `weather`:
1, 2012-01-01, 52, 31, 42, None, 36, 40, 23, 0, None, None, RA FZFG BR, None, 0.05, 29.78, 29.92, 3.6, 20, 4.6
1, 2012-01-02, 50, 31, 41, None, 26, 35, 24, 0, None, None,  , None, 0.01, 29.44, 29.62, 9.8, 24, 10.3
1, 2012-01-03, 32, 11, 22, None, 4, 18, 43, 0, None, None,  , None, 0.0, 29.67, 29.87, 10.8, 31, 11.6

","CREATE TABLE `sales_in_weather` (
  date DATE PRIMARY KEY,
  store_nbr INTEGER PRIMARY KEY,
  item_nbr INTEGER PRIMARY KEY,
  units INTEGER
);
Sample rows from `sales_in_weather`:
2012-01-01, 1, 1, 0
2012-01-01, 1, 2, 0
2012-01-01, 1, 3, 0

CREATE TABLE `weather` (
  station_nbr INTEGER PRIMARY KEY,
  date DATE PRIMARY KEY,
  tmax INTEGER,
  tmin INTEGER,
  tavg INTEGER,
  depart INTEGER,
  dewpoint INTEGER,
  wetbulb INTEGER,
  heat INTEGER,
  cool INTEGER,
  sunrise TEXT,
  sunset TEXT,
  codesum TEXT,
  snowfall REAL,
  preciptotal REAL,
  stnpressure REAL,
  sealevel REAL,
  resultspeed REAL,
  resultdir INTEGER,
  avgspeed REAL
);
Sample rows from `weather`:
1, 2012-01-01, 52, 31, 42, None, 36, 40, 23, 0, None, None, RA FZFG BR, None, 0.05, 29.78, 29.92, 3.6, 20, 4.6
1, 2012-01-02, 50, 31, 41, None, 26, 35, 24, 0, None, None,  , None, 0.01, 29.44, 29.62, 9.8, 24, 10.3
1, 2012-01-03, 32, 11, 22, None, 4, 18, 43, 0, None, None,  , None, 0.0, 29.67, 29.87, 10.8, 31, 11.6

CREATE TABLE `relation` (
  store_nbr INTEGER REFERENCES sales_in_weather(store_nbr),
  station_nbr INTEGER REFERENCES weather(station_nbr)
);
Sample rows from `relation`:
1, 1
2, 14
3, 7

",weather,dewpoint
professional_basketball,Which team did the youngest player who could be in F-G position play in the NBA?,SELECT t1.tmid FROM teams as t1 inner JOIN players_teams as t2 ON t1.tmid = t2.tmid AND t1.year = t2.year inner JOIN players as t3 ON t2.playerid = t3.playerid WHERE t3.pos = 'F-G' AND t2.lgid = 'NBA' ORDER BY t3.birthdate DESC LIMIT 1,"CREATE TABLE `teams` (
  year INTEGER PRIMARY KEY,
  lgID TEXT,
  tmID TEXT PRIMARY KEY,
  franchID TEXT,
  confID TEXT,
  divID TEXT,
  rank INTEGER,
  confRank INTEGER,
  playoff TEXT,
  name TEXT,
  o_fgm INTEGER,
  o_ftm INTEGER,
  o_pts INTEGER,
  d_pts INTEGER,
  homeWon INTEGER,
  homeLost INTEGER,
  awayWon INTEGER,
  awayLost INTEGER,
  won INTEGER,
  lost INTEGER,
  games INTEGER,
  arena TEXT
);
Sample rows from `teams`:
1937, NBL, AFS, AFS, None, EA, 1, 0, CF, Akron Firestone Non-Skids, 249, 183, 681, 578, 8, 1, 5, 3, 14, 4, 18, None
1937, NBL, AGW, AGW, None, EA, 2, 0, WC, Akron Goodyear Wingfoots, 243, 159, 645, 498, 8, 1, 5, 4, 13, 5, 18, None
1937, NBL, BFB, BFB, None, EA, 4, 0, None, Buffalo Bisons, 108, 46, 262, 275, 2, 2, 1, 4, 3, 6, 9, None

CREATE TABLE `players_teams` (
  id INTEGER,
  playerID TEXT REFERENCES players(None),
  year INTEGER REFERENCES teams(year),
  stint INTEGER,
  tmID TEXT REFERENCES teams(tmID),
  lgID TEXT,
  GP INTEGER,
  GS INTEGER,
  minutes INTEGER,
  points INTEGER,
  oRebounds INTEGER,
  dRebounds INTEGER,
  rebounds INTEGER,
  assists INTEGER,
  steals INTEGER,
  blocks INTEGER,
  turnovers INTEGER,
  PF INTEGER,
  fgAttempted INTEGER,
  fgMade INTEGER,
  ftAttempted INTEGER,
  ftMade INTEGER,
  threeAttempted INTEGER,
  threeMade INTEGER,
  PostGP INTEGER,
  PostGS INTEGER,
  PostMinutes INTEGER,
  PostPoints INTEGER,
  PostoRebounds INTEGER,
  PostdRebounds INTEGER,
  PostRebounds INTEGER,
  PostAssists INTEGER,
  PostSteals INTEGER,
  PostBlocks INTEGER,
  PostTurnovers INTEGER,
  PostPF INTEGER,
  PostfgAttempted INTEGER,
  PostfgMade INTEGER,
  PostftAttempted INTEGER,
  PostftMade INTEGER,
  PostthreeAttempted INTEGER,
  PostthreeMade INTEGER,
  note TEXT
);
Sample rows from `players_teams`:
1, abdelal01, 1990, 1, POR, NBA, 43, 0, 290, 135, 27, 62, 89, 12, 4, 12, 22, 39, 116, 55, 44, 25, 0, 0, 5, 0, 13, 4, 1, 2, 3, 0, 0, 0, 0, 0, 6, 2, 0, 0, 0, 0, None
2, abdelal01, 1991, 1, POR, NBA, 71, 0, 934, 432, 81, 179, 260, 30, 25, 17, 66, 132, 361, 178, 101, 76, 0, 0, 8, 0, 25, 12, 0, 4, 4, 2, 0, 0, 2, 4, 10, 5, 4, 2, 0, 0, None
3, abdelal01, 1992, 1, MIL, NBA, 12, 0, 159, 64, 12, 25, 37, 10, 6, 4, 0, 24, 56, 26, 16, 12, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, None

CREATE TABLE `players` (
  playerID TEXT PRIMARY KEY,
  useFirst TEXT,
  firstName TEXT,
  middleName TEXT,
  lastName TEXT,
  nameGiven TEXT,
  fullGivenName TEXT,
  nameSuffix TEXT,
  nameNick TEXT,
  pos TEXT,
  firstseason INTEGER,
  lastseason INTEGER,
  height REAL,
  weight INTEGER,
  college TEXT,
  collegeOther TEXT,
  birthDate DATE,
  birthCity TEXT,
  birthState TEXT,
  birthCountry TEXT,
  highSchool TEXT,
  hsCity TEXT,
  hsState TEXT,
  hsCountry TEXT,
  deathDate DATE,
  race TEXT
);
Sample rows from `players`:
abdelal01, Alaa, Alaa, None, Abdelnaby, None, None, None, None, F-C, 0, 0, 82.0, 240, Duke, None, 1968-06-24, Cairo, None, EGY, Bloomfield Senior, Bloomfield, NJ, USA, 0000-00-00, B
abdulka01, Kareem, Kareem, None, Abdul-Jabbar, None, Ferdinand Lewis Alcindor, Jr., None, Lew, Cap, C, 0, 0, 85.0, 225, UCLA, None, 1947-04-16, New York, NY, USA, Power Memorial, New York, NY, USA, 0000-00-00, B
abdulma01, Mahdi, Mahdi, None, Abdul-Rahman, None, Walter Raphael Hazzard, Jr., None, Walt, G, 0, 0, 74.0, 185, UCLA, Santa Monica City, 1942-04-15, Wilmington, DE, USA, Overbrook / Moton, Philadelphia / Easton, PA / MD, USA, 2011-11-18, B

","CREATE TABLE `awards_players` (
  playerID TEXT PRIMARY KEY REFERENCES players(playerID),
  award TEXT PRIMARY KEY,
  year INTEGER PRIMARY KEY,
  lgID TEXT,
  note TEXT,
  pos TEXT
);
Sample rows from `awards_players`:
abdulka01, All-Defensive Second Team, 1969, NBA, None, None
abdulka01, All-NBA Second Team, 1969, NBA, None, C
abdulka01, Rookie of the Year, 1969, NBA, None, None

CREATE TABLE `coaches` (
  coachID TEXT PRIMARY KEY,
  year INTEGER PRIMARY KEY REFERENCES teams(year),
  tmID TEXT PRIMARY KEY REFERENCES teams(tmID),
  lgID TEXT,
  stint INTEGER PRIMARY KEY,
  won INTEGER,
  lost INTEGER,
  post_wins INTEGER,
  post_losses INTEGER
);
Sample rows from `coaches`:
adelmri01, 1988, POR, NBA, 2, 14, 21, 0, 3
adelmri01, 1989, POR, NBA, 1, 59, 23, 12, 9
adelmri01, 1990, POR, NBA, 1, 63, 19, 9, 7

CREATE TABLE `draft` (
  id INTEGER,
  draftYear INTEGER REFERENCES teams(year),
  draftRound INTEGER,
  draftSelection INTEGER,
  draftOverall INTEGER,
  tmID TEXT REFERENCES teams(tmID),
  firstName TEXT,
  lastName TEXT,
  suffixName TEXT,
  playerID TEXT,
  draftFrom TEXT,
  lgID TEXT
);
Sample rows from `draft`:
1, 1967, 0, 0, 0, ANA, Darrell, Hardy, None, hardyda01, Baylor, ABA
2, 1967, 0, 0, 0, ANA, Bob, Krulish, None, None, Pacific, ABA
3, 1967, 0, 0, 0, ANA, Bob, Lewis, None, lewisbo01, North Carolina, ABA

CREATE TABLE `player_allstar` (
  playerID TEXT PRIMARY KEY REFERENCES players(playerID),
  last_name TEXT,
  first_name TEXT,
  season_id INTEGER PRIMARY KEY,
  conference TEXT,
  league_id TEXT,
  games_played INTEGER,
  minutes INTEGER,
  points INTEGER,
  o_rebounds INTEGER,
  d_rebounds INTEGER,
  rebounds INTEGER,
  assists INTEGER,
  steals INTEGER,
  blocks INTEGER,
  turnovers INTEGER,
  personal_fouls INTEGER,
  fg_attempted INTEGER,
  fg_made INTEGER,
  ft_attempted INTEGER,
  ft_made INTEGER,
  three_attempted INTEGER,
  three_made INTEGER
);
Sample rows from `player_allstar`:
abdulka01, Abdul-Jabbar, Kareem, 1969, East, NBA, 1, 18, 10, None, None, 11, 4, None, None, None, None, 8, 4, 2, 2, None, None
abdulka01, Abdul-Jabbar, Kareem, 1970, West, NBA, 1, 30, 19, None, None, 14, 1, None, None, None, None, 16, 8, 4, 3, None, None
abdulka01, Abdul-Jabbar, Kareem, 1971, West, NBA, 1, 19, 12, None, None, 7, 2, None, None, None, None, 10, 5, 2, 2, None, None

CREATE TABLE `players` (
  playerID TEXT PRIMARY KEY,
  useFirst TEXT,
  firstName TEXT,
  middleName TEXT,
  lastName TEXT,
  nameGiven TEXT,
  fullGivenName TEXT,
  nameSuffix TEXT,
  nameNick TEXT,
  pos TEXT,
  firstseason INTEGER,
  lastseason INTEGER,
  height REAL,
  weight INTEGER,
  college TEXT,
  collegeOther TEXT,
  birthDate DATE,
  birthCity TEXT,
  birthState TEXT,
  birthCountry TEXT,
  highSchool TEXT,
  hsCity TEXT,
  hsState TEXT,
  hsCountry TEXT,
  deathDate DATE,
  race TEXT
);
Sample rows from `players`:
abdelal01, Alaa, Alaa, None, Abdelnaby, None, None, None, None, F-C, 0, 0, 82.0, 240, Duke, None, 1968-06-24, Cairo, None, EGY, Bloomfield Senior, Bloomfield, NJ, USA, 0000-00-00, B
abdulka01, Kareem, Kareem, None, Abdul-Jabbar, None, Ferdinand Lewis Alcindor, Jr., None, Lew, Cap, C, 0, 0, 85.0, 225, UCLA, None, 1947-04-16, New York, NY, USA, Power Memorial, New York, NY, USA, 0000-00-00, B
abdulma01, Mahdi, Mahdi, None, Abdul-Rahman, None, Walter Raphael Hazzard, Jr., None, Walt, G, 0, 0, 74.0, 185, UCLA, Santa Monica City, 1942-04-15, Wilmington, DE, USA, Overbrook / Moton, Philadelphia / Easton, PA / MD, USA, 2011-11-18, B

CREATE TABLE `teams` (
  year INTEGER PRIMARY KEY,
  lgID TEXT,
  tmID TEXT PRIMARY KEY,
  franchID TEXT,
  confID TEXT,
  divID TEXT,
  rank INTEGER,
  confRank INTEGER,
  playoff TEXT,
  name TEXT,
  o_fgm INTEGER,
  o_ftm INTEGER,
  o_pts INTEGER,
  d_pts INTEGER,
  homeWon INTEGER,
  homeLost INTEGER,
  awayWon INTEGER,
  awayLost INTEGER,
  won INTEGER,
  lost INTEGER,
  games INTEGER,
  arena TEXT
);
Sample rows from `teams`:
1937, NBL, AFS, AFS, None, EA, 1, 0, CF, Akron Firestone Non-Skids, 249, 183, 681, 578, 8, 1, 5, 3, 14, 4, 18, None
1937, NBL, AGW, AGW, None, EA, 2, 0, WC, Akron Goodyear Wingfoots, 243, 159, 645, 498, 8, 1, 5, 4, 13, 5, 18, None
1937, NBL, BFB, BFB, None, EA, 4, 0, None, Buffalo Bisons, 108, 46, 262, 275, 2, 2, 1, 4, 3, 6, 9, None

CREATE TABLE `awards_coaches` (
  id INTEGER,
  year INTEGER REFERENCES coaches(year),
  coachID TEXT REFERENCES coaches(coachID),
  award TEXT,
  lgID TEXT,
  note TEXT
);
Sample rows from `awards_coaches`:
1, 1962, gallaha01, NBA Coach of the Year, NBA, None
2, 1963, hannual01, NBA Coach of the Year, NBA, None
3, 1964, auerbre01, NBA Coach of the Year, NBA, None

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
awards_coaches, 61
players_teams, 23751
series_post, 775

CREATE TABLE `players_teams` (
  id INTEGER,
  playerID TEXT REFERENCES players(None),
  year INTEGER REFERENCES teams(year),
  stint INTEGER,
  tmID TEXT REFERENCES teams(tmID),
  lgID TEXT,
  GP INTEGER,
  GS INTEGER,
  minutes INTEGER,
  points INTEGER,
  oRebounds INTEGER,
  dRebounds INTEGER,
  rebounds INTEGER,
  assists INTEGER,
  steals INTEGER,
  blocks INTEGER,
  turnovers INTEGER,
  PF INTEGER,
  fgAttempted INTEGER,
  fgMade INTEGER,
  ftAttempted INTEGER,
  ftMade INTEGER,
  threeAttempted INTEGER,
  threeMade INTEGER,
  PostGP INTEGER,
  PostGS INTEGER,
  PostMinutes INTEGER,
  PostPoints INTEGER,
  PostoRebounds INTEGER,
  PostdRebounds INTEGER,
  PostRebounds INTEGER,
  PostAssists INTEGER,
  PostSteals INTEGER,
  PostBlocks INTEGER,
  PostTurnovers INTEGER,
  PostPF INTEGER,
  PostfgAttempted INTEGER,
  PostfgMade INTEGER,
  PostftAttempted INTEGER,
  PostftMade INTEGER,
  PostthreeAttempted INTEGER,
  PostthreeMade INTEGER,
  note TEXT
);
Sample rows from `players_teams`:
1, abdelal01, 1990, 1, POR, NBA, 43, 0, 290, 135, 27, 62, 89, 12, 4, 12, 22, 39, 116, 55, 44, 25, 0, 0, 5, 0, 13, 4, 1, 2, 3, 0, 0, 0, 0, 0, 6, 2, 0, 0, 0, 0, None
2, abdelal01, 1991, 1, POR, NBA, 71, 0, 934, 432, 81, 179, 260, 30, 25, 17, 66, 132, 361, 178, 101, 76, 0, 0, 8, 0, 25, 12, 0, 4, 4, 2, 0, 0, 2, 4, 10, 5, 4, 2, 0, 0, None
3, abdelal01, 1992, 1, MIL, NBA, 12, 0, 159, 64, 12, 25, 37, 10, 6, 4, 0, 24, 56, 26, 16, 12, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, None

CREATE TABLE `series_post` (
  id INTEGER,
  year INTEGER REFERENCES teams(year) REFERENCES teams(year),
  round TEXT,
  series TEXT,
  tmIDWinner TEXT REFERENCES teams(tmID),
  lgIDWinner TEXT,
  tmIDLoser TEXT REFERENCES teams(tmID),
  lgIDLoser TEXT,
  W INTEGER,
  L INTEGER
);
Sample rows from `series_post`:
1, 1946, F, O, PHW, NBA, CHS, NBA, 4, 1
2, 1946, QF, M, NYK, NBA, CLR, NBA, 2, 1
3, 1946, QF, M, PHW, NBA, STB, NBA, 2, 1

","teams, players_teams, players","teams.tmid, players_teams.tmid, teams.year, players_teams.year, players_teams.playerid, players.playerid, players.pos, players_teams.lgid, players.birthdate"
social_media,How many more tweets with a positive sentiment than the tweets with a neutral sentiment were posted by male users?,SELECT SUM(case when t1.sentiment > 0 then 1 else 0 end) - SUM(case when t1.sentiment = 0 then 1 else 0 end) as diff FROM twitter as t1 inner JOIN user as t2 ON t1.userid = t2.userid WHERE t2.gender = 'Male',"CREATE TABLE `twitter` (
  TweetID TEXT PRIMARY KEY,
  Weekday TEXT,
  Hour INTEGER,
  Day INTEGER,
  Lang TEXT,
  IsReshare TEXT,
  Reach INTEGER,
  RetweetCount INTEGER,
  Likes INTEGER,
  Klout INTEGER,
  Sentiment REAL,
  text TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  UserID TEXT REFERENCES user(UserID)
);
Sample rows from `twitter`:
tw-682712873332805633, Thursday, 17, 31, en, FALSE, 44, 0, 0, 35, 0.0, We are hiring: Senior Software Engineer - Proto http://www.reqcloud.com/jobs/719865/?k=0LaPxXuFwczs1e32ZURJKrgCIDMQtRO7BquFSQthUKY&utm_source=twitter&utm_campaign=reqCloud_JobPost #job @awscloud #job #protocol #networking #aws #mediastreaming, 3751, tw-40932430
tw-682713045357998080, Thursday, 17, 31, en, TRUE, 1810, 5, 0, 53, 2.0, RT @CodeMineStatus: This is true Amazon Web Services https://aws.amazon.com/ #php #html #html5 #css #webdesign #seo #java #javascript htt, 3989, tw-3179389829
tw-682713219375476736, Thursday, 17, 31, en, FALSE, 282, 0, 0, 47, 0.0, Devops Engineer Aws Ansible Cassandra Mysql Ubuntu Ruby On Rails Jobs in Austin TX #Austin #TX #jobs #jobsearch https://www.jobfindly.com/devops-engineer-aws-ansible-cassandra-mysql-ubuntu-ruby-on-rails-jobs-austin-tx.html, 3741, tw-4624808414

CREATE TABLE `user` (
  UserID TEXT PRIMARY KEY,
  Gender TEXT
);
Sample rows from `user`:
tw-1267804344, Unknown
tw-27229880, Male
tw-199664730, Male

","CREATE TABLE `location` (
  LocationID INTEGER,
  Country TEXT,
  State TEXT,
  StateCode TEXT,
  City TEXT
);
Sample rows from `location`:
1, Albania, Elbasan, AL, Elbasan
2, Albania, Tirane, AL, Tirana
3, Algeria, Souk Ahras, DZ, Souk Ahras

CREATE TABLE `user` (
  UserID TEXT PRIMARY KEY,
  Gender TEXT
);
Sample rows from `user`:
tw-1267804344, Unknown
tw-27229880, Male
tw-199664730, Male

CREATE TABLE `twitter` (
  TweetID TEXT PRIMARY KEY,
  Weekday TEXT,
  Hour INTEGER,
  Day INTEGER,
  Lang TEXT,
  IsReshare TEXT,
  Reach INTEGER,
  RetweetCount INTEGER,
  Likes INTEGER,
  Klout INTEGER,
  Sentiment REAL,
  text TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  UserID TEXT REFERENCES user(UserID)
);
Sample rows from `twitter`:
tw-682712873332805633, Thursday, 17, 31, en, FALSE, 44, 0, 0, 35, 0.0, We are hiring: Senior Software Engineer - Proto http://www.reqcloud.com/jobs/719865/?k=0LaPxXuFwczs1e32ZURJKrgCIDMQtRO7BquFSQthUKY&utm_source=twitter&utm_campaign=reqCloud_JobPost #job @awscloud #job #protocol #networking #aws #mediastreaming, 3751, tw-40932430
tw-682713045357998080, Thursday, 17, 31, en, TRUE, 1810, 5, 0, 53, 2.0, RT @CodeMineStatus: This is true Amazon Web Services https://aws.amazon.com/ #php #html #html5 #css #webdesign #seo #java #javascript htt, 3989, tw-3179389829
tw-682713219375476736, Thursday, 17, 31, en, FALSE, 282, 0, 0, 47, 0.0, Devops Engineer Aws Ansible Cassandra Mysql Ubuntu Ruby On Rails Jobs in Austin TX #Austin #TX #jobs #jobsearch https://www.jobfindly.com/devops-engineer-aws-ansible-cassandra-mysql-ubuntu-ruby-on-rails-jobs-austin-tx.html, 3741, tw-4624808414

","twitter, user","twitter.sentiment, twitter.userid, user.userid, user.gender"
regional_sales,How many orders made by Rochester Ltd?,SELECT SUM(case when t1.`customer names` = 'Rochester Ltd' then 1 else 0 end) FROM customers as t1 inner JOIN `sales orders` as t2 ON t2._customerID = t1.customerID,"CREATE TABLE `customers` (
  CustomerID INTEGER,
  Customer Names TEXT
);
Sample rows from `customers`:
1, Avon Corp
2, WakeFern 
3, Elorac, Corp

CREATE TABLE `sales orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `sales orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  Customer Names TEXT
);
Sample rows from `Customers`:
1, Avon Corp
2, WakeFern 
3, Elorac, Corp

CREATE TABLE `Products` (
  ProductID INTEGER,
  Product Name TEXT
);
Sample rows from `Products`:
1, Cookware
2, Photo Frames
3, Table Lamps

CREATE TABLE `Regions` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `Regions`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `Sales Team` (
  SalesTeamID INTEGER,
  Sales Team TEXT,
  Region TEXT
);
Sample rows from `Sales Team`:
1, Adam Hernandez, Northeast
2, Keith Griffin, Northeast
3, Jerry Green, West

CREATE TABLE `Store Locations` (
  StoreID INTEGER,
  City Name TEXT,
  County TEXT,
  StateCode TEXT REFERENCES Regions(StateCode),
  State TEXT,
  Type TEXT,
  Latitude REAL,
  Longitude REAL,
  AreaCode INTEGER,
  Population INTEGER,
  Household Income INTEGER,
  Median Income INTEGER,
  Land Area INTEGER,
  Water Area INTEGER,
  Time Zone TEXT
);
Sample rows from `Store Locations`:
1, Birmingham, Shelby County/Jefferson County, AL, Alabama, City, 33.52744, -86.79905, 205, 212461, 89972, 31061, 378353942, 6591013, America/Chicago
2, Huntsville, Limestone County/Madison County, AL, Alabama, City, 34.69901, -86.67298, 256, 190582, 78554, 48775, 552604579, 3452021, America/Chicago
3, Mobile, Mobile County, AL, Alabama, City, 30.69436, -88.04305, 251, 194288, 76170, 38776, 361044263, 105325210, America/Chicago

CREATE TABLE `Sales Orders` (
  OrderNumber TEXT PRIMARY KEY,
  Sales Channel TEXT,
  WarehouseCode TEXT,
  ProcuredDate TEXT,
  OrderDate TEXT,
  ShipDate TEXT,
  DeliveryDate TEXT,
  CurrencyCode TEXT,
  _SalesTeamID INTEGER REFERENCES Sales Team(SalesTeamID),
  _CustomerID INTEGER REFERENCES Customers(CustomerID),
  _StoreID INTEGER REFERENCES Store Locations(StoreID),
  _ProductID INTEGER REFERENCES Products(ProductID),
  Order Quantity INTEGER,
  Discount Applied REAL,
  Unit Price TEXT,
  Unit Cost TEXT
);
Sample rows from `Sales Orders`:
SO - 000101, In-Store, WARE-UHY1004, 12/31/17, 5/31/18, 6/14/18, 6/19/18, USD, 6, 15, 259, 12, 5, 0.075, 1,963.10, 1,001.18
SO - 000102, Online, WARE-NMK1003, 12/31/17, 5/31/18, 6/22/18, 7/2/18, USD, 14, 20, 196, 27, 3, 0.075, 3,939.60, 3,348.66
SO - 000103, Distributor, WARE-UHY1004, 12/31/17, 5/31/18, 6/21/18, 7/1/18, USD, 21, 16, 213, 16, 1, 0.05, 1,775.50, 781.22

","customers, sales orders","customers.customer names, sales orders._customerID, customers.customerID"
address,What are the top 3 states with the highest Asian population? List the full names of all the representatives in the said states.,"SELECt t.state, t1.first_name, t1.last_name FROM zip_data as t inner JOIN congress as t1 ON t.state = t1.abbreviation GROUP BY t.state ORDER BY SUM(t.asian_population) DESC LIMIt 3","CREATE TABLE `zip_data` (
  zip_code INTEGER,
  city TEXT,
  state TEXT REFERENCES state(abbreviation),
  multi_county TEXT,
  type TEXT,
  organization TEXT,
  time_zone TEXT,
  daylight_savings TEXT,
  latitude REAL,
  longitude REAL,
  elevation INTEGER,
  state_fips INTEGER,
  county_fips INTEGER,
  region TEXT,
  division TEXT,
  population_2020 INTEGER,
  population_2010 INTEGER,
  households INTEGER,
  avg_house_value INTEGER,
  avg_income_per_household INTEGER,
  persons_per_household REAL,
  white_population INTEGER,
  black_population INTEGER,
  hispanic_population INTEGER,
  asian_population INTEGER,
  american_indian_population INTEGER,
  hawaiian_population INTEGER,
  other_population INTEGER,
  male_population INTEGER,
  female_population INTEGER,
  median_age REAL,
  male_median_age REAL,
  female_median_age REAL,
  residential_mailboxes INTEGER,
  business_mailboxes INTEGER,
  total_delivery_receptacles INTEGER,
  businesses INTEGER,
  1st_quarter_payroll INTEGER,
  annual_payroll INTEGER,
  employees INTEGER,
  water_area REAL,
  land_area REAL,
  single_family_delivery_units INTEGER,
  multi_family_delivery_units INTEGER,
  total_beneficiaries INTEGER,
  retired_workers INTEGER,
  disabled_workers INTEGER,
  parents_and_widowed INTEGER,
  spouses INTEGER,
  children INTEGER,
  over_65 INTEGER,
  monthly_benefits_all INTEGER,
  monthly_benefits_retired_workers INTEGER,
  monthly_benefits_widowed INTEGER,
  CBSA INTEGER REFERENCES CBSA(CBSA)
);
Sample rows from `zip_data`:
501, Holtsville, NY, No, Unique Post Office, I R S Service Center, Eastern, Yes, 40.817923, -73.045317, 25, 36, 103, Northeast, Middle Atlantic, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0, 1, 1, 2, 0, 0, 0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35620
544, Holtsville, NY, No, Unique Post Office, Irs Service Center, Eastern, Yes, 40.788827, -73.039405, 25, 36, 103, Northeast, Middle Atlantic, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35620
601, Adjuntas, PR, No, Post Office, None, Atlantic, No, 18.196747, -66.736735, 0, 72, 1, None, None, 11737, 18570, 6525, 86200, 13092, 2.84, 17479, 663, 18486, 7, 113, 10, 558, 9078, 9492, 35.9, 34.5, 37.1, 4133, 221, 5173, 0, 0, 0, 0, 0.309, 64.348, 2419, 1264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38660

CREATE TABLE `congress` (
  cognress_rep_id TEXT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  CID TEXT,
  party TEXT,
  state TEXT,
  abbreviation TEXT REFERENCES state(abbreviation),
  House TEXT,
  District INTEGER,
  land_area REAL
);
Sample rows from `congress`:
AK, Young, Don, N00008091, Republican, Alaska, AK, House of Repsentatives, None, 571951.26
AK-S1, Begich, Mark, N00009585, Democrat, Alaska, AK, Senate, None, 570641.0
AK-S2, Murkowski, Lisa, N00033101, Republican, Alaska, AK, Senate, None, 570641.0

","CREATE TABLE `CBSA` (
  CBSA INTEGER,
  CBSA_name TEXT,
  CBSA_type TEXT
);
Sample rows from `CBSA`:
10300, Adrian, MI, Micro
10380, Aguadilla-Isabela, PR, Metro
10420, Akron, OH, Metro

CREATE TABLE `state` (
  abbreviation TEXT PRIMARY KEY,
  name TEXT
);
Sample rows from `state`:
AA, Armed Forces Americas
AE, Armed Forces Europe
AK, Alaska

CREATE TABLE `congress` (
  cognress_rep_id TEXT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  CID TEXT,
  party TEXT,
  state TEXT,
  abbreviation TEXT REFERENCES state(abbreviation),
  House TEXT,
  District INTEGER,
  land_area REAL
);
Sample rows from `congress`:
AK, Young, Don, N00008091, Republican, Alaska, AK, House of Repsentatives, None, 571951.26
AK-S1, Begich, Mark, N00009585, Democrat, Alaska, AK, Senate, None, 570641.0
AK-S2, Murkowski, Lisa, N00033101, Republican, Alaska, AK, Senate, None, 570641.0

CREATE TABLE `zip_data` (
  zip_code INTEGER,
  city TEXT,
  state TEXT REFERENCES state(abbreviation),
  multi_county TEXT,
  type TEXT,
  organization TEXT,
  time_zone TEXT,
  daylight_savings TEXT,
  latitude REAL,
  longitude REAL,
  elevation INTEGER,
  state_fips INTEGER,
  county_fips INTEGER,
  region TEXT,
  division TEXT,
  population_2020 INTEGER,
  population_2010 INTEGER,
  households INTEGER,
  avg_house_value INTEGER,
  avg_income_per_household INTEGER,
  persons_per_household REAL,
  white_population INTEGER,
  black_population INTEGER,
  hispanic_population INTEGER,
  asian_population INTEGER,
  american_indian_population INTEGER,
  hawaiian_population INTEGER,
  other_population INTEGER,
  male_population INTEGER,
  female_population INTEGER,
  median_age REAL,
  male_median_age REAL,
  female_median_age REAL,
  residential_mailboxes INTEGER,
  business_mailboxes INTEGER,
  total_delivery_receptacles INTEGER,
  businesses INTEGER,
  1st_quarter_payroll INTEGER,
  annual_payroll INTEGER,
  employees INTEGER,
  water_area REAL,
  land_area REAL,
  single_family_delivery_units INTEGER,
  multi_family_delivery_units INTEGER,
  total_beneficiaries INTEGER,
  retired_workers INTEGER,
  disabled_workers INTEGER,
  parents_and_widowed INTEGER,
  spouses INTEGER,
  children INTEGER,
  over_65 INTEGER,
  monthly_benefits_all INTEGER,
  monthly_benefits_retired_workers INTEGER,
  monthly_benefits_widowed INTEGER,
  CBSA INTEGER REFERENCES CBSA(CBSA)
);
Sample rows from `zip_data`:
501, Holtsville, NY, No, Unique Post Office, I R S Service Center, Eastern, Yes, 40.817923, -73.045317, 25, 36, 103, Northeast, Middle Atlantic, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0, 1, 1, 2, 0, 0, 0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35620
544, Holtsville, NY, No, Unique Post Office, Irs Service Center, Eastern, Yes, 40.788827, -73.039405, 25, 36, 103, Northeast, Middle Atlantic, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35620
601, Adjuntas, PR, No, Post Office, None, Atlantic, No, 18.196747, -66.736735, 0, 72, 1, None, None, 11737, 18570, 6525, 86200, 13092, 2.84, 17479, 663, 18486, 7, 113, 10, 558, 9078, 9492, 35.9, 34.5, 37.1, 4133, 221, 5173, 0, 0, 0, 0, 0.309, 64.348, 2419, 1264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38660

CREATE TABLE `alias` (
  zip_code INTEGER REFERENCES zip_data(zip_code),
  alias TEXT
);
Sample rows from `alias`:
501, Holtsville
544, Holtsville
601, Adjuntas

CREATE TABLE `area_code` (
  zip_code INTEGER PRIMARY KEY REFERENCES zip_data(zip_code),
  area_code INTEGER PRIMARY KEY
);
Sample rows from `area_code`:
501, 631
544, 631
601, 787

CREATE TABLE `avoid` (
  zip_code INTEGER PRIMARY KEY REFERENCES zip_data(zip_code),
  bad_alias TEXT PRIMARY KEY
);
Sample rows from `avoid`:
501, Internal Revenue Service
544, Internal Revenue Service
601, Colinas Del Gigante

CREATE TABLE `country` (
  zip_code INTEGER PRIMARY KEY REFERENCES zip_data(zip_code),
  county TEXT PRIMARY KEY,
  state TEXT REFERENCES state(abbreviation)
);
Sample rows from `country`:
501, SUFFOLK, NY
544, SUFFOLK, NY
601, ADJUNTAS, PR

CREATE TABLE `zip_congress` (
  zip_code INTEGER PRIMARY KEY REFERENCES zip_data(zip_code),
  district TEXT PRIMARY KEY REFERENCES congress(cognress_rep_id)
);
Sample rows from `zip_congress`:
501, NY-1
601, PR
602, PR

","zip_data, congress","zip_data.state, congress.first_name, congress.last_name, congress.abbreviation, zip_data.asian_population"
donor,List the primary subject of all the donations with a corporate sponsored giftcard.,SELECT DISTINCT t2.primary_focus_subject FROM donations as t1 inner JOIN projects as t2 ON t1.projectid = t2.projectid WHERE t1.payment_included_campaign_gift_card = 't',"CREATE TABLE `donations` (
  donationid TEXT PRIMARY KEY,
  projectid TEXT REFERENCES projects(projectid),
  donor_acctid TEXT,
  donor_city TEXT,
  donor_state TEXT,
  donor_zip TEXT,
  is_teacher_acct TEXT,
  donation_timestamp DATETIME,
  donation_to_project REAL,
  donation_optional_support REAL,
  donation_total REAL,
  dollar_amount TEXT,
  donation_included_optional_support TEXT,
  payment_method TEXT,
  payment_included_acct_credit TEXT,
  payment_included_campaign_gift_card TEXT,
  payment_included_web_purchased_gift_card TEXT,
  payment_was_promo_matched TEXT,
  via_giving_page TEXT,
  for_honoree TEXT,
  donation_message TEXT
);
Sample rows from `donations`:
431d720bc3dfd75ae445a5eaa0b0638d, ffffac55ee02a49d1abc87ba6fc61135, 22cbc920c9b5fa08dfb331422f5926b5, Peachtree City, GA, 30269, f, 2011-08-25 14:27:34.807, 42.5, 7.5, 50.0, 10_to_100, t, no_cash_received, f, t, f, f, f, f, I gave to this project because I support the efforts of this teacher with each of her students, and her school, Suder Elementary School.
fcfedba1c8a0ba77d280cace80a909f6, ffffac55ee02a49d1abc87ba6fc61135, 521f1830a77c9dbbf8119d99c6206a16, None, GA, None, f, 2011-11-04 07:54:21.552, 26.83, 4.73, 31.56, 10_to_100, t, creditcard, f, t, f, f, f, f, I donated because I want to support kids in Georgia.
3fa95d29986aa6f401c6719ced3a3ce7, ffffac55ee02a49d1abc87ba6fc61135, 1e0a63fc8141c7ba26b8b44ca0871b90, Rockville, MD, 20853, f, 2011-11-02 22:53:53.019, 55.35, 0.0, 55.35, 10_to_100, f, no_cash_received, t, f, f, f, t, f, The Spark's 'pet' projects include those which support deaf students.  With just a few days left, the Spark's donors fund half of what remains, and challenge others to pull this project through to fruition.

CREATE TABLE `projects` (
  projectid TEXT PRIMARY KEY,
  teacher_acctid TEXT,
  schoolid TEXT,
  school_ncesid TEXT,
  school_latitude REAL,
  school_longitude REAL,
  school_city TEXT,
  school_state TEXT,
  school_zip INTEGER,
  school_metro TEXT,
  school_district TEXT,
  school_county TEXT,
  school_charter TEXT,
  school_magnet TEXT,
  school_year_round TEXT,
  school_nlns TEXT,
  school_kipp TEXT,
  school_charter_ready_promise TEXT,
  teacher_prefix TEXT,
  teacher_teach_for_america TEXT,
  teacher_ny_teaching_fellow TEXT,
  primary_focus_subject TEXT,
  primary_focus_area TEXT,
  secondary_focus_subject TEXT,
  secondary_focus_area TEXT,
  resource_type TEXT,
  poverty_level TEXT,
  grade_level TEXT,
  fulfillment_labor_materials REAL,
  total_price_excluding_optional_support REAL,
  total_price_including_optional_support REAL,
  students_reached INTEGER,
  eligible_double_your_impact_match TEXT,
  eligible_almost_home_match TEXT,
  date_posted DATE
);
Sample rows from `projects`:
316ed8fb3b81402ff6ac8f721bb31192, 42d43fa6f37314365d08692e08680973, c0e6ce89b244764085691a1b8e28cb81, 063627006187, 36.57634, -119.608713, Selma, CA, 93662, None, Selma Unified Sch District, Fresno, f, f, f, f, f, f, Mrs., f, f, Literature & Writing, Literacy & Language, College & Career Prep, Applied Learning, Books, highest poverty, Grades 6-8, 30.0, 555.81, 653.89, 32, f, f, 2014-05-12
90de744e368a7e4883223ca49318ae30, 864eb466462bf704bf7a16a585ef296a, d711e47810900c96f26a5d0be30c446d, 483702008193, 32.911179, -96.72364, Dallas, TX, 75243, urban, Richardson Ind School District, Dallas, f, f, f, f, f, f, Mrs., f, f, Literacy, Literacy & Language, ESL, Literacy & Language, Books, highest poverty, Grades PreK-2, 30.0, 296.47, 348.79, 22, f, f, 2014-05-12
32943bb1063267de6ed19fc0ceb4b9a7, 37f85135259ece793213aca9d8765542, 665c3613013ba0a66e3a2a26b89f1b68, 410327000109, 45.166039, -122.414576, Colton, OR, 97017, rural, Colton School District 53, Clackamas, f, f, f, f, f, f, Mr., f, f, Literacy, Literacy & Language, Mathematics, Math & Science, Technology, high poverty, Grades PreK-2, 30.0, 430.89, 506.93, 17, f, f, 2014-05-11

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `essays` (
  projectid TEXT,
  teacher_acctid TEXT,
  title TEXT,
  short_description TEXT,
  need_statement TEXT,
  essay TEXT
);
Sample rows from `essays`:
ffffc4f85b60efc5b52347df489d0238, c24011b20fc161ed02248e85beb59a90, iMath, It is imperative that teachers bring technology into the classroom, if students are going to be able to survive in the 21st Century. The classroom needs to be ever changing along with the outside world. The iMath project will help students by obtaining cl, My students need four iPods., I am a fourth year fifth grade math teacher. The school I teach in is a fifth and sixth grade public school and is a Title One school which means that 95% of our students get free lunch. Presently, I am in the process of completing a Masters degree in Tec
ffffac55ee02a49d1abc87ba6fc61135, 947066d0af47e0566f334566553dd6a6, Recording Rockin' Readers, Can you imagine having to translate everything you read into sign language and relate it to what you already know? Help us do just that by giving us the camera that will record our stories and..., My students need a camcorder. , Can you imagine having to translate everything you read into sign language and relate it to what you already know? Help us do just that by giving us the camera that will record our stories and interpretations! 
\n
\nMy students are all deaf or hard of hea
ffff97ed93720407d70a2787475932b0, 462270f5d5c212162fcab11afa2623cb, Kindergarten In Need of Important Materials!, It takes a special person to donate to a group of children they don't know, especially in these hard economic times, but my students are worth it.  They deserve to have the proper supplies to ensure that their long education gets off to the right start, s, My students need 17 assorted classroom materials to ensure that they can learn as much as possible this year., Hi. I teach a wonderful group of 4-5 year old Kindergarten students.  They come in wanting and willing to learn new and exciting things each and every day. I work hard to ensure that my students get the most out of the entire school year. 
\n
\nFor the mo

CREATE TABLE `projects` (
  projectid TEXT PRIMARY KEY,
  teacher_acctid TEXT,
  schoolid TEXT,
  school_ncesid TEXT,
  school_latitude REAL,
  school_longitude REAL,
  school_city TEXT,
  school_state TEXT,
  school_zip INTEGER,
  school_metro TEXT,
  school_district TEXT,
  school_county TEXT,
  school_charter TEXT,
  school_magnet TEXT,
  school_year_round TEXT,
  school_nlns TEXT,
  school_kipp TEXT,
  school_charter_ready_promise TEXT,
  teacher_prefix TEXT,
  teacher_teach_for_america TEXT,
  teacher_ny_teaching_fellow TEXT,
  primary_focus_subject TEXT,
  primary_focus_area TEXT,
  secondary_focus_subject TEXT,
  secondary_focus_area TEXT,
  resource_type TEXT,
  poverty_level TEXT,
  grade_level TEXT,
  fulfillment_labor_materials REAL,
  total_price_excluding_optional_support REAL,
  total_price_including_optional_support REAL,
  students_reached INTEGER,
  eligible_double_your_impact_match TEXT,
  eligible_almost_home_match TEXT,
  date_posted DATE
);
Sample rows from `projects`:
316ed8fb3b81402ff6ac8f721bb31192, 42d43fa6f37314365d08692e08680973, c0e6ce89b244764085691a1b8e28cb81, 063627006187, 36.57634, -119.608713, Selma, CA, 93662, None, Selma Unified Sch District, Fresno, f, f, f, f, f, f, Mrs., f, f, Literature & Writing, Literacy & Language, College & Career Prep, Applied Learning, Books, highest poverty, Grades 6-8, 30.0, 555.81, 653.89, 32, f, f, 2014-05-12
90de744e368a7e4883223ca49318ae30, 864eb466462bf704bf7a16a585ef296a, d711e47810900c96f26a5d0be30c446d, 483702008193, 32.911179, -96.72364, Dallas, TX, 75243, urban, Richardson Ind School District, Dallas, f, f, f, f, f, f, Mrs., f, f, Literacy, Literacy & Language, ESL, Literacy & Language, Books, highest poverty, Grades PreK-2, 30.0, 296.47, 348.79, 22, f, f, 2014-05-12
32943bb1063267de6ed19fc0ceb4b9a7, 37f85135259ece793213aca9d8765542, 665c3613013ba0a66e3a2a26b89f1b68, 410327000109, 45.166039, -122.414576, Colton, OR, 97017, rural, Colton School District 53, Clackamas, f, f, f, f, f, f, Mr., f, f, Literacy, Literacy & Language, Mathematics, Math & Science, Technology, high poverty, Grades PreK-2, 30.0, 430.89, 506.93, 17, f, f, 2014-05-11

CREATE TABLE `donations` (
  donationid TEXT PRIMARY KEY,
  projectid TEXT REFERENCES projects(projectid),
  donor_acctid TEXT,
  donor_city TEXT,
  donor_state TEXT,
  donor_zip TEXT,
  is_teacher_acct TEXT,
  donation_timestamp DATETIME,
  donation_to_project REAL,
  donation_optional_support REAL,
  donation_total REAL,
  dollar_amount TEXT,
  donation_included_optional_support TEXT,
  payment_method TEXT,
  payment_included_acct_credit TEXT,
  payment_included_campaign_gift_card TEXT,
  payment_included_web_purchased_gift_card TEXT,
  payment_was_promo_matched TEXT,
  via_giving_page TEXT,
  for_honoree TEXT,
  donation_message TEXT
);
Sample rows from `donations`:
431d720bc3dfd75ae445a5eaa0b0638d, ffffac55ee02a49d1abc87ba6fc61135, 22cbc920c9b5fa08dfb331422f5926b5, Peachtree City, GA, 30269, f, 2011-08-25 14:27:34.807, 42.5, 7.5, 50.0, 10_to_100, t, no_cash_received, f, t, f, f, f, f, I gave to this project because I support the efforts of this teacher with each of her students, and her school, Suder Elementary School.
fcfedba1c8a0ba77d280cace80a909f6, ffffac55ee02a49d1abc87ba6fc61135, 521f1830a77c9dbbf8119d99c6206a16, None, GA, None, f, 2011-11-04 07:54:21.552, 26.83, 4.73, 31.56, 10_to_100, t, creditcard, f, t, f, f, f, f, I donated because I want to support kids in Georgia.
3fa95d29986aa6f401c6719ced3a3ce7, ffffac55ee02a49d1abc87ba6fc61135, 1e0a63fc8141c7ba26b8b44ca0871b90, Rockville, MD, 20853, f, 2011-11-02 22:53:53.019, 55.35, 0.0, 55.35, 10_to_100, f, no_cash_received, t, f, f, f, t, f, The Spark's 'pet' projects include those which support deaf students.  With just a few days left, the Spark's donors fund half of what remains, and challenge others to pull this project through to fruition.

CREATE TABLE `resources` (
  resourceid TEXT PRIMARY KEY,
  projectid TEXT REFERENCES projects(projectid),
  vendorid INTEGER,
  vendor_name TEXT,
  project_resource_type TEXT,
  item_name TEXT,
  item_number TEXT,
  item_unit_price REAL,
  item_quantity INTEGER
);
Sample rows from `resources`:
8a1c1c45bc30d065061912fd9114fcf3, ffffc4f85b60efc5b52347df489d0238, 430, Woodwind and Brasswind, Technology, iPod nano 4th Gen 8GB (Black), 249995.001, 149.0, 4
015d2c4935c50427964a12dc3f584091, ffffac55ee02a49d1abc87ba6fc61135, 82, Best Buy for Business, Technology, Sony bloggie MHS-FS1 - camcorder - internal flash memory, BB11216668, 148.0, 1
26a02944b2f0c25f9abdeacca3ede3ee, ffff97ed93720407d70a2787475932b0, 767, Lakeshore Learning Materials, Supplies, VX748 - Best-Buy Jumbo Crayons - 12-Color Box, VX748, 69.95, 1

","donations, projects","projects.primary_focus_subject, donations.projectid, projects.projectid, donations.payment_included_campaign_gift_card"
law_episode,What are the keywords of the episode which received the 2nd-highest number of votes?,SELECT t2.keyword FROM episode as t1 inner JOIN keyword as t2 ON t1.episode_id = t2.episode_id WHERE t1.votes NOT IN ( SELECT MAX(t1.votes) FROM episode as t1 inner JOIN keyword as t2 ON t1.episode_id = t2.episode_id ) ORDER BY t1.votes DESC LIMIT 1,"CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `keyword`:
tt0629239, nun
tt0629239, priest
tt0629420, police officer

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
tt0629239, nun
tt0629239, priest
tt0629420, police officer

CREATE TABLE `Person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  series TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  person_id TEXT REFERENCES Person(person_id),
  role TEXT,
  result TEXT
);
Sample rows from `Award`:
258, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0937725, None, Winner
259, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0792309, None, Winner
260, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0049569, None, Winner

CREATE TABLE `Credit` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  person_id TEXT PRIMARY KEY REFERENCES Person(person_id),
  category TEXT,
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
tt0629204, nm0226352, Additional Crew, technical advisor, true
tt0629204, nm0506974, Additional Crew, production accountant, true
tt0629204, nm4103116, Additional Crew, production accountant, true

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
tt0629204, 10, 36, 17.7
tt0629204, 9, 39, 19.2
tt0629204, 8, 64, 31.5

","episode, keyword","keyword.keyword, episode.episode_id, keyword.episode_id, episode.votes"
video_games,"In 2004, what are the names of the platforms where Codemasters publish its games?",SELECT t4.platform_name FROM publisher as t1 inner JOIN game_publisher as t2 ON t1.id = t2.publisher_id inner JOIN game_platform as t3 ON t2.id = t3.game_publisher_id inner JOIN platform as t4 ON t3.platform_id = t4.id WHERE t3.release_year = 2004 AND t1.publisher_name = 'Codemasters',"CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

","CREATE TABLE `genre` (
  id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
1, Action
2, Adventure
3, Fighting

CREATE TABLE `game` (
  id INTEGER,
  genre_id INTEGER REFERENCES genre(id),
  game_name TEXT
);
Sample rows from `game`:
44, 4, 2 Games in 1: Sonic Advance & ChuChu Rocket!
45, 4, 2 Games in 1: Sonic Battle & ChuChu Rocket!
46, 4, 2 Games in 1: Sonic Pinball Party & Columns Crown

CREATE TABLE `platform` (
  id INTEGER,
  platform_name TEXT
);
Sample rows from `platform`:
1, Wii
2, NES
3, GB

CREATE TABLE `publisher` (
  id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10TACLE Studios
2, 1C Company
3, 20th Century Fox Video Games

CREATE TABLE `game_publisher` (
  id INTEGER,
  game_id INTEGER REFERENCES game(id),
  publisher_id INTEGER REFERENCES publisher(id)
);
Sample rows from `game_publisher`:
1, 10866, 369
2, 9244, 369
3, 5464, 369

CREATE TABLE `game_platform` (
  id INTEGER,
  game_publisher_id INTEGER REFERENCES game_publisher(id),
  platform_id INTEGER REFERENCES platform(id),
  release_year INTEGER
);
Sample rows from `game_platform`:
1, 8564, 4, 2007
2, 9852, 4, 2007
3, 11063, 7, 2006

CREATE TABLE `region` (
  id INTEGER,
  region_name TEXT
);
Sample rows from `region`:
1, North America
2, Europe
3, Japan

CREATE TABLE `region_sales` (
  region_id INTEGER REFERENCES region(id),
  game_platform_id INTEGER REFERENCES game_platform(id),
  num_sales REAL
);
Sample rows from `region_sales`:
1, 50, 3.5
1, 51, 1.43
1, 52, 0.51

","publisher, game_publisher, game_platform, platform","platform.platform_name, publisher.id, game_publisher.publisher_id, game_publisher.id, game_platform.game_publisher_id, game_platform.platform_id, platform.id, game_platform.release_year, publisher.publisher_name"
soccer_2016,In what percentage of games played at the Dr DY Patil Sports Academy venue did the winning team win by a margin of less than 10?,SELECT cast(COUNT(case when t2.win_margin < 10 then 1 else 0 end) as real) * 100 / total(t1.venue_id) FROM venue as t1 inner JOIN match as t2 ON t1.venue_id = t2.venue_id WHERE t1.venue_Name = 'Dr DY Patil Sports Academy',"CREATE TABLE `venue` (
  Venue_Id INTEGER,
  Venue_Name TEXT,
  City_Id INTEGER REFERENCES City(City_Id)
);
Sample rows from `venue`:
1, M Chinnaswamy Stadium, 1
2, Punjab Cricket Association Stadium, 2
3, Feroz Shah Kotla, 3

CREATE TABLE `match` (
  Match_Id INTEGER,
  Team_1 INTEGER REFERENCES Team(Team_Id),
  Team_2 INTEGER REFERENCES Team(Team_Id),
  Match_Date DATE,
  Season_Id INTEGER REFERENCES Season(Season_Id),
  Venue_Id INTEGER REFERENCES Venue(Venue_Id),
  Toss_Winner INTEGER REFERENCES Team(Team_Id),
  Toss_Decide INTEGER REFERENCES Toss_Decision(Toss_Id),
  Win_Type INTEGER REFERENCES Win_By(Win_Id),
  Win_Margin INTEGER,
  Outcome_type INTEGER REFERENCES Out_Type(Out_Id),
  Match_Winner INTEGER REFERENCES Team(Team_Id),
  Man_of_the_Match INTEGER REFERENCES Player(Player_Id)
);
Sample rows from `match`:
335987, 2, 1, 2008-04-18, 1, 1, 2, 1, 1, 140, 1, 1, 2
335988, 4, 3, 2008-04-19, 1, 2, 3, 2, 1, 33, 1, 3, 19
335989, 6, 5, 2008-04-19, 1, 3, 5, 2, 2, 9, 1, 6, 90

","CREATE TABLE `Batting_Style` (
  Batting_Id INTEGER,
  Batting_hand TEXT
);
Sample rows from `Batting_Style`:
1, Left-hand bat
2, Right-hand bat

CREATE TABLE `Bowling_Style` (
  Bowling_Id INTEGER,
  Bowling_skill TEXT
);
Sample rows from `Bowling_Style`:
1, Right-arm medium
2, Right-arm offbreak
3, Right-arm fast-medium

CREATE TABLE `City` (
  City_Id INTEGER,
  City_Name TEXT,
  Country_id INTEGER
);
Sample rows from `City`:
1, Bangalore, 1
2, Chandigarh, 1
3, Delhi, 1

CREATE TABLE `Country` (
  Country_Id INTEGER REFERENCES Country(Country_Id),
  Country_Name TEXT
);
Sample rows from `Country`:
1, India
2, South Africa
3, U.A.E

CREATE TABLE `Extra_Type` (
  Extra_Id INTEGER,
  Extra_Name TEXT
);
Sample rows from `Extra_Type`:
1, legbyes
2, wides
3, byes

CREATE TABLE `Extra_Runs` (
  Match_Id INTEGER PRIMARY KEY,
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Extra_Type_Id INTEGER REFERENCES Extra_Type(Extra_Id),
  Extra_Runs INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Extra_Runs`:
335987, 1, 1, 1, 1, 1
335987, 1, 2, 2, 1, 2
335987, 1, 3, 2, 1, 1

CREATE TABLE `Out_Type` (
  Out_Id INTEGER,
  Out_Name TEXT
);
Sample rows from `Out_Type`:
1, caught
2, bowled
3, run out

CREATE TABLE `Outcome` (
  Outcome_Id INTEGER,
  Outcome_Type TEXT
);
Sample rows from `Outcome`:
1, Result
2, No Result
3, Superover

CREATE TABLE `Player` (
  Player_Id INTEGER,
  Player_Name TEXT,
  DOB DATE,
  Batting_hand INTEGER REFERENCES Batting_Style(Batting_Id),
  Bowling_skill INTEGER REFERENCES Bowling_Style(Bowling_Id),
  Country_Name INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Player`:
1, SC Ganguly, 1972-07-08, 1, 1, 1
2, BB McCullum, 1981-09-27, 2, 1, 4
3, RT Ponting, 1974-12-19, 2, 1, 5

CREATE TABLE `Rolee` (
  Role_Id INTEGER,
  Role_Desc TEXT
);
Sample rows from `Rolee`:
1, Captain
2, Keeper
3, Player

CREATE TABLE `Season` (
  Season_Id INTEGER,
  Man_of_the_Series INTEGER,
  Orange_Cap INTEGER,
  Purple_Cap INTEGER,
  Season_Year INTEGER
);
Sample rows from `Season`:
1, 32, 100, 102, 2008
2, 53, 18, 61, 2009
3, 133, 133, 131, 2010

CREATE TABLE `Team` (
  Team_Id INTEGER,
  Team_Name TEXT
);
Sample rows from `Team`:
1, Kolkata Knight Riders
2, Royal Challengers Bangalore
3, Chennai Super Kings

CREATE TABLE `Toss_Decision` (
  Toss_Id INTEGER,
  Toss_Name TEXT
);
Sample rows from `Toss_Decision`:
1, field
2, bat

CREATE TABLE `Umpire` (
  Umpire_Id INTEGER,
  Umpire_Name TEXT,
  Umpire_Country INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Umpire`:
1, Asad Rauf, 6
2, MR Benson, 10
3, Aleem Dar, 6

CREATE TABLE `Venue` (
  Venue_Id INTEGER,
  Venue_Name TEXT,
  City_Id INTEGER REFERENCES City(City_Id)
);
Sample rows from `Venue`:
1, M Chinnaswamy Stadium, 1
2, Punjab Cricket Association Stadium, 2
3, Feroz Shah Kotla, 3

CREATE TABLE `Win_By` (
  Win_Id INTEGER,
  Win_Type TEXT
);
Sample rows from `Win_By`:
1, runs
2, wickets
3, NO Result

CREATE TABLE `Match` (
  Match_Id INTEGER,
  Team_1 INTEGER REFERENCES Team(Team_Id),
  Team_2 INTEGER REFERENCES Team(Team_Id),
  Match_Date DATE,
  Season_Id INTEGER REFERENCES Season(Season_Id),
  Venue_Id INTEGER REFERENCES Venue(Venue_Id),
  Toss_Winner INTEGER REFERENCES Team(Team_Id),
  Toss_Decide INTEGER REFERENCES Toss_Decision(Toss_Id),
  Win_Type INTEGER REFERENCES Win_By(Win_Id),
  Win_Margin INTEGER,
  Outcome_type INTEGER REFERENCES Out_Type(Out_Id),
  Match_Winner INTEGER REFERENCES Team(Team_Id),
  Man_of_the_Match INTEGER REFERENCES Player(Player_Id)
);
Sample rows from `Match`:
335987, 2, 1, 2008-04-18, 1, 1, 2, 1, 1, 140, 1, 1, 2
335988, 4, 3, 2008-04-19, 1, 2, 3, 2, 1, 33, 1, 3, 19
335989, 6, 5, 2008-04-19, 1, 3, 5, 2, 2, 9, 1, 6, 90

CREATE TABLE `Ball_by_Ball` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Innings_No INTEGER PRIMARY KEY,
  Team_Batting INTEGER,
  Team_Bowling INTEGER,
  Striker_Batting_Position INTEGER,
  Striker INTEGER,
  Non_Striker INTEGER,
  Bowler INTEGER
);
Sample rows from `Ball_by_Ball`:
335987, 1, 1, 1, 1, 2, 1, 1, 2, 14
335987, 1, 1, 2, 2, 1, 1, 6, 7, 106
335987, 1, 2, 1, 1, 2, 2, 2, 1, 14

CREATE TABLE `Batsman_Scored` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Runs_Scored INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Batsman_Scored`:
335987, 1, 1, 0, 1
335987, 1, 1, 1, 2
335987, 1, 2, 0, 1

CREATE TABLE `Player_Match` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Player_Id INTEGER PRIMARY KEY REFERENCES Player(Player_Id),
  Role_Id INTEGER PRIMARY KEY REFERENCES Rolee(Role_Id),
  Team_Id INTEGER REFERENCES Team(Team_Id)
);
Sample rows from `Player_Match`:
335987, 1, 1, 1
335987, 2, 3, 1
335987, 3, 3, 1

CREATE TABLE `Wicket_Taken` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Player_Out INTEGER REFERENCES Player(Player_Id),
  Kind_Out INTEGER REFERENCES Out_Type(Out_Id),
  Fielders INTEGER REFERENCES Player(Player_Id),
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Wicket_Taken`:
335987, 2, 1, 6, 2, None, 2
335987, 3, 2, 8, 2, None, 2
335987, 5, 5, 9, 1, 83, 2

","venue, match","match.win_margin, venue.venue_id, match.venue_id, venue.venue_Name"
simpson_episodes,How many WGA Award (TV) award recipients were born in the USA from 2009 to 2010?,SELECT COUNT(*) FROM person as t1 inner JOIN award as t2 ON t1.name = t2.person WHERE t2.award_category = 'WGA award (TV)' AND t1.birth_country = 'USA' AND t2.year BETWEEN 2009 AND 2010;,"CREATE TABLE `person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

","person, award","person.name, award.person, award.award_category, person.birth_country, award.year"
trains,Please list the directions in which the trains with 4 short cars run.,SELECT t2.direction FROM cars as t1 inner JOIN trains as t2 ON t1.train_id = t2.id WHERE t1.len = 'short' AND t1.position = 4,"CREATE TABLE `cars` (
  id INTEGER,
  train_id INTEGER REFERENCES trains(id),
  position INTEGER,
  shape TEXT,
  len TEXT,
  sides TEXT,
  roof TEXT,
  wheels INTEGER,
  load_shape TEXT,
  load_num INTEGER
);
Sample rows from `cars`:
1, 1, 1, rectangle, short, not_double, none, 2, circle, 1
2, 1, 2, rectangle, long, not_double, none, 3, hexagon, 1
3, 1, 3, rectangle, short, not_double, peaked, 2, triangle, 1

CREATE TABLE `trains` (
  id INTEGER,
  direction TEXT
);
Sample rows from `trains`:
1, east
2, east
3, east

","CREATE TABLE `cars` (
  id INTEGER,
  train_id INTEGER REFERENCES trains(id),
  position INTEGER,
  shape TEXT,
  len TEXT,
  sides TEXT,
  roof TEXT,
  wheels INTEGER,
  load_shape TEXT,
  load_num INTEGER
);
Sample rows from `cars`:
1, 1, 1, rectangle, short, not_double, none, 2, circle, 1
2, 1, 2, rectangle, long, not_double, none, 3, hexagon, 1
3, 1, 3, rectangle, short, not_double, peaked, 2, triangle, 1

CREATE TABLE `trains` (
  id INTEGER,
  direction TEXT
);
Sample rows from `trains`:
1, east
2, east
3, east

","cars, trains","trains.direction, cars.train_id, trains.id, cars.len, cars.position"
image_and_language,Give the bounding box of the kite in image no.2324765.,"SELECT t2.x, t2.y, t2.w, t2.h FROM obj_classes as t1 inner JOIN img_obj as t2 ON t1.OBJ_CLasS_ID = t2.OBJ_CLasS_ID whERE t2.img_id = 2324765 AND t1.OBJ_CLasS = 'kite'","CREATE TABLE `obj_classes` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `obj_classes`:
0, awning
1, goggles
2, dot

CREATE TABLE `img_obj` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `img_obj`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

","CREATE TABLE `ATT_CLASSES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `ATT_CLASSES`:
0, building s
1, indoors
2, cluttered

CREATE TABLE `OBJ_CLASSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLASSES`:
0, awning
1, goggles
2, dot

CREATE TABLE `IMG_OBJ` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `IMG_OBJ`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `IMG_OBJ_ATT` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_OBJ_ATT`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `PRED_CLASSES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `PRED_CLASSES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `IMG_REL` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_REL`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

","obj_classes, img_obj","img_obj.x, img_obj.y, img_obj.w, img_obj.h, obj_classes.OBJ_CLasS_ID, img_obj.OBJ_CLasS_ID, img_obj.img_id, obj_classes.OBJ_CLasS"
law_episode,"How many winners have been awarded a Television award by the ""American Bar Association Silver Gavel Awards for Media and the Arts""?",SELECT COUNT(award_id) FROM award WHERE result = 'Winner' AND award = 'Television' AND organization = 'American Bar Association Silver Gavel awards for Media and the Arts',"CREATE TABLE `award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  series TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  person_id TEXT REFERENCES Person(person_id),
  role TEXT,
  result TEXT
);
Sample rows from `award`:
258, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0937725, None, Winner
259, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0792309, None, Winner
260, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0049569, None, Winner

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  series TEXT,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date DATE,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
tt0629204, Law and Order, 9, 1, 182, Cherished, New assistant DA Abbie Carmichael aggressively investigates an infant's death and helps uncover a conspiracy involving a Russian adoption agency, gravely ill children, and an unethical doctor., 1998-09-23, https://m.media-amazon.com/images/M/MV5BODFmZmI2YTgtN2Y2Mi00ODA1LThjOTAtOTAzZWFmMTgyMjJjXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR7,0,224,126_AL_.jpg, 7.9, 203
tt0629228, Law and Order, 9, 2, 183, DWB, White police officers are accused of beating and dragging an African American man to his death. McCoy tries to prosecute while facing pressure from Federal prosecutors, who want to make a deal with one of the guilty parties., 1998-10-07, https://m.media-amazon.com/images/M/MV5BNWEyM2NkZjktN2YwOS00ODMyLWI1NzItYjRlYWQ1NjU2Yzc3XkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR3,0,224,126_AL_.jpg, 7.9, 177
tt0629170, Law and Order, 9, 3, 184, Bait, A teenager who was shot in a drug deal gone bad claims to have been coerced into working as an informant for a corrupt narcotics officer., 1998-10-14, https://m.media-amazon.com/images/M/MV5BYzI5ZDU4NzUtYzE0My00MTE5LWE1NzItNzU5MzI3NGMxYzAwXkEyXkFqcGdeQXVyMjMzNzMxMTA@._V1_UY126_CR2,0,224,126_AL_.jpg, 7.6, 159

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
tt0629239, nun
tt0629239, priest
tt0629420, police officer

CREATE TABLE `Person` (
  person_id TEXT PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
nm0000210, Julia Roberts, 1967-10-28, Julia Fiona Roberts, Smyrna, Georgia, USA, 1.73, Jules
nm0049569, Rene Balcer, 1954-02-09, Rene Chenevert Balcer, Montreal, Quebec, Canada, None, None
nm0288886, Billy Fox, None, None, None, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  series TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  person_id TEXT REFERENCES Person(person_id),
  role TEXT,
  result TEXT
);
Sample rows from `Award`:
258, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0937725, None, Winner
259, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0792309, None, Winner
260, International Monitor Awards, 1999, Monitor, Film Originated Television Series - Best Achievement, Law and Order, tt0629149, nm0049569, None, Winner

CREATE TABLE `Credit` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  person_id TEXT PRIMARY KEY REFERENCES Person(person_id),
  category TEXT,
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
tt0629204, nm0226352, Additional Crew, technical advisor, true
tt0629204, nm0506974, Additional Crew, production accountant, true
tt0629204, nm4103116, Additional Crew, production accountant, true

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
tt0629204, 10, 36, 17.7
tt0629204, 9, 39, 19.2
tt0629204, 8, 64, 31.5

",award,"award_id, award"
soccer_2016,What is the name of the team that won the most number of matches in season 1?,SELECT team_name FROM team WHERE team_Id = ( SELECT match_winner FROM `match` WHERE season_id = 1 GROUP BY match_winner ORDER BY COUNT(match_winner) DESC LIMIT 1 ),"CREATE TABLE `team` (
  Team_Id INTEGER,
  Team_Name TEXT
);
Sample rows from `team`:
1, Kolkata Knight Riders
2, Royal Challengers Bangalore
3, Chennai Super Kings

CREATE TABLE `match` (
  Match_Id INTEGER,
  Team_1 INTEGER REFERENCES Team(Team_Id),
  Team_2 INTEGER REFERENCES Team(Team_Id),
  Match_Date DATE,
  Season_Id INTEGER REFERENCES Season(Season_Id),
  Venue_Id INTEGER REFERENCES Venue(Venue_Id),
  Toss_Winner INTEGER REFERENCES Team(Team_Id),
  Toss_Decide INTEGER REFERENCES Toss_Decision(Toss_Id),
  Win_Type INTEGER REFERENCES Win_By(Win_Id),
  Win_Margin INTEGER,
  Outcome_type INTEGER REFERENCES Out_Type(Out_Id),
  Match_Winner INTEGER REFERENCES Team(Team_Id),
  Man_of_the_Match INTEGER REFERENCES Player(Player_Id)
);
Sample rows from `match`:
335987, 2, 1, 2008-04-18, 1, 1, 2, 1, 1, 140, 1, 1, 2
335988, 4, 3, 2008-04-19, 1, 2, 3, 2, 1, 33, 1, 3, 19
335989, 6, 5, 2008-04-19, 1, 3, 5, 2, 2, 9, 1, 6, 90

","CREATE TABLE `Batting_Style` (
  Batting_Id INTEGER,
  Batting_hand TEXT
);
Sample rows from `Batting_Style`:
1, Left-hand bat
2, Right-hand bat

CREATE TABLE `Bowling_Style` (
  Bowling_Id INTEGER,
  Bowling_skill TEXT
);
Sample rows from `Bowling_Style`:
1, Right-arm medium
2, Right-arm offbreak
3, Right-arm fast-medium

CREATE TABLE `City` (
  City_Id INTEGER,
  City_Name TEXT,
  Country_id INTEGER
);
Sample rows from `City`:
1, Bangalore, 1
2, Chandigarh, 1
3, Delhi, 1

CREATE TABLE `Country` (
  Country_Id INTEGER REFERENCES Country(Country_Id),
  Country_Name TEXT
);
Sample rows from `Country`:
1, India
2, South Africa
3, U.A.E

CREATE TABLE `Extra_Type` (
  Extra_Id INTEGER,
  Extra_Name TEXT
);
Sample rows from `Extra_Type`:
1, legbyes
2, wides
3, byes

CREATE TABLE `Extra_Runs` (
  Match_Id INTEGER PRIMARY KEY,
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Extra_Type_Id INTEGER REFERENCES Extra_Type(Extra_Id),
  Extra_Runs INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Extra_Runs`:
335987, 1, 1, 1, 1, 1
335987, 1, 2, 2, 1, 2
335987, 1, 3, 2, 1, 1

CREATE TABLE `Out_Type` (
  Out_Id INTEGER,
  Out_Name TEXT
);
Sample rows from `Out_Type`:
1, caught
2, bowled
3, run out

CREATE TABLE `Outcome` (
  Outcome_Id INTEGER,
  Outcome_Type TEXT
);
Sample rows from `Outcome`:
1, Result
2, No Result
3, Superover

CREATE TABLE `Player` (
  Player_Id INTEGER,
  Player_Name TEXT,
  DOB DATE,
  Batting_hand INTEGER REFERENCES Batting_Style(Batting_Id),
  Bowling_skill INTEGER REFERENCES Bowling_Style(Bowling_Id),
  Country_Name INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Player`:
1, SC Ganguly, 1972-07-08, 1, 1, 1
2, BB McCullum, 1981-09-27, 2, 1, 4
3, RT Ponting, 1974-12-19, 2, 1, 5

CREATE TABLE `Rolee` (
  Role_Id INTEGER,
  Role_Desc TEXT
);
Sample rows from `Rolee`:
1, Captain
2, Keeper
3, Player

CREATE TABLE `Season` (
  Season_Id INTEGER,
  Man_of_the_Series INTEGER,
  Orange_Cap INTEGER,
  Purple_Cap INTEGER,
  Season_Year INTEGER
);
Sample rows from `Season`:
1, 32, 100, 102, 2008
2, 53, 18, 61, 2009
3, 133, 133, 131, 2010

CREATE TABLE `Team` (
  Team_Id INTEGER,
  Team_Name TEXT
);
Sample rows from `Team`:
1, Kolkata Knight Riders
2, Royal Challengers Bangalore
3, Chennai Super Kings

CREATE TABLE `Toss_Decision` (
  Toss_Id INTEGER,
  Toss_Name TEXT
);
Sample rows from `Toss_Decision`:
1, field
2, bat

CREATE TABLE `Umpire` (
  Umpire_Id INTEGER,
  Umpire_Name TEXT,
  Umpire_Country INTEGER REFERENCES Country(Country_Id)
);
Sample rows from `Umpire`:
1, Asad Rauf, 6
2, MR Benson, 10
3, Aleem Dar, 6

CREATE TABLE `Venue` (
  Venue_Id INTEGER,
  Venue_Name TEXT,
  City_Id INTEGER REFERENCES City(City_Id)
);
Sample rows from `Venue`:
1, M Chinnaswamy Stadium, 1
2, Punjab Cricket Association Stadium, 2
3, Feroz Shah Kotla, 3

CREATE TABLE `Win_By` (
  Win_Id INTEGER,
  Win_Type TEXT
);
Sample rows from `Win_By`:
1, runs
2, wickets
3, NO Result

CREATE TABLE `Match` (
  Match_Id INTEGER,
  Team_1 INTEGER REFERENCES Team(Team_Id),
  Team_2 INTEGER REFERENCES Team(Team_Id),
  Match_Date DATE,
  Season_Id INTEGER REFERENCES Season(Season_Id),
  Venue_Id INTEGER REFERENCES Venue(Venue_Id),
  Toss_Winner INTEGER REFERENCES Team(Team_Id),
  Toss_Decide INTEGER REFERENCES Toss_Decision(Toss_Id),
  Win_Type INTEGER REFERENCES Win_By(Win_Id),
  Win_Margin INTEGER,
  Outcome_type INTEGER REFERENCES Out_Type(Out_Id),
  Match_Winner INTEGER REFERENCES Team(Team_Id),
  Man_of_the_Match INTEGER REFERENCES Player(Player_Id)
);
Sample rows from `Match`:
335987, 2, 1, 2008-04-18, 1, 1, 2, 1, 1, 140, 1, 1, 2
335988, 4, 3, 2008-04-19, 1, 2, 3, 2, 1, 33, 1, 3, 19
335989, 6, 5, 2008-04-19, 1, 3, 5, 2, 2, 9, 1, 6, 90

CREATE TABLE `Ball_by_Ball` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Innings_No INTEGER PRIMARY KEY,
  Team_Batting INTEGER,
  Team_Bowling INTEGER,
  Striker_Batting_Position INTEGER,
  Striker INTEGER,
  Non_Striker INTEGER,
  Bowler INTEGER
);
Sample rows from `Ball_by_Ball`:
335987, 1, 1, 1, 1, 2, 1, 1, 2, 14
335987, 1, 1, 2, 2, 1, 1, 6, 7, 106
335987, 1, 2, 1, 1, 2, 2, 2, 1, 14

CREATE TABLE `Batsman_Scored` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Runs_Scored INTEGER,
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Batsman_Scored`:
335987, 1, 1, 0, 1
335987, 1, 1, 1, 2
335987, 1, 2, 0, 1

CREATE TABLE `Player_Match` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Player_Id INTEGER PRIMARY KEY REFERENCES Player(Player_Id),
  Role_Id INTEGER PRIMARY KEY REFERENCES Rolee(Role_Id),
  Team_Id INTEGER REFERENCES Team(Team_Id)
);
Sample rows from `Player_Match`:
335987, 1, 1, 1
335987, 2, 3, 1
335987, 3, 3, 1

CREATE TABLE `Wicket_Taken` (
  Match_Id INTEGER PRIMARY KEY REFERENCES Match(Match_Id),
  Over_Id INTEGER PRIMARY KEY,
  Ball_Id INTEGER PRIMARY KEY,
  Player_Out INTEGER REFERENCES Player(Player_Id),
  Kind_Out INTEGER REFERENCES Out_Type(Out_Id),
  Fielders INTEGER REFERENCES Player(Player_Id),
  Innings_No INTEGER PRIMARY KEY
);
Sample rows from `Wicket_Taken`:
335987, 2, 1, 6, 2, None, 2
335987, 3, 2, 8, 2, None, 2
335987, 5, 5, 9, 1, 83, 2

","team, match","team_name, team_Id, match_winner, season_id"
food_inspection_2,"Please list the full names of the sanitarians who did at least one inspection in May, 2010.","SELECT DISTINCT t1.first_name, t1.last_name FROM employee as t1 inner JOIN inspection as t2 ON t1.employee_id = t2.employee_id WHERE strftime('%Y-%m', t2.inspection_date) = '2010-05' AND t1.title = 'Sanitarian'","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

","employee, inspection","employee.first_name, employee.last_name, employee.employee_id, inspection.employee_id, inspection.inspection_date, employee.title"
student_loan,List all students in the air force and which school they were enrolled at.,"SELECT t1.name, t1.school FROM enrolled as t1 inner JOIN enlist as t2 ON t1.`name` = t2.`name` WHERE t2.organ = 'air_force'","CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

","enrolled, enlist","enrolled.name, enrolled.school, enlist.name, enlist.organ"
movies_4,Provide the title of the movie that is most-liked by a large number of people.,SELECT title FROM movie ORDER BY popularity DESC LIMIT 1,"CREATE TABLE `movie` (
  movie_id INTEGER,
  title TEXT,
  budget INTEGER,
  homepage TEXT,
  overview TEXT,
  popularity REAL,
  release_date DATE,
  revenue INTEGER,
  runtime INTEGER,
  movie_status TEXT,
  tagline TEXT,
  vote_average REAL,
  vote_count INTEGER
);
Sample rows from `movie`:
5, Four Rooms, 4000000, , It's Ted the Bellhop's first night on the job...and the hotel's very unusual guests are about to place him in some outrageous predicaments. It seems that this evening's room service is serving up one unbelievable happening after another., 22.87623, 1995-12-09, 4300000, 98, Released, Twelve outrageous guests. Four scandalous requests. And one lone bellhop, in his first day on the job, who's in for the wildest New year's Eve of his life., 6.5, 530
11, Star Wars, 11000000, http://www.starwars.com/films/star-wars-episode-iv-a-new-hope, Princess Leia is captured and held hostage by the evil Imperial forces in their effort to take over the galactic Empire. Venturesome Luke Skywalker and dashing captain Han Solo team together with the loveable robot duo R2-D2 and C-3PO to rescue the beauti, 126.393695, 1977-05-25, 775398007, 121, Released, A long time ago in a galaxy far, far away..., 8.1, 6624
12, Finding Nemo, 94000000, http://movies.disney.com/finding-nemo, Nemo, an adventurous young clownfish, is unexpectedly taken from his Great Barrier Reef home to a dentist's office aquarium. It's up to his worrisome father Marlin and a friendly but forgetful fish Dory to bring Nemo home -- meeting vegetarian sharks, sur, 85.688789, 2003-05-30, 940335536, 100, Released, There are 3.7 trillion fish in the ocean, they're looking for one., 7.6, 6122

","CREATE TABLE `country` (
  country_id INTEGER,
  country_iso_code TEXT,
  country_name TEXT
);
Sample rows from `country`:
128, AE, United Arab Emirates
129, AF, Afghanistan
130, AO, Angola

CREATE TABLE `department` (
  department_id INTEGER,
  department_name TEXT
);
Sample rows from `department`:
1, Camera
2, Directing
3, Production

CREATE TABLE `gender` (
  gender_id INTEGER,
  gender TEXT
);
Sample rows from `gender`:
0, Unspecified
1, Female
2, Male

CREATE TABLE `genre` (
  genre_id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
12, Adventure
14, Fantasy
16, Animation

CREATE TABLE `keyword` (
  keyword_id INTEGER,
  keyword_name TEXT
);
Sample rows from `keyword`:
30, individual
65, holiday
74, germany

CREATE TABLE `language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `language`:
24574, en, English
24575, sv, svenska
24576, de, Deutsch

CREATE TABLE `language_role` (
  role_id INTEGER,
  language_role TEXT
);
Sample rows from `language_role`:
1, Original
2, Spoken

CREATE TABLE `movie` (
  movie_id INTEGER,
  title TEXT,
  budget INTEGER,
  homepage TEXT,
  overview TEXT,
  popularity REAL,
  release_date DATE,
  revenue INTEGER,
  runtime INTEGER,
  movie_status TEXT,
  tagline TEXT,
  vote_average REAL,
  vote_count INTEGER
);
Sample rows from `movie`:
5, Four Rooms, 4000000, , It's Ted the Bellhop's first night on the job...and the hotel's very unusual guests are about to place him in some outrageous predicaments. It seems that this evening's room service is serving up one unbelievable happening after another., 22.87623, 1995-12-09, 4300000, 98, Released, Twelve outrageous guests. Four scandalous requests. And one lone bellhop, in his first day on the job, who's in for the wildest New year's Eve of his life., 6.5, 530
11, Star Wars, 11000000, http://www.starwars.com/films/star-wars-episode-iv-a-new-hope, Princess Leia is captured and held hostage by the evil Imperial forces in their effort to take over the galactic Empire. Venturesome Luke Skywalker and dashing captain Han Solo team together with the loveable robot duo R2-D2 and C-3PO to rescue the beauti, 126.393695, 1977-05-25, 775398007, 121, Released, A long time ago in a galaxy far, far away..., 8.1, 6624
12, Finding Nemo, 94000000, http://movies.disney.com/finding-nemo, Nemo, an adventurous young clownfish, is unexpectedly taken from his Great Barrier Reef home to a dentist's office aquarium. It's up to his worrisome father Marlin and a friendly but forgetful fish Dory to bring Nemo home -- meeting vegetarian sharks, sur, 85.688789, 2003-05-30, 940335536, 100, Released, There are 3.7 trillion fish in the ocean, they're looking for one., 7.6, 6122

CREATE TABLE `movie_genres` (
  movie_id INTEGER REFERENCES movie(movie_id),
  genre_id INTEGER REFERENCES genre(genre_id)
);
Sample rows from `movie_genres`:
5, 35
5, 80
11, 12

CREATE TABLE `movie_languages` (
  movie_id INTEGER REFERENCES movie(movie_id),
  language_id INTEGER REFERENCES language(language_id),
  language_role_id INTEGER REFERENCES language_role(role_id)
);
Sample rows from `movie_languages`:
5, 24574, 2
11, 24574, 2
12, 24574, 2

CREATE TABLE `person` (
  person_id INTEGER,
  person_name TEXT
);
Sample rows from `person`:
1, George Lucas
2, Mark Hamill
3, Harrison Ford

CREATE TABLE `movie_crew` (
  movie_id INTEGER REFERENCES movie(movie_id),
  person_id INTEGER REFERENCES person(person_id),
  department_id INTEGER REFERENCES department(department_id),
  job TEXT
);
Sample rows from `movie_crew`:
285, 120, 1, Director of Photography
285, 1704, 2, Director
285, 770, 3, Producer

CREATE TABLE `production_company` (
  company_id INTEGER,
  company_name TEXT
);
Sample rows from `production_company`:
1, Lucasfilm
2, Walt Disney Pictures
3, Pixar Animation Studios

CREATE TABLE `production_country` (
  movie_id INTEGER REFERENCES movie(movie_id),
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `production_country`:
5, 214
11, 214
12, 214

CREATE TABLE `movie_cast` (
  movie_id INTEGER REFERENCES movie(movie_id),
  person_id INTEGER REFERENCES person(person_id),
  character_name TEXT,
  gender_id INTEGER REFERENCES gender(gender_id),
  cast_order INTEGER
);
Sample rows from `movie_cast`:
285, 85, Captain Jack Sparrow, 2, 0
285, 114, Will Turner, 2, 1
285, 116, Elizabeth Swann, 1, 2

CREATE TABLE `movie_keywords` (
  movie_id INTEGER REFERENCES movie(None),
  keyword_id INTEGER REFERENCES keyword(None)
);
Sample rows from `movie_keywords`:
5, 612
5, 613
5, 616

CREATE TABLE `movie_company` (
  movie_id INTEGER REFERENCES movie(None),
  company_id INTEGER REFERENCES production_company(None)
);
Sample rows from `movie_company`:
5, 14
5, 59
11, 1

",movie,"title, popularity"
ice_hockey_draft,"Among the USA players, who has the lightest weight?",SELECT t2.playername FROM weight_info as t1 inner JOIN playerinfo as t2 ON t1.weight_id = t2.weight WHERE t2.nation = 'USA' ORDER BY t1.weight_in_lbs asC LIMIT 1,"CREATE TABLE `weight_info` (
  weight_id INTEGER,
  weight_in_kg INTEGER,
  weight_in_lbs INTEGER
);
Sample rows from `weight_info`:
154, 70, 154
159, 72, 159
161, 73, 161

CREATE TABLE `playerinfo` (
  ELITEID INTEGER,
  PlayerName TEXT,
  birthdate TEXT,
  birthyear DATE,
  birthmonth INTEGER,
  birthday INTEGER,
  birthplace TEXT,
  nation TEXT,
  height INTEGER REFERENCES height_info(height_id),
  weight INTEGER REFERENCES weight_info(weight_id),
  position_info TEXT,
  shoots TEXT,
  draftyear INTEGER,
  draftround INTEGER,
  overall INTEGER,
  overallby TEXT,
  CSS_rank INTEGER,
  sum_7yr_GP INTEGER,
  sum_7yr_TOI INTEGER,
  GP_greater_than_0 TEXT
);
Sample rows from `playerinfo`:
9, David Bornhammar, 1981-06-15, 1981, 6, 15, Lidingo, SWE, Sweden, 73, 198, D, L, 1999, 7, 192, Washington Capitals, 192, 0, 0, no
18, David Printz, 1980-07-24, 1980, 7, 24, Stockholm, SWE, Sweden, 76, 220, D, L, 2001, 7, 225, Philadelphia Flyers, 176, 13, 84, yes
27, Yared Hagos, 1983-03-27, 1983, 3, 27, Stockholm, SWE, Sweden, 73, 218, C, L, 2001, 3, 70, Dallas Stars, 24, 0, 0, no

","CREATE TABLE `height_info` (
  height_id INTEGER,
  height_in_cm INTEGER,
  height_in_inch TEXT
);
Sample rows from `height_info`:
65, 165, 5'5""
67, 170, 5'7""
68, 172, 5'8""

CREATE TABLE `weight_info` (
  weight_id INTEGER,
  weight_in_kg INTEGER,
  weight_in_lbs INTEGER
);
Sample rows from `weight_info`:
154, 70, 154
159, 72, 159
161, 73, 161

CREATE TABLE `PlayerInfo` (
  ELITEID INTEGER,
  PlayerName TEXT,
  birthdate TEXT,
  birthyear DATE,
  birthmonth INTEGER,
  birthday INTEGER,
  birthplace TEXT,
  nation TEXT,
  height INTEGER REFERENCES height_info(height_id),
  weight INTEGER REFERENCES weight_info(weight_id),
  position_info TEXT,
  shoots TEXT,
  draftyear INTEGER,
  draftround INTEGER,
  overall INTEGER,
  overallby TEXT,
  CSS_rank INTEGER,
  sum_7yr_GP INTEGER,
  sum_7yr_TOI INTEGER,
  GP_greater_than_0 TEXT
);
Sample rows from `PlayerInfo`:
9, David Bornhammar, 1981-06-15, 1981, 6, 15, Lidingo, SWE, Sweden, 73, 198, D, L, 1999, 7, 192, Washington Capitals, 192, 0, 0, no
18, David Printz, 1980-07-24, 1980, 7, 24, Stockholm, SWE, Sweden, 76, 220, D, L, 2001, 7, 225, Philadelphia Flyers, 176, 13, 84, yes
27, Yared Hagos, 1983-03-27, 1983, 3, 27, Stockholm, SWE, Sweden, 73, 218, C, L, 2001, 3, 70, Dallas Stars, 24, 0, 0, no

CREATE TABLE `SeasonStatus` (
  ELITEID INTEGER REFERENCES PlayerInfo(ELITEID),
  SEASON TEXT,
  TEAM TEXT,
  LEAGUE TEXT,
  GAMETYPE TEXT,
  GP INTEGER,
  G INTEGER,
  A INTEGER,
  P INTEGER,
  PIM INTEGER,
  PLUSMINUS INTEGER
);
Sample rows from `SeasonStatus`:
3667, 1997-1998, Rimouski Oceanic, QMJHL, Regular Season, 58, 44, 71, 115, 117, 27
3667, 1997-1998, Rimouski Oceanic, QMJHL, Playoffs, 18, 15, 26, 41, 46, 4
3667, 1997-1998, Canada U20, WJC-20, Regular Season, 7, 1, 1, 2, 4, 0

","weight_info, playerinfo","playerinfo.playername, weight_info.weight_id, playerinfo.weight, playerinfo.nation, weight_info.weight_in_lbs"
sales,"Among all customers handled by Innes E. del Castillo, how many have purchased Short-Sleeve Classic Jersey, L?","SELECT COUNT(t2.customerid) FROM products as t1 inner JOIN sales as t2 ON t1.productid = t2.productid inner JOIN employees as t3 ON t2.salesPersonID = t3.employeeid WHERE t3.firstname = 'Innes' AND t3.lastname = 'del Castillo' AND t1.name = 'Short-Sleeve Classic Jersey, L' AND t3.middleinitial = 'e'","CREATE TABLE `products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

CREATE TABLE `sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

CREATE TABLE `employees` (
  EmployeeID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `employees`:
1, Abraham, e, Bennet
2, Reginald, l, Blotchet-Halls
3, Cheryl, a, Carson

","CREATE TABLE `Customers` (
  CustomerID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Customers`:
1, Aaron, None, Alexander
2, Aaron, None, Bryant
3, Aaron, None, Butler

CREATE TABLE `Employees` (
  EmployeeID INTEGER,
  FirstName TEXT,
  MiddleInitial TEXT,
  LastName TEXT
);
Sample rows from `Employees`:
1, Abraham, e, Bennet
2, Reginald, l, Blotchet-Halls
3, Cheryl, a, Carson

CREATE TABLE `Products` (
  ProductID INTEGER,
  Name TEXT,
  Price REAL
);
Sample rows from `Products`:
1, Adjustable Race, 1.6
2, Bearing Ball, 0.8
3, BB Ball Bearing, 2.4

CREATE TABLE `Sales` (
  SalesID INTEGER,
  SalesPersonID INTEGER REFERENCES Employees(EmployeeID),
  CustomerID INTEGER REFERENCES Customers(CustomerID),
  ProductID INTEGER REFERENCES Products(ProductID),
  Quantity INTEGER
);
Sample rows from `Sales`:
1, 17, 10482, 500, 500
2, 5, 1964, 306, 810
3, 8, 12300, 123, 123

","products, sales, employees","sales.customerid, products.productid, sales.productid, sales.salesPersonID, employees.employeeid, employees.firstname, employees.lastname, products.name, employees.middleinitial"
retails,"Among all the suppliers providing the part ""hot spring dodger dim light"", how many of them are in Europe?",SELECT COUNT(t1.r_regionkey) FROM region as t1 inner JOIN nation as t2 ON t1.r_regionkey = t2.n_regionkey inner JOIN supplier as t3 ON t2.n_nationkey = t3.s_nationkey WHERE t1.r_name = 'EUROPE',"CREATE TABLE `region` (
  r_regionkey INTEGER,
  r_name TEXT,
  r_comment TEXT
);
Sample rows from `region`:
0, AFRICA, asymptotes sublate after the r
1, AMERICA, requests affix quickly final tithes. blithely even packages above the a
2, ASIA, accounts cajole carefully according to the carefully exp

CREATE TABLE `nation` (
  n_nationkey INTEGER,
  n_name TEXT,
  n_regionkey INTEGER REFERENCES region(r_regionkey),
  n_comment TEXT
);
Sample rows from `nation`:
0, ALGERIA, 0, slyly express pinto beans cajole idly. deposits use blithely unusual packages? fluffily final accounts x-r
1, ARGENTINA, 1, instructions detect blithely stealthily pending packages
2, BRAZIL, 1, blithely unusual deposits are quickly--

CREATE TABLE `supplier` (
  s_suppkey INTEGER,
  s_nationkey INTEGER REFERENCES nation(n_nationkey),
  s_comment TEXT,
  s_name TEXT,
  s_address TEXT,
  s_phone TEXT,
  s_acctbal REAL
);
Sample rows from `supplier`:
1, 13, blithely final pearls are. instructions thra, Supplier#000000001, ,wWs4pnykQOFl8mgVCU8EZMXqZs1w, 800-807-9579, 3082.86
2, 5, requests integrate fluffily. fluffily ironic deposits wake. bold, Supplier#000000002, WkXT6MSAJrp4qWq3W9N, 348-617-6055, 3009.73
3, 22, carefully express ideas shall have to unwin, Supplier#000000003, KjUqa42JEHaRDVQTHV6Yq2h, 471-986-9888, 9159.78

","CREATE TABLE `customer` (
  c_custkey INTEGER,
  c_mktsegment TEXT,
  c_nationkey INTEGER REFERENCES nation(n_nationkey),
  c_name TEXT,
  c_address TEXT,
  c_phone TEXT,
  c_acctbal REAL,
  c_comment TEXT
);
Sample rows from `customer`:
1, BUILDING, 8, Customer#000000001, KwX3hMHjZ6, 937-241-3198, 3560.03, ironic excuses detect slyly silent requests. requests according to the exc
2, MACHINERY, 16, Customer#000000002, ioUn,eqTTXOdo, 906-965-7556, 7550.21, final express accounts mold slyly. ironic accounts cajole! quickly express a
3, FURNITURE, 11, Customer#000000003, YddJqmIdouNT9Yj, 328-750-7603, -926.96, carefully express foxes sleep carefully. pending platelets sleep thinly for t

CREATE TABLE `lineitem` (
  l_shipdate DATE,
  l_orderkey INTEGER PRIMARY KEY REFERENCES orders(o_orderkey),
  l_discount REAL,
  l_extendedprice REAL,
  l_suppkey INTEGER REFERENCES partsupp(ps_suppkey),
  l_quantity INTEGER,
  l_returnflag TEXT,
  l_partkey INTEGER REFERENCES partsupp(ps_partkey),
  l_linestatus TEXT,
  l_tax REAL,
  l_commitdate DATE,
  l_receiptdate DATE,
  l_shipmode TEXT,
  l_linenumber INTEGER PRIMARY KEY,
  l_shipinstruct TEXT,
  l_comment TEXT
);
Sample rows from `lineitem`:
1995-08-16, 1, 0.1, 58303.08, 6296, 33, N, 98768, O, 0.06, 1995-07-12, 1995-09-14, RAIL, 1, NONE, carefully bo
1995-08-13, 1, 0.09, 16947.7, 8776, 10, N, 23771, O, 0.08, 1995-07-09, 1995-08-27, TRUCK, 2, TAKE BACK RETURN, blithely regular pac
1995-06-17, 1, 0.1, 63642.9, 3859, 34, N, 113858, O, 0.08, 1995-05-22, 1995-06-30, SHIP, 3, COLLECT COD, ironic accounts sleep furiously silen

CREATE TABLE `nation` (
  n_nationkey INTEGER,
  n_name TEXT,
  n_regionkey INTEGER REFERENCES region(r_regionkey),
  n_comment TEXT
);
Sample rows from `nation`:
0, ALGERIA, 0, slyly express pinto beans cajole idly. deposits use blithely unusual packages? fluffily final accounts x-r
1, ARGENTINA, 1, instructions detect blithely stealthily pending packages
2, BRAZIL, 1, blithely unusual deposits are quickly--

CREATE TABLE `orders` (
  o_orderdate DATE,
  o_orderkey INTEGER,
  o_custkey INTEGER REFERENCES customer(c_custkey),
  o_orderpriority TEXT,
  o_shippriority INTEGER,
  o_clerk TEXT,
  o_orderstatus TEXT,
  o_totalprice REAL,
  o_comment TEXT
);
Sample rows from `orders`:
1995-04-19, 1, 73100, 4-NOT SPECIFIED, 0, Clerk#000000916, P, 203198.56, final packages sleep blithely packa
1996-11-04, 2, 92861, 1-URGENT, 0, Clerk#000000373, O, 317719.99, final excuses about the ironic even deposits detect express request
1992-02-15, 3, 44875, 1-URGENT, 0, Clerk#000000485, F, 146674.98, final final deposits cajole foxes. blithely pendin

CREATE TABLE `part` (
  p_partkey INTEGER,
  p_type TEXT,
  p_size INTEGER,
  p_brand TEXT,
  p_name TEXT,
  p_container TEXT,
  p_mfgr TEXT,
  p_retailprice REAL,
  p_comment TEXT
);
Sample rows from `part`:
1, LARGE PLATED TIN, 31, Brand#43, burlywood plum powder puff mint, LG BAG, Manufacturer#4, 901.0, blithely busy reque
2, LARGE POLISHED STEEL, 4, Brand#55, hot spring dodger dim light, LG CASE, Manufacturer#5, 902.0, even ironic requests s
3, STANDARD PLATED COPPER, 30, Brand#53, dark slate grey steel misty, WRAP CASE, Manufacturer#5, 903.0, slyly ironic fox

CREATE TABLE `partsupp` (
  ps_partkey INTEGER PRIMARY KEY REFERENCES part(p_partkey),
  ps_suppkey INTEGER PRIMARY KEY REFERENCES supplier(s_suppkey),
  ps_supplycost REAL,
  ps_availqty INTEGER,
  ps_comment TEXT
);
Sample rows from `partsupp`:
1, 2, 400.75, 1111, carefully ironic deposits use against the carefully unusual accounts. slyly silent platelets nag quickly even
1, 2502, 702.61, 3999, slyly regular accounts serve carefully. asymptotes after the slyly even instructions cajole quickly ironic requests. pending dugouts about the slyly 
1, 5002, 383.95, 7411, carefully special ideas are slyly. slyly ironic epitaphs use pending pending foxes. furiously express pinto beans lose quiet even requests: special final packages ar

CREATE TABLE `region` (
  r_regionkey INTEGER,
  r_name TEXT,
  r_comment TEXT
);
Sample rows from `region`:
0, AFRICA, asymptotes sublate after the r
1, AMERICA, requests affix quickly final tithes. blithely even packages above the a
2, ASIA, accounts cajole carefully according to the carefully exp

CREATE TABLE `supplier` (
  s_suppkey INTEGER,
  s_nationkey INTEGER REFERENCES nation(n_nationkey),
  s_comment TEXT,
  s_name TEXT,
  s_address TEXT,
  s_phone TEXT,
  s_acctbal REAL
);
Sample rows from `supplier`:
1, 13, blithely final pearls are. instructions thra, Supplier#000000001, ,wWs4pnykQOFl8mgVCU8EZMXqZs1w, 800-807-9579, 3082.86
2, 5, requests integrate fluffily. fluffily ironic deposits wake. bold, Supplier#000000002, WkXT6MSAJrp4qWq3W9N, 348-617-6055, 3009.73
3, 22, carefully express ideas shall have to unwin, Supplier#000000003, KjUqa42JEHaRDVQTHV6Yq2h, 471-986-9888, 9159.78

","region, nation, supplier","region.r_regionkey, nation.n_regionkey, nation.n_nationkey, supplier.s_nationkey, region.r_name"
movies_4,List the names of the production companies that made at least 200 movies.,SELECT t1.company_name FROM production_company as t1 inner JOIN movie_company as t2 ON t1.company_id = t2.company_id GROUP BY t1.company_id HAVING COUNT(t2.movie_id) > 200,"CREATE TABLE `production_company` (
  company_id INTEGER,
  company_name TEXT
);
Sample rows from `production_company`:
1, Lucasfilm
2, Walt Disney Pictures
3, Pixar Animation Studios

CREATE TABLE `movie_company` (
  movie_id INTEGER REFERENCES movie(None),
  company_id INTEGER REFERENCES production_company(None)
);
Sample rows from `movie_company`:
5, 14
5, 59
11, 1

","CREATE TABLE `country` (
  country_id INTEGER,
  country_iso_code TEXT,
  country_name TEXT
);
Sample rows from `country`:
128, AE, United Arab Emirates
129, AF, Afghanistan
130, AO, Angola

CREATE TABLE `department` (
  department_id INTEGER,
  department_name TEXT
);
Sample rows from `department`:
1, Camera
2, Directing
3, Production

CREATE TABLE `gender` (
  gender_id INTEGER,
  gender TEXT
);
Sample rows from `gender`:
0, Unspecified
1, Female
2, Male

CREATE TABLE `genre` (
  genre_id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
12, Adventure
14, Fantasy
16, Animation

CREATE TABLE `keyword` (
  keyword_id INTEGER,
  keyword_name TEXT
);
Sample rows from `keyword`:
30, individual
65, holiday
74, germany

CREATE TABLE `language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `language`:
24574, en, English
24575, sv, svenska
24576, de, Deutsch

CREATE TABLE `language_role` (
  role_id INTEGER,
  language_role TEXT
);
Sample rows from `language_role`:
1, Original
2, Spoken

CREATE TABLE `movie` (
  movie_id INTEGER,
  title TEXT,
  budget INTEGER,
  homepage TEXT,
  overview TEXT,
  popularity REAL,
  release_date DATE,
  revenue INTEGER,
  runtime INTEGER,
  movie_status TEXT,
  tagline TEXT,
  vote_average REAL,
  vote_count INTEGER
);
Sample rows from `movie`:
5, Four Rooms, 4000000, , It's Ted the Bellhop's first night on the job...and the hotel's very unusual guests are about to place him in some outrageous predicaments. It seems that this evening's room service is serving up one unbelievable happening after another., 22.87623, 1995-12-09, 4300000, 98, Released, Twelve outrageous guests. Four scandalous requests. And one lone bellhop, in his first day on the job, who's in for the wildest New year's Eve of his life., 6.5, 530
11, Star Wars, 11000000, http://www.starwars.com/films/star-wars-episode-iv-a-new-hope, Princess Leia is captured and held hostage by the evil Imperial forces in their effort to take over the galactic Empire. Venturesome Luke Skywalker and dashing captain Han Solo team together with the loveable robot duo R2-D2 and C-3PO to rescue the beauti, 126.393695, 1977-05-25, 775398007, 121, Released, A long time ago in a galaxy far, far away..., 8.1, 6624
12, Finding Nemo, 94000000, http://movies.disney.com/finding-nemo, Nemo, an adventurous young clownfish, is unexpectedly taken from his Great Barrier Reef home to a dentist's office aquarium. It's up to his worrisome father Marlin and a friendly but forgetful fish Dory to bring Nemo home -- meeting vegetarian sharks, sur, 85.688789, 2003-05-30, 940335536, 100, Released, There are 3.7 trillion fish in the ocean, they're looking for one., 7.6, 6122

CREATE TABLE `movie_genres` (
  movie_id INTEGER REFERENCES movie(movie_id),
  genre_id INTEGER REFERENCES genre(genre_id)
);
Sample rows from `movie_genres`:
5, 35
5, 80
11, 12

CREATE TABLE `movie_languages` (
  movie_id INTEGER REFERENCES movie(movie_id),
  language_id INTEGER REFERENCES language(language_id),
  language_role_id INTEGER REFERENCES language_role(role_id)
);
Sample rows from `movie_languages`:
5, 24574, 2
11, 24574, 2
12, 24574, 2

CREATE TABLE `person` (
  person_id INTEGER,
  person_name TEXT
);
Sample rows from `person`:
1, George Lucas
2, Mark Hamill
3, Harrison Ford

CREATE TABLE `movie_crew` (
  movie_id INTEGER REFERENCES movie(movie_id),
  person_id INTEGER REFERENCES person(person_id),
  department_id INTEGER REFERENCES department(department_id),
  job TEXT
);
Sample rows from `movie_crew`:
285, 120, 1, Director of Photography
285, 1704, 2, Director
285, 770, 3, Producer

CREATE TABLE `production_company` (
  company_id INTEGER,
  company_name TEXT
);
Sample rows from `production_company`:
1, Lucasfilm
2, Walt Disney Pictures
3, Pixar Animation Studios

CREATE TABLE `production_country` (
  movie_id INTEGER REFERENCES movie(movie_id),
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `production_country`:
5, 214
11, 214
12, 214

CREATE TABLE `movie_cast` (
  movie_id INTEGER REFERENCES movie(movie_id),
  person_id INTEGER REFERENCES person(person_id),
  character_name TEXT,
  gender_id INTEGER REFERENCES gender(gender_id),
  cast_order INTEGER
);
Sample rows from `movie_cast`:
285, 85, Captain Jack Sparrow, 2, 0
285, 114, Will Turner, 2, 1
285, 116, Elizabeth Swann, 1, 2

CREATE TABLE `movie_keywords` (
  movie_id INTEGER REFERENCES movie(None),
  keyword_id INTEGER REFERENCES keyword(None)
);
Sample rows from `movie_keywords`:
5, 612
5, 613
5, 616

CREATE TABLE `movie_company` (
  movie_id INTEGER REFERENCES movie(None),
  company_id INTEGER REFERENCES production_company(None)
);
Sample rows from `movie_company`:
5, 14
5, 59
11, 1

","production_company, movie_company","production_company.company_name, production_company.company_id, movie_company.company_id, movie_company.movie_id"
student_loan,How many students enlisted in the Navy?,SELECT COUNT(name) FROM enlist WHERE organ = 'navy',"CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

",enlist,"name, organ"
car_retails,"How many customers with a canceled shipment have a credit limit greater than 115,000?",SELECT COUNT(t1.customernumber) FROM customers as t1 inner JOIN orders as t2 ON t1.customernumber = t2.customernumber WHERE t2.status = 'Cancelled' AND t1.creditlimit > 115000,"CREATE TABLE `customers` (
  customerNumber INTEGER,
  customerName TEXT,
  contactLastName TEXT,
  contactFirstName TEXT,
  phone TEXT,
  addressLine1 TEXT,
  addressLine2 TEXT,
  city TEXT,
  state TEXT,
  postalCode TEXT,
  country TEXT,
  salesRepEmployeeNumber INTEGER REFERENCES employees(employeeNumber),
  creditLimit REAL
);
Sample rows from `customers`:
103, Atelier graphique, Schmitt, Carine , 40.32.2555, 54, rue Royale, None, Nantes, None, 44000, France, 1370, 21000.0
112, Signal Gift Stores, King, Jean, 7025551838, 8489 Strong St., None, Las Vegas, NV, 83030, USA, 1166, 71800.0
114, Australian Collectors, Co., Ferguson, Peter, 03 9520 4555, 636 St Kilda Road, Level 3, Melbourne, Victoria, 3004, Australia, 1611, 117300.0

CREATE TABLE `orders` (
  orderNumber INTEGER,
  orderDate DATE,
  requiredDate DATE,
  shippedDate DATE,
  status TEXT,
  comments TEXT,
  customerNumber INTEGER REFERENCES customers(customerNumber)
);
Sample rows from `orders`:
10100, 2003-01-06, 2003-01-13, 2003-01-10, Shipped, None, 363
10101, 2003-01-09, 2003-01-18, 2003-01-11, Shipped, Check on availability., 128
10102, 2003-01-10, 2003-01-18, 2003-01-14, Shipped, None, 181

","CREATE TABLE `offices` (
  officeCode TEXT PRIMARY KEY,
  city TEXT,
  phone TEXT,
  addressLine1 TEXT,
  addressLine2 TEXT,
  state TEXT,
  country TEXT,
  postalCode TEXT,
  territory TEXT
);
Sample rows from `offices`:
1, San Francisco, +1 650 219 4782, 100 Market Street, Suite 300, CA, USA, 94080, NA
2, Boston, +1 215 837 0825, 1550 Court Place, Suite 102, MA, USA, 02107, NA
3, NYC, +1 212 555 3000, 523 East 53rd Street, apt. 5A, NY, USA, 10022, NA

CREATE TABLE `employees` (
  employeeNumber INTEGER,
  lastName TEXT,
  firstName TEXT,
  extension TEXT,
  email TEXT,
  officeCode TEXT REFERENCES offices(officeCode),
  reportsTo INTEGER REFERENCES employees(employeeNumber),
  jobTitle TEXT
);
Sample rows from `employees`:
1002, Murphy, Diane, x5800, dmurphy@classicmodelcars.com, 1, None, President
1056, Patterson, Mary, x4611, mpatterso@classicmodelcars.com, 1, 1002, VP Sales
1076, Firrelli, Jeff, x9273, jfirrelli@classicmodelcars.com, 1, 1002, VP Marketing

CREATE TABLE `customers` (
  customerNumber INTEGER,
  customerName TEXT,
  contactLastName TEXT,
  contactFirstName TEXT,
  phone TEXT,
  addressLine1 TEXT,
  addressLine2 TEXT,
  city TEXT,
  state TEXT,
  postalCode TEXT,
  country TEXT,
  salesRepEmployeeNumber INTEGER REFERENCES employees(employeeNumber),
  creditLimit REAL
);
Sample rows from `customers`:
103, Atelier graphique, Schmitt, Carine , 40.32.2555, 54, rue Royale, None, Nantes, None, 44000, France, 1370, 21000.0
112, Signal Gift Stores, King, Jean, 7025551838, 8489 Strong St., None, Las Vegas, NV, 83030, USA, 1166, 71800.0
114, Australian Collectors, Co., Ferguson, Peter, 03 9520 4555, 636 St Kilda Road, Level 3, Melbourne, Victoria, 3004, Australia, 1611, 117300.0

CREATE TABLE `orders` (
  orderNumber INTEGER,
  orderDate DATE,
  requiredDate DATE,
  shippedDate DATE,
  status TEXT,
  comments TEXT,
  customerNumber INTEGER REFERENCES customers(customerNumber)
);
Sample rows from `orders`:
10100, 2003-01-06, 2003-01-13, 2003-01-10, Shipped, None, 363
10101, 2003-01-09, 2003-01-18, 2003-01-11, Shipped, Check on availability., 128
10102, 2003-01-10, 2003-01-18, 2003-01-14, Shipped, None, 181

CREATE TABLE `payments` (
  customerNumber INTEGER PRIMARY KEY REFERENCES customers(customerNumber),
  checkNumber TEXT PRIMARY KEY,
  paymentDate DATE,
  amount REAL
);
Sample rows from `payments`:
103, HQ336336, 2004-10-19, 6066.78
103, JM555205, 2003-06-05, 14571.44
103, OM314933, 2004-12-18, 1676.14

CREATE TABLE `productlines` (
  productLine TEXT PRIMARY KEY,
  textDescription TEXT,
  htmlDescription TEXT,
  image BLOB
);
Sample rows from `productlines`:
Classic Cars, Attention car enthusiasts: Make your wildest car ownership dreams come true. Whether you are looking for classic muscle cars, dream sports cars or movie-inspired miniatures, you will find great choices in this category. These replicas feature superb atten, None, None
Motorcycles, Our motorcycles are state of the art replicas of classic as well as contemporary motorcycle legends such as Harley Davidson, Ducati and Vespa. Models contain stunning details such as official logos, rotating wheels, working kickstand, front suspension, ge, None, None
Planes, Unique, diecast airplane and helicopter replicas suitable for collections, as well as home, office or classroom decorations. Models contain stunning details such as official logos and insignias, rotating jet engines and propellers, retractable wheels, and, None, None

CREATE TABLE `products` (
  productCode TEXT PRIMARY KEY,
  productName TEXT,
  productLine TEXT REFERENCES productlines(productLine),
  productScale TEXT,
  productVendor TEXT,
  productDescription TEXT,
  quantityInStock INTEGER,
  buyPrice REAL,
  MSRP REAL
);
Sample rows from `products`:
S10_1678, 1969 Harley Davidson Ultimate Chopper, Motorcycles, 1:10, Min Lin Diecast, This replica features working kickstand, front suspension, gear-shift lever, footbrake lever, drive chain, wheels and steering. All parts are particularly delicate due to their precise scale and require special care and attention., 7933, 48.81, 95.7
S10_1949, 1952 Alpine Renault 1300, Classic Cars, 1:10, Classic Metal Creations, Turnable front wheels; steering function; detailed interior; detailed engine; opening hood; opening trunk; opening doors; and detailed chassis., 7305, 98.58, 214.3
S10_2016, 1996 Moto Guzzi 1100i, Motorcycles, 1:10, Highway 66 Mini Classics, Official Moto Guzzi logos and insignias, saddle bags located on side of motorcycle, detailed engine, working steering, working suspension, two leather seats, luggage rack, dual exhaust pipes, small saddle bag located on handle bars, two-tone paint with chrome accents, superior die-cast detail , rotating wheels , working kick stand, diecast metal with plastic parts and baked enamel finish., 6625, 68.99, 118.94

CREATE TABLE `orderdetails` (
  orderNumber INTEGER PRIMARY KEY REFERENCES orders(None),
  productCode TEXT PRIMARY KEY REFERENCES products(None),
  quantityOrdered INTEGER,
  priceEach REAL,
  orderLineNumber INTEGER
);
Sample rows from `orderdetails`:
10100, S18_1749, 30, 136.0, 3
10100, S18_2248, 50, 55.09, 2
10100, S18_4409, 22, 75.46, 4

","customers, orders","customers.customernumber, orders.customernumber, orders.status, customers.creditlimit"
music_platform_2,"What is the review with the title ""Hosts bring the show down"" for?",SELECT title FROM podcasts WHERE podcast_id = ( SELECT podcast_id FROM reviews WHERE title = 'Hosts bring the show down' ),"CREATE TABLE `podcasts` (
  podcast_id TEXT PRIMARY KEY,
  itunes_id INTEGER,
  slug TEXT,
  itunes_url TEXT,
  title TEXT
);
Sample rows from `podcasts`:
a00018b54eb342567c94dacfb2a3e504, 1313466221, scaling-global, https://podcasts.apple.com/us/podcast/scaling-global/id1313466221, Scaling Global
a00043d34e734b09246d17dc5d56f63c, 158973461, cornerstone-baptist-church-of-orlando, https://podcasts.apple.com/us/podcast/cornerstone-baptist-church-of-orlando/id158973461, Cornerstone Baptist Church of Orlando
a0004b1ef445af9dc84dad1e7821b1e3, 139076942, mystery-dancing-in-the-dark, https://podcasts.apple.com/us/podcast/mystery-dancing-in-the-dark/id139076942, Mystery: Dancing in the Dark

CREATE TABLE `reviews` (
  podcast_id TEXT REFERENCES podcasts(None),
  title TEXT,
  content TEXT,
  rating INTEGER,
  author_id TEXT,
  created_at TEXT
);
Sample rows from `reviews`:
c61aa81c9b929a66f0c1db6cbe5d8548, really interesting!, Thanks for providing these insights.  Really enjoy the variety and depth -- please keep them coming!, 5, F7E5A318989779D, 2018-04-24T12:05:16-07:00
c61aa81c9b929a66f0c1db6cbe5d8548, Must listen for anyone interested in the arts!!!, Super excited to see this podcast grow. So many fun topics to talk about...Shari is really engaging. Definitely subscribing and would recommend to anyone interested in the arts!!, 5, F6BF5472689BD12, 2018-05-09T18:14:32-07:00
ad4f2bf69c72b8db75978423c25f379e, nauseatingly left, I'm a liberal myself, but its pretty obvious and annoying that they're trying to push their beliefs on the listeners. Get a more politically diverse production staff, we like to see issues from multiple point of views not just yours., 1, 1AB95B8E6E1309E, 2019-06-11T14:53:39-07:00

","CREATE TABLE `runs` (
  run_at TEXT,
  max_rowid INTEGER,
  reviews_added INTEGER
);
Sample rows from `runs`:
2021-05-10 02:53:00, 3266481, 1215223
2021-06-06 21:34:36, 3300773, 13139
2021-07-02 18:04:55, 3329699, 11561

CREATE TABLE `podcasts` (
  podcast_id TEXT PRIMARY KEY,
  itunes_id INTEGER,
  slug TEXT,
  itunes_url TEXT,
  title TEXT
);
Sample rows from `podcasts`:
a00018b54eb342567c94dacfb2a3e504, 1313466221, scaling-global, https://podcasts.apple.com/us/podcast/scaling-global/id1313466221, Scaling Global
a00043d34e734b09246d17dc5d56f63c, 158973461, cornerstone-baptist-church-of-orlando, https://podcasts.apple.com/us/podcast/cornerstone-baptist-church-of-orlando/id158973461, Cornerstone Baptist Church of Orlando
a0004b1ef445af9dc84dad1e7821b1e3, 139076942, mystery-dancing-in-the-dark, https://podcasts.apple.com/us/podcast/mystery-dancing-in-the-dark/id139076942, Mystery: Dancing in the Dark

CREATE TABLE `reviews` (
  podcast_id TEXT REFERENCES podcasts(None),
  title TEXT,
  content TEXT,
  rating INTEGER,
  author_id TEXT,
  created_at TEXT
);
Sample rows from `reviews`:
c61aa81c9b929a66f0c1db6cbe5d8548, really interesting!, Thanks for providing these insights.  Really enjoy the variety and depth -- please keep them coming!, 5, F7E5A318989779D, 2018-04-24T12:05:16-07:00
c61aa81c9b929a66f0c1db6cbe5d8548, Must listen for anyone interested in the arts!!!, Super excited to see this podcast grow. So many fun topics to talk about...Shari is really engaging. Definitely subscribing and would recommend to anyone interested in the arts!!, 5, F6BF5472689BD12, 2018-05-09T18:14:32-07:00
ad4f2bf69c72b8db75978423c25f379e, nauseatingly left, I'm a liberal myself, but its pretty obvious and annoying that they're trying to push their beliefs on the listeners. Get a more politically diverse production staff, we like to see issues from multiple point of views not just yours., 1, 1AB95B8E6E1309E, 2019-06-11T14:53:39-07:00

CREATE TABLE `categories` (
  podcast_id TEXT PRIMARY KEY REFERENCES podcasts(None),
  category TEXT PRIMARY KEY
);
Sample rows from `categories`:
c61aa81c9b929a66f0c1db6cbe5d8548, arts
c61aa81c9b929a66f0c1db6cbe5d8548, arts-performing-arts
c61aa81c9b929a66f0c1db6cbe5d8548, music

","podcasts, reviews","title, podcast_id"
movies_4,What are the top 5 most popular movie directors?,SELECT t3.person_name FROM movie as t1 inner JOIN movie_crew as t2 ON t1.movie_id = t2.movie_id inner JOIN person as t3 ON t2.person_id = t3.person_id WHERE t2.job = 'Director' ORDER BY t1.popularity DESC LIMIT 5,"CREATE TABLE `movie` (
  movie_id INTEGER,
  title TEXT,
  budget INTEGER,
  homepage TEXT,
  overview TEXT,
  popularity REAL,
  release_date DATE,
  revenue INTEGER,
  runtime INTEGER,
  movie_status TEXT,
  tagline TEXT,
  vote_average REAL,
  vote_count INTEGER
);
Sample rows from `movie`:
5, Four Rooms, 4000000, , It's Ted the Bellhop's first night on the job...and the hotel's very unusual guests are about to place him in some outrageous predicaments. It seems that this evening's room service is serving up one unbelievable happening after another., 22.87623, 1995-12-09, 4300000, 98, Released, Twelve outrageous guests. Four scandalous requests. And one lone bellhop, in his first day on the job, who's in for the wildest New year's Eve of his life., 6.5, 530
11, Star Wars, 11000000, http://www.starwars.com/films/star-wars-episode-iv-a-new-hope, Princess Leia is captured and held hostage by the evil Imperial forces in their effort to take over the galactic Empire. Venturesome Luke Skywalker and dashing captain Han Solo team together with the loveable robot duo R2-D2 and C-3PO to rescue the beauti, 126.393695, 1977-05-25, 775398007, 121, Released, A long time ago in a galaxy far, far away..., 8.1, 6624
12, Finding Nemo, 94000000, http://movies.disney.com/finding-nemo, Nemo, an adventurous young clownfish, is unexpectedly taken from his Great Barrier Reef home to a dentist's office aquarium. It's up to his worrisome father Marlin and a friendly but forgetful fish Dory to bring Nemo home -- meeting vegetarian sharks, sur, 85.688789, 2003-05-30, 940335536, 100, Released, There are 3.7 trillion fish in the ocean, they're looking for one., 7.6, 6122

CREATE TABLE `movie_crew` (
  movie_id INTEGER REFERENCES movie(movie_id),
  person_id INTEGER REFERENCES person(person_id),
  department_id INTEGER REFERENCES department(department_id),
  job TEXT
);
Sample rows from `movie_crew`:
285, 120, 1, Director of Photography
285, 1704, 2, Director
285, 770, 3, Producer

CREATE TABLE `person` (
  person_id INTEGER,
  person_name TEXT
);
Sample rows from `person`:
1, George Lucas
2, Mark Hamill
3, Harrison Ford

","CREATE TABLE `country` (
  country_id INTEGER,
  country_iso_code TEXT,
  country_name TEXT
);
Sample rows from `country`:
128, AE, United Arab Emirates
129, AF, Afghanistan
130, AO, Angola

CREATE TABLE `department` (
  department_id INTEGER,
  department_name TEXT
);
Sample rows from `department`:
1, Camera
2, Directing
3, Production

CREATE TABLE `gender` (
  gender_id INTEGER,
  gender TEXT
);
Sample rows from `gender`:
0, Unspecified
1, Female
2, Male

CREATE TABLE `genre` (
  genre_id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
12, Adventure
14, Fantasy
16, Animation

CREATE TABLE `keyword` (
  keyword_id INTEGER,
  keyword_name TEXT
);
Sample rows from `keyword`:
30, individual
65, holiday
74, germany

CREATE TABLE `language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `language`:
24574, en, English
24575, sv, svenska
24576, de, Deutsch

CREATE TABLE `language_role` (
  role_id INTEGER,
  language_role TEXT
);
Sample rows from `language_role`:
1, Original
2, Spoken

CREATE TABLE `movie` (
  movie_id INTEGER,
  title TEXT,
  budget INTEGER,
  homepage TEXT,
  overview TEXT,
  popularity REAL,
  release_date DATE,
  revenue INTEGER,
  runtime INTEGER,
  movie_status TEXT,
  tagline TEXT,
  vote_average REAL,
  vote_count INTEGER
);
Sample rows from `movie`:
5, Four Rooms, 4000000, , It's Ted the Bellhop's first night on the job...and the hotel's very unusual guests are about to place him in some outrageous predicaments. It seems that this evening's room service is serving up one unbelievable happening after another., 22.87623, 1995-12-09, 4300000, 98, Released, Twelve outrageous guests. Four scandalous requests. And one lone bellhop, in his first day on the job, who's in for the wildest New year's Eve of his life., 6.5, 530
11, Star Wars, 11000000, http://www.starwars.com/films/star-wars-episode-iv-a-new-hope, Princess Leia is captured and held hostage by the evil Imperial forces in their effort to take over the galactic Empire. Venturesome Luke Skywalker and dashing captain Han Solo team together with the loveable robot duo R2-D2 and C-3PO to rescue the beauti, 126.393695, 1977-05-25, 775398007, 121, Released, A long time ago in a galaxy far, far away..., 8.1, 6624
12, Finding Nemo, 94000000, http://movies.disney.com/finding-nemo, Nemo, an adventurous young clownfish, is unexpectedly taken from his Great Barrier Reef home to a dentist's office aquarium. It's up to his worrisome father Marlin and a friendly but forgetful fish Dory to bring Nemo home -- meeting vegetarian sharks, sur, 85.688789, 2003-05-30, 940335536, 100, Released, There are 3.7 trillion fish in the ocean, they're looking for one., 7.6, 6122

CREATE TABLE `movie_genres` (
  movie_id INTEGER REFERENCES movie(movie_id),
  genre_id INTEGER REFERENCES genre(genre_id)
);
Sample rows from `movie_genres`:
5, 35
5, 80
11, 12

CREATE TABLE `movie_languages` (
  movie_id INTEGER REFERENCES movie(movie_id),
  language_id INTEGER REFERENCES language(language_id),
  language_role_id INTEGER REFERENCES language_role(role_id)
);
Sample rows from `movie_languages`:
5, 24574, 2
11, 24574, 2
12, 24574, 2

CREATE TABLE `person` (
  person_id INTEGER,
  person_name TEXT
);
Sample rows from `person`:
1, George Lucas
2, Mark Hamill
3, Harrison Ford

CREATE TABLE `movie_crew` (
  movie_id INTEGER REFERENCES movie(movie_id),
  person_id INTEGER REFERENCES person(person_id),
  department_id INTEGER REFERENCES department(department_id),
  job TEXT
);
Sample rows from `movie_crew`:
285, 120, 1, Director of Photography
285, 1704, 2, Director
285, 770, 3, Producer

CREATE TABLE `production_company` (
  company_id INTEGER,
  company_name TEXT
);
Sample rows from `production_company`:
1, Lucasfilm
2, Walt Disney Pictures
3, Pixar Animation Studios

CREATE TABLE `production_country` (
  movie_id INTEGER REFERENCES movie(movie_id),
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `production_country`:
5, 214
11, 214
12, 214

CREATE TABLE `movie_cast` (
  movie_id INTEGER REFERENCES movie(movie_id),
  person_id INTEGER REFERENCES person(person_id),
  character_name TEXT,
  gender_id INTEGER REFERENCES gender(gender_id),
  cast_order INTEGER
);
Sample rows from `movie_cast`:
285, 85, Captain Jack Sparrow, 2, 0
285, 114, Will Turner, 2, 1
285, 116, Elizabeth Swann, 1, 2

CREATE TABLE `movie_keywords` (
  movie_id INTEGER REFERENCES movie(None),
  keyword_id INTEGER REFERENCES keyword(None)
);
Sample rows from `movie_keywords`:
5, 612
5, 613
5, 616

CREATE TABLE `movie_company` (
  movie_id INTEGER REFERENCES movie(None),
  company_id INTEGER REFERENCES production_company(None)
);
Sample rows from `movie_company`:
5, 14
5, 59
11, 1

","movie, movie_crew, person","person.person_name, movie.movie_id, movie_crew.movie_id, movie_crew.person_id, person.person_id, movie_crew.job, movie.popularity"
student_loan,State name of students who have been absent for 5 months from school and do not have payment due.,SELECT t1.name FROM longest_absense_from_school as t1 inner JOIN no_payment_due as t2 ON t1.name = t2.name WHERE t1.month = 5 AND t2.bool = 'neg',"CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

","longest_absense_from_school, no_payment_due","longest_absense_from_school.name, no_payment_due.name, longest_absense_from_school.month, no_payment_due.bool"
food_inspection_2,What are the names of the businesses that passed with conditions in May 2012?,"SELECT DISTINCT t2.dba_name FROM inspection as t1 inner JOIN establishment as t2 ON t1.license_no = t2.license_no WHERE strftime('%Y-%m', t1.inspection_date) = '2012-05' AND t1.results = 'Pass w/ Conditions'","CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

","CREATE TABLE `employee` (
  employee_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  phone TEXT,
  title TEXT,
  salary INTEGER,
  supervisor INTEGER REFERENCES employee(employee_id)
);
Sample rows from `employee`:
103705, Anastasia, Hansen, 6023 S Elizabeth St, Chicago, IL, 60636, (773) 424-8729, Sanitarian, 79300, 177316
104633, Joshua, Rosa, 5000 N Wolcott Ave, Chicago, IL, 60640, (773) 293-6409, Sanitarian, 82000, 186742
106581, Zach, Barber, 7522 N Oleander Ave, Chicago, IL, 60631, (219) 473-0757, Sanitarian, 79900, 179582

CREATE TABLE `establishment` (
  license_no INTEGER,
  dba_name TEXT,
  aka_name TEXT,
  facility_type TEXT,
  risk_level INTEGER,
  address TEXT,
  city TEXT,
  state TEXT,
  zip INTEGER,
  latitude REAL,
  longitude REAL,
  ward INTEGER
);
Sample rows from `establishment`:
1, HARVEST CRUSADES MINISTRIES, None, Special Event, 2, 118 N CENTRAL AVE , CHICAGO, IL, 60644, 41.8828450747188, -87.7650954520439, 29
2, COSI, None, Restaurant, 1, 230 W MONROE ST , CHICAGO, IL, 60606, 41.8807571586472, -87.6347092983425, 42
9, XANDO COFFEE & BAR / COSI SANDWICH BAR, None, Restaurant, 1, 116 S MICHIGAN AVE , CHICAGO, IL, 60603, 41.8803958382596, -87.6245017215946, 42

CREATE TABLE `inspection` (
  inspection_id INTEGER,
  inspection_date DATE,
  inspection_type TEXT,
  results TEXT,
  employee_id INTEGER REFERENCES employee(employee_id),
  license_no INTEGER REFERENCES establishment(license_no),
  followup_to INTEGER REFERENCES inspection(inspection_id)
);
Sample rows from `inspection`:
44247, 2010-01-05, Complaint, Pass, 141319, 1222441, None
44248, 2010-01-21, Canvass, Pass, 143902, 1336561, None
44249, 2010-01-21, Canvass Re-Inspection, Pass, 143487, 1334073, 67871

CREATE TABLE `inspection_point` (
  point_id INTEGER,
  Description TEXT,
  category TEXT,
  code TEXT,
  fine INTEGER,
  point_level TEXT
);
Sample rows from `inspection_point`:
1, Source sound condition, no spoilage, foods properly labeled, shellfish tags in place, Food Protection, 7-38-005 (B) (B-2), 500, Critical
2, Facilities to maintain proper temperature, Food Protection, 7-38-005 (B) (B-2), 500, Critical
3, Potentially hazardous food meets temperature requirement during storage, preparation display and service, Food Protection, 7-38-005 (A), 500, Critical

CREATE TABLE `violation` (
  inspection_id INTEGER PRIMARY KEY REFERENCES inspection(inspection_id),
  point_id INTEGER PRIMARY KEY REFERENCES inspection_point(point_id),
  fine INTEGER,
  inspector_comment TEXT
);
Sample rows from `violation`:
44247, 30, 100, All food not stored in the original container shall be stored in properly labeled containers.  OBSERVED SEVERAL FOODS IN COOLERS WITHOUT A LABEL AND DATE.  MUST LABEL AND DATE ALL PREPARED FOODS.
44247, 32, 100, OBSERVED TORN DOOR GASKET ON DOOR OF 'CHILL ISLE' REACH-IN COOLER.  MUST REPLACE.  OBSERVED EXPOSED INSULATION INSIDE OF THE 2 DOOR PREP COOLER.  MUST REPAIR.  REPLACE THE CRACKED LIGHT SHIELD IN THE REAR AREA OVER THE PREP TABLE.  OBSERVED CARDBOARD STORED INSIDE OF THE DRESSING COOLER AND ON WIRE RACKS IN THE BASEMENT WALK-IN COOLER.  MUST REMOVE CARDBOARD.
44247, 33, 100, All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  DETAIL CLEAN GREASE FROM ALL COKING EQUIPMENT.  DETAIL CLEAN THE LIGHT SHIELD IN THE FRONT PREP AREA.DETAIL CLEAN THE WIRE RACKS OF THE BASEMENT WALK-IN COOLER AND INTERIOR OF BASEMENT ICE CREAM FREEZER.

","inspection, establishment","establishment.dba_name, inspection.license_no, establishment.license_no, inspection.inspection_date, inspection.results"
retail_complains,How many male clients are from the state of Massachusetts?,SELECT COUNT(t3.sex) FROM state as t1 inner JOIN district as t2 ON t1.statecode = t2.state_abbrev inner JOIN client as t3 ON t2.district_id = t3.district_id WHERE t1.state = 'Massachusetts' AND t3.sex = 'Male',"CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

","CREATE TABLE `state` (
  StateCode TEXT PRIMARY KEY,
  State TEXT,
  Region TEXT
);
Sample rows from `state`:
AL, Alabama, South
AR, Arkansas, South
AZ, Arizona, West

CREATE TABLE `callcenterlogs` (
  Date received DATE,
  Complaint ID TEXT PRIMARY KEY,
  rand client TEXT REFERENCES client(client_id),
  phonefinal TEXT,
  vru+line TEXT,
  call_id INTEGER,
  priority INTEGER,
  type TEXT,
  outcome TEXT,
  server TEXT,
  ser_start TEXT,
  ser_exit TEXT,
  ser_time TEXT
);
Sample rows from `callcenterlogs`:
2017-03-27, CR2406263, C00004587, 977-806-9726, AA0103, 34536, 0, NW, AGENT, MICHAL, 13:34:11, 13:40:23, 00:06:12
2017-03-27, CR2405641, C00003328, 322-598-7152, AA0205, 34537, 0, PS, AGENT, TOVA, 10:58:22, 11:16:10, 00:17:48
2017-03-27, CR2405629, C00001685, 508-311-5237, AA0110, 34538, 2, PS, AGENT, YIFAT, 13:00:54, 13:13:31, 00:12:37

CREATE TABLE `client` (
  client_id TEXT PRIMARY KEY,
  sex TEXT,
  day INTEGER,
  month INTEGER,
  year INTEGER,
  age INTEGER,
  social TEXT,
  first TEXT,
  middle TEXT,
  last TEXT,
  phone TEXT,
  email TEXT,
  address_1 TEXT,
  address_2 TEXT,
  city TEXT,
  state TEXT,
  zipcode INTEGER,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `client`:
C00000001, Female, 13, 12, 1990, 29, 926-93-2157, Emma, Avaya, Smith, 367-171-6840, emma.smith@gmail.com, 387 Wellington Ave., Unit 1, Albuquerque, NM, 47246, 18
C00000002, Male, 4, 2, 1965, 54, 806-94-5725, Noah, Everest, Thompson, 212-423-7734, noah.thompson@gmail.com, 75 W. Berkshire St., None, New York City, NY, 10040, 1
C00000003, Female, 9, 10, 1960, 59, 614-70-9100, Olivia, Brooklynne, Johnson, 212-425-6932, olivia.johnson@outlook.com, 36 Second St., None, New York City, NY, 10162, 1

CREATE TABLE `district` (
  district_id INTEGER,
  city TEXT,
  state_abbrev TEXT REFERENCES state(StateCode),
  division TEXT
);
Sample rows from `district`:
1, New York City, NY, Middle Atlantic
2, Jacksonville, FL, South Atlantic
3, Columbus, OH, East North Central

CREATE TABLE `events` (
  Date received DATE,
  Product TEXT,
  Sub-product TEXT,
  Issue TEXT,
  Sub-issue TEXT,
  Consumer complaint narrative TEXT,
  Tags TEXT,
  Consumer consent provided? TEXT,
  Submitted via TEXT,
  Date sent to company TEXT,
  Company response to consumer TEXT,
  Timely response? TEXT,
  Consumer disputed? TEXT,
  Complaint ID TEXT PRIMARY KEY REFERENCES callcenterlogs(Complaint ID),
  Client_ID TEXT PRIMARY KEY REFERENCES client(client_id)
);
Sample rows from `events`:
2014-07-03, Bank account or service, Checking account, Deposits and withdrawals, None, None, None, N/A, Email, 2014-07-09, Closed with explanation, Yes, No, CR0922485, C00001925
2012-04-12, Bank account or service, Savings account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-13, Closed with relief, Yes, No, CR0057298, C00003141
2012-04-03, Bank account or service, Checking account, Account opening, closing, or management, None, None, None, N/A, Email, 2012-04-03, Closed without relief, Yes, No, CR0043811, C00000297

CREATE TABLE `reviews` (
  Date DATE PRIMARY KEY,
  Stars INTEGER,
  Reviews TEXT,
  Product TEXT,
  district_id INTEGER REFERENCES district(district_id)
);
Sample rows from `reviews`:
2017-10-04, 5, Great job, Eagle National! Each person was professional and helped us move through our refinance process smoothly. Thank you!, Eagle National Mortgage, 65
2017-10-02, 5, Matthew Richardson is professional and helpful. He helped us find the correct product for our mortgage. Thank you very much for the excellent service, Matthew!, Eagle National Mortgage, 66
2017-08-21, 5, We had a past experience with Eagle National Mortgage and would without question use again and again if needed!! Eagle went beyond the extra mile to not only right a wrong encountered from the servicer we were dealing on our previous loan, but they pulled together and found a viable option for us that ultimately saved us money. We would highly recommend Brad Thomka and the Eagle National Mortgage team for your mortgage needs. Sincerest thanks Eagle!! Ed & Lind, Eagle National Mortgage, 23

","state, district, client","client.sex, state.statecode, district.state_abbrev, district.district_id, client.district_id, state.state"
codebase_comments,"Provide the github address with the summary of method ""A test for Decompose
"".",SELECT t1.url FROM repo as t1 inner JOIN solution as t2 ON t1.id = t2.repoid inner JOIN method as t3 ON t2.id = t3.solutionid WHERE t3.summary = 'A test for Decompose',"CREATE TABLE `repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

CREATE TABLE `solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

CREATE TABLE `method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Method, 10860640
MethodParameter, 17514858
Repo, 156550

CREATE TABLE `Method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `Method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

CREATE TABLE `MethodParameter` (
  Id INTEGER,
  MethodId TEXT,
  Type TEXT,
  Name TEXT
);
Sample rows from `MethodParameter`:
1, 1, System.String, data
2, 2, System.Int32, i
3, 2, System.Int32, declstartpos

CREATE TABLE `Repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `Repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

CREATE TABLE `Solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `Solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

","repo, solution, method","repo.url, repo.id, solution.repoid, solution.id, method.solutionid, method.summary"
sales_in_weather,"Among the stores in weather station 14 in February 2014, which store had sold no less than 300 quantities for item number 44 in a single day?",SELECT t1.store_nbr FROM sales_in_weather as t1 inner JOIN relation as t2 ON t1.store_nbr = t2.store_nbr WHERE t2.station_nbr = 14 AND t1.`date` LIKE '%2014-02%' AND t1.item_nbr = 44 AND units >= 300,"CREATE TABLE `sales_in_weather` (
  date DATE PRIMARY KEY,
  store_nbr INTEGER PRIMARY KEY,
  item_nbr INTEGER PRIMARY KEY,
  units INTEGER
);
Sample rows from `sales_in_weather`:
2012-01-01, 1, 1, 0
2012-01-01, 1, 2, 0
2012-01-01, 1, 3, 0

CREATE TABLE `relation` (
  store_nbr INTEGER REFERENCES sales_in_weather(store_nbr),
  station_nbr INTEGER REFERENCES weather(station_nbr)
);
Sample rows from `relation`:
1, 1
2, 14
3, 7

","CREATE TABLE `sales_in_weather` (
  date DATE PRIMARY KEY,
  store_nbr INTEGER PRIMARY KEY,
  item_nbr INTEGER PRIMARY KEY,
  units INTEGER
);
Sample rows from `sales_in_weather`:
2012-01-01, 1, 1, 0
2012-01-01, 1, 2, 0
2012-01-01, 1, 3, 0

CREATE TABLE `weather` (
  station_nbr INTEGER PRIMARY KEY,
  date DATE PRIMARY KEY,
  tmax INTEGER,
  tmin INTEGER,
  tavg INTEGER,
  depart INTEGER,
  dewpoint INTEGER,
  wetbulb INTEGER,
  heat INTEGER,
  cool INTEGER,
  sunrise TEXT,
  sunset TEXT,
  codesum TEXT,
  snowfall REAL,
  preciptotal REAL,
  stnpressure REAL,
  sealevel REAL,
  resultspeed REAL,
  resultdir INTEGER,
  avgspeed REAL
);
Sample rows from `weather`:
1, 2012-01-01, 52, 31, 42, None, 36, 40, 23, 0, None, None, RA FZFG BR, None, 0.05, 29.78, 29.92, 3.6, 20, 4.6
1, 2012-01-02, 50, 31, 41, None, 26, 35, 24, 0, None, None,  , None, 0.01, 29.44, 29.62, 9.8, 24, 10.3
1, 2012-01-03, 32, 11, 22, None, 4, 18, 43, 0, None, None,  , None, 0.0, 29.67, 29.87, 10.8, 31, 11.6

CREATE TABLE `relation` (
  store_nbr INTEGER REFERENCES sales_in_weather(store_nbr),
  station_nbr INTEGER REFERENCES weather(station_nbr)
);
Sample rows from `relation`:
1, 1
2, 14
3, 7

","sales_in_weather, relation","sales_in_weather.store_nbr, relation.store_nbr, relation.station_nbr, sales_in_weather.date, sales_in_weather.item_nbr, units"
talkingdata,What is the most common age group among all device users?,"SELECt t.num FROM ( SELECt `group`, COUNT(`group`) as num FROM gender_age GROUP BY `group` ) t","CREATE TABLE `gender_age` (
  device_id INTEGER REFERENCES phone_brand_device_model2(device_id),
  gender TEXT,
  age INTEGER,
  group TEXT
);
Sample rows from `gender_age`:
-9221086586254644858, M, 29, M29-31
-9221079146476055829, None, None, None
-9221066489596332354, M, 31, M29-31

","CREATE TABLE `app_all` (
  app_id INTEGER
);
Sample rows from `app_all`:
-9223281467940916832
-9222877069545393219
-9222785464897897681

CREATE TABLE `app_events` (
  event_id INTEGER PRIMARY KEY REFERENCES events(event_id),
  app_id INTEGER PRIMARY KEY,
  is_installed INTEGER,
  is_active INTEGER
);
Sample rows from `app_events`:
2, -8942695423876075857, 1, 0
2, -8022267440849930066, 1, 0
2, -5720078949152207372, 1, 0

CREATE TABLE `app_events_relevant` (
  event_id INTEGER PRIMARY KEY REFERENCES events_relevant(event_id),
  app_id INTEGER PRIMARY KEY REFERENCES app_all(app_id),
  is_installed INTEGER,
  is_active INTEGER
);
Sample rows from `app_events_relevant`:
2, -8942695423876075857, 1, 0
2, -8022267440849930066, 1, 0
2, -5720078949152207372, 1, 0

CREATE TABLE `app_labels` (
  app_id INTEGER REFERENCES app_all(app_id),
  label_id INTEGER REFERENCES label_categories(label_id)
);
Sample rows from `app_labels`:
7324884708820027918, 251
-4494216993218550286, 251
6058196446775239644, 406

CREATE TABLE `events` (
  event_id INTEGER,
  device_id INTEGER,
  timestamp DATETIME,
  longitude REAL,
  latitude REAL
);
Sample rows from `events`:
1, 29182687948017175, 2016-05-01 00:55:25.0, 121.0, 31.0
2, -6401643145415154744, 2016-05-01 00:54:12.0, 104.0, 31.0
3, -4833982096941402721, 2016-05-01 00:08:05.0, 107.0, 30.0

CREATE TABLE `events_relevant` (
  event_id INTEGER,
  device_id INTEGER REFERENCES gender_age(device_id),
  timestamp DATETIME,
  longitude REAL,
  latitude REAL
);
Sample rows from `events_relevant`:
2, None, -8942695423876075857, 1.0, 0.0
6, None, -8764672938472212518, 1.0, 1.0
7, None, -9050100410106163077, 1.0, 0.0

CREATE TABLE `gender_age` (
  device_id INTEGER REFERENCES phone_brand_device_model2(device_id),
  gender TEXT,
  age INTEGER,
  group TEXT
);
Sample rows from `gender_age`:
-9221086586254644858, M, 29, M29-31
-9221079146476055829, None, None, None
-9221066489596332354, M, 31, M29-31

CREATE TABLE `gender_age_test` (
  device_id INTEGER
);
Sample rows from `gender_age_test`:
-9223321966609553846
-9223042152723782980
-9222896629442493034

CREATE TABLE `gender_age_train` (
  device_id INTEGER,
  gender TEXT,
  age INTEGER,
  group TEXT
);
Sample rows from `gender_age_train`:
-9223067244542181226, M, 24, M23-26
-9222956879900151005, M, 36, M32-38
-9222754701995937853, M, 29, M29-31

CREATE TABLE `label_categories` (
  label_id INTEGER,
  category TEXT
);
Sample rows from `label_categories`:
1, None
2, game-game type
3, game-Game themes

CREATE TABLE `phone_brand_device_model2` (
  device_id INTEGER PRIMARY KEY,
  phone_brand TEXT PRIMARY KEY,
  device_model TEXT PRIMARY KEY
);
Sample rows from `phone_brand_device_model2`:
-9223321966609553846, 小米, 红米note
-9223067244542181226, vivo, Y19T
-9223042152723782980, 小米, MI 3

CREATE TABLE `sample_submission` (
  device_id INTEGER,
  F23- REAL,
  F24-26 REAL,
  F27-28 REAL,
  F29-32 REAL,
  F33-42 REAL,
  F43+ REAL,
  M22- REAL,
  M23-26 REAL,
  M27-28 REAL,
  M29-31 REAL,
  M32-38 REAL,
  M39+ REAL
);
Sample rows from `sample_submission`:
-9223321966609553846, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833
-9223042152723782980, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833
-9222896629442493034, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833

",gender_age,group
movielens,How many female actors acted in the movies of year 4?,SELECT COUNT(t2.actorid) fROM movies as t1 inner JOIN movies2actors as t2 ON t1.movieid = t2.movieid inner JOIN actors as t3 ON t2.actorid = t3.actorid WHERE t3.a_gender = 'f' AND t1.year = 4,"CREATE TABLE `movies` (
  movieid INTEGER,
  year INTEGER,
  isEnglish TEXT,
  country TEXT,
  runningtime INTEGER
);
Sample rows from `movies`:
1672052, 3, T, other, 2
1672111, 4, T, other, 2
1672580, 4, T, USA, 3

CREATE TABLE `movies2actors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  actorid INTEGER PRIMARY KEY REFERENCES actors(None),
  cast_num INTEGER
);
Sample rows from `movies2actors`:
1672580, 981535, 0
1672946, 1094968, 0
1673647, 149985, 0

CREATE TABLE `actors` (
  actorid INTEGER,
  a_gender TEXT,
  a_quality INTEGER
);
Sample rows from `actors`:
4, M, 4
16, M, 0
28, M, 4

","CREATE TABLE `users` (
  userid INTEGER,
  age TEXT,
  u_gender TEXT,
  occupation TEXT
);
Sample rows from `users`:
1, 1, F, 2
2, 56, M, 3
3, 25, M, 2

CREATE TABLE `directors` (
  directorid INTEGER,
  d_quality INTEGER PRIMARY KEY,
  avg_revenue INTEGER PRIMARY KEY
);
Sample rows from `directors`:
67, 4, 1
92, 2, 3
284, 4, 0

CREATE TABLE `actors` (
  actorid INTEGER,
  a_gender TEXT,
  a_quality INTEGER
);
Sample rows from `actors`:
4, M, 4
16, M, 0
28, M, 4

CREATE TABLE `movies` (
  movieid INTEGER,
  year INTEGER,
  isEnglish TEXT,
  country TEXT,
  runningtime INTEGER
);
Sample rows from `movies`:
1672052, 3, T, other, 2
1672111, 4, T, other, 2
1672580, 4, T, USA, 3

CREATE TABLE `movies2actors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  actorid INTEGER PRIMARY KEY REFERENCES actors(None),
  cast_num INTEGER
);
Sample rows from `movies2actors`:
1672580, 981535, 0
1672946, 1094968, 0
1673647, 149985, 0

CREATE TABLE `movies2directors` (
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  directorid INTEGER PRIMARY KEY REFERENCES directors(None),
  genre TEXT
);
Sample rows from `movies2directors`:
1672111, 54934, Action
1672946, 188940, Action
1679461, 179783, Action

CREATE TABLE `u2base` (
  userid INTEGER PRIMARY KEY REFERENCES users(None),
  movieid INTEGER PRIMARY KEY REFERENCES movies(None),
  rating TEXT
);
Sample rows from `u2base`:
2, 1964242, 1
2, 2219779, 1
3, 1856939, 1

","movies, movies2actors, actors","movies2actors.actorid, movies.movieid, movies2actors.movieid, actors.actorid, actors.a_gender, movies.year"
authors,Indicate the number of authors affiliated with the organization named 'Arizona State University'.,SELECT COUNT(name) FROM author WHERE affiliation = 'Arizona State University',"CREATE TABLE `author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

","CREATE TABLE `Author` (
  Id INTEGER,
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `Author`:
9, Ernest Jordan, None
14, K. MORIBE, None
15, D. Jakominich, None

CREATE TABLE `Conference` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Conference`:
1, IADIS, International Association for Development of the Information Society, 
2, IADT, Issues and Applications of Database Technology, http://www.informatik.uni-trier.de/~ley/db/conf/iadt/index.html
4, , IBM Germany Scientific Symposium Series, http://www.informatik.uni-trier.de/~ley/db/conf/ibm/index.html

CREATE TABLE `Journal` (
  Id INTEGER,
  ShortName TEXT,
  FullName TEXT,
  HomePage TEXT
);
Sample rows from `Journal`:
1, ICOM, Zeitschrift Für Interaktive Und Kooperative Medien, http://www.i-com-media.de
2, AEPIA, Inteligencia Artificial,revista Iberoamericana De Inteligencia Artificial, http://aepia.dsic.upv.es/revista/
3, IBMRD, Ibm Journal of Research and Development, http://www-tr.watson.ibm.com/journal/rdindex.html

CREATE TABLE `Paper` (
  Id INTEGER,
  Title TEXT,
  Year INTEGER,
  ConferenceId INTEGER REFERENCES Conference(Id),
  JournalId INTEGER REFERENCES Journal(Id),
  Keyword TEXT
);
Sample rows from `Paper`:
1, Stitching videos streamed by mobile phones in real-time, 2009, 167, 0, mobile video capturing|real-time|video stitching
2, A nonlocal convection–diffusion equation, 2007, 0, 7234, Nonlocal diffusion; Convection–diffusion; Asymptotic behaviour
3, Area Effects in Cepaea, 1963, 0, 16867, None

CREATE TABLE `PaperAuthor` (
  PaperId INTEGER REFERENCES Paper(Id),
  AuthorId INTEGER REFERENCES Author(Id),
  Name TEXT,
  Affiliation TEXT
);
Sample rows from `PaperAuthor`:
4, 1456512, ADAM G. JONES, None
5, 1102257, Kazuo Iwama, Kyushu University 812 Fukuoka Japan 812 Fukuoka Japan
6, 1806301, Asgeir Finnseth, None

",author,"name, affiliation"
books,How many books were ordered by customer Kandy Adamec?,SELECT COUNT(*) FROM order_line as t1 inner JOIN cust_order as t2 ON t2.order_id = t1.order_id inner JOIN customer as t3 ON t3.customer_id = t2.customer_id WHERE t3.first_name = 'Kandy' AND t3.last_name = 'Adamec',"CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","order_line, cust_order, customer","cust_order.order_id, order_line.order_id, customer.customer_id, cust_order.customer_id, customer.first_name, customer.last_name"
car_retails,What is the average actual profit by 1937 Lincoln Berline?,SELECT SUM(t1.priceeach - t2.buyprice) / COUNT(*) FROM orderdetails as t1 inner JOIN products as t2 ON t1.productcode = t2.productcode WHERE t2.productname = '1937 Lincoln Berline',"CREATE TABLE `orderdetails` (
  orderNumber INTEGER PRIMARY KEY REFERENCES orders(None),
  productCode TEXT PRIMARY KEY REFERENCES products(None),
  quantityOrdered INTEGER,
  priceEach REAL,
  orderLineNumber INTEGER
);
Sample rows from `orderdetails`:
10100, S18_1749, 30, 136.0, 3
10100, S18_2248, 50, 55.09, 2
10100, S18_4409, 22, 75.46, 4

CREATE TABLE `products` (
  productCode TEXT PRIMARY KEY,
  productName TEXT,
  productLine TEXT REFERENCES productlines(productLine),
  productScale TEXT,
  productVendor TEXT,
  productDescription TEXT,
  quantityInStock INTEGER,
  buyPrice REAL,
  MSRP REAL
);
Sample rows from `products`:
S10_1678, 1969 Harley Davidson Ultimate Chopper, Motorcycles, 1:10, Min Lin Diecast, This replica features working kickstand, front suspension, gear-shift lever, footbrake lever, drive chain, wheels and steering. All parts are particularly delicate due to their precise scale and require special care and attention., 7933, 48.81, 95.7
S10_1949, 1952 Alpine Renault 1300, Classic Cars, 1:10, Classic Metal Creations, Turnable front wheels; steering function; detailed interior; detailed engine; opening hood; opening trunk; opening doors; and detailed chassis., 7305, 98.58, 214.3
S10_2016, 1996 Moto Guzzi 1100i, Motorcycles, 1:10, Highway 66 Mini Classics, Official Moto Guzzi logos and insignias, saddle bags located on side of motorcycle, detailed engine, working steering, working suspension, two leather seats, luggage rack, dual exhaust pipes, small saddle bag located on handle bars, two-tone paint with chrome accents, superior die-cast detail , rotating wheels , working kick stand, diecast metal with plastic parts and baked enamel finish., 6625, 68.99, 118.94

","CREATE TABLE `offices` (
  officeCode TEXT PRIMARY KEY,
  city TEXT,
  phone TEXT,
  addressLine1 TEXT,
  addressLine2 TEXT,
  state TEXT,
  country TEXT,
  postalCode TEXT,
  territory TEXT
);
Sample rows from `offices`:
1, San Francisco, +1 650 219 4782, 100 Market Street, Suite 300, CA, USA, 94080, NA
2, Boston, +1 215 837 0825, 1550 Court Place, Suite 102, MA, USA, 02107, NA
3, NYC, +1 212 555 3000, 523 East 53rd Street, apt. 5A, NY, USA, 10022, NA

CREATE TABLE `employees` (
  employeeNumber INTEGER,
  lastName TEXT,
  firstName TEXT,
  extension TEXT,
  email TEXT,
  officeCode TEXT REFERENCES offices(officeCode),
  reportsTo INTEGER REFERENCES employees(employeeNumber),
  jobTitle TEXT
);
Sample rows from `employees`:
1002, Murphy, Diane, x5800, dmurphy@classicmodelcars.com, 1, None, President
1056, Patterson, Mary, x4611, mpatterso@classicmodelcars.com, 1, 1002, VP Sales
1076, Firrelli, Jeff, x9273, jfirrelli@classicmodelcars.com, 1, 1002, VP Marketing

CREATE TABLE `customers` (
  customerNumber INTEGER,
  customerName TEXT,
  contactLastName TEXT,
  contactFirstName TEXT,
  phone TEXT,
  addressLine1 TEXT,
  addressLine2 TEXT,
  city TEXT,
  state TEXT,
  postalCode TEXT,
  country TEXT,
  salesRepEmployeeNumber INTEGER REFERENCES employees(employeeNumber),
  creditLimit REAL
);
Sample rows from `customers`:
103, Atelier graphique, Schmitt, Carine , 40.32.2555, 54, rue Royale, None, Nantes, None, 44000, France, 1370, 21000.0
112, Signal Gift Stores, King, Jean, 7025551838, 8489 Strong St., None, Las Vegas, NV, 83030, USA, 1166, 71800.0
114, Australian Collectors, Co., Ferguson, Peter, 03 9520 4555, 636 St Kilda Road, Level 3, Melbourne, Victoria, 3004, Australia, 1611, 117300.0

CREATE TABLE `orders` (
  orderNumber INTEGER,
  orderDate DATE,
  requiredDate DATE,
  shippedDate DATE,
  status TEXT,
  comments TEXT,
  customerNumber INTEGER REFERENCES customers(customerNumber)
);
Sample rows from `orders`:
10100, 2003-01-06, 2003-01-13, 2003-01-10, Shipped, None, 363
10101, 2003-01-09, 2003-01-18, 2003-01-11, Shipped, Check on availability., 128
10102, 2003-01-10, 2003-01-18, 2003-01-14, Shipped, None, 181

CREATE TABLE `payments` (
  customerNumber INTEGER PRIMARY KEY REFERENCES customers(customerNumber),
  checkNumber TEXT PRIMARY KEY,
  paymentDate DATE,
  amount REAL
);
Sample rows from `payments`:
103, HQ336336, 2004-10-19, 6066.78
103, JM555205, 2003-06-05, 14571.44
103, OM314933, 2004-12-18, 1676.14

CREATE TABLE `productlines` (
  productLine TEXT PRIMARY KEY,
  textDescription TEXT,
  htmlDescription TEXT,
  image BLOB
);
Sample rows from `productlines`:
Classic Cars, Attention car enthusiasts: Make your wildest car ownership dreams come true. Whether you are looking for classic muscle cars, dream sports cars or movie-inspired miniatures, you will find great choices in this category. These replicas feature superb atten, None, None
Motorcycles, Our motorcycles are state of the art replicas of classic as well as contemporary motorcycle legends such as Harley Davidson, Ducati and Vespa. Models contain stunning details such as official logos, rotating wheels, working kickstand, front suspension, ge, None, None
Planes, Unique, diecast airplane and helicopter replicas suitable for collections, as well as home, office or classroom decorations. Models contain stunning details such as official logos and insignias, rotating jet engines and propellers, retractable wheels, and, None, None

CREATE TABLE `products` (
  productCode TEXT PRIMARY KEY,
  productName TEXT,
  productLine TEXT REFERENCES productlines(productLine),
  productScale TEXT,
  productVendor TEXT,
  productDescription TEXT,
  quantityInStock INTEGER,
  buyPrice REAL,
  MSRP REAL
);
Sample rows from `products`:
S10_1678, 1969 Harley Davidson Ultimate Chopper, Motorcycles, 1:10, Min Lin Diecast, This replica features working kickstand, front suspension, gear-shift lever, footbrake lever, drive chain, wheels and steering. All parts are particularly delicate due to their precise scale and require special care and attention., 7933, 48.81, 95.7
S10_1949, 1952 Alpine Renault 1300, Classic Cars, 1:10, Classic Metal Creations, Turnable front wheels; steering function; detailed interior; detailed engine; opening hood; opening trunk; opening doors; and detailed chassis., 7305, 98.58, 214.3
S10_2016, 1996 Moto Guzzi 1100i, Motorcycles, 1:10, Highway 66 Mini Classics, Official Moto Guzzi logos and insignias, saddle bags located on side of motorcycle, detailed engine, working steering, working suspension, two leather seats, luggage rack, dual exhaust pipes, small saddle bag located on handle bars, two-tone paint with chrome accents, superior die-cast detail , rotating wheels , working kick stand, diecast metal with plastic parts and baked enamel finish., 6625, 68.99, 118.94

CREATE TABLE `orderdetails` (
  orderNumber INTEGER PRIMARY KEY REFERENCES orders(None),
  productCode TEXT PRIMARY KEY REFERENCES products(None),
  quantityOrdered INTEGER,
  priceEach REAL,
  orderLineNumber INTEGER
);
Sample rows from `orderdetails`:
10100, S18_1749, 30, 136.0, 3
10100, S18_2248, 50, 55.09, 2
10100, S18_4409, 22, 75.46, 4

","orderdetails, products","orderdetails.priceeach, products.buyprice, orderdetails.productcode, products.productcode, products.productname"
codebase_comments,"How many watchers does the path ""maff_se3ue7\US7.sln"" have?",SELECT t1.watchers FROM repo as t1 inner JOIN solution as t2 ON t1.id = t2.repoid WHERE t2.path = 'maff_se3ue7US7.sln',"CREATE TABLE `repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

CREATE TABLE `solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
Method, 10860640
MethodParameter, 17514858
Repo, 156550

CREATE TABLE `Method` (
  Id INTEGER,
  Name TEXT,
  FullComment TEXT,
  Summary TEXT,
  ApiCalls TEXT,
  CommentIsXml INTEGER,
  SampledAt INTEGER,
  SolutionId INTEGER,
  Lang TEXT,
  NameTokenized TEXT
);
Sample rows from `Method`:
1, HtmlSharp.HtmlParser.Feed, Feeds data into the parser, None, System.String.IsNullOrEmpty HtmlSharp.HtmlParser.GoAhead HtmlSharp.HtmlParser.EndData HtmlSharp.HtmlParser.PopTag, 0, 636430963695654788, 1, None, html parser feed
2, HtmlSharp.HtmlParser.ParseDoctypeElement,  interneral -- scan past <!ELEMENT declarations, None, HtmlSharp.HtmlParser.ScanName System.Collections.Generic.KeyValuePair.Value System.String.Substring System.String.Contains System.StringComparison.Ordinal System.String.IndexOf, 0, 636430963695709898, 1, None, html parser parse doctype element
3, IQ.Data.DbQueryProvider.GetQueryText,  <summary>
        /// Converts the query expression into text that corresponds to the command that would be executed.
        /// Useful for debugging.
        /// </summary>
        /// <param name=""expression""></param>
        /// <returns></returns>
, Converts the query expression into text that corresponds to the command that would be executed.  Useful for debugging., IQ.Data.DbQueryProvider.Translate IQ.Data.QueryLanguage.Format IQ.Data.SelectGatherer.Gather System.Collections.ObjectModel.ReadOnlyCollection.Select System.Collections.Generic.IEnumerable.ToArray System.String.Join, 1, 636430963721734366, 2, en, db query provider get query text

CREATE TABLE `MethodParameter` (
  Id INTEGER,
  MethodId TEXT,
  Type TEXT,
  Name TEXT
);
Sample rows from `MethodParameter`:
1, 1, System.String, data
2, 2, System.Int32, i
3, 2, System.Int32, declstartpos

CREATE TABLE `Repo` (
  Id INTEGER,
  Url TEXT,
  Stars INTEGER,
  Forks INTEGER,
  Watchers INTEGER,
  ProcessedTime INTEGER
);
Sample rows from `Repo`:
1, https://github.com/wallerdev/htmlsharp.git, 14, 2, 14, 636430963247108053
2, https://github.com/unclebob/nslim.git, 6, 3, 6, 636472436323838240
3, https://github.com/maravillas/linq-to-delicious.git, 6, 0, 6, 636430963280029575

CREATE TABLE `Solution` (
  Id INTEGER,
  RepoId INTEGER,
  Path TEXT,
  ProcessedTime INTEGER,
  WasCompiled INTEGER
);
Sample rows from `Solution`:
1, 1, wallerdev_htmlsharp\HtmlSharp.sln, 636430963695642191, 1
2, 3, maravillas_linq-to-delicious\tasty.sln, 636430963721734366, 1
3, 4, mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln, 636430963735704849, 1

","repo, solution","repo.watchers, repo.id, solution.repoid, solution.path"
movies_4,How many movies released in 1995 did Quentin Tarantino appear in?,"SELECT COUNT(t1.movie_id) FROM movie as t1 inner JOIN movie_cast as t2 ON t1.movie_id = t2.movie_id inner JOIN person as t3 ON t2.person_id = t3.person_id WHERE t3.person_name = 'Quentin Tarantino' AND CasT(strftime('%Y', t1.release_date) as int) = 1995","CREATE TABLE `movie` (
  movie_id INTEGER,
  title TEXT,
  budget INTEGER,
  homepage TEXT,
  overview TEXT,
  popularity REAL,
  release_date DATE,
  revenue INTEGER,
  runtime INTEGER,
  movie_status TEXT,
  tagline TEXT,
  vote_average REAL,
  vote_count INTEGER
);
Sample rows from `movie`:
5, Four Rooms, 4000000, , It's Ted the Bellhop's first night on the job...and the hotel's very unusual guests are about to place him in some outrageous predicaments. It seems that this evening's room service is serving up one unbelievable happening after another., 22.87623, 1995-12-09, 4300000, 98, Released, Twelve outrageous guests. Four scandalous requests. And one lone bellhop, in his first day on the job, who's in for the wildest New year's Eve of his life., 6.5, 530
11, Star Wars, 11000000, http://www.starwars.com/films/star-wars-episode-iv-a-new-hope, Princess Leia is captured and held hostage by the evil Imperial forces in their effort to take over the galactic Empire. Venturesome Luke Skywalker and dashing captain Han Solo team together with the loveable robot duo R2-D2 and C-3PO to rescue the beauti, 126.393695, 1977-05-25, 775398007, 121, Released, A long time ago in a galaxy far, far away..., 8.1, 6624
12, Finding Nemo, 94000000, http://movies.disney.com/finding-nemo, Nemo, an adventurous young clownfish, is unexpectedly taken from his Great Barrier Reef home to a dentist's office aquarium. It's up to his worrisome father Marlin and a friendly but forgetful fish Dory to bring Nemo home -- meeting vegetarian sharks, sur, 85.688789, 2003-05-30, 940335536, 100, Released, There are 3.7 trillion fish in the ocean, they're looking for one., 7.6, 6122

CREATE TABLE `movie_cast` (
  movie_id INTEGER REFERENCES movie(movie_id),
  person_id INTEGER REFERENCES person(person_id),
  character_name TEXT,
  gender_id INTEGER REFERENCES gender(gender_id),
  cast_order INTEGER
);
Sample rows from `movie_cast`:
285, 85, Captain Jack Sparrow, 2, 0
285, 114, Will Turner, 2, 1
285, 116, Elizabeth Swann, 1, 2

CREATE TABLE `person` (
  person_id INTEGER,
  person_name TEXT
);
Sample rows from `person`:
1, George Lucas
2, Mark Hamill
3, Harrison Ford

","CREATE TABLE `country` (
  country_id INTEGER,
  country_iso_code TEXT,
  country_name TEXT
);
Sample rows from `country`:
128, AE, United Arab Emirates
129, AF, Afghanistan
130, AO, Angola

CREATE TABLE `department` (
  department_id INTEGER,
  department_name TEXT
);
Sample rows from `department`:
1, Camera
2, Directing
3, Production

CREATE TABLE `gender` (
  gender_id INTEGER,
  gender TEXT
);
Sample rows from `gender`:
0, Unspecified
1, Female
2, Male

CREATE TABLE `genre` (
  genre_id INTEGER,
  genre_name TEXT
);
Sample rows from `genre`:
12, Adventure
14, Fantasy
16, Animation

CREATE TABLE `keyword` (
  keyword_id INTEGER,
  keyword_name TEXT
);
Sample rows from `keyword`:
30, individual
65, holiday
74, germany

CREATE TABLE `language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `language`:
24574, en, English
24575, sv, svenska
24576, de, Deutsch

CREATE TABLE `language_role` (
  role_id INTEGER,
  language_role TEXT
);
Sample rows from `language_role`:
1, Original
2, Spoken

CREATE TABLE `movie` (
  movie_id INTEGER,
  title TEXT,
  budget INTEGER,
  homepage TEXT,
  overview TEXT,
  popularity REAL,
  release_date DATE,
  revenue INTEGER,
  runtime INTEGER,
  movie_status TEXT,
  tagline TEXT,
  vote_average REAL,
  vote_count INTEGER
);
Sample rows from `movie`:
5, Four Rooms, 4000000, , It's Ted the Bellhop's first night on the job...and the hotel's very unusual guests are about to place him in some outrageous predicaments. It seems that this evening's room service is serving up one unbelievable happening after another., 22.87623, 1995-12-09, 4300000, 98, Released, Twelve outrageous guests. Four scandalous requests. And one lone bellhop, in his first day on the job, who's in for the wildest New year's Eve of his life., 6.5, 530
11, Star Wars, 11000000, http://www.starwars.com/films/star-wars-episode-iv-a-new-hope, Princess Leia is captured and held hostage by the evil Imperial forces in their effort to take over the galactic Empire. Venturesome Luke Skywalker and dashing captain Han Solo team together with the loveable robot duo R2-D2 and C-3PO to rescue the beauti, 126.393695, 1977-05-25, 775398007, 121, Released, A long time ago in a galaxy far, far away..., 8.1, 6624
12, Finding Nemo, 94000000, http://movies.disney.com/finding-nemo, Nemo, an adventurous young clownfish, is unexpectedly taken from his Great Barrier Reef home to a dentist's office aquarium. It's up to his worrisome father Marlin and a friendly but forgetful fish Dory to bring Nemo home -- meeting vegetarian sharks, sur, 85.688789, 2003-05-30, 940335536, 100, Released, There are 3.7 trillion fish in the ocean, they're looking for one., 7.6, 6122

CREATE TABLE `movie_genres` (
  movie_id INTEGER REFERENCES movie(movie_id),
  genre_id INTEGER REFERENCES genre(genre_id)
);
Sample rows from `movie_genres`:
5, 35
5, 80
11, 12

CREATE TABLE `movie_languages` (
  movie_id INTEGER REFERENCES movie(movie_id),
  language_id INTEGER REFERENCES language(language_id),
  language_role_id INTEGER REFERENCES language_role(role_id)
);
Sample rows from `movie_languages`:
5, 24574, 2
11, 24574, 2
12, 24574, 2

CREATE TABLE `person` (
  person_id INTEGER,
  person_name TEXT
);
Sample rows from `person`:
1, George Lucas
2, Mark Hamill
3, Harrison Ford

CREATE TABLE `movie_crew` (
  movie_id INTEGER REFERENCES movie(movie_id),
  person_id INTEGER REFERENCES person(person_id),
  department_id INTEGER REFERENCES department(department_id),
  job TEXT
);
Sample rows from `movie_crew`:
285, 120, 1, Director of Photography
285, 1704, 2, Director
285, 770, 3, Producer

CREATE TABLE `production_company` (
  company_id INTEGER,
  company_name TEXT
);
Sample rows from `production_company`:
1, Lucasfilm
2, Walt Disney Pictures
3, Pixar Animation Studios

CREATE TABLE `production_country` (
  movie_id INTEGER REFERENCES movie(movie_id),
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `production_country`:
5, 214
11, 214
12, 214

CREATE TABLE `movie_cast` (
  movie_id INTEGER REFERENCES movie(movie_id),
  person_id INTEGER REFERENCES person(person_id),
  character_name TEXT,
  gender_id INTEGER REFERENCES gender(gender_id),
  cast_order INTEGER
);
Sample rows from `movie_cast`:
285, 85, Captain Jack Sparrow, 2, 0
285, 114, Will Turner, 2, 1
285, 116, Elizabeth Swann, 1, 2

CREATE TABLE `movie_keywords` (
  movie_id INTEGER REFERENCES movie(None),
  keyword_id INTEGER REFERENCES keyword(None)
);
Sample rows from `movie_keywords`:
5, 612
5, 613
5, 616

CREATE TABLE `movie_company` (
  movie_id INTEGER REFERENCES movie(None),
  company_id INTEGER REFERENCES production_company(None)
);
Sample rows from `movie_company`:
5, 14
5, 59
11, 1

","movie, movie_cast, person","movie.movie_id, movie_cast.movie_id, movie_cast.person_id, person.person_id, person.person_name, movie.release_date"
olympics,Calculate the bmi of the competitor id 147420.,SELECT cast(t1.weight as real) / (t1.height * t1.height) FROM person as t1 inner JOIN games_competitor as t2 ON t1.id = t2.person_id WHERE t2.id = 147420,"CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

","CREATE TABLE `city` (
  id INTEGER,
  city_name TEXT
);
Sample rows from `city`:
1, Barcelona
2, London
3, Antwerpen

CREATE TABLE `games` (
  id INTEGER,
  games_year INTEGER,
  games_name TEXT,
  season TEXT
);
Sample rows from `games`:
1, 1992, 1992 Summer, Summer
2, 2012, 2012 Summer, Summer
3, 1920, 1920 Summer, Summer

CREATE TABLE `games_city` (
  games_id INTEGER REFERENCES games(id),
  city_id INTEGER REFERENCES city(id)
);
Sample rows from `games_city`:
1, 1
2, 2
3, 3

CREATE TABLE `medal` (
  id INTEGER,
  medal_name TEXT
);
Sample rows from `medal`:
1, Gold
2, Silver
3, Bronze

CREATE TABLE `noc_region` (
  id INTEGER,
  noc TEXT,
  region_name TEXT
);
Sample rows from `noc_region`:
1, AFG, Afghanistan
2, AHO, Netherlands Antilles
3, ALB, Albania

CREATE TABLE `person` (
  id INTEGER,
  full_name TEXT,
  gender TEXT,
  height INTEGER,
  weight INTEGER
);
Sample rows from `person`:
1, A Dijiang, M, 180, 80
2, A Lamusi, M, 170, 60
3, Gunnar Nielsen Aaby, M, 0, 0

CREATE TABLE `games_competitor` (
  id INTEGER,
  games_id INTEGER REFERENCES games(id),
  person_id INTEGER REFERENCES person(id),
  age INTEGER
);
Sample rows from `games_competitor`:
1, 1, 1, 24
2, 2, 2, 23
3, 3, 3, 24

CREATE TABLE `person_region` (
  person_id INTEGER REFERENCES person(id),
  region_id INTEGER REFERENCES noc_region(id)
);
Sample rows from `person_region`:
1, 42
2, 42
3, 56

CREATE TABLE `sport` (
  id INTEGER,
  sport_name TEXT
);
Sample rows from `sport`:
1, Aeronautics
2, Alpine Skiing
3, Alpinism

CREATE TABLE `event` (
  id INTEGER,
  sport_id INTEGER REFERENCES sport(id),
  event_name TEXT
);
Sample rows from `event`:
1, 9, Basketball Men's Basketball
2, 33, Judo Men's Extra-Lightweight
3, 25, Football Men's Football

CREATE TABLE `competitor_event` (
  event_id INTEGER REFERENCES event(id),
  competitor_id INTEGER REFERENCES games_competitor(id),
  medal_id INTEGER REFERENCES medal(id)
);
Sample rows from `competitor_event`:
1, 1, 4
2, 2, 4
3, 3, 4

","person, games_competitor","person.weight, person.height, person.id, games_competitor.person_id, games_competitor.id"
books,What is the total price of all the books ordered by Lucas Wyldbore?,SELECT SUM(t1.price) FROM order_line as t1 inner JOIN cust_order as t2 ON t2.order_id = t1.order_id inner JOIN customer as t3 ON t3.customer_id = t2.customer_id WHERE t3.first_name = 'Lucas' AND t3.last_name = 'Wyldbore',"CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","order_line, cust_order, customer","order_line.price, cust_order.order_id, order_line.order_id, customer.customer_id, cust_order.customer_id, customer.first_name, customer.last_name"
social_media,Please list all the cities in Argentina.,SELECT city FROM location WHERE city is NOT null AND country = 'Argentina',"CREATE TABLE `location` (
  LocationID INTEGER,
  Country TEXT,
  State TEXT,
  StateCode TEXT,
  City TEXT
);
Sample rows from `location`:
1, Albania, Elbasan, AL, Elbasan
2, Albania, Tirane, AL, Tirana
3, Algeria, Souk Ahras, DZ, Souk Ahras

","CREATE TABLE `location` (
  LocationID INTEGER,
  Country TEXT,
  State TEXT,
  StateCode TEXT,
  City TEXT
);
Sample rows from `location`:
1, Albania, Elbasan, AL, Elbasan
2, Albania, Tirane, AL, Tirana
3, Algeria, Souk Ahras, DZ, Souk Ahras

CREATE TABLE `user` (
  UserID TEXT PRIMARY KEY,
  Gender TEXT
);
Sample rows from `user`:
tw-1267804344, Unknown
tw-27229880, Male
tw-199664730, Male

CREATE TABLE `twitter` (
  TweetID TEXT PRIMARY KEY,
  Weekday TEXT,
  Hour INTEGER,
  Day INTEGER,
  Lang TEXT,
  IsReshare TEXT,
  Reach INTEGER,
  RetweetCount INTEGER,
  Likes INTEGER,
  Klout INTEGER,
  Sentiment REAL,
  text TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  UserID TEXT REFERENCES user(UserID)
);
Sample rows from `twitter`:
tw-682712873332805633, Thursday, 17, 31, en, FALSE, 44, 0, 0, 35, 0.0, We are hiring: Senior Software Engineer - Proto http://www.reqcloud.com/jobs/719865/?k=0LaPxXuFwczs1e32ZURJKrgCIDMQtRO7BquFSQthUKY&utm_source=twitter&utm_campaign=reqCloud_JobPost #job @awscloud #job #protocol #networking #aws #mediastreaming, 3751, tw-40932430
tw-682713045357998080, Thursday, 17, 31, en, TRUE, 1810, 5, 0, 53, 2.0, RT @CodeMineStatus: This is true Amazon Web Services https://aws.amazon.com/ #php #html #html5 #css #webdesign #seo #java #javascript htt, 3989, tw-3179389829
tw-682713219375476736, Thursday, 17, 31, en, FALSE, 282, 0, 0, 47, 0.0, Devops Engineer Aws Ansible Cassandra Mysql Ubuntu Ruby On Rails Jobs in Austin TX #Austin #TX #jobs #jobsearch https://www.jobfindly.com/devops-engineer-aws-ansible-cassandra-mysql-ubuntu-ruby-on-rails-jobs-austin-tx.html, 3741, tw-4624808414

",location,"city, country"
image_and_language,List all the IDs of images that have objects with the attributes of 'wired'.,SELECT DISTINCT t2.img_id FROM att_classes as t1 inner JOIN img_obj_att as t2 ON t1.ATT_CLasS_ID = t2.ATT_CLasS_ID WHERE t1.ATT_CLasS = 'wired',"CREATE TABLE `att_classes` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `att_classes`:
0, building s
1, indoors
2, cluttered

CREATE TABLE `img_obj_att` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `img_obj_att`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

","CREATE TABLE `ATT_CLASSES` (
  ATT_CLASS_ID INTEGER,
  ATT_CLASS TEXT
);
Sample rows from `ATT_CLASSES`:
0, building s
1, indoors
2, cluttered

CREATE TABLE `OBJ_CLASSES` (
  OBJ_CLASS_ID INTEGER,
  OBJ_CLASS TEXT
);
Sample rows from `OBJ_CLASSES`:
0, awning
1, goggles
2, dot

CREATE TABLE `IMG_OBJ` (
  IMG_ID INTEGER PRIMARY KEY,
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY,
  OBJ_CLASS_ID INTEGER REFERENCES OBJ_CLASSES(OBJ_CLASS_ID),
  X INTEGER,
  Y INTEGER,
  W INTEGER,
  H INTEGER
);
Sample rows from `IMG_OBJ`:
1, 1, 298, 0, 0, 799, 557
1, 2, 246, 78, 308, 722, 290
1, 3, 293, 1, 0, 222, 538

CREATE TABLE `IMG_OBJ_ATT` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID),
  ATT_CLASS_ID INTEGER PRIMARY KEY REFERENCES ATT_CLASSES(ATT_CLASS_ID),
  OBJ_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_OBJ_ATT`:
1113, 0, 21
1113, 0, 22
1113, 0, 23

CREATE TABLE `PRED_CLASSES` (
  PRED_CLASS_ID INTEGER,
  PRED_CLASS TEXT
);
Sample rows from `PRED_CLASSES`:
0, playing on
1, looking a
2, to left of

CREATE TABLE `IMG_REL` (
  IMG_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(IMG_ID) REFERENCES IMG_OBJ(IMG_ID),
  PRED_CLASS_ID INTEGER PRIMARY KEY REFERENCES PRED_CLASSES(PRED_CLASS_ID),
  OBJ1_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID),
  OBJ2_SAMPLE_ID INTEGER PRIMARY KEY REFERENCES IMG_OBJ(OBJ_SAMPLE_ID)
);
Sample rows from `IMG_REL`:
675, 0, 13, 1
1193, 0, 12, 34
3447, 0, 4, 5

","att_classes, img_obj_att","img_obj_att.img_id, att_classes.ATT_CLasS_ID, img_obj_att.ATT_CLasS_ID, att_classes.ATT_CLasS"
retails,What is the discounted price of line item number 1?,SELECT l_extendedprice * (1 - l_discount) FROM lineitem WHERE l_linenumber = 1,"CREATE TABLE `lineitem` (
  l_shipdate DATE,
  l_orderkey INTEGER PRIMARY KEY REFERENCES orders(o_orderkey),
  l_discount REAL,
  l_extendedprice REAL,
  l_suppkey INTEGER REFERENCES partsupp(ps_suppkey),
  l_quantity INTEGER,
  l_returnflag TEXT,
  l_partkey INTEGER REFERENCES partsupp(ps_partkey),
  l_linestatus TEXT,
  l_tax REAL,
  l_commitdate DATE,
  l_receiptdate DATE,
  l_shipmode TEXT,
  l_linenumber INTEGER PRIMARY KEY,
  l_shipinstruct TEXT,
  l_comment TEXT
);
Sample rows from `lineitem`:
1995-08-16, 1, 0.1, 58303.08, 6296, 33, N, 98768, O, 0.06, 1995-07-12, 1995-09-14, RAIL, 1, NONE, carefully bo
1995-08-13, 1, 0.09, 16947.7, 8776, 10, N, 23771, O, 0.08, 1995-07-09, 1995-08-27, TRUCK, 2, TAKE BACK RETURN, blithely regular pac
1995-06-17, 1, 0.1, 63642.9, 3859, 34, N, 113858, O, 0.08, 1995-05-22, 1995-06-30, SHIP, 3, COLLECT COD, ironic accounts sleep furiously silen

","CREATE TABLE `customer` (
  c_custkey INTEGER,
  c_mktsegment TEXT,
  c_nationkey INTEGER REFERENCES nation(n_nationkey),
  c_name TEXT,
  c_address TEXT,
  c_phone TEXT,
  c_acctbal REAL,
  c_comment TEXT
);
Sample rows from `customer`:
1, BUILDING, 8, Customer#000000001, KwX3hMHjZ6, 937-241-3198, 3560.03, ironic excuses detect slyly silent requests. requests according to the exc
2, MACHINERY, 16, Customer#000000002, ioUn,eqTTXOdo, 906-965-7556, 7550.21, final express accounts mold slyly. ironic accounts cajole! quickly express a
3, FURNITURE, 11, Customer#000000003, YddJqmIdouNT9Yj, 328-750-7603, -926.96, carefully express foxes sleep carefully. pending platelets sleep thinly for t

CREATE TABLE `lineitem` (
  l_shipdate DATE,
  l_orderkey INTEGER PRIMARY KEY REFERENCES orders(o_orderkey),
  l_discount REAL,
  l_extendedprice REAL,
  l_suppkey INTEGER REFERENCES partsupp(ps_suppkey),
  l_quantity INTEGER,
  l_returnflag TEXT,
  l_partkey INTEGER REFERENCES partsupp(ps_partkey),
  l_linestatus TEXT,
  l_tax REAL,
  l_commitdate DATE,
  l_receiptdate DATE,
  l_shipmode TEXT,
  l_linenumber INTEGER PRIMARY KEY,
  l_shipinstruct TEXT,
  l_comment TEXT
);
Sample rows from `lineitem`:
1995-08-16, 1, 0.1, 58303.08, 6296, 33, N, 98768, O, 0.06, 1995-07-12, 1995-09-14, RAIL, 1, NONE, carefully bo
1995-08-13, 1, 0.09, 16947.7, 8776, 10, N, 23771, O, 0.08, 1995-07-09, 1995-08-27, TRUCK, 2, TAKE BACK RETURN, blithely regular pac
1995-06-17, 1, 0.1, 63642.9, 3859, 34, N, 113858, O, 0.08, 1995-05-22, 1995-06-30, SHIP, 3, COLLECT COD, ironic accounts sleep furiously silen

CREATE TABLE `nation` (
  n_nationkey INTEGER,
  n_name TEXT,
  n_regionkey INTEGER REFERENCES region(r_regionkey),
  n_comment TEXT
);
Sample rows from `nation`:
0, ALGERIA, 0, slyly express pinto beans cajole idly. deposits use blithely unusual packages? fluffily final accounts x-r
1, ARGENTINA, 1, instructions detect blithely stealthily pending packages
2, BRAZIL, 1, blithely unusual deposits are quickly--

CREATE TABLE `orders` (
  o_orderdate DATE,
  o_orderkey INTEGER,
  o_custkey INTEGER REFERENCES customer(c_custkey),
  o_orderpriority TEXT,
  o_shippriority INTEGER,
  o_clerk TEXT,
  o_orderstatus TEXT,
  o_totalprice REAL,
  o_comment TEXT
);
Sample rows from `orders`:
1995-04-19, 1, 73100, 4-NOT SPECIFIED, 0, Clerk#000000916, P, 203198.56, final packages sleep blithely packa
1996-11-04, 2, 92861, 1-URGENT, 0, Clerk#000000373, O, 317719.99, final excuses about the ironic even deposits detect express request
1992-02-15, 3, 44875, 1-URGENT, 0, Clerk#000000485, F, 146674.98, final final deposits cajole foxes. blithely pendin

CREATE TABLE `part` (
  p_partkey INTEGER,
  p_type TEXT,
  p_size INTEGER,
  p_brand TEXT,
  p_name TEXT,
  p_container TEXT,
  p_mfgr TEXT,
  p_retailprice REAL,
  p_comment TEXT
);
Sample rows from `part`:
1, LARGE PLATED TIN, 31, Brand#43, burlywood plum powder puff mint, LG BAG, Manufacturer#4, 901.0, blithely busy reque
2, LARGE POLISHED STEEL, 4, Brand#55, hot spring dodger dim light, LG CASE, Manufacturer#5, 902.0, even ironic requests s
3, STANDARD PLATED COPPER, 30, Brand#53, dark slate grey steel misty, WRAP CASE, Manufacturer#5, 903.0, slyly ironic fox

CREATE TABLE `partsupp` (
  ps_partkey INTEGER PRIMARY KEY REFERENCES part(p_partkey),
  ps_suppkey INTEGER PRIMARY KEY REFERENCES supplier(s_suppkey),
  ps_supplycost REAL,
  ps_availqty INTEGER,
  ps_comment TEXT
);
Sample rows from `partsupp`:
1, 2, 400.75, 1111, carefully ironic deposits use against the carefully unusual accounts. slyly silent platelets nag quickly even
1, 2502, 702.61, 3999, slyly regular accounts serve carefully. asymptotes after the slyly even instructions cajole quickly ironic requests. pending dugouts about the slyly 
1, 5002, 383.95, 7411, carefully special ideas are slyly. slyly ironic epitaphs use pending pending foxes. furiously express pinto beans lose quiet even requests: special final packages ar

CREATE TABLE `region` (
  r_regionkey INTEGER,
  r_name TEXT,
  r_comment TEXT
);
Sample rows from `region`:
0, AFRICA, asymptotes sublate after the r
1, AMERICA, requests affix quickly final tithes. blithely even packages above the a
2, ASIA, accounts cajole carefully according to the carefully exp

CREATE TABLE `supplier` (
  s_suppkey INTEGER,
  s_nationkey INTEGER REFERENCES nation(n_nationkey),
  s_comment TEXT,
  s_name TEXT,
  s_address TEXT,
  s_phone TEXT,
  s_acctbal REAL
);
Sample rows from `supplier`:
1, 13, blithely final pearls are. instructions thra, Supplier#000000001, ,wWs4pnykQOFl8mgVCU8EZMXqZs1w, 800-807-9579, 3082.86
2, 5, requests integrate fluffily. fluffily ironic deposits wake. bold, Supplier#000000002, WkXT6MSAJrp4qWq3W9N, 348-617-6055, 3009.73
3, 22, carefully express ideas shall have to unwin, Supplier#000000003, KjUqa42JEHaRDVQTHV6Yq2h, 471-986-9888, 9159.78

",lineitem,"l_extendedprice, l_discount, l_linenumber"
student_loan,List all the organisations of students who filed for bankcrupcy.,SELECT t2.organ FROM filed_for_bankrupcy as t1 inner JOIN enlist as t2 ON t1.name = t2.name,"CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

","filed_for_bankrupcy, enlist","enlist.organ, filed_for_bankrupcy.name, enlist.name"
cars,Calculate the percentage of cars that belong to the USA.,SELECT cast(SUM(case when t2.country = 'USA' then 1 else 0 end) as real) * 100 / COUNT(*) FROM production as t1 inner JOIN country as t2 ON t1.country = t2.origin,"CREATE TABLE `production` (
  ID INTEGER PRIMARY KEY REFERENCES price(ID) REFERENCES data(ID),
  model_year INTEGER PRIMARY KEY,
  country INTEGER REFERENCES country(origin)
);
Sample rows from `production`:
1, 1970, 1
1, 1971, 1
2, 1970, 1

CREATE TABLE `country` (
  origin INTEGER,
  country TEXT
);
Sample rows from `country`:
1, USA
2, Europe
3, Japan

","CREATE TABLE `country` (
  origin INTEGER,
  country TEXT
);
Sample rows from `country`:
1, USA
2, Europe
3, Japan

CREATE TABLE `price` (
  ID INTEGER,
  price REAL
);
Sample rows from `price`:
1, 25561.59078
2, 24221.42273
3, 27240.84373

CREATE TABLE `data` (
  ID INTEGER REFERENCES price(ID),
  mpg REAL,
  cylinders INTEGER,
  displacement REAL,
  horsepower INTEGER,
  weight INTEGER,
  acceleration REAL,
  model INTEGER,
  car_name TEXT
);
Sample rows from `data`:
1, 18.0, 8, 307.0, 130, 3504, 12.0, 70, chevrolet chevelle malibu
2, 15.0, 8, 350.0, 165, 3693, 11.5, 70, buick skylark 320
3, 18.0, 8, 318.0, 150, 3436, 11.0, 70, plymouth satellite

CREATE TABLE `production` (
  ID INTEGER PRIMARY KEY REFERENCES price(ID) REFERENCES data(ID),
  model_year INTEGER PRIMARY KEY,
  country INTEGER REFERENCES country(origin)
);
Sample rows from `production`:
1, 1970, 1
1, 1971, 1
2, 1970, 1

","production, country","country.country, production.country, country.origin"
world,What is the form of government that the city of Manila has?,SELECT t1.governmentform FROM country as t1 inner JOIN city as t2 ON t1.code = t2.countrycode WHERE t2.name = 'Manila',"CREATE TABLE `country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

CREATE TABLE `city` (
  ID INTEGER,
  Name TEXT,
  CountryCode TEXT REFERENCES Country(Code),
  District TEXT,
  Population INTEGER
);
Sample rows from `city`:
1, Kabul, AFG, Kabol, 1780000
2, Qandahar, AFG, Qandahar, 237500
3, Herat, AFG, Herat, 186800

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
City, 4079

CREATE TABLE `City` (
  ID INTEGER,
  Name TEXT,
  CountryCode TEXT REFERENCES Country(Code),
  District TEXT,
  Population INTEGER
);
Sample rows from `City`:
1, Kabul, AFG, Kabol, 1780000
2, Qandahar, AFG, Qandahar, 237500
3, Herat, AFG, Herat, 186800

CREATE TABLE `Country` (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital INTEGER,
  Code2 TEXT
);
Sample rows from `Country`:
ABW, Aruba, North America, Caribbean, 193.0, None, 103000, 78.4, 828.0, 793.0, Aruba, Nonmetropolitan Territory of The Netherlands, Beatrix, 129, AW
AFG, Afghanistan, Asia, Southern and Central Asia, 652090.0, 1919, 22720000, 45.9, 5976.0, None, Afganistan/Afqanestan, Islamic Emirate, Mohammad Omar, 1, AF
AGO, Angola, Africa, Central Africa, 1246700.0, 1975, 12878000, 38.3, 6648.0, 7984.0, Angola, Republic, José Eduardo dos Santos, 56, AO

CREATE TABLE `CountryLanguage` (
  CountryCode TEXT PRIMARY KEY REFERENCES Country(Code),
  Language TEXT PRIMARY KEY,
  IsOfficial TEXT,
  Percentage REAL
);
Sample rows from `CountryLanguage`:
ABW, Dutch, T, 5.3
ABW, English, F, 9.5
ABW, Papiamento, F, 76.7

","country, city","country.governmentform, country.code, city.countrycode, city.name"
professional_basketball,"How many players, in games played in 1990, achieved 50% or less of oRebounds than dRebounds.",SELECT COUNT(playerid) FROM players_teams WHERE cast(orebounds as real) * 100 / drebounds <= 50 AND year = 1990,"CREATE TABLE `players_teams` (
  id INTEGER,
  playerID TEXT REFERENCES players(None),
  year INTEGER REFERENCES teams(year),
  stint INTEGER,
  tmID TEXT REFERENCES teams(tmID),
  lgID TEXT,
  GP INTEGER,
  GS INTEGER,
  minutes INTEGER,
  points INTEGER,
  oRebounds INTEGER,
  dRebounds INTEGER,
  rebounds INTEGER,
  assists INTEGER,
  steals INTEGER,
  blocks INTEGER,
  turnovers INTEGER,
  PF INTEGER,
  fgAttempted INTEGER,
  fgMade INTEGER,
  ftAttempted INTEGER,
  ftMade INTEGER,
  threeAttempted INTEGER,
  threeMade INTEGER,
  PostGP INTEGER,
  PostGS INTEGER,
  PostMinutes INTEGER,
  PostPoints INTEGER,
  PostoRebounds INTEGER,
  PostdRebounds INTEGER,
  PostRebounds INTEGER,
  PostAssists INTEGER,
  PostSteals INTEGER,
  PostBlocks INTEGER,
  PostTurnovers INTEGER,
  PostPF INTEGER,
  PostfgAttempted INTEGER,
  PostfgMade INTEGER,
  PostftAttempted INTEGER,
  PostftMade INTEGER,
  PostthreeAttempted INTEGER,
  PostthreeMade INTEGER,
  note TEXT
);
Sample rows from `players_teams`:
1, abdelal01, 1990, 1, POR, NBA, 43, 0, 290, 135, 27, 62, 89, 12, 4, 12, 22, 39, 116, 55, 44, 25, 0, 0, 5, 0, 13, 4, 1, 2, 3, 0, 0, 0, 0, 0, 6, 2, 0, 0, 0, 0, None
2, abdelal01, 1991, 1, POR, NBA, 71, 0, 934, 432, 81, 179, 260, 30, 25, 17, 66, 132, 361, 178, 101, 76, 0, 0, 8, 0, 25, 12, 0, 4, 4, 2, 0, 0, 2, 4, 10, 5, 4, 2, 0, 0, None
3, abdelal01, 1992, 1, MIL, NBA, 12, 0, 159, 64, 12, 25, 37, 10, 6, 4, 0, 24, 56, 26, 16, 12, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, None

","CREATE TABLE `awards_players` (
  playerID TEXT PRIMARY KEY REFERENCES players(playerID),
  award TEXT PRIMARY KEY,
  year INTEGER PRIMARY KEY,
  lgID TEXT,
  note TEXT,
  pos TEXT
);
Sample rows from `awards_players`:
abdulka01, All-Defensive Second Team, 1969, NBA, None, None
abdulka01, All-NBA Second Team, 1969, NBA, None, C
abdulka01, Rookie of the Year, 1969, NBA, None, None

CREATE TABLE `coaches` (
  coachID TEXT PRIMARY KEY,
  year INTEGER PRIMARY KEY REFERENCES teams(year),
  tmID TEXT PRIMARY KEY REFERENCES teams(tmID),
  lgID TEXT,
  stint INTEGER PRIMARY KEY,
  won INTEGER,
  lost INTEGER,
  post_wins INTEGER,
  post_losses INTEGER
);
Sample rows from `coaches`:
adelmri01, 1988, POR, NBA, 2, 14, 21, 0, 3
adelmri01, 1989, POR, NBA, 1, 59, 23, 12, 9
adelmri01, 1990, POR, NBA, 1, 63, 19, 9, 7

CREATE TABLE `draft` (
  id INTEGER,
  draftYear INTEGER REFERENCES teams(year),
  draftRound INTEGER,
  draftSelection INTEGER,
  draftOverall INTEGER,
  tmID TEXT REFERENCES teams(tmID),
  firstName TEXT,
  lastName TEXT,
  suffixName TEXT,
  playerID TEXT,
  draftFrom TEXT,
  lgID TEXT
);
Sample rows from `draft`:
1, 1967, 0, 0, 0, ANA, Darrell, Hardy, None, hardyda01, Baylor, ABA
2, 1967, 0, 0, 0, ANA, Bob, Krulish, None, None, Pacific, ABA
3, 1967, 0, 0, 0, ANA, Bob, Lewis, None, lewisbo01, North Carolina, ABA

CREATE TABLE `player_allstar` (
  playerID TEXT PRIMARY KEY REFERENCES players(playerID),
  last_name TEXT,
  first_name TEXT,
  season_id INTEGER PRIMARY KEY,
  conference TEXT,
  league_id TEXT,
  games_played INTEGER,
  minutes INTEGER,
  points INTEGER,
  o_rebounds INTEGER,
  d_rebounds INTEGER,
  rebounds INTEGER,
  assists INTEGER,
  steals INTEGER,
  blocks INTEGER,
  turnovers INTEGER,
  personal_fouls INTEGER,
  fg_attempted INTEGER,
  fg_made INTEGER,
  ft_attempted INTEGER,
  ft_made INTEGER,
  three_attempted INTEGER,
  three_made INTEGER
);
Sample rows from `player_allstar`:
abdulka01, Abdul-Jabbar, Kareem, 1969, East, NBA, 1, 18, 10, None, None, 11, 4, None, None, None, None, 8, 4, 2, 2, None, None
abdulka01, Abdul-Jabbar, Kareem, 1970, West, NBA, 1, 30, 19, None, None, 14, 1, None, None, None, None, 16, 8, 4, 3, None, None
abdulka01, Abdul-Jabbar, Kareem, 1971, West, NBA, 1, 19, 12, None, None, 7, 2, None, None, None, None, 10, 5, 2, 2, None, None

CREATE TABLE `players` (
  playerID TEXT PRIMARY KEY,
  useFirst TEXT,
  firstName TEXT,
  middleName TEXT,
  lastName TEXT,
  nameGiven TEXT,
  fullGivenName TEXT,
  nameSuffix TEXT,
  nameNick TEXT,
  pos TEXT,
  firstseason INTEGER,
  lastseason INTEGER,
  height REAL,
  weight INTEGER,
  college TEXT,
  collegeOther TEXT,
  birthDate DATE,
  birthCity TEXT,
  birthState TEXT,
  birthCountry TEXT,
  highSchool TEXT,
  hsCity TEXT,
  hsState TEXT,
  hsCountry TEXT,
  deathDate DATE,
  race TEXT
);
Sample rows from `players`:
abdelal01, Alaa, Alaa, None, Abdelnaby, None, None, None, None, F-C, 0, 0, 82.0, 240, Duke, None, 1968-06-24, Cairo, None, EGY, Bloomfield Senior, Bloomfield, NJ, USA, 0000-00-00, B
abdulka01, Kareem, Kareem, None, Abdul-Jabbar, None, Ferdinand Lewis Alcindor, Jr., None, Lew, Cap, C, 0, 0, 85.0, 225, UCLA, None, 1947-04-16, New York, NY, USA, Power Memorial, New York, NY, USA, 0000-00-00, B
abdulma01, Mahdi, Mahdi, None, Abdul-Rahman, None, Walter Raphael Hazzard, Jr., None, Walt, G, 0, 0, 74.0, 185, UCLA, Santa Monica City, 1942-04-15, Wilmington, DE, USA, Overbrook / Moton, Philadelphia / Easton, PA / MD, USA, 2011-11-18, B

CREATE TABLE `teams` (
  year INTEGER PRIMARY KEY,
  lgID TEXT,
  tmID TEXT PRIMARY KEY,
  franchID TEXT,
  confID TEXT,
  divID TEXT,
  rank INTEGER,
  confRank INTEGER,
  playoff TEXT,
  name TEXT,
  o_fgm INTEGER,
  o_ftm INTEGER,
  o_pts INTEGER,
  d_pts INTEGER,
  homeWon INTEGER,
  homeLost INTEGER,
  awayWon INTEGER,
  awayLost INTEGER,
  won INTEGER,
  lost INTEGER,
  games INTEGER,
  arena TEXT
);
Sample rows from `teams`:
1937, NBL, AFS, AFS, None, EA, 1, 0, CF, Akron Firestone Non-Skids, 249, 183, 681, 578, 8, 1, 5, 3, 14, 4, 18, None
1937, NBL, AGW, AGW, None, EA, 2, 0, WC, Akron Goodyear Wingfoots, 243, 159, 645, 498, 8, 1, 5, 4, 13, 5, 18, None
1937, NBL, BFB, BFB, None, EA, 4, 0, None, Buffalo Bisons, 108, 46, 262, 275, 2, 2, 1, 4, 3, 6, 9, None

CREATE TABLE `awards_coaches` (
  id INTEGER,
  year INTEGER REFERENCES coaches(year),
  coachID TEXT REFERENCES coaches(coachID),
  award TEXT,
  lgID TEXT,
  note TEXT
);
Sample rows from `awards_coaches`:
1, 1962, gallaha01, NBA Coach of the Year, NBA, None
2, 1963, hannual01, NBA Coach of the Year, NBA, None
3, 1964, auerbre01, NBA Coach of the Year, NBA, None

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
awards_coaches, 61
players_teams, 23751
series_post, 775

CREATE TABLE `players_teams` (
  id INTEGER,
  playerID TEXT REFERENCES players(None),
  year INTEGER REFERENCES teams(year),
  stint INTEGER,
  tmID TEXT REFERENCES teams(tmID),
  lgID TEXT,
  GP INTEGER,
  GS INTEGER,
  minutes INTEGER,
  points INTEGER,
  oRebounds INTEGER,
  dRebounds INTEGER,
  rebounds INTEGER,
  assists INTEGER,
  steals INTEGER,
  blocks INTEGER,
  turnovers INTEGER,
  PF INTEGER,
  fgAttempted INTEGER,
  fgMade INTEGER,
  ftAttempted INTEGER,
  ftMade INTEGER,
  threeAttempted INTEGER,
  threeMade INTEGER,
  PostGP INTEGER,
  PostGS INTEGER,
  PostMinutes INTEGER,
  PostPoints INTEGER,
  PostoRebounds INTEGER,
  PostdRebounds INTEGER,
  PostRebounds INTEGER,
  PostAssists INTEGER,
  PostSteals INTEGER,
  PostBlocks INTEGER,
  PostTurnovers INTEGER,
  PostPF INTEGER,
  PostfgAttempted INTEGER,
  PostfgMade INTEGER,
  PostftAttempted INTEGER,
  PostftMade INTEGER,
  PostthreeAttempted INTEGER,
  PostthreeMade INTEGER,
  note TEXT
);
Sample rows from `players_teams`:
1, abdelal01, 1990, 1, POR, NBA, 43, 0, 290, 135, 27, 62, 89, 12, 4, 12, 22, 39, 116, 55, 44, 25, 0, 0, 5, 0, 13, 4, 1, 2, 3, 0, 0, 0, 0, 0, 6, 2, 0, 0, 0, 0, None
2, abdelal01, 1991, 1, POR, NBA, 71, 0, 934, 432, 81, 179, 260, 30, 25, 17, 66, 132, 361, 178, 101, 76, 0, 0, 8, 0, 25, 12, 0, 4, 4, 2, 0, 0, 2, 4, 10, 5, 4, 2, 0, 0, None
3, abdelal01, 1992, 1, MIL, NBA, 12, 0, 159, 64, 12, 25, 37, 10, 6, 4, 0, 24, 56, 26, 16, 12, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, None

CREATE TABLE `series_post` (
  id INTEGER,
  year INTEGER REFERENCES teams(year) REFERENCES teams(year),
  round TEXT,
  series TEXT,
  tmIDWinner TEXT REFERENCES teams(tmID),
  lgIDWinner TEXT,
  tmIDLoser TEXT REFERENCES teams(tmID),
  lgIDLoser TEXT,
  W INTEGER,
  L INTEGER
);
Sample rows from `series_post`:
1, 1946, F, O, PHW, NBA, CHS, NBA, 4, 1
2, 1946, QF, M, NYK, NBA, CLR, NBA, 2, 1
3, 1946, QF, M, PHW, NBA, STB, NBA, 2, 1

",players_teams,"playerid, orebounds, drebounds"
movie_platform,"Show the portrait picture of the user who created the list ""Vladimir Vladimirovich Nabokov"".",SELECT t1.user_avatar_image_url FROM lists_users as t1 inner JOIN lists as t2 ON t1.list_id = t2.list_id WHERE t2.list_title LIKE 'Vladimir Vladimirovich Nabokov',"CREATE TABLE `lists_users` (
  user_id INTEGER PRIMARY KEY REFERENCES lists(user_id),
  list_id INTEGER PRIMARY KEY REFERENCES lists(list_id),
  list_update_date_utc TEXT,
  list_creation_date_utc TEXT,
  user_trialist INTEGER,
  user_subscriber INTEGER,
  user_avatar_image_url TEXT,
  user_cover_image_url TEXT,
  user_eligible_for_trial TEXT,
  user_has_payment_method TEXT
);
Sample rows from `lists_users`:
85981819, 1969, 2019-11-26, 2009-12-18, 1, 1, https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214, None, 0, 1
85981819, 3946, 2020-05-01, 2010-01-30, 1, 1, https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214, None, 0, 1
85981819, 6683, 2020-04-12, 2010-03-31, 1, 1, https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214, None, 0, 1

CREATE TABLE `lists` (
  user_id INTEGER REFERENCES lists_users(user_id),
  list_id INTEGER,
  list_title TEXT,
  list_movie_number INTEGER,
  list_update_timestamp_utc TEXT,
  list_creation_timestamp_utc TEXT,
  list_followers INTEGER,
  list_url TEXT,
  list_comments INTEGER,
  list_description TEXT,
  list_cover_image_url TEXT,
  list_first_image_url TEXT,
  list_second_image_url TEXT,
  list_third_image_url TEXT
);
Sample rows from `lists`:
88260493, 1, Films that made your kid sister cry, 5, 2019-01-24 19:16:18, 2009-11-11 00:02:21, 5, http://mubi.com/lists/films-that-made-your-kid-sister-cry, 3, <p>Don’t be such a baby!!</p>
<p><strong>bold</strong></p>, https://assets.mubicdn.net/images/film/3822/image-w1280.jpg?1445914994, https://assets.mubicdn.net/images/film/3822/image-w320.jpg?1445914994, https://assets.mubicdn.net/images/film/506/image-w320.jpg?1543838422, https://assets.mubicdn.net/images/film/485/image-w320.jpg?1575331204
45204418, 2, Headscratchers, 3, 2018-12-03 15:12:20, 2009-11-11 00:05:11, 1, http://mubi.com/lists/headscratchers, 2, <p>Films that need at least two viewings to really make sense.</p>
<p>Or at least… they did for <em>me</em>.</p>, https://assets.mubicdn.net/images/film/4343/image-w1280.jpg?1583331932, https://assets.mubicdn.net/images/film/4343/image-w320.jpg?1583331932, https://assets.mubicdn.net/images/film/159/image-w320.jpg?1548864573, https://assets.mubicdn.net/images/film/142/image-w320.jpg?1544094102
48905025, 3, Sexy Time Movies, 7, 2019-05-30 03:00:07, 2009-11-11 00:20:00, 6, http://mubi.com/lists/sexy-time-movies, 5, <p>Films that get you in the mood…for love. In development.</p>
<p>Remarks</p>
<p><strong>Enter the Void</strong><br>
If you’ve seen <a href=""http://www.theauteurs.com/films/2377"" rel=""nofollow"">Enter the Void</a> then you’ll know why that’s on this list., https://assets.mubicdn.net/images/film/3491/image-w1280.jpg?1564112978, https://assets.mubicdn.net/images/film/3491/image-w320.jpg?1564112978, https://assets.mubicdn.net/images/film/2377/image-w320.jpg?1564675204, https://assets.mubicdn.net/images/film/2874/image-w320.jpg?1546574412

","CREATE TABLE `lists` (
  user_id INTEGER REFERENCES lists_users(user_id),
  list_id INTEGER,
  list_title TEXT,
  list_movie_number INTEGER,
  list_update_timestamp_utc TEXT,
  list_creation_timestamp_utc TEXT,
  list_followers INTEGER,
  list_url TEXT,
  list_comments INTEGER,
  list_description TEXT,
  list_cover_image_url TEXT,
  list_first_image_url TEXT,
  list_second_image_url TEXT,
  list_third_image_url TEXT
);
Sample rows from `lists`:
88260493, 1, Films that made your kid sister cry, 5, 2019-01-24 19:16:18, 2009-11-11 00:02:21, 5, http://mubi.com/lists/films-that-made-your-kid-sister-cry, 3, <p>Don’t be such a baby!!</p>
<p><strong>bold</strong></p>, https://assets.mubicdn.net/images/film/3822/image-w1280.jpg?1445914994, https://assets.mubicdn.net/images/film/3822/image-w320.jpg?1445914994, https://assets.mubicdn.net/images/film/506/image-w320.jpg?1543838422, https://assets.mubicdn.net/images/film/485/image-w320.jpg?1575331204
45204418, 2, Headscratchers, 3, 2018-12-03 15:12:20, 2009-11-11 00:05:11, 1, http://mubi.com/lists/headscratchers, 2, <p>Films that need at least two viewings to really make sense.</p>
<p>Or at least… they did for <em>me</em>.</p>, https://assets.mubicdn.net/images/film/4343/image-w1280.jpg?1583331932, https://assets.mubicdn.net/images/film/4343/image-w320.jpg?1583331932, https://assets.mubicdn.net/images/film/159/image-w320.jpg?1548864573, https://assets.mubicdn.net/images/film/142/image-w320.jpg?1544094102
48905025, 3, Sexy Time Movies, 7, 2019-05-30 03:00:07, 2009-11-11 00:20:00, 6, http://mubi.com/lists/sexy-time-movies, 5, <p>Films that get you in the mood…for love. In development.</p>
<p>Remarks</p>
<p><strong>Enter the Void</strong><br>
If you’ve seen <a href=""http://www.theauteurs.com/films/2377"" rel=""nofollow"">Enter the Void</a> then you’ll know why that’s on this list., https://assets.mubicdn.net/images/film/3491/image-w1280.jpg?1564112978, https://assets.mubicdn.net/images/film/3491/image-w320.jpg?1564112978, https://assets.mubicdn.net/images/film/2377/image-w320.jpg?1564675204, https://assets.mubicdn.net/images/film/2874/image-w320.jpg?1546574412

CREATE TABLE `movies` (
  movie_id INTEGER,
  movie_title TEXT,
  movie_release_year INTEGER,
  movie_url TEXT,
  movie_title_language TEXT,
  movie_popularity INTEGER,
  movie_image_url TEXT,
  director_id TEXT,
  director_name TEXT,
  director_url TEXT
);
Sample rows from `movies`:
1, La Antena, 2007, http://mubi.com/films/la-antena, en, 105, https://images.mubicdn.net/images/film/1/cache-7927-1581389497/image-w1280.jpg, 131, Esteban Sapir, http://mubi.com/cast/esteban-sapir
2, Elementary Particles, 2006, http://mubi.com/films/elementary-particles, en, 23, https://images.mubicdn.net/images/film/2/cache-512179-1581389841/image-w1280.jpg, 73, Oskar Roehler, http://mubi.com/cast/oskar-roehler
3, It's Winter, 2006, http://mubi.com/films/its-winter, en, 21, https://images.mubicdn.net/images/film/3/cache-7929-1481539519/image-w1280.jpg, 82, Rafi Pitts, http://mubi.com/cast/rafi-pitts

CREATE TABLE `ratings_users` (
  user_id INTEGER REFERENCES lists_users(user_id),
  rating_date_utc TEXT,
  user_trialist INTEGER,
  user_subscriber INTEGER,
  user_avatar_image_url TEXT,
  user_cover_image_url TEXT,
  user_eligible_for_trial INTEGER,
  user_has_payment_method INTEGER
);
Sample rows from `ratings_users`:
41579158, 2017-06-10, 0, 0, https://assets.mubicdn.net/images/avatars/74283/images-w150.jpg?1523895155, None, 1, 0
68654088, 2012-10-02, 0, 0, https://assets.mubicdn.net/images/avatars/27714/images-w150.jpg?1523889463, None, 1, 1
84114365, 2010-12-25, 0, 0, https://assets.mubicdn.net/images/avatars/1808/images-w150.jpg?1523883471, None, 1, 0

CREATE TABLE `lists_users` (
  user_id INTEGER PRIMARY KEY REFERENCES lists(user_id),
  list_id INTEGER PRIMARY KEY REFERENCES lists(list_id),
  list_update_date_utc TEXT,
  list_creation_date_utc TEXT,
  user_trialist INTEGER,
  user_subscriber INTEGER,
  user_avatar_image_url TEXT,
  user_cover_image_url TEXT,
  user_eligible_for_trial TEXT,
  user_has_payment_method TEXT
);
Sample rows from `lists_users`:
85981819, 1969, 2019-11-26, 2009-12-18, 1, 1, https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214, None, 0, 1
85981819, 3946, 2020-05-01, 2010-01-30, 1, 1, https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214, None, 0, 1
85981819, 6683, 2020-04-12, 2010-03-31, 1, 1, https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214, None, 0, 1

CREATE TABLE `ratings` (
  movie_id INTEGER REFERENCES movies(movie_id),
  rating_id INTEGER REFERENCES ratings(rating_id),
  rating_url TEXT,
  rating_score INTEGER,
  rating_timestamp_utc TEXT,
  critic TEXT,
  critic_likes INTEGER,
  critic_comments INTEGER,
  user_id INTEGER REFERENCES ratings_users(user_id) REFERENCES lists_users(user_id),
  user_trialist INTEGER,
  user_subscriber INTEGER,
  user_eligible_for_trial INTEGER,
  user_has_payment_method INTEGER
);
Sample rows from `ratings`:
1066, 15610495, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/15610495, 3, 2017-06-10 12:38:33, None, 0, 0, 41579158, 0, 0, 1, 0
1066, 10704606, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/10704606, 2, 2014-08-15 23:42:31, None, 0, 0, 85981819, 1, 1, 0, 1
1066, 10177114, http://mubi.com/films/pavee-lackeen-the-traveller-girl/ratings/10177114, 2, 2014-01-30 13:21:57, None, 0, 0, 4208563, 0, 0, 1, 1

","lists_users, lists","lists_users.user_avatar_image_url, lists_users.list_id, lists.list_id, lists.list_title"
college_completion,"In Yale University, what is the average number of Black students per year who were bachelor's/equivalent-seeking cohort at 4-year institutions between 2002 to 2005?",SELECT AVG(t2.grad_cohort) FROM institution_details as t1 inner JOIN institution_grads as t2 ON t2.unitid = t1.unitid WHERE t1.chronname = 'Yale University' AND t2.year bETWEEN 2002 AND 2005 AND t2.race = 'b' AND t2.cohort = '4y bach',"CREATE TABLE `institution_details` (
  unitid INTEGER,
  chronname TEXT,
  city TEXT,
  state TEXT,
  level TEXT,
  control TEXT,
  basic TEXT,
  hbcu TEXT,
  flagship TEXT,
  long_x REAL,
  lat_y REAL,
  site TEXT,
  student_count INTEGER,
  awards_per_value REAL,
  awards_per_state_value REAL,
  awards_per_natl_value REAL,
  exp_award_value INTEGER,
  exp_award_state_value INTEGER,
  exp_award_natl_value INTEGER,
  exp_award_percentile INTEGER,
  ft_pct REAL,
  fte_value INTEGER,
  fte_percentile INTEGER,
  med_sat_value TEXT,
  med_sat_percentile TEXT,
  aid_value INTEGER,
  aid_percentile INTEGER,
  endow_value TEXT,
  endow_percentile TEXT,
  grad_100_value REAL,
  grad_100_percentile INTEGER,
  grad_150_value REAL,
  grad_150_percentile INTEGER,
  pell_value REAL,
  pell_percentile INTEGER,
  retain_value REAL,
  retain_percentile INTEGER,
  ft_fac_value REAL,
  ft_fac_percentile INTEGER,
  vsa_year TEXT,
  vsa_grad_after4_first TEXT,
  vsa_grad_elsewhere_after4_first TEXT,
  vsa_enroll_after4_first TEXT,
  vsa_enroll_elsewhere_after4_first TEXT,
  vsa_grad_after6_first TEXT,
  vsa_grad_elsewhere_after6_first TEXT,
  vsa_enroll_after6_first TEXT,
  vsa_enroll_elsewhere_after6_first TEXT,
  vsa_grad_after4_transfer TEXT,
  vsa_grad_elsewhere_after4_transfer TEXT,
  vsa_enroll_after4_transfer TEXT,
  vsa_enroll_elsewhere_after4_transfer TEXT,
  vsa_grad_after6_transfer TEXT,
  vsa_grad_elsewhere_after6_transfer TEXT,
  vsa_enroll_after6_transfer TEXT,
  vsa_enroll_elsewhere_after6_transfer TEXT,
  similar TEXT,
  state_sector_ct INTEGER,
  carnegie_ct INTEGER,
  counted_pct TEXT,
  nicknames TEXT,
  cohort_size INTEGER
);
Sample rows from `institution_details`:
100654, Alabama A&M University, Normal, Alabama, 4-year, Public, Masters Colleges and Universities--larger programs, X, NULL, -86.568502, 34.783368, www.aamu.edu/, 4051, 14.2, 18.8, 21.5, 105331, 75743, 66436, 90, 93.8, 3906, 33, 823, 0, 7142, 72, NULL, NULL, 10.0, 15, 29.1, 14, 71.2, 98, 63.1, 17, 82.8, 89, 2010, 14.7, 2, 36.5, 16.1, 33, 5.3, 12.5, 14.6, 15.7, 1.5, 40.9, 17.2, 36.4, 5.6, 17.2, 11.1, 232937|100724|405997|113607|139533|144005|228501|101480|131876|144759|419509|176479|243197|228529|372222|228431|206695|139366|159993|224147, 13, 386, 99.7|07, NULL, 882
100663, University of Alabama at Birmingham, Birmingham, Alabama, 4-year, Public, Research Universities--very high research activity, NULL, NULL, -86.80917, 33.50223, www.uab.edu, 11502, 20.9, 18.8, 21.5, 136546, 75743, 66436, 97, 72.7, 10032, 67, 1146, 84, 6088, 50, 24136, 93, 29.4, 67, 53.5, 66, 35.1, 39, 80.2, 70, 92.4, 98, 2011, 22.3, 2.9, 34.2, 19.2, 42.6, 10.5, 7.9, 13.1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 196060|180461|201885|145600|209542|236939|126818|230764|104151|104179|157085|171100|153603|141574|155317|110714|137351|126562|243780|196088, 13, 106, 56.0|07, UAB, 1376
100690, Amridge University, Montgomery, Alabama, 4-year, Private not-for-profit, Baccalaureate Colleges--Arts & Sciences, NULL, NULL, -86.17401, 32.362609, www.amridgeuniversity.edu, 322, 29.9, 17.8, 22.5, 58414, 92268, 101725, 30, 62.7, 294, 12, NULL, NULL, 2540, 1, 302, 1, 0.0, 0, 66.7, 72, 68.4, 91, 37.5, 2, 67.2, 71, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 217925|441511|205124|247825|197647|221856|135364|117575|164207|193070|199315|166054|367893|183804|439701|193052|197744|193247|137777|176789, 16, 252, 100.0|07, NULL, 3

CREATE TABLE `institution_grads` (
  unitid INTEGER REFERENCES institution_details(unitid),
  year INTEGER,
  gender TEXT,
  race TEXT,
  cohort TEXT,
  grad_cohort TEXT,
  grad_100 TEXT,
  grad_150 TEXT,
  grad_100_rate TEXT,
  grad_150_rate TEXT
);
Sample rows from `institution_grads`:
100760, 2011, B, X, 2y all, 446, 73, 105, 16.4, 23.5
100760, 2011, M, X, 2y all, 185, NULL, 40, NULL, 21.6
100760, 2011, F, X, 2y all, 261, NULL, 65, NULL, 24.9

","CREATE TABLE `institution_details` (
  unitid INTEGER,
  chronname TEXT,
  city TEXT,
  state TEXT,
  level TEXT,
  control TEXT,
  basic TEXT,
  hbcu TEXT,
  flagship TEXT,
  long_x REAL,
  lat_y REAL,
  site TEXT,
  student_count INTEGER,
  awards_per_value REAL,
  awards_per_state_value REAL,
  awards_per_natl_value REAL,
  exp_award_value INTEGER,
  exp_award_state_value INTEGER,
  exp_award_natl_value INTEGER,
  exp_award_percentile INTEGER,
  ft_pct REAL,
  fte_value INTEGER,
  fte_percentile INTEGER,
  med_sat_value TEXT,
  med_sat_percentile TEXT,
  aid_value INTEGER,
  aid_percentile INTEGER,
  endow_value TEXT,
  endow_percentile TEXT,
  grad_100_value REAL,
  grad_100_percentile INTEGER,
  grad_150_value REAL,
  grad_150_percentile INTEGER,
  pell_value REAL,
  pell_percentile INTEGER,
  retain_value REAL,
  retain_percentile INTEGER,
  ft_fac_value REAL,
  ft_fac_percentile INTEGER,
  vsa_year TEXT,
  vsa_grad_after4_first TEXT,
  vsa_grad_elsewhere_after4_first TEXT,
  vsa_enroll_after4_first TEXT,
  vsa_enroll_elsewhere_after4_first TEXT,
  vsa_grad_after6_first TEXT,
  vsa_grad_elsewhere_after6_first TEXT,
  vsa_enroll_after6_first TEXT,
  vsa_enroll_elsewhere_after6_first TEXT,
  vsa_grad_after4_transfer TEXT,
  vsa_grad_elsewhere_after4_transfer TEXT,
  vsa_enroll_after4_transfer TEXT,
  vsa_enroll_elsewhere_after4_transfer TEXT,
  vsa_grad_after6_transfer TEXT,
  vsa_grad_elsewhere_after6_transfer TEXT,
  vsa_enroll_after6_transfer TEXT,
  vsa_enroll_elsewhere_after6_transfer TEXT,
  similar TEXT,
  state_sector_ct INTEGER,
  carnegie_ct INTEGER,
  counted_pct TEXT,
  nicknames TEXT,
  cohort_size INTEGER
);
Sample rows from `institution_details`:
100654, Alabama A&M University, Normal, Alabama, 4-year, Public, Masters Colleges and Universities--larger programs, X, NULL, -86.568502, 34.783368, www.aamu.edu/, 4051, 14.2, 18.8, 21.5, 105331, 75743, 66436, 90, 93.8, 3906, 33, 823, 0, 7142, 72, NULL, NULL, 10.0, 15, 29.1, 14, 71.2, 98, 63.1, 17, 82.8, 89, 2010, 14.7, 2, 36.5, 16.1, 33, 5.3, 12.5, 14.6, 15.7, 1.5, 40.9, 17.2, 36.4, 5.6, 17.2, 11.1, 232937|100724|405997|113607|139533|144005|228501|101480|131876|144759|419509|176479|243197|228529|372222|228431|206695|139366|159993|224147, 13, 386, 99.7|07, NULL, 882
100663, University of Alabama at Birmingham, Birmingham, Alabama, 4-year, Public, Research Universities--very high research activity, NULL, NULL, -86.80917, 33.50223, www.uab.edu, 11502, 20.9, 18.8, 21.5, 136546, 75743, 66436, 97, 72.7, 10032, 67, 1146, 84, 6088, 50, 24136, 93, 29.4, 67, 53.5, 66, 35.1, 39, 80.2, 70, 92.4, 98, 2011, 22.3, 2.9, 34.2, 19.2, 42.6, 10.5, 7.9, 13.1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 196060|180461|201885|145600|209542|236939|126818|230764|104151|104179|157085|171100|153603|141574|155317|110714|137351|126562|243780|196088, 13, 106, 56.0|07, UAB, 1376
100690, Amridge University, Montgomery, Alabama, 4-year, Private not-for-profit, Baccalaureate Colleges--Arts & Sciences, NULL, NULL, -86.17401, 32.362609, www.amridgeuniversity.edu, 322, 29.9, 17.8, 22.5, 58414, 92268, 101725, 30, 62.7, 294, 12, NULL, NULL, 2540, 1, 302, 1, 0.0, 0, 66.7, 72, 68.4, 91, 37.5, 2, 67.2, 71, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 217925|441511|205124|247825|197647|221856|135364|117575|164207|193070|199315|166054|367893|183804|439701|193052|197744|193247|137777|176789, 16, 252, 100.0|07, NULL, 3

CREATE TABLE `institution_grads` (
  unitid INTEGER REFERENCES institution_details(unitid),
  year INTEGER,
  gender TEXT,
  race TEXT,
  cohort TEXT,
  grad_cohort TEXT,
  grad_100 TEXT,
  grad_150 TEXT,
  grad_100_rate TEXT,
  grad_150_rate TEXT
);
Sample rows from `institution_grads`:
100760, 2011, B, X, 2y all, 446, 73, 105, 16.4, 23.5
100760, 2011, M, X, 2y all, 185, NULL, 40, NULL, 21.6
100760, 2011, F, X, 2y all, 261, NULL, 65, NULL, 24.9

CREATE TABLE `state_sector_grads` (
  stateid INTEGER REFERENCES state_sector_details(stateid),
  state TEXT REFERENCES institution_details(state),
  state_abbr TEXT,
  control TEXT,
  level TEXT,
  year INTEGER,
  gender TEXT,
  race TEXT,
  cohort TEXT,
  grad_cohort TEXT,
  grad_100 TEXT,
  grad_150 TEXT,
  grad_100_rate TEXT,
  grad_150_rate TEXT,
  grad_cohort_ct INTEGER
);
Sample rows from `state_sector_grads`:
1, Alabama, AL, Private for-profit, 4-year, 2011, B, A, 4y bach, 0, 0, 0, NULL, NULL, 9
1, Alabama, AL, Private for-profit, 4-year, 2011, B, Ai, 4y bach, 1, 0, 0, 0, 0, 9
1, Alabama, AL, Private for-profit, 4-year, 2011, B, B, 4y bach, 51, 2, 3, 3.9, 5.9, 9

CREATE TABLE `state_sector_details` (
  stateid INTEGER PRIMARY KEY,
  state TEXT REFERENCES institution_details(state),
  state_post TEXT,
  level TEXT PRIMARY KEY,
  control TEXT PRIMARY KEY,
  schools_count INTEGER,
  counted_pct TEXT,
  awards_per_state_value TEXT,
  awards_per_natl_value REAL,
  exp_award_state_value TEXT,
  exp_award_natl_value INTEGER,
  state_appr_value TEXT,
  state_appr_rank TEXT,
  grad_rate_rank TEXT,
  awards_per_rank TEXT
);
Sample rows from `state_sector_details`:
0, United States, U.S., 4-year, Public, 632, NULL, NULL, 21.5, NULL, 66436, NULL, NULL, 23, NULL
0, United States, U.S., 4-year, Private not-for-profit, 1180, NULL, NULL, 22.5, NULL, 101725, NULL, NULL, 18, NULL
0, United States, U.S., 4-year, Private for-profit, 527, NULL, NULL, 24.6, NULL, 38763, NULL, NULL, 8, NULL

","institution_details, institution_grads","institution_grads.grad_cohort, institution_grads.unitid, institution_details.unitid, institution_details.chronname, institution_grads.year, institution_grads.race, institution_grads.cohort"
student_loan,How many female students have enlisted for the Army?,"SELECT SUM(iif(t3.name is null, 1, 0)) as ""result"" FROM enlist as t1 inner JOIN person as t2 ON t1.name = t2.name left JOIN male as t3 ON t2.name = t3.name WHERE t1.organ = 'army'","CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

","CREATE TABLE `bool` (
  name TEXT PRIMARY KEY
);
Sample rows from `bool`:
neg
pos

CREATE TABLE `person` (
  name TEXT PRIMARY KEY
);
Sample rows from `person`:
student1
student10
student100

CREATE TABLE `disabled` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `disabled`:
student114
student125
student142

CREATE TABLE `enlist` (
  name TEXT REFERENCES person(name),
  organ TEXT
);
Sample rows from `enlist`:
student40, fire_department
student51, fire_department
student109, fire_department

CREATE TABLE `filed_for_bankrupcy` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `filed_for_bankrupcy`:
student122
student126
student136

CREATE TABLE `longest_absense_from_school` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  month INTEGER
);
Sample rows from `longest_absense_from_school`:
student10, 0
student102, 0
student110, 0

CREATE TABLE `male` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `male`:
student1
student101
student102

CREATE TABLE `no_payment_due` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  bool TEXT REFERENCES bool(name)
);
Sample rows from `no_payment_due`:
student10, neg
student101, neg
student103, neg

CREATE TABLE `unemployed` (
  name TEXT PRIMARY KEY REFERENCES person(name)
);
Sample rows from `unemployed`:
student1000
student102
student106

CREATE TABLE `enrolled` (
  name TEXT PRIMARY KEY REFERENCES person(name),
  school TEXT PRIMARY KEY,
  month INTEGER
);
Sample rows from `enrolled`:
student10, smc, 1
student101, ucb, 1
student122, ucsd, 1

","enlist, person, male","male.name, enlist.name, person.name, enlist.organ"
public_review_platform,List out the category name of business id 5.,SELECT t1.category_name FROM categories as t1 inner JOIN Business_categories as t2 ON t1.category_id = t2.category_id WHERE t2.business_id = 5,"CREATE TABLE `categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Business_categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_categories`:
1, 8
1, 143
2, 18

","CREATE TABLE `Attributes` (
  attribute_id INTEGER,
  attribute_name TEXT
);
Sample rows from `Attributes`:
1, Alcohol
2, Waiter Service
3, Delivery

CREATE TABLE `Categories` (
  category_id INTEGER,
  category_name TEXT
);
Sample rows from `Categories`:
1, Active Life
2, Arts & Entertainment
3, Stadiums & Arenas

CREATE TABLE `Compliments` (
  compliment_id INTEGER,
  compliment_type TEXT
);
Sample rows from `Compliments`:
1, photos
2, cool
3, hot

CREATE TABLE `Days` (
  day_id INTEGER,
  day_of_week TEXT
);
Sample rows from `Days`:
1, Sunday
2, Monday
3, Tuesday

CREATE TABLE `Years` (
  year_id INTEGER,
  actual_year INTEGER
);
Sample rows from `Years`:
2005, 2005
2006, 2006
2007, 2007

CREATE TABLE `Business_Attributes` (
  attribute_id INTEGER PRIMARY KEY REFERENCES Attributes(None),
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  attribute_value TEXT
);
Sample rows from `Business_Attributes`:
1, 2, none
1, 3, none
1, 13, none

CREATE TABLE `Business_Categories` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  category_id INTEGER PRIMARY KEY REFERENCES Categories(None)
);
Sample rows from `Business_Categories`:
1, 8
1, 143
2, 18

CREATE TABLE `Business_Hours` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  opening_time TEXT,
  closing_time TEXT
);
Sample rows from `Business_Hours`:
2, 2, 11AM, 8PM
2, 3, 11AM, 8PM
2, 4, 11AM, 8PM

CREATE TABLE `Checkins` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  day_id INTEGER PRIMARY KEY REFERENCES Days(None),
  label_time_0 TEXT,
  label_time_1 TEXT,
  label_time_2 TEXT,
  label_time_3 TEXT,
  label_time_4 TEXT,
  label_time_5 TEXT,
  label_time_6 TEXT,
  label_time_7 TEXT,
  label_time_8 TEXT,
  label_time_9 TEXT,
  label_time_10 TEXT,
  label_time_11 TEXT,
  label_time_12 TEXT,
  label_time_13 TEXT,
  label_time_14 TEXT,
  label_time_15 TEXT,
  label_time_16 TEXT,
  label_time_17 TEXT,
  label_time_18 TEXT,
  label_time_19 TEXT,
  label_time_20 TEXT,
  label_time_21 TEXT,
  label_time_22 TEXT,
  label_time_23 TEXT
);
Sample rows from `Checkins`:
1, 1, None, None, None, None, None, None, None, None, None, Low, None, Low, None, None, None, None, None, Low, None, None, None, None, None, None
1, 2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Low, None, None, None, Low, None, None, None, None
1, 3, None, None, None, None, None, None, None, None, None, None, None, Low, None, Low, Low, Low, None, Low, None, None, None, None, None, None

CREATE TABLE `Elite` (
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  year_id INTEGER PRIMARY KEY REFERENCES Years(None)
);
Sample rows from `Elite`:
3, 2010
3, 2011
3, 2012

CREATE TABLE `Reviews` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  review_stars INTEGER,
  review_votes_funny TEXT,
  review_votes_useful TEXT,
  review_votes_cool TEXT,
  review_length TEXT
);
Sample rows from `Reviews`:
1, 36129, 2, None, None, None, Medium
1, 40299, 1, None, None, None, Short
1, 59125, 5, None, None, None, Short

CREATE TABLE `Tips` (
  business_id INTEGER PRIMARY KEY REFERENCES Business(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  likes INTEGER,
  tip_length TEXT
);
Sample rows from `Tips`:
2, 12490, 0, Medium
2, 16328, 0, Medium
2, 19191, 0, Short

CREATE TABLE `Users_Compliments` (
  compliment_id INTEGER PRIMARY KEY REFERENCES Compliments(None),
  user_id INTEGER PRIMARY KEY REFERENCES Users(None),
  number_of_compliments TEXT
);
Sample rows from `Users_Compliments`:
1, 3, Medium
1, 19, Low
1, 45, Low

CREATE TABLE `Business` (
  business_id INTEGER,
  active TEXT,
  city TEXT,
  state TEXT,
  stars REAL,
  review_count TEXT
);
Sample rows from `Business`:
1, true, Phoenix, AZ, 3.0, Low
2, true, Scottsdale, AZ, 4.5, Medium
3, true, Scottsdale, AZ, 4.0, Medium

CREATE TABLE `Users` (
  user_id INTEGER,
  user_yelping_since_year INTEGER,
  user_average_stars TEXT,
  user_votes_funny TEXT,
  user_votes_useful TEXT,
  user_votes_cool TEXT,
  user_review_count TEXT,
  user_fans TEXT
);
Sample rows from `Users`:
1, 2012, 4.0, Low, Low, Low, Medium, Low
2, 2010, 2.5, None, Medium, Low, Medium, None
3, 2009, 4.0, Uber, Uber, Uber, High, Medium

","categories, Business_categories","categories.category_name, categories.category_id, Business_categories.category_id, Business_categories.business_id"
professional_basketball,What is the name of the team with the highest home lost rate?,SELECT name FROM teams ORDER BY cast(homewon as real) / (homewon + homelost) DESC LIMIT 1,"CREATE TABLE `teams` (
  year INTEGER PRIMARY KEY,
  lgID TEXT,
  tmID TEXT PRIMARY KEY,
  franchID TEXT,
  confID TEXT,
  divID TEXT,
  rank INTEGER,
  confRank INTEGER,
  playoff TEXT,
  name TEXT,
  o_fgm INTEGER,
  o_ftm INTEGER,
  o_pts INTEGER,
  d_pts INTEGER,
  homeWon INTEGER,
  homeLost INTEGER,
  awayWon INTEGER,
  awayLost INTEGER,
  won INTEGER,
  lost INTEGER,
  games INTEGER,
  arena TEXT
);
Sample rows from `teams`:
1937, NBL, AFS, AFS, None, EA, 1, 0, CF, Akron Firestone Non-Skids, 249, 183, 681, 578, 8, 1, 5, 3, 14, 4, 18, None
1937, NBL, AGW, AGW, None, EA, 2, 0, WC, Akron Goodyear Wingfoots, 243, 159, 645, 498, 8, 1, 5, 4, 13, 5, 18, None
1937, NBL, BFB, BFB, None, EA, 4, 0, None, Buffalo Bisons, 108, 46, 262, 275, 2, 2, 1, 4, 3, 6, 9, None

","CREATE TABLE `awards_players` (
  playerID TEXT PRIMARY KEY REFERENCES players(playerID),
  award TEXT PRIMARY KEY,
  year INTEGER PRIMARY KEY,
  lgID TEXT,
  note TEXT,
  pos TEXT
);
Sample rows from `awards_players`:
abdulka01, All-Defensive Second Team, 1969, NBA, None, None
abdulka01, All-NBA Second Team, 1969, NBA, None, C
abdulka01, Rookie of the Year, 1969, NBA, None, None

CREATE TABLE `coaches` (
  coachID TEXT PRIMARY KEY,
  year INTEGER PRIMARY KEY REFERENCES teams(year),
  tmID TEXT PRIMARY KEY REFERENCES teams(tmID),
  lgID TEXT,
  stint INTEGER PRIMARY KEY,
  won INTEGER,
  lost INTEGER,
  post_wins INTEGER,
  post_losses INTEGER
);
Sample rows from `coaches`:
adelmri01, 1988, POR, NBA, 2, 14, 21, 0, 3
adelmri01, 1989, POR, NBA, 1, 59, 23, 12, 9
adelmri01, 1990, POR, NBA, 1, 63, 19, 9, 7

CREATE TABLE `draft` (
  id INTEGER,
  draftYear INTEGER REFERENCES teams(year),
  draftRound INTEGER,
  draftSelection INTEGER,
  draftOverall INTEGER,
  tmID TEXT REFERENCES teams(tmID),
  firstName TEXT,
  lastName TEXT,
  suffixName TEXT,
  playerID TEXT,
  draftFrom TEXT,
  lgID TEXT
);
Sample rows from `draft`:
1, 1967, 0, 0, 0, ANA, Darrell, Hardy, None, hardyda01, Baylor, ABA
2, 1967, 0, 0, 0, ANA, Bob, Krulish, None, None, Pacific, ABA
3, 1967, 0, 0, 0, ANA, Bob, Lewis, None, lewisbo01, North Carolina, ABA

CREATE TABLE `player_allstar` (
  playerID TEXT PRIMARY KEY REFERENCES players(playerID),
  last_name TEXT,
  first_name TEXT,
  season_id INTEGER PRIMARY KEY,
  conference TEXT,
  league_id TEXT,
  games_played INTEGER,
  minutes INTEGER,
  points INTEGER,
  o_rebounds INTEGER,
  d_rebounds INTEGER,
  rebounds INTEGER,
  assists INTEGER,
  steals INTEGER,
  blocks INTEGER,
  turnovers INTEGER,
  personal_fouls INTEGER,
  fg_attempted INTEGER,
  fg_made INTEGER,
  ft_attempted INTEGER,
  ft_made INTEGER,
  three_attempted INTEGER,
  three_made INTEGER
);
Sample rows from `player_allstar`:
abdulka01, Abdul-Jabbar, Kareem, 1969, East, NBA, 1, 18, 10, None, None, 11, 4, None, None, None, None, 8, 4, 2, 2, None, None
abdulka01, Abdul-Jabbar, Kareem, 1970, West, NBA, 1, 30, 19, None, None, 14, 1, None, None, None, None, 16, 8, 4, 3, None, None
abdulka01, Abdul-Jabbar, Kareem, 1971, West, NBA, 1, 19, 12, None, None, 7, 2, None, None, None, None, 10, 5, 2, 2, None, None

CREATE TABLE `players` (
  playerID TEXT PRIMARY KEY,
  useFirst TEXT,
  firstName TEXT,
  middleName TEXT,
  lastName TEXT,
  nameGiven TEXT,
  fullGivenName TEXT,
  nameSuffix TEXT,
  nameNick TEXT,
  pos TEXT,
  firstseason INTEGER,
  lastseason INTEGER,
  height REAL,
  weight INTEGER,
  college TEXT,
  collegeOther TEXT,
  birthDate DATE,
  birthCity TEXT,
  birthState TEXT,
  birthCountry TEXT,
  highSchool TEXT,
  hsCity TEXT,
  hsState TEXT,
  hsCountry TEXT,
  deathDate DATE,
  race TEXT
);
Sample rows from `players`:
abdelal01, Alaa, Alaa, None, Abdelnaby, None, None, None, None, F-C, 0, 0, 82.0, 240, Duke, None, 1968-06-24, Cairo, None, EGY, Bloomfield Senior, Bloomfield, NJ, USA, 0000-00-00, B
abdulka01, Kareem, Kareem, None, Abdul-Jabbar, None, Ferdinand Lewis Alcindor, Jr., None, Lew, Cap, C, 0, 0, 85.0, 225, UCLA, None, 1947-04-16, New York, NY, USA, Power Memorial, New York, NY, USA, 0000-00-00, B
abdulma01, Mahdi, Mahdi, None, Abdul-Rahman, None, Walter Raphael Hazzard, Jr., None, Walt, G, 0, 0, 74.0, 185, UCLA, Santa Monica City, 1942-04-15, Wilmington, DE, USA, Overbrook / Moton, Philadelphia / Easton, PA / MD, USA, 2011-11-18, B

CREATE TABLE `teams` (
  year INTEGER PRIMARY KEY,
  lgID TEXT,
  tmID TEXT PRIMARY KEY,
  franchID TEXT,
  confID TEXT,
  divID TEXT,
  rank INTEGER,
  confRank INTEGER,
  playoff TEXT,
  name TEXT,
  o_fgm INTEGER,
  o_ftm INTEGER,
  o_pts INTEGER,
  d_pts INTEGER,
  homeWon INTEGER,
  homeLost INTEGER,
  awayWon INTEGER,
  awayLost INTEGER,
  won INTEGER,
  lost INTEGER,
  games INTEGER,
  arena TEXT
);
Sample rows from `teams`:
1937, NBL, AFS, AFS, None, EA, 1, 0, CF, Akron Firestone Non-Skids, 249, 183, 681, 578, 8, 1, 5, 3, 14, 4, 18, None
1937, NBL, AGW, AGW, None, EA, 2, 0, WC, Akron Goodyear Wingfoots, 243, 159, 645, 498, 8, 1, 5, 4, 13, 5, 18, None
1937, NBL, BFB, BFB, None, EA, 4, 0, None, Buffalo Bisons, 108, 46, 262, 275, 2, 2, 1, 4, 3, 6, 9, None

CREATE TABLE `awards_coaches` (
  id INTEGER,
  year INTEGER REFERENCES coaches(year),
  coachID TEXT REFERENCES coaches(coachID),
  award TEXT,
  lgID TEXT,
  note TEXT
);
Sample rows from `awards_coaches`:
1, 1962, gallaha01, NBA Coach of the Year, NBA, None
2, 1963, hannual01, NBA Coach of the Year, NBA, None
3, 1964, auerbre01, NBA Coach of the Year, NBA, None

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
awards_coaches, 61
players_teams, 23751
series_post, 775

CREATE TABLE `players_teams` (
  id INTEGER,
  playerID TEXT REFERENCES players(None),
  year INTEGER REFERENCES teams(year),
  stint INTEGER,
  tmID TEXT REFERENCES teams(tmID),
  lgID TEXT,
  GP INTEGER,
  GS INTEGER,
  minutes INTEGER,
  points INTEGER,
  oRebounds INTEGER,
  dRebounds INTEGER,
  rebounds INTEGER,
  assists INTEGER,
  steals INTEGER,
  blocks INTEGER,
  turnovers INTEGER,
  PF INTEGER,
  fgAttempted INTEGER,
  fgMade INTEGER,
  ftAttempted INTEGER,
  ftMade INTEGER,
  threeAttempted INTEGER,
  threeMade INTEGER,
  PostGP INTEGER,
  PostGS INTEGER,
  PostMinutes INTEGER,
  PostPoints INTEGER,
  PostoRebounds INTEGER,
  PostdRebounds INTEGER,
  PostRebounds INTEGER,
  PostAssists INTEGER,
  PostSteals INTEGER,
  PostBlocks INTEGER,
  PostTurnovers INTEGER,
  PostPF INTEGER,
  PostfgAttempted INTEGER,
  PostfgMade INTEGER,
  PostftAttempted INTEGER,
  PostftMade INTEGER,
  PostthreeAttempted INTEGER,
  PostthreeMade INTEGER,
  note TEXT
);
Sample rows from `players_teams`:
1, abdelal01, 1990, 1, POR, NBA, 43, 0, 290, 135, 27, 62, 89, 12, 4, 12, 22, 39, 116, 55, 44, 25, 0, 0, 5, 0, 13, 4, 1, 2, 3, 0, 0, 0, 0, 0, 6, 2, 0, 0, 0, 0, None
2, abdelal01, 1991, 1, POR, NBA, 71, 0, 934, 432, 81, 179, 260, 30, 25, 17, 66, 132, 361, 178, 101, 76, 0, 0, 8, 0, 25, 12, 0, 4, 4, 2, 0, 0, 2, 4, 10, 5, 4, 2, 0, 0, None
3, abdelal01, 1992, 1, MIL, NBA, 12, 0, 159, 64, 12, 25, 37, 10, 6, 4, 0, 24, 56, 26, 16, 12, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, None

CREATE TABLE `series_post` (
  id INTEGER,
  year INTEGER REFERENCES teams(year) REFERENCES teams(year),
  round TEXT,
  series TEXT,
  tmIDWinner TEXT REFERENCES teams(tmID),
  lgIDWinner TEXT,
  tmIDLoser TEXT REFERENCES teams(tmID),
  lgIDLoser TEXT,
  W INTEGER,
  L INTEGER
);
Sample rows from `series_post`:
1, 1946, F, O, PHW, NBA, CHS, NBA, 4, 1
2, 1946, QF, M, NYK, NBA, CLR, NBA, 2, 1
3, 1946, QF, M, PHW, NBA, STB, NBA, 2, 1

",teams,"name, homewon, homelost"
books,Which customer addresses are no longer active?,SELECT DISTINCT t1.street_name FROM address as t1 inner JOIN customer_address as t2 ON t1.address_id = t2.address_id inner JOIN address_status as t3 ON t3.status_id = t2.status_id WHERE t3.address_status = 'Inactive',"CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","address, customer_address, address_status","address.street_name, address.address_id, customer_address.address_id, address_status.status_id, customer_address.status_id, address_status.address_status"
donor,"Among the technology items, what percentage of them are from Best Buy for Business? Provide the date of the project related to those items.",SELECT cast(SUM(case when t1.vendor_name = 'Best Buy for Business' then 1 else 0 end) as real) * 100 / COUNT(t1.projectid) FROM resources as t1 inner JOIN projects as t2 ON t1.projectid = t2.projectid WHERE t1.project_resource_type = 'Technology' UNION all SELECT DISTINCT t1.date_posted FROM projects as t1 inner JOIN resources as t2 ON t1.projectid = t2.projectid WHERE t2.vendor_name = 'Best Buy for Business' AND t2.project_resource_type = 'Technology',"CREATE TABLE `resources` (
  resourceid TEXT PRIMARY KEY,
  projectid TEXT REFERENCES projects(projectid),
  vendorid INTEGER,
  vendor_name TEXT,
  project_resource_type TEXT,
  item_name TEXT,
  item_number TEXT,
  item_unit_price REAL,
  item_quantity INTEGER
);
Sample rows from `resources`:
8a1c1c45bc30d065061912fd9114fcf3, ffffc4f85b60efc5b52347df489d0238, 430, Woodwind and Brasswind, Technology, iPod nano 4th Gen 8GB (Black), 249995.001, 149.0, 4
015d2c4935c50427964a12dc3f584091, ffffac55ee02a49d1abc87ba6fc61135, 82, Best Buy for Business, Technology, Sony bloggie MHS-FS1 - camcorder - internal flash memory, BB11216668, 148.0, 1
26a02944b2f0c25f9abdeacca3ede3ee, ffff97ed93720407d70a2787475932b0, 767, Lakeshore Learning Materials, Supplies, VX748 - Best-Buy Jumbo Crayons - 12-Color Box, VX748, 69.95, 1

CREATE TABLE `projects` (
  projectid TEXT PRIMARY KEY,
  teacher_acctid TEXT,
  schoolid TEXT,
  school_ncesid TEXT,
  school_latitude REAL,
  school_longitude REAL,
  school_city TEXT,
  school_state TEXT,
  school_zip INTEGER,
  school_metro TEXT,
  school_district TEXT,
  school_county TEXT,
  school_charter TEXT,
  school_magnet TEXT,
  school_year_round TEXT,
  school_nlns TEXT,
  school_kipp TEXT,
  school_charter_ready_promise TEXT,
  teacher_prefix TEXT,
  teacher_teach_for_america TEXT,
  teacher_ny_teaching_fellow TEXT,
  primary_focus_subject TEXT,
  primary_focus_area TEXT,
  secondary_focus_subject TEXT,
  secondary_focus_area TEXT,
  resource_type TEXT,
  poverty_level TEXT,
  grade_level TEXT,
  fulfillment_labor_materials REAL,
  total_price_excluding_optional_support REAL,
  total_price_including_optional_support REAL,
  students_reached INTEGER,
  eligible_double_your_impact_match TEXT,
  eligible_almost_home_match TEXT,
  date_posted DATE
);
Sample rows from `projects`:
316ed8fb3b81402ff6ac8f721bb31192, 42d43fa6f37314365d08692e08680973, c0e6ce89b244764085691a1b8e28cb81, 063627006187, 36.57634, -119.608713, Selma, CA, 93662, None, Selma Unified Sch District, Fresno, f, f, f, f, f, f, Mrs., f, f, Literature & Writing, Literacy & Language, College & Career Prep, Applied Learning, Books, highest poverty, Grades 6-8, 30.0, 555.81, 653.89, 32, f, f, 2014-05-12
90de744e368a7e4883223ca49318ae30, 864eb466462bf704bf7a16a585ef296a, d711e47810900c96f26a5d0be30c446d, 483702008193, 32.911179, -96.72364, Dallas, TX, 75243, urban, Richardson Ind School District, Dallas, f, f, f, f, f, f, Mrs., f, f, Literacy, Literacy & Language, ESL, Literacy & Language, Books, highest poverty, Grades PreK-2, 30.0, 296.47, 348.79, 22, f, f, 2014-05-12
32943bb1063267de6ed19fc0ceb4b9a7, 37f85135259ece793213aca9d8765542, 665c3613013ba0a66e3a2a26b89f1b68, 410327000109, 45.166039, -122.414576, Colton, OR, 97017, rural, Colton School District 53, Clackamas, f, f, f, f, f, f, Mr., f, f, Literacy, Literacy & Language, Mathematics, Math & Science, Technology, high poverty, Grades PreK-2, 30.0, 430.89, 506.93, 17, f, f, 2014-05-11

","CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `essays` (
  projectid TEXT,
  teacher_acctid TEXT,
  title TEXT,
  short_description TEXT,
  need_statement TEXT,
  essay TEXT
);
Sample rows from `essays`:
ffffc4f85b60efc5b52347df489d0238, c24011b20fc161ed02248e85beb59a90, iMath, It is imperative that teachers bring technology into the classroom, if students are going to be able to survive in the 21st Century. The classroom needs to be ever changing along with the outside world. The iMath project will help students by obtaining cl, My students need four iPods., I am a fourth year fifth grade math teacher. The school I teach in is a fifth and sixth grade public school and is a Title One school which means that 95% of our students get free lunch. Presently, I am in the process of completing a Masters degree in Tec
ffffac55ee02a49d1abc87ba6fc61135, 947066d0af47e0566f334566553dd6a6, Recording Rockin' Readers, Can you imagine having to translate everything you read into sign language and relate it to what you already know? Help us do just that by giving us the camera that will record our stories and..., My students need a camcorder. , Can you imagine having to translate everything you read into sign language and relate it to what you already know? Help us do just that by giving us the camera that will record our stories and interpretations! 
\n
\nMy students are all deaf or hard of hea
ffff97ed93720407d70a2787475932b0, 462270f5d5c212162fcab11afa2623cb, Kindergarten In Need of Important Materials!, It takes a special person to donate to a group of children they don't know, especially in these hard economic times, but my students are worth it.  They deserve to have the proper supplies to ensure that their long education gets off to the right start, s, My students need 17 assorted classroom materials to ensure that they can learn as much as possible this year., Hi. I teach a wonderful group of 4-5 year old Kindergarten students.  They come in wanting and willing to learn new and exciting things each and every day. I work hard to ensure that my students get the most out of the entire school year. 
\n
\nFor the mo

CREATE TABLE `projects` (
  projectid TEXT PRIMARY KEY,
  teacher_acctid TEXT,
  schoolid TEXT,
  school_ncesid TEXT,
  school_latitude REAL,
  school_longitude REAL,
  school_city TEXT,
  school_state TEXT,
  school_zip INTEGER,
  school_metro TEXT,
  school_district TEXT,
  school_county TEXT,
  school_charter TEXT,
  school_magnet TEXT,
  school_year_round TEXT,
  school_nlns TEXT,
  school_kipp TEXT,
  school_charter_ready_promise TEXT,
  teacher_prefix TEXT,
  teacher_teach_for_america TEXT,
  teacher_ny_teaching_fellow TEXT,
  primary_focus_subject TEXT,
  primary_focus_area TEXT,
  secondary_focus_subject TEXT,
  secondary_focus_area TEXT,
  resource_type TEXT,
  poverty_level TEXT,
  grade_level TEXT,
  fulfillment_labor_materials REAL,
  total_price_excluding_optional_support REAL,
  total_price_including_optional_support REAL,
  students_reached INTEGER,
  eligible_double_your_impact_match TEXT,
  eligible_almost_home_match TEXT,
  date_posted DATE
);
Sample rows from `projects`:
316ed8fb3b81402ff6ac8f721bb31192, 42d43fa6f37314365d08692e08680973, c0e6ce89b244764085691a1b8e28cb81, 063627006187, 36.57634, -119.608713, Selma, CA, 93662, None, Selma Unified Sch District, Fresno, f, f, f, f, f, f, Mrs., f, f, Literature & Writing, Literacy & Language, College & Career Prep, Applied Learning, Books, highest poverty, Grades 6-8, 30.0, 555.81, 653.89, 32, f, f, 2014-05-12
90de744e368a7e4883223ca49318ae30, 864eb466462bf704bf7a16a585ef296a, d711e47810900c96f26a5d0be30c446d, 483702008193, 32.911179, -96.72364, Dallas, TX, 75243, urban, Richardson Ind School District, Dallas, f, f, f, f, f, f, Mrs., f, f, Literacy, Literacy & Language, ESL, Literacy & Language, Books, highest poverty, Grades PreK-2, 30.0, 296.47, 348.79, 22, f, f, 2014-05-12
32943bb1063267de6ed19fc0ceb4b9a7, 37f85135259ece793213aca9d8765542, 665c3613013ba0a66e3a2a26b89f1b68, 410327000109, 45.166039, -122.414576, Colton, OR, 97017, rural, Colton School District 53, Clackamas, f, f, f, f, f, f, Mr., f, f, Literacy, Literacy & Language, Mathematics, Math & Science, Technology, high poverty, Grades PreK-2, 30.0, 430.89, 506.93, 17, f, f, 2014-05-11

CREATE TABLE `donations` (
  donationid TEXT PRIMARY KEY,
  projectid TEXT REFERENCES projects(projectid),
  donor_acctid TEXT,
  donor_city TEXT,
  donor_state TEXT,
  donor_zip TEXT,
  is_teacher_acct TEXT,
  donation_timestamp DATETIME,
  donation_to_project REAL,
  donation_optional_support REAL,
  donation_total REAL,
  dollar_amount TEXT,
  donation_included_optional_support TEXT,
  payment_method TEXT,
  payment_included_acct_credit TEXT,
  payment_included_campaign_gift_card TEXT,
  payment_included_web_purchased_gift_card TEXT,
  payment_was_promo_matched TEXT,
  via_giving_page TEXT,
  for_honoree TEXT,
  donation_message TEXT
);
Sample rows from `donations`:
431d720bc3dfd75ae445a5eaa0b0638d, ffffac55ee02a49d1abc87ba6fc61135, 22cbc920c9b5fa08dfb331422f5926b5, Peachtree City, GA, 30269, f, 2011-08-25 14:27:34.807, 42.5, 7.5, 50.0, 10_to_100, t, no_cash_received, f, t, f, f, f, f, I gave to this project because I support the efforts of this teacher with each of her students, and her school, Suder Elementary School.
fcfedba1c8a0ba77d280cace80a909f6, ffffac55ee02a49d1abc87ba6fc61135, 521f1830a77c9dbbf8119d99c6206a16, None, GA, None, f, 2011-11-04 07:54:21.552, 26.83, 4.73, 31.56, 10_to_100, t, creditcard, f, t, f, f, f, f, I donated because I want to support kids in Georgia.
3fa95d29986aa6f401c6719ced3a3ce7, ffffac55ee02a49d1abc87ba6fc61135, 1e0a63fc8141c7ba26b8b44ca0871b90, Rockville, MD, 20853, f, 2011-11-02 22:53:53.019, 55.35, 0.0, 55.35, 10_to_100, f, no_cash_received, t, f, f, f, t, f, The Spark's 'pet' projects include those which support deaf students.  With just a few days left, the Spark's donors fund half of what remains, and challenge others to pull this project through to fruition.

CREATE TABLE `resources` (
  resourceid TEXT PRIMARY KEY,
  projectid TEXT REFERENCES projects(projectid),
  vendorid INTEGER,
  vendor_name TEXT,
  project_resource_type TEXT,
  item_name TEXT,
  item_number TEXT,
  item_unit_price REAL,
  item_quantity INTEGER
);
Sample rows from `resources`:
8a1c1c45bc30d065061912fd9114fcf3, ffffc4f85b60efc5b52347df489d0238, 430, Woodwind and Brasswind, Technology, iPod nano 4th Gen 8GB (Black), 249995.001, 149.0, 4
015d2c4935c50427964a12dc3f584091, ffffac55ee02a49d1abc87ba6fc61135, 82, Best Buy for Business, Technology, Sony bloggie MHS-FS1 - camcorder - internal flash memory, BB11216668, 148.0, 1
26a02944b2f0c25f9abdeacca3ede3ee, ffff97ed93720407d70a2787475932b0, 767, Lakeshore Learning Materials, Supplies, VX748 - Best-Buy Jumbo Crayons - 12-Color Box, VX748, 69.95, 1

","resources, projects","projects.vendor_name, projects.projectid, resources.projectid, projects.project_resource_type, projects.date_posted, resources.vendor_name, resources.project_resource_type"
cars,How many cars were released in the USA in 1981?,SELECT COUNT(*) FROM production as t1 inner JOIN country as t2 ON t1.country = t2.origin WHERE t2.country = 'USA' AND t1.model_year = 1981,"CREATE TABLE `production` (
  ID INTEGER PRIMARY KEY REFERENCES price(ID) REFERENCES data(ID),
  model_year INTEGER PRIMARY KEY,
  country INTEGER REFERENCES country(origin)
);
Sample rows from `production`:
1, 1970, 1
1, 1971, 1
2, 1970, 1

CREATE TABLE `country` (
  origin INTEGER,
  country TEXT
);
Sample rows from `country`:
1, USA
2, Europe
3, Japan

","CREATE TABLE `country` (
  origin INTEGER,
  country TEXT
);
Sample rows from `country`:
1, USA
2, Europe
3, Japan

CREATE TABLE `price` (
  ID INTEGER,
  price REAL
);
Sample rows from `price`:
1, 25561.59078
2, 24221.42273
3, 27240.84373

CREATE TABLE `data` (
  ID INTEGER REFERENCES price(ID),
  mpg REAL,
  cylinders INTEGER,
  displacement REAL,
  horsepower INTEGER,
  weight INTEGER,
  acceleration REAL,
  model INTEGER,
  car_name TEXT
);
Sample rows from `data`:
1, 18.0, 8, 307.0, 130, 3504, 12.0, 70, chevrolet chevelle malibu
2, 15.0, 8, 350.0, 165, 3693, 11.5, 70, buick skylark 320
3, 18.0, 8, 318.0, 150, 3436, 11.0, 70, plymouth satellite

CREATE TABLE `production` (
  ID INTEGER PRIMARY KEY REFERENCES price(ID) REFERENCES data(ID),
  model_year INTEGER PRIMARY KEY,
  country INTEGER REFERENCES country(origin)
);
Sample rows from `production`:
1, 1970, 1
1, 1971, 1
2, 1970, 1

","production, country","production.country, country.origin, country.country, production.model_year"
books,Identify by their id all the orders that have been cancelled.,SELECT t2.order_id FROM order_status as t1 inner JOIN order_history as t2 ON t1.status_id = t2.status_id WHERE t1.status_value = 'Cancelled',"CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

","CREATE TABLE `address_status` (
  status_id INTEGER,
  address_status TEXT
);
Sample rows from `address_status`:
1, Active
2, Inactive

CREATE TABLE `author` (
  author_id INTEGER,
  author_name TEXT
);
Sample rows from `author`:
1, A. Bartlett Giamatti
2, A. Elizabeth Delany
3, A. Merritt

CREATE TABLE `book_language` (
  language_id INTEGER,
  language_code TEXT,
  language_name TEXT
);
Sample rows from `book_language`:
1, eng, English
2, en-US, United States English
3, fre, French

CREATE TABLE `country` (
  country_id INTEGER,
  country_name TEXT
);
Sample rows from `country`:
1, Afghanistan
2, Netherlands Antilles
3, Albania

CREATE TABLE `address` (
  address_id INTEGER,
  street_number TEXT,
  street_name TEXT,
  city TEXT,
  country_id INTEGER REFERENCES country(country_id)
);
Sample rows from `address`:
1, 57, Glacier Hill Avenue, Torbat-e Jām, 95
2, 86, Dottie Junction, Beaumont, 37
3, 292, Ramsey Avenue, Cayambe, 60

CREATE TABLE `customer` (
  customer_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT
);
Sample rows from `customer`:
1, Ursola, Purdy, upurdy0@cdbaby.com
2, Ruthanne, Vatini, rvatini1@fema.gov
3, Reidar, Turbitt, rturbitt2@geocities.jp

CREATE TABLE `customer_address` (
  customer_id INTEGER PRIMARY KEY REFERENCES customer(customer_id),
  address_id INTEGER PRIMARY KEY REFERENCES address(address_id),
  status_id INTEGER
);
Sample rows from `customer_address`:
1, 606, 1
2, 266, 1
3, 376, 1

CREATE TABLE `order_status` (
  status_id INTEGER,
  status_value TEXT
);
Sample rows from `order_status`:
1, Order Received
2, Pending Delivery
3, Delivery In Progress

CREATE TABLE `publisher` (
  publisher_id INTEGER,
  publisher_name TEXT
);
Sample rows from `publisher`:
1, 10/18
2, 1st Book Library
3, 1st World Library

CREATE TABLE `book` (
  book_id INTEGER,
  title TEXT,
  isbn13 TEXT,
  language_id INTEGER REFERENCES book_language(language_id),
  num_pages INTEGER,
  publication_date DATE,
  publisher_id INTEGER REFERENCES publisher(publisher_id)
);
Sample rows from `book`:
1, The World's First Love: Mary  Mother of God, 8987059752, 2, 276, 1996-09-01, 1010
2, The Illuminati, 20049130001, 1, 352, 2004-10-04, 1967
3, The Servant Leader, 23755004321, 1, 128, 2003-03-11, 1967

CREATE TABLE `book_author` (
  book_id INTEGER PRIMARY KEY REFERENCES book(book_id),
  author_id INTEGER PRIMARY KEY REFERENCES author(author_id)
);
Sample rows from `book_author`:
10539, 1
8109, 2
2792, 3

CREATE TABLE `shipping_method` (
  method_id INTEGER,
  method_name TEXT,
  cost REAL
);
Sample rows from `shipping_method`:
1, Standard, 5.9
2, Priority, 8.9
3, Express, 11.9

CREATE TABLE `cust_order` (
  order_id INTEGER,
  order_date DATETIME,
  customer_id INTEGER REFERENCES customer(None),
  shipping_method_id INTEGER REFERENCES shipping_method(None),
  dest_address_id INTEGER REFERENCES address(None)
);
Sample rows from `cust_order`:
1, 2021-07-14 10:47:19, 387, 4, 1
2, 2020-08-16 17:26:41, 1256, 2, 1
3, 2021-08-19 21:43:07, 1335, 1, 1

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
cust_order, 11434
order_history, 25283
order_line, 8573

CREATE TABLE `order_history` (
  history_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  status_id INTEGER REFERENCES order_status(None),
  status_date DATETIME
);
Sample rows from `order_history`:
1, 1, 1, 2021-07-14 17:04:28
2, 2, 1, 2020-08-16 20:23:19
3, 3, 1, 2021-08-20 05:34:51

CREATE TABLE `order_line` (
  line_id INTEGER,
  order_id INTEGER REFERENCES cust_order(None),
  book_id INTEGER REFERENCES book(None),
  price REAL
);
Sample rows from `order_line`:
1024, 2051, 10720, 3.19
1025, 899, 10105, 1.24
1026, 4994, 6503, 14.74

","order_status, order_history","order_history.order_id, order_status.status_id, order_history.status_id, order_status.status_value"
beer_factory,How many breweries are located in North America?,SELECT COUNT(brandid) FROM rootbeerbrand WHERE country = 'United States',"CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

","CREATE TABLE `customers` (
  CustomerID INTEGER,
  First TEXT,
  Last TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER,
  Email TEXT,
  PhoneNumber TEXT,
  FirstPurchaseDate DATE,
  SubscribedToEmailList TEXT,
  Gender TEXT
);
Sample rows from `customers`:
101811, Kenneth, Walton, 6715 Commonwealth Dr, Sacramento, CA, 94256, walton.k76@fastmail.com, (916) 918-1561, 2013-05-30, FALSE, M
103508, Madeleine, Jones, 3603 Leola Way, Sacramento, CA, 94258, j_madeleine@gmail.com, (916) 186-9423, 2013-02-06, FALSE, F
104939, Damen, Wheeler, 6740 Branwood Way, Orangevale, CA, 95662, dwheeler@outlook.com, (916) 164-1156, 2013-04-11, FALSE, M

CREATE TABLE `geolocation` (
  LocationID INTEGER REFERENCES location(LocationID),
  Latitude REAL,
  Longitude REAL
);
Sample rows from `geolocation`:
0, 0.0, 0.0
1, 38.566129, -121.426432
2, 38.559615, -121.42243

CREATE TABLE `location` (
  LocationID INTEGER REFERENCES geolocation(LocationID),
  LocationName TEXT,
  StreetAddress TEXT,
  City TEXT,
  State TEXT,
  ZipCode INTEGER
);
Sample rows from `location`:
0, LOST, None, None, None, None
1, Sac State American River Courtyard, 6000 J St, Sacramento, CA, 95819
2, Sac State Union, 6000 J St, Sacramento, CA, 95819

CREATE TABLE `rootbeerbrand` (
  BrandID INTEGER,
  BrandName TEXT,
  FirstBrewedYear INTEGER,
  BreweryName TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  Description TEXT,
  CaneSugar TEXT,
  CornSyrup TEXT,
  Honey TEXT,
  ArtificialSweetener TEXT,
  Caffeinated TEXT,
  Alcoholic TEXT,
  AvailableInCans TEXT,
  AvailableInBottles TEXT,
  AvailableInKegs TEXT,
  Website TEXT,
  FacebookPage TEXT,
  Twitter TEXT,
  WholesaleCost REAL,
  CurrentRetailPrice REAL
);
Sample rows from `rootbeerbrand`:
10001, A&W, 1919, Dr Pepper Snapple Group, Lodi, CA, United States, After setting up the first A&W Root Beer stand in California in 1919, Roy Allen partnered with Frank Wright to name their beverage A&W. The two partners then set out to open more root beer stands all across the United States., FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, http://www.rootbeer.com/, None, None, 0.42, 1.0
10002, A.J. Stephans, 1926, AJ Stephans Beverages, Fall River, MA, United States, AJ Stephans Company makes 
the finest elixirs and mixers in New England, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, http://www.ajstephans.com/, None, None, 0.98, 3.0
10003, Abita, 1986, Abita Brewery, Covington, LA, United States, Abita Root Beer is made with a hot mix process using spring water, herbs, vanilla and yucca (which creates foam). Unlike most soft drink manufacturers, Abita sweetens its root beer with pure Louisiana cane sugar. The resulting taste is reminiscent of soft, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, https://abita.com/brews/our_brews/abita-root-beer, None, None, 1.13, 3.0

CREATE TABLE `rootbeer` (
  RootBeerID INTEGER,
  BrandID INTEGER REFERENCES rootbeerbrand(BrandID),
  ContainerType TEXT,
  LocationID INTEGER REFERENCES location(LocationID) REFERENCES geolocation(LocationID),
  PurchaseDate DATE
);
Sample rows from `rootbeer`:
100000, 10001, Bottle, 1, 2015-07-03
100001, 10001, Bottle, 1, 2016-05-09
100002, 10001, Can, 2, 2015-05-24

CREATE TABLE `rootbeerreview` (
  CustomerID INTEGER PRIMARY KEY REFERENCES customers(CustomerID),
  BrandID INTEGER PRIMARY KEY REFERENCES rootbeerbrand(BrandID),
  StarRating INTEGER,
  ReviewDate DATE,
  Review TEXT
);
Sample rows from `rootbeerreview`:
101811, 10012, 5, 2013-07-15, None
101811, 10014, 1, 2013-07-08, None
101811, 10015, 3, 2013-07-25, None

CREATE TABLE `transaction` (
  TransactionID INTEGER,
  CreditCardNumber INTEGER,
  CustomerID INTEGER REFERENCES customers(CustomerID),
  TransactionDate DATE,
  CreditCardType TEXT,
  LocationID INTEGER REFERENCES location(LocationID),
  RootBeerID INTEGER REFERENCES rootbeer(RootBeerID),
  PurchasePrice REAL
);
Sample rows from `transaction`:
100000, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105661, 3.0
100001, 6011583832864739, 864896, 2014-07-07, Discover, 2, 105798, 3.0
100002, 6011583832864739, 864896, 2014-07-07, Discover, 2, 102514, 3.0

",rootbeerbrand,"brandid, country"
airline,What is the tail number of the flight with air carrier named Iscargo Hf: ICQ and arrival time of 1000 and below?,SELECT t2.tail_num FROM `air carriers` as t1 inner JOIN airlines as t2 ON t1.code = t2.op_carrier_airline_id WHERE t2.arr_time <= 1000 AND t1.description = 'Iscargo Hf: ICQ',"CREATE TABLE `air carriers` (
  Code INTEGER,
  Description TEXT
);
Sample rows from `air carriers`:
19031, Mackey International Inc.: MAC
19032, Munz Northern Airlines Inc.: XY
19033, Cochise Airlines Inc.: COC

CREATE TABLE `airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

","CREATE TABLE `Air Carriers` (
  Code INTEGER,
  Description TEXT
);
Sample rows from `Air Carriers`:
19031, Mackey International Inc.: MAC
19032, Munz Northern Airlines Inc.: XY
19033, Cochise Airlines Inc.: COC

CREATE TABLE `Airports` (
  Code TEXT PRIMARY KEY,
  Description TEXT
);
Sample rows from `Airports`:
01A, Afognak Lake, AK: Afognak Lake Airport
03A, Granite Mountain, AK: Bear Creek Mining Strip
04A, Lik, AK: Lik Mining Camp

CREATE TABLE `Airlines` (
  FL_DATE TEXT,
  OP_CARRIER_AIRLINE_ID INTEGER REFERENCES Air Carriers(Code),
  TAIL_NUM TEXT,
  OP_CARRIER_FL_NUM INTEGER,
  ORIGIN_AIRPORT_ID INTEGER,
  ORIGIN_AIRPORT_SEQ_ID INTEGER,
  ORIGIN_CITY_MARKET_ID INTEGER,
  ORIGIN TEXT REFERENCES Airports(Code),
  DEST_AIRPORT_ID INTEGER,
  DEST_AIRPORT_SEQ_ID INTEGER,
  DEST_CITY_MARKET_ID INTEGER,
  DEST TEXT REFERENCES Airports(Code),
  CRS_DEP_TIME INTEGER,
  DEP_TIME INTEGER,
  DEP_DELAY INTEGER,
  DEP_DELAY_NEW INTEGER,
  ARR_TIME INTEGER,
  ARR_DELAY INTEGER,
  ARR_DELAY_NEW INTEGER,
  CANCELLED INTEGER,
  CANCELLATION_CODE TEXT,
  CRS_ELAPSED_TIME INTEGER,
  ACTUAL_ELAPSED_TIME INTEGER,
  CARRIER_DELAY INTEGER,
  WEATHER_DELAY INTEGER,
  NAS_DELAY INTEGER,
  SECURITY_DELAY INTEGER,
  LATE_AIRCRAFT_DELAY INTEGER
);
Sample rows from `Airlines`:
2018/8/1, 19805, N956AN, 1587, 12478, 1247805, 31703, JFK, 14107, 1410702, 30466, PHX, 1640, 1649, 9, 9, 2006, 44, 44, 0, None, 342, 377, 9, 0, 35, 0, 0
2018/8/1, 19805, N973AN, 1588, 14107, 1410702, 30466, PHX, 11618, 1161802, 31703, EWR, 1512, 1541, 29, 29, 2350, 53, 53, 0, None, 285, 309, 0, 0, 53, 0, 0
2018/8/1, 19805, N9006, 1590, 11042, 1104205, 30647, CLE, 11298, 1129806, 30194, DFW, 744, 741, -3, 0, 938, -2, 0, 0, None, 176, 177, None, None, None, None, None

","air carriers, airlines","airlines.tail_num, air carriers.code, airlines.op_carrier_airline_id, airlines.arr_time, air carriers.description"
professional_basketball,Give the player id of the man who had the most turnovers whose team missed the playoffs in year 1988.,SELECT t2.playerid FROM players_teams as t1 inner JOIN players as t2 ON t1.playerid = t2.playerid WHERE t1.postgp = 0 AND t1.year = 1988 ORDER BY t1.turnovers DESC LIMIT 1,"CREATE TABLE `players_teams` (
  id INTEGER,
  playerID TEXT REFERENCES players(None),
  year INTEGER REFERENCES teams(year),
  stint INTEGER,
  tmID TEXT REFERENCES teams(tmID),
  lgID TEXT,
  GP INTEGER,
  GS INTEGER,
  minutes INTEGER,
  points INTEGER,
  oRebounds INTEGER,
  dRebounds INTEGER,
  rebounds INTEGER,
  assists INTEGER,
  steals INTEGER,
  blocks INTEGER,
  turnovers INTEGER,
  PF INTEGER,
  fgAttempted INTEGER,
  fgMade INTEGER,
  ftAttempted INTEGER,
  ftMade INTEGER,
  threeAttempted INTEGER,
  threeMade INTEGER,
  PostGP INTEGER,
  PostGS INTEGER,
  PostMinutes INTEGER,
  PostPoints INTEGER,
  PostoRebounds INTEGER,
  PostdRebounds INTEGER,
  PostRebounds INTEGER,
  PostAssists INTEGER,
  PostSteals INTEGER,
  PostBlocks INTEGER,
  PostTurnovers INTEGER,
  PostPF INTEGER,
  PostfgAttempted INTEGER,
  PostfgMade INTEGER,
  PostftAttempted INTEGER,
  PostftMade INTEGER,
  PostthreeAttempted INTEGER,
  PostthreeMade INTEGER,
  note TEXT
);
Sample rows from `players_teams`:
1, abdelal01, 1990, 1, POR, NBA, 43, 0, 290, 135, 27, 62, 89, 12, 4, 12, 22, 39, 116, 55, 44, 25, 0, 0, 5, 0, 13, 4, 1, 2, 3, 0, 0, 0, 0, 0, 6, 2, 0, 0, 0, 0, None
2, abdelal01, 1991, 1, POR, NBA, 71, 0, 934, 432, 81, 179, 260, 30, 25, 17, 66, 132, 361, 178, 101, 76, 0, 0, 8, 0, 25, 12, 0, 4, 4, 2, 0, 0, 2, 4, 10, 5, 4, 2, 0, 0, None
3, abdelal01, 1992, 1, MIL, NBA, 12, 0, 159, 64, 12, 25, 37, 10, 6, 4, 0, 24, 56, 26, 16, 12, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, None

CREATE TABLE `players` (
  playerID TEXT PRIMARY KEY,
  useFirst TEXT,
  firstName TEXT,
  middleName TEXT,
  lastName TEXT,
  nameGiven TEXT,
  fullGivenName TEXT,
  nameSuffix TEXT,
  nameNick TEXT,
  pos TEXT,
  firstseason INTEGER,
  lastseason INTEGER,
  height REAL,
  weight INTEGER,
  college TEXT,
  collegeOther TEXT,
  birthDate DATE,
  birthCity TEXT,
  birthState TEXT,
  birthCountry TEXT,
  highSchool TEXT,
  hsCity TEXT,
  hsState TEXT,
  hsCountry TEXT,
  deathDate DATE,
  race TEXT
);
Sample rows from `players`:
abdelal01, Alaa, Alaa, None, Abdelnaby, None, None, None, None, F-C, 0, 0, 82.0, 240, Duke, None, 1968-06-24, Cairo, None, EGY, Bloomfield Senior, Bloomfield, NJ, USA, 0000-00-00, B
abdulka01, Kareem, Kareem, None, Abdul-Jabbar, None, Ferdinand Lewis Alcindor, Jr., None, Lew, Cap, C, 0, 0, 85.0, 225, UCLA, None, 1947-04-16, New York, NY, USA, Power Memorial, New York, NY, USA, 0000-00-00, B
abdulma01, Mahdi, Mahdi, None, Abdul-Rahman, None, Walter Raphael Hazzard, Jr., None, Walt, G, 0, 0, 74.0, 185, UCLA, Santa Monica City, 1942-04-15, Wilmington, DE, USA, Overbrook / Moton, Philadelphia / Easton, PA / MD, USA, 2011-11-18, B

","CREATE TABLE `awards_players` (
  playerID TEXT PRIMARY KEY REFERENCES players(playerID),
  award TEXT PRIMARY KEY,
  year INTEGER PRIMARY KEY,
  lgID TEXT,
  note TEXT,
  pos TEXT
);
Sample rows from `awards_players`:
abdulka01, All-Defensive Second Team, 1969, NBA, None, None
abdulka01, All-NBA Second Team, 1969, NBA, None, C
abdulka01, Rookie of the Year, 1969, NBA, None, None

CREATE TABLE `coaches` (
  coachID TEXT PRIMARY KEY,
  year INTEGER PRIMARY KEY REFERENCES teams(year),
  tmID TEXT PRIMARY KEY REFERENCES teams(tmID),
  lgID TEXT,
  stint INTEGER PRIMARY KEY,
  won INTEGER,
  lost INTEGER,
  post_wins INTEGER,
  post_losses INTEGER
);
Sample rows from `coaches`:
adelmri01, 1988, POR, NBA, 2, 14, 21, 0, 3
adelmri01, 1989, POR, NBA, 1, 59, 23, 12, 9
adelmri01, 1990, POR, NBA, 1, 63, 19, 9, 7

CREATE TABLE `draft` (
  id INTEGER,
  draftYear INTEGER REFERENCES teams(year),
  draftRound INTEGER,
  draftSelection INTEGER,
  draftOverall INTEGER,
  tmID TEXT REFERENCES teams(tmID),
  firstName TEXT,
  lastName TEXT,
  suffixName TEXT,
  playerID TEXT,
  draftFrom TEXT,
  lgID TEXT
);
Sample rows from `draft`:
1, 1967, 0, 0, 0, ANA, Darrell, Hardy, None, hardyda01, Baylor, ABA
2, 1967, 0, 0, 0, ANA, Bob, Krulish, None, None, Pacific, ABA
3, 1967, 0, 0, 0, ANA, Bob, Lewis, None, lewisbo01, North Carolina, ABA

CREATE TABLE `player_allstar` (
  playerID TEXT PRIMARY KEY REFERENCES players(playerID),
  last_name TEXT,
  first_name TEXT,
  season_id INTEGER PRIMARY KEY,
  conference TEXT,
  league_id TEXT,
  games_played INTEGER,
  minutes INTEGER,
  points INTEGER,
  o_rebounds INTEGER,
  d_rebounds INTEGER,
  rebounds INTEGER,
  assists INTEGER,
  steals INTEGER,
  blocks INTEGER,
  turnovers INTEGER,
  personal_fouls INTEGER,
  fg_attempted INTEGER,
  fg_made INTEGER,
  ft_attempted INTEGER,
  ft_made INTEGER,
  three_attempted INTEGER,
  three_made INTEGER
);
Sample rows from `player_allstar`:
abdulka01, Abdul-Jabbar, Kareem, 1969, East, NBA, 1, 18, 10, None, None, 11, 4, None, None, None, None, 8, 4, 2, 2, None, None
abdulka01, Abdul-Jabbar, Kareem, 1970, West, NBA, 1, 30, 19, None, None, 14, 1, None, None, None, None, 16, 8, 4, 3, None, None
abdulka01, Abdul-Jabbar, Kareem, 1971, West, NBA, 1, 19, 12, None, None, 7, 2, None, None, None, None, 10, 5, 2, 2, None, None

CREATE TABLE `players` (
  playerID TEXT PRIMARY KEY,
  useFirst TEXT,
  firstName TEXT,
  middleName TEXT,
  lastName TEXT,
  nameGiven TEXT,
  fullGivenName TEXT,
  nameSuffix TEXT,
  nameNick TEXT,
  pos TEXT,
  firstseason INTEGER,
  lastseason INTEGER,
  height REAL,
  weight INTEGER,
  college TEXT,
  collegeOther TEXT,
  birthDate DATE,
  birthCity TEXT,
  birthState TEXT,
  birthCountry TEXT,
  highSchool TEXT,
  hsCity TEXT,
  hsState TEXT,
  hsCountry TEXT,
  deathDate DATE,
  race TEXT
);
Sample rows from `players`:
abdelal01, Alaa, Alaa, None, Abdelnaby, None, None, None, None, F-C, 0, 0, 82.0, 240, Duke, None, 1968-06-24, Cairo, None, EGY, Bloomfield Senior, Bloomfield, NJ, USA, 0000-00-00, B
abdulka01, Kareem, Kareem, None, Abdul-Jabbar, None, Ferdinand Lewis Alcindor, Jr., None, Lew, Cap, C, 0, 0, 85.0, 225, UCLA, None, 1947-04-16, New York, NY, USA, Power Memorial, New York, NY, USA, 0000-00-00, B
abdulma01, Mahdi, Mahdi, None, Abdul-Rahman, None, Walter Raphael Hazzard, Jr., None, Walt, G, 0, 0, 74.0, 185, UCLA, Santa Monica City, 1942-04-15, Wilmington, DE, USA, Overbrook / Moton, Philadelphia / Easton, PA / MD, USA, 2011-11-18, B

CREATE TABLE `teams` (
  year INTEGER PRIMARY KEY,
  lgID TEXT,
  tmID TEXT PRIMARY KEY,
  franchID TEXT,
  confID TEXT,
  divID TEXT,
  rank INTEGER,
  confRank INTEGER,
  playoff TEXT,
  name TEXT,
  o_fgm INTEGER,
  o_ftm INTEGER,
  o_pts INTEGER,
  d_pts INTEGER,
  homeWon INTEGER,
  homeLost INTEGER,
  awayWon INTEGER,
  awayLost INTEGER,
  won INTEGER,
  lost INTEGER,
  games INTEGER,
  arena TEXT
);
Sample rows from `teams`:
1937, NBL, AFS, AFS, None, EA, 1, 0, CF, Akron Firestone Non-Skids, 249, 183, 681, 578, 8, 1, 5, 3, 14, 4, 18, None
1937, NBL, AGW, AGW, None, EA, 2, 0, WC, Akron Goodyear Wingfoots, 243, 159, 645, 498, 8, 1, 5, 4, 13, 5, 18, None
1937, NBL, BFB, BFB, None, EA, 4, 0, None, Buffalo Bisons, 108, 46, 262, 275, 2, 2, 1, 4, 3, 6, 9, None

CREATE TABLE `awards_coaches` (
  id INTEGER,
  year INTEGER REFERENCES coaches(year),
  coachID TEXT REFERENCES coaches(coachID),
  award TEXT,
  lgID TEXT,
  note TEXT
);
Sample rows from `awards_coaches`:
1, 1962, gallaha01, NBA Coach of the Year, NBA, None
2, 1963, hannual01, NBA Coach of the Year, NBA, None
3, 1964, auerbre01, NBA Coach of the Year, NBA, None

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);
Sample rows from `sqlite_sequence`:
awards_coaches, 61
players_teams, 23751
series_post, 775

CREATE TABLE `players_teams` (
  id INTEGER,
  playerID TEXT REFERENCES players(None),
  year INTEGER REFERENCES teams(year),
  stint INTEGER,
  tmID TEXT REFERENCES teams(tmID),
  lgID TEXT,
  GP INTEGER,
  GS INTEGER,
  minutes INTEGER,
  points INTEGER,
  oRebounds INTEGER,
  dRebounds INTEGER,
  rebounds INTEGER,
  assists INTEGER,
  steals INTEGER,
  blocks INTEGER,
  turnovers INTEGER,
  PF INTEGER,
  fgAttempted INTEGER,
  fgMade INTEGER,
  ftAttempted INTEGER,
  ftMade INTEGER,
  threeAttempted INTEGER,
  threeMade INTEGER,
  PostGP INTEGER,
  PostGS INTEGER,
  PostMinutes INTEGER,
  PostPoints INTEGER,
  PostoRebounds INTEGER,
  PostdRebounds INTEGER,
  PostRebounds INTEGER,
  PostAssists INTEGER,
  PostSteals INTEGER,
  PostBlocks INTEGER,
  PostTurnovers INTEGER,
  PostPF INTEGER,
  PostfgAttempted INTEGER,
  PostfgMade INTEGER,
  PostftAttempted INTEGER,
  PostftMade INTEGER,
  PostthreeAttempted INTEGER,
  PostthreeMade INTEGER,
  note TEXT
);
Sample rows from `players_teams`:
1, abdelal01, 1990, 1, POR, NBA, 43, 0, 290, 135, 27, 62, 89, 12, 4, 12, 22, 39, 116, 55, 44, 25, 0, 0, 5, 0, 13, 4, 1, 2, 3, 0, 0, 0, 0, 0, 6, 2, 0, 0, 0, 0, None
2, abdelal01, 1991, 1, POR, NBA, 71, 0, 934, 432, 81, 179, 260, 30, 25, 17, 66, 132, 361, 178, 101, 76, 0, 0, 8, 0, 25, 12, 0, 4, 4, 2, 0, 0, 2, 4, 10, 5, 4, 2, 0, 0, None
3, abdelal01, 1992, 1, MIL, NBA, 12, 0, 159, 64, 12, 25, 37, 10, 6, 4, 0, 24, 56, 26, 16, 12, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, None

CREATE TABLE `series_post` (
  id INTEGER,
  year INTEGER REFERENCES teams(year) REFERENCES teams(year),
  round TEXT,
  series TEXT,
  tmIDWinner TEXT REFERENCES teams(tmID),
  lgIDWinner TEXT,
  tmIDLoser TEXT REFERENCES teams(tmID),
  lgIDLoser TEXT,
  W INTEGER,
  L INTEGER
);
Sample rows from `series_post`:
1, 1946, F, O, PHW, NBA, CHS, NBA, 4, 1
2, 1946, QF, M, NYK, NBA, CLR, NBA, 2, 1
3, 1946, QF, M, PHW, NBA, STB, NBA, 2, 1

","players_teams, players","players.playerid, players_teams.playerid, players_teams.postgp, players_teams.year, players_teams.turnovers"
simpson_episodes,Please list any three episodes that have an excellent rating.,SELECT title FROM episode WHERE rating BETWEEN 7 AND 10 LIMIT 3;,"CREATE TABLE `episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

","CREATE TABLE `Episode` (
  episode_id TEXT PRIMARY KEY,
  season INTEGER,
  episode INTEGER,
  number_in_series INTEGER,
  title TEXT,
  summary TEXT,
  air_date TEXT,
  episode_image TEXT,
  rating REAL,
  votes INTEGER
);
Sample rows from `Episode`:
S20-E1, 20, 1, 421, Sex, Pies and Idiot Scrapes, Homer and Ned go into business together as bounty hunters, and Marge takes a job at an erotic bakery., 2008-09-28, https://m.media-amazon.com/images/M/MV5BMTYwMzk2Njg5N15BMl5BanBnXkFtZTgwMzA2MDQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.2, 1192
S20-E2, 20, 2, 422, Lost Verizon, Bart gets in trouble with Marge after she finds out that he has Denis Leary's cell phone and is using it to make prank phone calls., 2008-10-05, https://m.media-amazon.com/images/M/MV5BMjMyNzU4ODMzN15BMl5BanBnXkFtZTgwMTg5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1055
S20-E3, 20, 3, 423, Double, Double, Boy in Trouble, Bart trades lives with his multi-millionaire lookalike, but discovers that his lookalike's life isn't all he thought it would be., 2008-10-19, https://m.media-amazon.com/images/M/MV5BMjA1ODM2ODkwM15BMl5BanBnXkFtZTgwOTc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg, 7.0, 1015

CREATE TABLE `Person` (
  name TEXT PRIMARY KEY,
  birthdate TEXT,
  birth_name TEXT,
  birth_place TEXT,
  birth_region TEXT,
  birth_country TEXT,
  height_meters REAL,
  nickname TEXT
);
Sample rows from `Person`:
Marc Wilmore, 1963-05-04, Marc Edward Wilmore, None, California, USA, None, None
Valentina Garza, 1975-03-30, Valentina Lantigua, USA, None, None, None, None
J. Stewart Burns, 1969-12-04, Joseph Stewart Burns, USA, None, None, None, None

CREATE TABLE `Award` (
  award_id INTEGER,
  organization TEXT,
  year INTEGER,
  award_category TEXT,
  award TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  episode_id TEXT REFERENCES Episode(episode_id),
  season TEXT,
  song TEXT,
  result TEXT
);
Sample rows from `Award`:
325, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Dan Castellaneta, None, S20-E18, None, None, Winner
326, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Hank Azaria, None, S20-E16, None, None, Nominee
327, Primetime Emmy Awards, 2009, Primetime Emmy, Outstanding Voice-Over Performance, Harry Shearer, None, S20-E8, None, None, Nominee

CREATE TABLE `Character_Award` (
  award_id INTEGER REFERENCES Award(award_id),
  character TEXT
);
Sample rows from `Character_Award`:
325, Homer Simpson
326, Moe Szyslak
327, Kent Brockman

CREATE TABLE `Credit` (
  episode_id TEXT REFERENCES Episode(episode_id),
  category TEXT,
  person TEXT REFERENCES Person(name),
  role TEXT,
  credited TEXT
);
Sample rows from `Credit`:
S20-E10, Casting Department, Bonita Pietila, casting, true
S20-E13, Casting Department, Bonita Pietila, casting, true
S20-E14, Casting Department, Bonita Pietila, casting, true

CREATE TABLE `Keyword` (
  episode_id TEXT PRIMARY KEY REFERENCES Episode(episode_id),
  keyword TEXT PRIMARY KEY
);
Sample rows from `Keyword`:
S20-E1, 1930s to 2020s
S20-E1, erotic bakery
S20-E1, cake

CREATE TABLE `Vote` (
  episode_id TEXT REFERENCES Episode(episode_id),
  stars INTEGER,
  votes INTEGER,
  percent REAL
);
Sample rows from `Vote`:
S20-E1, 2, 16, 1.3
S20-E1, 3, 20, 1.7
S20-E1, 4, 36, 3.0

",episode,"title, rating"
menu,"Among all the dishes that were once free, what is the name of the dish that had appeared on most menus?",SELECT name FROM dish WHERE lowest_price = 0 ORDER BY menus_appeared DESC LIMIT 1,"CREATE TABLE `dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

","CREATE TABLE `Dish` (
  id INTEGER,
  name TEXT,
  description TEXT,
  menus_appeared INTEGER,
  times_appeared INTEGER,
  first_appeared INTEGER,
  last_appeared INTEGER,
  lowest_price REAL,
  highest_price REAL
);
Sample rows from `Dish`:
1, Consomme printaniere royal, None, 8, 8, 1897, 1927, 0.2, 0.4
2, Chicken gumbo, None, 111, 117, 1895, 1960, 0.1, 0.8
3, Tomato aux croutons, None, 14, 14, 1893, 1917, 0.25, 0.4

CREATE TABLE `Menu` (
  id INTEGER,
  name TEXT,
  sponsor TEXT,
  event TEXT,
  venue TEXT,
  place TEXT,
  physical_description TEXT,
  occasion TEXT,
  notes TEXT,
  call_number TEXT,
  keywords TEXT,
  language TEXT,
  date DATE,
  location TEXT,
  location_type TEXT,
  currency TEXT,
  currency_symbol TEXT,
  status TEXT,
  page_count INTEGER,
  dish_count INTEGER
);
Sample rows from `Menu`:
12463, None, HOTEL EASTMAN, BREAKFAST, COMMERCIAL, HOT SPRINGS, AR, CARD; 4.75X7.5;, EASTER;, , 1900-2822, None, None, 1900-04-15, Hotel Eastman, None, None, None, complete, 2, 67
12464, , REPUBLICAN HOUSE, [DINNER], COMMERCIAL, MILWAUKEE, [WI];, CARD; ILLUS; COL; 7.0X9.0;, EASTER;, WEDGEWOOD BLUE CARD; WHITE EMBOSSED GREEK KEY BORDER; ""EASTER SUNDAY"" EMBOSSED IN WHITE; VIOLET COLORED SPRAY OF FLOWERS IN UPPER LEFT CORNER;, 1900-2825, None, None, 1900-04-15, Republican House, None, None, None, complete, 2, 34
12465, None, NORDDEUTSCHER LLOYD BREMEN, FRUHSTUCK/BREAKFAST;, COMMERCIAL, DAMPFER KAISER WILHELM DER GROSSE;, CARD; ILLU; COL; 5.5X8.0;, , MENU IN GERMAN AND ENGLISH; ILLUS, STEAMSHIP AND SAILING VESSEL;, 1900-2827, None, None, 1900-04-16, Norddeutscher Lloyd Bremen, None, None, None, complete, 2, 84

CREATE TABLE `MenuPage` (
  id INTEGER,
  menu_id INTEGER REFERENCES Menu(id),
  page_number INTEGER,
  image_id REAL,
  full_height INTEGER,
  full_width INTEGER,
  uuid TEXT
);
Sample rows from `MenuPage`:
119, 12460, 1, 1603595.0, 7230, 5428, 510d47e4-2955-a3d9-e040-e00a18064a99
120, 12460, 2, 1603596.0, 5428, 7230, 510d47e4-2956-a3d9-e040-e00a18064a99
121, 12460, 3, 1603597.0, 7230, 5428, 510d47e4-2957-a3d9-e040-e00a18064a99

CREATE TABLE `MenuItem` (
  id INTEGER,
  menu_page_id INTEGER REFERENCES MenuPage(id),
  price REAL,
  high_price REAL,
  dish_id INTEGER REFERENCES Dish(id),
  created_at TEXT,
  updated_at TEXT,
  xpos REAL,
  ypos REAL
);
Sample rows from `MenuItem`:
1, 1389, 0.4, None, 1, 2011-03-28 15:00:44 UTC, 2011-04-19 04:33:15 UTC, 0.111429, 0.254735
2, 1389, 0.6, None, 2, 2011-03-28 15:01:13 UTC, 2011-04-19 15:00:54 UTC, 0.438571, 0.254735
3, 1389, 0.4, None, 3, 2011-03-28 15:01:40 UTC, 2011-04-19 19:10:05 UTC, 0.14, 0.261922

",dish,"name, lowest_price, menus_appeared"
